WTF::StringImpl *WebKit::NetworkCache::makeRecordsDirectoryPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebKit::NetworkCache::makeVersionedDirectoryPath(a2, a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::makeVersionedDirectoryPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  v6[0] = (uint64_t)"Version ";
  v6[1] = 9;
  unsigned int v5 = 17;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(v6, &v5, &v4);
  if (v4)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v8 = *a1;
  if (v5 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v5;
    unsigned int v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, void *a6@<X8>)
{
  int v9 = result;
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v11 = v16[0];
        if (v16[0])
        {
          v12 = (unsigned char *)(v16[0] + 20);
          *(_DWORD *)v16[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(void *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          if (a4)
          {
            if (a4 == 1) {
              unsigned char *v12 = a3->i8[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)(v11 + 20), a3, a4);
            }
          }
          uint64_t v13 = 0;
          do
          {
            *((unsigned char *)&v16[1] + v13-- + 4) = (a5 % 0xA) | 0x30;
            BOOL v14 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v14);
          if (v13 + 14 <= 13) {
            uint64_t result = (uint64_t)memcpy(&v12[a4], (char *)&v16[1] + v13 + 5, -v13);
          }
        }
        goto LABEL_12;
      }
LABEL_15:
      uint64_t v11 = 0;
      goto LABEL_12;
    }
LABEL_16:
    uint64_t v11 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if (!result) {
    goto LABEL_16;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_15;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v11 = v16[0];
  if (v16[0])
  {
    v15 = (char *)(v16[0] + 20);
    *(_DWORD *)v16[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(void *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v15, a3, a4, a5);
  }
LABEL_12:
  *a6 = v11;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  int v3 = 0;
  int v4 = *(_DWORD *)(result + 8);
  unsigned int v5 = *a2;
  do
  {
    ++v3;
    BOOL v6 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v6);
  if (((v3 | v4) & 0x80000000) == 0)
  {
    BOOL v7 = __OFADD__(v4, v3);
    uint64_t v8 = (v4 + v3);
    if (!v7) {
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v8, 1, *(int8x16_t **)result, *(void *)(result + 8), *a2, a3);
    }
  }
  *a3 = 0;
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::makeBlobDirectoryPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WebKit::NetworkCache::makeVersionedDirectoryPath(a2, a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::deleteOldVersions(WebKit::NetworkCache::Storage *this)
{
  uint64_t v1 = *((void *)this + 40);
  WTF::String::isolatedCopy();
  v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9CB678;
  BOOL v6 = v2;
  v2[1] = v5;
  MEMORY[0x19972E4D0](v1, &v6);
  int v3 = v6;
  BOOL v6 = 0;
  if (v3) {
    (*(void (**)(void *))(*v3 + 8))(v3);
  }
  return 0;
}

uint64_t WebKit::NetworkCache::Storage::synchronize(uint64_t this)
{
  if (!*(unsigned char *)(this + 80))
  {
    uint64_t v1 = this;
    if (!*(unsigned char *)(this + 81))
    {
      *(unsigned char *)(this + 80) = 1;
      uint64_t v2 = *(void *)(this + 320);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this);
      int v3 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v3 = &unk_1EE9CB218;
      v3[1] = v1;
      v3[2] = v1;
      uint64_t v4 = (uint64_t)v3;
      MEMORY[0x19972E4D0](v2, &v4);
      this = v4;
      uint64_t v4 = 0;
      if (this) {
        return (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebKit::NetworkCache::Cache::Cache(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4, char a5, uint64_t a6)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  BOOL v7 = (unsigned int *)(a1 + 8);
  uint64_t v8 = *a4;
  *a4 = 0;
  *(void *)(a1 + 16) = v8;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
  *(_OWORD *)(a1 + 32) = 0u;
  int v9 = (WebCore::LowPowerModeNotifier **)(a1 + 32);
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a6;
  uint64_t v11 = *a3;
  if (*a3) {
    *v11 += 2;
  }
  *(void *)(a1 + 80) = v11;
  if ((a5 & 4) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7, a1);
    v12 = *(atomic_uint **)(a1 + 8);
    if (v12) {
      atomic_fetch_add(v12, 1u);
    }
    v20 = (WTF *)v12;
    std::make_unique[abi:sn180100]<WebCore::LowPowerModeNotifier,WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0>((uint64_t *)out_token, (uint64_t *)&v20);
    BOOL v14 = *v9;
    *int v9 = *(WebCore::LowPowerModeNotifier **)out_token;
    if (v14) {
      WebCore::LowPowerModeNotifier::operator delete(v14, 0x18uLL);
    }
    v15 = (unsigned int *)v20;
    v20 = 0;
    *(void *)out_token = 0;
    if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v13);
    }
    if ((WebCore::LowPowerModeNotifier::isLowPowerModeEnabled(*v9) & 1) == 0)
    {
      v16 = *(atomic_uchar *volatile **)(a1 + 16);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v16);
      v17 = (WebKit::NetworkCache::SpeculativeLoadManager *)WTF::fastMalloc((WTF *)0x48);
      WebKit::NetworkCache::SpeculativeLoadManager::SpeculativeLoadManager((uint64_t)v17, a1, (atomic_uchar **)v16);
      std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100]((WebKit::NetworkCache::SpeculativeLoadManager **)(a1 + 40), v17);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*(atomic_uchar **)v16);
    }
  }
  if ((a5 & 2) != 0)
  {
    out_token[0] = 0;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = ___ZN6WebKit12NetworkCache5CacheC2ERNS_14NetworkProcessERKN3WTF6StringEONS4_3RefINS0_7StorageENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEENS4_9OptionSetINS0_11CacheOptionEEEN3PAL9SessionIDE_block_invoke;
    handler[3] = &__block_descriptor_tmp;
    handler[4] = a1;
    notify_register_dispatch("com.apple.WebKit.Cache.dump", out_token, MEMORY[0x1E4F14428], handler);
  }
  return a1;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::LowPowerModeNotifier,WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  unsigned int v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v6 = *a2;
  *a2 = 0;
  *unsigned int v5 = &unk_1EE9CA900;
  v5[1] = v6;
  uint64_t v8 = v5;
  MEMORY[0x199735210](v4, &v8);
  *a1 = v4;
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WebKit::NetworkCache::SpeculativeLoadManager *std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100](WebKit::NetworkCache::SpeculativeLoadManager **a1, WebKit::NetworkCache::SpeculativeLoadManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::SpeculativeLoadManager::~SpeculativeLoadManager(result);
    return (WebKit::NetworkCache::SpeculativeLoadManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void *WebKit::NetworkCache::BlobStorage::BlobStorage(void *result, _DWORD **a2, uint64_t a3)
{
  int v3 = *a2;
  if (*a2) {
    *v3 += 2;
  }
  WebKit::NetworkCache::SpeculativeLoadManager *result = v3;
  result[1] = a3;
  result[2] = 0;
  return result;
}

WTF::StringImpl *WebKit::WebProcess::platformSetWebsiteDataStoreParameters(uint64_t a1, uint64_t a2)
{
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 24), (const WebKit::SandboxExtensionHandle *)a2);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 48), v4);
  uint64_t result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 88), v5);
  if (*(unsigned char *)(a2 + 104)) {
    uint64_t result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 96), v7);
  }
  if (*(unsigned char *)(a2 + 120)) {
    uint64_t result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 112), v7);
  }
  if (*(unsigned char *)(a2 + 136)) {
    uint64_t result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 128), v7);
  }
  uint64_t v8 = *(WTF::StringImpl **)(a2 + 40);
  if (v8 && *((_DWORD *)v8 + 1))
  {
    *(_DWORD *)v8 += 2;
    v19 = v8;
    v21[0] = (WTF *)"/JSC.config";
    v21[1] = (WTF *)12;
    uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v19, (uint64_t *)v21, &v20);
    if (v20)
    {
      v10 = v19;
      v19 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      WTF::String::latin1((uint64_t *)v21, (WTF::String *)&v20);
      uint64_t v11 = v21[0];
      WTF::String::latin1((uint64_t *)&v18, (WTF::String *)(a1 + 288));
      if (v11) {
        uint64_t v13 = (WTF *)((char *)v11 + 16);
      }
      else {
        uint64_t v13 = 0;
      }
      if (v18) {
        BOOL v14 = (char *)v18 + 16;
      }
      else {
        BOOL v14 = 0;
      }
      JSC::processConfigFile(v13, "com.apple.WebKit.WebContent", v14, v12);
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
      v17 = v21[0];
      v21[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          WTF::fastFree(v17, v15);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
      uint64_t result = v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void sub_1986ED93C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 1) {
      WTF::fastFree(a13, a2);
    }
    else {
      --*(_DWORD *)a13;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

const char **WebKit::SandboxExtension::consumePermanently(const char ***this, const WebKit::SandboxExtensionHandle *a2)
{
  uint64_t result = *this;
  if (result)
  {
    BOOL v4 = WebKit::SandboxExtensionImpl::consume((WebKit::SandboxExtensionImpl *)result);
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this, 0);
    return (const char **)v4;
  }
  return result;
}

BOOL WebKit::SandboxExtensionImpl::consume(WebKit::SandboxExtensionImpl *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sandbox_extension_consume();
  *((void *)this + 1) = v2;
  if (v2 == -1)
  {
    BOOL v4 = qword_1EB358488;
    if (os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)this;
      int v6 = *__error();
      int v7 = 136315394;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Could not create a sandbox extension for '%s', errno = %d", (uint8_t *)&v7, 0x12u);
    }
  }
  return v2 != -1;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::WebResourceLoadStatisticsStore>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  int v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v6 = &unk_1EE9C7DC8;
  v6[1] = WebKit::WebResourceLoadStatisticsStore::performDailyTasks;
  uint64_t v6[2] = 0;
  v6[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v6;
  return result;
}

void *IPC::Decoder::decode<std::optional<WTF::UUID>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      BOOL v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  int v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 32) = v8;
    return result;
  }
LABEL_13:
  void *result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v3) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

void WebKit::GPUProcessProxy::didCreateContextForVisibilityPropagation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  char v8 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218752;
    uint64_t v15 = a1;
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = a3;
    __int16 v20 = 1024;
    int v21 = a4;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::didCreateContextForVisibilityPropagation: webPageProxyID: %llu, pagePID: %llu, contextID: %u", buf, 0x26u);
  }
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v13);
  unint64_t v9 = v13;
  if (v13)
  {
    if (*(void *)(*((void *)v13 + 4) + 1928) == a3)
    {
      WebKit::WebPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(v13, a4);
    }
    else
    {
      uint64_t v11 = (WebKit::ProvisionalPageProxy *)*((void *)v13 + 149);
      if (v11 && *((void *)v11 + 4) == a3)
      {
        WebKit::ProvisionalPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(v11, a4);
      }
      else
      {
        uint64_t v12 = qword_1EB358960;
        if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v15 = a1;
          _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::didCreateContextForVisibilityPropagation() There was a WebPageProxy for this identifier, but it had the wrong WebPage identifier.", buf, 0xCu);
        }
      }
    }
    CFRelease(*((CFTypeRef *)v9 + 1));
  }
  else
  {
    uint64_t v10 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = a1;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::didCreateContextForVisibilityPropagation() No WebPageProxy with this identifier", buf, 0xCu);
    }
  }
}

uint64_t WebKit::WebProcessProxy::webPage@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1;
  {
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::globalPageMap(void)::pageMap, &v5);
  uint64_t v4 = result;
  if (result) {
    uint64_t result = (uint64_t)CFRetain(*(CFTypeRef *)(result + 8));
  }
  *a2 = v4;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(void *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v10 = *(void *)(v2 + 16 * v7 + 8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11) {
    return v11 - 16;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(WebKit::WebPageProxy *this, uint64_t a2)
{
  *((_DWORD *)this + 307) = a2;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 576))(v4, a2);
  unint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_1986EE318(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didCreateContextInGPUProcessForVisibilityPropagation(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _gpuProcessDidCreateContextForVisibilityPropagation];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_1986EE3A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986EE468(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986EE8F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (!v19) {
    goto LABEL_5;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, a2);
  }
  CFTypeRef v18 = cf;
  if (cf) {
LABEL_5:
  }
    CFRelease(v18);
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(__int16 *, char *))off_1EE9D46A8[a12])(&a16, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ExtensionProcess::createVisibilityPropagationInteraction(WebKit::ExtensionProcess *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  int v3 = *((_DWORD *)this + 2);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *((unsigned int *)this + 2);
  }
  if (v4 == 2)
  {
    if (v3 == 2)
    {
      unint64_t v5 = *(void **)this;
      if (*(void *)this) {
        CFRetain(*(CFTypeRef *)this);
      }
      unint64_t v6 = (const void *)[v5 createVisibilityPropagationInteraction];
      uint64_t v7 = v6;
      if (!v6) {
        goto LABEL_18;
      }
LABEL_17:
      CFRetain(v6);
LABEL_18:
      *a2 = v7;
      if (v5)
      {
        CFRelease(v5);
      }
      return;
    }
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return;
  }
  if (v4 != 1)
  {
    if (!v3)
    {
      unint64_t v5 = *(void **)this;
      if (*(void *)this) {
        CFRetain(*(CFTypeRef *)this);
      }
      unint64_t v6 = (const void *)[v5 createVisibilityPropagationInteraction];
      uint64_t v7 = v6;
      if (!v6) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  if (v3 != 1) {
    goto LABEL_23;
  }
}

void sub_1986EEAC8(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  *uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::RetainPtr<objc_object  {objcproto13UIInteraction}*>>>::move(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    do
    {
      unint64_t v6 = *(unsigned int **)v5;
      *(void *)unint64_t v5 = 0;
      *a3 = v6;
      uint64_t v7 = (unsigned int *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      a3[1] = v7;
      uint64_t v8 = (const void *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v8) {
        CFRelease(v8);
      }
      uint64_t result = *(unsigned int **)v5;
      *(void *)unint64_t v5 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v5 += 4;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v15;
        uint64_t v10 = *v15;
        unint64_t v9 = v15[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v9 = v1;
    uint64_t v10 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      BOOL v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        uint64_t v2 = *v14;
        unint64_t v1 = v14[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    BOOL v6 = v5 != 0;
    int v7 = 1;
    return v6 | (v7 << 8);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v2);
  }
  BOOL v6 = 0;
  int v7 = 0;
  return v6 | (v7 << 8);
}

void sub_1986EF364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  if (v32) {
    CFRelease(v32);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder **WebKit::WebSWClientConnection::updateThrottleState(WebKit::WebSWClientConnection *this)
{
  uint64_t v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(this);
  char v3 = WebKit::WebProcess::areAllPagesThrottleable(v2);
  *((unsigned char *)this + 96) = v3;
  char v5 = v3;
  return IPC::MessageSender::send<Messages::WebSWServerConnection::SetThrottleState>((uint64_t)this + 24, &v5);
}

uint64_t WebKit::WebProcess::areAllPagesThrottleable(WebKit::WebProcess *this)
{
  uint64_t v2 = (char *)this + 120;
  char v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(v5 - 4);
    uint64_t v6 = v5 + 16 * v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v6;
  v9[4] = v5 + 16 * v7;
  return WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>> const,WebKit::WebProcess::areAllPagesThrottleable(void)::$_0>(v9);
}

uint64_t WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>> const,WebKit::WebProcess::areAllPagesThrottleable(void)::$_0>(void *a1)
{
  unint64_t v1 = (void *)a1[1];
  uint64_t v2 = (void *)a1[3];
  if (v1 == v2) {
    return 1;
  }
  char v3 = (void *)a1[2];
  do
  {
    uint64_t v4 = v1[1];
    BOOL v6 = *(unsigned char *)(v4 + 1826) == 0;
    int v5 = *(_WORD *)(v4 + 1824) & 0x1E1;
    BOOL v6 = !v6 && v5 == 32;
    uint64_t result = v6;
    if (!v6) {
      break;
    }
    while (1)
    {
      v1 += 2;
      if (v1 == v3) {
        break;
      }
      if ((unint64_t)(*v1 + 1) > 1) {
        goto LABEL_13;
      }
    }
    unint64_t v1 = v3;
LABEL_13:
    ;
  }
  while (v1 != v2);
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebSWServerConnection::SetThrottleState>(uint64_t a1, char *a2, uint64_t a3)
{
  BOOL v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v6 = 2792;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebSWServerConnection::SetThrottleState>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebSWServerConnection::SetThrottleState>(a1, a2, v4);
}

uint64_t non-virtual thunk to'WebKit::WebSWClientConnection::messageSenderDestinationID(WebKit::WebSWClientConnection *this)
{
  return 0;
}

void WebKit::WebProcess::processDidResume(WebKit::WebProcess *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v3 = *((void *)this + 83);
    }
    else {
      uint64_t v3 = 0;
    }
    int v6 = 134218240;
    uint64_t v7 = this;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::processDidResume:", (uint8_t *)&v6, 0x16u);
  }
  *((unsigned char *)this + 504) = 0;
  if (*((_DWORD *)this + 149) != 2)
  {
    WebKit::WebProcess::cancelMarkAllLayersVolatile(this);
    WebKit::WebProcess::unfreezeAllLayerTrees(this);
    WebKit::WebProcess::accessibilityRelayProcessSuspended(this, 0);
    int v5 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(v4);
    if (v5) {
      WebCore::PlatformMediaSessionManager::processDidResume(v5);
    }
    WebKit::WebProcess::resumeAllMediaBuffering(this);
  }
}

void WebKit::WebProcess::accessibilityRelayProcessSuspended(WebKit::WebProcess *this, uint64_t a2)
{
  uint64_t v6 = *((void *)this + 15);
  uint64_t v4 = (void **)((char *)this + 120);
  uint64_t v5 = v6;
  if (v6 && *(_DWORD *)(v5 - 12))
  {
    uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4)[1];
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v9 = v7;
    WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification(v10, &v9, 0);
    WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage((WTF::StringImpl *)v10, a2);
    WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v10);
    uint64_t v8 = v9;
    uint64_t v9 = 0;
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  else
  {
    *((unsigned char *)this + 779) = a2 ^ 1;
  }
}

void WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification(WebKit::AXRelayProcessSuspendedNotification *this, void *a2)
{
  if (*((unsigned char *)this + 8)) {
    WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage(this, 0);
  }
  uint64_t v3 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF::StringImpl *WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification(WTF::StringImpl *a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a2 + 24), *a2 + 16);
  uint64_t v6 = *(atomic_uint **)(v5 + 24);
  atomic_fetch_add(v6, 1u);
  *(void *)a1 = v6;
  *((unsigned char *)a1 + 8) = a3;
  if (a3) {
    WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage(a1, 1);
  }
  return a1;
}

WTF::StringImpl *WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage(WTF::StringImpl *this, uint64_t a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = atomic_load(MEMORY[0x1E4FB64B0]);
  if (v2)
  {
    uint64_t v4 = this;
    v12[0] = @"pid";
    v12[1] = @"suspended";
    v13[0] = [NSNumber numberWithInt:getpid()];
    v13[1] = [NSNumber numberWithBool:a2];
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:2];
    uint64_t v6 = (void *)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:0];
    uint64_t v7 = *(void *)(*(void *)v4 + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    id v10 = v6;
    if (v6) {
      CFRetain(v6);
    }
    WebKit::WebPage::relayAccessibilityNotification(v8, (uint64_t)&v11, &v10);
    if (v6) {
      CFRelease(v6);
    }
    this = v11;
    uint64_t v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

void sub_1986EF9F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebProcess::cancelMarkAllLayersVolatile(WebKit::WebProcess *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v3 = *((void *)this + 83);
    }
    else {
      uint64_t v3 = 0;
    }
    int v10 = 134218240;
    uint64_t v11 = this;
    __int16 v12 = 2048;
    uint64_t v13 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::cancelMarkAllLayersVolatile:", (uint8_t *)&v10, 0x16u);
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v5 = (uint64_t)result;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 15);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      uint64_t result = (void *)WebKit::WebPage::cancelMarkLayersVolatile(*(WebKit::WebPage **)(v5 + 8));
      while (1)
      {
        v5 += 16;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v5 = v7;
LABEL_15:
      ;
    }
    while ((void *)v5 != v9);
  }
  return result;
}

uint64_t WebKit::WebPage::cancelMarkLayersVolatile(WebKit::WebPage *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = qword_1EB358000;
  if (os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 2048;
    uint64_t v8 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::cancelMarkLayersVolatile:", (uint8_t *)&v5, 0x16u);
  }
  if ((*((void *)this + 216) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)this + 1696));
  }
  return WebKit::WebPage::callVolatilityCompletionHandlers(this, 0);
}

uint64_t WebKit::WebPage::callVolatilityCompletionHandlers(WebKit::WebPage *this, void *a2)
{
  uint64_t v3 = (void *)*((void *)this + 220);
  int v10 = v3;
  uint64_t v4 = *((unsigned int *)this + 443);
  int v11 = *((_DWORD *)this + 442);
  int v12 = v4;
  v9[0] = 0;
  *((void *)this + 220) = 0;
  v9[1] = 0;
  *((void *)this + 221) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v3;
      *v3++ = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, a2);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WebKit::WebProcess::resumeAllMediaBuffering(WebKit::WebProcess *this)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v3 = (uint64_t)result;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 15);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t result = (void *)WebKit::WebPage::resumeAllMediaBuffering(*(WebKit::WebPage **)(v3 + 8));
      while (1)
      {
        v3 += 16;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v5;
LABEL_10:
      ;
    }
    while ((void *)v3 != v7);
  }
  return result;
}

uint64_t WebKit::WebPage::resumeAllMediaBuffering(WebKit::WebPage *this)
{
  return MEMORY[0x1F4172728](*((void *)this + 6));
}

void *WebKit::WebProcess::unfreezeAllLayerTrees(WebKit::WebProcess *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v3 = *((void *)this + 83);
    }
    else {
      uint64_t v3 = 0;
    }
    int v10 = 134218240;
    int v11 = this;
    __int16 v12 = 2048;
    uint64_t v13 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::unfreezeAllLayerTrees: WebProcess is unfreezing all layer trees", (uint8_t *)&v10, 0x16u);
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 15);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      uint64_t result = (void *)WebKit::WebPage::unfreezeLayerTree(v5[1], 4);
      while (1)
      {
        v5 += 2;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v5 = v7;
LABEL_15:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::completePageTransitionIfNeeded(WebKit::WebFrame **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 49))
  {
    uint64_t v2 = WebKit::WebFrame::page(this[2]);
    if (v2)
    {
      uint64_t v3 = (CFTypeRef *)v2;
      CFRetain(*(CFTypeRef *)(v2 + 8));
      WebKit::WebPage::didCompletePageTransition((WebKit::WebPage *)v3);
      *((unsigned char *)this + 49) = 1;
      uint64_t v4 = qword_1EB358028;
      if (os_log_type_enabled((os_log_t)qword_1EB358028, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = this[2];
        uint64_t v6 = *((void *)v5 + 10);
        uint64_t v7 = WebKit::WebFrame::page(v5);
        if (WebKit::WebFrame::page(this[2])) {
          uint64_t v8 = *(void *)(WebKit::WebFrame::page(this[2]) + 40);
        }
        else {
          uint64_t v8 = 0;
        }
        int v9 = 134219008;
        int v10 = this;
        __int16 v11 = 2048;
        __int16 v12 = v5;
        __int16 v13 = 2048;
        uint64_t v14 = v6;
        __int16 v15 = 2048;
        uint64_t v16 = v7;
        __int16 v17 = 2048;
        uint64_t v18 = v8;
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::completePageTransitionIfNeeded: dispatching didCompletePageTransition", (uint8_t *)&v9, 0x34u);
      }
      CFRelease(v3[1]);
    }
  }
}

uint64_t WebKit::WebPage::unfreezeLayerTree(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 2104);
  int v5 = v4 & ~a2;
  *(_DWORD *)(a1 + 2104) = v5;
  uint64_t v6 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v9 = 134219008;
    uint64_t v10 = a1;
    __int16 v11 = 2048;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    int v14 = a2;
    __int16 v15 = 1024;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::unfreezeLayerTree: Removing a reason to freeze layer tree (reason=%d, new=%d, old=%d)", (uint8_t *)&v9, 0x28u);
  }
  return WebKit::WebPage::updateDrawingAreaLayerTreeFreezeState((WebKit::WebPage *)a1);
}

uint64_t WebKit::WebPage::updateDrawingAreaLayerTreeFreezeState(WebKit::WebPage *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result) {
    return result;
  }
  if (*((void *)this + 63))
  {
    if (WebKit::VideoPresentationManager::hasVideoPlayingInPictureInPicture(*((WebKit::VideoPresentationManager **)this
                                                                             + 63)))
    {
      uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)this + 526));
      v4.i16[0] = vaddlv_u8(v4);
      uint64_t result = *((void *)this + 9);
      if (v4.i32[0] == 1 && (*((_DWORD *)this + 526) & 2) != 0)
      {
        uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 88);
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = *((void *)this + 9);
    }
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 88);
LABEL_4:

  return v3();
}

double WebKit::RemoteLayerTreeDrawingArea::setLayerTreeStateIsFrozen(WebKit::RemoteLayerTreeDrawingArea *this, int a2)
{
  if (*((unsigned __int8 *)this + 224) != a2)
  {
    char v2 = a2;
    kdebug_trace();
    *((unsigned char *)this + 224) = v2;
    if ((v2 & 1) == 0)
    {
      if (*((unsigned char *)this + 225))
      {
        *((unsigned char *)this + 225) = 0;
        return WebKit::RemoteLayerTreeDrawingArea::startRenderingUpdateTimer(this);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didCompletePageTransition(WebKit::WebPage *this)
{
  return WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 1);
}

void WebKit::GPUProcess::initializeGPUProcess(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v24 = v5;
  WebKit::AuxiliaryProcess::applyProcessCreationParameters((WTF *)a1, (WebCore *)a2);
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::initializeGPUProcess:", buf, 0xCu);
  }
  IsUserInitiated = (WebCore *)WTF::Thread::setCurrentThreadIsUserInitiated(0);
  uint64_t v8 = (WTF::MemoryPressureHandler *)WebCore::initializeCommonAtomStrings(IsUserInitiated);
  int v9 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(v8);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v10 = *(atomic_uint **)(a1 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  __int16 v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v11 = &unk_1EE9BEEF0;
  v11[1] = v10;
  uint64_t v12 = *((void *)v9 + 6);
  *((void *)v9 + 6) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WTF::MemoryPressureHandler::install(v9);
  WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory((WebCore::DeprecatedGlobalSettings *)1);
  __int16 v13 = (WebCore::CoreAudioSharedUnit *)WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((WebCore::MockRealtimeMediaSourceCenter *)*(unsigned __int8 *)(a2 + 32));
  uint64_t v14 = WebCore::CoreAudioSharedUnit::unit(v13);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  __int16 v15 = *(atomic_uint **)(a1 + 8);
  if (v15) {
    atomic_fetch_add(v15, 1u);
  }
  __int16 v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9BEF18;
  v17[1] = v15;
  uint64_t v18 = *(void *)(v14 + 688);
  *(void *)(v14 + 688) = v17;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 40), v16);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 48), v19);
  WebKit::SandboxExtension::consumePermanently(a2 + 64, v20);
  WebKit::SandboxExtension::consumePermanently(a2 + 80, v21);
  WebKit::AuxiliaryProcess::populateMobileGestaltCache(a1, a2 + 96);
  WebKit::SandboxExtension::consumePermanently(a2 + 112, v22);
  *(_OWORD *)buf = 0uLL;
  WebCore::setImageSourceAllowableTypes();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v23);
  WTF::String::operator=((uint64_t *)(a1 + 272), (uint64_t *)(a2 + 128));
  WTF::Thread::setCurrentThreadIsUserInteractive(0);
  WebCore::setPresentingApplicationPID((WebCore *)*(unsigned int *)(a2 + 36));
  if (*(_DWORD *)(a2 + 148)) {
    WTF::overrideUserPreferredLanguages();
  }
  WebKit::AuxiliaryProcess::registerWithStateDumper();
  WebKit::GPUProcess::platformInitializeGPUProcess(a1, a2);
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v24);
}

void WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope(WTF::CompletionHandlerCallingScope *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *(void *)this;
    *(void *)this = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
}

IPC::Encoder **IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::InitializeNetworkProcess &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2998;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::GPUProcess::InitializeGPUProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::GPUProcess *,void ()(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::GPUProcess::*)::{lambda(Messages::GPUProcess::InitializeGPUProcess &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2886;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

void WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcess *this, WebKit::WebProcessCreationParameters *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint8x8_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v5 = *((void *)this + 83);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::WebProcess::platformInitializeWebProcess", buf, 0x16u);
  }
  unsetenv("BSServiceDomains");
  WebKit::AuxiliaryProcess::applyProcessCreationParameters(this, a2);
  WebKit::AuxiliaryProcess::populateMobileGestaltCache((uint64_t)this, (uint64_t)a2 + 640);
  WTF::String::operator=((uint64_t *)this + 36, (WTF::StringImpl **)a2 + 43);
  WebCore::setPresentingApplicationBundleIdentifier((WebKit::WebProcessCreationParameters *)((char *)a2 + 360), v6);
  WebKit::SandboxExtension::consumePermanently((const char ***)a2 + 48, v7);
  atomic_store(WebKit::SandboxExtension::consumePermanently((uint64_t)a2 + 72, v8) ^ 1, MEMORY[0x1E4F309A8]);
  if (*((unsigned char *)a2 + 672))
  {
    WebCore::ProcessCapabilities::setHEICDecodingEnabled((WebCore::ProcessCapabilities *)1);
    int v9 = 8;
  }
  else
  {
    int v9 = 0;
  }
  int v10 = *((unsigned __int8 *)a2 + 673);
  if (*((unsigned char *)a2 + 673))
  {
    WebCore::ProcessCapabilities::setAVIFDecodingEnabled((WebCore::ProcessCapabilities *)1);
    v9 |= 0x10u;
    int v10 = *((unsigned __int8 *)a2 + 673);
  }
  if (*((unsigned char *)a2 + 672) || v10)
  {
    char v11 = WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::restricted;
    WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::restricted = 1;
    if ((v11 & 1) == 0) {
      CGImageSourceEnableRestrictedDecoding();
    }
  }
  if (v9)
  {
    uint64_t v12 = (PAL *)PAL::VideoToolboxLibrary((PAL *)1);
    if (v12)
    {
      if (PAL::canLoad_VideoToolbox_VTRestrictVideoDecoders(v12))
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        if ((v9 & 8) != 0)
        {
          *(_DWORD *)v41 = 1752589105;
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)buf, v41);
          *(_DWORD *)v41 = 1836415073;
          if (*(_DWORD *)&buf[12] != *(_DWORD *)&buf[8])
          {
            *(_DWORD *)(*(void *)buf + 4 * *(unsigned int *)&buf[12]) = 1836415073;
            ++*(_DWORD *)&buf[12];
            if ((v9 & 0x10) == 0) {
              goto LABEL_27;
            }
LABEL_24:
            *(_DWORD *)v41 = 1635135537;
            if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
            {
              WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)buf, v41);
            }
            else
            {
              *(_DWORD *)(*(void *)buf + 4 * *(unsigned int *)&buf[12]) = 1635135537;
              ++*(_DWORD *)&buf[12];
            }
LABEL_27:
            ((void (*)(uint64_t, void, void))*MEMORY[0x1E4FB6448])(15, *(void *)buf, *(unsigned int *)&buf[12]);
            uint64_t v14 = *(WTF **)buf;
            if (*(void *)buf)
            {
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              WTF::fastFree(v14, v13);
            }
            goto LABEL_29;
          }
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)buf, v41);
        }
        if ((v9 & 0x10) == 0) {
          goto LABEL_27;
        }
        goto LABEL_24;
      }
    }
  }
LABEL_29:
  __int16 v15 = (const void *)[objc_alloc(MEMORY[0x1E4F18D78]) initWithMemoryCapacity:0 diskCapacity:0 diskPath:0];
  WebCore::registerMemoryReleaseNotifyCallbacks((WebCore *)[MEMORY[0x1E4F18D78] setSharedURLCache:v15]);
  *MEMORY[0x1E4F309A0] = *((unsigned char *)a2 + 333);
  WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility((WebCore::AXObjectCache *)*((unsigned __int8 *)a2 + 394));
  PAL::setCurrentUserInterfaceIdiom();
  WebCore::setLocalizedDeviceModel((WebKit::WebProcessCreationParameters *)((char *)a2 + 720), v16);
  WebCore::setContentSizeCategory((WebKit::WebProcessCreationParameters *)((char *)a2 + 728), v17);
  WebCore::setSupportsPictureInPicture((WebCore *)*((unsigned __int8 *)a2 + 699));
  uint64_t v18 = (WebCore::DeprecatedGlobalSettings *)pthread_set_fixedpriority_self();
  uint64_t v19 = WebCore::DeprecatedGlobalSettings::shared(v18);
  __int16 v20 = (WebCore::DeprecatedGlobalSettings *)WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v19 + 30));
  uint64_t v21 = WebCore::DeprecatedGlobalSettings::shared(v20);
  uint64_t v22 = (WebCore::AVAssetMIMETypeCache *)WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v21 + 31));
  if (*((_DWORD *)a2 + 109))
  {
    v23 = (WebCore::AVAssetMIMETypeCache *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v40, (uint64_t)a2 + 424);
    WebKit::WebProcess::setMediaMIMETypes(v23, (uint64_t)v40);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v24);
  }
  else
  {
    uint64_t v25 = WebCore::AVAssetMIMETypeCache::singleton(v22);
    *(void *)buf = &unk_1EE9E05A8;
    *(void *)&buf[8] = this;
    v48 = buf;
    std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator=[abi:sn180100]((void *)(v25 + 40), (uint64_t)buf);
    std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::~__value_func[abi:sn180100](buf);
  }
  WebCore::setScreenProperties();
  WebKit::SandboxExtension::consumePermanently((uint64_t)a2 + 624, v26);
  WebKit::SandboxExtension::consumePermanently((uint64_t)a2 + 680, v27);
  WebCore::setSystemHasBattery((WebCore *)*((unsigned __int8 *)a2 + 696));
  WebCore::setSystemHasAC((WebCore *)*((unsigned __int8 *)a2 + 697));
  WebCore::RenderThemeIOS::setCSSValueToSystemColorMap();
  WebCore::RenderThemeIOS::setFocusRingColor((WebKit::WebProcessCreationParameters *)((char *)a2 + 712), v28);
  v29 = (WebCore *)WTF::fastMalloc((WTF *)8);
  *(void *)v29 = &unk_1EE9E7670;
  v30 = (WebCore::SystemSoundManager **)WebCore::sleepDisablerClient(v29);
  v31 = *v30;
  *v30 = v29;
  if (v31) {
    v31 = (WebCore::SystemSoundManager *)(*(uint64_t (**)(WebCore::SystemSoundManager *))(*(void *)v31 + 8))(v31);
  }
  WebCore::SystemSoundManager::singleton(v31);
  v32 = (void *)WTF::fastMalloc((WTF *)8);
  void *v32 = &unk_1EE9E76A0;
  *(void *)buf = v32;
  WebCore::SystemSoundManager::setSystemSoundDelegate();
  uint64_t v33 = *(void *)buf;
  *(void *)buf = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  v34 = (void *)WTF::fastMalloc((WTF *)8);
  void *v34 = &unk_1EE9F7AD0;
  *(void *)buf = v34;
  WebCore::CaptionUserPreferencesMediaAF::setCaptionPreferencesDelegate();
  uint64_t v35 = *(void *)buf;
  *(void *)buf = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  WebCore::IOSurface::setMaximumSize();
  WebCore::IOSurface::setBytesPerRowAlignment(*((WebCore::IOSurface **)a2 + 93));
  WebKit::WebProcess::accessibilityPreferencesDidChange((uint64_t)this, (uint64_t)a2 + 752);
  v36 = (PAL *)_AXSApplicationAccessibilitySetEnabled();
  if (PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(v36)) {
    ((void (*)(void))*MEMORY[0x1E4FB6478])();
  }
  if (*(void *)(*((void *)this + 5) + 352))
  {
    xpc_connection_get_audit_token();
    if (WTF::hasEntitlementValueInArray())
    {
      WebKit::WebProcess::auditTokenForSelf(this, (uint64_t)buf);
      if (!v49)
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
      }
      int v37 = sandbox_enable_state_flag();
      v38 = qword_1EB358488;
      if (os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)this + 672)) {
          uint64_t v39 = *((void *)this + 83);
        }
        else {
          uint64_t v39 = 0;
        }
        *(_DWORD *)v41 = 134218496;
        v42 = this;
        __int16 v43 = 2048;
        uint64_t v44 = v39;
        __int16 v45 = 1024;
        int v46 = v37;
        _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::Enabling ParentProcessCanEnableQuickLookStateFlag state flag, status = %d", v41, 0x1Cu);
      }
    }
  }
  if (v15) {
    CFRelease(v15);
  }
}

void sub_1986F0D68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = *(WTF **)(v17 - 80);
  if (v19)
  {
    *(void *)(v17 - 80) = 0;
    *(_DWORD *)(v17 - 72) = 0;
    WTF::fastFree(v19, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SandboxExtension::consumePermanently(uint64_t a1, const WebKit::SandboxExtensionHandle *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2)
  {
    uint64_t v5 = *(const char ****)a1;
    uint64_t v6 = 8 * v2;
    int v3 = 1;
    do
    {
      if (*v5) {
        v3 &= WebKit::SandboxExtension::consumePermanently(v5, a2);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    LOBYTE(v3) = 1;
  }
  return v3 & 1;
}

void WebKit::WebProcess::auditTokenForSelf(WebKit::WebProcess *this@<X0>, uint64_t a2@<X8>)
{
  kern_return_t v6;
  int v7;
  long long v8;
  mach_error_t v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  long long v15;
  uint8_t buf[4];
  WebKit::WebProcess *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  mach_error_t v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v3 = (char *)this + 712;
  if (*((unsigned char *)this + 744)) {
    goto LABEL_2;
  }
  *(_OWORD *)task_info_out = 0u;
  __int16 v15 = 0u;
  task_info_outCnt = 8;
  uint64_t v6 = task_info(*MEMORY[0x1E4F14960], 0xFu, task_info_out, &task_info_outCnt);
  if (!v6)
  {
    uint64_t v7 = *((unsigned __int8 *)this + 744);
    uint64_t v8 = v15;
    *(_OWORD *)int v3 = *(_OWORD *)task_info_out;
    *((_OWORD *)v3 + 1) = v8;
    if (!v7) {
      *((unsigned char *)this + 744) = 1;
    }
LABEL_2:
    long long v4 = *((_OWORD *)v3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
    return;
  }
  int v9 = v6;
  int v10 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    if (*((unsigned char *)this + 672)) {
      char v11 = *((void *)this + 83);
    }
    else {
      char v11 = 0;
    }
    uint64_t v12 = mach_error_string(v9);
    *(_DWORD *)buf = 134218754;
    uint64_t v17 = this;
    uint64_t v18 = 2048;
    uint64_t v19 = v11;
    __int16 v20 = 2082;
    uint64_t v21 = v12;
    uint64_t v22 = 1024;
    v23 = v9;
    _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] WebProcess::Unable to get audit token for self. Error: %{public}s (%x)", buf, 0x26u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
}

void WebKit::AuxiliaryProcess::populateMobileGestaltCache(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v2 = *(void *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v4 = 1;
    uint64_t v5 = *(WebKit::SandboxExtensionImpl **)a2;
    *(void *)a2 = 0;
    *(void *)(v4 + 8) = v5;
    *(void *)(v4 + 16) = 1;
    WebKit::SandboxExtensionImpl::consume(v5);
    MGGetFloat32Answer();
    MGGetSInt32Answer();
    MGGetSInt32Answer();
    MGGetBoolAnswer();
    MGGetBoolAnswer();
    uint64_t v6 = (const void *)MGCopyAnswer();
    MGGetSInt32Answer();
    MGGetBoolAnswer();
    MGGetFloat32Answer();
    MGGetBoolAnswer();
    uint64_t v7 = (const void *)MGCopyAnswer();
    uint64_t v8 = (const void *)MGCopyAnswer();
    int v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    if (v7) {
      CFRelease(v7);
    }
    int v10 = (const void *)MGCopyAnswer();
    char v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v12 = (const void *)MGCopyAnswer();
    __int16 v13 = v12;
    if (v12) {
      CFRetain(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v14 = (const void *)MGCopyAnswer();
    __int16 v15 = v14;
    if (v14) {
      CFRetain(v14);
    }
    if (v13) {
      CFRelease(v13);
    }
    int v16 = (const void *)MGCopyAnswer();
    uint64_t v17 = v16;
    if (v16) {
      CFRetain(v16);
    }
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v18 = *(void *)(v4 + 16) - 1;
    *(void *)(v4 + 16) = v18;
    if (!v18)
    {
      *(void *)(*(void *)(v4 + 8) + 8) = 0;
      sandbox_extension_release();
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v6) {
      CFRelease(v6);
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v4);
  }
}

void sub_1986F12A0(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator=[abi:sn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator=[abi:sn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator=[abi:sn180100](void *a1)
{
  BOOL v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::~__value_func[abi:sn180100](void *a1)
{
  BOOL v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE9E05A8;
  a2[1] = v2;
  return result;
}

WebKit::WebPage **WebKit::WebProcess::accessibilityPreferencesDidChange(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a2 + 1) >= 3) {
    int v4 = -2;
  }
  else {
    int v4 = *(_DWORD *)a2;
  }
  if (_AXSReduceMotionEnabledApp() != v4) {
    _AXSSetReduceMotionEnabledApp();
  }
  if ((*(_DWORD *)(a2 + 4) + 1) >= 3) {
    int v5 = -2;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 4);
  }
  if (_AXSIncreaseButtonLegibilityApp() != v5) {
    _AXSSetIncreaseButtonLegibilityApp();
  }
  if ((*(_DWORD *)(a2 + 8) + 1) >= 3) {
    int v6 = -2;
  }
  else {
    int v6 = *(_DWORD *)(a2 + 8);
  }
  if (_AXSEnhanceTextLegibilityEnabledApp() != v6) {
    _AXSSetEnhanceTextLegibilityEnabledApp();
  }
  if ((*(_DWORD *)(a2 + 12) + 1) >= 3) {
    int v7 = -2;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 12);
  }
  if (_AXDarkenSystemColorsApp() != v7) {
    _AXSSetDarkenSystemColorsApp();
  }
  if ((*(_DWORD *)(a2 + 16) + 1) >= 3) {
    int v8 = -2;
  }
  else {
    int v8 = *(_DWORD *)(a2 + 16);
  }
  if (_AXSInvertColorsEnabledApp() != v8) {
    _AXSInvertColorsSetEnabledApp();
  }
  WebCore::setOverrideEnhanceTextLegibility((WebCore *)*(unsigned __int8 *)(a2 + 21));
  WebCore::FontCache::invalidateAllFontCaches();
  int v9 = *(unsigned __int8 *)(a2 + 20);
  *(unsigned char *)(a1 + 777) = v9;
  *(unsigned char *)(a1 + 781) = *(unsigned char *)(a2 + 22);
  WebCore::Image::setSystemAllowsAnimationControls((WebCore::Image *)(v9 == 0));
  double result = (WebKit::WebPage **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  char v11 = result;
  __int16 v13 = v12;
  uint64_t v14 = *(void *)(a1 + 120);
  if (v14) {
    __int16 v15 = (WebKit::WebPage **)(v14 + 16 * *(unsigned int *)(v14 - 4));
  }
  else {
    __int16 v15 = 0;
  }
  if (v15 != result)
  {
    do
    {
      WebKit::WebPage::updateImageAnimationEnabled(v11[1]);
      double result = (WebKit::WebPage **)WebKit::WebPage::updatePrefersNonBlinkingCursor(v11[1]);
      while (1)
      {
        v11 += 2;
        if (v11 == v13) {
          break;
        }
        if ((unint64_t)*v11 + 1 > 1) {
          goto LABEL_36;
        }
      }
      char v11 = v13;
LABEL_36:
      ;
    }
    while (v11 != v15);
  }
  return result;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  double result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)result - 1);
  int v4 = &result[2 * v3];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v3];
  }
  if (v3)
  {
    uint64_t v5 = 16 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v5 -= 16;
      if (!v5) {
        return v4;
      }
    }
  }
  return result;
}

uint64_t WebKit::GPUProcess::platformInitializeGPUProcess(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 56)) {
    uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v2 = &stru_1EEA10550;
  }

  return MEMORY[0x1F40EDE60](v2);
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *a2;
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 30))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 4 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24InitializeNetworkProcessEN6WebKit14NetworkProcessES8_FvONS7_32NetworkProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7A30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24InitializeNetworkProcessEN6WebKit14NetworkProcessES8_FvONS7_32NetworkProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::InitializeNetworkProcess &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess20InitializeGPUProcessEN6WebKit10GPUProcessES8_FvONS7_28GPUProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDDA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess20InitializeGPUProcessEN6WebKit10GPUProcessES8_FvONS7_28GPUProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::GPUProcess::InitializeGPUProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::GPUProcess *,void ()(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::GPUProcess::*)::{lambda(Messages::GPUProcess::InitializeGPUProcess &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

WTF::StringImpl *WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>::translate<WTF::KeyValuePair<WTF::String,WTF::String>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, int a4)
{
  WTF::HashTranslatorASCIILiteral::translate(a1, *(WTF::StringImpl **)a2, *(void *)(a2 + 8), a4);
  uint64_t v7 = *(void *)(*(void *)a3 + 8);
  if (v7)
  {
    unint64_t v6 = (WTF::StringImpl *)(v7 - 1);
    if (v7 == 1)
    {
      int v8 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v8 = v10;
    }
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = a1[1];
  a1[1] = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, _DWORD **a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    __int16 v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    int v16 = (WTF *)*v15;
    if (!*v15)
    {
      if (v12)
      {
        uint64_t *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        __int16 v15 = v12;
      }
      WTF::String::operator=(v15, (uint64_t *)a3);
      uint64_t v18 = *a4;
      if (*a4) {
        *v18 += 2;
      }
      uint64_t result = (WTF::StringImpl *)v15[1];
      v15[1] = (uint64_t)v18;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v20 = *a2;
      if (*a2) {
        int v21 = *(_DWORD *)(v20 - 12) + 1;
      }
      else {
        int v21 = 1;
      }
      *(_DWORD *)(v20 - 12) = v21;
      uint64_t v22 = *a2;
      if (*a2) {
        int v23 = *(_DWORD *)(v22 - 12);
      }
      else {
        int v23 = 0;
      }
      uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
      unint64_t v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24) {
          goto LABEL_21;
        }
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_21:
        uint64_t v26 = v22 + 16 * v25;
        char v27 = 1;
        goto LABEL_22;
      }
      uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
      __int16 v15 = (uint64_t *)result;
      uint64_t v22 = *a2;
      if (*a2) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
      goto LABEL_21;
    }
    if (v16 == (WTF *)-1)
    {
      uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
      goto LABEL_30;
    }
    uint64_t result = (WTF::StringImpl *)WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_30:
    unsigned int v11 = i + v14;
  }
  uint64_t v28 = *a2;
  if (*a2) {
    uint64_t v29 = *(unsigned int *)(v28 - 4);
  }
  else {
    uint64_t v29 = 0;
  }
  char v27 = 0;
  uint64_t v26 = v28 + 16 * v29;
LABEL_22:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = v27;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 176);
  uint64_t v4 = getenv("DIRHELPER_USER_DIR_SUFFIX");
  if (v4)
  {
    strlen(v4);
    WTF::String::fromUTF8();
    if (v12)
    {
      unsigned int v10 = "user-directory-suffix";
      uint64_t v11 = 22;
      v8[0] = &v12;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::String&>(WTF::ASCIILiteral &&,WTF::String&)::{lambda(void)#1}>((uint64_t *)(a2 + 16), (uint64_t *)&v10, v8, (uint64_t)v9);
      unint64_t v6 = v12;
      uint64_t v12 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v5);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 168))
  {
    unsigned int v10 = "always-runs-at-background-priority";
    uint64_t v11 = 35;
    v8[0] = "true";
    v8[1] = (void *)5;
    uint64_t v12 = (WTF::StringImpl *)v8;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>((uint64_t *)(a2 + 16), (uint64_t *)&v10, (uint64_t)&v12, (uint64_t)v9);
  }
  WebKit::AuxiliaryProcessProxy::populateOverrideLanguagesLaunchOptions(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 168))(a1, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::populateOverrideLanguagesLaunchOptions(uint64_t a1, uint64_t a2)
{
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1E93CFBD0 = 0;
  }
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v47, (uint64_t)&WebKit::overrideLanguagesStorage(void)::storage);
  unint64_t v4 = HIDWORD(v48);
  if (HIDWORD(v48)) {
    goto LABEL_9;
  }
  WebKit::AuxiliaryProcessProxy::platformOverrideLanguages((uint64_t)&v43);
  if (HIDWORD(v48)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v47, (WTF *)((char *)v47 + 8 * HIDWORD(v48)));
  }
  unint64_t v6 = v47;
  if (v47)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v6, v5);
  }
  v47 = v43;
  uint64_t v7 = v44;
  __int16 v43 = 0;
  uint64_t v44 = 0;
  v48 = v7;
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v5);
  unint64_t v4 = HIDWORD(v48);
  if (HIDWORD(v48))
  {
LABEL_9:
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    __int16 v43 = 0;
    uint64_t v44 = 0;
    unsigned int v45 = 0;
    char v46 = 1;
    do
    {
      if (v10)
      {
        char v49 = 44;
        if (v44 && ((uint64_t v11 = v45, v45 < *((_DWORD *)v44 + 1)) ? (v12 = v43 == 0) : (v12 = 0), v12))
        {
          int v13 = *((_DWORD *)v44 + 4);
          uint64_t v14 = *((void *)v44 + 1);
          ++v45;
          if ((v13 & 4) != 0) {
            *(unsigned char *)(v14 + v11) = 44;
          }
          else {
            *(_WORD *)(v14 + 2 * v11) = 44;
          }
        }
        else
        {
          uint64_t result = WTF::StringBuilder::append();
        }
        unint64_t v4 = HIDWORD(v48);
      }
      if (v10 >= v4)
      {
        __break(0xC471u);
        return result;
      }
      __int16 v15 = (uint64_t *)((char *)v47 + v9);
      if (v45) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v44 == 0;
      }
      if (v16)
      {
        uint64_t result = (uint64_t)WTF::String::operator=((uint64_t *)&v43, (WTF::StringImpl **)((char *)v47 + v9));
        uint64_t v17 = *v15;
        if (*v15) {
          LODWORD(v17) = *(_DWORD *)(v17 + 4);
        }
        unsigned int v45 = v17;
      }
      else
      {
        uint64_t v18 = *v15;
        if (*v15)
        {
          uint64_t v19 = *(void *)(v18 + 8);
          unint64_t v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0x100000000;
        }
        uint64_t result = WTF::StringBuilder::append((uint64_t)&v43, v19, v20);
      }
      ++v10;
      unint64_t v4 = HIDWORD(v48);
      v9 += 8;
    }
    while (v10 < HIDWORD(v48));
    int v21 = v43;
    uint64_t v22 = (uint64_t *)(a2 + 16);
    if (v43
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v43),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v43),
          (int v21 = v43) != 0))
    {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v23 = *v22;
    if (*v22
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v22, 0), (uint64_t v23 = *v22) != 0))
    {
      unsigned int v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      unsigned int v24 = 0;
    }
    int v25 = WTF::HashTranslatorASCIILiteral::hash((uint64_t)"OverrideLanguages", 18);
    int v26 = 0;
    char v27 = 0;
    int v28 = v25;
    while (1)
    {
      unsigned int v29 = v28 & v24;
      v30 = (WTF::StringImpl **)(v23 + 16 * (v28 & v24));
      v31 = *v30;
      if (*v30 != (WTF::StringImpl *)-1)
      {
        if (!v31)
        {
          if (v27) {
            uint64_t v33 = v27;
          }
          else {
            uint64_t v33 = (WTF::StringImpl **)(v23 + 16 * v29);
          }
          if (*v33 == (WTF::StringImpl *)-1)
          {
            *uint64_t v33 = 0;
            v33[1] = 0;
            --*(_DWORD *)(*v22 - 16);
          }
          WTF::HashTranslatorASCIILiteral::translate(v33, (WTF::StringImpl *)"OverrideLanguages", 18, v25);
          v34 = v33[1];
          v33[1] = v21;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2) {
              WTF::StringImpl::destroy(v34, v8);
            }
            else {
              *(_DWORD *)v34 -= 2;
            }
          }
          uint64_t v35 = *v22;
          if (*v22) {
            int v36 = *(_DWORD *)(v35 - 12) + 1;
          }
          else {
            int v36 = 1;
          }
          *(_DWORD *)(v35 - 12) = v36;
          uint64_t v37 = *v22;
          if (*v22) {
            int v38 = *(_DWORD *)(v37 - 12);
          }
          else {
            int v38 = 0;
          }
          uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
          unint64_t v40 = *(unsigned int *)(v37 - 4);
          if (v40 > 0x400)
          {
            if (v40 > 2 * v39) {
              goto LABEL_70;
            }
          }
          else if (3 * v40 > 4 * v39)
          {
            goto LABEL_70;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v22, v33);
          goto LABEL_70;
        }
        char v32 = MEMORY[0x19972E990](v31, "OverrideLanguages", 17);
        v30 = v27;
        if (v32) {
          break;
        }
      }
      int v28 = ++v26 + v29;
      char v27 = v30;
    }
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v8);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
LABEL_70:
    v41 = v44;
    uint64_t v44 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v8);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    v42 = v43;
    __int16 v43 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, v8);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(a1, (uint64_t)v14);
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v14, v16);
          if (v14 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl *WTF::HashTranslatorASCIILiteral::translate(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t a3, int a4)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = *a1;
  *a1 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      uint64_t v6 = *a1;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *((_DWORD *)v6 + 4) |= a4 << 8;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::platformOverrideLanguages@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = a1;
  if ((_MergedGlobals_45 & 1) == 0)
  {
    WTF::makeVector<WTF::String>(objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "valueForKey:", @"AppleLanguages"), (uint64_t)&v7);
    qword_1EB358D00 = v7;
    uint64_t v4 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    qword_1EB358D08 = v4;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
    uint64_t v2 = a1;
    _MergedGlobals_45 = 1;
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v2, (uint64_t)&qword_1EB358D00);
}

uint64_t WTF::StringBuilder::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xFF00000000) != 0) {
    return WTF::StringBuilder::append();
  }
  else {
    return MEMORY[0x1F40EB030](a1, a2, a3);
  }
}

uint64_t WebKit::WebProcess::platformInitializeProcess(WebKit::WebProcess *this, const WebKit::AuxiliaryProcessInitializationParameters *a2)
{
  uint64_t v4 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton(this);
  unsigned int v5 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::enablePublicSuffixCache(v4);
  if (!*((unsigned char *)this + 619))
  {
    uint64_t v23 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    unsigned int v24 = v25;
    int v25 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v22);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    _Unwind_Resume(v23);
  }
  if (*((unsigned char *)this + 618))
  {
    WebCore::PublicSuffixStore::singleton(v5);
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
    uint64_t v7 = v26;
    int v26 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = (const char **)&WebKit::prewarmLogs(void)::logs;
    do
    {
      os_log_t v9 = os_log_create(*v8, v8[2]);
      if (v9) {

      }
      v8 += 4;
    }
    while (v8 != (const char **)&__block_descriptor_32_e78_v20__0C8__os_log_message_s_QQQ___timeval_qi__timezone_ii_QQI__Q_Q__ICBQ_CC__12l);
    if (os_trace_get_mode() == 256 || os_trace_get_mode() == 1024)
    {
      qword_1EB359D80 = os_log_set_hook();
      *MEMORY[0x1E4F30948] = 1;
    }
  }
  unint64_t v10 = (char *)a2 + 56;
  int v26 = (WTF::StringImpl *)"inspector-process";
  uint64_t v27 = 18;
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)v10, (uint64_t *)&v26, &v25);
  int v12 = MEMORY[0x19972E990](v25, "1", 1);
  uint64_t v13 = v25;
  int v25 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      if (v12) {
        goto LABEL_18;
      }
LABEL_20:
      int v26 = (WTF::StringImpl *)"service-worker-process";
      uint64_t v27 = 23;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)v10, (uint64_t *)&v26, &v25);
      int v15 = MEMORY[0x19972E990](v25, "1", 1);
      BOOL v16 = v25;
      int v25 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v14);
          if (v15) {
            goto LABEL_24;
          }
          goto LABEL_26;
        }
        *(_DWORD *)v16 -= 2;
      }
      if (v15)
      {
LABEL_24:
        int v17 = 1;
LABEL_33:
        *((_DWORD *)this + 149) = v17;
        goto LABEL_34;
      }
LABEL_26:
      int v26 = (WTF::StringImpl *)"is-prewarmed";
      uint64_t v27 = 13;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)v10, (uint64_t *)&v26, &v25);
      int v19 = MEMORY[0x19972E990](v25, "1", 1);
      unint64_t v20 = v25;
      int v25 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::destroy(v20, v18);
          if (v19) {
            goto LABEL_30;
          }
          goto LABEL_32;
        }
        *(_DWORD *)v20 -= 2;
      }
      if (v19)
      {
LABEL_30:
        int v17 = 2;
        goto LABEL_33;
      }
LABEL_32:
      int v17 = 4;
      goto LABEL_33;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v12) {
    goto LABEL_20;
  }
LABEL_18:
  *((_DWORD *)this + 149) = 0;
LABEL_34:
  int v26 = (WTF::StringImpl *)MEMORY[0x1E4F143A8];
  uint64_t v27 = 3321888768;
  int v28 = ___ZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralE_block_invoke;
  unsigned int v29 = &__block_descriptor_56_e8_32c83_ZTSKZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralEE3__0_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  v30 = this;
  v31 = "WebContent state";
  uint64_t v32 = 17;
  os_state_add_handler();
  return [MEMORY[0x1E4F18DC0] _disableAppSSO];
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (*(void *)result)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 8);
    int v6 = WTF::HashTranslatorASCIILiteral::hash(*a2, a2[1]);
    for (i = 0; ; int v6 = i + v8)
    {
      uint64_t v8 = v6 & v5;
      uint64_t result = *(void *)(v4 + 16 * v8);
      if (!result) {
        break;
      }
      if (result != -1)
      {
        uint64_t result = MEMORY[0x19972E990]();
        if (result)
        {
          os_log_t v9 = *(_DWORD **)(v4 + 16 * v8 + 8);
          if (v9) {
            *v9 += 2;
          }
          goto LABEL_9;
        }
      }
      ++i;
    }
  }
  os_log_t v9 = 0;
LABEL_9:
  *a3 = v9;
  return result;
}

uint64_t WTF::HashTranslatorASCIILiteral::hash(uint64_t a1, uint64_t a2)
{
  if (a2) {
    unint64_t v2 = a2 - 1;
  }
  else {
    unint64_t v2 = 0;
  }
  int v3 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>(a1, v2);
  unsigned int v4 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
  unsigned int v5 = (v4 ^ (4 * v4)) + ((v4 ^ (4 * v4)) >> 15);
  unsigned int v6 = (v5 ^ (v5 << 10)) & 0xFFFFFF;
  if (v6) {
    return v6;
  }
  else {
    return 0x800000;
  }
}

uint64_t WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  uint64_t result = 2654435769;
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    do
    {
      unsigned int v5 = (*(unsigned __int8 *)(a1 + v4 + 1) << 11) ^ ((result + *(unsigned __int8 *)(a1 + v4)) << 16) ^ (result + *(unsigned __int8 *)(a1 + v4));
      uint64_t result = v5 + (v5 >> 11);
      unint64_t v6 = v4 + 3;
      v4 += 2;
    }
    while (v6 < a2);
  }
  if (a2)
  {
    int v7 = result + *(unsigned __int8 *)(a2 + a1 - 1);
    return (v7 ^ (v7 << 11)) + ((v7 ^ (v7 << 11)) >> 17);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcess::registerWithStateDumper()
{
  return os_state_add_handler();
}

void sub_1986F2824(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned int *WTF::makeVector<WTF::String>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = (unsigned int *)[a1 count];
  int v5 = (int)result;
  if (!result) {
    goto LABEL_4;
  }
  if (!((unint64_t)result >> 29))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * (void)result));
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v6;
LABEL_4:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v8 = [a1 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (!v8) {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, *(unsigned int *)(a2 + 12));
    }
    uint64_t v9 = *(void *)v24;
    while (1)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v24 != v9) {
          objc_enumerationMutation(a1);
        }
        WTF::makeVectorElement((uint64_t *)&v21, 0, *(const WTF::String **)(*((void *)&v23 + 1) + 8 * v10), v7);
        if (v22)
        {
          uint64_t v12 = *(unsigned int *)(a2 + 12);
          if (v12 == *(_DWORD *)(a2 + 8))
          {
            BOOL v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v21);
            uint64_t v17 = *(unsigned int *)(a2 + 12);
            uint64_t v18 = *(void *)a2;
            uint64_t v19 = *v16;
            uint64_t *v16 = 0;
            *(void *)(v18 + 8 * v17) = v19;
            LODWORD(v18) = v22;
            *(_DWORD *)(a2 + 12) = v17 + 1;
            if (!v18) {
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v13 = *(void *)a2;
            uint64_t v14 = v21;
            int v21 = 0;
            *(void *)(v13 + 8 * v12) = v14;
            *(_DWORD *)(a2 + 12) = v12 + 1;
          }
          int v15 = v21;
          int v21 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v11);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
LABEL_16:
        ++v10;
      }
      while (v8 != v10);
      uint64_t v20 = [a1 countByEnumeratingWithState:&v23 objects:v27 count:16];
      uint64_t v8 = v20;
      if (!v20) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, *(unsigned int *)(a2 + 12));
      }
    }
  }
  __break(0xC471u);
  return result;
}

void sub_1986F29F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v2 = result;
    unint64_t v3 = result[3];
    if (v3 > a2)
    {
      unint64_t v7 = a2;
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(void *)result + 8 * a2), (WTF::StringImpl *)(*(void *)result + 8 * v3));
      a2 = v7;
      v2[3] = v7;
      LODWORD(v3) = v7;
    }
    uint64_t result = *(unsigned int **)v2;
    if (a2)
    {
      unsigned int v8 = v3;
      if (v2[2])
      {
        v2[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
        *(void *)unint64_t v2 = result;
        return result;
      }
      __src = *(unsigned int **)v2;
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      unsigned int v4 = a2;
      int v5 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v2[2] = v4;
      *(void *)unint64_t v2 = v5;
      uint64_t result = __src;
      if (v5 != __src)
      {
        memcpy(v5, __src, 8 * v8);
        uint64_t result = __src;
      }
    }
    if (result)
    {
      if (*(unsigned int **)v2 == result)
      {
        *(void *)unint64_t v2 = 0;
        v2[2] = 0;
      }
      return (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
    }
  }
  return result;
}

void ___ZN6WebKit14WebProcessPool31startObservingPreferenceChangesEv_block_invoke()
{
  global_queue = dispatch_get_global_queue(0, 0);

  dispatch_async(global_queue, &__block_literal_global_112_0);
}

uint64_t WebKit::WebPage::updatePrefersNonBlinkingCursor(void)::$_0::operator()<WebCore::Document>(WebKit::WebProcess *a1)
{
  uint64_t v2 = *(unsigned __int8 *)(WebKit::WebProcess::singleton(a1) + 781);

  return MEMORY[0x1F416D850](a1, v2);
}

WTF *IPC::ArgumentCoder<WebKit::WebPreferencesStore,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>((uint64_t)&v24, a1);
  uint64_t result = (WTF *)IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>((uint64_t)&v19, a1);
  if (!*(void *)a1)
  {
LABEL_12:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    if (!v23) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (!v28 || (int v5 = v24, v24 = 0, v6 = v25, v25 = 0, !v23))
  {
    __break(1u);
    goto LABEL_12;
  }
  char v7 = v27;
  unsigned int v8 = v19;
  uint64_t v19 = 0;
  int v9 = v21;
  char v10 = v22;
  v12[0] = 0;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  v12[1] = 0;
  int v13 = 0;
  *(void *)(a2 + 12) = v26;
  char v14 = 0;
  *(unsigned char *)(a2 + 20) = v7;
  uint64_t v15 = 0;
  *(void *)(a2 + 24) = v8;
  uint64_t v16 = 0;
  uint64_t v11 = v20;
  LODWORD(v20) = 0;
  *(void *)(a2 + 32) = v11;
  int v17 = 0;
  *(_DWORD *)(a2 + 40) = v9;
  char v18 = 0;
  *(unsigned char *)(a2 + 44) = v10;
  *(unsigned char *)(a2 + 48) = 1;
  WebKit::WebPreferencesStore::~WebPreferencesStore((WebKit::WebPreferencesStore *)v12);
LABEL_5:
  uint64_t result = v19;
  if (v19) {
    uint64_t result = (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v19, (WTF::StringImpl *)v20);
  }
LABEL_7:
  if (v28)
  {
    uint64_t result = v24;
    if (v24) {
      return (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v24, (WTF::StringImpl *)v25);
    }
  }
  return result;
}

void sub_1986F2E64(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 24))
  {
    unint64_t v3 = *(WTF **)(v1 - 48);
    if (v3) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*(unsigned int *)(v1 - 40));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 24))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void WebKit::WebPreferencesStore::~WebPreferencesStore(WebKit::WebPreferencesStore *this)
{
  uint64_t v2 = (WTF *)*((void *)this + 3);
  if (v2) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v2, (WTF::StringImpl *)*((unsigned int *)this + 8));
  }
  if (*(void *)this) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)this, (WTF::StringImpl *)*((unsigned int *)this + 2));
  }
}

unsigned int *WebKit::WebPage::setUseIconLoadingClient(unsigned int *this, char a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 6) + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    int v5 = (unsigned int *)(v2 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    unsigned int v6 = *(unsigned char **)(*(void *)(v2 + 280) + 16);
    if (((*(uint64_t (**)(unsigned char *))(*(void *)v6 + 1072))(v6) & 1) == 0) {
      v6[52] = a2;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  return this;
}

uint64_t WebCore::LocalFrameLoaderClient::isEmptyFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t *WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key;
}

void IPC::ArgumentCoder<std::tuple<WebKit::GPUProcessCreationParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::GPUProcessCreationParameters>(v5, a2);
  if (v6)
  {
    WebKit::GPUProcessCreationParameters::GPUProcessCreationParameters((uint64_t)a1, v5);
    int v4 = v6;
    a1[152] = 1;
    if (v4) {
      WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)v5, v3);
    }
  }
  else
  {
    *a1 = 0;
    a1[152] = 0;
  }
}

uint64_t WebKit::GPUProcessCreationParameters::GPUProcessCreationParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)(result + 8) = v3;
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *(void *)(result + 16) = v4;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(result + 24) = v5;
  *(void *)(result + 32) = a2[4];
  uint64_t v6 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v6;
  uint64_t v7 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v7;
  uint64_t v8 = a2[7];
  a2[7] = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = v8;
  uint64_t v9 = a2[8];
  a2[8] = 0;
  *(void *)(result + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(result + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(result + 76) = v9;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  uint64_t v10 = a2[10];
  a2[10] = 0;
  *(void *)(result + 80) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  *(_DWORD *)(result + 88) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = 0;
  *(_DWORD *)(result + 92) = v10;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  if (*((unsigned char *)a2 + 104))
  {
    uint64_t v14 = a2[12];
    a2[12] = 0;
    *(void *)(result + 96) = v14;
    *(unsigned char *)(result + 104) = 1;
  }
  *(void *)(result + 112) = 0;
  *(void *)(result + 120) = 0;
  uint64_t v11 = a2[14];
  a2[14] = 0;
  *(void *)(result + 112) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(result + 120) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(result + 124) = v11;
  uint64_t v12 = a2[16];
  a2[16] = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(void *)(result + 128) = v12;
  uint64_t v13 = a2[17];
  a2[17] = 0;
  *(void *)(result + 136) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(result + 144) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(result + 148) = v13;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::GPUProcessCreationParameters>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::decode(a2, a1);
  if (!a1[152])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void IPC::handleMessageAsync<Messages::GPUProcess::InitializeGPUProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<std::tuple<WebKit::GPUProcessCreationParameters>>(v14, a2);
  if (v15)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if ((_BYTE)v7)
    {
      uint64_t v11 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9BDDA0;
      v8[1] = v11;
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      uint64_t v13 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
      if (!v15)
      {
        __break(1u);
        return;
      }
      WebKit::GPUProcess::initializeGPUProcess(a3, (uint64_t)v14, (uint64_t *)&v13);
      uint64_t v10 = (uint64_t)v13;
      uint64_t v13 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    if (v15) {
      WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)v14, v7);
    }
  }
}

void WebKit::WebProcessPool::initializeNewWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  long long v193 = 0u;
  long long v194 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  long long v189 = 0u;
  long long v190 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  long long v176 = 0u;
  uint64_t v195 = 0;
  uint64_t v197 = 0x41DFFFFFFFC00000;
  *(void *)&v198[5] = 0;
  *(void *)v198 = 0;
  v198[13] = 1;
  uint64_t v199 = 0;
  memset(v200, 0, sizeof(v200));
  uint64_t v205 = 0;
  char v206 = 0;
  LOBYTE(v207) = 0;
  char v222 = 0;
  char v225 = 0;
  char v226 = 0;
  char v227 = 0;
  __int16 v228 = 0;
  long long v203 = 0u;
  memset(v204, 0, sizeof(v204));
  char v224 = 0;
  long long v223 = 0u;
  long long v229 = 0u;
  int v230 = 0;
  long long v231 = 0u;
  long long v232 = 0u;
  uint64_t v233 = 0;
  *(_DWORD *)((char *)v202 + 7) = 0;
  uint64_t v201 = 0;
  v202[0] = 0;
  uint64_t v234 = -1;
  uint64_t v235 = -1;
  int v236 = -1;
  __int16 v237 = 1;
  char v238 = 0;
  char v239 = 0;
  long long v240 = 0u;
  long long v241 = 0u;
  long long v242 = 0u;
  WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters(&v161);
  uint64_t v9 = v161;
  v161 = 0;
  uint64_t v10 = (WTF::StringImpl *)v176;
  *(void *)&long long v176 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v162;
  v162 = 0;
  uint64_t v12 = (WTF::StringImpl *)*((void *)&v176 + 1);
  *((void *)&v176 + 1) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v8);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v163[0];
  v163[0] = 0;
  uint64_t v14 = (WTF::StringImpl *)v177;
  *(void *)&long long v177 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::operator=[abi:sn180100]((WTF::StringImpl ****)&v177 + 1, (WTF::StringImpl *)&v163[1]);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)&v163[1], v15);
  int v17 = v163[0];
  v163[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  char v18 = v162;
  v162 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = v161;
  v161 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::String::operator=((uint64_t *)&v178, (WTF::StringImpl **)(a1 + 688));
  if ((void)v178)
  {
    uint64_t v20 = *(unsigned int *)(v178 + 4);
    if (v20)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v178 + 8), (WebKit::SandboxExtensionImpl *)(v20 | ((unint64_t)((*(_DWORD *)(v178 + 16) >> 2) & 1) << 32)), 0, (uint64_t)&v161);
      if ((_BYTE)v162)
      {
        int v21 = v161;
        v161 = 0;
        char v22 = (const char **)*((void *)&v178 + 1);
        *((void *)&v178 + 1) = v21;
        if (!v22 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v22), WTF::fastFree(v141, v142), (_BYTE)v162)) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v161);
        }
      }
    }
  }
  unint64_t v23 = 0;
  v158[0] = 0;
  v158[1] = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 716);
  if (v24)
  {
    if (v24 >> 29)
    {
      __break(0xC471u);
      return;
    }
    LODWORD(v158[1]) = *(_DWORD *)(a1 + 716);
    v158[0] = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v24));
    uint64_t v143 = *(unsigned int *)(a1 + 716);
    if (v143)
    {
      v144 = *(uint64_t **)(a1 + 704);
      uint64_t v145 = 8 * v143;
      do
      {
        uint64_t v146 = *v144;
        if (*v144)
        {
          v147 = *(WebKit::SandboxExtensionImpl **)(v146 + 8);
          unint64_t v148 = *(unsigned int *)(v146 + 4) | ((unint64_t)((*(_DWORD *)(v146 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v147 = 0;
          unint64_t v148 = 0x100000000;
        }
        WebKit::SandboxExtension::createHandleWithoutResolvingPath(v147, (WebKit::SandboxExtensionImpl *)v148, 0, (uint64_t)&v161);
        if ((_BYTE)v162)
        {
          v149 = v161;
          v160 = v161;
          v161 = 0;
          LODWORD(v150) = HIDWORD(v158[1]);
          if (HIDWORD(v158[1]) == LODWORD(v158[1]))
          {
            v151 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v158, HIDWORD(v158[1]) + 1, (unint64_t)&v160);
            uint64_t v150 = HIDWORD(v158[1]);
            v152 = v158[0];
            uint64_t v153 = *v151;
            uint64_t *v151 = 0;
            *((void *)v152 + v150) = v153;
          }
          else
          {
            v160 = 0;
            *((void *)v158[0] + HIDWORD(v158[1])) = v149;
          }
          HIDWORD(v158[1]) = v150 + 1;
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v160);
          if ((_BYTE)v162) {
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v161);
          }
        }
        ++v144;
        v145 -= 8;
      }
      while (v145);
      unint64_t v23 = HIDWORD(v158[1]);
    }
    else
    {
      unint64_t v23 = 0;
    }
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v158, v23);
  if (HIDWORD(v179))
  {
    uint64_t v26 = (const char ***)v179;
    uint64_t v27 = 8 * HIDWORD(v179);
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v26);
      uint64_t v26 = (const char ***)(v28 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  unsigned int v29 = (WTF *)v179;
  if ((void)v179)
  {
    *(void *)&long long v179 = 0;
    DWORD2(v179) = 0;
    WTF::fastFree(v29, v25);
  }
  *(WTF::StringImpl **)&long long v179 = v158[0];
  v30 = v158[1];
  v158[0] = 0;
  v158[1] = 0;
  *((void *)&v179 + 1) = v30;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v158, v25);
  WebKit::WebProcessPool::setJavaScriptConfigurationFileEnabledFromDefaults((WebKit::WebProcessPool *)a1);
  {
    char v31 = WebKit::LegacyGlobalSettings::singleton(void)::properties;
  }
  else
  {
    char v31 = 2;
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  char v196 = v31;
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1E93CFBD0 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v194 + 2, (uint64_t)&WebKit::overrideLanguagesStorage(void)::storage);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 344));
  if (DWORD1(v182)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v181 + 1), (WTF::StringImpl *)(*((void *)&v181 + 1) + 8 * DWORD1(v182)));
  }
  uint64_t v33 = (WTF *)*((void *)&v181 + 1);
  if (*((void *)&v181 + 1))
  {
    *((void *)&v181 + 1) = 0;
    LODWORD(v182) = 0;
    WTF::fastFree(v33, v32);
  }
  *((void *)&v181 + 1) = v161;
  v34 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v182 = v34;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v32);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, &qword_1EB35A6F0);
  if (DWORD1(v183)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v182 + 1), (WTF::StringImpl *)(*((void *)&v182 + 1) + 8 * DWORD1(v183)));
  }
  int v36 = (WTF *)*((void *)&v182 + 1);
  if (*((void *)&v182 + 1))
  {
    *((void *)&v182 + 1) = 0;
    LODWORD(v183) = 0;
    WTF::fastFree(v36, v35);
  }
  *((void *)&v182 + 1) = v161;
  uint64_t v37 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v183 = v37;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v35);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, &qword_1EB35A6F8);
  if (DWORD1(v184)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v183 + 1), (WTF::StringImpl *)(*((void *)&v183 + 1) + 8 * DWORD1(v184)));
  }
  uint64_t v39 = (WTF *)*((void *)&v183 + 1);
  if (*((void *)&v183 + 1))
  {
    *((void *)&v183 + 1) = 0;
    LODWORD(v184) = 0;
    WTF::fastFree(v39, v38);
  }
  *((void *)&v183 + 1) = v161;
  unint64_t v40 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v184 = v40;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v38);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 352));
  if (DWORD1(v185)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v184 + 1), (WTF::StringImpl *)(*((void *)&v184 + 1) + 8 * DWORD1(v185)));
  }
  v42 = (WTF *)*((void *)&v184 + 1);
  if (*((void *)&v184 + 1))
  {
    *((void *)&v184 + 1) = 0;
    LODWORD(v185) = 0;
    WTF::fastFree(v42, v41);
  }
  *((void *)&v184 + 1) = v161;
  __int16 v43 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v185 = v43;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v41);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, &qword_1EB35A700);
  if (DWORD1(v186)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v185 + 1), (WTF::StringImpl *)(*((void *)&v185 + 1) + 8 * DWORD1(v186)));
  }
  unsigned int v45 = (WTF *)*((void *)&v185 + 1);
  if (*((void *)&v185 + 1))
  {
    *((void *)&v185 + 1) = 0;
    LODWORD(v186) = 0;
    WTF::fastFree(v45, v44);
  }
  *((void *)&v185 + 1) = v161;
  char v46 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v186 = v46;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v44);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, &qword_1EB35A708);
  if (DWORD1(v187)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v186 + 1), (WTF::StringImpl *)(*((void *)&v186 + 1) + 8 * DWORD1(v187)));
  }
  v48 = (WTF *)*((void *)&v186 + 1);
  if (*((void *)&v186 + 1))
  {
    *((void *)&v186 + 1) = 0;
    LODWORD(v187) = 0;
    WTF::fastFree(v48, v47);
  }
  *((void *)&v186 + 1) = v161;
  char v49 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v187 = v49;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v47);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 360));
  if (DWORD1(v188)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v187 + 1), (WTF::StringImpl *)(*((void *)&v187 + 1) + 8 * DWORD1(v188)));
  }
  v51 = (WTF *)*((void *)&v187 + 1);
  if (*((void *)&v187 + 1))
  {
    *((void *)&v187 + 1) = 0;
    LODWORD(v188) = 0;
    WTF::fastFree(v51, v50);
  }
  *((void *)&v187 + 1) = v161;
  v52 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v188 = v52;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v50);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 368));
  if (DWORD1(v189)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v188 + 1), (WTF::StringImpl *)(*((void *)&v188 + 1) + 8 * DWORD1(v189)));
  }
  v54 = (WTF *)*((void *)&v188 + 1);
  if (*((void *)&v188 + 1))
  {
    *((void *)&v188 + 1) = 0;
    LODWORD(v189) = 0;
    WTF::fastFree(v54, v53);
  }
  *((void *)&v188 + 1) = v161;
  v55 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v189 = v55;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v53);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 376));
  if (DWORD1(v190)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v189 + 1), (WTF::StringImpl *)(*((void *)&v189 + 1) + 8 * DWORD1(v190)));
  }
  v57 = (WTF *)*((void *)&v189 + 1);
  if (*((void *)&v189 + 1))
  {
    *((void *)&v189 + 1) = 0;
    LODWORD(v190) = 0;
    WTF::fastFree(v57, v56);
  }
  *((void *)&v189 + 1) = v161;
  v58 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v190 = v58;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v56);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 384));
  if (DWORD1(v191)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v190 + 1), (WTF::StringImpl *)(*((void *)&v190 + 1) + 8 * DWORD1(v191)));
  }
  v60 = (WTF *)*((void *)&v190 + 1);
  if (*((void *)&v190 + 1))
  {
    *((void *)&v190 + 1) = 0;
    LODWORD(v191) = 0;
    WTF::fastFree(v60, v59);
  }
  *((void *)&v190 + 1) = v161;
  v61 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v191 = v61;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v59);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)(a1 + 392));
  if (DWORD1(v192)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v191 + 1), (WTF::StringImpl *)(*((void *)&v191 + 1) + 8 * DWORD1(v192)));
  }
  v63 = (WTF *)*((void *)&v191 + 1);
  if (*((void *)&v191 + 1))
  {
    *((void *)&v191 + 1) = 0;
    LODWORD(v192) = 0;
    WTF::fastFree(v63, v62);
  }
  *((void *)&v191 + 1) = v161;
  v64 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v192 = v64;
  v65 = (WebKit::WebExtensionMatchPattern *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v62);
  v66 = WebKit::WebExtensionMatchPattern::extensionSchemes(v65);
  v161 = 0;
  v162 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v161, (uint64_t **)v66);
  if (DWORD1(v193)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)&v192 + 1), (WTF::StringImpl *)(*((void *)&v192 + 1) + 8 * DWORD1(v193)));
  }
  v68 = (WTF *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1))
  {
    *((void *)&v192 + 1) = 0;
    LODWORD(v193) = 0;
    WTF::fastFree(v68, v67);
  }
  *((void *)&v192 + 1) = v161;
  v69 = v162;
  v161 = 0;
  v162 = 0;
  *(void *)&long long v193 = v69;
  v70 = (WebKit *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v67);
  v198[4] = *(unsigned char *)(a1 + 400);
  v198[7] = *(unsigned char *)(a1 + 401);
  WebKit::mutableState(v70);
  BYTE1(v199) = WebKit::mutableState(void)::state;
  BOOL v72 = WebKit::WebProcessProxy::fullKeyboardAccessEnabled(v71);
  v198[8] = v72;
  WebCore::ResourceRequestBase::defaultTimeoutInterval((WebCore::ResourceRequestBase *)v72);
  uint64_t v197 = v73;
  *(_DWORD *)v198 = *(_DWORD *)(*(void *)(a1 + 760) + 16);
  if (a3)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(a3 + 384) + 56))(&v161);
    v75 = v161;
    v161 = 0;
    v76 = (WTF::StringImpl **)*((void *)&v203 + 1);
    *((void *)&v203 + 1) = v75;
    if (v76)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v76, v74);
      if (v161) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v161, v96);
      }
    }
  }
  if (!*((void *)&v203 + 1) || !*(_DWORD *)(*((void *)&v203 + 1) - 12))
  {
    v161 = (WTF::StringImpl *)"WebNotificationManagerProxy";
    v162 = (WTF::StringImpl *)28;
    v77 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 456), (WTF::ASCIILiteralHash *)&v161);
    v78 = v77 - 16;
    if (!v77) {
      v78 = 0;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)v78 + 4) + 64))(&v161);
    v80 = v161;
    v161 = 0;
    v81 = (WTF::StringImpl **)*((void *)&v203 + 1);
    *((void *)&v203 + 1) = v80;
    if (v81)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v81, v79);
      if (v161) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v161, v134);
      }
    }
  }
  v198[11] = *(unsigned char *)(a1 + 505);
  uint64_t v82 = *(void *)(a1 + 48);
  *(_WORD *)&v198[12] = *(_WORD *)(v82 + 74);
  LOBYTE(v199) = *(unsigned char *)(a2 + 780);
  *(_DWORD *)&v200[9] = *(_DWORD *)(v82 + 80);
  WTF::String::operator=((uint64_t *)&v240, (WTF::StringImpl **)(v82 + 136));
  uint64_t v83 = *(void *)(a1 + 48);
  *((void *)&v241 + 1) = *(void *)(v83 + 144);
  WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v242, v83 + 152);
  WebKit::WebProcessPool::platformInitializeWebProcess((WTF::StringImpl **)a1, (const WebKit::WebProcessProxy *)a2, (WebKit::WebProcessCreationParameters *)&v176);
  (*(void (**)(CFTypeRef **__return_ptr))(**(void **)(a1 + 200) + 32))(&v157);
  v84 = v157;
  if (!v157)
  {
    v84 = *(CFTypeRef **)(a1 + 192);
    if (v84)
    {
      CFRetain(v84[1]);
      v85 = v157;
      v157 = v84;
      if (v85)
      {
        CFRelease(v85[1]);
        v84 = v157;
      }
    }
    else
    {
      v157 = 0;
    }
  }
  v161 = (WTF::StringImpl *)&unk_1EE9DCAF8;
  WebKit::UserData::transform(v84, (uint64_t)&v161, (uint64_t *)v158);
  v86 = v158[0];
  v158[0] = 0;
  if (v86) {
    CFRetain(*((CFTypeRef *)v86 + 1));
  }
  uint64_t v87 = v180;
  *(void *)&long long v180 = v86;
  if (v87) {
    CFRelease(*(CFTypeRef *)(v87 + 8));
  }
  if (v86) {
    CFRelease(*((CFTypeRef *)v86 + 1));
  }
  v88 = v158[0];
  v158[0] = 0;
  if (v88) {
    CFRelease(*((CFTypeRef *)v88 + 1));
  }
  if (a3)
  {
    WebKit::WebProcessPool::webProcessDataStoreParameters((WebKit::WebProcessPool *)&v161, (WebKit::WebProcessProxy *)a1, (atomic_uchar *)a3);
    v90 = v162;
    v207 = v161;
    v162 = 0;
    if (v222)
    {
      v91 = v208;
      v208 = v90;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2) {
          WTF::StringImpl::destroy(v91, v89);
        }
        else {
          *(_DWORD *)v91 -= 2;
        }
      }
      v97 = v163[0];
      v163[0] = 0;
      v98 = (WTF::StringImpl *)v209;
      *(void *)&long long v209 = v97;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2) {
          WTF::StringImpl::destroy(v98, v89);
        }
        else {
          *(_DWORD *)v98 -= 2;
        }
      }
      v99 = v163[1];
      v163[1] = 0;
      v100 = (const char **)*((void *)&v209 + 1);
      *((void *)&v209 + 1) = v99;
      if (v100)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v100);
        WTF::fastFree(v135, v136);
      }
      uint64_t v101 = v165;
      *(void *)&long long v165 = 0;
      v102 = (WTF::StringImpl *)v211;
      uint64_t v210 = v164;
      *(void *)&long long v211 = v101;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2) {
          WTF::StringImpl::destroy(v102, v89);
        }
        else {
          *(_DWORD *)v102 -= 2;
        }
      }
      uint64_t v103 = *((void *)&v165 + 1);
      *((void *)&v165 + 1) = 0;
      v104 = (const char **)*((void *)&v211 + 1);
      *((void *)&v211 + 1) = v103;
      if (v104)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v104);
        WTF::fastFree(v137, v138);
      }
      char v212 = v166;
      uint64_t v105 = v167;
      *(void *)&long long v167 = 0;
      v106 = (WTF::StringImpl **)v213;
      *(void *)&long long v213 = v105;
      if (v106) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v89);
      }
      uint64_t v107 = *((void *)&v167 + 1);
      *((void *)&v167 + 1) = 0;
      uint64_t v108 = *((void *)&v213 + 1);
      *((void *)&v213 + 1) = v107;
      if (v108) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v108, v89);
      }
      uint64_t v109 = v168;
      *(void *)&long long v168 = 0;
      v110 = (WTF::StringImpl *)v214;
      *(void *)&long long v214 = v109;
      if (v110)
      {
        if (*(_DWORD *)v110 == 2) {
          WTF::StringImpl::destroy(v110, v89);
        }
        else {
          *(_DWORD *)v110 -= 2;
        }
      }
      uint64_t v111 = *((void *)&v168 + 1);
      *((void *)&v168 + 1) = 0;
      v112 = (const char **)*((void *)&v214 + 1);
      *((void *)&v214 + 1) = v111;
      if (v112)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v112);
        WTF::fastFree(v139, v140);
      }
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v215, (uint64_t)&v169);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v217, (uint64_t)&v171);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v219, (uint64_t)&v173);
      char v221 = v175;
    }
    else
    {
      long long v92 = *(_OWORD *)v163;
      *(_OWORD *)v163 = 0u;
      long long v209 = v92;
      long long v93 = v165;
      long long v165 = 0u;
      long long v211 = v93;
      long long v94 = v167;
      long long v95 = v168;
      long long v167 = 0u;
      long long v168 = 0u;
      v208 = v90;
      uint64_t v210 = v164;
      char v212 = v166;
      long long v213 = v94;
      long long v214 = v95;
      LOBYTE(v215) = 0;
      char v216 = 0;
      if (v170)
      {
        uint64_t v154 = v169;
        uint64_t v169 = 0;
        uint64_t v215 = v154;
        char v216 = 1;
      }
      LOBYTE(v217) = 0;
      char v218 = 0;
      if (v172)
      {
        uint64_t v155 = v171;
        uint64_t v171 = 0;
        uint64_t v217 = v155;
        char v218 = 1;
      }
      LOBYTE(v219) = 0;
      char v220 = 0;
      if (v174)
      {
        uint64_t v156 = v173;
        uint64_t v173 = 0;
        uint64_t v219 = v156;
        char v220 = 1;
      }
      char v221 = v175;
      char v222 = 1;
    }
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)&v161);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v113 = *(atomic_uint **)(a2 + 8);
  if (v113) {
    atomic_fetch_add(v113, 1u);
  }
  v158[0] = (WTF::StringImpl *)v113;
  WebKit::AuxiliaryProcessProxy::initializationActivityAndGrant((WebKit::AuxiliaryProcessProxy *)a2, &v158[1]);
  v114 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v114 = 2642;
  *((void *)v114 + 1) = 0;
  *((void *)v114 + 66) = (char *)v114 + 16;
  *((void *)v114 + 67) = 512;
  *((void *)v114 + 68) = 0;
  *((void *)v114 + 70) = 0;
  *((void *)v114 + 69) = 0;
  IPC::Encoder::encodeHeader(v114);
  v160 = v114;
  IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::encode(v114, (uint64_t)&v176);
  uint64_t v115 = v159;
  uint64_t v116 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v116 = &unk_1EE9DD468;
  *(_OWORD *)(v116 + 8) = *(_OWORD *)v158;
  *(void *)(v116 + 24) = v115;
  v117 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v161 = (WTF::StringImpl *)v116;
  v162 = v117;
  LOBYTE(v163[0]) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v160, 0, (uint64_t)&v161, 1);
  if (LOBYTE(v163[0]))
  {
    v119 = v161;
    v161 = 0;
    if (v119) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v119 + 8))(v119);
    }
  }
  v120 = v160;
  v160 = 0;
  if (v120)
  {
    IPC::Encoder::~Encoder(v120, v118);
    WTF::fastFree(v132, v133);
  }
  WebKit::WebProcessPool::setMediaAccessibilityPreferences((WebKit::WebProcessPool *)a1, (WebKit::WebProcessProxy *)a2);
  uint64_t v121 = *(void *)(a1 + 320);
  if (v121)
  {
    v122 = *(WTF::StringImpl **)(v121 + 64);
    if (v122) {
      *(_DWORD *)v122 += 2;
    }
    v158[0] = v122;
    v161 = (WTF::StringImpl *)v158;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::EnsureAutomationSessionProxy>(a2, (uint64_t **)&v161, 0, 0);
    v124 = v158[0];
    v158[0] = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
      {
        WTF::StringImpl::destroy(v124, v123);
        if (a4) {
          goto LABEL_168;
        }
        goto LABEL_173;
      }
      *(_DWORD *)v124 -= 2;
    }
  }
  if (a4)
  {
LABEL_168:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
    v126 = *(atomic_uint **)(a2 + 8);
    if (v126) {
      atomic_fetch_add(v126, 1u);
    }
    v127 = *(unsigned int **)(a1 + 88);
    *(void *)(a1 + 88) = v126;
    if (v127 && atomic_fetch_add((atomic_uint *volatile)v127, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v127);
      WTF::fastFree((WTF *)v127, v125);
    }
  }
LABEL_173:
  softLinkBKSDisplayBrightnessGetCurrent();
  LODWORD(v161) = v128;
  v129 = (WebKit::WebProcessPool *)WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::BacklightLevelDidChange>(a2, (float *)&v161, 0, 0);
  WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(v129);
  v131 = v157;
  v157 = 0;
  if (v131) {
    CFRelease(v131[1]);
  }
  WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)&v176, v130);
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, uint64_t **a2)
{
  uint64_t v3 = result;
  if (*a2)
  {
    uint64_t v4 = *((unsigned int *)*a2 - 3);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *((_DWORD *)v3 + 2) = v4;
      uint64_t *v3 = v5;
    }
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v7 = *a2;
  if (*a2) {
    v7 += *((unsigned int *)v7 - 1);
  }
  if (v7 != result)
  {
    uint64_t v8 = *v3;
    unsigned int v9 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v10 = (_DWORD *)*result;
      if (*result) {
        *v10 += 2;
      }
      *(void *)(v8 + 8 * v9) = v10;
      while (++result != v6)
      {
        if ((unint64_t)(*result + 1) > 1) {
          goto LABEL_16;
        }
      }
      uint64_t result = v6;
LABEL_16:
      ++v9;
    }
    while (result != v7);
    *((_DWORD *)v3 + 3) = v9;
  }
  return result;
}

const char *WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(uint64_t *a1, WTF::ASCIILiteralHash *this)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  uint64_t v5 = WTF::ASCIILiteralHash::hash(this, this) & v4;
  uint64_t result = *(const char **)(v2 + 24 * v5);
  if (result)
  {
    uint64_t v7 = *(const char **)this;
    int v8 = 1;
    while (result == (const char *)-1 || !v7 || strcmp(result, v7))
    {
      uint64_t v5 = (v5 + v8) & v4;
      uint64_t result = *(const char **)(v2 + 24 * v5);
      ++v8;
      if (!result) {
        return result;
      }
    }
    return *(const char **)(v2 + 24 * v5 + 16);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::BacklightLevelDidChange>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2616;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_1986F469C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebProcessProxy::fullKeyboardAccessEnabled(WebKit::WebProcessProxy *this)
{
  return +[WKFullKeyboardAccessWatcher fullKeyboardAccessEnabled];
}

WebKit::GPUProcessProxy *WebKit::GPUProcessProxy::GPUProcessProxy(WebKit::GPUProcessProxy *this)
{
  char v2 = WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(this);
  uint64_t v3 = (WebCore::MockRealtimeMediaSourceCenter *)WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy((uint64_t)this, v2, 0, 3.0);
  *(void *)this = &unk_1EE9E3368;
  *((void *)this + 3) = &unk_1EE9E3460;
  *((void *)this + 4) = &unk_1EE9E34B8;
  *((void *)this + 52) = 0;
  *((_DWORD *)this + 106) = 0;
  *((unsigned char *)this + 432) = WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(v3);
  *((void *)this + 58) = 0;
  *(void *)((char *)this + 444) = 0;
  *(void *)((char *)this + 452) = 0;
  *(void *)((char *)this + 436) = 0;
  *((_WORD *)this + 230) = 0;
  WebKit::AuxiliaryProcessProxy::connect(this);
  __int16 v50 = 0;
  char v49 = 0;
  v54[32] = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v57 = 0;
  *(_OWORD *)v52 = 0u;
  *(_OWORD *)v53 = 0u;
  memset(v54, 0, 25);
  WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters(v44);
  long long v4 = *(_OWORD *)v44;
  v44[0] = 0;
  v44[1] = 0;
  long long v47 = v4;
  uint64_t v5 = v45;
  unsigned int v45 = 0;
  v48 = v5;
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::operator=[abi:sn180100](&v49, (WTF::StringImpl *)&v46);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v46, v6);
  int v8 = v45;
  unsigned int v45 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned int v9 = v44[1];
  v44[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v44[0];
  v44[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1E93CFBD0 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v56 + 2, (uint64_t)&WebKit::overrideLanguagesStorage(void)::storage);
  LOBYTE(v50) = *((unsigned char *)this + 432);
  pid_t v51 = getpid();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)v44, v42);
  uint64_t v12 = v44[0];
  v44[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)v42, v11);
  unsigned int v13 = v42[0];
  if (v42[0])
  {
    uint64_t v14 = *((void *)v42[0] + 1);
    unsigned int v13 = *((_DWORD *)v42[0] + 1);
    unint64_t v15 = ((unint64_t)*((unsigned int *)v42[0] + 4) >> 2) & 1;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 1;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v14, v13 | (v15 << 32), v44);
  char v17 = v44[0];
  v44[0] = 0;
  char v18 = v53[0];
  v53[0] = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v16);
      uint64_t v19 = v44[0];
      v44[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v16);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v18 -= 2;
      v44[0] = 0;
    }
  }
  uint64_t v20 = v42[0];
  v42[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v16);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory((uint64_t *)&v43);
  if (v53[0])
  {
    uint64_t v21 = *((unsigned int *)v53[0] + 1);
    if (v21)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v53[0] + 1), (WebKit::SandboxExtensionImpl *)(v21 | ((unint64_t)((*((_DWORD *)v53[0] + 4) >> 2) & 1) << 32)), 1, (uint64_t)v44);
      if (LOBYTE(v44[1]))
      {
        char v22 = v44[0];
        v44[0] = 0;
        unint64_t v23 = (const char **)v52[0];
        v52[0] = v22;
        if (!v23 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v23), WTF::fastFree(v38, v39), LOBYTE(v44[1]))) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v44);
        }
      }
    }
  }
  if (v43)
  {
    uint64_t v24 = *((unsigned int *)v43 + 1);
    if (v24)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v43 + 1), (WebKit::SandboxExtensionImpl *)(v24 | ((unint64_t)((*((_DWORD *)v43 + 4) >> 2) & 1) << 32)), 1, (uint64_t)v44);
      if (LOBYTE(v44[1]))
      {
        unsigned int v25 = v44[0];
        v44[0] = 0;
        uint64_t v26 = (const char **)v52[1];
        v52[1] = v25;
        if (!v26 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v26), WTF::fastFree(v40, v41), LOBYTE(v44[1]))) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v44);
        }
      }
    }
  }
  WebKit::GPUProcessProxy::platformInitializeGPUProcessParameters(this, (WebKit::GPUProcessCreationParameters *)&v47);
  *((unsigned char *)this + 461) = HIDWORD(v55) != 0;
  WebKit::AuxiliaryProcessProxy::initializationActivityAndGrant(this, v42);
  uint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v27 = 73;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  v58 = v27;
  IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::encode(v27, (uint64_t)&v47);
  uint64_t v28 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v28 = &unk_1EE9E36A0;
  *(_OWORD *)(v28 + 8) = *(_OWORD *)v42;
  unsigned int v29 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v44[0] = (WTF::StringImpl *)v28;
  v44[1] = v29;
  LOBYTE(v45) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v58, 0, (uint64_t)v44, 1);
  if ((_BYTE)v45)
  {
    char v31 = v44[0];
    v44[0] = 0;
    if (v31) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v31 + 8))(v31);
    }
  }
  uint64_t v32 = v58;
  v58 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v30);
    WTF::fastFree(v36, v37);
  }
  WebKit::GPUProcessProxy::updateProcessAssertion(this);
  v34 = v43;
  __int16 v43 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v33);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)&v47, v33);
  return this;
}

void WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters(WebKit::GPUProcessCreationParameters *this, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, a2);
  long long v4 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, v3);
  if (*((unsigned char *)this + 104)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 12);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v5);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v6);
  int v8 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 6);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 5);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)this + 3, v9);
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  unsigned int v13 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
}

WTF::StringImpl *WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory@<X0>(WebKit::WebsiteDataStore *this@<X0>, void *a2@<X8>)
{
  WebKit::pathForProcessContainer((uint64_t *)&v15, this);
  uint64_t v5 = v15;
  if (v15 && *((_DWORD *)v15 + 1)) {
    goto LABEL_10;
  }
  uint64_t v6 = NSHomeDirectory();
  MEMORY[0x19972EAD0](&v17, v6);
  uint64_t v5 = v17;
  char v17 = 0;
  int v8 = v15;
  unint64_t v15 = v5;
  if (!v8) {
    goto LABEL_9;
  }
  int v9 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 != 2)
  {
LABEL_7:
    *(_DWORD *)int v8 = v9;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v8, v7);
  int v8 = v17;
  char v17 = 0;
  if (v8)
  {
    int v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v10);
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v5 = v15;
LABEL_9:
  if (v5)
  {
LABEL_10:
    char v11 = 0;
    *(_DWORD *)v5 += 2;
    goto LABEL_11;
  }
  char v11 = 1;
LABEL_11:
  uint64_t v12 = *(WTF::StringImpl **)this;
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  uint64_t v16 = v12;
  char v17 = v5;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v17, (uint64_t *)&v16, a2);
  if (!*a2)
  {
    __break(0xC471u);
    return result;
  }
  if (!v12)
  {
LABEL_17:
    if (v11) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v12, v14);
  if (v11) {
    goto LABEL_23;
  }
LABEL_20:
  if (*(_DWORD *)v5 == 2) {
    WTF::StringImpl::destroy(v5, v14);
  }
  else {
    *(_DWORD *)v5 -= 2;
  }
LABEL_23:
  uint64_t result = v15;
  unint64_t v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1986F4EA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::pathForProcessContainer(WebKit *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  __s[0] = 0;
  getpid();
  sandbox_container_path_for_pid();
  strlen(__s);
  return WTF::String::fromUTF8();
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  int v7 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        int v9 = v13;
        if (v13)
        {
          *unsigned int v13 = 2;
          v9[1] = v7;
          *((void *)v9 + 1) = v9 + 5;
          v9[4] = 4;
          uint64_t v12 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v12, (char *)v9 + 20);
          uint64_t v10 = v12;
          if (v12) {
            uint64_t v10 = *(unsigned int *)(v12 + 4);
          }
          unsigned int v13 = a4;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v13, (char *)v9 + v10 + 20);
        }
        goto LABEL_16;
      }
LABEL_10:
      int v9 = 0;
      goto LABEL_16;
    }
LABEL_11:
    int v9 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_16;
  }
  if (!result) {
    goto LABEL_11;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_10;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  int v9 = v13;
  if (v13)
  {
    *unsigned int v13 = 2;
    v9[1] = v7;
    *((void *)v9 + 1) = v9 + 5;
    v9[4] = 0;
    uint64_t v12 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v12, (char *)v9 + 20);
    uint64_t v11 = v12;
    if (v12) {
      uint64_t v11 = *(unsigned int *)(v12 + 4);
    }
    unsigned int v13 = a4;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v13, (char *)v9 + 2 * v11 + 20);
  }
LABEL_16:
  *a5 = v9;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)result;
  if (*(void *)result) {
    int v4 = *(_DWORD *)(v3 + 4);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *a2;
  if (*a2) {
    int v6 = *(_DWORD *)(v5 + 4);
  }
  else {
    int v6 = 0;
  }
  if (((v6 | v4) & 0x80000000) == 0)
  {
    uint64_t result = (v4 + v6);
    if (!__OFADD__(v4, v6))
    {
      if (v3)
      {
        unsigned int v7 = *(_DWORD *)(v3 + 16);
        int v8 = (v7 >> 2) & 1;
        if (!v5 || (v7 & 4) == 0) {
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, (_DWORD *)v5, a3);
        }
      }
      else if (!v5)
      {
        int v8 = 1;
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, (_DWORD *)v5, a3);
      }
      int v8 = (*(unsigned __int8 *)(v5 + 16) >> 2) & 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, (_DWORD *)v5, a3);
    }
  }
  *a3 = 0;
  return result;
}

WTF::StringImpl ****std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::operator=[abi:sn180100](WTF::StringImpl ****a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl ****)a2;
  *(void *)a2 = 0;
  int v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4)
    {
      int v6 = v4;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v4, a2);
      int v4 = v6;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy(uint64_t a1, char a2, char a3, double a4)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EE9D53E0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_1EE9D54C0;
  *(void *)(a1 + 32) = &unk_1EE9D5518;
  *(void *)(a1 + 40) = 0;
  WebKit::ResponsivenessTimer::ResponsivenessTimer(a1 + 56, a1, a4);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 168) = a3;
  *(_WORD *)(a1 + 169) = 0;
  *(void *)(a1 + 176) = WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(_WORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  WebKit::ProcessThrottler::ProcessThrottler((WebKit::ProcessThrottler *)(a1 + 200), (WebKit::AuxiliaryProcessProxy *)a1, a2);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  return a1;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::ResponsivenessTimer::ResponsivenessTimer(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  unsigned int v7 = *(atomic_uint **)(a2 + 8);
  atomic_fetch_add(v7, 1u);
  *(void *)a1 = v7;
  int v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  int v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v9 = &unk_1EE9D7610;
  v9[1] = WebKit::ResponsivenessTimer::timerFired;
  void v9[2] = 0;
  v9[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 8), v8);
  *(void *)(a1 + 8) = &unk_1EE9B3390;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 50) = 0;
  *(double *)(a1 + 56) = a3;
  return a1;
}

WebKit::ProcessThrottler *WebKit::ProcessThrottler::ProcessThrottler(WebKit::ProcessThrottler *this, WebKit::AuxiliaryProcessProxy *a2, char a3)
{
  *(void *)this = 0;
  int v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  v6[1] = 0;
  uint64_t v6[2] = 0;
  *int v6 = 0;
  *((unsigned char *)v6 + 16) = 1;
  *((void *)this + 1) = v6;
  unsigned int v7 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  int v8 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v8, 1u);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = v8;
  int v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  uint64_t v10 = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::ProcessThrottler>((WebKit::ProcessThrottler *)((char *)this + 40), v9, (uint64_t)this, (uint64_t)WebKit::ProcessThrottler::prepareToSuspendTimeoutTimerFired, 0);
  uint64_t v11 = (WTF::RunLoop *)WTF::RunLoop::main(v10);
  uint64_t v12 = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::ProcessThrottler>((WebKit::ProcessThrottler *)((char *)this + 72), v11, (uint64_t)this, (uint64_t)WebKit::ProcessThrottler::dropNearSuspendedAssertionTimerFired, 0);
  unsigned int v13 = (WTF::RunLoop *)WTF::RunLoop::main(v12);
  WTF::RunLoop::Timer::Timer<WebKit::ProcessThrottler>((WebKit::ProcessThrottler *)((char *)this + 104), v13, (uint64_t)this, (uint64_t)WebKit::ProcessThrottler::prepareToDropLastAssertionTimeoutTimerFired, 0);
  *((unsigned char *)this + 176) = 0;
  *((_WORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((unsigned char *)this + 168) = 0;
  *((unsigned char *)this + 186) = a3;
  *(_WORD *)((char *)this + 187) = 257;
  *((unsigned char *)this + 189) = 0;
  return this;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::ProcessThrottler>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9D70A8;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v10;
  return result;
}

WTF::StringImpl **WebKit::AuxiliaryProcessProxy::connect(WebKit::AuxiliaryProcessProxy *this)
{
  WTF::MonotonicTime::now(this);
  *((void *)this + 24) = v2;
  v8[1] = 0;
  int v9 = 0;
  __int16 v10 = 0;
  (*(void (**)(WebKit::AuxiliaryProcessProxy *, void *))(*(void *)this + 160))(this, v8);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x70);
  uint64_t v4 = WebKit::ProcessLauncher::ProcessLauncher(v3, (uint64_t)this + 24, (uint64_t)v8);
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = v4;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), v5);
  }
  uint64_t result = v9;
  if (v9) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, (WTF::StringImpl *)v5);
  }
  return result;
}

uint64_t WebKit::ProcessLauncher::ProcessLauncher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1994F5F10;
  *(void *)(v6 + 24) = a1;
  *(void *)a1 = &unk_1EE9B9708;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 88) = v7;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a3 + 24);
  *(unsigned char *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 108) = 0;
  kdebug_trace();
  WebKit::ProcessLauncher::launchProcess((WebKit::ProcessLauncher *)a1);
  return a1;
}

void WebKit::ProcessLauncher::launchProcess(WebKit::ProcessLauncher *this)
{
  int v2 = *((_DWORD *)this + 18);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9D1C60;
  if (v2 == 2)
  {
    CFRetain(@"com.apple.WebKit.GPU");
    int v9 = (atomic_uchar *)*((void *)this + 1);
    if (v9) {
      __int16 v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
    }
    else {
      __int16 v10 = 0;
    }
    uint64_t v7 = malloc_type_malloc(0x48uLL, 0x10F0040F1C24582uLL);
    *uint64_t v7 = MEMORY[0x1E4F14398];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::{lambda(void *,BERenderingProcess *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::descriptor;
    v7[4] = v4;
    v7[5] = v10;
    v7[6] = this;
    v7[7] = "com.apple.WebKit.GPU";
    v7[8] = 21;
    int v8 = @"com.apple.WebKit.GPU";
    [MEMORY[0x1E4F18BB0] renderingProcessWithBundleID:@"com.apple.WebKit.GPU" interruptionHandler:&__block_literal_global_54 completion:v7];
  }
  else if (v2 == 1)
  {
    CFRetain(@"com.apple.WebKit.Networking");
    uint64_t v5 = (atomic_uchar *)*((void *)this + 1);
    if (v5) {
      uint64_t v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = malloc_type_malloc(0x48uLL, 0x10F0040F1C24582uLL);
    *uint64_t v7 = MEMORY[0x1E4F14398];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::{lambda(void *,BENetworkingProcess *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::descriptor;
    v7[4] = v4;
    v7[5] = v6;
    v7[6] = this;
    v7[7] = "com.apple.WebKit.Networking";
    v7[8] = 28;
    int v8 = @"com.apple.WebKit.Networking";
    [MEMORY[0x1E4F18BA0] networkProcessWithBundleID:@"com.apple.WebKit.Networking" interruptionHandler:&__block_literal_global_49 completion:v7];
  }
  else
  {
    if (v3 && ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3) & 1) != 0) {
      int v8 = @"com.apple.WebKit.WebContent.CaptivePortal";
    }
    else {
      int v8 = @"com.apple.WebKit.WebContent";
    }
    CFRetain(v8);
    uint64_t v11 = (atomic_uchar *)*((void *)this + 1);
    if (v11) {
      uint64_t v12 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v7 = malloc_type_malloc(0x48uLL, 0x10F0040F1C24582uLL);
    *uint64_t v7 = MEMORY[0x1E4F14398];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::{lambda(void *,BEWebContentProcess *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::descriptor;
    v7[4] = v4;
    v7[5] = v12;
    v7[6] = this;
    v7[7] = "com.apple.WebKit.WebContent";
    v7[8] = 28;
    [MEMORY[0x1E4F18BE8] webContentProcessWithBundleID:v8 interruptionHandler:&__block_literal_global_44_1 completion:v7];
  }
  _Block_release(v7);

  CFRelease(v8);
}

void sub_1986F59D0(_Unwind_Exception *a1)
{
  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::initializationActivityAndGrant@<X0>(WebKit::AuxiliaryProcessProxy *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 200;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v5, (uint64_t)v4, "Process initialization", 23, 1, 0);
  *a2 = result;
  uint64_t v7 = *((void *)this + 17);
  if (v7)
  {
    uint64_t v7 = *(void *)(v7 + 32);
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)v7, 1u);
    }
  }
  a2[1] = v7;
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebProcessProxy::shouldEnableLockdownMode(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 755);
}

void WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(uint64_t *a1@<X8>)
{
  if ((byte_1EB359B5B & 1) == 0)
  {
    qword_1EB359B90 = 0;
    byte_1EB359B5B = 1;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB359B98, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(&qword_1EB359B98, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::$_0 &&>>);
  }
  uint64_t v3 = qword_1EB359B90;
  if (qword_1EB359B90) {
    *(_DWORD *)qword_1EB359B90 += 2;
  }
  *a1 = v3;
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UIProcess::initializeLoggingIfNecessary(void)::$_0 &&>>(WTF *a1)
{
  WTF::logChannels(a1);
  WebKit::UIProcess::wtfLogLevelString((uint64_t)&v16);
  uint64_t v1 = v16;
  uint64_t v16 = 0;
  char v18 = v1;
  char v19 = 1;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v19)
  {
    uint64_t v3 = v18;
    char v18 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  char v4 = v16;
  uint64_t v16 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      char v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebCore::logChannels(v4);
  WebKit::UIProcess::webCoreLogLevelString((uint64_t)&v14);
  uint64_t v5 = v14;
  uint64_t v14 = 0;
  uint64_t v16 = v5;
  char v17 = 1;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v17)
  {
    uint64_t v7 = v16;
    uint64_t v16 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  int v8 = v14;
  uint64_t v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
  }
  WebKit::UIProcess::webKitLogLevelString((uint64_t)&v13);
  int v9 = v13;
  unsigned int v13 = 0;
  uint64_t v14 = v9;
  char v15 = 1;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v15)
  {
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  uint64_t result = v13;
  unsigned int v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters@<X0>(void *a1@<X8>)
{
  a1[3] = 0;
  uint64_t v3 = (WTF::StringImpl ****)(a1 + 3);
  WebKit::UIProcess::wtfLogLevelString((uint64_t)a1);
  WebKit::UIProcess::webCoreLogLevelString((uint64_t)&v9);
  a1[1] = v9;
  char v4 = (WebKit::SecureCoding *)WebKit::UIProcess::webKitLogLevelString((uint64_t)&v9);
  a1[2] = v9;
  uint64_t result = WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(v4);
  uint64_t v6 = (void **)*result;
  if (*result)
  {
    uint64_t v7 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    int v9 = (WTF::StringImpl ***)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v7, v6);
    std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::operator=[abi:sn180100](v3, (WTF::StringImpl *)&v9);
    return (uint64_t *)std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v9, v8);
  }
  return result;
}

uint64_t WebKit::UIProcess::webCoreLogLevelString@<X0>(uint64_t a1@<X8>)
{
  if ((byte_1EB359A62 & 1) == 0)
  {
    qword_1EB359A80 = 0;
    byte_1EB359A62 = 1;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit9UIProcess21webCoreLogLevelStringEv_block_invoke;
  block[3] = &__block_descriptor_33_e8_32c54_ZTSKZN6WebKit9UIProcess21webCoreLogLevelStringEvE3__0_e5_v8__0l;
  if (qword_1EB359A88 != -1) {
    dispatch_once(&qword_1EB359A88, block);
  }
  return MEMORY[0x19972EAD0](a1, qword_1EB359A80);
}

uint64_t WebKit::UIProcess::webKitLogLevelString@<X0>(uint64_t a1@<X8>)
{
  if ((byte_1EB359A63 & 1) == 0)
  {
    qword_1EB359A90 = 0;
    byte_1EB359A63 = 1;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit9UIProcess20webKitLogLevelStringEv_block_invoke;
  block[3] = &__block_descriptor_33_e8_32c53_ZTSKZN6WebKit9UIProcess20webKitLogLevelStringEvE3__0_e5_v8__0l;
  if (qword_1EB359A98 != -1) {
    dispatch_once(&qword_1EB359A98, block);
  }
  return MEMORY[0x19972EAD0](a1, qword_1EB359A90);
}

uint64_t WebKit::UIProcess::wtfLogLevelString@<X0>(uint64_t a1@<X8>)
{
  if ((byte_1EB359A61 & 1) == 0)
  {
    qword_1EB359A70 = 0;
    byte_1EB359A61 = 1;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit9UIProcess17wtfLogLevelStringEv_block_invoke;
  block[3] = &__block_descriptor_33_e8_32c50_ZTSKZN6WebKit9UIProcess17wtfLogLevelStringEvE3__0_e5_v8__0l;
  if (qword_1EB359A78 != -1) {
    dispatch_once(&qword_1EB359A78, block);
  }
  return MEMORY[0x19972EAD0](a1, qword_1EB359A70);
}

uint64_t *WebKit::AuxiliaryProcess::applyProcessCreationParameters(WTF *a1, WebCore *a2)
{
  WTF::logChannels(a1);
  uint64_t v3 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v3 += 2;
  }
  unsigned int v13 = v3;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  uint64_t v5 = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      uint64_t v5 = (WebCore *)WTF::StringImpl::destroy(v13, v4);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::logChannels(v5);
  uint64_t v6 = (WTF::StringImpl *)*((void *)a2 + 1);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v12 = v6;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v7);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
  }
  int v8 = (WTF::StringImpl *)*((void *)a2 + 2);
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v11 = v8;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return WebKit::SecureCoding::applyProcessCreationParameters(a2);
}

uint64_t *WebKit::SecureCoding::applyProcessCreationParameters(WebCore *a1)
{
  uint64_t v1 = (WebKit::SecureCoding *)WebCore::isInAuxiliaryProcess(a1);
  if ((v1 & 1) == 0
    || (uint64_t result = WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(v1), qword_1EB35A400))
  {
    __break(0xC471u);
    JUMPOUT(0x1986F6280);
  }
  return result;
}

uint64_t *WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(WebKit::SecureCoding *this)
{
  if ((_MergedGlobals_139 & 1) == 0)
  {
    qword_1EB35A400 = 0;
    _MergedGlobals_139 = 1;
  }
  if (qword_1EB35A3F8 != -1) {
    dispatch_once(&qword_1EB35A3F8, &__block_literal_global_44);
  }
  return &qword_1EB35A400;
}

uint64_t WebKit::NetworkProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  uint64_t result = WebKit::AuxiliaryProcessProxy::getLaunchOptions(a1, a2);
  int v4 = WebKit::nextNetworkProcessLaunchShouldFailForTesting;
  WebKit::nextNetworkProcessLaunchShouldFailForTesting = 0;
  if (v4 == 1) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  return result;
}

void WebKit::WebProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  WebKit::AuxiliaryProcessProxy::getLaunchOptions(a1, a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 512) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = &qword_1EB35A000;
    goto LABEL_55;
  while (1)
  {
    if (WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)&WebKit::allInspectorProcessPools(void)::allInspectorProcessPools, v5))
    {
      uint64_t v35 = "inspector-process";
      uint64_t v36 = 18;
      uint64_t v33 = "1";
      uint64_t v34 = 2;
      uint64_t v37 = &v33;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>((uint64_t *)(a2 + 16), (uint64_t *)&v35, (uint64_t)&v37, (uint64_t)v32);
    }
    *(unsigned char *)(a2 + 24) = 0;
    if (*(unsigned char *)(a1 + 778))
    {
      uint64_t v35 = "is-prewarmed";
      uint64_t v36 = 13;
      uint64_t v33 = "1";
      uint64_t v34 = 2;
      uint64_t v37 = &v33;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>((uint64_t *)(a2 + 16), (uint64_t *)&v35, (uint64_t)&v37, (uint64_t)v32);
    }
    uint64_t v7 = *(void *)(a1 + 512);
    if (!v7)
    {
      if (!MEMORY[0x20A]) {
        goto LABEL_18;
      }
      uint64_t v9 = 0;
LABEL_17:
      CFRetain(*(CFTypeRef *)(v9 + 8));
      *(unsigned char *)(v9 + 522) = 0;
      CFRelease(*(CFTypeRef *)(v9 + 8));
      *(unsigned char *)(a2 + 25) = 1;
      goto LABEL_18;
    }
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = v8 - 16;
    if (v8) {
      uint64_t v10 = v8 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 522)) {
      goto LABEL_17;
    }
LABEL_18:
    if (!*(unsigned char *)(a1 + 872)) {
      goto LABEL_48;
    }
    uint64_t v11 = (uint64_t *)(a2 + 16);
    uint64_t v35 = "service-worker-process";
    uint64_t v36 = 23;
    uint64_t v33 = "1";
    uint64_t v34 = 2;
    uint64_t v37 = &v33;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>((uint64_t *)(a2 + 16), (uint64_t *)&v35, (uint64_t)&v37, (uint64_t)v32);
    uint64_t v6 = (uint64_t *)*(unsigned __int8 *)(a1 + 704);
    if (*(unsigned char *)(a1 + 704)) {
      break;
    }
    __break(1u);
LABEL_55:
    WebKit::allInspectorProcessPools(void)::allInspectorProcessPools = 0;
    unk_1EB35A850 = 0;
    *((unsigned char *)v6 + 2136) = 1;
  }
  uint64_t v12 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a2 + 16), 0), (uint64_t v12 = *v11) != 0))
  {
    unsigned int v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    unsigned int v13 = 0;
  }
  int v14 = WTF::HashTranslatorASCIILiteral::hash((uint64_t)"registrable-domain", 19);
  int v15 = 0;
  uint64_t v16 = 0;
  int v17 = v14;
  while (2)
  {
    unsigned int v18 = v17 & v13;
    char v19 = (void *)(v12 + 16 * (v17 & v13));
    uint64_t v20 = *v19;
    if (*v19 == -1)
    {
LABEL_27:
      int v17 = ++v15 + v18;
      uint64_t v16 = v19;
      continue;
    }
    break;
  }
  if (v20)
  {
    char v21 = MEMORY[0x19972E990](v20, "registrable-domain", 18);
    char v19 = v16;
    if (v21) {
      goto LABEL_48;
    }
    goto LABEL_27;
  }
  if (v16) {
    char v22 = (WTF::StringImpl **)v16;
  }
  else {
    char v22 = (WTF::StringImpl **)(v12 + 16 * v18);
  }
  if (*v22 == (WTF::StringImpl *)-1)
  {
    *char v22 = 0;
    v22[1] = 0;
    --*(_DWORD *)(*v11 - 16);
  }
  WTF::HashTranslatorASCIILiteral::translate(v22, (WTF::StringImpl *)"registrable-domain", 19, v14);
  uint64_t v24 = *(WTF::StringImpl **)(a1 + 696);
  if (v24) {
    *(_DWORD *)v24 += 2;
  }
  unsigned int v25 = v22[1];
  v22[1] = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = *v11;
  if (*v11) {
    int v27 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(v26 - 12) = v27;
  uint64_t v28 = *v11;
  if (*v11) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30) {
LABEL_47:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a2 + 16), v22);
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_47;
  }
LABEL_48:
  if (*(unsigned char *)(a1 + 779))
  {
    uint64_t v35 = "enable-lockdown-mode";
    uint64_t v36 = 21;
    uint64_t v33 = "1";
    uint64_t v34 = 2;
    uint64_t v37 = &v33;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>((uint64_t *)(a2 + 16), (uint64_t *)&v35, (uint64_t)&v37, (uint64_t)v32);
  }
}

uint64_t WebKit::GPUProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  return WebKit::AuxiliaryProcessProxy::getLaunchOptions(a1, a2);
}

uint64_t WebKit::WebProcessPool::setJavaScriptConfigurationFileEnabledFromDefaults(WebKit::WebProcessPool *this)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"WebKitJavaScriptCoreUseConfigFile");
  *((unsigned char *)this + 506) = result;
  return result;
}

void WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(WebKit::WebProcessPool *this)
{
  {
    uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v1 = &unk_1EE9D1148;
    uint64_t v3 = v1;
    MEMORY[0x199735210](&WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(void)::notifier, &v3);
    int v2 = v3;
    uint64_t v3 = 0;
    if (v2) {
      (*(void (**)(void *))(*v2 + 8))(v2);
    }
  }
}

void sub_1986F67A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2)
{
  if (qword_1E93CF6F0 != -1) {
    dispatch_once(&qword_1E93CF6F0, &__block_literal_global_25);
  }
  uint64_t v3 = qword_1E93CF6E8;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyE_block_invoke_2;
  block[3] = &__block_descriptor_40_e8_32c92_ZTSKZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyEE3__0_e5_v8__0l;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
  if (v4)
  {
    atomic_fetch_add(v4, 1u);
    atomic_fetch_add(v4, 1u);
    uint64_t v8 = (WTF *)v4;
    dispatch_async(v3, block);
    if (atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::fastFree((WTF *)v4, v5);
    }
  }
  else
  {
    uint64_t v8 = 0;
    dispatch_async(v3, block);
  }
  uint64_t result = (unsigned int *)v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    unsigned int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    unsigned int v8 = 0;
  }
  int v9 = WTF::HashTranslatorASCIILiteral::hash(*a2, a2[1]);
  int v10 = 0;
  uint64_t v11 = 0;
  for (int i = v9; ; int i = v10 + v13)
  {
    unsigned int v13 = i & v8;
    uint64_t v14 = v7 + 16 * (i & v8);
    if (*(void *)v14 != -1) {
      break;
    }
    uint64_t v11 = v7 + 16 * v13;
LABEL_10:
    ++v10;
  }
  if (!*(void *)v14)
  {
    if (v11) {
      uint64_t v14 = v11;
    }
    if (*(void *)v14 == -1)
    {
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
    }
    uint64_t result = (uint64_t)WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>::translate<WTF::KeyValuePair<WTF::String,WTF::String>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::ASCIILiteral &&,WTF::ASCIILiteral &&)::{lambda(void)#1}>((WTF::StringImpl **)v14, (uint64_t)a2, a3, v9);
    uint64_t v16 = *a1;
    if (*a1) {
      int v17 = *(_DWORD *)(v16 - 12) + 1;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v16 - 12) = v17;
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v14);
        uint64_t v14 = result;
        uint64_t v20 = *a1;
        if (*a1) {
          unint64_t v23 = *(unsigned int *)(v20 - 4);
        }
        else {
          unint64_t v23 = 0;
        }
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    uint64_t v24 = v20 + 16 * v23;
    char v25 = 1;
    goto LABEL_30;
  }
  uint64_t result = MEMORY[0x19972E990]();
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v18 = *a1;
  if (*a1) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v25 = 0;
  uint64_t v24 = v18 + 16 * v19;
LABEL_30:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 16) = v25;
  return result;
}

uint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = *(void *)result + 8 * a2;
      uint64_t v5 = 8 * v4 - 8 * a2;
      do
      {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)result);
        uint64_t result = v6 + 8;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v7 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if (v4)
      {
        unsigned int v8 = (const char ***)result;
        if ((WTF *)result != v7)
        {
          uint64_t v9 = 8 * v4;
          uint64_t result = (uint64_t)v7;
          int v10 = v7;
          do
          {
            uint64_t v11 = *(const char ***)result;
            *(void *)int v10 = 0;
            int v10 = (WTF *)((char *)v10 + 8);
            *v8++ = v11;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)result);
            uint64_t result = (uint64_t)v10;
            v9 -= 8;
          }
          while (v9);
        }
      }
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::GPUProcessCreationParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WebKit::GPUProcessCreationParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[152])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

unint64_t IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode(a1, (uint64_t *)a2);
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_9;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 33);
  unsigned int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1986F6D7CLL);
  }
  *unsigned int v8 = v7;
  int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v12 <= 3)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1986F6D5CLL);
  }
  *uint64_t v11 = v10;
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 40));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 64);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 112);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 128));

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 136);
}

void API::NotificationProvider::notificationPermissions(void *a1@<X8>)
{
  *a1 = 0;
}

void API::InjectedBundleClient::getInjectedBundleInitializationUserData(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t initBKSDisplayBrightnessGetCurrent(void)
{
  if (byte_1E93CF6D8 == 1)
  {
    v0 = (void *)qword_1E93CF740;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 2);
    if (!v0)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x1986F6E20);
    }
    qword_1E93CF740 = (uint64_t)v0;
    byte_1E93CF6D8 = 1;
  }
  uint64_t v1 = (uint64_t (*)(void))dlsym(v0, "BKSDisplayBrightnessGetCurrent");
  softLinkBKSDisplayBrightnessGetCurrent = v1;
  if (!v1) {
    goto LABEL_10;
  }

  return v1();
}

CGAffineTransform *WebKit::RemoteLayerBackingStore::enumerateRectsBeingDrawn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CGAffineTransform *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 664))(&v13, a2, 1);
  WebCore::AffineTransform::operator CGAffineTransform();
  CGAffineTransformInvert(&v15, &v14);
  CGAffineTransform v12 = v15;
  CGAffineTransformScale(&v13, &v12, *(float *)(a1 + 48), (float)-*(float *)(a1 + 48));
  CGAffineTransform v15 = v13;
  CGAffineTransform v11 = v13;
  uint64_t result = CGAffineTransformTranslate(&v13, &v11, 0.0, (float)-*(float *)(a1 + 32));
  CGAffineTransform v15 = v13;
  uint64_t v6 = *(unsigned int *)(a1 + 228);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 216);
    uint64_t v8 = 16 * v6;
    do
    {
      memset(&v13, 0, 32);
      WebCore::FloatRect::operator CGRect();
      CGAffineTransform v10 = v15;
      CGRect v17 = CGRectApplyAffineTransform(v16, &v10);
      v13.a = v17.origin.x;
      v13.b = v17.origin.y;
      v13.c = v17.size.width;
      v13.d = v17.size.height;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v9, (const CGRect *)&v13);
      uint64_t result = (CGAffineTransform *)(*(uint64_t (**)(uint64_t, float, float, float, float))(a3 + 16))(a3, v9[0], v9[1], v9[2], v9[3]);
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = WebCore::ScrollingTreeFrameScrollingNode::commitStateBeforeChildren();
  if (*(unsigned __int8 *)(a2 + 16) < 2u) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != 1) {
    return v6;
  }
  if ((*(unsigned char *)(a2 + 43) & 4) != 0)
  {
    PlatformLayerTyped = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(a2 + 584), v5);
    uint64_t v8 = PlatformLayerTyped;
    if (PlatformLayerTyped) {
      CFRetain(PlatformLayerTyped);
    }
    uint64_t v9 = *(const void **)(a1 + 408);
    *(void *)(a1 + 408) = v8;
    if (v9) {
      CFRelease(v9);
    }
  }
  if ((*(unsigned char *)(a2 + 46) & 2) != 0)
  {
    CGAffineTransform v10 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(a2 + 704), v5);
    CGAffineTransform v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    CGAffineTransform v12 = *(const void **)(a1 + 416);
    *(void *)(a1 + 416) = v11;
    if (v12) {
      CFRelease(v12);
    }
  }
  if ((*(unsigned char *)(a2 + 45) & 4) != 0)
  {
    CGAffineTransform v13 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(a2 + 744), v5);
    CGAffineTransform v14 = v13;
    if (v13) {
      CFRetain(v13);
    }
    CGAffineTransform v15 = *(const void **)(a1 + 424);
    *(void *)(a1 + 424) = v14;
    if (v15) {
      CFRelease(v15);
    }
  }
  if ((*(unsigned char *)(a2 + 41) & 0x10) != 0)
  {
    int v16 = *(_DWORD *)(a1 + 296);
    if (v16 == 1)
    {
      if (!*(void *)(a1 + 264)) {
        goto LABEL_25;
      }
    }
    else if (v16 == 3)
    {
      if (!*(void *)(a1 + 280)) {
        goto LABEL_25;
      }
    }
    else if (v16 != 2 || !*(void *)(a1 + 272))
    {
LABEL_25:
      uint64_t v17 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = 0;
      if (!v17) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    uint64_t v20 = WTF::fastMalloc((WTF *)0x38);
    WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate((WebCore::ScrollingTreeScrollingNodeDelegate *)v20, (WebCore::ScrollingTreeScrollingNode *)a1);
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = 0;
    *(void *)uint64_t v20 = &unk_1EE9D2440;
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 40) = 0;
    *(_WORD *)(v20 + 48) = 0;
    uint64_t v17 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v20;
    if (v17) {
LABEL_26:
    }
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
LABEL_27:
  uint64_t v18 = *(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(a1 + 96);
  if (v18) {
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(v18, (WebCore::LayerRepresentation **)a2);
  }
  return v6;
}

void sub_1986F7340(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::RunLoop::Timer::Timer<PAL::HysteresisActivity>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CGAffineTransform v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9CAED0;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v10;
  return result;
}

void ___ZN6WebKit11XPCEndpointC2Ev_block_invoke(uint64_t a1, _xpc_connection_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F14578])
  {
    uint64_t v3 = a2;
    if (a2)
    {
      unsigned int v4 = a2;
      uint64_t v3 = a2;
    }
    pid_t pid = xpc_connection_get_pid(v3);
    if (pid == getpid() || (WTF::hasEntitlement() & 1) != 0)
    {
      xpc_connection_set_target_queue(a2, MEMORY[0x1E4F14428]);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3321888768;
      handler[2] = ___ZN6WebKit11XPCEndpointC2Ev_block_invoke_2;
      handler[3] = &__block_descriptor_48_e8_40c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE_e33_v16__0__NSObject_OS_xpc_object__8l;
      handler[4] = v2;
      uint64_t v9 = a2;
      if (a2) {
        uint64_t v6 = a2;
      }
      xpc_connection_set_event_handler(a2, handler);
      xpc_connection_resume(a2);
      if (v9) {

      }
      if (a2) {
    }
      }
    else
    {
      WTFLogAlways();
      if (a2)
      {
      }
    }
  }
}

void sub_1986F753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16) {

  }
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t ___ZN6WebKitL25initTCCTCCAccessPreflightEPK10__CFStringPK14__CFDictionary_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::TCCLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "TCCAccessPreflight");
  WebKit::softLinkTCCTCCAccessPreflight = (uint64_t (*)(WebKit *__hidden, const __CFString *, const __CFDictionary *))result;
  if (!result)
  {
    uint64_t result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN6WebKit54get_TCC_kTCCServiceWebKitIntelligentTrackingPreventionEv_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::TCCLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "kTCCServiceWebKitIntelligentTrackingPrevention");
  if (result)
  {
    qword_1EB358E90 = *(void *)result;
  }
  else
  {
    uint64_t result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN6WebKit29get_TCC_kTCCServiceMicrophoneEv_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::TCCLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "kTCCServiceMicrophone");
  if (result)
  {
    qword_1EB358E70 = *(void *)result;
  }
  else
  {
    uint64_t result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::TCCLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit10TCCLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = 0;
  if (qword_1EB358E58 != -1) {
    dispatch_once(&qword_1EB358E58, block);
  }
  return _MergedGlobals_55;
}

void WebKit::WebChromeClient::didReceiveMobileDocType(WebKit::WebChromeClient *this, int a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(unsigned char *)(v4 + 1688) = a2;
  WebKit::WebPage::resetViewportDefaultConfiguration((WebKit::WebPage *)v4, *(WebKit::WebFrame **)(v4 + 88), a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void sub_1986F7778(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::resetViewportDefaultConfiguration(WebKit::WebPage *this, WebKit::WebFrame *a2, int a3)
{
  if (*((unsigned char *)this + 1184))
  {
    WebCore::ViewportConfiguration::testingParameters((uint64_t *)v22, this);
    uint64_t v4 = (WebKit::WebPage *)((char *)this + 952);
    return (unsigned int *)WebCore::ViewportConfiguration::setDefaultConfiguration(v4, (const Parameters *)v22);
  }
  uint64_t v6 = *((void *)a2 + 3);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0 || *(unsigned char *)(v7 + 144))
  {
    uint64_t v7 = *((void *)a2 + 5);
    if (!v7)
    {
      if (*((unsigned char *)this + 568)
        || (shouldIgnoreMetaViewport = (WebCore::ViewportConfiguration *)WebKit::WebPage::shouldIgnoreMetaViewport(this),
            shouldIgnoreMetaViewport))
      {
        WebCore::ViewportConfiguration::nativeWebpageParameters((uint64_t *)v22, (WebKit::WebPage *)((char *)this + 952));
      }
      else
      {
        WebCore::ViewportConfiguration::webpageParameters((uint64_t *)v22, shouldIgnoreMetaViewport);
      }
      uint64_t v4 = (WebKit::WebPage *)((char *)this + 952);
      return (unsigned int *)WebCore::ViewportConfiguration::setDefaultConfiguration(v4, (const Parameters *)v22);
    }
  }
  uint64_t v8 = (unsigned int *)(v7 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  uint64_t v9 = *(void *)(v7 + 296);
  if (v9)
  {
    *(_DWORD *)(v9 + 28) += 4;
    if (a3) {
      goto LABEL_10;
    }
    __int16 v16 = *(_WORD *)(v9 + 3406);
    if ((v16 & 4) != 0)
    {
      WebCore::ViewportConfiguration::imageDocumentParameters((uint64_t *)v22, this);
      WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 952), (const Parameters *)v22);
      goto LABEL_25;
    }
    if ((v16 & 0x40) != 0)
    {
      WebCore::ViewportConfiguration::textDocumentParameters((uint64_t *)v22, this);
      WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 952), (const Parameters *)v22);
      goto LABEL_25;
    }
LABEL_17:
    if (*((unsigned char *)this + 568)
      || (uint64_t v17 = (WebCore::ViewportConfiguration *)WebKit::WebPage::shouldIgnoreMetaViewport(this), v17))
    {
      WebCore::ViewportConfiguration::nativeWebpageParameters((uint64_t *)v22, (WebKit::WebPage *)((char *)this + 952));
    }
    else
    {
      WebCore::ViewportConfiguration::webpageParameters((uint64_t *)v22, v17);
    }
    WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 952), (const Parameters *)v22);
LABEL_21:
    if (!v9) {
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    }
LABEL_25:
    int v18 = *(_DWORD *)(v9 + 28) - 2;
    if (*(_DWORD *)(v9 + 28) == 2)
    {
      __int16 v20 = *(_WORD *)(v9 + 34);
      if ((v20 & 0x400) != 0) {
        goto LABEL_34;
      }
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
      int v18 = *(_DWORD *)(v9 + 28);
    }
    else
    {
      *(_DWORD *)(v9 + 28) = v18;
    }
    int v19 = v18 - 2;
    if (v19)
    {
      *(_DWORD *)(v9 + 28) = v19;
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    }
    __int16 v20 = *(_WORD *)(v9 + 34);
LABEL_34:
    if ((v20 & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  if (!a3) {
    goto LABEL_17;
  }
LABEL_10:
  WebCore::ViewportConfiguration::xhtmlMobileParameters((uint64_t *)v22, this);
  WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 952), (const Parameters *)v22);
  if (*((unsigned char *)this + 1088) == 3) {
    goto LABEL_21;
  }
  if (v9)
  {
    if (WebCore::Document::isViewportDocument((WebCore::Document *)v9))
    {
      v22[0] = 3;
      __asm { FMOV            V0.4S, #-1.0 }
      *(_OWORD *)&v22[20] = _Q0;
      *(_WORD *)&v22[36] = 0;
      *(_OWORD *)&v22[4] = xmmword_1994F73C0;
      *(void *)(v9 + 2262) = *(void *)&v22[30];
      long long v15 = *(_OWORD *)&v22[16];
      *(_OWORD *)(v9 + 2232) = *(_OWORD *)v22;
      *(_OWORD *)(v9 + 2248) = v15;
      if (WebCore::ViewportConfiguration::setViewportArguments()) {
        WebKit::WebPage::viewportConfigurationChanged((uint64_t)this, 0);
      }
    }
    goto LABEL_25;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
}

void sub_1986F79BC(_Unwind_Exception *a1)
{
  int v4 = *(_DWORD *)(v2 + 28) - 2;
  if (*(_DWORD *)(v2 + 28) == 2)
  {
    __int16 v6 = *(_WORD *)(v2 + 34);
    if ((v6 & 0x400) != 0) {
      goto LABEL_9;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
    int v4 = *(_DWORD *)(v2 + 28);
  }
  else
  {
    *(_DWORD *)(v2 + 28) = v4;
  }
  int v5 = v4 - 2;
  if (v5)
  {
    *(_DWORD *)(v2 + 28) = v5;
    goto LABEL_5;
  }
  __int16 v6 = *(_WORD *)(v2 + 34);
LABEL_9:
  if ((v6 & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
LABEL_5:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldIgnoreMetaViewport(WebKit::WebPage *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 6) + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3
    && (int v4 = *(WebCore::Document **)(v2 + 296)) != 0
    && (uint64_t v5 = WebCore::Document::loader(v4)) != 0
    && *(unsigned char *)(v5 + 3523) == 2)
  {
    return 1;
  }
  else
  {
    return *(unsigned char *)(*(void *)(*((void *)this + 6) + 112) + 701) & 1;
  }
}

void ___ZN6WebKit17XPCEndpointClient11setEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1, id a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  Class Class = object_getClass(a2);
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    char v8 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 8), (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v3 + 8);
    }
    uint64_t v9 = *(void **)(v3 + 16);
    if (v9) {

    }
    *(void *)(v3 + 16) = 0;
    int v10 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 8), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != 1)
    {
      WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 8));
    }
  }
  else if (Class == (Class)MEMORY[0x1E4F14590])
  {
    remote_connection = xpc_dictionary_get_remote_connection(a2);
    if (remote_connection)
    {
      pid_t pid = xpc_connection_get_pid(remote_connection);
      if (pid == getpid() || (WTF::hasEntitlement() & 1) != 0)
      {
        uint64_t v7 = *(void (**)(uint64_t, id))(*(void *)v3 + 16);
        v7(v3, a2);
      }
      else
      {
        WTFLogAlways();
      }
    }
  }
}

void sub_1986F7C04(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebPage::windowActivityDidChange(WebKit::WebPage *this)
{
  uint64_t v2 = (char *)this + 160;
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 20, &v12);
  uint64_t v3 = *((void *)this + 20);
  if (v3)
  {
    uint64_t v5 = *(unsigned int *)(v3 - 4);
    uint64_t v4 = v3 + 8 * v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  uint64_t v9 = v4;
  uint64_t v10 = v4;
  uint64_t v11 = v3 + 8 * v5;
  uint64_t result = WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    WebKit::PluginView::windowActivityDidChange(*(WebKit::PluginView **)(*(void *)v13 + 8));
    uint64_t result = WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

void *WebKit::WebPage::setActivityState(WebKit::WebPage *this, __int16 a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v7 = *((_WORD *)this + 912) ^ a2;
  *((_WORD *)this + 912) = a2;
  uint64_t v8 = v7;
  if (v7) {
    WebKit::WebPage::updateThrottleState(this);
  }
  if (*((void *)this + 6))
  {
    __int16 v9 = *((_WORD *)this + 461);
    *((_WORD *)this + 461) = v8;
    WebCore::Page::setActivityState();
    *((_WORD *)this + 461) = v9;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**((void **)this + 9) + 320))(*((void *)this + 9), v8, a3, a4);
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t result = (void *)WebKit::WebProcess::singleton(void)::process;
  if ((v8 & 4) != 0) {
    uint64_t result = (void *)WTF::isIntegralOrPointerType((WTF *)WebKit::WebProcess::singleton(void)::process);
  }
  if ((v8 & 0x10) != 0) {
    uint64_t result = WebKit::WebPage::updateIsInWindow(this, 0);
  }
  if ((v8 & 4) != 0) {
    uint64_t result = (void *)WebKit::WebPage::visibilityDidChange((uint64_t)this);
  }
  if (v8)
  {
    return WebKit::WebPage::windowActivityDidChange(this);
  }
  return result;
}

WTF::RunLoop *WebKit::WebPage::updateThrottleState(WebKit::WebPage *this)
{
  if (*((unsigned char *)this + 1826)) {
    BOOL v2 = (*((_WORD *)this + 912) & 0x1E1) == 32;
  }
  else {
    BOOL v2 = 0;
  }
  char v3 = v2;
  uint64_t v4 = (char *)this + 1832;
  if (v2) {
    uint64_t result = (WTF::RunLoop *)PAL::HysteresisActivity::stop((uint64_t)v4);
  }
  else {
    uint64_t result = (WTF::RunLoop *)PAL::HysteresisActivity::start((uint64_t)v4);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6 && (*(unsigned char *)(*(void *)(v6 + 112) + 699) & 8) != 0)
  {
    WTF::RunLoop::main(result);
    uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v7 = &unk_1EEA00D50;
    *(unsigned char *)(v7 + 8) = v3;
    uint64_t v8 = (WTF::RunLoop *)v7;
    WTF::RunLoop::dispatch();
    uint64_t result = v8;
    if (v8) {
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::visibilityDidChange(uint64_t this)
{
  if ((*(_WORD *)(this + 1824) & 4) == 0)
  {
    uint64_t v1 = *(void *)(*(void *)(this + 88) + 24);
    if (v1)
    {
      this = *(void *)(v1 + 8);
      if (this)
      {
        if (!*(unsigned char *)(this + 144))
        {
          BOOL v2 = (unsigned int *)(this + 8);
          atomic_fetch_add((atomic_uint *volatile)(this + 8), 1u);
          WebCore::Frame::checkedHistory((uint64_t *)&v4, (WebCore::Frame *)this);
          WebCore::HistoryController::saveDocumentAndScrollState(v4);
          char v3 = v4;
          uint64_t v4 = 0;
          if (!v3) {
            return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
          }
          if (*(_DWORD *)v3)
          {
            --*(_DWORD *)v3;
            return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
          }
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::activityStateDidChange(WebKit::RemoteLayerTreeDrawingArea *a1, int a2, uint64_t a3, WebKit::RemoteLayerTreeDrawingArea *this)
{
  if (a3)
  {
    *(unsigned char *)(*((void *)a1 + 10) + 208) = 1;
    *((void *)a1 + 34) = a3;
    WebKit::RemoteLayerTreeDrawingArea::startRenderingUpdateTimer(a1);
  }

  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)this);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16SetActivityStateEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore13ActivityStateEEEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA01200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t PAL::HysteresisActivity::start(uint64_t this)
{
  if (!*(unsigned char *)(this + 48))
  {
    uint64_t v1 = this;
    *(unsigned char *)(this + 48) = 1;
    BOOL v2 = (WTF::RunLoop::TimerBase *)(this + 16);
    if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 16)))
    {
      return WTF::RunLoop::TimerBase::stop(v2);
    }
    else
    {
      char v3 = *(uint64_t (**)(void))(**(void **)v1 + 16);
      return v3();
    }
  }
  return this;
}

uint64_t PAL::HysteresisActivity::stop(uint64_t this)
{
  if (*(unsigned char *)(this + 48))
  {
    *(unsigned char *)(this + 48) = 0;
    return WTF::RunLoop::TimerBase::start();
  }
  return this;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::ActivityState>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::Decoder::decode<unsigned short>(a1);
  unsigned __int16 v3 = v2;
  BOOL v4 = (v2 & 0xFC00) != 0 || (v2 & 0xFF0000) == 0;
  if (v4) {
    IPC::Decoder::markInvalid(a1);
  }
  if (v4) {
    return 0;
  }
  else {
    return v3 | 0x10000u;
  }
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::Decoder::decode<unsigned short>(a1);
  unsigned __int16 v3 = v2;
  BOOL v4 = (v2 & 0xFE08) != 0 || (v2 & 0xFF0000) == 0;
  if (v4) {
    IPC::Decoder::markInvalid(a1);
  }
  if (v4) {
    return 0;
  }
  else {
    return v3 | 0x10000u;
  }
}

uint64_t IPC::Decoder::decode<unsigned short>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 >= v3 && v1 - v3 > 1)
  {
    uint64_t v5 = (_WORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      int v6 = *v5 & 0xFF00;
      unsigned int v7 = *v5;
      int v8 = 0x10000;
      return v8 | v6 | v7;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      CGAffineTransform v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  int v6 = 0;
  unsigned int v7 = 0;
  int v8 = 0;
  return v8 | v6 | v7;
}

uint64_t WebKit::PageClientImpl::hasResizableWindows(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v2 = [WeakRetained _isWindowResizingEnabled];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_1986F8548(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsWindowResizingEnabled>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2441;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebPageProxy::webViewDidMoveToWindow(WebKit::WebPageProxy *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 1232);
  unint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9DB9E8;
  uint64_t v10 = v3;
  WTF::WeakHashSet<WebKit::WebViewDidMoveToWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v10);
  BOOL v4 = v10;
  uint64_t v10 = 0;
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 128))(v6);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1600))(v6);
  uint64_t v9 = *((void *)this + 4);
  if (*(unsigned __int8 *)(v9 + 1936) != v7)
  {
    *(unsigned char *)(v9 + 1936) = v7;
    uint64_t result = *((void *)this + 29);
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result);
    }
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::windowKindDidChange(uint64_t this, CALayer *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 40) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(*(void *)(v3 + 32) + 1936) == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(this + 72) + 8);
    if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0) {
      uint64_t v6 = *(WebKit **)(v5 + 40);
    }
    else {
      uint64_t v6 = 0;
    }
    return WebKit::recursivelyMapIOSurfaceBackingStore(v6, a2);
  }
  return this;
}

uint64_t WebKit::PageClientImplCocoa::windowKind(id *this)
{
  if ([objc_loadWeak(this + 2) window])
  {
    NSClassFromString(&cfstr_Scnsnapshotwin.isa);
    if (objc_opt_isKindOfClass()) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t WebKit::WebPageProxy::activityStateDidChange(uint64_t a1, __int16 a2, char a3, char a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(_WORD *)(v10 + 1352) | a2;
  *(_WORD *)(v10 + 1352) = v11;
  if (*(unsigned char *)(a1 + 1032)) {
    char v12 = 1;
  }
  else {
    char v12 = a4;
  }
  *(unsigned char *)(a1 + 1032) = v12;
  if ((v11 & 4) != 0)
  {
    if (*(unsigned char *)(a1 + 930))
    {
      uint64_t v13 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 72))(v9);
      if (v13)
      {
        WTF::RunLoop::main(v13);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
        CGAffineTransform v14 = *(atomic_uint **)(a1 + 24);
        if (v14) {
          atomic_fetch_add(v14, 1u);
        }
        long long v15 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v15 = &unk_1EE9DA360;
        v15[1] = a1;
        v15[2] = v14;
        *(void *)uint64_t v24 = v15;
        WTF::RunLoop::dispatch();
        uint64_t v16 = *(void *)v24;
        *(void *)uint64_t v24 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 953) || (a3 & 1) != 0)
  {
    int v22 = 0;
    if ((a2 & 0x10) != 0 && (*(_WORD *)(*(void *)(a1 + 32) + 64) & 0x10) == 0) {
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 104))(v9);
    }
    if ((a3 & 1) != 0 || v22) {
      WebKit::WebPageProxy::dispatchActivityStateChange((WebCore::RunLoopObserver **)a1);
    }
    else {
      WebKit::WebPageProxy::scheduleActivityStateUpdate((WebKit::WebPageProxy *)a1);
    }
  }
  else
  {
    char v17 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(v18 + 760);
      uint64_t v20 = *(void *)(v18 + 1928);
      uint64_t v21 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      *(_DWORD *)uint64_t v24 = 134218752;
      *(void *)&v24[4] = a1;
      __int16 v25 = 2048;
      uint64_t v26 = v19;
      __int16 v27 = 2048;
      uint64_t v28 = v20;
      __int16 v29 = 1024;
      int v30 = v21;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::activityStateDidChange: Returning early due to m_suppressVisibilityUpdates", v24, 0x26u);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
}

unsigned int *WebKit::WebPageProxy::dispatchActivityStateChange(WebCore::RunLoopObserver **this)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WebCore::RunLoopObserver::isScheduled(this[122]);
  if (result) {
    uint64_t result = (unsigned int *)WebCore::RunLoopObserver::invalidate(this[122]);
  }
  *((unsigned char *)this + 993) = 0;
  if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
  {
    uint64_t v3 = this[4];
    __int16 v4 = *((_WORD *)v3 + 676);
    if ((v4 & 4) != 0)
    {
      v4 |= 0x28u;
      *((_WORD *)v3 + 676) = v4;
    }
    int v5 = *((unsigned __int16 *)v3 + 32);
    WebKit::WebPageProxy::updateActivityState(this, v4);
    uint64_t v8 = this[4];
    int v9 = *((unsigned __int16 *)v8 + 32);
    int v10 = (unsigned __int16)(v9 ^ v5);
    int v11 = (v9 ^ v5) & 1;
    if ((v11 & v9) != 0)
    {
      WebKit::WebPageProxy::updateCurrentModifierState((WebKit::WebPageProxy *)this);
      uint64_t v8 = this[4];
    }
    if ((*((_WORD *)v8 + 676) & 4) != 0)
    {
      __int16 v12 = *((_WORD *)v8 + 32);
      uint64_t v13 = qword_1EB358730;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT);
      if ((v12 & 4) != 0)
      {
        if (v14)
        {
          uint64_t v21 = *((void *)v8 + 95);
          uint64_t v22 = *((void *)v8 + 241);
          uint64_t v23 = *((void *)this[32] + 17);
          if (v23) {
            LODWORD(v23) = *(_DWORD *)(v23 + 108);
          }
          *(_DWORD *)buf = 134218752;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v21;
          __int16 v97 = 2048;
          uint64_t v98 = v22;
          __int16 v99 = 1024;
          int v100 = v23;
          _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::viewIsBecomingVisible:", buf, 0x26u);
        }
        uint64_t v24 = (uint64_t)this[32];
        __int16 v25 = (unsigned int *)(v24 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v24 + 16), 1u);
        {
          WebKit::liveProcessesLRU(void)::processes = 0u;
          *(_OWORD *)algn_1EB35A7B8 = 0u;
        }
        WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v24);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v25);
        __int16 v27 = this[29];
        if (v27) {
          (*(void (**)(WebCore::RunLoopObserver *))(*(void *)v27 + 136))(v27);
        }
        uint64_t v28 = this[70];
        if (v28) {
          WebKit::UserMediaPermissionRequestManagerProxy::viewIsBecomingVisible(v28, v26);
        }
        __int16 v29 = this[5];
        if (v29) {
          uint64_t v30 = *((void *)v29 + 1);
        }
        else {
          uint64_t v30 = 0;
        }
        (*(void (**)(uint64_t))(*(void *)v30 + 1592))(v30);
        (*(void (**)(uint64_t))(*(void *)v30 + 80))(v30);
        (*(void (**)(uint64_t))(*(void *)v30 + 1600))(v30);
        if ((v10 & 0x10) == 0) {
          goto LABEL_20;
        }
        goto LABEL_35;
      }
      if (v14)
      {
        uint64_t v15 = *((void *)v8 + 95);
        uint64_t v16 = *((void *)v8 + 241);
        uint64_t v17 = *((void *)this[32] + 17);
        if (v17) {
          LODWORD(v17) = *(_DWORD *)(v17 + 108);
        }
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = this;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v15;
        __int16 v97 = 2048;
        uint64_t v98 = v16;
        __int16 v99 = 1024;
        int v100 = v17;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::viewIsBecomingInvisible:", buf, 0x26u);
      }
      uint64_t v18 = this[32];
      atomic_fetch_add((atomic_uint *volatile)v18 + 4, 1u);
      WebKit::WebProcessProxy::pageIsBecomingInvisible((uint64_t *)v18, *((void *)this[4] + 241));
      if (v18) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v18 + 4);
      }
      uint64_t v19 = this[29];
      if (v19) {
        (*(void (**)(WebCore::RunLoopObserver *))(*(void *)v19 + 144))(v19);
      }
    }
    if ((v10 & 0x10) == 0)
    {
LABEL_20:
      LOBYTE(v20) = 0;
      goto LABEL_42;
    }
LABEL_35:
    unsigned int v31 = *((unsigned __int16 *)this[4] + 32);
    int v20 = (v31 >> 4) & 1;
    if (*((unsigned char *)this + 584) && (v31 & 0x10) != 0)
    {
      if ((*(unsigned int (**)(WebCore::RunLoopObserver *))(*(void *)this[29] + 184))(this[29])
        && *((unsigned char *)this + 673)
        && !*((unsigned char *)this + 674))
      {
        *((unsigned char *)this + 1032) = 1;
      }
      *((unsigned char *)this + 674) = 0;
      LOBYTE(v20) = 1;
    }
LABEL_42:
    if ((*((_WORD *)this[4] + 32) & 4) != 0)
    {
      if (*((unsigned char *)this + 1032))
      {
        uint64_t v32 = (uint64_t)this[128] + 1;
        this[128] = (WebCore::RunLoopObserver *)v32;
      }
      else
      {
        uint64_t v32 = 0;
      }
    }
    else
    {
      uint64_t v32 = 0;
      *((unsigned char *)this + 1032) = 0;
    }
    uint64_t v95 = v32;
    int v33 = *((_DWORD *)this + 263);
    if (!v10 && !v32 && !v33)
    {
      WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)this, v6, v7);
LABEL_102:
      WebKit::WebPageProxy::updateBackingStoreDiscardableState((WebKit::WebPageProxy *)this);
      if (v95)
      {
        if (!*((unsigned char *)this + 801))
        {
          if (*((unsigned char *)this + 800))
          {
            v85 = this[32];
            uint64_t v86 = *((void *)v85 + 17);
            if (!v86 || !*(unsigned char *)(v86 + 104))
            {
              if (*((void *)v85 + 18))
              {
                if (!*((unsigned char *)this + 963))
                {
                  uint64_t v87 = this[75];
                  if (v87)
                  {
                    uint64_t v88 = *((void *)v87 + 1);
                    if (v88)
                    {
                      if (*(void *)(v88 + 8))
                      {
                        *((unsigned char *)this + 963) = 1;
                        v89 = this[29];
                        v90 = (unsigned int *)((char *)v85 + 16);
                        atomic_fetch_add((atomic_uint *volatile)v85 + 4, 1u);
                        (*(void (**)(WebCore::RunLoopObserver *))(*(void *)v89 + 160))(v89);
                        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v90);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *((_WORD *)this[4] + 676) = 0;
      *((unsigned char *)this + 1032) = 0;
      *((unsigned char *)this + 584) |= v20;
      WebKit::WebPageProxy::updateMediaCapability((WebKit::WebPageProxy *)this);
      v80 = (unsigned int *)(this + 125);
      uint64_t v81 = *((unsigned int *)this + 253);
      if (v81)
      {
        uint64_t v82 = this[125];
        uint64_t v83 = 8 * v81;
        do
        {
          uint64_t v84 = *(void *)v82;
          *(void *)uint64_t v82 = 0;
          uint64_t v82 = (WebCore::RunLoopObserver *)((char *)v82 + 8);
          (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
          (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
          v83 -= 8;
        }
        while (v83);
      }
      return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v80, 0);
    }
    uint64_t v34 = this[130];
    int v35 = *((_DWORD *)this + 262);
    v93[0] = 0;
    this[130] = 0;
    v93[1] = 0;
    this[131] = 0;
    uint64_t v36 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v36 = &unk_1EE9DA388;
    *(void *)(v36 + 8) = v34;
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    *(_DWORD *)(v36 + 16) = v35;
    *(_DWORD *)(v36 + 20) = v33;
    uint64_t v37 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v37 = 1;
    *(void *)(v37 + 8) = v36;
    long long v94 = (unsigned int *)v37;
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v38);
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v93, v39);
    unint64_t v40 = (void *)WTF::fastMalloc((WTF *)0x20);
    *unint64_t v40 = &unk_1EE9DA3B0;
    v40[1] = this;
    v40[2] = &v94;
    v40[3] = &v95;
    *(void *)buf = v40;
    WebKit::WebPageProxy::forEachWebContentProcess(this, buf);
    uint64_t v43 = *(void *)buf;
    *(void *)buf = 0;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    uint64_t v44 = v94;
    long long v94 = 0;
    if (v44) {
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v44);
    }
    WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)this, v41, v42);
    if ((v10 & 4) == 0) {
      goto LABEL_80;
    }
    unsigned int v45 = this[4];
    if ((*((_WORD *)v45 + 32) & 4) == 0)
    {
      uint64_t v46 = *((void *)v45 + 238);
      *((void *)v45 + 238) = 0;
      if (v46)
      {
        long long v47 = *(uint64_t **)v46;
        uint64_t v48 = *(void *)(v46 + 8) - 1;
        *(void *)(v46 + 8) = v48;
        if (!v47) {
          goto LABEL_62;
        }
        uint64_t v49 = *v47;
        if (*v47)
        {
          char v50 = *(unsigned char *)(v46 + 16);
          *(unsigned char *)(v46 + 16) = 1;
          (*(void (**)(uint64_t, void))(*(void *)v49 + 16))(v49, 0);
          *(unsigned char *)(v46 + 16) = v50;
          if (!*(void *)v46)
          {
            uint64_t v48 = *(void *)(v46 + 8);
LABEL_62:
            if (!v48) {
              MEMORY[0x199740C10](v46, 0x1020C40545B2139);
            }
          }
        }
      }
      pid_t v51 = this[32];
      atomic_fetch_add((atomic_uint *volatile)v51 + 4, 1u);
      WebKit::ResponsivenessTimer::stop((unsigned char *)v51 + 56);
      if (v51) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v51 + 4);
      }
      goto LABEL_80;
    }
    WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)this[32] + 92, buf);
    v52 = this[4];
    uint64_t v53 = *(void *)buf;
    *(void *)buf = 0;
    uint64_t v54 = *((void *)v52 + 238);
    *((void *)v52 + 238) = v53;
    if (!v54) {
      goto LABEL_80;
    }
    long long v55 = *(uint64_t **)v54;
    uint64_t v56 = *(void *)(v54 + 8) - 1;
    *(void *)(v54 + 8) = v56;
    if (v55)
    {
      uint64_t v57 = *v55;
      if (!*v55
        || (char v58 = *(unsigned char *)(v54 + 16),
            *(unsigned char *)(v54 + 16) = 1,
            (*(void (**)(uint64_t, void))(*(void *)v57 + 16))(v57, 0),
            *(unsigned char *)(v54 + 16) = v58,
            *(void *)v54))
      {
LABEL_73:
        uint64_t v59 = *(void *)buf;
        *(void *)buf = 0;
        if (!v59) {
          goto LABEL_80;
        }
        v60 = *(uint64_t **)v59;
        uint64_t v61 = *(void *)(v59 + 8) - 1;
        *(void *)(v59 + 8) = v61;
        if (v60)
        {
          uint64_t v62 = *v60;
          if (!*v60) {
            goto LABEL_80;
          }
          char v63 = *(unsigned char *)(v59 + 16);
          *(unsigned char *)(v59 + 16) = 1;
          (*(void (**)(uint64_t, void))(*(void *)v62 + 16))(v62, 0);
          *(unsigned char *)(v59 + 16) = v63;
          if (*(void *)v59) {
            goto LABEL_80;
          }
          uint64_t v61 = *(void *)(v59 + 8);
        }
        if (!v61) {
          MEMORY[0x199740C10](v59, 0x1020C40545B2139);
        }
LABEL_80:
        if ((v10 & 0x10) != 0)
        {
          if ((*((_WORD *)this[4] + 32) & 0x10) != 0)
          {
            v65 = this[5];
            if (v65) {
              uint64_t v66 = *((void *)v65 + 1);
            }
            else {
              uint64_t v66 = 0;
            }
            (*(void (**)(uint64_t))(*(void *)v66 + 1592))(v66);
            int v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 120))(v66);
            (*(void (**)(uint64_t))(*(void *)v66 + 1600))(v66);
            v68 = this[4];
            if (*((unsigned __int8 *)v68 + 800) != v67)
            {
              *((unsigned char *)v68 + 800) = v67;
              uint64_t v69 = (uint64_t)this[32];
              uint64_t v70 = *((void *)v68 + 241);
              v71 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)v71 = 2443;
              *((void *)v71 + 1) = v70;
              *((void *)v71 + 66) = (char *)v71 + 16;
              *((void *)v71 + 67) = 512;
              *((void *)v71 + 68) = 0;
              *((void *)v71 + 70) = 0;
              *((void *)v71 + 69) = 0;
              IPC::Encoder::encodeHeader(v71);
              v93[0] = v71;
              BOOL v72 = (unsigned char *)IPC::Encoder::grow(v71, 1uLL, 1);
              if (!v73)
              {
                __break(0xC471u);
                JUMPOUT(0x1986F9668);
              }
              *BOOL v72 = v67;
              buf[0] = 0;
              buf[16] = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v69, v93, 0, (uint64_t)buf, 1);
              if (buf[16])
              {
                uint64_t v75 = *(void *)buf;
                *(void *)buf = 0;
                if (v75) {
                  (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
                }
              }
              v76 = v93[0];
              v93[0] = 0;
              if (v76)
              {
                IPC::Encoder::~Encoder(v76, v74);
                WTF::fastFree(v91, v92);
                if (!v11) {
                  goto LABEL_102;
                }
                goto LABEL_96;
              }
            }
          }
          else
          {
            WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)this);
            v64 = this[54];
            if (v64 && WebKit::VideoPresentationManagerProxy::hasMode(v64, 1))
            {
              WebKit::VideoPresentationManagerProxy::requestHideAndExitFullscreen(this[54]);
              if (!v11) {
                goto LABEL_102;
              }
              goto LABEL_96;
            }
          }
        }
        if (!v11) {
          goto LABEL_102;
        }
LABEL_96:
        if (this[61])
        {
          v77 = this[5];
          uint64_t v78 = v77 ? *((void *)v77 + 1) : 0;
          (*(void (**)(uint64_t))(*(void *)v78 + 1592))(v78);
          int v79 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 56))(v78);
          (*(void (**)(uint64_t))(*(void *)v78 + 1600))(v78);
          if (v79) {
            WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(this[61]);
          }
        }
        goto LABEL_102;
      }
      uint64_t v56 = *(void *)(v54 + 8);
    }
    if (!v56) {
      MEMORY[0x199740C10](v54, 0x1020C40545B2139);
    }
    goto LABEL_73;
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    __int16 v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)__int16 v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      __int16 v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WebKit::WebPageProxy::forEachWebContentProcess(void *a1, void *a2)
{
  uint64_t v4 = a1[177];
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9DAD98;
  v5[1] = a2;
  uint64_t v8 = v5;
  WebKit::BrowsingContextGroup::forEachRemotePage(v4, (uint64_t)a1, (uint64_t)&v8);
  (*(void (**)(void *))(*v5 + 8))(v5);
  uint64_t v6 = a1[32];
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a2 + 16))(*a2, v6, *(void *)(a1[4] + 1928));
  if (v6)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  return result;
}

void *WebKit::BrowsingContextGroup::forEachRemotePage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(a1 + 56, a2, (uint64_t)v22);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 16 * v7;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v16 = v5;
  uint64_t v17 = v8;
  uint64_t v18 = v8;
  uint64_t v19 = v8;
  uint64_t v20 = v6 + 16 * v7;
  int v21 = 0;
  uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v16);
  uint64_t v10 = v23;
  if (v23 != v17)
  {
    uint64_t result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(v23 + 8));
    int v11 = result;
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v10 + 8);
    uint64_t v15 = v14 ? v14 + 8 * *(unsigned int *)(v14 - 4) : 0;
    if ((void *)v15 != result)
    {
      do
      {
        if (*v11) {
          uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)a3 + 16))();
        }
        while (++v11 != v13)
        {
          if ((unint64_t)(*v11 + 1) > 1) {
            goto LABEL_15;
          }
        }
        int v11 = v13;
LABEL_15:
        ;
      }
      while (v11 != (void *)v15);
    }
  }
  return result;
}

void *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 16;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 16;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

void *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 && *(void *)(v5 + 8))
  {
    uint64_t v15 = *(void *)(a2 + 24);
    uint64_t v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v15);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v7;
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v9 = *(unsigned int *)(v8 - 4);
      uint64_t v10 = v8 + 16 * v9;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    *(void *)(a3 + 24) = v10;
    *(void *)(a3 + 32) = v8 + 16 * v9;
    *(_DWORD *)(a3 + 40) = 0;
    return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a3);
  }
  else
  {
    uint64_t v11 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v12 = *(unsigned int *)(v11 - 4);
      uint64_t v13 = v11 + 16 * v12;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v12 = 0;
    }
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v11 + 16 * v12;
    *(_DWORD *)(a3 + 40) = 0;
    return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a3);
  }
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return v2 + 16 * *(unsigned int *)(v2 - 4);
      }
      if (v10 == *a2) {
        break;
      }
    }
    unsigned int v7 = (v9 + i) & v3;
  }
  return v2 + 16 * v9;
}

void WebKit::WebPageProxy::updateThrottleState(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, a3))
  {
    uint64_t v5 = *((void *)this + 4);
    if (!*(void *)(v5 + 1360)) {
      *(void *)(v5 + 1360) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v7 + 552);
    if (v8)
    {
      uint64_t v9 = *(void **)v8;
      ++*(void *)(v8 + 8);
      if (v9)
      {
        if (*v9) {
          (*(void (**)(void, uint64_t))(*(void *)*v9 + 16))(*v9, 1);
        }
      }
    }
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = *(void *)(v10 + 1360);
    *(void *)(v10 + 1360) = v8;
    if (v11)
    {
      uint64_t v12 = *(uint64_t **)v11;
      uint64_t v13 = *(void *)(v11 + 8) - 1;
      *(void *)(v11 + 8) = v13;
      if (v12)
      {
        uint64_t v14 = *v12;
        if (!*v12) {
          goto LABEL_20;
        }
        char v15 = *(unsigned char *)(v11 + 16);
        *(unsigned char *)(v11 + 16) = 1;
        (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
        *(unsigned char *)(v11 + 16) = v15;
        if (*(void *)v11) {
          goto LABEL_20;
        }
        uint64_t v13 = *(void *)(v11 + 8);
      }
      if (!v13) {
        MEMORY[0x199740C10](v11, 0x1020C40545B2139);
      }
    }
  }
LABEL_20:
  uint64_t v16 = *((void *)this + 4);
  uint64_t v17 = *(void *)(v16 + 952);
  if ((*(_WORD *)(v16 + 64) & 0x20) != 0)
  {
    *(void *)(v16 + 952) = 0;
    if (!v17) {
      goto LABEL_38;
    }
  }
  else
  {
    if (v17) {
      goto LABEL_38;
    }
    uint64_t v18 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
    if (v18) {
      uint64_t v19 = v18 - 16;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void *)(v19 + 536);
    if (!v20 || (int v21 = *(void **)v20, ++*(void *)(v20 + 8), !v21) || !*v21)
    {
      *(void *)(v16 + 952) = v20;
      goto LABEL_38;
    }
    (*(void (**)(void, uint64_t))(*(void *)*v21 + 16))(*v21, 1);
    uint64_t v22 = *((void *)this + 4);
    uint64_t v17 = *(void *)(v22 + 952);
    *(void *)(v22 + 952) = v20;
    if (!v17) {
      goto LABEL_38;
    }
  }
  uint64_t v23 = *(uint64_t **)v17;
  uint64_t v24 = *(void *)(v17 + 8) - 1;
  *(void *)(v17 + 8) = v24;
  if (v23)
  {
    uint64_t v25 = *v23;
    if (!*v23) {
      goto LABEL_38;
    }
    char v26 = *(unsigned char *)(v17 + 16);
    *(unsigned char *)(v17 + 16) = 1;
    (*(void (**)(uint64_t, void))(*(void *)v25 + 16))(v25, 0);
    *(unsigned char *)(v17 + 16) = v26;
    if (*(void *)v17) {
      goto LABEL_38;
    }
    uint64_t v24 = *(void *)(v17 + 8);
  }
  if (!v24) {
    MEMORY[0x199740C10](v17, 0x1020C40545B2139);
  }
LABEL_38:
  uint64_t v27 = *((void *)this + 4);
  if ((*(_WORD *)(v27 + 64) & 4) != 0)
  {
    uint64_t v36 = *((void *)this + 75);
    if (!v36 || (uint64_t v37 = *(void *)(v36 + 8)) == 0 || !*(void *)(v37 + 8))
    {
      int v38 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = *(void *)(v27 + 760);
        uint64_t v40 = *(void *)(v27 + 1928);
        uint64_t v41 = *(void *)(*((void *)this + 32) + 136);
        if (v41) {
          LODWORD(v41) = *(_DWORD *)(v41 + 108);
        }
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = this;
        __int16 v111 = 2048;
        uint64_t v112 = v39;
        __int16 v113 = 2048;
        uint64_t v114 = v40;
        __int16 v115 = 1024;
        int v116 = v41;
        _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is taking a foreground assertion because the view is visible", buf, 0x26u);
      }
      uint64_t v42 = *(void *)(*((void *)this + 74) + 256) + 200;
      uint64_t v43 = WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v43, v42, "View is visible", 16, 1, 0);
      uint64_t v34 = (WebKit::ProcessThrottlerActivity **)((char *)this + 600);
      int v35 = (WebKit::ProcessThrottlerActivity *)v43;
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v28 = *((void *)this + 75);
    if (v28)
    {
      uint64_t v29 = *(void *)(v28 + 8);
      if (v29)
      {
        if (*(void *)(v29 + 8))
        {
          uint64_t v30 = qword_1EB358348;
          if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = *(void *)(v27 + 760);
            uint64_t v32 = *(void *)(v27 + 1928);
            uint64_t v33 = *(void *)(*((void *)this + 32) + 136);
            if (v33) {
              LODWORD(v33) = *(_DWORD *)(v33 + 108);
            }
            *(_DWORD *)buf = 134218752;
            *(void *)&uint8_t buf[4] = this;
            __int16 v111 = 2048;
            uint64_t v112 = v31;
            __int16 v113 = 2048;
            uint64_t v114 = v32;
            __int16 v115 = 1024;
            int v116 = v33;
            _os_log_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is releasing a foreground assertion because the view is no longer visible", buf, 0x26u);
          }
          uint64_t v34 = (WebKit::ProcessThrottlerActivity **)((char *)this + 600);
          int v35 = 0;
LABEL_55:
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v34, v35);
        }
      }
    }
  }
  uint64_t v44 = *((void *)this + 4);
  if ((*(_WORD *)(v44 + 64) & 0x40) != 0)
  {
    uint64_t v52 = *((void *)this + 76);
    if (!v52 || (uint64_t v53 = *(void *)(v52 + 8)) == 0 || !*(void *)(v53 + 8))
    {
      uint64_t v54 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v55 = *(void *)(v44 + 760);
        uint64_t v56 = *(void *)(v44 + 1928);
        uint64_t v57 = *(void *)(*((void *)this + 32) + 136);
        if (v57) {
          LODWORD(v57) = *(_DWORD *)(v57 + 108);
        }
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = this;
        __int16 v111 = 2048;
        uint64_t v112 = v55;
        __int16 v113 = 2048;
        uint64_t v114 = v56;
        __int16 v115 = 1024;
        int v116 = v57;
        _os_log_impl(&dword_1985F2000, v54, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is taking a foreground assertion because we are playing audio", buf, 0x26u);
      }
      uint64_t v58 = *(void *)(*((void *)this + 74) + 256) + 200;
      uint64_t v59 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v59, v58, "View is playing audio", 22, 1, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 76, v59);
      uint64_t v44 = *((void *)this + 4);
    }
    if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v44 + 72)))
    {
      v60 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = *((void *)this + 4);
        uint64_t v62 = *(void *)(v61 + 760);
        uint64_t v63 = *(void *)(v61 + 1928);
        uint64_t v64 = *(void *)(*((void *)this + 32) + 136);
        if (v64) {
          LODWORD(v64) = *(_DWORD *)(v64 + 108);
        }
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = this;
        __int16 v111 = 2048;
        uint64_t v112 = v62;
        __int16 v113 = 2048;
        uint64_t v114 = v63;
        __int16 v115 = 1024;
        int v116 = v64;
        _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: Cancelling timer to release foreground assertion", buf, 0x26u);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((void *)this + 4) + 72));
    }
  }
  else
  {
    uint64_t v45 = *((void *)this + 76);
    if (v45)
    {
      uint64_t v46 = *(void *)(v45 + 8);
      if (v46)
      {
        if (*(void *)(v46 + 8) && (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v44 + 72)) & 1) == 0)
        {
          long long v47 = qword_1EB358348;
          if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v48 = *((void *)this + 4);
            uint64_t v49 = *(void *)(v48 + 760);
            uint64_t v50 = *(void *)(v48 + 1928);
            uint64_t v51 = *(void *)(*((void *)this + 32) + 136);
            if (v51) {
              LODWORD(v51) = *(_DWORD *)(v51 + 108);
            }
            *(_DWORD *)buf = 134219008;
            *(void *)&uint8_t buf[4] = this;
            __int16 v111 = 2048;
            uint64_t v112 = v49;
            __int16 v113 = 2048;
            uint64_t v114 = v50;
            __int16 v115 = 1024;
            int v116 = v51;
            __int16 v117 = 2048;
            uint64_t v118 = 0x4024000000000000;
            _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess starting timer to release a foreground assertion in %g seconds if audio doesn't start to play", buf, 0x30u);
          }
          WTF::RunLoop::TimerBase::start();
        }
      }
    }
  }
  uint64_t v65 = *((void *)this + 4);
  __int16 v66 = *(_WORD *)(v65 + 64);
  if ((v66 & 0x100) == 0 && (*(_DWORD *)(v65 + 824) & 0x2486000) != 0)
  {
    int v67 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v68 = *(void *)(v65 + 760);
      uint64_t v69 = *(void *)(v65 + 1928);
      uint64_t v70 = *(void *)(*((void *)this + 32) + 136);
      if (v70) {
        LODWORD(v70) = *(_DWORD *)(v70 + 108);
      }
      *(_DWORD *)buf = 134218752;
      *(void *)&uint8_t buf[4] = this;
      __int16 v111 = 2048;
      uint64_t v112 = v68;
      __int16 v113 = 2048;
      uint64_t v114 = v69;
      __int16 v115 = 1024;
      int v116 = v70;
      _os_log_impl(&dword_1985F2000, v67, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: taking a web process background assertion for muted media capture", buf, 0x26u);
    }
    v71 = *(void **)(*((void *)this + 74) + 256);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v109 = 0;
    uint64_t v72 = WTF::fastMalloc((WTF *)0xB0);
    uint64_t v73 = WebKit::ProcessAssertion::ProcessAssertion(v72, v71, (_DWORD **)buf, 1);
    WebKit::ProcessAssertion::acquireAsync(v73, &v109);
    uint64_t v75 = *((void *)this + 78);
    *((void *)this + 78) = v72;
    if (v75) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v75 + 8), v74);
    }
    uint64_t v76 = v109;
    uint64_t v109 = 0;
    if (v76) {
      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
    }
    v77 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v74);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
    uint64_t v97 = *((void *)this + 78);
    uint64_t v98 = *((void *)this + 74);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v98 + 24), v98 + 16);
    __int16 v99 = *(atomic_uint **)(v98 + 24);
    if (v99) {
      atomic_fetch_add(v99, 1u);
    }
    int v100 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v100 = &unk_1EE9D9EA0;
    v100[1] = v99;
    uint64_t v101 = *(void *)(v97 + 64);
    *(void *)(v97 + 64) = v100;
    if (v101) {
      (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
    }
    goto LABEL_117;
  }
  uint64_t v78 = *((void *)this + 78);
  if (v78) {
    int v79 = WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>::unspecifiedBoolTypeInstance;
  }
  else {
    int v79 = 0;
  }
  if (v79)
  {
    v80 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v82 = *(void *)(v65 + 760);
      uint64_t v83 = *(void *)(v65 + 1928);
      uint64_t v84 = *(void *)(*((void *)this + 32) + 136);
      if (v84) {
        LODWORD(v84) = *(_DWORD *)(v84 + 108);
      }
      *(_DWORD *)buf = 134218752;
      *(void *)&uint8_t buf[4] = this;
      __int16 v111 = 2048;
      uint64_t v112 = v82;
      __int16 v113 = 2048;
      uint64_t v114 = v83;
      __int16 v115 = 1024;
      int v116 = v84;
      _os_log_impl(&dword_1985F2000, v80, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: releasing a web process background assertion for muted media capture", buf, 0x26u);
      uint64_t v78 = *((void *)this + 78);
    }
    *((void *)this + 78) = 0;
    if (v78) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v78 + 8), v81);
    }
  }
  if ((v66 & 0x100) == 0)
  {
LABEL_117:
    uint64_t v102 = *((void *)this + 77);
    if (v102)
    {
      uint64_t v103 = *(void *)(v102 + 8);
      if (v103)
      {
        if (*(void *)(v103 + 8))
        {
          v104 = qword_1EB358348;
          if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v105 = *((void *)this + 4);
            uint64_t v106 = *(void *)(v105 + 760);
            uint64_t v107 = *(void *)(v105 + 1928);
            uint64_t v108 = *(void *)(*((void *)this + 32) + 136);
            if (v108) {
              LODWORD(v108) = *(_DWORD *)(v108 + 108);
            }
            *(_DWORD *)buf = 134218752;
            *(void *)&uint8_t buf[4] = this;
            __int16 v111 = 2048;
            uint64_t v112 = v106;
            __int16 v113 = 2048;
            uint64_t v114 = v107;
            __int16 v115 = 1024;
            int v116 = v108;
            _os_log_impl(&dword_1985F2000, v104, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is releasing a foreground assertion because media capture is no longer active", buf, 0x26u);
          }
          uint64_t v95 = (WebKit::ProcessThrottlerActivity **)((char *)this + 616);
          v96 = 0;
LABEL_125:
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v95, v96);
          return;
        }
      }
    }
    return;
  }
  uint64_t v85 = *((void *)this + 77);
  if (!v85 || (uint64_t v86 = *(void *)(v85 + 8)) == 0 || !*(void *)(v86 + 8))
  {
    uint64_t v87 = (WebKit::ProcessThrottlerActivity **)((char *)this + 616);
    uint64_t v88 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v89 = *((void *)this + 4);
      uint64_t v90 = *(void *)(v89 + 760);
      uint64_t v91 = *(void *)(v89 + 1928);
      uint64_t v92 = *(void *)(*((void *)this + 32) + 136);
      if (v92) {
        LODWORD(v92) = *(_DWORD *)(v92 + 108);
      }
      *(_DWORD *)buf = 134218752;
      *(void *)&uint8_t buf[4] = this;
      __int16 v111 = 2048;
      uint64_t v112 = v90;
      __int16 v113 = 2048;
      uint64_t v114 = v91;
      __int16 v115 = 1024;
      int v116 = v92;
      _os_log_impl(&dword_1985F2000, v88, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is taking a foreground assertion because media capture is active", buf, 0x26u);
    }
    uint64_t v93 = *(void *)(*((void *)this + 74) + 256) + 200;
    uint64_t v94 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v94, v93, "View is capturing media", 24, 1, 0);
    uint64_t v95 = v87;
    v96 = (WebKit::ProcessThrottlerActivity *)v94;
    goto LABEL_125;
  }
}

void *WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count@<X0>(void *result@<X0>, void *a2@<X8>)
{
  int v3 = (void *)result[1];
  if (v3)
  {
    uint64_t v4 = (void **)*v3;
    ++v3[1];
    if (v4)
    {
      uint64_t result = *v4;
      if (*v4) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, 1);
      }
    }
  }
  *a2 = v3;
  return result;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  uint64_t v8 = this;
  uint64_t v7 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(this);
  if (!WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(v7)) {
    return WebKit::WebAuthenticatorCoordinatorProxy::unpauseConditionalAssertion((uint64_t)this);
  }
  uint64_t result = WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(v7, (uint64_t)this);
  if (result & 1) == 0 || (*((unsigned char *)this + 48))
  {
    uint64_t v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(v7);
    WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v5, (uint64_t)this);
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v4);
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(&v6, (uint64_t *)&v5);
    WebKit::WebAuthenticatorCoordinatorProxy::pauseConditionalAssertion(v3, &v6);
    WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v6);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v4);
    return (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0((uint64_t *)&v5);
  }
  return result;
}

BOOL WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(void *a1)
{
  BOOL v2 = WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1);
  BOOL v3 = 0;
  if (v2)
  {
    uint64_t v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1);
    return WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator BOOL(v4);
  }
  return v3;
}

BOOL WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(void *a1)
{
  return *a1 != 0;
}

WTF *WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  {
    WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>();
  }
  return WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::get();
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::unpauseConditionalAssertion(uint64_t this)
{
  v5[1] = (atomic_uint *)this;
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 48))
  {
    this = WTF::RetainPtr<WKWebView>::operator BOOL((void *)(this + 40));
    if (this & 1) != 0 && (*(unsigned char *)(v1 + 49))
    {
      BOOL v2 = WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v5, v1);
      BOOL v3 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v2);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(v3, (uint64_t *)v5);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)v5);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      this = [v4 performAutoFillAssistedRequests];
    }
    *(unsigned char *)(v1 + 48) = 0;
  }
  return this;
}

uint64_t WebKit::WebProcessPool::updateProcessSuppressionState(WebKit::WebProcessPool *this, void *a2)
{
  if (*(void *)(*((void *)this + 67) + 8)) {
    char v2 = 0;
  }
  else {
    char v2 = *(void *)(*((void *)this + 69) + 8) == 0;
  }
  WebKit::NetworkProcessProxy::allNetworkProcesses(a2, (uint64_t)&v9);
  if (v10)
  {
    id v4 = v9;
    uint64_t v5 = 8 * v10;
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (atomic_uint *)(*v4 + 2);
      atomic_fetch_add(v7, 1u);
      WebKit::AuxiliaryProcessProxy::setProcessSuppressionEnabled(v6, v2);
      if (v6) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v3);
}

atomic_uchar *volatile **WebKit::AuxiliaryProcessProxy::setProcessSuppressionEnabled(atomic_uchar *volatile **this, char a2)
{
  BOOL v3 = this[17];
  if (!v3 || !*((unsigned char *)v3 + 104))
  {
    if (this[18])
    {
      WebKit::AuxiliaryProcessProxy::protectedConnection((WebKit::AuxiliaryProcessProxy *)this, &v5);
      char v4 = a2;
      IPC::Connection::send<Messages::AuxiliaryProcess::SetProcessSuppressionEnabled>((uint64_t)v5, &v4, 0, 0, 0);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v5);
    }
  }
  return this;
}

void WebKit::PageClientImpl::viewIsBecomingVisible(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    char v2 = WeakRetained;
    -[WKWebView _updatePageLoadObserverState]((uint64_t)WeakRetained);
    CFRelease(v2);
  }
}

void sub_1986FAA58(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClientImpl::viewLayerHostingMode(WebKit::PageClientImpl *this)
{
  return 1;
}

uint64_t WebKit::WebPageProxy::updateBackingStoreDiscardableState(WebKit::WebPageProxy *this)
{
  uint64_t result = *((void *)this + 29);
  if (result)
  {
    uint64_t v3 = *((void *)this + 32);
    if (*(unsigned char *)(v3 + 104) && *(unsigned char *)(v3 + 496))
    {
      uint64_t v4 = *((void *)this + 5);
      if (v4) {
        uint64_t v5 = *(void *)(v4 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
      (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
      (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
      uint64_t result = *((void *)this + 29);
    }
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 88);
    return v6();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::updateCurrentModifierState(WebKit::WebPageProxy *this)
{
  char v4 = WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(this);
  uint64_t v3 = &v4;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateCurrentModifierState>(*((void *)this + 32), &v3, *(void *)(*((void *)this + 4) + 1928), 0);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateCurrentModifierState>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2528;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebPageProxy::updateMediaCapability(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!*(unsigned char *)(v1 + 2584)) {
    return;
  }
  if (WebKit::WebPageProxy::shouldDeactivateMediaCapability(this))
  {
    if (*(unsigned char *)(v1 + 2584))
    {
      WebKit::WebPageProxy::deactivateMediaCapability(this, (id *)(v1 + 2504));
      return;
    }
LABEL_23:
    __break(1u);
    return;
  }
  uint64_t v3 = *((void *)this + 32);
  char v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  uint64_t v5 = *(void *)(*(void *)(v3 + 512) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  uint64_t v7 = *((void *)this + 4);
  if ((*(_WORD *)(v7 + 64) & 4) != 0 && (*(_DWORD *)(v7 + 824) & 0x36C7803) != 0)
  {
    uint64_t v8 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v6);
    if (!*(unsigned char *)(v1 + 2584)) {
      goto LABEL_23;
    }
    WebKit::ExtensionCapabilityGranter::setMediaCapabilityActive(v8, (WebKit::MediaCapability *)(v1 + 2504), 1);
  }
  if (!*(unsigned char *)(v1 + 2584)) {
    goto LABEL_23;
  }
  if (WebKit::MediaCapability::isActivatingOrActive((WebKit::MediaCapability *)(v1 + 2504)))
  {
    uint64_t v9 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v6);
    if (!*(unsigned char *)(v1 + 2584)) {
      goto LABEL_23;
    }
    WebKit::ExtensionCapabilityGranter::grant(v9, (const WebKit::ExtensionCapability *)(v1 + 2504));
  }
  if (v5)
  {
    CFTypeRef v10 = v6[1];
    CFRelease(v10);
  }
}

void sub_1986FAE60(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    if (result[3] > a2) {
      uint64_t result = WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    }
    char v4 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v4 && v5)
      {
        uint64_t v6 = result;
        uint64_t v7 = 8 * v5;
        uint64_t v8 = (unsigned int **)v4;
        do
        {
          uint64_t v9 = *v8;
          *uint64_t v8 = 0;
          *(void *)uint64_t v6 = v9;
          uint64_t result = *v8;
          *uint64_t v8 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v6 += 2;
          ++v8;
          v7 -= 8;
        }
        while (v7);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::WebProcessProxy(WebKit::WebProcessPool &,WebKit::WebsiteDataStore *,WebKit::WebProcessProxy::IsPrewarmed,WebCore::CrossOriginMode,WebKit::WebProcessProxy::LockdownMode)::$_0,void,WTF::RefCounterEvent>::call(uint64_t a1)
{
  return WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(*(void *)(a1 + 8) + 416));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_0,void,WTF::RefCounterEvent>::call(uint64_t a1, void *a2)
{
  return WebKit::WebProcessPool::updateProcessSuppressionState(*(WebKit::WebProcessPool **)(a1 + 8), a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUserAgent(WTF::String &&,WebKit::WebPageProxy::IsCustomUserAgent)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(*(void *)(a1 + 8) + 352);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2481;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v22 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v6);
  LOBYTE(v20[0]) = 0;
  char v21 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v22, 0, (uint64_t)v20, 1);
  if (v21)
  {
    uint64_t v9 = v20[0];
    v20[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  CFTypeRef v10 = v22;
  uint64_t v22 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v15, v16);
  }
  char v19 = **(unsigned char **)(a1 + 16);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2433;
  *((void *)v11 + 1) = a3;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v22 = v11;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v11, &v19);
  LOBYTE(v20[0]) = 0;
  char v21 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v22, 0, (uint64_t)v20, 1);
  if (v21)
  {
    uint64_t v13 = v20[0];
    v20[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::get()
{
  return WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::storagePointer((WTF *)&WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(void)::proxy);
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>()
{
  return WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>((WTF *)&WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(void)::proxy);
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>(WTF *a1)
{
  uint64_t v5 = a1;
  WTF::isIntegralOrPointerType(a1);
  WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::storagePointer(a1);
  WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator new();
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(v2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v4);
  return a1;
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::storagePointer(WTF *a1)
{
  return a1;
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer<WebKit::AuthenticatorManager>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[3] = a4;
  v11[4] = a5;
  v11[2] = a1;
  v11[1] = a2;
  v11[0] = a3;
  v10[1] = a5;
  v10[0] = a4;
  std::bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>(v8, v10, v11);
  WTF::Function<void ()(void)>::Function<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>(&v9, v8);
  WTF::RunLoop::Timer::Timer(a1, a2, (uint64_t)&v9);
  WTF::Function<void ()(void)>::~Function((uint64_t)&v9);
  return a1;
}

void *std::bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>(void *a1, uint64_t *a2, void *a3)
{
  return std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::__bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&,0>(a1, a2, a3);
}

void *std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::__bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&,0>(void *a1, uint64_t *a2, void *a3)
{
  return a1;
}

{
  uint64_t v4;

  char v4 = *a2;
  a1[1] = a2[1];
  *a1 = v4;
  std::tuple<WebKit::AuthenticatorManager *>::tuple[abi:sn180100]<WebKit::AuthenticatorManager *&,0>(a1 + 2, a3);
  return a1;
}

void *std::tuple<WebKit::AuthenticatorManager *>::tuple[abi:sn180100]<WebKit::AuthenticatorManager *&,0>(void *a1, void *a2)
{
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC1B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC1B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(void *a1, void *a2)
{
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC2B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(void *a1, void *a2)
{
  return a1;
}

uint64_t WTF::Function<void ()(void)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  void *v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void>>::operator()[abi:sn180100](v4, v5);
  }
}

void *WTF::Function<void ()(void)>::Function<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>(void *a1, void *a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>>(void *a1, void *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<WebKit::AuthenticatorPresenterCoordinator *,std::default_delete<WebKit::AuthenticatorPresenterCoordinator>>::__compressed_pair[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator *&,std::__value_init_tag>(a1, v4);
  return a1;
}

void *std::__compressed_pair<WebKit::AuthenticatorPresenterCoordinator *,std::default_delete<WebKit::AuthenticatorPresenterCoordinator>>::__compressed_pair[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator *&,std::__value_init_tag>(void *a1, void *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
  return a1;
}

void *std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[3];

  v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void> *,std::default_delete<WTF::Detail::CallableWrapperBase<void>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void> *,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>>(a1, v4);
  return a1;
}

void *std::__compressed_pair<WTF::Detail::CallableWrapperBase<void> *,std::default_delete<WTF::Detail::CallableWrapperBase<void>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void> *,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>>(void *a1, void *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void>>::operator()[abi:sn180100](v2, v3);
  }
}

void *WTF::Function<void ()(WTF::String const&)>::Function(void *a1, uint64_t a2)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::unique_ptr[abi:sn180100](a1, a2);
  return a1;
}

void *std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::unique_ptr[abi:sn180100](void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[3];

  v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>(a1, v4);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]()
{
}

void *std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>(void *a1, void *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  WTF::ThreadLikeAssertion::operator=();
  return a1;
}

void *std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(void *result, void *a2)
{
  IPC::Encoder *result = *a2;
  return result;
}

uint64_t WTF::ThreadLikeAssertion::ThreadLikeAssertion(uint64_t a1)
{
  WTF::ThreadLikeAssertion::operator=();
  return a1;
}

{
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
  return a1;
}

{
  WTF::ThreadLikeAssertion::ThreadLikeAssertion(a1);
  return a1;
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  return a1;
}

{
  WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  WTF::Function<void ()(WTF::String const&)>::Function((void *)a1 + 3, a3);
  return a1;
}

void *WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::CallableWrapper(void *a1, void *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B2FE0;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(void *result)
{
  IPC::Encoder *result = &unk_1EE9B3008;
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::WebViewDidMoveToWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v9, (void **)a1);
  if (HIDWORD(v10))
  {
    uint64_t v5 = v9;
    uint64_t v6 = 8 * HIDWORD(v10);
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

void sub_1986FC070(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(const void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      void *v4 = 0;
      if (v6) {
        CFRelease(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1986FC408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (v13) {
    CFRelease(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v4) {
      CFRelease(v4);
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
}

BOOL WebKit::FullscreenClient::isType(uint64_t a1, int a2)
{
  return a2 == 1;
}

void ___ZN6WebKit9UIProcess21webCoreLogLevelStringEv_block_invoke()
{
  v0 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"WebCoreLogging");
  uint64_t v1 = (uint64_t)v0;
  if (v0) {
    CFRetain(v0);
  }
  uint64_t v2 = (const void *)qword_1EB359A80;
  qword_1EB359A80 = v1;
  if (v2)
  {
    CFRelease(v2);
  }
}

void ___ZN6WebKit9UIProcess20webKitLogLevelStringEv_block_invoke()
{
  v0 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"WebKit2Logging");
  uint64_t v1 = (uint64_t)v0;
  if (v0) {
    CFRetain(v0);
  }
  uint64_t v2 = (const void *)qword_1EB359A90;
  qword_1EB359A90 = v1;
  if (v2)
  {
    CFRelease(v2);
  }
}

void ___ZN6WebKit9UIProcess17wtfLogLevelStringEv_block_invoke()
{
  v0 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"WTFLogging");
  uint64_t v1 = (uint64_t)v0;
  if (v0) {
    CFRetain(v0);
  }
  uint64_t v2 = (const void *)qword_1EB359A70;
  qword_1EB359A70 = v1;
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t WebKit::IconLoadingDelegate::setDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 16), a2);
  uint64_t result = objc_opt_respondsToSelector();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFE | result & 1;
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WTF::FileSystemImpl::listDirectory(&v18, (WTF::FileSystemImpl *)(a1 + 16), a2);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned int v4 = v19;
  if (v19)
  {
    if (v19 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = (WTF *)WTF::fastMalloc((WTF *)(16 * v19));
    LODWORD(v21) = v4;
    uint64_t v20 = v5;
    if (v19)
    {
      unsigned int v4 = 0;
      uint64_t v6 = v18;
      uint64_t v7 = 8 * v19;
      do
      {
        WTF::UUID::parse();
        if (v24)
        {
          uint64_t v8 = v23;
          uint64_t v9 = (void *)((char *)v5 + 16 * v4);
          *uint64_t v9 = v22;
          v9[1] = v8;
          ++v4;
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
      HIDWORD(v21) = v4;
    }
    else
    {
      unsigned int v4 = 0;
    }
  }
  WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v20, v4);
  uint64_t v11 = (WTF::RunLoop *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v10);
  WTF::RunLoop::main(v11);
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v15 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v15 = &unk_1EE9D2FE8;
  v15[1] = v12;
  v15[2] = v13;
  v15[3] = v14;
  uint64_t v22 = v15;
  WTF::RunLoop::dispatch();
  char v17 = v22;
  uint64_t v22 = 0;
  if (v17) {
    (*(void (**)(void *))(*v17 + 8))(v17);
  }
  uint64_t result = v20;
  if (v20)
  {
    uint64_t v20 = 0;
    LODWORD(v21) = 0;
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

void sub_1986FCCBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v4 && (WTF *)result != v5)
      {
        uint64_t v6 = 16 * v4;
        uint64_t v7 = v5;
        do
        {
          long long v8 = *(_OWORD *)v7;
          uint64_t v7 = (WTF *)((char *)v7 + 16);
          *(_OWORD *)uint64_t result = v8;
          result += 16;
          v6 -= 16;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void WebContentServiceInitializer(WTF *a1, void *a2)
{
  WTF::initializeMainThread(a1);
  WebKit::EnvironmentUtilities::removeValuesEndingWith((WebKit::EnvironmentUtilities *)"DYLD_INSERT_LIBRARIES", "/WebProcessShim.dylib", v4);
  GSInitialize();
  InitWebCoreThreadSystemInterface();
  if (a1) {
    uint64_t v5 = a1;
  }
  v33[0] = &unk_1EE9BFBD8;
  v33[1] = a1;
  v33[2] = a2;
  char v26 = 0;
  int v27 = 0;
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v22 = 0;
  LOBYTE(v25) = 0;
  id v28 = 0;
  uint64_t v29 = 0;
  uint64_t ExtraInitializationData = WebKit::XPCServiceInitializerDelegate::getExtraInitializationData((uint64_t)v33, (uint64_t *)&v29);
  if ((ExtraInitializationData & 1) == 0) {
    goto LABEL_40;
  }
  *MEMORY[0x1E4F30958] = 1;
  if (a2)
  {
    v20[0] = (uint64_t)"enable-lockdown-mode";
    v20[1] = 21;
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v29, v20, &v21);
    int v8 = MEMORY[0x19972E990](v21, "1", 1);
    uint64_t v9 = v21;
    uint64_t v21 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t ExtraInitializationData = WebKit::setJSCOptions(a2, v8);
  }
  WebKit::InitializeWebKit2((WebKit *)ExtraInitializationData);
  if (!WebKit::XPCServiceInitializerDelegate::checkEntitlements((WebKit::XPCServiceInitializerDelegate *)v33)) {
    goto LABEL_40;
  }
  if (!WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier((uint64_t)v33, (uint64_t)&v27)) {
    goto LABEL_40;
  }
  if (!WebKit::XPCServiceInitializerDelegate::getClientIdentifier(v33, &v23)) {
    goto LABEL_40;
  }
  WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier(v33, &v24);
  WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors((uint64_t)v33, (uint64_t)&v31);
  uint64_t v21 = 0;
  if ((WebKit::XPCServiceInitializerDelegate::getProcessIdentifier((uint64_t)v33, (unint64_t *)&v21) & 1) == 0) {
    goto LABEL_40;
  }
  if (!v26) {
    char v26 = 1;
  }
  uint64_t v25 = v21;
  if (!WebKit::XPCServiceInitializerDelegate::getClientProcessName(v33, &v22))
  {
LABEL_40:
    WTF::exitProcess((WTF *)1);
    __break(1u);
LABEL_41:
    uint64_t v13 = (WTF::StringImpl *)WTF::Thread::setGlobalMaxQOSClass((WTF::Thread *)0x11, (uint64_t)v11);
    goto LABEL_20;
  }
  voucher_replace_default_voucher();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v19 = (WTF::StringImpl *)v20[0];
  unsigned int v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v29, &v19, v10);
  uint64_t v13 = v19;
  unsigned int v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      uint64_t v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (v12) {
    goto LABEL_41;
  }
LABEL_20:
  char v30 = 0;
  uint64_t v14 = (WebKit::AuxiliaryProcess *)WebKit::WebProcess::singleton(v13);
  WebKit::AuxiliaryProcess::initialize(v14, (const WebKit::AuxiliaryProcessInitializationParameters *)&v22);
  if (v29) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v15);
  }
  if (v28) {

  }
  uint64_t v16 = v24;
  char v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  char v17 = v23;
  uint64_t v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v22;
  uint64_t v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v15);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  WebKit::XPCServiceInitializerDelegate::~XPCServiceInitializerDelegate((WebKit::XPCServiceInitializerDelegate *)v33);
}

void sub_1986FD14C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&a14, a2);
  WebKit::XPCServiceInitializerDelegate::~XPCServiceInitializerDelegate((WebKit::XPCServiceInitializerDelegate *)(v14 - 56));
  _Unwind_Resume(a1);
}

uint64_t WebKit::EnvironmentUtilities::removeValuesEndingWith(WebKit::EnvironmentUtilities *this, const char *a2, const char *a3)
{
  uint64_t result = (uint64_t)getenv((const char *)this);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = strlen((const char *)result) | 0x100000000;
    if (a2) {
      strlen(a2);
    }
    WebKit::EnvironmentUtilities::stripEntriesEndingWith(v6, v7, &v12);
    int v8 = v12;
    if (v12 && *((_DWORD *)v12 + 1))
    {
      WTF::String::utf8();
      if (v11) {
        uint64_t v9 = (char *)v11 + 16;
      }
      else {
        uint64_t v9 = 0;
      }
      setenv((const char *)this, v9, 1);
      uint64_t result = (uint64_t)v11;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          uint64_t result = WTF::fastFree(v11, v10);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
      int v8 = v12;
    }
    else
    {
      uint64_t result = unsetenv((const char *)this);
    }
    unsigned int v12 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        return WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  return result;
}

uint64_t GPUServiceInitializer(WTF *a1, void *a2)
{
  uint64_t v4 = MEMORY[0x1E4F309C0];
  *(_WORD *)(MEMORY[0x1E4F309C0] + 482) = 257;
  *(unsigned char *)(v4 + 146) = 1;
  uint64_t v5 = (JSC::Options *)WTF::initializeMainThread(a1);
  uint64_t v6 = (JSC::ExecutableAllocator *)JSC::Options::initialize(v5);
  uint64_t v7 = (JSC::Options *)JSC::ExecutableAllocator::disableJIT(v6);
  *(unsigned char *)(v4 + 1741) = 0;
  JSC::Options::notifyOptionsChanged(v7);
  uint64_t v10 = a1;
  if (a1) {
    int v8 = a1;
  }
  WebKit::XPCServiceInitializer<WebKit::GPUProcess,WebKit::GPUServiceInitializerDelegate,false>((void **)&v10, a2);
  if (v10) {

  }
  return MEMORY[0x1F40EBA38]();
}

void sub_1986FD364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

IMP std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcess::backlightLevelDidChange(float)::$_0 &&>>()
{
  v0 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v0, sel__backlightLevel);

  return method_setImplementation(InstanceMethod, (IMP)WebKit::currentBacklightLevel);
}

uint64_t WebKit::WebChromeClient::rootFrameAdded(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = *(void *)(v3 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 248))(result, *(void *)(a2 + 32), *(void *)(a2 + 40));
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return (void *)IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v8);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v7 = v8;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::UserData>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v11);
  if (v12)
  {
    IPC::Decoder::decode<WebKit::UserData>(a2, (uint64_t)&v13);
    if (v14)
    {
      if (v12)
      {
        *(_OWORD *)a1 = v11;
        uint64_t v4 = v13;
        if (v13)
        {
          CFRetain(*(CFTypeRef *)(v13 + 8));
          int v5 = v14;
          *(void *)(a1 + 16) = v4;
          *(unsigned char *)(a1 + 24) = 1;
          if (v5)
          {
            uint64_t v6 = v13;
            uint64_t v13 = 0;
            if (v6) {
              CFRelease(*(CFTypeRef *)(v6 + 8));
            }
          }
          return;
        }
      }
      else
      {
        __break(1u);
      }
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 1;
      return;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v7 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v8 = *((void *)a2 + 3);
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(void (**)(void))(*(void *)v8 + 16);
    v10();
  }
}

void IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  int v5 = *(char **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v23 = 0;
    char v24 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        char v24 = *(char **)a1;
        unint64_t v23 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        char v24 = 0;
      }
    }
    goto LABEL_25;
  }
  uint64_t v7 = &v5[v6];
  uint64_t v8 = (uint64_t)&v5[v6 + 1];
  *((void *)a1 + 2) = v8;
  if (!v5)
  {
    unint64_t v23 = v4;
    char v24 = 0;
LABEL_25:
    unint64_t v4 = 0;
    int v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
        int v5 = *(char **)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        int v5 = 0;
      }
    }
    goto LABEL_26;
  }
  if (*v7 >= 2u)
  {
LABEL_26:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v27 = *((void *)a1 + 3);
    if (v27 && v4) {
      (*(void (**)(uint64_t, char *))(*(void *)v27 + 16))(v27, v5);
    }
LABEL_83:
    LOBYTE(v65) = 0;
    char v66 = 0;
    uint64_t v54 = *(char **)a1;
    uint64_t v55 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v56 = *((void *)a1 + 3);
    if (v56 && v55) {
      (*(void (**)(uint64_t, char *))(*(void *)v56 + 16))(v56, v54);
    }
    int v17 = 0;
    int v10 = 1;
    goto LABEL_55;
  }
  if (*v7)
  {
    if (v4 <= v8 - (uint64_t)v5)
    {
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v28 = *((void *)a1 + 3);
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
        unint64_t v4 = 0;
        uint64_t v58 = *(char **)a1;
        uint64_t v59 = *((void *)a1 + 1);
        uint64_t v60 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        int v5 = 0;
        if (v60 && v59)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v60 + 16))(v60, v58, v59);
          int v5 = *(char **)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
      }
      else
      {
        unint64_t v4 = 0;
        int v5 = 0;
      }
    }
    else
    {
      BOOL v9 = (unsigned __int8 *)(v7 + 2);
      *((void *)a1 + 2) = v7 + 2;
      if (v7[1] < 2u)
      {
        int v10 = 0;
        goto LABEL_8;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (!v29 || !v4)
    {
      unint64_t v30 = 0;
      int v5 = 0;
      int v10 = 1;
      goto LABEL_33;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v29 + 16))(v29, v5);
    int v5 = *(char **)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v10 = 1;
    BOOL v9 = (unsigned __int8 *)*((void *)a1 + 2);
LABEL_8:
    unint64_t v11 = v9 - (unsigned __int8 *)v5;
    if (v4 <= v11)
    {
      unint64_t v30 = 0;
      uint64_t v57 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v4 && v57)
      {
        (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
        int v5 = *(char **)a1;
        unint64_t v30 = *((void *)a1 + 1);
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      char v12 = &v5[v11];
      uint64_t v13 = (uint64_t)&v5[v11 + 1];
      *((void *)a1 + 2) = v13;
      if (v5)
      {
        unsigned int v14 = *v12;
        if (v14 < 2)
        {
          int v15 = 0;
          int v16 = 1;
          goto LABEL_12;
        }
LABEL_35:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v32 = *((void *)a1 + 3);
        if (v32)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, char *))(*(void *)v32 + 16))(v32, v5);
            int v16 = 0;
            int v5 = *(char **)a1;
            unint64_t v4 = *((void *)a1 + 1);
            int v15 = 1;
            uint64_t v13 = *((void *)a1 + 2);
LABEL_12:
            if (v14) {
              int v17 = v16;
            }
            else {
              int v17 = 0;
            }
            unint64_t v18 = v13 - (void)v5;
            if (v4 <= v18)
            {
              uint64_t v61 = *((void *)a1 + 3);
              *(void *)a1 = 0;
              *((void *)a1 + 1) = 0;
              if (v61)
              {
                if (v4)
                {
                  (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
                  uint64_t v33 = *(char **)a1;
                  unint64_t v4 = *((void *)a1 + 1);
                }
                else
                {
                  uint64_t v33 = 0;
                }
              }
              else
              {
                uint64_t v33 = 0;
                unint64_t v4 = 0;
              }
            }
            else
            {
              unsigned int v19 = &v5[v18];
              *((void *)a1 + 2) = v19 + 1;
              if (v5)
              {
                unsigned int v20 = *v19;
                if (v20 < 2)
                {
                  if (!v20)
                  {
                    int v21 = 0;
                    uint64_t v71 = 0;
                    goto LABEL_23;
                  }
                  IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::decode(&v62, a1);
                  LOBYTE(v71) = 0;
                  char v72 = 0;
                  if ((_BYTE)v63)
                  {
                    int v21 = 0;
                    uint64_t v71 = v62;
LABEL_23:
                    int v22 = 1;
                    char v72 = 1;
                    goto LABEL_44;
                  }
LABEL_42:
                  int v5 = *(char **)a1;
                  unint64_t v4 = *((void *)a1 + 1);
                  *(void *)a1 = 0;
                  *((void *)a1 + 1) = 0;
                  uint64_t v36 = *((void *)a1 + 3);
                  if (v36 && v4) {
                    (*(void (**)(uint64_t, char *))(*(void *)v36 + 16))(v36, v5);
                  }
                  int v22 = 0;
                  int v21 = 1;
LABEL_44:
                  if (*(void *)a1)
                  {
                    if (v10 || v15 || v21) {
                      goto LABEL_70;
                    }
                    WebCore::ScrollingStateTree::createAfterReconstruction();
                    if (!v72)
                    {
LABEL_51:
                      if (v70
                        || (uint64_t v51 = *(char **)a1,
                            uint64_t v52 = *((void *)a1 + 1),
                            *(void *)a1 = 0,
                            *((void *)a1 + 1) = 0,
                            (uint64_t v53 = *((void *)a1 + 3)) != 0)
                        && v52
                        && ((*(void (**)(uint64_t, char *))(*(void *)v53 + 16))(v53, v51), v70))
                      {
                        uint64_t v38 = WTF::fastMalloc((WTF *)0x50);
                        WebCore::ScrollingStateTree::ScrollingStateTree();
                        uint64_t v65 = v38;
                        char v66 = 1;
                        if (v70) {
                          MEMORY[0x199734630](&v67);
                        }
                        int v10 = 0;
                        int v17 = 1;
                        goto LABEL_55;
                      }
                      goto LABEL_83;
                    }
                  }
                  else
                  {
                    LOBYTE(v67) = 0;
                    char v70 = 0;
                    if (!v22) {
                      goto LABEL_51;
                    }
                  }
                  uint64_t v37 = v71;
                  uint64_t v71 = 0;
                  if (v37) {
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v37 + 8), v5);
                  }
                  goto LABEL_51;
                }
LABEL_40:
                *(void *)a1 = 0;
                *((void *)a1 + 1) = 0;
                uint64_t v35 = *((void *)a1 + 3);
                if (v35 && v4) {
                  (*(void (**)(uint64_t, char *))(*(void *)v35 + 16))(v35, v5);
                }
                LOBYTE(v71) = 0;
                char v72 = 0;
                goto LABEL_42;
              }
              uint64_t v33 = 0;
            }
LABEL_38:
            *(void *)a1 = 0;
            *((void *)a1 + 1) = 0;
            uint64_t v34 = *((void *)a1 + 3);
            if (v34)
            {
              if (v4)
              {
                (*(void (**)(uint64_t, char *))(*(void *)v34 + 16))(v34, v33);
                int v5 = *(char **)a1;
                unint64_t v4 = *((void *)a1 + 1);
              }
              else
              {
                int v5 = 0;
              }
            }
            else
            {
              int v5 = 0;
              unint64_t v4 = 0;
            }
            goto LABEL_40;
          }
          int v17 = 0;
        }
        else
        {
          int v17 = 0;
          unint64_t v4 = 0;
        }
        uint64_t v33 = 0;
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        int v15 = 1;
        goto LABEL_38;
      }
      unint64_t v30 = v4;
    }
LABEL_33:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v31 = *((void *)a1 + 3);
    if (v31 && v30)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v31 + 16))(v31, v5, v30);
      unsigned int v14 = 0;
      int v5 = *(char **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      int v5 = 0;
      unsigned int v14 = 0;
    }
    goto LABEL_35;
  }
  int v10 = 0;
  uint64_t v65 = 0;
  int v17 = 1;
  char v66 = 1;
LABEL_55:
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v39 = *(char **)a1;
  unint64_t v40 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v40) {
    goto LABEL_71;
  }
  uint64_t v41 = &v39[v40];
  *((void *)a1 + 2) = v41 + 1;
  if (!v39)
  {
    unint64_t v46 = v4;
    long long v47 = 0;
    goto LABEL_72;
  }
  unsigned int v42 = *v41;
  if (v42 >= 2) {
    goto LABEL_74;
  }
  int v43 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v45 = v42 ? i : 0;
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v62);
    if (!*(void *)a1) {
      break;
    }
    if (!v10 && !v43 && v64)
    {
      WebKit::RemoteScrollingCoordinatorTransaction::RemoteScrollingCoordinatorTransaction(&v67, &v65, v45, v62, v63, 1);
      *(void *)a2 = v67;
      *(_OWORD *)(a2 + 8) = v68;
      *(void *)(a2 + 24) = v69;
      *(unsigned char *)(a2 + 32) = 1;
      if (!v66) {
        return;
      }
      goto LABEL_67;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    unint64_t v46 = 0;
    long long v47 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v48 = *((void *)a1 + 3);
    if (v48)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
        long long v47 = *(char **)a1;
        unint64_t v46 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v46 = 0;
        long long v47 = 0;
      }
    }
LABEL_72:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v49 = *((void *)a1 + 3);
    if (v49 && v46)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
      unsigned int v42 = 0;
      uint64_t v39 = *(char **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v39 = 0;
      unsigned int v42 = 0;
    }
LABEL_74:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v50 = *((void *)a1 + 3);
    if (v50 && v4) {
      (*(void (**)(uint64_t, char *))(*(void *)v50 + 16))(v50, v39);
    }
    int v43 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (!v17) {
    return;
  }
LABEL_67:
  if (v65) {
    WebCore::ScrollingStateTree::operator delete(v65, 0x50uLL);
  }
}

void sub_1986FE048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24) {
    MEMORY[0x199734630](&a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::RemoteScrollingCoordinatorTransaction::RemoteScrollingCoordinatorTransaction(uint64_t *result, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = *a2;
  *a2 = 0;
  void *result = v6;
  *((unsigned char *)result + 8) = a3;
  result[2] = a4;
  result[3] = a5;
  if (!v6)
  {
    unint64_t v11 = result;
    int v10 = a6;
    uint64_t v7 = (WebCore::ScrollingStateTree *)WTF::fastMalloc((WTF *)0x50);
    WebCore::ScrollingStateTree::ScrollingStateTree(v7, 0);
    a6 = v10;
    uint64_t result = v11;
    uint64_t v8 = *v11;
    *unint64_t v11 = (uint64_t)v7;
    if (v8)
    {
      WebCore::ScrollingStateTree::operator delete(v8, 0x50uLL);
      a6 = v10;
      uint64_t result = v11;
    }
  }
  if (a6)
  {
    BOOL v9 = result;
    WebCore::ScrollingStateTree::attachDeserializedNodes((WebCore::ScrollingStateTree *)*result);
    return v9;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  v252[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v101 = 0;
    uint64_t v102 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v103 = *((void *)a2 + 3);
    if (v103)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v103 + 16))(v103);
        uint64_t v102 = *(void *)a2;
        unint64_t v101 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v101 = 0;
        uint64_t v102 = 0;
      }
    }
    goto LABEL_218;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v101 = v6;
    uint64_t v102 = 0;
LABEL_218:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v104 = *((void *)a2 + 3);
    if (v104 && v101)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v104 + 16))(v104, v102, v101);
      unint64_t v5 = *(void *)a2;
      unint64_t v6 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      unint64_t v5 = 0;
    }
    goto LABEL_220;
  }
  if (*v8 < 2u)
  {
    int v9 = 0;
    goto LABEL_5;
  }
LABEL_220:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v105 = *((void *)a2 + 3);
  if (v105 && v6) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v105 + 16))(v105, v5);
  }
  int v9 = 1;
LABEL_5:
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v210);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v208, a2);
  uint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
  unsigned __int8 v12 = v11;
  if (!(_BYTE)v11) {
    goto LABEL_230;
  }
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
    if (!v191[24]) {
      goto LABEL_230;
    }
    BYTE4(v174) = v191[0];
    v252[0] = *(void *)&v191[1];
    *(void *)((char *)v252 + 7) = *(void *)&v191[8];
    LOBYTE(v174) = v191[16];
  }
  else
  {
    uint64_t v174 = 0;
  }
  if ((v13 & 2) != 0)
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v11) {
      goto LABEL_230;
    }
  }
  if ((v13 & 4) != 0)
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v11) {
      goto LABEL_230;
    }
  }
  if ((v13 & 8) != 0)
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v11) {
      goto LABEL_230;
    }
  }
  if ((v13 & 0x10) != 0)
  {
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    if (!v14)
    {
LABEL_226:
      unint64_t v11 = *(void *)a2;
      uint64_t v106 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t result = *((void *)a2 + 3);
      if (result && v106) {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v11);
      }
      goto LABEL_230;
    }
  }
  if ((v13 & 0x20) != 0)
  {
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
    if (!v15)
    {
      unint64_t v11 = *(void *)a2;
      uint64_t v107 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t result = *((void *)a2 + 3);
      if (result && v107) {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v11);
      }
      goto LABEL_230;
    }
  }
  LOWORD(v206[0]) = 257;
  *(void *)((char *)v206 + 2) = 0;
  WORD1(v206[1]) = 0;
  if ((v13 & 0x40) != 0)
  {
    uint64_t result = IPC::Decoder::decode<WebCore::ScrollableAreaParameters>((uint64_t *)a2);
    if ((v11 & 0xFF00000000) == 0) {
      goto LABEL_230;
    }
    v206[0] = result;
    LODWORD(v206[1]) = v11;
    int v16 = v12;
  }
  else
  {
    int v16 = 1;
  }
  v202[0] = 0;
  *(void *)&v202[4] = 0;
  *(_DWORD *)&v202[12] = 0;
  *(_WORD *)&v202[16] = 256;
  v202[18] = 0;
  LOBYTE(v203) = 0;
  unsigned __int8 v205 = 0;
  if (!v16)
  {
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }
  if ((v13 & 0x80) != 0)
  {
    uint64_t result = IPC::Decoder::decode<WebCore::RequestedScrollData>((uint64_t)v191, (uint64_t *)a2);
    if (BYTE4(v192))
    {
      *(_OWORD *)v202 = *(_OWORD *)v191;
      *(_DWORD *)&v202[15] = *(_DWORD *)&v191[15];
      if (v205 == v192)
      {
        if (v205)
        {
          LOBYTE(v203) = v191[20];
          *(void *)((char *)&v203 + 4) = *(void *)&v191[24];
          HIDWORD(v203) = *(_DWORD *)&v191[32];
          LOWORD(v204) = *(_WORD *)&v191[36];
        }
      }
      else if (v205)
      {
        unsigned __int8 v205 = 0;
      }
      else
      {
        long long v203 = *(_OWORD *)&v191[20];
        int v204 = *(_DWORD *)&v191[36];
        unsigned __int8 v205 = 1;
      }
      goto LABEL_26;
    }
LABEL_230:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_231;
  }
LABEL_26:
  char v197 = 0;
  long long v198 = 0u;
  long long v199 = 0u;
  long long v200 = 0u;
  long long v201 = 0u;
  if ((v13 & 0x100) != 0)
  {
    IPC::Decoder::decode<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>((uint64_t)v191, (uint64_t *)a2);
    if (!v196)
    {
      *a1 = 0;
      a1[8] = 0;
      std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v191, v17);
      goto LABEL_243;
    }
    char v197 = v191[0];
    unint64_t v18 = (WTF *)v198;
    if (HIDWORD(v198))
    {
      uint64_t v19 = 40 * HIDWORD(v198);
      uint64_t v20 = v198 + 24;
      do
      {
        int v21 = *(WTF **)v20;
        if (*(void *)v20)
        {
          *(void *)uint64_t v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
          WTF::fastFree(v21, v17);
        }
        v20 += 40;
        v19 -= 40;
      }
      while (v19);
      unint64_t v18 = (WTF *)v198;
    }
    if (v18)
    {
      *(void *)&long long v198 = 0;
      DWORD2(v198) = 0;
      WTF::fastFree(v18, v17);
    }
    uint64_t v22 = *(void *)&v191[8];
    *(void *)&v191[8] = 0;
    *(void *)&long long v198 = v22;
    uint64_t v23 = *(void *)&v191[16];
    *(_DWORD *)&v191[16] = 0;
    *(_DWORD *)&v191[20] = 0;
    *((void *)&v198 + 1) = v23;
    char v24 = (WTF *)v199;
    if (HIDWORD(v199))
    {
      uint64_t v25 = 40 * HIDWORD(v199);
      uint64_t v26 = v199 + 24;
      do
      {
        uint64_t v27 = *(WTF **)v26;
        if (*(void *)v26)
        {
          *(void *)uint64_t v26 = 0;
          *(_DWORD *)(v26 + 8) = 0;
          WTF::fastFree(v27, v17);
        }
        v26 += 40;
        v25 -= 40;
      }
      while (v25);
      char v24 = (WTF *)v199;
    }
    if (v24)
    {
      *(void *)&long long v199 = 0;
      DWORD2(v199) = 0;
      WTF::fastFree(v24, v17);
    }
    uint64_t v28 = *(void *)&v191[24];
    *(void *)&v191[24] = 0;
    *(void *)&long long v199 = v28;
    uint64_t v29 = *(void *)&v191[32];
    *(_DWORD *)&v191[32] = 0;
    *(_DWORD *)&v191[36] = 0;
    *((void *)&v199 + 1) = v29;
    unint64_t v30 = (WTF *)v200;
    if ((void)v200)
    {
      *(void *)&long long v200 = 0;
      DWORD2(v200) = 0;
      WTF::fastFree(v30, v17);
    }
    uint64_t v31 = v192;
    uint64_t v192 = 0;
    *(void *)&long long v200 = v31;
    uint64_t v32 = v193;
    uint64_t v193 = 0;
    *((void *)&v200 + 1) = v32;
    uint64_t v33 = (WTF *)v201;
    if ((void)v201)
    {
      *(void *)&long long v201 = 0;
      DWORD2(v201) = 0;
      WTF::fastFree(v33, v17);
    }
    uint64_t v34 = v194;
    uint64_t v194 = 0;
    *(void *)&long long v201 = v34;
    uint64_t v35 = v195;
    uint64_t v195 = 0;
    *((void *)&v201 + 1) = v35;
    std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v191, v17);
  }
  if ((v13 & 0x200) != 0)
  {
    IPC::Decoder::decode<std::optional<unsigned int>>(a2);
    if (!(_BYTE)v36) {
      goto LABEL_242;
    }
    if ((v13 & 0x400) == 0)
    {
LABEL_55:
      if ((v13 & 0x800) == 0) {
        goto LABEL_56;
      }
      goto LABEL_66;
    }
  }
  else if ((v13 & 0x400) == 0)
  {
    goto LABEL_55;
  }
  IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (!(_BYTE)v36) {
    goto LABEL_242;
  }
  if ((v13 & 0x800) == 0)
  {
LABEL_56:
    if ((v13 & 0x1000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_70;
  }
LABEL_66:
  unint64_t v37 = *((void *)a2 + 1);
  uint64_t v36 = *(char **)a2;
  unint64_t v38 = *((void *)a2 + 2) - *(void *)a2;
  if (v37 <= v38)
  {
    unint64_t v108 = 0;
    unint64_t v109 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v110 = *((void *)a2 + 3);
    if (v110)
    {
      if (v37)
      {
        (*(void (**)(uint64_t))(*(void *)v110 + 16))(v110);
        unint64_t v109 = *(void *)a2;
        unint64_t v108 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v108 = 0;
        unint64_t v109 = 0;
      }
    }
    goto LABEL_235;
  }
  uint64_t v39 = &v36[v38];
  *((void *)a2 + 2) = v39 + 1;
  if (!v36)
  {
    unint64_t v108 = v37;
    unint64_t v109 = 0;
LABEL_235:
    unint64_t v37 = 0;
    uint64_t v36 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v111 = *((void *)a2 + 3);
    if (v111)
    {
      if (v108)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v111 + 16))(v111, v109, v108);
        uint64_t v36 = *(char **)a2;
        unint64_t v37 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v36 = 0;
      }
    }
LABEL_236:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v112 = *((void *)a2 + 3);
    if (!v112 || !v37) {
      goto LABEL_242;
    }
LABEL_238:
    (*(void (**)(uint64_t, char *))(*(void *)v112 + 16))(v112, v36);
    goto LABEL_242;
  }
  if (*v39 >= 2u) {
    goto LABEL_236;
  }
  if ((v13 & 0x1000) == 0)
  {
LABEL_57:
    char v173 = 0;
    char v172 = 0;
    if ((v13 & 0x2000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_72;
  }
LABEL_70:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_242;
  }
  char v172 = v191[0];
  v251[0] = *(void *)&v191[1];
  *(void *)((char *)v251 + 7) = *(void *)&v191[8];
  char v173 = v191[16];
  if ((v13 & 0x2000) == 0)
  {
LABEL_58:
    char v171 = 0;
    char v170 = 0;
    if ((v13 & 0x4000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_74;
  }
LABEL_72:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_242;
  }
  char v170 = v191[0];
  v250[0] = *(void *)&v191[1];
  *(void *)((char *)v250 + 7) = *(void *)&v191[8];
  char v171 = v191[16];
  if ((v13 & 0x4000) == 0)
  {
LABEL_59:
    char v169 = 0;
    char v168 = 0;
    if ((v13 & 0x8000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_76;
  }
LABEL_74:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_242;
  }
  char v168 = v191[0];
  v249[0] = *(void *)&v191[1];
  *(void *)((char *)v249 + 7) = *(void *)&v191[8];
  char v169 = v191[16];
  if ((v13 & 0x8000) == 0)
  {
LABEL_60:
    char v167 = 0;
    char v166 = 0;
    if ((v13 & 0x10000) == 0) {
      goto LABEL_81;
    }
LABEL_78:
    unint64_t v40 = *((void *)a2 + 1);
    uint64_t v36 = *(char **)a2;
    unint64_t v41 = *((void *)a2 + 2) - *(void *)a2;
    if (v40 <= v41)
    {
      unint64_t v113 = 0;
      unint64_t v114 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v115 = *((void *)a2 + 3);
      if (v115)
      {
        if (v40)
        {
          (*(void (**)(uint64_t))(*(void *)v115 + 16))(v115);
          unint64_t v114 = *(void *)a2;
          unint64_t v113 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v113 = 0;
          unint64_t v114 = 0;
        }
      }
    }
    else
    {
      unsigned int v42 = &v36[v41];
      *((void *)a2 + 2) = v42 + 1;
      if (v36)
      {
        if (*v42 < 2u) {
          goto LABEL_81;
        }
        goto LABEL_241;
      }
      unint64_t v113 = v40;
      unint64_t v114 = 0;
    }
    unint64_t v40 = 0;
    uint64_t v36 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v116 = *((void *)a2 + 3);
    if (v116)
    {
      if (v113)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v116 + 16))(v116, v114, v113);
        uint64_t v36 = *(char **)a2;
        unint64_t v40 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v40 = 0;
        uint64_t v36 = 0;
      }
    }
LABEL_241:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v112 = *((void *)a2 + 3);
    if (!v112 || !v40) {
      goto LABEL_242;
    }
    goto LABEL_238;
  }
LABEL_76:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_242;
  }
  char v166 = v191[0];
  v248[0] = *(void *)&v191[1];
  *(void *)((char *)v248 + 7) = *(void *)&v191[8];
  char v167 = v191[16];
  if ((v13 & 0x10000) != 0) {
    goto LABEL_78;
  }
LABEL_81:
  long long v186 = 0uLL;
  if ((v13 & 0x20000) != 0)
  {
    IPC::Decoder::decode<WebCore::MouseLocationState>((uint64_t)v191, (unint64_t *)a2);
    if (!v191[16]) {
      goto LABEL_242;
    }
    long long v186 = *(_OWORD *)v191;
  }
  __int16 v185 = 0;
  if ((v13 & 0x40000) != 0)
  {
    int v43 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
    if ((v43 & 0xFFFFFF) < 0x10000) {
      goto LABEL_242;
    }
    __int16 v185 = (__int16)v43;
  }
  __int16 v184 = 0;
  if ((v13 & 0x80000) != 0)
  {
    uint64_t v44 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
    if ((v44 & 0xFFFFFF) < 0x10000) {
      goto LABEL_242;
    }
    __int16 v184 = (__int16)v44;
  }
  if ((v13 & 0x100000) != 0 && (unsigned __int16)IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2) < 0x100u
    || (v13 & 0x200000) != 0 && (unsigned __int16)IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a2) < 0x100u)
  {
    goto LABEL_242;
  }
  LOBYTE(v181) = 0;
  BYTE4(v181) = 0;
  LOBYTE(v183) = 0;
  if ((v13 & 0x400000) != 0)
  {
    IPC::Decoder::decode<WebCore::RequestedKeyboardScrollData>((uint64_t)v191, (unint64_t *)a2);
    if (v191[36])
    {
      long long v181 = *(_OWORD *)v191;
      long long v182 = *(_OWORD *)&v191[16];
      int v183 = *(_DWORD *)&v191[32];
      goto LABEL_102;
    }
LABEL_242:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_243;
  }
LABEL_102:
  if ((v13 & 0x800000) != 0 && (IPC::Decoder::decode<float>(a2) & 0xFF00000000) == 0) {
    goto LABEL_242;
  }
  WebCore::Region::Region((WebCore::Region *)v179);
  uint64_t v180 = 0;
  if ((v13 & 0x1000000) == 0) {
    goto LABEL_155;
  }
  IPC::Decoder::decode<WebCore::Region>(&v211, (uint64_t *)a2);
  unint64_t v45 = *((void *)a2 + 1);
  unint64_t v46 = *(void *)a2;
  unint64_t v47 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v45 < v47 || v45 - v47 <= 3)
  {
    unint64_t v125 = 0;
    unint64_t v126 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v127 = *((void *)a2 + 3);
    if (v127)
    {
      if (v45)
      {
        (*(void (**)(uint64_t))(*(void *)v127 + 16))(v127);
        unint64_t v126 = *(void *)a2;
        unint64_t v125 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v125 = 0;
        unint64_t v126 = 0;
      }
    }
LABEL_257:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v128 = *((void *)a2 + 3);
    if (v128 && v125) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v128 + 16))(v128, v126);
    }
LABEL_142:
    unint64_t v70 = *(void *)a2;
    uint64_t v71 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v72 = *((void *)a2 + 3);
    if (!v72
      || !v71
      || ((*(void (**)(uint64_t, unint64_t))(*(void *)v72 + 16))(v72, v70), !*(void *)a2))
    {
      v191[0] = 0;
      v191[32] = 0;
      goto LABEL_149;
    }
    uint64_t v73 = 0;
    int v74 = 1;
LABEL_146:
    if (v215)
    {
      WebCore::Region::Region();
      if (!v74)
      {
        uint64_t v220 = v73;
        WebCore::Region::Region();
        uint64_t v75 = v220;
        uint64_t v220 = 0;
        *(void *)&v191[24] = v75;
        v191[32] = 1;
        WebCore::Region::~Region((WebCore::Region *)&v216);
        goto LABEL_149;
      }
    }
    goto LABEL_225;
  }
  uint64_t v48 = (int *)(v46 + v47);
  *((void *)a2 + 2) = v48 + 1;
  if (!v46)
  {
    unint64_t v125 = v45;
    unint64_t v126 = 0;
    goto LABEL_257;
  }
  int v49 = *v48;
  *(void *)&long long v237 = 0;
  int v163 = v49;
  if (!v49)
  {
    uint64_t v73 = 0;
LABEL_145:
    int v74 = 0;
    goto LABEL_146;
  }
  int v50 = 0;
  do
  {
    int v164 = v50;
    unint64_t v51 = *((void *)a2 + 1);
    uint64_t v52 = *(char **)a2;
    unint64_t v53 = *((void *)a2 + 2) - *(void *)a2;
    if (v51 <= v53)
    {
      unint64_t v120 = 0;
      unint64_t v121 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v122 = *((void *)a2 + 3);
      if (v122)
      {
        if (v51)
        {
          (*(void (**)(uint64_t))(*(void *)v122 + 16))(v122);
          unint64_t v121 = *(void *)a2;
          unint64_t v120 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v120 = 0;
          unint64_t v121 = 0;
        }
      }
LABEL_252:
      unint64_t v51 = 0;
      uint64_t v52 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v123 = *((void *)a2 + 3);
      if (v123)
      {
        if (v120)
        {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v123 + 16))(v123, v121, v120);
          uint64_t v52 = *(char **)a2;
          unint64_t v51 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v51 = 0;
          uint64_t v52 = 0;
        }
      }
LABEL_253:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v124 = *((void *)a2 + 3);
      if (v124 && v51) {
        (*(void (**)(uint64_t, char *))(*(void *)v124 + 16))(v124, v52);
      }
LABEL_140:
      if ((void)v237) {
        WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v237, v52);
      }
      goto LABEL_142;
    }
    uint64_t v54 = &v52[v53];
    *((void *)a2 + 2) = v54 + 1;
    if (!v52)
    {
      unint64_t v120 = v51;
      unint64_t v121 = 0;
      goto LABEL_252;
    }
    unsigned int v55 = *v54;
    if (v55 >= 0x10) {
      goto LABEL_253;
    }
    IPC::Decoder::decode<WebCore::Region>(&v216, (uint64_t *)a2);
    if (!(_BYTE)v220) {
      goto LABEL_140;
    }
    uint64_t v56 = v237;
    if ((void)v237
      || (WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::expand((uint64_t *)&v237),
          (uint64_t v56 = v237) != 0))
    {
      unsigned int v57 = *(_DWORD *)(v56 - 8);
    }
    else
    {
      unsigned int v57 = 0;
    }
    unsigned int v58 = 9 * ((~(v55 << 15) + v55) ^ ((~(v55 << 15) + v55) >> 10));
    unsigned int v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
    uint64_t v60 = v57 & (v59 ^ HIWORD(v59));
    uint64_t v61 = (unsigned char *)(v56 + 32 * v60);
    int v62 = *v61;
    if (v62 != 255)
    {
      uint64_t v63 = 0;
      int v64 = 1;
      while (v62 != v55)
      {
        if (v62 == 254) {
          uint64_t v63 = v61;
        }
        uint64_t v60 = (v60 + v64) & v57;
        uint64_t v61 = (unsigned char *)(v56 + 32 * v60);
        int v62 = *v61;
        ++v64;
        if (v62 == 255)
        {
          if (v63)
          {
            unsigned char *v63 = -1;
            WebCore::Region::Region((WebCore::Region *)(v63 + 8));
            --*(_DWORD *)(v237 - 16);
            uint64_t v61 = v63;
          }
          goto LABEL_125;
        }
      }
      if ((_BYTE)v220) {
        WebCore::Region::~Region((WebCore::Region *)&v216);
      }
      goto LABEL_140;
    }
LABEL_125:
    unsigned char *v61 = v55;
    WebCore::Region::Region();
    WebCore::Region::operator=();
    WebCore::Region::~Region((WebCore::Region *)&v240);
    uint64_t v66 = v237;
    if ((void)v237) {
      int v67 = *(_DWORD *)(v237 - 12) + 1;
    }
    else {
      int v67 = 1;
    }
    *(_DWORD *)(v237 - 12) = v67;
    uint64_t v68 = (*(_DWORD *)(v66 - 16) + v67);
    unint64_t v69 = *(unsigned int *)(v66 - 4);
    if (v69 <= 0x400)
    {
      if (3 * v69 > 4 * v68) {
        goto LABEL_130;
      }
LABEL_129:
      WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::expand((uint64_t *)&v237);
      goto LABEL_130;
    }
    if (v69 <= 2 * v68) {
      goto LABEL_129;
    }
LABEL_130:
    if ((_BYTE)v220) {
      WebCore::Region::~Region((WebCore::Region *)&v216);
    }
    int v50 = v164 + 1;
  }
  while (v164 + 1 != v163);
  uint64_t v73 = v237;
  if (*(void *)a2) {
    goto LABEL_145;
  }
  v191[0] = 0;
  v191[32] = 0;
  if ((void)v237) {
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v237, v65);
  }
LABEL_149:
  if (v215) {
    WebCore::Region::~Region((WebCore::Region *)&v211);
  }
  if (!v191[32])
  {
    v129 = *(void **)a2;
    uint64_t v130 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v131 = *((void *)a2 + 3);
    if (!v131 || !v130 || ((*(void (**)(uint64_t, void *))(*(void *)v131 + 16))(v131, v129), !v191[32]))
    {
      *a1 = 0;
      a1[8] = 0;
      std::__optional_destruct_base<WebCore::EventTrackingRegions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Region *)v191, v129);
      goto LABEL_306;
    }
  }
  WebCore::Region::operator=();
  uint64_t v77 = *(void *)&v191[24];
  *(void *)&v191[24] = 0;
  uint64_t v78 = v180;
  uint64_t v180 = v77;
  if (v78) {
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v78, v76);
  }
  std::__optional_destruct_base<WebCore::EventTrackingRegions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Region *)v191, v76);
LABEL_155:
  if ((v13 & 0x2000000) == 0)
  {
    char v79 = 0;
    char v165 = 0;
    goto LABEL_159;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_305;
  }
  char v165 = v191[0];
  v247[0] = *(void *)&v191[1];
  *(void *)((char *)v247 + 7) = *(void *)&v191[8];
  char v79 = v191[16];
LABEL_159:
  if ((v13 & 0x4000000) == 0)
  {
    uint64_t v162 = 0;
    goto LABEL_163;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_305;
  }
  LOBYTE(v162) = v191[0];
  v246[0] = *(void *)&v191[1];
  *(void *)((char *)v246 + 7) = *(void *)&v191[8];
  BYTE4(v162) = v191[16];
LABEL_163:
  if ((v13 & 0x8000000) == 0)
  {
    uint64_t v161 = 0;
    goto LABEL_167;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_305;
  }
  LOBYTE(v161) = v191[0];
  v245[0] = *(void *)&v191[1];
  *(void *)((char *)v245 + 7) = *(void *)&v191[8];
  BYTE4(v161) = v191[16];
LABEL_167:
  if ((v13 & 0x10000000) == 0)
  {
    uint64_t v160 = 0;
    goto LABEL_171;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v191);
  if (!v191[24]) {
    goto LABEL_305;
  }
  LOBYTE(v160) = v191[0];
  v244[0] = *(void *)&v191[1];
  *(void *)((char *)v244 + 7) = *(void *)&v191[8];
  BYTE4(v160) = v191[16];
LABEL_171:
  if ((v13 & 0x20000000) != 0 && (IPC::Decoder::decode<unsigned int>(a2) & 0xFF00000000) == 0
    || (v13 & 0x40000000) != 0 && (IPC::Decoder::decode<unsigned int>(a2) & 0xFF00000000) == 0)
  {
    goto LABEL_305;
  }
  if ((v13 & 0x80000000) != 0)
  {
    *(_WORD *)long long v191 = 0;
    IPC::Decoder::operator>><BOOL>(a2, v191);
    if (!v191[1])
    {
      unint64_t v80 = *(void *)a2;
      uint64_t v132 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v133 = *((void *)a2 + 3);
      if (v133 && v132) {
        goto LABEL_351;
      }
      goto LABEL_305;
    }
  }
  if ((v13 & 0x100000000) != 0 && (IPC::Decoder::decode<float>(a2) & 0xFF00000000) == 0) {
    goto LABEL_305;
  }
  if ((v13 & 0x200000000) == 0) {
    goto LABEL_183;
  }
  unint64_t v81 = *((void *)a2 + 1);
  unint64_t v80 = *(void *)a2;
  unint64_t v82 = *((void *)a2 + 2) - *(void *)a2;
  if (v81 <= v82)
  {
    unint64_t v134 = 0;
    unint64_t v135 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v136 = *((void *)a2 + 3);
    if (v136)
    {
      if (v81)
      {
        (*(void (**)(uint64_t))(*(void *)v136 + 16))(v136);
        unint64_t v135 = *(void *)a2;
        unint64_t v134 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v134 = 0;
        unint64_t v135 = 0;
      }
    }
    goto LABEL_272;
  }
  uint64_t v83 = (unsigned __int8 *)(v80 + v82);
  *((void *)a2 + 2) = v83 + 1;
  if (!v80)
  {
    unint64_t v134 = v81;
    unint64_t v135 = 0;
LABEL_272:
    unint64_t v81 = 0;
    unint64_t v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v137 = *((void *)a2 + 3);
    if (v137)
    {
      if (v134)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v137 + 16))(v137, v135, v134);
        unint64_t v80 = *(void *)a2;
        unint64_t v81 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v81 = 0;
        unint64_t v80 = 0;
      }
    }
LABEL_273:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v133 = *((void *)a2 + 3);
    if (v133 && v81) {
      goto LABEL_351;
    }
    goto LABEL_305;
  }
  if (*v83 >= 2u) {
    goto LABEL_273;
  }
LABEL_183:
  if ((v13 & 0x400000000) == 0) {
    goto LABEL_187;
  }
  unint64_t v84 = *((void *)a2 + 1);
  unint64_t v80 = *(void *)a2;
  unint64_t v85 = *((void *)a2 + 2) - *(void *)a2;
  if (v84 <= v85)
  {
    unint64_t v138 = 0;
    unint64_t v139 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v140 = *((void *)a2 + 3);
    if (v140)
    {
      if (v84)
      {
        (*(void (**)(uint64_t))(*(void *)v140 + 16))(v140);
        unint64_t v139 = *(void *)a2;
        unint64_t v138 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v138 = 0;
        unint64_t v139 = 0;
      }
    }
    goto LABEL_277;
  }
  uint64_t v86 = (unsigned __int8 *)(v80 + v85);
  *((void *)a2 + 2) = v86 + 1;
  if (!v80)
  {
    unint64_t v138 = v84;
    unint64_t v139 = 0;
LABEL_277:
    unint64_t v84 = 0;
    unint64_t v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v141 = *((void *)a2 + 3);
    if (v141)
    {
      if (v138)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v141 + 16))(v141, v139, v138);
        unint64_t v80 = *(void *)a2;
        unint64_t v84 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v84 = 0;
        unint64_t v80 = 0;
      }
    }
LABEL_278:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v133 = *((void *)a2 + 3);
    if (v133 && v84) {
      goto LABEL_351;
    }
    goto LABEL_305;
  }
  if (*v86 >= 2u) {
    goto LABEL_278;
  }
LABEL_187:
  if ((v13 & 0x800000000) == 0) {
    goto LABEL_191;
  }
  unint64_t v87 = *((void *)a2 + 1);
  unint64_t v80 = *(void *)a2;
  unint64_t v88 = *((void *)a2 + 2) - *(void *)a2;
  if (v87 <= v88)
  {
    unint64_t v142 = 0;
    unint64_t v143 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v144 = *((void *)a2 + 3);
    if (v144)
    {
      if (v87)
      {
        (*(void (**)(uint64_t))(*(void *)v144 + 16))(v144);
        unint64_t v143 = *(void *)a2;
        unint64_t v142 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v142 = 0;
        unint64_t v143 = 0;
      }
    }
    goto LABEL_282;
  }
  uint64_t v89 = (unsigned __int8 *)(v80 + v88);
  *((void *)a2 + 2) = v89 + 1;
  if (!v80)
  {
    unint64_t v142 = v87;
    unint64_t v143 = 0;
LABEL_282:
    unint64_t v87 = 0;
    unint64_t v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v145 = *((void *)a2 + 3);
    if (v145)
    {
      if (v142)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v145 + 16))(v145, v143, v142);
        unint64_t v80 = *(void *)a2;
        unint64_t v87 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v87 = 0;
        unint64_t v80 = 0;
      }
    }
LABEL_283:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v133 = *((void *)a2 + 3);
    if (v133 && v87) {
      goto LABEL_351;
    }
    goto LABEL_305;
  }
  if (*v89 >= 2u) {
    goto LABEL_283;
  }
LABEL_191:
  if ((v13 & 0x1000000000) == 0) {
    goto LABEL_195;
  }
  unint64_t v90 = *((void *)a2 + 1);
  unint64_t v80 = *(void *)a2;
  unint64_t v91 = *((void *)a2 + 2) - *(void *)a2;
  if (v90 <= v91)
  {
    unint64_t v146 = 0;
    unint64_t v147 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v148 = *((void *)a2 + 3);
    if (v148)
    {
      if (v90)
      {
        (*(void (**)(uint64_t))(*(void *)v148 + 16))(v148);
        unint64_t v147 = *(void *)a2;
        unint64_t v146 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v146 = 0;
        unint64_t v147 = 0;
      }
    }
    goto LABEL_287;
  }
  uint64_t v92 = (unsigned __int8 *)(v80 + v91);
  *((void *)a2 + 2) = v92 + 1;
  if (!v80)
  {
    unint64_t v146 = v90;
    unint64_t v147 = 0;
LABEL_287:
    unint64_t v90 = 0;
    unint64_t v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v149 = *((void *)a2 + 3);
    if (v149)
    {
      if (v146)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v149 + 16))(v149, v147, v146);
        unint64_t v80 = *(void *)a2;
        unint64_t v90 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v90 = 0;
        unint64_t v80 = 0;
      }
    }
LABEL_288:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v133 = *((void *)a2 + 3);
    if (v133 && v90) {
      goto LABEL_351;
    }
    goto LABEL_305;
  }
  if (*v92 >= 2u) {
    goto LABEL_288;
  }
LABEL_195:
  if ((v13 & 0x2000000000) == 0)
  {
LABEL_199:
    if ((v13 & 0x4000000000) != 0)
    {
      IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)v191);
      if (!v191[16]) {
        goto LABEL_305;
      }
    }
    if ((v13 & 0x8000000000) != 0)
    {
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
      if (!v96)
      {
        unint64_t v80 = *(void *)a2;
        uint64_t v154 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v133 = *((void *)a2 + 3);
        if (v133 && v154) {
          goto LABEL_351;
        }
        goto LABEL_305;
      }
    }
    if ((v13 & 0x10000000000) != 0)
    {
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
      if (!v97)
      {
        unint64_t v80 = *(void *)a2;
        uint64_t v155 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v133 = *((void *)a2 + 3);
        if (v133 && v155) {
          goto LABEL_351;
        }
        goto LABEL_305;
      }
    }
    if ((v13 & 0x20000000000) != 0)
    {
      IPC::Decoder::decode<std::optional<WebCore::FloatSize>>((unint64_t *)a2);
      if ((v80 & 0xFF00000000) == 0) {
        goto LABEL_305;
      }
    }
    unint64_t v80 = *(void *)a2;
    if ((v13 & 0x40000000000) == 0)
    {
      if (!v80) {
        goto LABEL_305;
      }
      goto LABEL_213;
    }
    unint64_t v98 = *((void *)a2 + 1);
    if (v98 <= *((void *)a2 + 2) - v80)
    {
      unint64_t v156 = 0;
      unint64_t v157 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v158 = *((void *)a2 + 3);
      if (v158)
      {
        if (v98)
        {
          (*(void (**)(uint64_t))(*(void *)v158 + 16))(v158);
          unint64_t v157 = *(void *)a2;
          unint64_t v156 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v156 = 0;
          unint64_t v157 = 0;
        }
      }
    }
    else
    {
      __int16 v99 = (unsigned __int8 *)*((void *)a2 + 2);
      *((void *)a2 + 2) = v99 + 1;
      if (v80)
      {
        if (*v99 < 2u)
        {
LABEL_213:
          if (!v9 && v210[16] && v209)
          {
            uint64_t v100 = WTF::fastMalloc((WTF *)0x370);
            v191[0] = BYTE4(v174);
            *(void *)&v191[1] = v252[0];
            *(void *)&v191[8] = *(void *)((char *)v252 + 7);
            v191[16] = v174;
            *(_DWORD *)&v191[17] = *(_DWORD *)v207;
            *(_DWORD *)&v191[20] = *(_DWORD *)&v207[3];
            char v216 = v172;
            *(void *)&v217[7] = *(void *)((char *)v251 + 7);
            *(void *)uint64_t v217 = v251[0];
            char v218 = v173;
            *(_DWORD *)uint64_t v219 = *(_DWORD *)v190;
            *(_DWORD *)&v219[3] = *(_DWORD *)&v190[3];
            char v211 = v170;
            *(void *)char v212 = v250[0];
            *(void *)&v212[7] = *(void *)((char *)v250 + 7);
            char v213 = v171;
            *(_DWORD *)long long v214 = *(_DWORD *)v189;
            *(_DWORD *)&v214[3] = *(_DWORD *)&v189[3];
            char v240 = v168;
            *(void *)&v241[7] = *(void *)((char *)v249 + 7);
            *(void *)long long v241 = v249[0];
            char v242 = v169;
            *(_DWORD *)&v243[3] = *(_DWORD *)&v188[3];
            *(_DWORD *)uint64_t v243 = *(_DWORD *)v188;
            LOBYTE(v237) = v166;
            *((void *)&v237 + 1) = *(void *)((char *)v248 + 7);
            *(void *)((char *)&v237 + 1) = v248[0];
            char v238 = v167;
            *(_DWORD *)char v239 = *(_DWORD *)v187;
            *(_DWORD *)&v239[3] = *(_DWORD *)&v187[3];
            char v233 = v165;
            *(void *)&v234[7] = *(void *)((char *)v247 + 7);
            *(void *)uint64_t v234 = v247[0];
            char v235 = v79;
            *(_DWORD *)&v236[3] = *(_DWORD *)&v178[3];
            *(_DWORD *)int v236 = *(_DWORD *)v178;
            char v229 = v162;
            *(void *)&v230[7] = *(void *)((char *)v246 + 7);
            *(void *)int v230 = v246[0];
            char v231 = BYTE4(v162);
            *(_DWORD *)&v232[3] = *(_DWORD *)&v177[3];
            *(_DWORD *)long long v232 = *(_DWORD *)v177;
            char v225 = v161;
            *(void *)&v226[7] = *(void *)((char *)v245 + 7);
            *(void *)char v226 = v245[0];
            char v227 = BYTE4(v161);
            *(_DWORD *)&v228[3] = *(_DWORD *)&v176[3];
            *(_DWORD *)__int16 v228 = *(_DWORD *)v176;
            char v221 = v160;
            *(void *)&v222[7] = *(void *)((char *)v244 + 7);
            *(void *)char v222 = v244[0];
            char v223 = BYTE4(v160);
            *(_DWORD *)&v224[3] = *(_DWORD *)&v175[3];
            *(_DWORD *)char v224 = *(_DWORD *)v175;
            WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode();
            *(void *)a1 = v100;
            a1[8] = 1;
            goto LABEL_306;
          }
          goto LABEL_225;
        }
LABEL_304:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v133 = *((void *)a2 + 3);
        if (v133 && v98) {
          goto LABEL_351;
        }
        goto LABEL_305;
      }
      unint64_t v156 = v98;
      unint64_t v157 = 0;
    }
    unint64_t v98 = 0;
    unint64_t v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v159 = *((void *)a2 + 3);
    if (v159)
    {
      if (v156)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v159 + 16))(v159, v157, v156);
        unint64_t v80 = *(void *)a2;
        unint64_t v98 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v98 = 0;
        unint64_t v80 = 0;
      }
    }
    goto LABEL_304;
  }
  unint64_t v93 = *((void *)a2 + 1);
  unint64_t v80 = *(void *)a2;
  unint64_t v94 = *((void *)a2 + 2) - *(void *)a2;
  if (v93 <= v94)
  {
    unint64_t v150 = 0;
    unint64_t v151 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v152 = *((void *)a2 + 3);
    if (v152)
    {
      if (v93)
      {
        (*(void (**)(uint64_t))(*(void *)v152 + 16))(v152);
        unint64_t v151 = *(void *)a2;
        unint64_t v150 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v150 = 0;
        unint64_t v151 = 0;
      }
    }
    goto LABEL_292;
  }
  uint64_t v95 = (unsigned __int8 *)(v80 + v94);
  *((void *)a2 + 2) = v95 + 1;
  if (!v80)
  {
    unint64_t v150 = v93;
    unint64_t v151 = 0;
LABEL_292:
    unint64_t v93 = 0;
    unint64_t v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v153 = *((void *)a2 + 3);
    if (v153)
    {
      if (v150)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v153 + 16))(v153, v151, v150);
        unint64_t v80 = *(void *)a2;
        unint64_t v93 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v93 = 0;
        unint64_t v80 = 0;
      }
    }
    goto LABEL_293;
  }
  if (*v95 < 2u) {
    goto LABEL_199;
  }
LABEL_293:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v133 = *((void *)a2 + 3);
  if (v133 && v93) {
LABEL_351:
  }
    (*(void (**)(uint64_t, unint64_t))(*(void *)v133 + 16))(v133, v80);
LABEL_305:
  *a1 = 0;
  a1[8] = 0;
LABEL_306:
  if (v180) {
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v180, (void *)v80);
  }
  WebCore::Region::~Region((WebCore::Region *)v179);
LABEL_243:
  __int16 v117 = (WTF *)v201;
  if ((void)v201)
  {
    *(void *)&long long v201 = 0;
    DWORD2(v201) = 0;
    WTF::fastFree(v117, v36);
  }
  uint64_t v118 = (WTF *)v200;
  if ((void)v200)
  {
    *(void *)&long long v200 = 0;
    DWORD2(v200) = 0;
    WTF::fastFree(v118, v36);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v199, v36);
  uint64_t result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v198, v119);
LABEL_231:
  if (v209) {
    return WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v208, (void *)v11);
  }
  return result;
}

void sub_198700008(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x248]) {
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(STACK[0x248], a2);
  }
  WebCore::Region::~Region((WebCore::Region *)&STACK[0x230]);
  int v74 = *(WTF **)(v71 + 164);
  if (v74)
  {
    *(void *)(v71 + 164) = 0;
    *(_DWORD *)(v71 + 172) = 0;
    WTF::fastFree(v74, v73);
  }
  uint64_t v75 = *(WTF **)(v71 + 148);
  if (v75)
  {
    *(void *)(v71 + 148) = 0;
    *(_DWORD *)(v71 + 156) = 0;
    WTF::fastFree(v75, v73);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a71, v73);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(STACK[0x200], v76);
  if (LOBYTE(STACK[0x3A8])) {
    WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x398], v77);
  }
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      char v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  unint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (void *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  void *result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v3) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 40 * v3;
    unint64_t v6 = (char *)v4 + 24;
    do
    {
      unsigned int v7 = *(WTF **)v6;
      if (*(void *)v6)
      {
        *(void *)unint64_t v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), a2);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = (uint64_t *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v6 = *v5;
      if ((v6 & 0xFFFDE00000000000) == 0) {
        return v6;
      }
      goto LABEL_8;
    }
    unint64_t v9 = v1;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      char v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  unint64_t v1 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    uint64_t v13 = a1;
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
      a1 = v13;
      unint64_t v1 = v13[1];
    }
    else
    {
      unint64_t v1 = 0;
    }
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = a1[3];
  if (v7 && v1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  return 0;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_27:
    uint64_t v26 = *(void *)a2;
    uint64_t v27 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v28 = v27 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
    }
    return result;
  }
  unint64_t v6 = v4;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v4 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t)&v31, a2);
      if (!v32)
      {
LABEL_26:
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 16) = 0;
        WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
        goto LABEL_27;
      }
      int v18 = HIDWORD(v34);
      if (HIDWORD(v34) != v34) {
        break;
      }
      uint64_t v19 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v31);
      uint64_t v20 = HIDWORD(v34);
      int v21 = HIDWORD(v34) + 1;
      uint64_t v22 = v33;
      uint64_t v23 = *v19;
      uint64_t *v19 = 0;
      *((void *)v22 + v20) = v23;
      HIDWORD(v34) = v21;
      if (v32) {
        goto LABEL_22;
      }
LABEL_24:
      if (!--v6)
      {
        uint64_t v29 = v33;
        if (v34 > HIDWORD(v34))
        {
          if (HIDWORD(v34))
          {
            LODWORD(v34) = HIDWORD(v34);
            uint64_t v29 = (WTF *)WTF::fastRealloc(v33, (void *)(8 * HIDWORD(v34)));
          }
          else if (v33)
          {
            uint64_t v33 = 0;
            LODWORD(v34) = 0;
            WTF::fastFree(v29, v5);
            uint64_t v29 = v33;
          }
        }
        *(void *)a1 = v29;
        uint64_t v30 = v34;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        *(void *)(a1 + 8) = v30;
        goto LABEL_17;
      }
    }
    uint64_t v24 = v31;
    uint64_t v31 = 0;
    *((void *)v33 + HIDWORD(v34)) = v24;
    HIDWORD(v34) = v18 + 1;
LABEL_22:
    uint64_t v25 = v31;
    uint64_t v31 = 0;
    if (v25) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v25 + 8), v5);
    }
    goto LABEL_24;
  }
  if (v4)
  {
    LODWORD(v34) = v4;
    uint64_t v33 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t)&v31, a2);
      if (!v32) {
        goto LABEL_26;
      }
      int v7 = HIDWORD(v34);
      if (HIDWORD(v34) != v34) {
        break;
      }
      char v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v31);
      uint64_t v9 = HIDWORD(v34);
      int v10 = HIDWORD(v34) + 1;
      uint64_t v11 = v33;
      uint64_t v12 = *v8;
      *char v8 = 0;
      *((void *)v11 + v9) = v12;
      HIDWORD(v34) = v10;
      if (v32) {
        goto LABEL_10;
      }
LABEL_12:
      if (!--v6)
      {
        long long v15 = v33;
        uint64_t v16 = v34;
        goto LABEL_16;
      }
    }
    uint64_t v13 = v31;
    uint64_t v31 = 0;
    *((void *)v33 + HIDWORD(v34)) = v13;
    HIDWORD(v34) = v7 + 1;
LABEL_10:
    uint64_t v14 = v31;
    uint64_t v31 = 0;
    if (v14) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 8), v5);
    }
    goto LABEL_12;
  }
  long long v15 = 0;
  uint64_t v16 = 0;
LABEL_16:
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v16;
LABEL_17:
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
}

void sub_1987008F8(_Unwind_Exception *a1, void *a2, uint64_t a3, char a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a3) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(a3 + 8), a2);
    }
  }
  WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::UserData>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::UserData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<WebKit::UserData,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(a1, (uint64_t)&v6);
  if (*(void *)a1)
  {
    if (v7)
    {
      uint64_t v4 = v6;
      uint64_t v6 = 0;
      if (v4)
      {
        CFRetain(*(CFTypeRef *)(v4 + 8));
        *(void *)a2 = v4;
        *(unsigned char *)(a2 + 8) = 1;
        CFRelease(*(CFTypeRef *)(v4 + 8));
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
LABEL_5:
  if (v7)
  {
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    if (v5) {
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
}

void sub_198700A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (a9) {
      CFRelease(*(CFTypeRef *)(a9 + 8));
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 8)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198700AA0(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 8))
  {
    uint64_t v3 = *v1;
    *unint64_t v1 = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::decode<IPC::Decoder,API::Object>(IPC::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(unsigned char **)this;
  unint64_t v6 = *((void *)this + 2) - *(void *)this;
  if (v4 <= v6)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v32 = *((void *)this + 3);
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *(void *)this;
        unint64_t v30 = *((void *)this + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_83;
  }
  char v7 = &v5[v6];
  *((void *)this + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v30 = v4;
    uint64_t v31 = 0;
LABEL_83:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v33 = *((void *)this + 3);
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31, v30);
        uint64_t v5 = *(unsigned char **)this;
        unint64_t v4 = *((void *)this + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_84;
  }
  if (*v7 >= 2u)
  {
LABEL_84:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v34 = *((void *)this + 3);
    if (v34 && v4) {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v34 + 16))(v34, v5);
    }
    goto LABEL_89;
  }
  if (!*v7)
  {
    *(void *)a2 = 0;
    goto LABEL_19;
  }
  if (v4 <= v7 + 1 - v5)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v35 = *((void *)this + 3);
    if (v35)
    {
      (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
      uint64_t v46 = *(void *)this;
      uint64_t v47 = *((void *)this + 1);
      uint64_t v48 = *((void *)this + 3);
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      if (v48)
      {
        if (v47) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46);
        }
      }
    }
    goto LABEL_88;
  }
  *((void *)this + 2) = v7 + 2;
  if (v7[1] >= 0x14u)
  {
LABEL_88:
    IPC::Decoder::markInvalid(this);
    goto LABEL_89;
  }
  switch(v7[1])
  {
    case 0u:
      unint64_t v13 = *((void *)this + 1);
      unint64_t v14 = ((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
      if (v13 < v14 || v13 - v14 <= 7)
      {
        *(void *)this = 0;
        *((void *)this + 1) = 0;
        uint64_t v37 = *((void *)this + 3);
        if (v37)
        {
          if (v13)
          {
            (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
            uint64_t v38 = *(void *)this;
            uint64_t v39 = *((void *)this + 1);
            uint64_t v40 = *((void *)this + 3);
            *(void *)this = 0;
            *((void *)this + 1) = 0;
            if (v40)
            {
              if (v39) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
              }
            }
          }
        }
        goto LABEL_77;
      }
      long long v15 = (unint64_t *)((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v15;
      *((void *)this + 2) = v15 + 1;
      unsigned int v57 = 0;
      uint64_t v58 = 0;
      if (v16 >= 0x20000)
      {
        while (1)
        {
          IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v55, this);
          if (!v56)
          {
LABEL_76:
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v5);
LABEL_77:
            IPC::Decoder::markInvalid(this);
            goto LABEL_78;
          }
          int v27 = HIDWORD(v58);
          if (HIDWORD(v58) != v58) {
            break;
          }
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v57, (unint64_t)&v55);
          if (v56) {
            goto LABEL_69;
          }
LABEL_71:
          if (!--v16)
          {
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v57, HIDWORD(v58));
            uint64_t v52 = v57;
            uint64_t v45 = v58;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            uint64_t v53 = v45;
            goto LABEL_39;
          }
        }
        uint64_t v28 = v55;
        uint64_t v55 = 0;
        *((void *)v57 + HIDWORD(v58)) = v28;
        HIDWORD(v58) = v27 + 1;
LABEL_69:
        uint64_t v29 = v55;
        uint64_t v55 = 0;
        if (v29) {
          CFRelease(*(CFTypeRef *)(v29 + 8));
        }
        goto LABEL_71;
      }
      if (v16)
      {
        LODWORD(v58) = v16;
        unsigned int v57 = (WebKit *)WTF::fastMalloc((WTF *)(8 * v16));
        while (1)
        {
          IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v55, this);
          if (!v56) {
            goto LABEL_76;
          }
          int v17 = HIDWORD(v58);
          if (HIDWORD(v58) != v58) {
            break;
          }
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v57, (unint64_t)&v55);
          if (v56) {
            goto LABEL_34;
          }
LABEL_36:
          if (!--v16)
          {
            uint64_t v20 = v57;
            uint64_t v21 = v58;
            goto LABEL_38;
          }
        }
        uint64_t v18 = v55;
        uint64_t v55 = 0;
        *((void *)v57 + HIDWORD(v58)) = v18;
        HIDWORD(v58) = v17 + 1;
LABEL_34:
        uint64_t v19 = v55;
        uint64_t v55 = 0;
        if (v19) {
          CFRelease(*(CFTypeRef *)(v19 + 8));
        }
        goto LABEL_36;
      }
      uint64_t v20 = 0;
      uint64_t v21 = 0;
LABEL_38:
      unsigned int v57 = 0;
      uint64_t v58 = 0;
      uint64_t v52 = v20;
      uint64_t v53 = v21;
LABEL_39:
      char v54 = 1;
      WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v5);
      if (*(void *)this)
      {
        API::Array::create((uint64_t *)&v52, (uint64_t *)&v57);
        uint64_t v10 = v57;
        if (v54) {
          WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v23);
        }
LABEL_16:
        if (*(void *)this)
        {
LABEL_17:
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 8) = 0;
LABEL_18:
          *(void *)a2 = v10;
LABEL_19:
          *(unsigned char *)(a2 + 8) = 1;
          return;
        }
        if (v10) {
LABEL_91:
        }
          CFRelease(*((CFTypeRef *)v10 + 1));
        goto LABEL_89;
      }
      WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v22);
LABEL_105:
      IPC::Decoder::markInvalid(this);
      if (!*(void *)this)
      {
LABEL_89:
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 8) = 0;
        return;
      }
LABEL_79:
      while (1)
      {
        __break(1u);
LABEL_80:
        IPC::Decoder::decode<WTF::Ref<API::UserContentURLPattern,WTF::RawPtrTraits<API::UserContentURLPattern>,WTF::DefaultRefDerefTraits<API::UserContentURLPattern>>>((uint64_t)&v52, this);
LABEL_48:
        LODWORD(v12) = v53;
        if (!*(void *)this) {
          break;
        }
        if ((_BYTE)v53)
        {
          LODWORD(v12) = 1;
          uint64_t v10 = v52;
          goto LABEL_23;
        }
      }
      if ((_BYTE)v53)
      {
        LODWORD(v12) = v52;
        if (v52)
        {
          uint64_t v36 = (const void *)*((void *)v52 + 1);
LABEL_97:
          CFRelease(v36);
          LODWORD(v12) = 0;
        }
      }
LABEL_98:
      uint64_t v10 = 0;
LABEL_23:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      if (v12) {
        goto LABEL_18;
      }
      return;
    case 1u:
      unint64_t v24 = *((void *)this + 1);
      if (v24 <= v7 + 2 - v5)
      {
        unint64_t v41 = 0;
        unsigned int v42 = 0;
        *(void *)this = 0;
        *((void *)this + 1) = 0;
        uint64_t v43 = *((void *)this + 3);
        if (v43)
        {
          if (v24)
          {
            (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
            unint64_t v41 = 0;
            uint64_t v49 = *(void *)this;
            uint64_t v50 = *((void *)this + 1);
            uint64_t v51 = *((void *)this + 3);
            *(void *)this = 0;
            *((void *)this + 1) = 0;
            unsigned int v42 = 0;
            if (v51 && v50)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v49, v50);
              unsigned int v42 = *(unsigned char **)this;
              unint64_t v41 = *((void *)this + 1);
            }
          }
          else
          {
            unint64_t v41 = 0;
            unsigned int v42 = 0;
          }
        }
      }
      else
      {
        *((void *)this + 2) = v7 + 3;
        unsigned int v25 = v7[2];
        if (v25 < 2)
        {
          BOOL v26 = v25 != 0;
          uint64_t v10 = (WebKit *)API::Object::newObject(0x18uLL, 32);
          *((unsigned char *)v10 + 16) = v26;
          *(void *)uint64_t v10 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v10);
          *(void *)uint64_t v10 = &unk_1EE9B3ED0;
          if (*(void *)this) {
            goto LABEL_17;
          }
          goto LABEL_91;
        }
        unint64_t v41 = v24;
        unsigned int v42 = v5;
      }
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v44 = *((void *)this + 3);
      if (!v44 || !v41) {
        goto LABEL_105;
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v44 + 16))(v44, v42);
LABEL_78:
      if (!*(void *)this) {
        goto LABEL_105;
      }
      goto LABEL_79;
    case 2u:
      IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 3u:
      IPC::ArgumentCoder<API::Dictionary,void>::decode((uint64_t)&v52, this);
      if (!(_BYTE)v53)
      {
        IPC::Decoder::markInvalid(this);
        uint64_t v12 = *(void *)this;
        if (*(void *)this) {
          goto LABEL_79;
        }
        goto LABEL_98;
      }
      uint64_t v10 = v52;
      if (*(void *)this)
      {
        LODWORD(v12) = 1;
        goto LABEL_23;
      }
      if (v52)
      {
        uint64_t v36 = (const void *)*((void *)v52 + 1);
        goto LABEL_97;
      }
      LODWORD(v12) = 0;
      goto LABEL_23;
    case 4u:
      IPC::Decoder::decode<WTF::Ref<API::Double,WTF::RawPtrTraits<API::Double>,WTF::DefaultRefDerefTraits<API::Double>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 5u:
      IPC::Decoder::decode<WTF::Ref<API::Error,WTF::RawPtrTraits<API::Error>,WTF::DefaultRefDerefTraits<API::Error>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 6u:
      IPC::Decoder::decode<WTF::Ref<API::FrameHandle,WTF::RawPtrTraits<API::FrameHandle>,WTF::DefaultRefDerefTraits<API::FrameHandle>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 7u:
      IPC::Decoder::decode<WTF::Ref<WebKit::WebImage,WTF::RawPtrTraits<WebKit::WebImage>,WTF::DefaultRefDerefTraits<WebKit::WebImage>>>((uint64_t)&v52, (unint64_t *)this);
      goto LABEL_48;
    case 8u:
      IPC::Decoder::decode<WTF::Ref<API::PageHandle,WTF::RawPtrTraits<API::PageHandle>,WTF::DefaultRefDerefTraits<API::PageHandle>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 9u:
      IPC::Decoder::decode<WTF::Ref<API::Point,WTF::RawPtrTraits<API::Point>,WTF::DefaultRefDerefTraits<API::Point>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0xAu:
      IPC::Decoder::decode<WTF::Ref<API::Rect,WTF::RawPtrTraits<API::Rect>,WTF::DefaultRefDerefTraits<API::Rect>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0xBu:
      IPC::Decoder::decode<WTF::Ref<API::SerializedScriptValue,WTF::RawPtrTraits<API::SerializedScriptValue>,WTF::DefaultRefDerefTraits<API::SerializedScriptValue>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0xCu:
      IPC::Decoder::decode<WTF::Ref<API::Size,WTF::RawPtrTraits<API::Size>,WTF::DefaultRefDerefTraits<API::Size>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0xDu:
      IPC::Decoder::decode<WTF::String>(this, (uint64_t)&v52);
      uint64_t v9 = *(void *)this;
      if (*(void *)this)
      {
        if (!(_BYTE)v53) {
          goto LABEL_79;
        }
        API::String::create(&v52, &v57);
        uint64_t v10 = v57;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((_BYTE)v53)
      {
        uint64_t v11 = v52;
        uint64_t v52 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v8);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      if (v9) {
        goto LABEL_16;
      }
      goto LABEL_105;
    case 0xEu:
      IPC::Decoder::decode<WTF::Ref<API::URL,WTF::RawPtrTraits<API::URL>,WTF::DefaultRefDerefTraits<API::URL>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0xFu:
      IPC::Decoder::decode<WTF::Ref<API::URLRequest,WTF::RawPtrTraits<API::URLRequest>,WTF::DefaultRefDerefTraits<API::URLRequest>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0x10u:
      IPC::Decoder::decode<WTF::Ref<API::URLResponse,WTF::RawPtrTraits<API::URLResponse>,WTF::DefaultRefDerefTraits<API::URLResponse>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0x11u:
      IPC::Decoder::decode<WTF::Ref<API::UInt64,WTF::RawPtrTraits<API::UInt64>,WTF::DefaultRefDerefTraits<API::UInt64>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0x12u:
      IPC::Decoder::decode<WTF::Ref<API::Int64,WTF::RawPtrTraits<API::Int64>,WTF::DefaultRefDerefTraits<API::Int64>>>((uint64_t)&v52, this);
      goto LABEL_48;
    case 0x13u:
      goto LABEL_80;
    default:
      goto LABEL_89;
  }
}

void sub_1987012C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, ...)
{
  va_start(va, a8);
  if (a8)
  {
    if (a7) {
      CFRelease(*(CFTypeRef *)(a7 + 8));
    }
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_19870130C(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  JUMPOUT(0x198701304);
}

uint64_t WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (WebKit::ResourceLoadStatisticsStore::tableExists((uint64_t)this)
    || (uint64_t result = WebKit::ResourceLoadStatisticsStore::tableExists((uint64_t)this), result))
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v3 = (uint64_t)this + 16;
    WebCore::SQLiteDatabase::prepareStatement();
    unsigned int v4 = v52;
    if (v52)
    {
      uint64_t v5 = qword_1EB358460;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR);
      unsigned int v8 = v52;
      if (!v6) {
        goto LABEL_5;
      }
      uint64_t v44 = *((void *)this + 82);
      uint64_t v48 = (char *)this + 16;
      *(_DWORD *)buf = 134218755;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v44;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)char v56 = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      *(_WORD *)&v56[4] = 2081;
      *(void *)&v56[6] = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary: failed to prepare unattributedScopedStatement", buf, 0x26u);
    }
    else
    {
      uint64_t v48 = (char *)this + 16;
      uint64_t v9 = (uint64_t (**)(int, WebCore::SQLiteStatement *))v58;
      uint64_t v3 = 312;
      while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v51) == 100)
      {
        if (!v52)
        {
          WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase((WebCore::SQLiteStatement *)v51, (uint64_t)this, 0, (uint64_t)buf);
          unsigned int v11 = HIDWORD(v54);
          if (HIDWORD(v54) == v54)
          {
            WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>((uint64_t)&v53, (unint64_t)buf);
          }
          else
          {
            uint64_t v12 = v53;
            uint64_t v13 = v53 + 312 * HIDWORD(v54);
            *(unsigned char *)uint64_t v13 = buf[0];
            uint64_t v14 = *(void *)&buf[8];
            *(void *)&buf[8] = 0;
            *(void *)(v13 + 8) = v14;
            uint64_t v15 = *(void *)&buf[16];
            *(void *)&buf[16] = 0;
            *(void *)(v13 + 16) = v15;
            long long v16 = *(_OWORD *)v56;
            long long v17 = *(_OWORD *)&v56[9];
            *(unsigned char *)(v13 + 56) = 0;
            uint64_t v18 = v13 + 56;
            *(_OWORD *)(v18 - 23) = v17;
            *(_OWORD *)(v18 - 32) = v16;
            *(unsigned char *)(v18 + 128) = 0;
            uint64_t v19 = (unsigned char *)(v18 + 128);
            if (v57[128])
            {
              std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v18, (uint64_t)v57);
              unsigned char *v19 = 1;
            }
            uint64_t v20 = v12 + 312 * v11;
            long long v21 = v58[0];
            long long v22 = v58[1];
            *(unsigned char *)(v20 + 224) = 0;
            uint64_t v23 = v20 + 224;
            *(_OWORD *)(v23 - 32) = v21;
            *(_OWORD *)(v23 - 16) = v22;
            *(unsigned char *)(v23 + 8) = 0;
            if (v60)
            {
              uint64_t v24 = v59;
              uint64_t v59 = 0;
              *(void *)uint64_t v23 = v24;
              *(unsigned char *)(v23 + 8) = 1;
            }
            uint64_t v25 = v12 + 312 * v11;
            uint64_t v26 = v61;
            uint64_t v61 = 0;
            *(void *)(v25 + 240) = v26;
            uint64_t v27 = v62;
            uint64_t v62 = 0;
            *(void *)(v25 + 248) = v27;
            uint64_t v28 = v63;
            uint64_t v63 = 0;
            *(void *)(v25 + 256) = v28;
            uint64_t v29 = v64;
            uint64_t v64 = 0;
            *(void *)(v25 + 264) = v29;
            *(unsigned char *)(v25 + 272) = 0;
            *(unsigned char *)(v25 + 296) = 0;
            if (v68)
            {
              uint64_t v30 = v65;
              uint64_t v65 = 0;
              *(void *)(v25 + 272) = v30;
              uint64_t v31 = v12 + 312 * v11;
              uint64_t v32 = v66;
              uint64_t v66 = 0;
              *(void *)(v31 + 280) = v32;
              uint64_t v33 = v67;
              uint64_t v67 = 0;
              *(void *)(v31 + 288) = v33;
              *(unsigned char *)(v25 + 296) = 1;
            }
            uint64_t v34 = v69;
            uint64_t v69 = 0;
            *(void *)(v12 + 312 * v11 + 304) = v34;
            ++HIDWORD(v54);
          }
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v10);
          if (!v52) {
            continue;
          }
        }
LABEL_22:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_23;
      }
    }
    unsigned int v8 = v52;
    uint64_t v3 = (uint64_t)v48;
LABEL_5:
    uint64_t v9 = &off_1EE9C7600;
    if (v8 != -1) {
      (*(&off_1EE9C7600 + v8))((int)buf, (WebCore::SQLiteStatement *)v51);
    }
    if (v4) {
      return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v7);
    }
LABEL_23:
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    WebCore::SQLiteDatabase::prepareStatement();
    unsigned int v35 = v52;
    if (v52)
    {
      uint64_t v36 = qword_1EB358460;
      uint64_t v37 = os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR);
      unsigned int v39 = v35;
      if (!v37)
      {
LABEL_25:
        if (v39 != -1) {
          uint64_t v37 = v9[v39]((int)buf, (WebCore::SQLiteStatement *)v51);
        }
        if (!v35)
        {
          if (HIDWORD(v54) | HIDWORD(v50))
          {
            WTF::RunLoop::main((WTF::RunLoop *)v37);
            unint64_t v41 = (atomic_uchar *volatile *)*((void *)this + 13);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v41);
            *(void *)buf = v41;
            WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v53, (uint64_t)&buf[8]);
            WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v49, (uint64_t)v56);
            WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>(v51, (uint64_t *)buf);
            WTF::RunLoop::dispatch();
            uint64_t v43 = v51[0];
            v51[0] = 0;
            if (v43) {
              (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
            }
            WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0::~$_0((atomic_uchar ***)buf, v42);
          }
          WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)buf);
          WebKit::ResourceLoadStatisticsStore::deleteTable((uint64_t)this, (uint64_t)"UnattributedPrivateClickMeasurement", 0x100000023);
          WebKit::ResourceLoadStatisticsStore::deleteTable((uint64_t)this, (uint64_t)"AttributedPrivateClickMeasurement", 0x100000021);
          WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(buf);
        }
        WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v38);
        return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v7);
      }
      uint64_t v45 = *((void *)this + 82);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)v3);
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)v3);
      *(_DWORD *)buf = 134218755;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v45;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)char v56 = Error;
      *(_WORD *)&v56[4] = 2081;
      *(void *)&v56[6] = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v36, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary: failed to prepare attributedScopedStatement", buf, 0x26u);
    }
    else
    {
      while (1)
      {
        uint64_t v37 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v51);
        if (v37 != 100) {
          break;
        }
        if (!v52)
        {
          WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase((WebCore::SQLiteStatement *)v51, (uint64_t)this, 1, (uint64_t)buf);
          if (HIDWORD(v50) == v50)
          {
            WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>((uint64_t)&v49, (unint64_t)buf);
          }
          else
          {
            WebCore::PrivateClickMeasurement::PrivateClickMeasurement(v49 + 312 * HIDWORD(v50), (uint64_t)buf);
            ++HIDWORD(v50);
          }
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v40);
          if (!v52) {
            continue;
          }
        }
        goto LABEL_22;
      }
    }
    unsigned int v39 = v52;
    goto LABEL_25;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::checkForMissingTablesInSchema(WebKit::ResourceLoadStatisticsStore *this, WebKit::ResourceLoadStatisticsStore *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(a2);
  if (HIDWORD(qword_1EB359898))
  {
    if (qword_1EB359898)
    {
      uint64_t v5 = 32 * qword_1EB359898;
      BOOL v6 = (WTF::StringImpl **)qword_1EB359890;
      while (!*v6)
      {
        v6 += 4;
        v5 -= 32;
        if (!v5) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      BOOL v6 = (WTF::StringImpl **)qword_1EB359890;
    }
    uint64_t v7 = qword_1EB359890 + 32 * qword_1EB359898;
    if (v6 != (WTF::StringImpl **)v7)
    {
LABEL_9:
      if (!WebKit::ResourceLoadStatisticsStore::tableExists((uint64_t)a2))
      {
        unsigned int v11 = *v6;
        if (*v6) {
          *(_DWORD *)v11 += 2;
        }
        uint64_t v15 = v11;
        int v12 = HIDWORD(v17);
        if (HIDWORD(v17) == v17)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v16, (unint64_t)&v15);
        }
        else
        {
          uint64_t v15 = 0;
          *(void *)(v16 + 8 * HIDWORD(v17)) = v11;
          HIDWORD(v17) = v12 + 1;
        }
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v4);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      while (1)
      {
        v6 += 4;
        if (v6 == (WTF::StringImpl **)v7) {
          break;
        }
        if (*v6)
        {
          if (v6 != (WTF::StringImpl **)v7) {
            goto LABEL_9;
          }
          break;
        }
      }
      int v8 = HIDWORD(v17);
      if (HIDWORD(v17))
      {
        *(void *)this = v16;
        int v14 = v17;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        *((_DWORD *)this + 2) = v14;
        *((_DWORD *)this + 3) = v8;
        char v9 = 1;
        goto LABEL_15;
      }
    }
  }
LABEL_14:
  char v9 = 0;
  *(unsigned char *)this = 0;
LABEL_15:
  *((unsigned char *)this + 16) = v9;
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v4);
}

BOOL WebKit::ResourceLoadStatisticsStore::tableExists(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 624), (uint64_t)"tableExists", (WebCore::SQLiteStatementAutoResetScope *)&v12);
  if (!v12)
  {
    unsigned int v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      BOOL v2 = 0;
      goto LABEL_4;
    }
    uint64_t v5 = *(void *)(a1 + 656);
    int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)buf = 134218755;
    uint64_t v14 = a1;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = Error;
    __int16 v19 = 2081;
    uint64_t v20 = ErrorMsg;
    int v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::tableExists: failed to prepare statement";
LABEL_10:
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, v8, buf, 0x26u);
    goto LABEL_8;
  }
  if (WebCore::SQLiteStatement::bindText())
  {
    unsigned int v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v9 = *(void *)(a1 + 656);
    int v10 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    uint64_t v11 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)buf = 134218755;
    uint64_t v14 = a1;
    __int16 v15 = 2048;
    uint64_t v16 = v9;
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 2081;
    uint64_t v20 = v11;
    int v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::tableExists: failed to bind parameter";
    goto LABEL_10;
  }
  BOOL v2 = WebCore::SQLiteStatement::step(v12) == 100;
LABEL_4:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v12);
  return v2;
}

void WebKit::DatabaseUtilities::scopedStatement(uint64_t a1@<X0>, WebCore::SQLiteStatement **a2@<X1>, uint64_t a3@<X4>, WebCore::SQLiteStatementAutoResetScope *a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  BOOL v6 = *a2;
  if (v6) {
    goto LABEL_2;
  }
  uint64_t v9 = (WebCore::SQLiteDatabase *)(a1 + 16);
  WebCore::SQLiteDatabase::prepareHeapStatement();
  int v10 = v15;
  if (v15)
  {
    uint64_t v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      uint64_t v17 = a1;
      __int16 v18 = 2080;
      uint64_t v19 = a3;
      __int16 v20 = 2082;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v9);
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::%s failed to prepare statement, error message: %{public}s", buf, 0x20u);
    }
    WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(a4, 0);
  }
  else
  {
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    int v12 = *a2;
    *a2 = v11;
    if (v12) {
      WebCore::SQLiteStatement::operator delete(v12, 0x18uLL);
    }
  }
  if (v15 != -1) {
    ((void (*)(uint8_t *, WebCore::SQLiteStatement **))off_1EE9C3190[v15])(buf, &v14);
  }
  if (!v10)
  {
    BOOL v6 = *a2;
LABEL_2:
    WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(a4, v6);
  }
}

void *WebKit::RemoteLayerBackingStore::drawInContext(WebKit::RemoteLayerBackingStore *this, WebCore::GraphicsContext *a2)
{
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a2 + 96))(a2, 1);
  long long v20 = *(_OWORD *)((char *)this + 56);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(void *)(v4 + 832);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0 && *(unsigned char *)(v6 + 208)) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 0;
  }
  switch(*(unsigned char *)(v4 + 12))
  {
    case 1:
    case 0xA:
      WebCore::PlatformCALayer::drawLayerContents();
      break;
    case 2:
    case 6:
      uint64_t v8 = *(void *)(v4 + 48);
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v19, (const WebCore::IntRect *)&v20);
      (*(void (**)(uint64_t, uint64_t, WebCore::GraphicsContext *, void *, uint64_t))(*(void *)v8 + 56))(v8, v4, a2, v19, v7);
      break;
    default:
      break;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a2 + 104))(a2, 1);
  WebCore::Region::Region((WebCore::Region *)v19);
  WebCore::Region::operator=();
  WebCore::Region::~Region((WebCore::Region *)v19);
  WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF **)this + 27, v9);
  (*(void (**)(void))(**(void **)(*((void *)this + 2) + 48) + 128))(*(void *)(*((void *)this + 2) + 48));
  int v10 = *((unsigned __int8 *)this + 96);
  *((_OWORD *)this + 5) = v20;
  if (!v10) {
    *((unsigned char *)this + 96) = 1;
  }
  uint64_t result = (*(void *(**)(void *__return_ptr, WebKit::RemoteLayerBackingStore *, uint64_t))(*(void *)this + 64))(v19, this, 1);
  uint64_t v12 = v19[0];
  if (v19[0])
  {
    uint64_t v13 = (uint64_t *)((char *)this + 200);
    uint64_t v14 = *((unsigned int *)this + 53);
    if (v14 == *((_DWORD *)this + 52))
    {
      int v15 = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)v19);
      uint64_t v14 = *((unsigned int *)this + 53);
      uint64_t v16 = *((void *)this + 25);
      uint64_t v17 = *v15;
      uint64_t *v15 = 0;
      *(void *)(v16 + 8 * v14) = v17;
    }
    else
    {
      uint64_t v18 = *v13;
      v19[0] = 0;
      *(void *)(v18 + 8 * v14) = v12;
    }
    *((_DWORD *)this + 53) = v14 + 1;
    uint64_t result = (void *)v19[0];
    v19[0] = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_198701FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::RemoteLayerWithRemoteRenderingBackingStore::createFlusher@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *(unsigned int **)(a1 + 320);
  if (result) {
    return WebKit::RemoteImageBufferSetProxy::flushFrontBufferAsync(result, a2);
  }
  *a2 = 0;
  return result;
}

unsigned int *WebKit::RemoteImageBufferSetProxy::flushFrontBufferAsync@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 4);
  if (!v3
    || (uint64_t v4 = result, (result = *(unsigned int **)(v3 + 8)) == 0)
    || (uint64_t result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, &v56), !v56))
  {
    *a2 = 0;
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)(*((void *)v4 + 4) + 8) + 232);
  uint64_t v6 = *((void *)v56 + 15);
  uint64_t v7 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)uint64_t v7 = 1;
  *(_WORD *)(v7 + 4) = 0;
  *(unsigned char *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 160) = 0;
  *(void *)(v7 + 168) = v5;
  *(void *)(v7 + 176) = v6;
  kdebug_trace();
  char v9 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4 + 89, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0]((char *)v4 + 89);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  uint64_t v10 = *((void *)v4 + 12);
  *((void *)v4 + 12) = v7;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v10, v8);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4 + 89, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)((char *)v4 + 89));
  }
  uint64_t v12 = *((void *)v4 + 4);
  if (v12)
  {
    uint64_t v13 = *(WebKit::RemoteRenderingBackendProxy **)(v12 + 8);
    uint64_t v54 = *((void *)v13 + 29);
    uint64_t v55 = &v54;
    uint64_t v14 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v13, &v57);
    int v15 = v57;
    if (v57)
    {
      uint64_t v16 = *((void *)v4 + 3);
      double v17 = *((double *)v57 + 15);
      double v18 = INFINITY;
      if (fabs(v17) != INFINITY)
      {
        WTF::ApproximateTime::now(v14);
        double v18 = v17 + v19;
      }
      if (*((void *)v15 + 7) == v16)
      {
LABEL_15:
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 16), buf, v18);
        if (buf[16])
        {
          uint64_t v21 = *(void *)buf;
          uint64_t v22 = *(char **)&buf[8];
          unint64_t v23 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v24 = v23 - *(void *)buf;
          if (v23 < *(void *)buf) {
            goto LABEL_73;
          }
          unint64_t v25 = 0;
          if (v24 > 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v26 = 0;
          }
          else
          {
            unint64_t v26 = 0;
            if (v24 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v24) = 1119;
              unint64_t v25 = (unint64_t)v22;
              unint64_t v26 = v24 + 2;
            }
          }
          while (1)
          {
            uint64_t v27 = (void *)((v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v22 = (char *)v27 - v21 - v26;
            if ((unint64_t)v27 >= v21 + v26)
            {
              uint64_t v22 = (char *)v27 - v21;
              if ((unint64_t)v27 - v21 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_60;
              }
              unint64_t v26 = (unint64_t)(v22 + 8);
              if ((unint64_t)(v22 + 8) > v25) {
                goto LABEL_60;
              }
              void *v27 = *v55;
            }
            if (v25)
            {
              unint64_t v28 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v29 = *((void *)v15 + 8);
              if (v28 + 16 >= v29) {
                unint64_t v28 = 0;
              }
              if (v26 <= 0x10) {
                unint64_t v26 = 16;
              }
              unint64_t v30 = v28 + v26;
              if (v29 <= v30) {
                unint64_t v31 = 0;
              }
              else {
                unint64_t v31 = v30;
              }
              *((void *)v15 + 10) = v31;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v31) == 0x80000000
                || v15[29])
              {
                if (*((unsigned char *)v15 + 104)) {
                  MEMORY[0x1997420B0](v15[23]);
                }
                v15[29] = 0;
              }
              goto LABEL_34;
            }
LABEL_60:
            uint64_t v21 = buf[16];
            if (buf[16])
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v15, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)v15 + 1);
              int v48 = IPC::Connection::send<Messages::RemoteImageBufferSet::EndPrepareForDisplay>((uint64_t)v58, &v55, v16);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
              if (v48) {
                goto LABEL_62;
              }
LABEL_34:
              WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v15, v20);
              uint64_t v32 = *((void *)v4 + 3);
              uint64_t v33 = WTF::fastMalloc((WTF *)0x20);
              unsigned int v35 = v4[21];
              *(void *)uint64_t v33 = &unk_1EE9E9DD8;
              *(void *)(v33 + 8) = v32;
              *(void *)(v33 + 16) = v7;
              *(_DWORD *)(v33 + 24) = v35;
              *a2 = v33;
              goto LABEL_35;
            }
            __break(1u);
LABEL_73:
            unint64_t v26 = 0;
            unint64_t v25 = (unint64_t)v22;
          }
        }
        goto LABEL_62;
      }
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 16), buf, v18);
      if (buf[16])
      {
        uint64_t v36 = *(void *)buf;
        unint64_t v37 = *(void *)&buf[8];
        unint64_t v38 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v39 = v38 - *(void *)buf;
        if (v38 < *(void *)buf)
        {
          unint64_t v41 = 0;
          unint64_t v40 = *(void *)&buf[8];
        }
        else
        {
          unint64_t v40 = 0;
          if (v39 > 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v41 = 0;
          }
          else
          {
            unint64_t v41 = 0;
            if (v39 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v39) = 2871;
              unint64_t v40 = v37;
              unint64_t v41 = v39 + 2;
            }
          }
        }
        unsigned int v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v42 >= v36 + v41)
        {
          uint64_t v43 = (char *)v42 - v36;
          if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_62;
          }
          unint64_t v41 = (unint64_t)(v43 + 8);
          if ((unint64_t)(v43 + 8) > v40) {
            goto LABEL_62;
          }
          void *v42 = v16;
        }
        if (v40)
        {
          unint64_t v44 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v45 = *((void *)v15 + 8);
          if (v44 + 16 >= v45) {
            unint64_t v44 = 0;
          }
          if (v41 <= 0x10) {
            unint64_t v41 = 16;
          }
          unint64_t v46 = v44 + v41;
          if (v45 <= v46) {
            unint64_t v47 = 0;
          }
          else {
            unint64_t v47 = v46;
          }
          *((void *)v15 + 10) = v47;
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v15, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v47) == 0x80000000);
          *((void *)v15 + 7) = v16;
          goto LABEL_15;
        }
      }
LABEL_62:
      uint64_t v49 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v51 = IPC::errorAsString();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "RemoteImageBufferSet_EndPrepareForDisplay";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v51;
        _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferSetProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      uint64_t v52 = *((void *)v4 + 4);
      if (v52)
      {
        uint64_t v53 = *(unsigned char **)(v52 + 8);
        if (v53) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v53);
        }
      }
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v15, v50);
    }
  }
  *a2 = 0;
  WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v7, v8);
LABEL_35:
  uint64_t result = (unsigned int *)v56;
  if (v56) {
    return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v56, v34);
  }
  return result;
}

unint64_t WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1 <= a3 && v4 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v8 = a3 - v4;
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v8;
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = 16;
    }
    if (v6 > a2) {
      a2 = v6;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

WTF **WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF **result, void *a2)
{
  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3)) {
      *((_DWORD *)result + 3) = 0;
    }
    unint64_t v3 = (WTF *)(result + 2);
    BOOL v2 = *result;
    if (result + 2 != (WTF **)*result)
    {
      if (!v2) {
        goto LABEL_8;
      }
      unsigned int *result = 0;
      *((_DWORD *)result + 2) = 0;
      uint64_t v4 = result + 2;
      unint64_t v5 = result;
      WTF::fastFree(v2, a2);
      unint64_t v3 = (WTF *)v4;
      uint64_t result = v5;
      BOOL v2 = *v5;
    }
    if (v2) {
      return result;
    }
LABEL_8:
    unsigned int *result = v3;
    *((_DWORD *)result + 2) = 5;
  }
  return result;
}

void NetworkServiceInitializer(WTF *a1, void *a2)
{
  WTF::initializeMainThread(a1);
  id v6 = a1;
  if (a1) {
    uint64_t v4 = a1;
  }
  WebKit::XPCServiceInitializer<WebKit::NetworkProcess,WebKit::NetworkServiceInitializerDelegate,false>(&v6, a2);
  id v5 = v6;
  if (v6)
  {
  }
}

void sub_1987026F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

void WebKit::XPCServiceInitializer<WebKit::NetworkProcess,WebKit::NetworkServiceInitializerDelegate,false>(void **a1, void *a2)
{
  unint64_t v3 = *a1;
  *a1 = 0;
  id v27 = v3;
  unint64_t v28 = a2;
  xpc_object_t v26 = &unk_1EE9BBB08;
  char v19 = 0;
  int v20 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v16 = 0;
  double v17 = 0;
  int v15 = 0;
  LOBYTE(v18) = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v4 = &v22;
  uint64_t ExtraInitializationData = WebKit::XPCServiceInitializerDelegate::getExtraInitializationData((uint64_t)&v26, &v22);
  if ((ExtraInitializationData & 1) == 0) {
    goto LABEL_26;
  }
  if (a2)
  {
    v13[0] = (uint64_t)"enable-lockdown-mode";
    v13[1] = 21;
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v22, v13, &v14);
    int v7 = MEMORY[0x19972E990](v14, "1", 1);
    uint64_t v8 = v14;
    uint64_t v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t ExtraInitializationData = WebKit::setJSCOptions(a2, v7);
  }
  WebKit::InitializeWebKit2((WebKit *)ExtraInitializationData);
  if (!WebKit::XPCServiceInitializerDelegate::checkEntitlements((WebKit::XPCServiceInitializerDelegate *)&v26)) {
    goto LABEL_26;
  }
  if (!WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier((uint64_t)&v26, (uint64_t)&v20)) {
    goto LABEL_26;
  }
  if (!WebKit::XPCServiceInitializerDelegate::getClientIdentifier(&v26, &v16)) {
    goto LABEL_26;
  }
  WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier(&v26, &v17);
  WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors((uint64_t)&v26, (uint64_t)&v24);
  uint64_t v14 = 0;
  if ((WebKit::XPCServiceInitializerDelegate::getProcessIdentifier((uint64_t)&v26, (unint64_t *)&v14) & 1) == 0) {
    goto LABEL_26;
  }
  if (!v19) {
    char v19 = 1;
  }
  double v18 = v14;
  if (WebKit::XPCServiceInitializerDelegate::getClientProcessName(&v26, &v15))
  {
    voucher_replace_default_voucher();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v12 = (WTF::StringImpl *)v13[0];
    LODWORD(v4) = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v22, &v12, v9);
    int v11 = v12;
    uint64_t v12 = 0;
    if (!v11) {
      goto LABEL_17;
    }
    if (*(_DWORD *)v11 != 2)
    {
      *(_DWORD *)v11 -= 2;
      goto LABEL_17;
    }
  }
  else
  {
LABEL_26:
    int v11 = (WTF::StringImpl *)WTF::exitProcess((WTF *)1);
    __break(1u);
  }
  WTF::StringImpl::destroy(v11, v10);
LABEL_17:
  if (v4) {
    WTF::Thread::setGlobalMaxQOSClass((WTF::Thread *)0x11, (uint64_t)v10);
  }
  char v23 = 1;
  if ((_MergedGlobals_77 & 1) == 0)
  {
    WebKit::NetworkProcess::NetworkProcess(&unk_1E93CF358, &v15);
    _MergedGlobals_77 = 1;
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&v15, v10);
  xpc_object_t v26 = &unk_1EE9BFBD8;
  if (v27) {
}
  }

void sub_198702980(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&a14, a2);
  *(void *)(v14 - 56) = &unk_1EE9BFBD8;
  uint64_t v16 = *(void **)(v14 - 48);
  if (v16) {

  }
  _Unwind_Resume(a1);
}

void WebKit::XPCServiceInitializer<WebKit::GPUProcess,WebKit::GPUServiceInitializerDelegate,false>(void **a1, void *a2)
{
  unint64_t v3 = *a1;
  *a1 = 0;
  id v29 = v3;
  unint64_t v30 = a2;
  xpc_object_t v28 = &unk_1EE9BB150;
  char v21 = 0;
  int v22 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  double v18 = 0;
  char v19 = 0;
  double v17 = 0;
  LOBYTE(v20) = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v4 = &v24;
  uint64_t ExtraInitializationData = WebKit::XPCServiceInitializerDelegate::getExtraInitializationData((uint64_t)&v28, &v24);
  if ((ExtraInitializationData & 1) == 0) {
    goto LABEL_24;
  }
  if (a2)
  {
    v15[0] = (uint64_t)"enable-lockdown-mode";
    v15[1] = 21;
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v24, v15, &v16);
    int v7 = MEMORY[0x19972E990](v16, "1", 1);
    uint64_t v8 = v16;
    uint64_t v16 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t ExtraInitializationData = WebKit::setJSCOptions(a2, v7);
  }
  WebKit::InitializeWebKit2((WebKit *)ExtraInitializationData);
  if (!WebKit::XPCServiceInitializerDelegate::checkEntitlements((WebKit::XPCServiceInitializerDelegate *)&v28)) {
    goto LABEL_24;
  }
  if (!WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier((uint64_t)&v28, (uint64_t)&v22)) {
    goto LABEL_24;
  }
  if (!WebKit::XPCServiceInitializerDelegate::getClientIdentifier(&v28, &v18)) {
    goto LABEL_24;
  }
  WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier(&v28, &v19);
  WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors((uint64_t)&v28, (uint64_t)&v26);
  uint64_t v16 = 0;
  if ((WebKit::XPCServiceInitializerDelegate::getProcessIdentifier((uint64_t)&v28, (unint64_t *)&v16) & 1) == 0) {
    goto LABEL_24;
  }
  if (!v21) {
    char v21 = 1;
  }
  int v20 = v16;
  if (WebKit::XPCServiceInitializerDelegate::getClientProcessName(&v28, &v17))
  {
    voucher_replace_default_voucher();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v14 = (WTF::StringImpl *)v15[0];
    LODWORD(v4) = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v24, &v14, v9);
    int v11 = v14;
    uint64_t v14 = 0;
    if (!v11) {
      goto LABEL_17;
    }
    if (*(_DWORD *)v11 != 2)
    {
      *(_DWORD *)v11 -= 2;
      goto LABEL_17;
    }
  }
  else
  {
LABEL_24:
    int v11 = (WTF::StringImpl *)WTF::exitProcess((WTF *)1);
    __break(1u);
  }
  int v11 = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v10);
LABEL_17:
  if (v4) {
    int v11 = (WTF::StringImpl *)WTF::Thread::setGlobalMaxQOSClass((WTF::Thread *)0x11, (uint64_t)v10);
  }
  char v25 = 3;
  uint64_t v12 = WebKit::GPUProcess::singleton(v11);
  WebKit::AuxiliaryProcess::initialize((WebKit::AuxiliaryProcess *)v12, (const WebKit::AuxiliaryProcessInitializationParameters *)&v17);
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&v17, v13);
  xpc_object_t v28 = &unk_1EE9BFBD8;
  if (v29) {
}
  }

void sub_198702C64(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&a14, a2);
  *(void *)(v14 - 56) = &unk_1EE9BFBD8;
  uint64_t v16 = *(void **)(v14 - 48);
  if (v16) {

  }
  _Unwind_Resume(a1);
}

void WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters(WebKit::AuxiliaryProcessInitializationParameters *this, WTF::StringImpl *a2)
{
  unint64_t v3 = (WTF::StringImpl **)*((void *)this + 7);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4) {

  }
  id v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  id v6 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebKit::XPCServiceInitializerDelegate::getExtraInitializationData(uint64_t a1, uint64_t *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 16), "extra-initialization-data");
  string = xpc_dictionary_get_string(value, "inspector-process");
  WTF::String::String((WTF::String *)&v38, string);
  if (v38)
  {
    if (*((_DWORD *)v38 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39[0] = *(WTF::StringImpl **)&v41[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v41, a2, v39, (_DWORD **)&v38);
      char v21 = v39[0];
      v39[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
  }
  id v5 = xpc_dictionary_get_string(value, "service-worker-process");
  WTF::String::String((WTF::String *)&v37, v5);
  if (v37)
  {
    if (*((_DWORD *)v37 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39[0] = *(WTF::StringImpl **)&v41[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(a2, v39, (uint64_t *)&v37, (uint64_t)v41);
      uint64_t v23 = v39[0];
      v39[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v22);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }
  }
  id v6 = xpc_dictionary_get_string(value, "registrable-domain");
  WTF::String::String((WTF::String *)&v36, v6);
  if (v36)
  {
    if (*((_DWORD *)v36 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39[0] = *(WTF::StringImpl **)&v41[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(a2, v39, (uint64_t *)&v36, (uint64_t)v41);
      char v25 = v39[0];
      v39[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v24);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
  }
  int v7 = xpc_dictionary_get_string(value, "is-prewarmed");
  WTF::String::String((WTF::String *)&v35, v7);
  if (v35)
  {
    if (*((_DWORD *)v35 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39[0] = *(WTF::StringImpl **)&v41[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v41, a2, v39, (_DWORD **)&v35);
      unint64_t v9 = v39[0];
      v39[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  unint64_t v10 = xpc_dictionary_get_string(value, "enable-lockdown-mode");
  WTF::String::String((WTF::String *)&v34, v10);
  if (v34)
  {
    if (*((_DWORD *)v34 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39[0] = *(WTF::StringImpl **)&v41[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v41, a2, v39, (_DWORD **)&v34);
      int v27 = v39[0];
      v39[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v26);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
  }
  xpc_connection_get_audit_token();
  *(_OWORD *)unint64_t v39 = v41[0];
  long long v40 = v41[1];
  if (!sandbox_check_by_audit_token())
  {
    xpc_object_t v28 = xpc_dictionary_get_string(value, "user-directory-suffix");
    WTF::String::String((WTF::String *)v39, v28);
    unint64_t v30 = v39[0];
    if (v39[0])
    {
      if (!*((_DWORD *)v39[0] + 1))
      {
        v39[0] = 0;
LABEL_61:
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v29);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
        goto LABEL_15;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v33 = *(WTF::StringImpl **)&v41[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v41, a2, &v33, (_DWORD **)v39);
      unint64_t v31 = v33;
      uint64_t v33 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v29);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      unint64_t v30 = v39[0];
      v39[0] = 0;
      if (v30) {
        goto LABEL_61;
      }
    }
  }
LABEL_15:
  int v11 = xpc_dictionary_get_string(value, "always-runs-at-background-priority");
  WTF::String::String((WTF::String *)v39, v11);
  uint64_t v13 = v39[0];
  if (!v39[0]) {
    goto LABEL_20;
  }
  if (!*((_DWORD *)v39[0] + 1))
  {
    v39[0] = 0;
LABEL_18:
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
    goto LABEL_20;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v33 = *(WTF::StringImpl **)&v41[0];
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v41, a2, &v33, (_DWORD **)v39);
  uint64_t v32 = v33;
  uint64_t v33 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v12);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t v13 = v39[0];
  v39[0] = 0;
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v14 = v34;
  uint64_t v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  int v15 = v35;
  unsigned int v35 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v36;
  uint64_t v36 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v12);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  double v17 = v37;
  unint64_t v37 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  double v18 = v38;
  unint64_t v38 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v12);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  return 1;
}

void sub_1987032AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier(xpc_object_t *this, WTF::StringImpl **a2)
{
  string = xpc_dictionary_get_string(this[2], "client-bundle-identifier");
  WTF::String::String((WTF::String *)&v10, string);
  id v5 = v10;
  unint64_t v10 = 0;
  id v6 = *a2;
  *a2 = v5;
  if (!v6) {
    return v5 && *((_DWORD *)v5 + 1) != 0;
  }
  int v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v4);
    id v6 = v10;
    unint64_t v10 = 0;
    if (!v6) {
      goto LABEL_4;
    }
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v9);
      goto LABEL_4;
    }
  }
  *(_DWORD *)id v6 = v7;
LABEL_4:
  id v5 = *a2;
  return v5 && *((_DWORD *)v5 + 1) != 0;
}

BOOL WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier(uint64_t a1, uint64_t a2)
{
  int v4 = xpc_dictionary_copy_mach_send();
  unsigned int v5 = v4 - 1;
  if ((v4 - 1) <= 0xFFFFFFFD)
  {
    int v6 = v4;
    int v7 = *(void **)(a1 + 8);
    if (v7) {
      id v8 = v7;
    }
    *(_DWORD *)a2 = v6;
    unint64_t v9 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v7;
    if (v9) {
  }
    }
  return v5 < 0xFFFFFFFE;
}

uint64_t WebKit::XPCServiceInitializerDelegate::getProcessIdentifier(uint64_t a1, unint64_t *a2)
{
  string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "process-identifier");
  uint64_t v4 = (uint64_t)string;
  uint64_t v5 = 0x100000000;
  if (string) {
    uint64_t v5 = strlen(string) | 0x100000000;
  }
  unint64_t v6 = WTF::parseInteger<unsigned long long>(v4, v5, 0xAu);
  if (!v7) {
    return v7 != 0;
  }
  if (v6 != -1)
  {
    *a2 = v6;
    return v7 != 0;
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

unint64_t WTF::parseInteger<unsigned long long,unsigned char>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  if (a1 && a2)
  {
    uint64_t v6 = 0;
    while (1)
    {
      unsigned int v7 = *(unsigned __int8 *)(a1 + v6);
      if (v7 - 9 >= 5 && v7 != 32) {
        break;
      }
      if (a2 == ++v6) {
        goto LABEL_48;
      }
    }
    if (v7 == 43)
    {
      if (a2 - 1 == v6) {
        goto LABEL_48;
      }
      uint64_t v9 = ~v6 + a2;
      id v8 = (unsigned __int8 *)(a1 + v6 + 1);
      unsigned int v7 = *v8;
    }
    else
    {
      id v8 = (unsigned __int8 *)(a1 + v6);
      uint64_t v9 = a2 - v6;
    }
    if (v7 - 48 > 9)
    {
      if ((v7 | 0x20) >= 0x61)
      {
        int v27 = (int)a3 >= 36 ? 36 : a3;
        unsigned int v11 = v27 + 87;
        if (v27 + 87 > (v7 | 0x20)) {
          goto LABEL_16;
        }
      }
    }
    else if (v7 - 48 < a3)
    {
      if ((int)a3 >= 36) {
        int v10 = 36;
      }
      else {
        int v10 = a3;
      }
      unsigned int v11 = v10 + 87;
LABEL_16:
      unint64_t v4 = 0;
      char v12 = 0;
      uint64_t v13 = &v8[v9];
      uint64_t v14 = v9 - 1;
      for (char i = v8 + 1; ; ++i)
      {
        unsigned int v16 = v7 - 48;
        uint64_t v17 = v7 - 48;
        uint64_t v18 = (v7 | 0x20) - 87;
        if (v16 < 0xA) {
          uint64_t v18 = v17;
        }
        uint64_t v19 = (v4 * (unsigned __int128)a3) >> 64;
        if (is_mul_ok(v4, a3)) {
          v4 *= a3;
        }
        BOOL v20 = __CFADD__(v4, v18);
        unint64_t v21 = v4 + v18;
        int v22 = v20;
        if (!v20) {
          unint64_t v4 = v21;
        }
        if (v19 ? 1 : v22) {
          char v12 = 1;
        }
        if (!v14) {
          break;
        }
        ++v8;
        unsigned int v7 = *i;
        if (v7 - 48 > 9)
        {
          if ((v7 | 0x20) < 0x61 || v11 <= (v7 | 0x20))
          {
            uint64_t v13 = i;
            break;
          }
        }
        else if (v7 - 48 >= a3)
        {
          uint64_t v13 = v8;
          break;
        }
        --v14;
      }
      if (!v12)
      {
        if (a4 || !v14)
        {
LABEL_39:
          unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF00;
          unint64_t v4 = v4;
          return v5 | v4;
        }
        uint64_t v25 = 0;
        while (1)
        {
          int v26 = v13[v25];
          if ((v26 - 9) >= 5 && v26 != 32) {
            break;
          }
          if (v14 == ++v25) {
            goto LABEL_39;
          }
        }
      }
    }
LABEL_48:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  return v5 | v4;
}

unint64_t WTF::parseInteger<unsigned long long>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a2 & 0xFF00000000) != 0) {
    return WTF::parseInteger<unsigned long long,unsigned char>(a1, a2, a3, 0);
  }
  else {
    return WTF::parseInteger<unsigned long long,char16_t>(a1, a2, a3, 0);
  }
}

uint64_t WebKit::XPCServiceInitializerDelegate::checkEntitlements(WebKit::XPCServiceInitializerDelegate *this)
{
  return 1;
}

uint64_t WebKit::setJSCOptions(void *a1, int a2)
{
  uint64_t v2 = MEMORY[0x1E4F309C0];
  if (*(unsigned char *)(MEMORY[0x1E4F309C0] + 485))
  {
    uint64_t result = 188;
    __break(0xC471u);
    return result;
  }
  unint64_t v5 = (JSC::Config *)xpc_dictionary_get_BOOL(a1, "configure-jsc-for-testing");
  if (v5) {
    unint64_t v5 = (JSC::Config *)JSC::Config::configureForTesting(v5);
  }
  if (a2)
  {
    *MEMORY[0x1E4F30958] = 2;
    int v10 = (JSC::ExecutableAllocator *)JSC::Options::initialize(v5);
    JSC::ExecutableAllocator::disableJIT(v10);
    *(_WORD *)(v2 + 849) = 0;
    *(unsigned char *)(v2 + 1937) = 0;
    *(unsigned char *)(v2 + 1741) = 0;
    int v7 = 1;
    *(unsigned char *)(v2 + 1482) = 1;
    *(_WORD *)(v2 + 1480) = 1;
  }
  else
  {
    BOOL v6 = xpc_dictionary_get_BOOL(a1, "disable-jit");
    if (v6)
    {
      unsigned int v11 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v6);
      JSC::ExecutableAllocator::disableJIT(v11);
      int v7 = 1;
    }
    else
    {
      int v7 = 0;
    }
  }
  BOOL v8 = xpc_dictionary_get_BOOL(a1, "enable-shared-array-buffer");
  if (!v8)
  {
    uint64_t result = xpc_dictionary_get_BOOL(a1, "disable-jit-cage");
    if ((result & 1) == 0)
    {
      if (!v7) {
        return result;
      }
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  JSC::Options::initialize((JSC::Options *)v8);
  *(unsigned char *)(v2 + 1964) = 1;
  uint64_t result = xpc_dictionary_get_BOOL(a1, "disable-jit-cage");
  if (result)
  {
LABEL_13:
    uint64_t result = JSC::Options::initialize((JSC::Options *)result);
    *(unsigned char *)(v2 + 1929) = 0;
  }
LABEL_14:

  return JSC::Options::notifyOptionsChanged((JSC::Options *)result);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    unint64_t v4 = a1;
    do
    {
      unint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        BOOL v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            unint64_t v5 = *v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        WTF::StringImpl *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WebKit::XPCServiceInitializerDelegate::~XPCServiceInitializerDelegate(WebKit::XPCServiceInitializerDelegate *this)
{
  *(void *)this = &unk_1EE9BFBD8;
  unint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
}
  }

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BFBD8;
  unint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {

  }
  JUMPOUT(0x199740C10);
}

void WebKit::SandboxExtension::createHandleForTemporaryFile(const char **a1@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v37[1] = a1;
  v37[2] = a2;
  v37[0] = 0;
  unsigned int v36 = 1024;
  unsigned int v35 = 1024;
  __s = (char *)WTF::fastMalloc((WTF *)0x400);
  if (confstr(65537, __s, 0x400uLL))
  {
    unsigned int v36 = strlen(__s);
    WTF::StringView::utf8();
    BOOL v8 = v30[0];
    if (!v30[0]) {
      goto LABEL_22;
    }
    uint64_t v9 = *((void *)v30[0] + 1);
    if (v9)
    {
      unint64_t v10 = v36;
      unint64_t v11 = v9 + v36;
      if (v11 > v35)
      {
        unint64_t v12 = v35 + ((unint64_t)v35 >> 2);
        if (v12 >= 0x10) {
          unint64_t v13 = v12 + 1;
        }
        else {
          unint64_t v13 = 16;
        }
        if (v13 <= v11) {
          uint64_t v14 = (WTF *)(v9 + v36);
        }
        else {
          uint64_t v14 = (WTF *)v13;
        }
        WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&__s, v14);
        unint64_t v10 = v36;
      }
      if (v11 < v10)
      {
        __break(0xC471u);
        return;
      }
      int v15 = (char *)v30[0] + 16;
      unsigned int v16 = &__s[v10];
      do
      {
        char v17 = *v15++;
        *v16++ = v17;
        --v9;
      }
      while (v9);
      unsigned int v36 = v11;
      BOOL v8 = v30[0];
      v30[0] = 0;
      if (!v8)
      {
LABEL_22:
        LOBYTE(v30[0]) = 0;
        if (v36 == v35)
        {
          uint64_t v18 = (char *)WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__s, (WTF *)(v36 + 1), (unint64_t)v30);
          __s[v36] = *v18;
        }
        else
        {
          __s[v36] = 0;
        }
        ++v36;
        WTF::String::fromUTF8((uint64_t *)&v33, (WTF::String *)__s, v7);
        if (v33)
        {
          WTF::FileSystemImpl::fileSystemRepresentation((uint64_t *)&v32, (WTF::FileSystemImpl *)&v33, v6);
          if (v32) {
            uint64_t v19 = (char *)v32 + 16;
          }
          else {
            uint64_t v19 = 0;
          }
          v31[0] = 0;
          v31[32] = 0;
          WebKit::SandboxExtensionImpl::create((uint64_t)v19, a3, (uint64_t)v31, 0, (uint64_t *)v30);
          unint64_t v21 = v37[0];
          v37[0] = (const char **)v30[0];
          if (v21)
          {
            WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v21);
            WTF::fastFree(v28, v29);
          }
          int v22 = v32;
          uint64_t v32 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1) {
              WTF::fastFree(v22, v20);
            }
            else {
              --*(_DWORD *)v22;
            }
          }
          if (v37[0])
          {
            WTF::String::fromUTF8((uint64_t *)&v32, (WTF::String *)__s, (const char *)v20);
            uint64_t v23 = v37[0];
            v37[0] = 0;
            uint64_t v24 = v32;
            uint64_t v32 = 0;
            *(void *)a4 = v23;
            *(void *)(a4 + 8) = v24;
            *(unsigned char *)(a4 + 16) = 1;
            v30[0] = 0;
            v30[1] = 0;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v30);
            uint64_t v25 = v32;
            uint64_t v32 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v6);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
            goto LABEL_41;
          }
          WTFLogAlways();
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 16) = 0;
LABEL_41:
        int v26 = v33;
        uint64_t v33 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v6);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        goto LABEL_45;
      }
    }
    else
    {
      v30[0] = 0;
    }
    if (*(_DWORD *)v8 == 1) {
      WTF::fastFree(v8, v7);
    }
    else {
      --*(_DWORD *)v8;
    }
    goto LABEL_22;
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 16) = 0;
LABEL_45:
  int v27 = __s;
  if (__s)
  {
    __s = 0;
    unsigned int v35 = 0;
    WTF::fastFree((WTF *)v27, v6);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v37);
}

void sub_198703D20(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, WTF::StringImpl *a19, WTF *a20,int a21)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a20) {
    WTF::fastFree(a20, a2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v21 - 72));
  _Unwind_Resume(a1);
}

BOOL WebKit::XPCServiceInitializerDelegate::getClientIdentifier(xpc_object_t *this, WTF::StringImpl **a2)
{
  string = (WTF::String *)xpc_dictionary_get_string(this[2], "client-identifier");
  WTF::String::fromUTF8((uint64_t *)&v11, string, v4);
  BOOL v6 = v11;
  unint64_t v11 = 0;
  int v7 = *a2;
  *a2 = v6;
  if (!v7) {
    return v6 && *((_DWORD *)v6 + 1) != 0;
  }
  int v8 = *(_DWORD *)v7 - 2;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v5);
    int v7 = v11;
    unint64_t v11 = 0;
    if (!v7) {
      goto LABEL_4;
    }
    int v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v10);
      goto LABEL_4;
    }
  }
  *(_DWORD *)int v7 = v8;
LABEL_4:
  BOOL v6 = *a2;
  return v6 && *((_DWORD *)v6 + 1) != 0;
}

BOOL WebKit::XPCServiceInitializerDelegate::getClientProcessName(xpc_object_t *this, WTF::StringImpl **a2)
{
  string = (WTF::String *)xpc_dictionary_get_string(this[2], "ui-process-name");
  WTF::String::fromUTF8((uint64_t *)&v11, string, v4);
  BOOL v6 = v11;
  unint64_t v11 = 0;
  int v7 = *a2;
  *a2 = v6;
  if (!v7) {
    return v6 && *((_DWORD *)v6 + 1) != 0;
  }
  int v8 = *(_DWORD *)v7 - 2;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v5);
    int v7 = v11;
    unint64_t v11 = 0;
    if (!v7) {
      goto LABEL_4;
    }
    int v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v10);
      goto LABEL_4;
    }
  }
  *(_DWORD *)int v7 = v8;
LABEL_4:
  BOOL v6 = *a2;
  return v6 && *((_DWORD *)v6 + 1) != 0;
}

uint64_t _ZZN3WTF8BlockPtrIFbmPU24objcproto13OS_xpc_object8NSObjectEE12fromCallableIZZN6WebKit22XPCServiceEventHandlerES3_EUb_E3__0EES5_T_ENUlPvmS3_E_8__invokeESA_mS3_(uint64_t a1, int a2, xpc_object_t xstring)
{
  uint64_t v3 = *(void *)(a1 + 32);
  string_ptr = (WTF::String *)xpc_string_get_string_ptr(xstring);
  WTF::String::fromUTF8((uint64_t *)&v13, string_ptr, v5);
  uint64_t v7 = *(unsigned int *)(v3 + 12);
  if (v7 == *(_DWORD *)(v3 + 8))
  {
    unint64_t v12 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v7 + 1, (unint64_t)&v13);
    uint64_t v7 = *(unsigned int *)(v3 + 12);
    uint64_t v8 = *(void *)v3;
    uint64_t v9 = *v12;
    WTF::StringImpl *v12 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)v3;
    uint64_t v9 = v13;
    unint64_t v13 = 0;
  }
  *(void *)(v8 + 8 * v7) = v9;
  *(_DWORD *)(v3 + 12) = v7 + 1;
  unint64_t v10 = v13;
  unint64_t v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v6);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return 1;
}

void sub_198703FD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::String::fromUTF8(WTF::String *this, const char *a2)
{
  if (this) {
    strlen((const char *)this);
  }

  return WTF::String::fromUTF8();
}

uint64_t WebKit::NetworkProcess::NetworkProcess(uint64_t a1, const WebKit::AuxiliaryProcessInitializationParameters *a2)
{
  unint64_t v4 = WebKit::AuxiliaryProcess::AuxiliaryProcess((WebKit::AuxiliaryProcess *)a1);
  *((void *)v4 + 16) = 1;
  *(void *)unint64_t v4 = &unk_1EE9C3790;
  *((void *)v4 + 3) = &unk_1EE9C38B8;
  *((void *)v4 + 15) = &unk_1EE9C3908;
  *((void *)v4 + 19) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 143) = 0;
  WebKit::DownloadManager::DownloadManager((char *)v4 + 160);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  WebKit::NetworkContentRuleListManager::NetworkContentRuleListManager((WebKit::NetworkContentRuleListManager *)(a1 + 256), (WebKit::NetworkProcess *)a1);
  unint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v5 = &unk_1EE9C3BD8;
  v5[1] = a1;
  uint64_t v14 = v5;
  WebKit::WebSQLiteDatabaseTracker::WebSQLiteDatabaseTracker(a1 + 280, &v14);
  BOOL v6 = v14;
  uint64_t v14 = 0;
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  WebCore::MessagePortChannelRegistry::MessagePortChannelRegistry((WebCore::MessagePortChannelRegistry *)(a1 + 352));
  *(void *)(a1 + 376) = 0x4051800000000000;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 408) = 1;
  *(_DWORD *)(a1 + 409) = 0;
  *(_DWORD *)(a1 + 416) = -1;
  *(_WORD *)(a1 + 420) = 0;
  if ((_MergedGlobals_69 & 1) == 0)
  {
    unk_1EB359828 = 0u;
    unk_1EB359818 = 0u;
    unk_1EB359808 = 0u;
    qword_1EB359800[0] = (uint64_t)&unk_1EE9C3988;
    _MergedGlobals_69 = 1;
  }
  WebCore::setPlatformStrategies((WebCore *)qword_1EB359800, v7);
  WebKit::NetworkProcess::addSupplement<WebKit::AuthenticationManager>((WebKit::NetworkProcess *)a1);
  WebKit::NetworkProcess::addSupplement<WebKit::WebCookieManager>((WebKit::NetworkProcess *)a1);
  WebKit::NetworkProcess::addSupplement<WebKit::LegacyCustomProtocolManager>((WebKit::NetworkProcess *)a1);
  WebKit::NetworkProcess::addSupplement<WebKit::LaunchServicesDatabaseObserver>((WebKit::LaunchServicesDatabaseObserver *)a1);
  uint64_t v9 = (WebCore::NetworkStateNotifier *)WebKit::LegacyCustomProtocolManager::networkProcessCreated((atomic_uint *)a1, v8);
  WebCore::NetworkStateNotifier::singleton(v9);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  unint64_t v10 = *(atomic_uint **)(a1 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  unint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v11 = &unk_1EE9C3C00;
  v11[1] = v10;
  uint64_t v14 = v11;
  WebCore::NetworkStateNotifier::addListener();
  unint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  WebKit::AuxiliaryProcess::initialize((WebKit::AuxiliaryProcess *)a1, a2);
  return a1;
}

WebKit::NetworkContentRuleListManager *WebKit::NetworkContentRuleListManager::NetworkContentRuleListManager(WebKit::NetworkContentRuleListManager *this, WebKit::NetworkProcess *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  unint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v4, 1u);
  *((void *)this + 2) = v4;
  return this;
}

uint64_t WebKit::LegacyCustomProtocolManager::networkProcessCreated(atomic_uint *this, WebKit::NetworkProcess *a2)
{
  if (byte_1E93CF331 != 1) {
    goto LABEL_8;
  }
  if (qword_1E93CF338)
  {
    v6[0] = "LegacyCustomProtocolManager";
    v6[1] = 28;
    unint64_t v4 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(qword_1E93CF338 + 208), (WTF::ASCIILiteralHash *)v6);
    if (WebKit::LegacyCustomProtocolManager::networkProcessCreated(WebKit::NetworkProcess &)::$_0::operator()<WebKit::LegacyCustomProtocolManager>((uint64_t)v4))
    {
      uint64_t result = 58;
      __break(0xC471u);
      return result;
    }
    if ((byte_1E93CF331 & 1) == 0)
    {
LABEL_8:
      qword_1E93CF338 = 0;
      byte_1E93CF331 = 1;
    }
  }
  atomic_fetch_add(this + 32, 1u);
  uint64_t result = qword_1E93CF338;
  qword_1E93CF338 = (uint64_t)this;
  if (result && atomic_fetch_add((atomic_uint *volatile)(result + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(result + 128));
    unint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::WebSQLiteDatabaseTracker::WebSQLiteDatabaseTracker(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9D1838;
  *(void *)(a1 + 8) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  *(void *)a1 = &unk_1EE9D17D8;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  WebCore::SQLiteDatabaseTracker::setClient((WebCore::SQLiteDatabaseTracker *)a1, v5);
  return a1;
}

uint64_t WebKit::DownloadManager::DownloadManager(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  WebKit::DownloadMap::DownloadMap((void *)(a1 + 32));
  return a1;
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::incrementPtrCount(uint64_t this)
{
  return this;
}

WebKit::XPCEndpoint *WebKit::NetworkProcess::addSupplement<WebKit::LaunchServicesDatabaseObserver>(WebKit::LaunchServicesDatabaseObserver *a1)
{
  uint64_t v2 = (uint64_t *)((char *)a1 + 208);
  v8[0] = WebKit::LaunchServicesDatabaseObserver::supplementName(a1);
  v8[1] = v3;
  uint64_t v4 = (WebKit::LaunchServicesDatabaseObserver *)WTF::fastMalloc((WTF *)0x40);
  uint64_t v7 = WebKit::LaunchServicesDatabaseObserver::LaunchServicesDatabaseObserver(v4, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::LaunchServicesDatabaseObserver>>((uint64_t)&v6, v2, (WTF::ASCIILiteralHash *)v8, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7) {
    return (WebKit::XPCEndpoint *)(*(uint64_t (**)(WebKit::XPCEndpoint *))(*(void *)v7 + 8))(v7);
  }
  return result;
}

WebKit::XPCEndpoint *WebKit::LaunchServicesDatabaseObserver::LaunchServicesDatabaseObserver(WebKit::LaunchServicesDatabaseObserver *this, WebKit::NetworkProcess *a2)
{
  uint64_t result = WebKit::XPCEndpoint::XPCEndpoint(this);
  *(void *)uint64_t result = &unk_1EE9B6DB8;
  *((void *)result + 3) = &unk_1EE9B6E00;
  *((void *)result + 4) = 0;
  *((unsigned char *)result + 40) = 0;
  *((void *)result + 6) = 0;
  *((void *)result + 7) = 0;
  return result;
}

const char *WebKit::LaunchServicesDatabaseObserver::supplementName(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "LaunchServicesDatabaseObserverSupplement";
}

uint64_t WebKit::NetworkProcess::addSupplement<WebKit::LegacyCustomProtocolManager>(WebKit::NetworkProcess *a1)
{
  uint64_t v2 = (uint64_t *)((char *)a1 + 208);
  v7[0] = "LegacyCustomProtocolManager";
  v7[1] = 28;
  uint64_t v3 = (WebKit::LegacyCustomProtocolManager *)WTF::fastMalloc((WTF *)0x40);
  uint64_t v6 = WebKit::LegacyCustomProtocolManager::LegacyCustomProtocolManager(v3, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebCookieManager>>((uint64_t)&v5, v2, (WTF::ASCIILiteralHash *)v7, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebCookieManager>>(uint64_t a1, uint64_t *a2, WTF::ASCIILiteralHash *this, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ASCIILiteralHash::hash(this, (const WTF::ASCIILiteral *)a2) & v9;
  unint64_t v11 = (void *)(v8 + 24 * v10);
  uint64_t result = *v11;
  if (*v11)
  {
    int v22 = 0;
    int v23 = 1;
    do
    {
      if (result == -1)
      {
        int v22 = v11;
      }
      else if (*(void *)this)
      {
        int v26 = v22;
        uint64_t result = strcmp((const char *)result, *(const char **)this);
        int v22 = v26;
        if (!result)
        {
LABEL_25:
          uint64_t v24 = *a2;
          if (*a2) {
            unsigned int v25 = *(_DWORD *)(v24 - 4);
          }
          else {
            unsigned int v25 = 0;
          }
          char v21 = 0;
          uint64_t v20 = v24 + 24 * v25;
          goto LABEL_13;
        }
      }
      else if (!result)
      {
        goto LABEL_25;
      }
      unsigned int v10 = (v10 + v23) & v9;
      unint64_t v11 = (void *)(v8 + 24 * v10);
      uint64_t result = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *int v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      unint64_t v11 = v22;
    }
  }
  *(_OWORD *)unint64_t v11 = *(_OWORD *)this;
  uint64_t v13 = *a4;
  *a4 = 0;
  uint64_t result = v11[2];
  v11[2] = v13;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_12;
    }
LABEL_33:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, (WTF::ASCIILiteralHash *)v11);
    unint64_t v11 = (void *)result;
    uint64_t v16 = *a2;
    if (*a2) {
      LODWORD(v19) = *(_DWORD *)(v16 - 4);
    }
    else {
      LODWORD(v19) = 0;
    }
    goto LABEL_12;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_33;
  }
LABEL_12:
  uint64_t v20 = v16 + 24 * v19;
  char v21 = 1;
LABEL_13:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

WebKit::LegacyCustomProtocolManager *WebKit::LegacyCustomProtocolManager::LegacyCustomProtocolManager(WebKit::LegacyCustomProtocolManager *this, WebKit::NetworkProcess *a2)
{
  uint64_t v4 = (char *)this + 8;
  *(void *)this = &unk_1EE9C7550;
  *((void *)this + 1) = &unk_1EE9C7588;
  *((void *)this + 2) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v5 = *((void *)a2 + 1);
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  *((void *)this + 3) = v5;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 0;
  WebKit::AuxiliaryProcess::addMessageReceiver(*(void *)(v5 + 8), 18, (uint64_t)v4);
  return this;
}

uint64_t WebKit::NetworkProcess::addSupplement<WebKit::AuthenticationManager>(WebKit::NetworkProcess *a1)
{
  uint64_t v2 = (uint64_t *)((char *)a1 + 208);
  v7[0] = "AuthenticationManager";
  v7[1] = 22;
  uint64_t v3 = (WebKit::AuthenticationManager *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v6 = WebKit::AuthenticationManager::AuthenticationManager(v3, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::AuthenticationManager>>((uint64_t)&v5, v2, (WTF::ASCIILiteralHash *)v7, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

WebKit::AuthenticationManager *WebKit::AuthenticationManager::AuthenticationManager(WebKit::AuthenticationManager *this, WebKit::NetworkProcess *a2)
{
  uint64_t v4 = (char *)this + 8;
  *(void *)this = &unk_1EE9D32B8;
  *((void *)this + 1) = &unk_1EE9D32F0;
  *((void *)this + 2) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v5, 1u);
  *((void *)this + 3) = v5;
  *((void *)this + 4) = 0;
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)a2, 2, (uint64_t)v4);
  return this;
}

uint64_t WebKit::NetworkProcess::addSupplement<WebKit::WebCookieManager>(WebKit::NetworkProcess *a1)
{
  uint64_t v2 = (uint64_t *)((char *)a1 + 208);
  v7[0] = "WebCookieManager";
  v7[1] = 17;
  uint64_t v3 = (WebKit::WebCookieManager *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v6 = WebKit::WebCookieManager::WebCookieManager(v3, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebCookieManager>>((uint64_t)&v5, v2, (WTF::ASCIILiteralHash *)v7, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

WebKit::WebCookieManager *WebKit::WebCookieManager::WebCookieManager(WebKit::WebCookieManager *this, WebKit::NetworkProcess *a2)
{
  uint64_t v4 = (char *)this + 8;
  *(void *)this = &unk_1EE9C74E0;
  *((void *)this + 1) = &unk_1EE9C7518;
  *((void *)this + 2) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v5, 1u);
  *((void *)this + 3) = v5;
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)a2, 162, (uint64_t)v4);
  return this;
}

WebKit::XPCEndpoint *WebKit::XPCEndpoint::XPCEndpoint(WebKit::XPCEndpoint *this)
{
  *(void *)this = &unk_1EE9B6E50;
  *((void *)this + 1) = 0;
  uint64_t v2 = (xpc_connection_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  uint64_t v3 = xpc_connection_create(0, 0);
  xpc_connection_t v4 = *v2;
  xpc_connection_t *v2 = v3;
  if (v4)
  {

    uint64_t v3 = *v2;
  }
  xpc_endpoint_t v5 = xpc_endpoint_create(v3);
  uint64_t v6 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v5;
  if (v6) {

  }
  xpc_connection_set_target_queue(*v2, MEMORY[0x1E4F14428]);
  uint64_t v7 = (_xpc_connection_s *)*((void *)this + 1);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZN6WebKit11XPCEndpointC2Ev_block_invoke;
  handler[3] = &__block_descriptor_40_e33_v16__0__NSObject_OS_xpc_object__8l;
  handler[4] = this;
  xpc_connection_set_event_handler(v7, handler);
  xpc_connection_resume(*v2);
  return this;
}

void sub_198704CE8(_Unwind_Exception *exception_object)
{
  xpc_connection_t v4 = *(void **)(v1 + 16);
  if (v4) {

  }
  if (*v2) {
  _Unwind_Resume(exception_object);
  }
}

void WebKit::WebProcess::WebProcess(WebKit::WebProcess *this)
{
  *((_DWORD *)this + 4) = 0;
  *(void *)this = &unk_1EE9BEA58;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_1EE9BEB20;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = 0;
  *((void *)this + 5) = 0;
  *((_OWORD *)this + 3) = 0u;
  MEMORY[0x199731060]((char *)this + 64, "Process Suppression Disabled by UIProcess", 42);
  *(void *)this = &unk_1EE9E66C0;
  *((void *)this + 3) = &unk_1EE9E6788;
  *((void *)this + 15) = 0;
  *((_OWORD *)this + 8) = 0u;
  WebKit::EventDispatcher::EventDispatcher((WebKit::WebProcess *)((char *)this + 144));
  *((void *)this + 24) = &unk_1EE9F8850;
  *((void *)this + 25) = 0;
  WTF::WorkQueue::create();
  *((unsigned char *)this + 216) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = &unk_1EE9F12E0;
  WTF::WorkQueue::create();
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 64) = 0;
  *((unsigned char *)this + 260) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((unsigned char *)this + 280) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((unsigned char *)this + 304) = 0;
  uint64_t v2 = (WebKit::WebLoaderStrategy *)WTF::fastMalloc((WTF *)0x78);
  *((void *)this + 40) = WebKit::WebLoaderStrategy::WebLoaderStrategy(v2);
  *((void *)this + 41) = 0;
  *((_OWORD *)this + 21) = 0u;
  WebKit::RemoteVideoCodecFactory::RemoteVideoCodecFactory((WebKit::WebProcess *)((char *)this + 352), this);
  *((void *)this + 45) = 0;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v3 + 8) = 1;
  *(void *)uint64_t v3 = &unk_1EE9E69F8;
  *(void *)(v3 + 16) = 0;
  *((void *)this + 46) = v3;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9F5AA8;
  *((void *)this + 47) = v4;
  WebKit::RemoteMediaPlayerManager::create((void *)this + 48);
  xpc_endpoint_t v5 = (WebKit::RemoteImageDecoderAVFManager *)WTF::fastMalloc((WTF *)0x38);
  *((void *)this + 49) = WebKit::RemoteImageDecoderAVFManager::RemoteImageDecoderAVFManager(v5);
  uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)uint64_t v6 = &unk_1EE9F5AD8;
  *(void *)(v6 + 16) = 0;
  *((void *)this + 50) = v6;
  uint64_t v7 = (WebKit::WebCookieJar *)WTF::fastMalloc((WTF *)0x60);
  WebKit::WebCookieJar::WebCookieJar(v7);
}

WebKit::AuxiliaryProcess *WebKit::AuxiliaryProcess::AuxiliaryProcess(WebKit::AuxiliaryProcess *this)
{
  *((_DWORD *)this + 4) = 0;
  *(void *)this = &unk_1EE9BEA58;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_1EE9BEB20;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  MEMORY[0x199731060]((char *)this + 64, "Process Suppression Disabled by UIProcess", 42);
  return this;
}

void *WebKit::DownloadMap::DownloadMap(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

WebKit::RemoteImageDecoderAVFManager *WebKit::RemoteImageDecoderAVFManager::RemoteImageDecoderAVFManager(WebKit::RemoteImageDecoderAVFManager *this)
{
  *(void *)this = &unk_1EE9ED2E0;
  *((void *)this + 1) = &unk_1EE9B71B0;
  *((void *)this + 2) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *((void *)this + 3) = v2;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_1EE9EF190;
  *((void *)this + 1) = &unk_1EE9EF1D8;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return this;
}

WebKit::WebMockContentFilterManager *WebKit::WebMockContentFilterManager::startObservingSettings(WebKit::WebMockContentFilterManager *this)
{
  WebCore::MockContentFilterManager::singleton(this);
  if (this) {
    ++*((_DWORD *)this + 2);
  }
  WebCore::MockContentFilterManager::setClient();
  uint64_t result = this;
  if (this)
  {
    if (*((_DWORD *)this + 2) == 1) {
      return (WebKit::WebMockContentFilterManager *)(*(uint64_t (**)(WebKit::WebMockContentFilterManager *))(*(void *)this + 8))(this);
    }
    else {
      --*((_DWORD *)this + 2);
    }
  }
  return result;
}

double WebKit::RemoteMediaPlayerManager::create@<D0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v3 = &unk_1EE9ED2E0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = v3;
  void *v3 = &unk_1EE9ED5F8;
  v3[1] = v4;
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = 0;
  *a1 = v3;
  return result;
}

unsigned int *WebKit::WebPermissionController::create@<X0>(WebKit::WebPermissionController *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v5 + 8) = 1;
  *(void *)uint64_t v5 = &unk_1EE9F6A98;
  *(void *)(v5 + 16) = &unk_1EE9F6AE0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  char v8 = -67;
  double result = WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 6, &v8, v5 + 16, &v7);
  *a2 = v5;
  return result;
}

WebKit::RemoteVideoCodecFactory *WebKit::RemoteVideoCodecFactory::RemoteVideoCodecFactory(WebKit::RemoteVideoCodecFactory *this, WebKit::WebProcess *a2)
{
  return this;
}

uint64_t WebKit::WebPlatformStrategies::initialize(WebKit::WebPlatformStrategies *this, WebCore::PlatformStrategies *a2)
{
  {
    unk_1E93CFDF8 = 0u;
    unk_1E93CFDE8 = 0u;
    unk_1E93CFDD8 = 0u;
    WebKit::WebPlatformStrategies::initialize(void)::platformStrategies[0] = (uint64_t)&unk_1EE9F6E68;
    qword_1E93CFE08 = (uint64_t)&unk_1EE9F6FC8;
    qword_1E93CFE10 = (uint64_t)&unk_1EE9F70E0;
  }
  return WebCore::setPlatformStrategies((WebCore *)WebKit::WebPlatformStrategies::initialize(void)::platformStrategies, a2);
}

unsigned int *WebKit::AuxiliaryProcess::addMessageReceiver(uint64_t a1, char a2, uint64_t a3)
{
  char v5 = a2;
  return WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(a1 + 48), &v5, a3, &v4);
}

WebKit::WebLoaderStrategy *WebKit::WebLoaderStrategy::WebLoaderStrategy(WebKit::WebLoaderStrategy *this)
{
  *(void *)this = &unk_1EE9F1A80;
  *((void *)this + 1) = 0;
  uint64_t v2 = (WebKit::WebLoaderStrategy *)((char *)this + 16);
  uint64_t v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9F1C48;
  v4[1] = WebKit::WebLoaderStrategy::internallyFailedLoadTimerFired;
  v4[2] = 0;
  v4[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v2, v3);
  *((void *)this + 2) = &unk_1EE9B3390;
  *((void *)this + 5) = v4;
  *((unsigned char *)this + 104) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 1++*(_DWORD *)(this + 12) = 1;
  return this;
}

WebKit::EventDispatcher *WebKit::EventDispatcher::EventDispatcher(WebKit::EventDispatcher *this)
{
  *(void *)this = &unk_1EE9F7F20;
  *((void *)this + 1) = 0;
  uint64_t v2 = (WebCore::WheelEventDeltaFilter *)WTF::WorkQueue::create();
  WebCore::WheelEventDeltaFilter::create(v2);
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void WebKit::WebCookieJar::WebCookieJar(WebKit::WebCookieJar *this)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(void *)uint64_t v2 = &unk_1EE9F83A8;
  uint64_t v3 = (unsigned int *)v2;
  WebCore::CookieJar::CookieJar();
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  *(void *)this = &unk_1EE9F8250;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = &unk_1EE9F8368;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  operator new();
}

uint64_t *WebKit::GPUProcess::singleton(WebKit::GPUProcess *this)
{
  if ((_MergedGlobals_59 & 1) == 0)
  {
    WebKit::GPUProcess::GPUProcess(this);
    _MergedGlobals_59 = 1;
  }
  return &qword_1EB359048;
}

void WebKit::GPUProcess::GPUProcess(WebKit::GPUProcess *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = WebKit::AuxiliaryProcess::AuxiliaryProcess((WebKit::AuxiliaryProcess *)&qword_1EB359048);
  dword_1EB3590C0 = 1;
  qword_1EB359048 = (uint64_t)&unk_1EE9BEC08;
  qword_1EB359060 = (uint64_t)&unk_1EE9BECD0;
  qword_1EB3590C8 = 0;
  WTF::MonotonicTime::now(v1);
  qword_1EB3590D0 = v2;
  qword_1EB3590D8 = 0;
  unk_1EB3590E0 = 0;
  unk_1EB3590E7 = 0;
  qword_1EB3590F0 = 0;
  unk_1EB3590F8 = 0;
  dword_1EB359100 = 0;
  qword_1EB359108 = 0;
  unk_1EB359110 = 0;
  WebCore::Timer::Timer<WebKit::GPUProcess,WebKit::GPUProcess>();
  qword_1EB359150 = 0;
  unk_1EB359158 = 0;
  *(_DWORD *)((char *)&qword_1EB359160 + 7) = 0;
  qword_1EB359160 = 0;
  uint64_t v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    char v5 = &qword_1EB359048;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::GPUProcess:", (uint8_t *)&v4, 0xCu);
  }
}

void *WebCore::Timer::Timer<WebKit::GPUProcess,WebKit::GPUProcess>()
{
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)qword_1EB359118);
  qword_1EB359118[0] = (uint64_t)&unk_1EE9BA5F0;
  double result = (void *)WTF::fastMalloc((WTF *)0x20);
  void *result = &unk_1EE9BEEC8;
  result[1] = WebKit::GPUProcess::tryExitIfUnused;
  result[2] = 0;
  result[3] = &qword_1EB359048;
  qword_1EB359148 = (uint64_t)result;
  return result;
}

uint64_t WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::LaunchServicesDatabaseObserver>>(uint64_t a1, uint64_t *a2, WTF::ASCIILiteralHash *this, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ASCIILiteralHash::hash(this, (const WTF::ASCIILiteral *)a2) & v9;
  unint64_t v11 = (void *)(v8 + 24 * v10);
  uint64_t result = *v11;
  if (*v11)
  {
    uint64_t v28 = a1;
    int v23 = 0;
    uint64_t v24 = *(const char **)this;
    int v25 = 1;
    do
    {
      if (result == -1)
      {
        int v23 = v11;
      }
      else if (v24)
      {
        uint64_t result = strcmp((const char *)result, v24);
        if (!result)
        {
LABEL_30:
          uint64_t v26 = *a2;
          if (*a2) {
            unsigned int v27 = *(_DWORD *)(v26 - 4);
          }
          else {
            unsigned int v27 = 0;
          }
          a1 = v28;
          char v22 = 0;
          uint64_t v21 = v26 + 24 * v27;
          goto LABEL_16;
        }
      }
      else if (!result)
      {
        goto LABEL_30;
      }
      unsigned int v10 = (v10 + v25) & v9;
      unint64_t v11 = (void *)(v8 + 24 * v10);
      uint64_t result = *v11;
      ++v25;
    }
    while (*v11);
    a1 = v28;
    if (v23)
    {
      void *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      unint64_t v11 = v23;
    }
  }
  *(_OWORD *)unint64_t v11 = *(_OWORD *)this;
  uint64_t v13 = *a4;
  *a4 = 0;
  if (v13) {
    uint64_t v14 = v13 + 24;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t result = v11[2];
  v11[2] = v14;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - ++*(_DWORD *)(this + 12) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_15;
    }
LABEL_36:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, (WTF::ASCIILiteralHash *)v11);
    unint64_t v11 = (void *)result;
    uint64_t v17 = *a2;
    if (*a2) {
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    }
    else {
      LODWORD(v20) = 0;
    }
    goto LABEL_15;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_36;
  }
LABEL_15:
  uint64_t v21 = v17 + 24 * v20;
  char v22 = 1;
LABEL_16:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v22;
  return result;
}

void WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 128), *(void *)(*(void *)a2 + v4));
      if (!v6) {
        break;
      }
      uint64_t v7 = (unsigned int *)v6;
      atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
      char v11 = 1;
      if (v5 >= *(unsigned int *)(a2 + 12)) {
        goto LABEL_21;
      }
      WebKit::RemoteImageBufferSet::ensureBufferForDisplay(v6, (unsigned char *)(*(void *)a2 + v4), &v11);
      if (v11)
      {
        if (v11 != 2)
        {
          if (v5 >= *(unsigned int *)(a2 + 12))
          {
LABEL_21:
            __break(0xC471u);
            JUMPOUT(0x198706C84);
          }
          WebKit::RemoteImageBufferSet::prepareBufferForDisplay((WebKit::RemoteImageBufferSet *)v7, (const WebCore::Region *)(*(void *)a2 + v4 + 8), *(unsigned __int8 *)(*(void *)a2 + v4 + 34));
        }
        char v8 = 1;
      }
      else
      {
        unsigned int v10 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v13 = "void WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplay(Vector<ImageBufferSetPrepareBuffer"
                "ForDisplayInputData>)";
          _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 451: Invalid message dispatched %{public}s: Can't asynchronously require full display for a buffer set", buf, 0xCu);
        }
        char v8 = 0;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
      }
      if (v8)
      {
        ++v5;
        v4 += 40;
        if (v5 < *(unsigned int *)(a2 + 12)) {
          continue;
        }
      }
      return;
    }
    int v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "void WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplay(Vector<ImageBufferSetPrepareBufferForD"
            "isplayInputData>)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 448: Invalid message dispatched %{public}s: BufferSet is being updated before being created", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
  }
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
LABEL_9:
    unsigned int v10 = 0;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v10);
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(void *)(a1 + 16 * v6);
  if (v7 != a2)
  {
    int v9 = 1;
    while (v7)
    {
      uint64_t v6 = (v6 + v9) & v2;
      uint64_t v7 = *(void *)(a1 + 16 * v6);
      ++v9;
      if (v7 == a2) {
        return *(void *)(a1 + 16 * v6 + 8);
      }
    }
    goto LABEL_9;
  }
  return *(void *)(a1 + 16 * v6 + 8);
}

WTF *WebKit::RemoteImageBufferSet::prepareBufferForDisplay(WebKit::RemoteImageBufferSet *this, const WebCore::Region *a2, int a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)*((void *)this + 5);
  if (result)
  {
    uint64_t v7 = *((void *)this + 9);
    v43[0] = 0;
    v43[1] = v7;
    uint64_t v8 = (*(uint64_t (**)(WTF *))(*(void *)result + 16))(result);
    (*(void (**)(void))(*(void *)v8 + 440))();
    FloatRect v42 = (FloatRect)0;
    uint64_t v10 = *((void *)this + 8);
    if (v10 && *((void *)this + 5) != v10)
    {
      if (*((unsigned char *)this + 116))
      {
        IntRect v38 = *(IntRect *)((char *)this + 100);
      }
      else
      {
        v38.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v43, v9);
        v38.m_size = v11;
      }
      WebCore::Region::Region((WebCore::Region *)v36, &v38);
      char v12 = WebCore::Region::contains(a2, (const WebCore::Region *)v36);
      WebCore::Region::~Region((WebCore::Region *)v36);
      if ((v12 & 1) == 0)
      {
        WebCore::Region::Region((WebCore::Region *)v36, &v38);
        WebCore::Region::subtract();
        FloatRect v40 = *(FloatRect *)v36;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v41, (const WebCore::IntRect *)&v40);
        FloatRect v44 = v41;
        WebCore::FloatRect::intersect((WebCore::FloatRect *)&v44, (const WebCore::FloatRect *)v43);
        FloatRect v42 = v44;
        if (v44.m_size.m_width > 0.0 && v44.m_size.m_height > 0.0)
        {
          uint64_t v30 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
          (*(void (**)(void))(v30 + 384))();
        }
        WebCore::Region::~Region((WebCore::Region *)v36);
      }
    }
    WebCore::Region::rects((uint64_t *)&v38.m_location, a2);
    FloatRect v41 = *(FloatRect *)a2;
    if (v38.m_size.m_height > 5u
      || (unint64_t v13 = WebCore::Region::totalArea(a2),
          (float)((float)((float)SLODWORD(v41.m_size.m_width) * 0.75) * (float)SLODWORD(v41.m_size.m_height)) < (float)v13))
    {
      WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v38, 0);
      if (v38.m_size.m_height == v38.m_size.m_width) {
        WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect&>((uint64_t)&v38, (unint64_t)&v41);
      }
      else {
        *(FloatRect *)(*(void *)&v38.m_location + 16 * v38.m_size.m_height++) = v41;
      }
    }
    v36[0] = (WTF *)v37;
    v36[1] = (WTF *)5;
    if (v38.m_size.m_height)
    {
      m_location = (const WebCore::IntRect *)v38.m_location;
      uint64_t v15 = 16 * v38.m_size.m_height;
      do
      {
        int v16 = (WebCore::FloatRect *)WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v44, m_location);
        WebCore::FloatRect::scale(v16, *((float *)this + 21), *((float *)this + 21));
        v35[0] = WebCore::enclosingIntRect((WebCore *)&v44, v17);
        v35[1] = v18;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v40, (const WebCore::IntRect *)v35);
        FloatRect v44 = v40;
        WebCore::FloatRect::scale((WebCore::FloatRect *)&v44, 1.0 / *((float *)this + 21), 1.0 / *((float *)this + 21));
        if (HIDWORD(v36[1]) == LODWORD(v36[1]))
        {
          WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>((uint64_t)v36, (unint64_t)&v44);
        }
        else
        {
          *((FloatRect *)v36[0] + HIDWORD(v36[1])) = v44;
          ++HIDWORD(v36[1]);
        }
        if (WebCore::FloatRect::intersects((WebCore::FloatRect *)&v42, (const WebCore::FloatRect *)&v44)) {
          *((unsigned char *)this + 97) = 0;
        }
        m_location = (const WebCore::IntRect *)((char *)m_location + 16);
        v15 -= 16;
      }
      while (v15);
      if (HIDWORD(v36[1]) == 1)
      {
        (*(void (**)(uint64_t, WTF *))(*(void *)v8 + 448))(v8, v36[0]);
LABEL_20:
        if (a3 && !*((unsigned char *)this + 97)) {
          (*(void (**)(uint64_t, void *))(*(void *)v8 + 280))(v8, v43);
        }
        int v20 = *((unsigned __int8 *)this + 116);
        *(_OWORD *)((char *)this + 100) = *(_OWORD *)a2;
        if (!v20) {
          *((unsigned char *)this + 116) = 1;
        }
        uint64_t v21 = *((void *)this + 8);
        *((void *)this + 8) = 0;
        if (v21)
        {
          char v22 = 0;
          uint64_t v23 = *(void *)(v21 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
          if (v22) {
            MEMORY[0x19972E8D0](v23);
          }
          uint64_t v24 = *(void *)(v23 + 8);
          int v25 = 1;
          uint64_t v26 = v24 - 1;
          *(void *)(v23 + 8) = v24 - 1;
          if (v24 == 1)
          {
            uint64_t v31 = *(void *)(v23 + 16);
            uint64_t v27 = *(void *)(v23 + 24);
            *(void *)(v23 + 24) = 0;
            BOOL v28 = v31 != 0;
          }
          else
          {
            uint64_t v27 = 0;
            BOOL v28 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v23);
          }
          if (!v26)
          {
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            if (!v28) {
              WTF::fastFree((WTF *)v23, v19);
            }
          }
        }
        *((unsigned char *)this + 97) = 0;
        id v29 = v36[0];
        if (v37 != (unsigned char *)v36[0] && v36[0])
        {
          v36[0] = 0;
          LODWORD(v36[1]) = 0;
          WTF::fastFree(v29, v19);
        }
        uint64_t result = (WTF *)v38.m_location;
        if (&v39 != (uint64_t *)v38.m_location)
        {
          if (v38.m_location)
          {
            v38.m_location = 0;
            v38.m_size.m_width = 0;
            return (WTF *)WTF::fastFree(result, v19);
          }
        }
        return result;
      }
      int v45 = 0;
      if (HIDWORD(v36[1]))
      {
        uint64_t v32 = (FloatRect *)v36[0];
        uint64_t v33 = 16 * HIDWORD(v36[1]);
        do
        {
          FloatRect v34 = *v32++;
          FloatRect v40 = v34;
          WebCore::Path::addRect((WebCore::Path *)&v44, &v40);
          v33 -= 16;
        }
        while (v33);
      }
    }
    else
    {
      int v45 = 0;
    }
    (*(void (**)(uint64_t, FloatRect *, uint64_t))(*(void *)v8 + 488))(v8, &v44, 1);
    if (v45 != -1) {
      ((void (*)(FloatRect *, FloatSize *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v45])(&v40, &v44.m_size);
    }
    goto LABEL_20;
  }
  if (*((unsigned char *)this + 116)) {
    *((unsigned char *)this + 116) = 0;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, void *a2)
{
  if (result[2] > (unint64_t)a2)
  {
    uint64_t v2 = (uint64_t)result;
    unint64_t v3 = result[3];
    if (v3 > (unint64_t)a2)
    {
      result[3] = a2;
      LODWORD(v3) = a2;
    }
    uint64_t result = *(unsigned int **)result;
    unint64_t v4 = *(unsigned int **)v2;
    if (a2)
    {
      uint64_t v8 = *(unsigned int **)v2;
      WTF::VectorBuffer<WebCore::IntRect,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v2, (unint64_t)a2);
      unint64_t v4 = *(unsigned int **)v2;
      if (v3 && v4 != v8)
      {
        uint64_t v5 = 16 * v3;
        uint64_t v6 = v8;
        do
        {
          long long v7 = *(_OWORD *)v6;
          v6 += 4;
          *(_OWORD *)unint64_t v4 = v7;
          v4 += 4;
          v5 -= 16;
        }
        while (v5);
        unint64_t v4 = *(unsigned int **)v2;
      }
      uint64_t result = v8;
    }
    if ((unsigned int *)(v2 + 16) != result && result)
    {
      if (v4 == result)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      unint64_t v4 = *(unsigned int **)v2;
    }
    if (!v4)
    {
      *(void *)uint64_t v2 = v2 + 16;
      *(_DWORD *)(v2 + 8) = 1;
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>(void ***a1)
{
  uint64_t v1 = (void *)***a1;
  uint64_t result = (*(uint64_t (**)(void *))(*v1 + 32))(v1);
  v1[4] = result;
  return result;
}

void WebKit::WebPlatformStrategies::createMediaStrategy(WebKit::WebPlatformStrategies *this)
{
}

void sub_198707534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

WTF **WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)unint64_t v4 = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 1) = v5;
  uint64_t v19 = v4;
  int v16 = (uint64_t *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  ++*(_DWORD *)v4;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9E6280;
  v6[1] = a1;
  void v6[2] = a1;
  v6[3] = v4;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = v6;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v18);
  uint64_t v8 = v17;
  uint64_t v17 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v16);
  if (HIDWORD(v17))
  {
    uint64_t v10 = v16;
    uint64_t v11 = 8 * HIDWORD(v17);
    do
    {
      uint64_t v12 = *v10;
      CFRetain(*(CFTypeRef *)(*v10 + 8));
      atomic_fetch_add((atomic_uint *volatile)v7, 1u);
      unint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v13 = &unk_1EE9E62D0;
      v13[1] = v7;
      uint64_t v15 = v13;
      WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(v12, (uint64_t *)&v15);
      if (v15) {
        (*(void (**)(void *))(*v15 + 8))(v15);
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v9);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v7);
  return WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v19);
}

WTF **WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(WTF **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      uint64_t v3 = *((void *)v2 + 1);
      *((void *)v2 + 1) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, (void *)v2 + 2);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 16, v4);
      uint64_t v6 = *((void *)v2 + 1);
      *((void *)v2 + 1) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      WTF::fastFree(v2, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

unsigned int *WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(unsigned int *)(a1 + 84);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 72);
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = (atomic_uint *)(*v7 + 16);
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(void *)(v9 + 552);
      if (v11 && *(_DWORD *)(v11 - 12) && (!*(unsigned char *)(v9 + 389) || *(void *)(v9 + 224)))
      {
        atomic_fetch_add((atomic_uint *volatile)v4, 1u);
        uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v12 = 2668;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 66) = (char *)v12 + 16;
        *((void *)v12 + 67) = 512;
        *((void *)v12 + 68) = 0;
        *((void *)v12 + 70) = 0;
        *((void *)v12 + 69) = 0;
        IPC::Encoder::encodeHeader(v12);
        uint64_t v23 = v12;
        unint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
        *unint64_t v13 = &unk_1EE9DD2C8;
        v13[1] = v4;
        uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v21[0] = v13;
        v21[1] = v14;
        char v22 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)v21, 1);
        if (v22)
        {
          uint64_t v16 = v21[0];
          v21[0] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        uint64_t v17 = v23;
        uint64_t v23 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v15);
          WTF::fastFree(v18, v19);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v4);
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t v1 = (WTF *)WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>::~CallbackAggregatorOnThread((uint64_t)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>::~CallbackAggregatorOnThread(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8))
  {
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    uint64_t *v2 = 0;
  }
  return a1;
}

void sub_198707A74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(void)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198707B34(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessUserAgentStringQuirkController::initialize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(*(void *)(a1 + 8) + 16);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9BDC28;
  uint64_t v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198707C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessPromptQuirkController::initialize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(*(void *)(a1 + 8) + 24);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9BDB60;
  uint64_t v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198707CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E62D0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E6280;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree((WTF *)a1, v2);
}

{
  uint64_t v2;

  *(void *)a1 = &unk_1EE9E6280;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DA388;
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 20);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(result + 8);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2;
      *v2++ = 0;
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16SetActivityStateEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore13ActivityStateEEEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3494;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessUserAgentStringQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>((void **)a1, &v9);
  if (v10)
  {
    uint64_t v5 = v9;
    uint64_t v6 = 8 * v10;
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

void sub_198708024(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit43StorageAccessUserAgentStringQuirkController10initializeEvENK3__0clEvEUlRT_E_vJRNS2_41StorageAccessUserAgentStringQuirkObserverEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_9,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      {
        qword_1EB35A578 = 0;
        WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
        unk_1EB35A568 = 0u;
      }
      uint64_t v3 = *(unsigned int *)(v2 + 68);
      if (v3)
      {
        uint64_t v4 = *(uint64_t **)(v2 + 56);
        uint64_t v5 = &v4[v3];
        do
        {
          uint64_t v6 = *v4;
          uint64_t v7 = *(void *)(*v4 + 136);
          if (v7 && *(unsigned char *)(v7 + 104) || *(void *)(v6 + 144))
          {
            uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v8 = 2701;
            *((void *)v8 + 1) = 0;
            *((void *)v8 + 66) = (char *)v8 + 16;
            *((void *)v8 + 67) = 512;
            *((void *)v8 + 68) = 0;
            *((void *)v8 + 70) = 0;
            *((void *)v8 + 69) = 0;
            IPC::Encoder::encodeHeader(v8);
            uint64_t v26 = v8;
            if (*((void *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1)) {
              int v9 = *(_DWORD *)(*((void *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance
            }
                               + 1)
                             - 12);
            else {
              int v9 = 0;
            }
            unsigned int v10 = (_DWORD *)IPC::Encoder::grow(v8, 4uLL, 4);
            if (v11 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198708288);
            }
            _DWORD *v10 = v9;
            uint64_t v13 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1, v11, v12);
            uint64_t v14 = (uint64_t *)v13;
            v24[0] = v13;
            v24[1] = v15;
            if (*((void *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1)) {
              uint64_t v16 = *((void *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1)
            }
                  + 16
                  * *(unsigned int *)(*((void *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance
                                      + 1)
                                    - 4);
            else {
              uint64_t v16 = 0;
            }
            if (v16 != v13)
            {
              do
              {
                IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v14);
                IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v14 + 1);
                v24[0] += 16;
                WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v24, v17, v18);
                uint64_t v14 = (uint64_t *)v24[0];
              }
              while (v24[0] != v16);
            }
            LOBYTE(v24[0]) = 0;
            char v25 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v26, 0, (uint64_t)v24, 1);
            if (v25)
            {
              uint64_t v20 = v24[0];
              v24[0] = 0;
              if (v20) {
                (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
              }
            }
            uint64_t v21 = v26;
            uint64_t v26 = 0;
            if (v21)
            {
              IPC::Encoder::~Encoder(v21, v19);
              WTF::fastFree(v22, v23);
            }
          }
          ++v4;
        }
        while (v4 != v5);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(WTF ***)result;
  if (*(void *)result != *(void *)(result + 8))
  {
    uint64_t v4 = (void *)result;
    do
    {
      uint64_t result = WTF::equal(*v3, 0, a3);
      if ((result & 1) == 0 && *v3 != (WTF *)-1) {
        break;
      }
      uint64_t v5 = (WTF **)v4[1];
      uint64_t v3 = (WTF **)(*v4 + 16);
      void *v4 = v3;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v3 - 12)) {
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, v3, a3);
  }
  return v3 + 16 * *(unsigned int *)(v3 - 4);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  v6[0] = a2;
  v6[1] = v3 + 16 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

char *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessUserAgentStringQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)a2, a1);
}

void sub_1987083B0(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>((void **)a1, &v9);
  if (v10)
  {
    uint64_t v5 = v9;
    uint64_t v6 = 8 * v10;
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

void sub_198708488(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit34StorageAccessPromptQuirkController10initializeEvENK3__0clEvEUlRT_E_vJRNS2_32StorageAccessPromptQuirkObserverEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_10,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      BOOL v28 = 0;
      {
        if (dword_1EB35A534)
        {
          uint64_t v5 = qword_1EB35A528;
          uint64_t v6 = qword_1EB35A528 + 32 * dword_1EB35A534;
          do
          {
            uint64_t v7 = *(unsigned int *)(v5 + 28);
            if (v7)
            {
              uint64_t v8 = *(WTF::StringImpl ***)(v5 + 16);
              uint64_t v9 = 40 * v7;
              do
              {
                WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(v8, v27);
                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v28, v27, (uint64_t)v29);
                unsigned int v10 = v27[0];
                v27[0] = 0;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2) {
                    WTF::StringImpl::destroy(v10, v3);
                  }
                  else {
                    *(_DWORD *)v10 -= 2;
                  }
                }
                v8 += 5;
                v9 -= 40;
              }
              while (v9);
            }
            else
            {
              uint64_t v11 = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v5 + 8), (uint64_t)v3, v4);
              uint64_t v12 = (WTF::StringImpl **)v11;
              uint64_t v13 = *(void *)(v5 + 8);
              if (v13) {
                uint64_t v14 = (WTF::StringImpl *)(v13 + 24 * *(unsigned int *)(v13 - 4));
              }
              else {
                uint64_t v14 = 0;
              }
              v27[0] = v11;
              for (v27[1] = v3; v27[0] != v14; uint64_t v12 = (WTF::StringImpl **)v27[0])
              {
                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v28, v12, (uint64_t)v29);
                v27[0] = (WTF::StringImpl *)((char *)v27[0] + 24);
                WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v27, v15, v16);
              }
            }
            v5 += 32;
          }
          while (v5 != v6);
        }
      }
      else
      {
        unk_1EB35A530 = 0u;
        unk_1EB35A540 = 0u;
        WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
      }
      uint64_t v17 = *(unsigned int *)(v2 + 68);
      if (v17)
      {
        uint64_t v18 = *(uint64_t **)(v2 + 56);
        uint64_t v19 = 8 * v17;
        do
        {
          uint64_t v20 = *v18;
          uint64_t v21 = *(void *)(*v18 + 136);
          if (v21 && *(unsigned char *)(v21 + 104) || *(void *)(v20 + 144))
          {
            char v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)char v22 = 2700;
            *((void *)v22 + 1) = 0;
            *((void *)v22 + 66) = (char *)v22 + 16;
            *((void *)v22 + 67) = 512;
            *((void *)v22 + 68) = 0;
            *((void *)v22 + 70) = 0;
            *((void *)v22 + 69) = 0;
            IPC::Encoder::encodeHeader(v22);
            v27[0] = v22;
            IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v22, (uint64_t *)&v28);
            LOBYTE(v29[0]) = 0;
            char v30 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v20, v27, 0, (uint64_t)v29, 1);
            if (v30)
            {
              uint64_t v23 = v29[0];
              v29[0] = 0;
              if (v23) {
                (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
              }
            }
            uint64_t v24 = v27[0];
            v27[0] = 0;
            if (v24)
            {
              IPC::Encoder::~Encoder(v24, v3);
              WTF::fastFree(v25, v26);
            }
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      if (v28) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v3);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

WTF::StringImpl **WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4 = *this;
  if (*this && (int v5 = *((_DWORD *)v4 + 1), *(_DWORD *)v4 += 2, v5))
  {
    *a2 = v4;
  }
  else
  {
    this = (WTF::StringImpl **)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *a2 = v7;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return (WTF::StringImpl **)WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return this;
}

void sub_1987087C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)a2, a1);
}

void sub_198708828(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *API::HTTPCookieStore::registerObserver(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 32;
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 32));
  uint64_t result = WTF::WeakHashSet<API::HTTPCookieStoreObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<API::HTTPCookieStoreObserver>(v4, a2, (uint64_t)v9);
  if (isEmptyIgnoringNullReferences)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7)
    {
      uint64_t result = *(unsigned int **)(v7 + 8);
      if (result)
      {
        uint64_t v8 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)result);
        v9[0] = (uint64_t *)(a1 + 16);
        return (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StartObservingCookieChanges>(v8, v9, 0, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StartObservingCookieChanges>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1589;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WebKit::WebsiteDataStore **)(a1 + 8);
  uint64_t v3 = WebKit::WebsiteDataStore::networkProcess(v2);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  uint64_t v4 = *((void *)v2 + 3);
  int v5 = *(_DWORD **)(a1 + 24);
  ++*v5;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9E62A8;
  v6[1] = v5;
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  WebKit::NetworkProcessProxy::getResourceLoadStatisticsDataSummary(v3, v4, (uint64_t *)&v10);
  uint64_t v7 = (uint64_t)v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v9);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
}

uint64_t WebKit::NetworkProcessProxy::getResourceLoadStatisticsDataSummary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    v7[0] = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v5 + 16))(v5, v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 408;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4888;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  char v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebProcessPool::createWebPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, API::PageConfiguration **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  if (!*((void *)*a3 + 16))
  {
    uint64_t v8 = *(void *)(a1 + 184);
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v9 = *((void *)v7 + 16);
    *((void *)v7 + 16) = v8;
    if (v9) {
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
  }
  BOOL v11 = API::PageConfiguration::lockdownModeEnabled(*a3);
  uint64_t v12 = *a3;
  uint64_t v13 = *((void *)*a3 + 17);
  if (v13 && (uint64_t v14 = *(void *)(v13 + 8)) != 0)
  {
    uint64_t v15 = v14 - 16;
    CFRetain(*(CFTypeRef *)(v14 - 8));
    char v16 = 0;
    uint64_t v12 = *a3;
  }
  else
  {
    uint64_t v15 = 0;
    char v16 = 1;
  }
  char v67 = v16;
  if (*((unsigned char *)v12 + 184))
  {
    int v17 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)v12 + 5);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v17 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v18))
    {
      if (!*((unsigned char *)v12 + 184))
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      uint64_t v19 = *((void *)v12 + 18);
      if (!v19) {
        goto LABEL_16;
      }
      uint64_t v20 = (atomic_uint *)(v19 + 16);
LABEL_15:
      atomic_fetch_add(v20, 1u);
LABEL_16:
      uint64_t v21 = a4;
      goto LABEL_33;
    }
  }
  if ((v16 & 1) == 0
    && !*(unsigned char *)(v15 + 801)
    && WebKit::WebPageProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebPageProxy *)v15, (WebKit::WebPreferences **)*a3, v10))
  {
    uint64_t v19 = WebKit::WebPageProxy::ensureRunningProcess((WebKit::WebPageProxy *)v15);
    uint64_t v20 = (atomic_uint *)(v19 + 16);
    goto LABEL_15;
  }
  BOOL Load = API::PageConfiguration::delaysWebProcessLaunchUntilFirstLoad((WebKit::WebPreferences **)*a3);
  uint64_t v23 = qword_1EB358960;
  BOOL v24 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
  if (Load)
  {
    if (v24)
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = a1;
      _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::createWebPage: delaying WebProcess launch until first load", (uint8_t *)buf, 0xCu);
    }
    char v25 = API::PageConfiguration::websiteDataStore(*a3);
    uint64_t v26 = WebKit::WebProcessPool::dummyProcessProxy(a1, *((void *)v25 + 3));
    if (!v26)
    {
      uint64_t v64 = API::PageConfiguration::websiteDataStore(*a3);
      CFRetain(*((CFTypeRef *)v64 + 1));
      uint64_t v65 = WTF::fastMalloc((WTF *)0x4B8);
      WebKit::WebProcessProxy::WebProcessProxy(v65, a1, (uint64_t)v64, 0);
    }
    atomic_fetch_add((atomic_uint *volatile)(v26 + 16), 1u);
    uint64_t v21 = a4;
    uint64_t v19 = v26;
  }
  else
  {
    if (v24)
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = a1;
      _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::createWebPage: Not delaying WebProcess launch", (uint8_t *)buf, 0xCu);
    }
    uint64_t v27 = API::PageConfiguration::websiteDataStore(*a3);
    CFRetain(*((CFTypeRef *)v27 + 1));
    uint64_t v69 = 0;
    WebKit::WebProcessPool::processForRegistrableDomain(a1, (uint64_t)v27, &v69, v11, (WebKit::WebPreferences **)*a3, (IPC::Encoder **)buf);
    uint64_t v19 = *(void *)&buf[0];
    uint64_t v21 = a4;
    id v29 = v69;
    uint64_t v69 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v28);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    CFRelease(*((CFTypeRef *)v27 + 1));
  }
LABEL_33:
  char v30 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get((WebKit::WebUserContentControllerProxy **)*a3 + 4);
  CFRetain(*((CFTypeRef *)v30 + 1));
  *(unsigned char *)(v19 + 1024) = *((unsigned char *)*a3 + 240);
  uint64_t v31 = (WebKit::WebPageProxy *)API::Object::newObject(0x5F8uLL, 86);
  *uint64_t v21 = WebKit::WebPageProxy::WebPageProxy((uint64_t)v31, a2, v19, (uint64_t *)a3);
  WebKit::WebProcessProxy::addExistingWebPage(v19, v31, 1);
  if (!*(unsigned char *)(a1 + 152))
  {
    std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(a1 + 104, (uint64_t *)(*((void *)v31 + 34) + 40));
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      unk_1EB35A750 = 0;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, buf);
    uint64_t v66 = v15;
    if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
    {
      uint64_t v32 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
      uint64_t v33 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v32;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v32 = 0;
    }
    uint64_t v69 = (WTF::ASCIICaseInsensitiveHash *)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
    uint64_t v70 = v33;
    uint64_t v71 = v33;
    uint64_t v72 = v33;
    uint64_t v73 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v32;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v69);
    for (uint64_t i = *((void *)&buf[0] + 1); *((void *)&buf[0] + 1) != v70; uint64_t i = *((void *)&buf[0] + 1))
    {
      uint64_t v35 = *(void *)(*(void *)i + 8);
      atomic_fetch_add((atomic_uint *volatile)(v35 + 16), 1u);
      if (!*(unsigned char *)(a1 + 152)) {
        goto LABEL_77;
      }
      if (*(unsigned char *)(v35 + 872))
      {
        unsigned int v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unsigned int v36 = 2763;
        *((void *)v36 + 1) = 0;
        *((void *)v36 + 66) = (char *)v36 + 16;
        *((void *)v36 + 67) = 512;
        *((void *)v36 + 68) = 0;
        *((void *)v36 + 70) = 0;
        *((void *)v36 + 69) = 0;
        IPC::Encoder::encodeHeader(v36);
        uint64_t v76 = v36;
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v36, (uint64_t *)(a1 + 104));
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v36, (uint64_t *)(a1 + 128));
        LOBYTE(v74[0]) = 0;
        char v75 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v35, &v76, 0, (uint64_t)v74, 1);
        if (v75)
        {
          uint64_t v38 = v74[0];
          v74[0] = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
        }
        uint64_t v39 = v76;
        uint64_t v76 = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v44, v45);
        }
      }
      if (*(unsigned char *)(v35 + 952))
      {
        FloatRect v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)FloatRect v40 = 2830;
        *((void *)v40 + 1) = 0;
        *((void *)v40 + 66) = (char *)v40 + 16;
        *((void *)v40 + 67) = 512;
        *((void *)v40 + 68) = 0;
        *((void *)v40 + 70) = 0;
        *((void *)v40 + 69) = 0;
        IPC::Encoder::encodeHeader(v40);
        uint64_t v76 = v40;
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v40, (uint64_t *)(a1 + 104));
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v40, (uint64_t *)(a1 + 128));
        LOBYTE(v74[0]) = 0;
        char v75 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v35, &v76, 0, (uint64_t)v74, 1);
        if (v75)
        {
          uint64_t v42 = v74[0];
          v74[0] = 0;
          if (v42) {
            (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
          }
        }
        uint64_t v43 = v76;
        uint64_t v76 = 0;
        if (v43)
        {
          IPC::Encoder::~Encoder(v43, v41);
          WTF::fastFree(v46, v47);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v35 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    uint64_t v15 = v66;
    uint64_t v21 = a4;
  }
  CFRetain(*((CFTypeRef *)v30 + 1));
  uint64_t v49 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v30;
  uint64_t v50 = v30;
  if (v49) {
    CFRelease(*(CFTypeRef *)(v49 + 8));
  }
  uint64_t v51 = *v21;
  uint64_t v52 = *(void *)(*v21 + 272);
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebCore::IOSApplication *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v52 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, v48);
  char v54 = (char)BoolValueForKey;
  if (WebCore::IOSApplication::isFirefox(BoolValueForKey)) {
    v54 &= WTF::linkedOnOrAfterSDKWithBehavior();
  }
  uint64_t v55 = *(void *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(v55 + 8));
  uint64_t v57 = 84;
  if (!*(unsigned char *)(v55 + 85)) {
    uint64_t v57 = 86;
  }
  BOOL v58 = *(unsigned char *)(v55 + v57) != 0;
  *(unsigned char *)(v55 + 86) = v54;
  if (v58 != (*(unsigned char *)(v55 + v57) != 0))
  {
    uint64_t v59 = *(WebKit::WebProcessCache **)(a1 + 768);
    ++*(_DWORD *)v59;
    WebKit::WebProcessCache::updateCapacity(v59, *(WebKit::WebProcessPool **)(a1 + 48));
    if (!*(_DWORD *)v59)
    {
LABEL_78:
      __break(0xC471u);
      JUMPOUT(0x1987093A0);
    }
    --*(_DWORD *)v59;
  }
  uint64_t v60 = *(void *)(v51 + 272);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v60 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v56))WebKit::WebProcessPool::ensureGPUProcess((WebKit::WebProcessPool *)a1);
  {
    if (WebKit::singleton(void)::singleton)
    {
      uint64_t v61 = *(void *)(WebKit::singleton(void)::singleton + 8);
      if (v61)
      {
        uint64_t v62 = (unsigned int *)(v61 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v61 + 16), 1u);
        WebKit::GPUProcessProxy::updatePreferences(v61, (WebKit::WebProcessProxy *)v19);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v62);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  CFRelease(*(CFTypeRef *)(v55 + 8));
  CFRelease(*((CFTypeRef *)v50 + 1));
  if ((v67 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v19 + 16));
}

void WebKit::WebProcessCache::updateCapacity(WebKit::WebProcessCache *this, WebKit::WebProcessPool *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 84;
  if (!*((unsigned char *)a2 + 85)) {
    uint64_t v3 = 86;
  }
  if (!*((unsigned char *)a2 + v3))
  {
    uint64_t v5 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 134218240;
      int v17 = this;
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because process swap on navigation is disabled";
      goto LABEL_17;
    }
LABEL_18:
    *((_DWORD *)this + 1) = 0;
    goto LABEL_19;
  }
  if (!*((unsigned char *)a2 + 91))
  {
    uint64_t v5 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 134218240;
      int v17 = this;
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled by client";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  {
    if (WebKit::LegacyGlobalSettings::singleton(void)::properties != 2) {
      goto LABEL_8;
    }
  }
  else
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  if (*((unsigned char *)a2 + 96))
  {
LABEL_8:
    int v4 = *((unsigned __int8 *)a2 + 96);
    uint64_t v5 = qword_1EB358370;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        int v16 = 134218240;
        int v17 = this;
        __int16 v18 = 1024;
        int v19 = 0;
        uint64_t v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because process-per-tab was disabled";
LABEL_17:
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v16, 0x12u);
        goto LABEL_18;
      }
    }
    else if (v6)
    {
      int v16 = 134218240;
      int v17 = this;
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because cache model is not PrimaryWebBrowser";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v8 = WTF::ramSizeDisregardingJetsamLimit(this);
  uint64_t v9 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 134218496;
    int v17 = this;
    __int16 v18 = 1024;
    int v19 = 0;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::memory size %zu bytes", (uint8_t *)&v16, 0x1Cu);
  }
  if (!(v8 >> 31))
  {
    *((_DWORD *)this + 1) = 0;
    uint64_t v10 = qword_1EB358370;
    if (!os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    int v16 = 134218240;
    int v17 = this;
    __int16 v18 = 1024;
    int v19 = 0;
    BOOL v11 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because device does not have enough RAM";
    uint64_t v12 = v10;
    uint32_t v13 = 18;
    goto LABEL_32;
  }
  if ((v8 >> 28) >= 0xA) {
    int v14 = 10;
  }
  else {
    int v14 = v8 >> 28;
  }
  *((_DWORD *)this + 1) = v14;
  uint64_t v15 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 134218496;
    int v17 = this;
    __int16 v18 = 1024;
    int v19 = 0;
    __int16 v20 = 1024;
    LODWORD(v21) = v14;
    BOOL v11 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache has a capacity of %u processes";
    uint64_t v12 = v15;
    uint32_t v13 = 24;
LABEL_32:
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
  }
LABEL_19:
  if (!*((_DWORD *)this + 1)) {
    WebKit::WebProcessCache::clear((uint64_t)this);
  }
}

uint64_t WebKit::WebProcessPool::ensureGPUProcess(WebKit::WebProcessPool *this)
{
  uint64_t result = *((void *)this + 22);
  if (!result)
  {
    WebKit::GPUProcessProxy::getOrCreate(&v10);
    uint64_t v3 = v10;
    atomic_fetch_add((atomic_uint *volatile)v10 + 4, 1u);
    uint64_t v4 = *((void *)this + 22);
    *((void *)this + 22) = v3;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
    }
    uint64_t v5 = *((unsigned int *)this + 21);
    if (v5)
    {
      BOOL v6 = (atomic_uint **)*((void *)this + 9);
      uint64_t v7 = 8 * v5;
      do
      {
        unint64_t v8 = *v6++;
        atomic_fetch_add(v8 + 4, 1u);
        uint64_t v9 = v10;
        WebKit::GPUProcessProxy::updatePreferences((uint64_t)v10, (WebKit::WebProcessProxy *)v8);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v8 + 4);
        v7 -= 8;
      }
      while (v7);
      if (!v9) {
        return *((void *)this + 22);
      }
    }
    else
    {
      uint64_t v9 = v10;
      if (!v10) {
        return *((void *)this + 22);
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9 + 4);
    return *((void *)this + 22);
  }
  return result;
}

uint64_t std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = a2 + 3;
  if (*(unsigned char *)(a1 + 48))
  {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a1, a2);
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(v3, v4);
  }
  else
  {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(a1, a2);
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(v3, v4);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

BOOL API::PageConfiguration::delaysWebProcessLaunchUntilFirstLoad(WebKit::WebPreferences **this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(this + 5);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v3))return 1; {
  uint64_t v5 = (uint64_t)this[3];
  }
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    {
      WebKit::allInspectorProcessPools(void)::allInspectorProcessPools = 0;
      unk_1EB35A850 = 0;
    }
    if (WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)&WebKit::allInspectorProcessPools(void)::allInspectorProcessPools, v5))
    {
      BOOL v6 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 134217984;
        uint64_t v15 = this;
        _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> false because of WebInspector pool", (uint8_t *)&v14, 0xCu);
      }
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return 0;
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  if (*((unsigned char *)this + 242))
  {
    uint64_t v7 = qword_1EB358960;
    if (!os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT)) {
      return *((unsigned char *)this + 241) != 0;
    }
    unint64_t v8 = "true";
    if (!*((unsigned char *)this + 241)) {
      unint64_t v8 = "false";
    }
    int v14 = 134218242;
    uint64_t v15 = this;
    __int16 v16 = 2082;
    int v17 = v8;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> %{public}s because of explicit client value", (uint8_t *)&v14, 0x16u);
    if (*((unsigned char *)this + 242)) {
      return *((unsigned char *)this + 241) != 0;
    }
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v9 = this[3];
  if (!v9)
  {
LABEL_28:
    uint32_t v13 = qword_1EB358960;
    BOOL v4 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
    int v14 = 134218242;
    uint64_t v15 = this;
    __int16 v16 = 2082;
    int v17 = "false";
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> %{public}s because of global default value", (uint8_t *)&v14, 0x16u);
    return 0;
  }
  CFRetain(*((CFTypeRef *)v9 + 1));
  uint64_t v10 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v11 = "true";
    if (!*((unsigned char *)v9 + 881)) {
      BOOL v11 = "false";
    }
    int v14 = 134218242;
    uint64_t v15 = this;
    __int16 v16 = 2082;
    int v17 = v11;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> %{public}s because of associated processPool value", (uint8_t *)&v14, 0x16u);
  }
  BOOL v4 = *((unsigned char *)v9 + 881) != 0;
  CFRelease(*((CFTypeRef *)v9 + 1));
  return v4;
}

uint64_t WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

BOOL API::PageConfiguration::lockdownModeEnabled(API::PageConfiguration *this)
{
  uint64_t v1 = (CFTypeRef *)*((void *)this + 7);
  if (v1)
  {
    CFRetain(v1[1]);
    BOOL v2 = API::WebsitePolicies::lockdownModeEnabled((API::WebsitePolicies *)v1);
    CFRelease(v1[1]);
    return v2;
  }
  else if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
  {
    return (_BYTE)WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally != 0;
  }
  else
  {
    BOOL result = WebKit::isLockdownModeEnabledBySystemIgnoringCaching(this);
    WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = result | 0x100;
  }
  return result;
}

BOOL API::WebsitePolicies::lockdownModeEnabled(API::WebsitePolicies *this)
{
  if (*((unsigned char *)this + 161))
  {
    int v1 = *((unsigned __int8 *)this + 160);
  }
  else
  {
    if (!HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
    {
      BOOL result = WebKit::isLockdownModeEnabledBySystemIgnoringCaching(this);
      WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = result | 0x100;
      return result;
    }
    int v1 = WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally;
  }
  return v1 != 0;
}

uint64_t WebKit::WebProcessCache::clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(this + 8);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      uint64_t v4 = qword_1EB358370;
      if (!os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
LABEL_15:
        *(void *)(v1 + 8) = 0;
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, v5);
LABEL_16:
        this = *(void *)(v1 + 16);
        if (this)
        {
          *(void *)(v1 + 16) = 0;
          return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(this, (WTF::StringImpl *)v5);
        }
        return this;
      }
      uint64_t v6 = *(void *)(v1 + 16);
      if (v6) {
        int v7 = *(_DWORD *)(v6 - 12);
      }
      else {
        int v7 = 0;
      }
      goto LABEL_13;
    }
  }
  uint64_t v8 = *(void *)(this + 16);
  if (v8)
  {
    int v7 = *(_DWORD *)(v8 - 12);
    if (v7)
    {
      uint64_t v4 = qword_1EB358370;
      if (!os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      if (v2) {
        int v3 = *(_DWORD *)(v2 - 12);
      }
      else {
        int v3 = 0;
      }
LABEL_13:
      int v9 = 134218496;
      uint64_t v10 = v1;
      __int16 v11 = 1024;
      int v12 = 0;
      __int16 v13 = 1024;
      int v14 = v7 + v3;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::clear: Evicting %u processes", (uint8_t *)&v9, 0x18u);
      uint64_t v2 = *(void *)(v1 + 8);
LABEL_14:
      if (!v2) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  return this;
}

void WebKit::GPUProcessProxy::getOrCreate(WebKit::GPUProcessProxy **a1@<X8>)
{
  {
    if (WebKit::singleton(void)::singleton)
    {
      int v3 = *(atomic_uint **)(WebKit::singleton(void)::singleton + 8);
      if (v3)
      {
        atomic_fetch_add(v3 + 4, 1u);
        *a1 = (WebKit::GPUProcessProxy *)v3;
        return;
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  uint64_t v4 = (WebKit::GPUProcessProxy *)WTF::fastMalloc((WTF *)0x1D8);
  uint64_t v5 = WebKit::GPUProcessProxy::GPUProcessProxy(v4);
  *a1 = v5;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v5 + 2, (uint64_t)v4);
  int v7 = (atomic_uint *)*((void *)v4 + 1);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  {
    uint64_t v8 = (unsigned int *)WebKit::singleton(void)::singleton;
    WebKit::singleton(void)::singleton = (uint64_t)v7;
    if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = (uint64_t)v7;
  }
}

void WebKit::WebProcessPool::processForRegistrableDomain(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::ASCIICaseInsensitiveHash **a3@<X2>, uint64_t a4@<X3>, WebKit::WebPreferences **a5@<X4>, IPC::Encoder **a6@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t ReusableSuspendedPageProcess = (uint64_t)*a3;
  if (!*a3
    || !*(_DWORD *)(ReusableSuspendedPageProcess + 4)
    || (uint64_t ReusableSuspendedPageProcess = MEMORY[0x19972E990](), (ReusableSuspendedPageProcess & 1) != 0))
  {
LABEL_39:
    uint64_t v30 = *(void *)(a1 + 88);
    if (v30)
    {
      uint64_t v27 = *(IPC::Encoder **)(v30 + 8);
      if (v27)
      {
        atomic_fetch_add((atomic_uint *volatile)v27 + 4, 1u);
        if (WebKit::AuxiliaryProcessProxy::wasTerminated(v27))
        {
          uint64_t v31 = qword_1EB358960;
          if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
          {
            uint64_t v71 = *(void *)(*(void *)(a1 + 88) + 8);
            uint64_t v72 = *(void *)(v71 + 136);
            if (v72) {
              LODWORD(v72) = *(_DWORD *)(v72 + 108);
            }
            *(_DWORD *)buf = 134218496;
            *(void *)&uint8_t buf[4] = a1;
            __int16 v80 = 2048;
            *(void *)&long long v81 = v71;
            WORD4(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 10) = v72;
            _os_log_error_impl(&dword_1985F2000, v31, OS_LOG_TYPE_ERROR, "%p - WebProcessPool::tryTakePrewarmedProcess: Not using prewarmed process because it has been terminated (process=%p, PID=%d)", buf, 0x1Cu);
          }
          uint64_t v33 = *(unsigned int **)(a1 + 88);
          *(void *)(a1 + 88) = 0;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v32);
          }
        }
        else if ((((*((unsigned char *)v27 + 779) != 0) ^ a4) & 1) == 0)
        {
          FloatRect v41 = qword_1EB358960;
          if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v42 = *((void *)v27 + 17);
            if (v42) {
              LODWORD(v42) = *(_DWORD *)(v42 + 108);
            }
            uint64_t v43 = *(void *)(a2 + 24);
            *(_DWORD *)buf = 134218752;
            *(void *)&uint8_t buf[4] = v27;
            __int16 v80 = 1024;
            LODWORD(v81) = v42;
            WORD2(v81) = 2048;
            *(void *)((char *)&v81 + 6) = a2;
            HIWORD(v81) = 2048;
            uint64_t v82 = v43;
            _os_log_impl(&dword_1985F2000, v41, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::setWebsiteDataStore() dataStore=%p, sessionID=%llu", buf, 0x26u);
          }
          if (!*((void *)v27 + 94))
          {
            FloatRect v44 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a2);
            int v45 = (unsigned int *)(v44 + 4);
            atomic_fetch_add(v44 + 4, 1u);
            WebKit::NetworkProcessProxy::sendXPCEndpointToProcess((WebKit::NetworkProcessProxy *)v44, v27);
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v45);
          }
          CFRetain(*(CFTypeRef *)(a2 + 8));
          uint64_t v46 = *((void *)v27 + 94);
          *((void *)v27 + 94) = a2;
          if (v46) {
            CFRelease(*(CFTypeRef *)(v46 + 8));
          }
          uint64_t v47 = WebKit::WebProcessProxy::logger(v27);
          char isAlwaysOnLoggingAllowed = WebKit::WebProcessProxy::isAlwaysOnLoggingAllowed(v27);
          if (*(IPC::Encoder **)(v47 + 16) == v27) {
            *(unsigned char *)(v47 + ++*(_DWORD *)(this + 12) = isAlwaysOnLoggingAllowed;
          }
          WebKit::WebProcessProxy::updateRegistrationWithDataStore(v27);
          uint64_t v49 = *(void *)(*((void *)v27 + 64) + 8);
          if (v49) {
            uint64_t v50 = (WebKit::WebProcessProxy *)(v49 - 16);
          }
          else {
            uint64_t v50 = 0;
          }
          WebKit::WebProcessPool::webProcessDataStoreParameters((WebKit::WebProcessPool *)buf, v50, (atomic_uchar *)a2);
          uint64_t v51 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v51 = 2695;
          *((void *)v51 + 1) = 0;
          *((void *)v51 + 66) = (char *)v51 + 16;
          *((void *)v51 + 67) = 512;
          *((void *)v51 + 68) = 0;
          *((void *)v51 + 70) = 0;
          *((void *)v51 + 69) = 0;
          IPC::Encoder::encodeHeader(v51);
          uint64_t v78 = v51;
          IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::encode(v51, (uint64_t)buf);
          LOBYTE(v76[0]) = 0;
          char v77 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v27, &v78, 0, (uint64_t)v76, 1);
          if (v77)
          {
            uint64_t v53 = v76[0];
            v76[0] = 0;
            if (v53) {
              (*(void (**)(IPC::Encoder *))(*(void *)v53 + 8))(v53);
            }
          }
          char v54 = v78;
          uint64_t v78 = 0;
          if (v54)
          {
            IPC::Encoder::~Encoder(v54, v52);
            WTF::fastFree(v67, v68);
          }
          WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)buf);
          uint64_t v55 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v55 = &unk_1EE9D9730;
          *(void *)(v55 + 8) = 0;
          *(void *)(v55 + 16) = v27;
          *(unsigned char *)(v55 + 24) = 0;
          LOBYTE(v76[0]) = -75;
          WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)v27 + 19, v76, v55, (unsigned int **)buf);
          std::unique_ptr<WebKit::WebLockRegistryProxy>::reset[abi:sn180100]((uint64_t *)v27 + 131, v55);
          char v56 = qword_1EB358960;
          if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v57 = *((void *)v27 + 17);
            if (v57) {
              LODWORD(v57) = *(_DWORD *)(v57 + 108);
            }
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            __int16 v80 = 1024;
            LODWORD(v81) = v57;
            _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::markIsNoLongerInPrewarmedPool:", buf, 0x12u);
          }
          *((unsigned char *)v27 + 778) = 0;
          uint64_t v58 = *((void *)v27 + 64);
          if (!v58 || !*(void *)(v58 + 8))
          {
            __break(0xC471u);
            JUMPOUT(0x19870AAA4);
          }
          *((unsigned char *)v27 + 504) = 0;
          WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference((uint64_t)v27 + 504);
          uint64_t v59 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v59 = 2644;
          *((void *)v59 + 1) = 0;
          *((void *)v59 + 66) = (char *)v59 + 16;
          *((void *)v59 + 67) = 512;
          *((void *)v59 + 68) = 0;
          *((void *)v59 + 70) = 0;
          *((void *)v59 + 69) = 0;
          IPC::Encoder::encodeHeader(v59);
          v76[0] = v59;
          buf[0] = 0;
          BYTE2(v81) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v27, v76, 0, (uint64_t)buf, 1);
          if (BYTE2(v81))
          {
            uint64_t v61 = *(void *)buf;
            *(void *)buf = 0;
            if (v61) {
              (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
            }
          }
          uint64_t v62 = v76[0];
          v76[0] = 0;
          if (v62)
          {
            IPC::Encoder::~Encoder(v62, v60);
            WTF::fastFree(v69, v70);
          }
          WebKit::WebProcessProxy::updateRuntimeStatistics((uint64_t)v27);
          uint64_t v64 = *(unsigned int **)(a1 + 88);
          *(void *)(a1 + 88) = 0;
          if (v64 && atomic_fetch_add((atomic_uint *volatile)v64, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v64);
            WTF::fastFree((WTF *)v64, v63);
          }
          uint64_t v65 = qword_1EB358370;
          if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v66 = *((void *)v27 + 17);
            if (v66) {
              LODWORD(v66) = *(_DWORD *)(v66 + 108);
            }
            *(_DWORD *)buf = 134218496;
            *(void *)&uint8_t buf[4] = a1;
            __int16 v80 = 2048;
            *(void *)&long long v81 = v27;
            WORD4(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 10) = v66;
            _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForRegistrableDomain: Using prewarmed process (process=%p, PID=%i)", buf, 0x1Cu);
          }
          if (*a3 && *((_DWORD *)*a3 + 1) && (MEMORY[0x19972E990]() & 1) == 0) {
            WebKit::WebProcessPool::tryPrewarmWithDomainInformation(*(void *)(a1 + 784), v27, a3);
          }
          goto LABEL_110;
        }
        uint64_t ReusableSuspendedPageProcess = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v27 + 4);
      }
    }
    if (!*(unsigned char *)(*(void *)(a1 + 48) + 96)) {
      goto LABEL_69;
    }
    {
      if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore
        && *(void *)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8))
      {
        WebKit::WebsiteDataStore::defaultDataStore((WebKit::WebsiteDataStore *)ReusableSuspendedPageProcess, (WebKit::WebsiteDataStore **)buf);
        BOOL v34 = *(void *)buf != a2;
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
        }
      }
      else
      {
        BOOL v34 = 0;
      }
    }
    else
    {
      BOOL v34 = 0;
      WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
    }
    uint64_t v35 = *(unsigned int *)(a1 + 84);
    if (!v35) {
LABEL_69:
    }
      WebKit::WebProcessPool::createNewWebProcess(a1, a2, a4, 0);
    unsigned int v36 = *(void **)(a1 + 72);
    uint64_t v37 = 8 * v35;
    while (1)
    {
      uint64_t v38 = *v36;
      uint64_t v39 = (atomic_uint *)(*v36 + 16);
      atomic_fetch_add(v39, 1u);
      *a6 = (IPC::Encoder *)v38;
      uint64_t v40 = *(void *)(a1 + 88);
      if (v40) {
        uint64_t v40 = *(void *)(v40 + 8);
      }
      if (v38 == v40 || WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v38))
      {
        *a6 = 0;
        if (!v38) {
          goto LABEL_68;
        }
      }
      else
      {
        if (!*(unsigned char *)(v38 + 872) && (!v34 || *(void *)(v38 + 752) == a2)) {
          return;
        }
        *a6 = 0;
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v39);
LABEL_68:
      ++v36;
      v37 -= 8;
      if (!v37) {
        goto LABEL_69;
      }
    }
  }
  uint64_t v13 = *(void *)(a1 + 768);
  int v14 = (void *)(v13 + 16);
  uint64_t v15 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v13 + 16), a3);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v13 + 16);
  if (v17) {
    v17 += 16 * *(unsigned int *)(v17 - 4);
  }
  if (v17 == v15
    || (uint64_t v18 = **(void **)(v15 + 8), *(void *)(v18 + 752) != a2)
    || (((*(unsigned char *)(v18 + 779) != 0) ^ a4) & 1) != 0
    || !WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebProcessProxy *)v18, a5))
  {
LABEL_34:
    uint64_t ReusableSuspendedPageProcess = WebKit::SuspendedPageProxy::findReusableSuspendedPageProcess(a1, a3, a2, a4, a5, v76);
    uint64_t v27 = v76[0];
    if (v76[0])
    {
      BOOL v28 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *((void *)v27 + 17);
        if (v29) {
          LODWORD(v29) = *(_DWORD *)(v29 + 108);
        }
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v80 = 2048;
        *(void *)&long long v81 = v27;
        WORD4(v81) = 1024;
        *(_DWORD *)((char *)&v81 + 10) = v29;
        _os_log_impl(&dword_1985F2000, v28, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForRegistrableDomain: Using WebProcess from a SuspendedPage (process=%p, PID=%i)", buf, 0x1Cu);
        uint64_t v27 = v76[0];
      }
LABEL_110:
      *a6 = v27;
      return;
    }
    goto LABEL_39;
  }
  int v19 = *(uint64_t **)(v16 + 8);
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v19 + 1));
  WebKit::WebProcessProxy::setIsInProcessCache(*v19, 0, 0);
  char v75 = (WebKit::AuxiliaryProcessProxy *)*v19;
  uint64_t *v19 = 0;
  if (*v14)
  {
    uint64_t v20 = *v14 + 16 * *(unsigned int *)(*v14 - 4);
    if (v20 == v16) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!v16) {
      goto LABEL_17;
    }
    uint64_t v20 = 0;
  }
  if (v20 != v16) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(v13 + 16), (WTF::StringImpl **)v16);
  }
LABEL_17:
  unint64_t v21 = qword_1EB358370;
  uint64_t v22 = v75;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = *((void *)v75 + 17);
    if (v23) {
      int v74 = *(_DWORD *)(v23 + 108);
    }
    else {
      int v74 = 0;
    }
    if (*v14) {
      int v73 = *(_DWORD *)(*v14 - 12);
    }
    else {
      int v73 = 0;
    }
    int v24 = *(_DWORD *)(v13 + 4);
    uint64_t v22 = v75;
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = v13;
    __int16 v80 = 1024;
    LODWORD(v81) = v74;
    WORD2(v81) = 1024;
    *(_DWORD *)((char *)&v81 + 6) = v73;
    WORD5(v81) = 1024;
    HIDWORD(v81) = v24;
    LOWORD(v82) = 1024;
    *(_DWORD *)((char *)&v82 + 2) = WebKit::AuxiliaryProcessProxy::wasTerminated(v75);
    _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::takeProcess: Taking process from WebProcess cache (size=%u, capacity=%u, processWasTerminated=%d)", buf, 0x24u);
  }
  if (WebKit::AuxiliaryProcessProxy::wasTerminated(v22))
  {
    if (v22) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v22 + 4);
    }
    goto LABEL_34;
  }
  if (!v22) {
    goto LABEL_34;
  }
  char v25 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *((void *)v22 + 17);
    if (v26) {
      LODWORD(v26) = *(_DWORD *)(v26 + 108);
    }
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v80 = 2048;
    *(void *)&long long v81 = v22;
    WORD4(v81) = 1024;
    *(_DWORD *)((char *)&v81 + 10) = v26;
    _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForRegistrableDomain: Using WebProcess from WebProcess cache (process=%p, PID=%i)", buf, 0x1Cu);
  }
  *a6 = v22;
}

uint64_t WebKit::WebsiteDataStore::networkProcess(WebKit::WebsiteDataStore *this)
{
  uint64_t result = *((void *)this + 50);
  if (!result)
  {
    WebKit::NetworkProcessProxy::ensureDefaultNetworkProcess((WebKit::NetworkProcessProxy **)&v6);
    int v3 = v6;
    atomic_fetch_add(v6 + 4, 1u);
    uint64_t v4 = *((void *)this + 50);
    *((void *)this + 50) = v3;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
    }
    uint64_t v5 = v6;
    WebKit::NetworkProcessProxy::addSession((uint64_t)v6, (unsigned int *)this, 1);
    if (v5) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5 + 4);
    }
    return *((void *)this + 50);
  }
  return result;
}

WTF *WebKit::NetworkProcessProxy::addSession(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>(a1 + 536, a2, (uint64_t)v11);
  if (v11[16])
  {
    if ((uint64_t v7 = *(void *)(a1 + 136)) != 0 && *(unsigned char *)(v7 + 104) || *(void *)(a1 + 144))
    {
      if (a3)
      {
        WebKit::WebsiteDataStore::parameters((WebKit::WebsiteDataStore *)a2, (uint64_t)&v12);
        uint64_t v10 = &v12;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AddWebsiteDataStore>(a1, (uint64_t *)&v10, 0, 1);
        if (v23) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
        }
        if (v21) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v20);
        }
        if (v19) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
        }
        if (v17) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
        }
        WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&v15, v8);
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
        uint64_t result = v12;
        if (v12)
        {
          int v12 = 0;
          int v13 = 0;
          return (WTF *)WTF::fastFree(result, v9);
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + ++*(_DWORD *)(this + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 4, (uint64_t)a2);
  uint64_t v20 = (atomic_uint *)*((void *)a2 + 2);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  char v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  char v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

uint64_t *std::unique_ptr<WebKit::WebLockRegistryProxy>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unsigned int *result = a2;
  if (v2)
  {
    IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*(void *)(v2 + 16) + 152), 0xB5u);
    *(void *)uint64_t v2 = &unk_1EE9B71B0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), v3);
    return (uint64_t *)WTF::fastFree((WTF *)v2, v4);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::wasTerminated(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (!v1) {
    return 1;
  }
  if (*(unsigned char *)(v1 + 104)) {
    return 0;
  }
  if (!*((void *)this + 18)) {
    return 1;
  }
  pid_t v3 = *(_DWORD *)(v1 + 108);
  if (!v3) {
    return 1;
  }
  uint64_t result = kill(v3, 0);
  if (result) {
    return *__error() == 3;
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::XPCEventHandler::handleXPCEvent(uint64_t a1, id a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  if (!a2 || !*(void *)(v2 + 8)) {
    return result;
  }
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F145A8]) {
    return 0;
  }
  uint64_t result = (uint64_t)xpc_dictionary_get_string(a2, "message-name");
  if (!result) {
    return result;
  }
  if (!*(unsigned char *)result) {
    return 0;
  }
  if (strcmp("xpc-endpoint-launch-services-database-message", (const char *)result)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 8);
  }
  WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=((void **)(v6 + 528), a2);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v20);
  if (v21)
  {
    uint64_t v8 = v20;
    uint64_t v9 = v20 + 8 * v21;
    do
    {
      uint64_t v10 = *(unsigned int *)(*(void *)v8 + 84);
      if (v10)
      {
        unsigned int v11 = *(WebKit::AuxiliaryProcessProxy ***)(*(void *)v8 + 72);
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = *v11;
          uint64_t v14 = (atomic_uint *)((char *)*v11 + 16);
          atomic_fetch_add(v14, 1u);
          uint64_t v15 = *(void *)(a1 + 16);
          if (v15) {
            unsigned int v16 = *(WebKit::NetworkProcessProxy **)(v15 + 8);
          }
          else {
            unsigned int v16 = 0;
          }
          WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v16, v13);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v14);
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v8 += 8;
    }
    while (v8 != v9);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v7);
  {
    if (WebKit::singleton(void)::singleton)
    {
      char v17 = *(WebKit::AuxiliaryProcessProxy **)(WebKit::singleton(void)::singleton + 8);
      if (v17)
      {
        uint64_t v18 = *(void *)(a1 + 16);
        if (v18) {
          int v19 = *(WebKit::NetworkProcessProxy **)(v18 + 8);
        }
        else {
          int v19 = 0;
        }
        WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v19, v17);
      }
    }
    return 1;
  }
  WebKit::singleton(void)::singleton = 0;
  uint64_t result = 1;
  return result;
}

void sub_19870B108(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(WebKit::NetworkProcessProxy *this, WebKit::AuxiliaryProcessProxy *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)a2 + 17);
    if (v5 && *(unsigned char *)(v5 + 104))
    {
      int v6 = 0;
      uint64_t v7 = *((void *)a2 + 18);
    }
    else
    {
      uint64_t v7 = *((void *)a2 + 18);
      if (v7) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
    }
    uint64_t v8 = *((void *)this + 66);
    int v16 = 134219008;
    char v17 = this;
    __int16 v18 = 2048;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = v6;
    __int16 v22 = 1024;
    BOOL v23 = v7 != 0;
    __int16 v24 = 2048;
    uint64_t v25 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::sendXPCEndpointToProcess(%p) state = %d has connection = %d XPC endpoint message = %p", (uint8_t *)&v16, 0x2Cu);
  }
  uint64_t v9 = *((void *)a2 + 17);
  if (v9)
  {
    int v10 = *(unsigned __int8 *)(v9 + 104);
    uint64_t v11 = *((void *)a2 + 18);
    if (v10) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v11 == 0;
    }
    if (v12) {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 18);
    if (!v11) {
      return 0;
    }
  }
  uint64_t v13 = (void *)*((void *)this + 66);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *(_xpc_connection_s **)(v11 + 352);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19870B294);
  }
  xpc_connection_send_message(v14, v13);
  return 1;
}

uint64_t WebKit::WebProcessProxy::logger(WebKit::WebProcessProxy *this)
{
  if (!*((void *)this + 99))
  {
    uint64_t v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    *(void *)uint64_t v2 = &unk_1EE9BEFD8;
    *(unsigned char *)(v2 + ++*(_DWORD *)(this + 12) = 1;
    *(void *)(v2 + 16) = this;
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    pid_t v3 = (unsigned int *)*((void *)this + 99);
    *((void *)this + 99) = v2;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
    char isAlwaysOnLoggingAllowed = WebKit::WebProcessProxy::isAlwaysOnLoggingAllowed(this);
    if (*(WebKit::WebProcessProxy **)(v2 + 16) == this) {
      *(unsigned char *)(v2 + ++*(_DWORD *)(this + 12) = isAlwaysOnLoggingAllowed;
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return *((void *)this + 99);
}

unsigned int *WTF::WeakHashSet<API::HTTPCookieStoreObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<API::HTTPCookieStoreObserver>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + ++*(_DWORD *)(this + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v20 = a2[1];
  if (!v20)
  {
    uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = a2;
    __int16 v22 = (unsigned int *)a2[1];
    a2[1] = v20;
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      uint64_t v20 = a2[1];
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  uint64_t v25 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v25, a3);
  uint64_t result = (unsigned int *)v25;
  uint64_t v25 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

WebKit::WebProcess *WebKit::WebPage::updatePrefersNonBlinkingCursor(WebKit::WebProcess *this)
{
  uint64_t v1 = (WebCore::Page *)*((void *)this + 6);
  if (v1)
  {
    ++*(_DWORD *)v1;
    WebKit::WebProcess::singleton(this);
    WebCore::Page::setPrefersNonBlinkingCursor(v1);
    uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v2 = &unk_1EEA01188;
    pid_t v3 = v2;
    WebCore::Page::forEachDocument();
    if (v3) {
      (*(void (**)(void *))(*v3 + 8))(v3);
    }
    return (WebKit::WebProcess *)WTF::RefCounted<WebCore::Page>::deref(v1);
  }
  return this;
}

_DWORD *WTF::RefCounted<WebCore::Page>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x19973A720]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC840;
  WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

void sub_19870B88C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebUserContentControllerProxy::addContentRuleList(WebKit::WebUserContentControllerProxy *this, API::ContentRuleList *a2, WTF::StringImpl **a3)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (uint64_t *)((char *)this + 104);
  uint64_t v7 = *((void *)a2 + 2);
  CFRetain(*((CFTypeRef *)a2 + 1));
  unint64_t v85 = a2;
  uint64_t v78 = (const WTF::URL *)a3;
  int v9 = *a3;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  int v10 = (WTF::StringImpl **)(v7 + 16);
  uint64_t v86 = v9;
  long long v11 = *(_OWORD *)((char *)v78 + 24);
  long long v87 = *(_OWORD *)((char *)v78 + 8);
  long long v88 = v11;
  uint64_t v12 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v6),
        (uint64_t v12 = *v6) != 0))
  {
    int v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    int v13 = 0;
  }
  unsigned int v14 = *((_DWORD *)*v10 + 4);
  uint64_t v76 = v6;
  char v77 = a2;
  if (v14 >= 0x100) {
    unsigned int v15 = v14 >> 8;
  }
  else {
    unsigned int v15 = WTF::StringImpl::hashSlowCase(*v10);
  }
  uint64_t v16 = 0;
  char v17 = (long long *)((char *)v78 + 8);
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v15 & v13;
    uint64_t v20 = (uint64_t *)(v12 + 56 * (v15 & v13));
    int v21 = (WTF *)*v20;
    if (*v20 == -1)
    {
      uint64_t v16 = v12 + 56 * v19;
      goto LABEL_15;
    }
    if (!v21) {
      break;
    }
    if (WTF::equal(v21, *v10, v8))
    {
      std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>::operator=[abi:sn180100]((uint64_t *)(v12 + 56 * v19 + 8), (uint64_t *)&v85);
      __int16 v24 = v77;
      goto LABEL_34;
    }
LABEL_15:
    unsigned int v15 = i + v19;
  }
  if (v16)
  {
    *(void *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    --*(_DWORD *)(*v76 - 16);
    uint64_t v20 = (uint64_t *)v16;
  }
  WTF::String::operator=(v20, v10);
  unint64_t v85 = 0;
  uint64_t v86 = 0;
  __int16 v24 = v77;
  uint64_t v92 = v77;
  unint64_t v93 = v9;
  long long v94 = v87;
  long long v95 = v88;
  LODWORD(v87) = v87 & 0xFFFFFFFE;
  std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>::operator=[abi:sn180100](v20 + 1, (uint64_t *)&v92);
  __int16 v22 = v93;
  unint64_t v93 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v23);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v25 = v92;
  uint64_t v92 = 0;
  if (v25) {
    CFRelease(*((CFTypeRef *)v25 + 1));
  }
  uint64_t v26 = *v76;
  if (*v76) {
    int v27 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(v26 - ++*(_DWORD *)(this + 12) = v27;
  uint64_t v28 = *v76;
  if (*v76) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30) {
LABEL_33:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v76);
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_33;
  }
LABEL_34:
  uint64_t v32 = v86;
  uint64_t v86 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v23);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t v33 = (uint64_t)v85;
  unint64_t v85 = 0;
  if (v33) {
    CFRelease(*(CFTypeRef *)(v33 + 8));
  }
  uint64_t v34 = *((void *)v24 + 2);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v85);
  uint64_t v35 = *((void *)this + 5);
  if (v35)
  {
    uint64_t v36 = *(unsigned int *)(v35 - 4);
    uint64_t v37 = (WTF::StringImpl *)(v35 + 8 * v36);
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v36 = 0;
  }
  __int16 v80 = (char *)this + 40;
  long long v81 = v37;
  uint64_t v82 = v37;
  uint64_t v83 = v37;
  uint64_t v84 = v35 + 8 * v36;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v80);
  for (j = v86; v86 != v81; j = v86)
  {
    uint64_t v39 = *(void *)(*(void *)j + 8);
    uint64_t v40 = *(WTF::StringImpl **)(v34 + 16);
    if (v40) {
      *(_DWORD *)v40 += 2;
    }
    uint64_t v92 = v40;
    FloatRect v41 = *(atomic_uint **)(v34 + 24);
    if (v41) {
      atomic_fetch_add(v41, 1u);
    }
    unint64_t v93 = (WTF::StringImpl *)v41;
    long long v42 = *(_OWORD *)(v34 + 32);
    long long v43 = *(_OWORD *)(v34 + 48);
    long long v44 = *(_OWORD *)(v34 + 80);
    long long v96 = *(_OWORD *)(v34 + 64);
    long long v97 = v44;
    long long v94 = v42;
    long long v95 = v43;
    int v45 = *(WTF::StringImpl **)v78;
    if (*(void *)v78) {
      *(_DWORD *)v45 += 2;
    }
    unint64_t v98 = v45;
    long long v46 = *(_OWORD *)((char *)v78 + 24);
    long long v99 = *v17;
    long long v100 = v46;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v79, (uint64_t)&v92, 1uLL);
    uint64_t v47 = *((void *)this + 4);
    int v48 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v48 = 2853;
    *((void *)v48 + 1) = v47;
    *((void *)v48 + 66) = (char *)v48 + 16;
    *((void *)v48 + 67) = 512;
    *((void *)v48 + 68) = 0;
    *((void *)v48 + 70) = 0;
    *((void *)v48 + 69) = 0;
    IPC::Encoder::encodeHeader(v48);
    unint64_t v91 = v48;
    IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v48, (uint64_t)v79);
    LOBYTE(v89[0]) = 0;
    char v90 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v39, &v91, 0, (uint64_t)v89, 1);
    if (v90)
    {
      uint64_t v50 = v89[0];
      v89[0] = 0;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
    }
    uint64_t v51 = v91;
    unint64_t v91 = 0;
    if (v51)
    {
      IPC::Encoder::~Encoder(v51, v49);
      WTF::fastFree(v56, v57);
    }
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, (WTF::StringImpl *)v49);
    uint64_t v53 = v98;
    unint64_t v98 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, v52);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
    char v54 = (unsigned int *)v93;
    unint64_t v93 = 0;
    if (v54) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v54);
    }
    uint64_t v55 = v92;
    uint64_t v92 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v52);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v85);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 11, &v85);
  uint64_t v58 = *((void *)this + 11);
  if (v58)
  {
    uint64_t v59 = *(unsigned int *)(v58 - 4);
    uint64_t v60 = (WTF::StringImpl *)(v58 + 8 * v59);
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v59 = 0;
  }
  __int16 v80 = (char *)this + 88;
  long long v81 = v60;
  uint64_t v82 = v60;
  uint64_t v83 = v60;
  uint64_t v84 = v58 + 8 * v59;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v80);
  for (k = v86; v86 != v81; k = v86)
  {
    uint64_t v63 = *(void *)(*(void *)k + 8);
    unint64_t v91 = (IPC::Encoder *)*((void *)this + 4);
    uint64_t v64 = *(WTF::StringImpl **)(v34 + 16);
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    uint64_t v92 = v64;
    uint64_t v65 = *(atomic_uint **)(v34 + 24);
    if (v65) {
      atomic_fetch_add(v65, 1u);
    }
    unint64_t v93 = (WTF::StringImpl *)v65;
    long long v66 = *(_OWORD *)(v34 + 32);
    long long v67 = *(_OWORD *)(v34 + 48);
    long long v68 = *(_OWORD *)(v34 + 80);
    long long v96 = *(_OWORD *)(v34 + 64);
    long long v97 = v68;
    long long v94 = v66;
    long long v95 = v67;
    uint64_t v69 = *(WTF::StringImpl **)v78;
    if (*(void *)v78) {
      *(_DWORD *)v69 += 2;
    }
    unint64_t v98 = v69;
    long long v70 = *(_OWORD *)((char *)v78 + 24);
    long long v99 = *v17;
    long long v100 = v70;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v79, (uint64_t)&v92, 1uLL);
    v89[0] = &v91;
    v89[1] = v79;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::AddContentRuleLists>(v63, (uint64_t)v89, 0, 0);
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v71);
    int v73 = v98;
    unint64_t v98 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2) {
        WTF::StringImpl::destroy(v73, v72);
      }
      else {
        *(_DWORD *)v73 -= 2;
      }
    }
    int v74 = (unsigned int *)v93;
    unint64_t v93 = 0;
    if (v74) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v74);
    }
    char v75 = v92;
    uint64_t v92 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, v72);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v85);
  }
  return result;
}

uint64_t *std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  WTF::URL::operator=((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(56 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v5;
  if (v4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v4;
    while (1)
    {
      int v10 = (WTF::StringImpl **)(v3 + 56 * v8);
      long long v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            int v17 = v16 >> 8;
          }
          else {
            int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            unsigned int v19 = v17 & v15;
            uint64_t v20 = (WTF::StringImpl **)(v14 + 56 * (v17 & v15));
            int v17 = ++v18 + (v17 & v15);
          }
          while (*v20);
          uint64_t v21 = v14 + 56 * v19;
          __int16 v24 = *(WTF::StringImpl **)(v21 + 16);
          BOOL v23 = (void *)(v21 + 16);
          __int16 v22 = v24;
          void *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v7);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v27 = *(v23 - 1);
          *(v23 - 1) = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          uint64_t v28 = *v20;
          uint64_t *v20 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v7);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          int v29 = *v10;
          NSObject *v10 = 0;
          uint64_t *v20 = v29;
          uint64_t v30 = v3 + 56 * v8;
          uint64_t v32 = *(void *)(v30 + 8);
          unint64_t v31 = (uint64_t *)(v30 + 8);
          uint64_t *v31 = 0;
          *(v23 - 1) = v32;
          WTF::URL::URL((uint64_t)v23, v31 + 1);
          uint64_t v33 = (WTF::StringImpl *)v31[1];
          v31[1] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v7);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          uint64_t v34 = *v31;
          uint64_t *v31 = 0;
          if (v34) {
            CFRelease(*(CFTypeRef *)(v34 + 8));
          }
          uint64_t v26 = *v10;
          NSObject *v10 = 0;
          if (!v26) {
            goto LABEL_46;
          }
          if (*(_DWORD *)v26 == 2) {
            goto LABEL_45;
          }
          *(_DWORD *)v26 -= 2;
        }
        else
        {
          uint64_t v12 = v3 + 56 * v8;
          int v13 = *(WTF::StringImpl **)(v12 + 16);
          *(void *)(v12 + 16) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v7);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          uint64_t v25 = *(void *)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v25) {
            CFRelease(*(CFTypeRef *)(v25 + 8));
          }
          uint64_t v26 = *v10;
          NSObject *v10 = 0;
          if (!v26) {
            goto LABEL_46;
          }
          if (*(_DWORD *)v26 == 2)
          {
LABEL_45:
            WTF::StringImpl::destroy(v26, v7);
            goto LABEL_46;
          }
          *(_DWORD *)v26 -= 2;
        }
      }
LABEL_46:
      if (++v8 == v9) {
        goto LABEL_49;
      }
    }
  }
  if (v3)
  {
LABEL_49:
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1},WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x60);
  uint64_t result = WebKit::WebLocalFrameLoaderClient::WebLocalFrameLoaderClient(v7, a2, v5, v6);
  *a3 = result;
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::WebLocalFrameLoaderClient(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *a4;
  *a4 = 0;
  *(void *)(a1 + 24) = v7;
  LOBYTE(v7) = *((unsigned char *)a4 + 8);
  *((unsigned char *)a4 + 8) = 0;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)a1 = &unk_1EE9F6478;
  *(void *)(a1 + 8) = &unk_1EE9F6970;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 45) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  uint64_t v8 = *(atomic_uint **)(a2 + 16);
  atomic_fetch_add(v8, 1u);
  *(void *)(a1 + 88) = v8;
  return a1;
}

uint64_t WebKit::WebProcess::setMediaAccessibilityPreferences(uint64_t a1)
{
  WebCore::CaptionUserPreferencesMediaAF::setCachedCaptionDisplayMode();
  uint64_t result = WebCore::CaptionUserPreferencesMediaAF::setCachedPreferredLanguages();
  uint64_t v3 = *(void *)(a1 + 128);
  if (!v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
LABEL_3:
    uint64_t v6 = v3 + 16 * v5;
    goto LABEL_4;
  }
  uint64_t v5 = *(unsigned int *)(v3 - 4);
  uint64_t v6 = v3 + 16 * v5;
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v4 = v3 + 16 * v5;
    goto LABEL_3;
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    uint64_t v4 = v3;
    while ((unint64_t)(*(void *)v4 + 1) <= 1)
    {
      v4 += 16;
      v8 -= 16;
      if (!v8)
      {
        uint64_t v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3) {
    uint64_t v7 = v3 + 16 * *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  while (v4 != v7)
  {
    uint64_t result = *(void *)(WebKit::WebPageGroupProxy::corePageGroup(*(WebKit::WebPageGroupProxy **)(v4 + 8)) + 40);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
    }
    uint64_t v9 = v4 + 16;
    uint64_t v4 = v6;
    if (v9 != v6)
    {
      uint64_t v4 = v9;
      while ((unint64_t)(*(void *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v6)
        {
          uint64_t v4 = v6;
          break;
        }
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 4)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

void WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  {
    uint64_t v0 = WebKit::itpQueue(void)::itpQueue;
    WebKit::itpQueue(void)::itpQueue = 0;
    if (v0) {
      (*(void (**)(void))(*(void *)v0 + 56))();
    }
  }
  else
  {
    WebKit::itpQueue(void)::itpQueue = 0;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::setHasAV1HardwareDecoder(BOOL)::$_0,void,WebCore::Page &>::call(int a1, WebCore::Page *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  uint64_t v3 = v2[90];
  if ((~v3 & 0x2040000000) != 0)
  {
    uint64_t v4 = v2[89];
    uint64_t v5 = v2[88];
    uint64_t v6 = v2[87];
    uint64_t v7 = v2[86];
    uint64_t v8 = v2[85];
    uint64_t v9 = v2[84];
    v2[83] = v2[83];
    v2[84] = v9;
    v2[85] = v8;
    v2[86] = v7;
    v2[87] = v6;
    v2[88] = v5;
    v2[89] = v4;
    v2[90] = v3 | 0x2040000000;
    return WebCore::Page::settingsDidChange(this);
  }
  return result;
}

atomic_uchar *volatile **IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>>(v15, a2);
  if (!v18) {
    return (atomic_uchar *volatile **)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](v15);
  }
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
  if (!v7) {
    return (atomic_uchar *volatile **)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](v15);
  }
  uint64_t v12 = v6;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9BDDC8;
  v8[1] = v12;
  uint64_t v9 = v13;
  int v13 = 0;
  uint64_t v14 = v8;
  void v8[2] = v9;
  uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  if (v18)
  {
    WebKit::GPUProcess::createGPUConnectionToWebProcess(a3, v15[0], v15[1], (WTF::MachSendRight *)&v16, (uint64_t)&v17, (uint64_t *)&v14);
    uint64_t v11 = (uint64_t)v14;
    uint64_t v14 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    return (atomic_uchar *volatile **)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](v15);
  }
  __break(1u);
  return result;
}

unsigned char *std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](unsigned char *a1)
{
  if (a1[120])
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 24));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
  }
  return a1;
}

uint64_t *WebKit::GPUProcess::createGPUConnectionToWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, WTF::MachSendRight *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a2;
  uint64_t v12 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v28 = a1;
    __int16 v29 = 2048;
    uint64_t v30 = a2;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::createGPUConnectionToWebProcess: processIdentifier=%llu", buf, 0x16u);
  }
  uint64_t v13 = *a6;
  *a6 = 0;
  uint64_t v24 = v13;
  char v25 = 1;
  if ((*(_DWORD *)a4 - 1) <= 0xFFFFFFFD)
  {
    uint64_t v14 = (WebKit::GPUConnectionToWebProcess *)WTF::fastMalloc((WTF *)0x198);
    uint64_t v23 = WebKit::GPUConnectionToWebProcess::GPUConnectionToWebProcess((uint64_t)v14, a1, a2, a3, a4, a5);
    uint64_t v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 168), a2);
    *((unsigned char *)v14 + 192) |= v15 & 1;
    *((unsigned char *)v14 + 193) |= BYTE1(v15) & 1;
    *((unsigned char *)v14 + 194) |= BYTE2(v15) & 1;
    uint64_t v16 = *(unsigned int *)(a1 + 184);
    uint64_t v17 = WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(v14);
    *(_DWORD *)(v17 + 56) = v16;
    uint64_t v18 = *(unsigned int *)(v17 + 52);
    if (v18)
    {
      uint64_t v20 = *(uint64_t **)(v17 + 40);
      uint64_t v21 = 8 * v18;
      do
      {
        uint64_t v22 = *v20++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v16);
        v21 -= 8;
      }
      while (v21);
    }
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>((uint64_t)buf, (uint64_t *)(a1 + 128), &v26, &v23);
    if (v23) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v23 + 16));
    }
  }
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v24);
}

uint64_t WebKit::GPUConnectionToWebProcess::GPUConnectionToWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::MachSendRight *a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1994F5F10;
  *(void *)(v12 + 24) = a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EE9BEB70;
  *(void *)(a1 + 24) = &unk_1EE9BEBB8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v13 = (uint64_t *)(a1 + 56);
  int v40 = WTF::MachSendRight::leakSendRight(a5);
  object = 0;
  IPC::Connection::createClientConnection((uint64_t)&v40, (mach_port_context_t *)(a1 + 56));
  if (object) {
    os_release(object);
  }
  WebKit::DownloadMap::DownloadMap((void *)(a1 + 64));
  atomic_fetch_add((atomic_uint *volatile)(a2 + 120), 1u);
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 96), (const WTF::MachSendRight *)a6);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 1++*(_DWORD *)(this + 12) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v14 = (WebKit::RemoteMediaPlayerManagerProxy *)WTF::fastMalloc((WTF *)0x30);
  *(void *)(a1 + 128) = WebKit::RemoteMediaPlayerManagerProxy::RemoteMediaPlayerManagerProxy(v14, (WebKit::GPUConnectionToWebProcess *)a1);
  *(void *)(a1 + 136) = a4;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  WebKit::RemoteSampleBufferDisplayLayerManager::create((WebKit::RemoteSampleBufferDisplayLayerManager *)(a1 + 168), (WebKit::GPUConnectionToWebProcess *)a1);
  *(void *)(a1 + 176) = 0;
  WebCore::SecurityOrigin::createOpaque(v15);
  *(_WORD *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 194) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v42, *(atomic_uchar *volatile **)(a1 + 56));
  WebKit::RemoteVideoFrameObjectHeap::create((uint64_t *)v42, (WebKit **)v33);
  *(void *)(a1 + 200) = *(void *)v33;
  *(void *)uint64_t v33 = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v42);
  WebKit::LibWebRTCCodecsProxy::create((WebKit::LibWebRTCCodecsProxy *)a1, (uint64_t **)v33);
  *(void *)(a1 + 208) = *(void *)v33;
  uint64_t v17 = (_OWORD *)(a1 + 216);
  char v18 = *(unsigned char *)(a6 + 84);
  if (v18)
  {
    long long v32 = *(_OWORD *)(a6 + 68);
    _OWORD *v17 = *(_OWORD *)(a6 + 52);
    *(_OWORD *)(a1 + 232) = v32;
    char v18 = 1;
  }
  else
  {
    *(unsigned char *)uint64_t v17 = 0;
  }
  *(unsigned char *)(a1 + 248) = v18;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 353) = *(unsigned char *)(a6 + 48);
  *(unsigned char *)(a1 + 354) = 0;
  *(void *)(a1 + 360) = 0;
  long long v19 = *(_OWORD *)(a6 + 8);
  long long v20 = *(_OWORD *)(a6 + 24);
  *(void *)(a1 + 400) = *(void *)(a6 + 40);
  *(_OWORD *)(a1 + 368) = v19;
  *(_OWORD *)(a1 + 384) = v20;
  uint64_t v21 = (WTF::RunLoop *)WTF::RunLoop::main(v16);
  if ((WTF::RunLoop::isCurrent(v21) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19870CD38);
  }
  uint64_t v22 = (WTF::RunLoop *)IPC::Connection::setOnlySendMessagesAsDispatchWhenWaitingForSyncReplyWhenProcessingSuchAMessage(*v13, 1);
  uint64_t v23 = (IPC::Connection *)*v13;
  uint64_t v24 = (_OWORD *)WTF::RunLoop::current(v22);
  char v25 = (WebCore *)IPC::Connection::open(v23, a1 + 24, v24);
  if (*(unsigned char *)(a6 + 89))
  {
    char v26 = *(unsigned char *)(a6 + 88) != 0;
  }
  else
  {
    char v26 = WebCore::vp9HardwareDecoderAvailable(v25);
    v33[0] = v26;
    char v25 = (WebCore *)IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasVP9HardwareDecoder>(a2 + 24, v33);
  }
  if (*(unsigned char *)(a6 + 91))
  {
    char v27 = *(unsigned char *)(a6 + 90) != 0;
  }
  else
  {
    char v27 = WebCore::av1HardwareDecoderAvailable(v25);
    v33[0] = v27;
    IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasAV1HardwareDecoder>(a2 + 24, v33);
  }
  uint64_t v28 = *(void *)(a2 + 40);
  if (v28) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v28);
  }
  if (*(void *)(v28 + 352))
  {
    xpc_connection_get_audit_token();
    char v29 = v33[0];
    *(_OWORD *)long long v42 = *(_OWORD *)&v33[1];
    *(_OWORD *)&v42[15] = *(_OWORD *)&v33[16];
    char v30 = 1;
  }
  else
  {
    char v29 = 0;
    char v30 = 0;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((atomic_uchar *volatile *)v28);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v39, (uint64_t **)(a1 + 56));
  v33[0] = v29;
  *(_OWORD *)&v33[1] = *(_OWORD *)v42;
  *(_OWORD *)&v33[16] = *(_OWORD *)&v42[15];
  char v34 = v30;
  char v35 = v26;
  char v36 = v27;
  char v37 = 1;
  uint64_t v38 = v33;
  IPC::Connection::send<Messages::GPUProcessConnection::DidInitialize>((uint64_t)v39, (uint64_t *)&v38);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v39);
  ++WebKit::GPUConnectionToWebProcess::gObjectCountForTesting;
  return a1;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::create(WebKit::RemoteSampleBufferDisplayLayerManager *this, WebKit::GPUConnectionToWebProcess *a2)
{
  uint64_t v4 = (WebKit::RemoteSampleBufferDisplayLayerManager *)WTF::fastMalloc((WTF *)0x48);
  uint64_t v5 = (WebKit::RemoteSampleBufferDisplayLayerManager *)WebKit::RemoteSampleBufferDisplayLayerManager::RemoteSampleBufferDisplayLayerManager(v4, a2);
  *(void *)this = v5;

  WebKit::RemoteSampleBufferDisplayLayerManager::startListeningForIPC(v5);
}

atomic_uchar *volatile **WebKit::RemoteSampleBufferDisplayLayerManager::RemoteSampleBufferDisplayLayerManager(atomic_uchar *volatile **this, WebKit::GPUConnectionToWebProcess *a2)
{
  *(void *)IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver((IPC::WorkQueueMessageReceiver *)this) = &unk_1EE9C25A0;
  uint64_t v4 = (atomic_uchar *)*((void *)a2 + 2);
  if (v4) {
    uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  this[3] = (atomic_uchar *volatile *)v4;
  this[4] = (atomic_uchar *volatile *)a2;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(this + 5, *((atomic_uchar *volatile **)a2 + 7));
  uint64_t v5 = WebKit::GPUProcess::videoMediaStreamTrackRendererQueue(*((WebKit::GPUProcess **)a2 + 10));
  (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  this[6] = (atomic_uchar *volatile *)v5;
  *((unsigned char *)this + 56) = 0;
  this[8] = 0;
  return this;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::startListeningForIPC(WebKit::RemoteSampleBufferDisplayLayerManager *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 3);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 4), &v4);
    if (v4)
    {
      IPC::Connection::addWorkQueueMessageReceiver(*(void *)(v4 + 56), 0x77u, *((void *)this + 6), (uint64_t)this, 0);
      IPC::Connection::addWorkQueueMessageReceiver(*(void *)(v4 + 56), 0x78u, *((void *)this + 6), (uint64_t)this, 0);
      uint64_t v3 = v4;
      uint64_t v4 = 0;
      if (v3) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
      }
    }
  }
}

void WebKit::GPUConnectionToWebProcess::didReceiveMessage(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v6 = (WebCore::MediaStrategy *)WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v113, (uint64_t)this);
  int v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 52)
  {
    uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
    if (v9)
    {
      WebKit::GPUConnectionToWebProcess::releaseRenderingBackend((uint64_t)this, v8);
      goto LABEL_124;
    }
LABEL_95:
    uint64_t v76 = *(void *)a3;
    uint64_t v77 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v78 = *((void *)a3 + 3);
    if (v78)
    {
LABEL_96:
      if (v77) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v78 + 16))(v78, v76);
      }
    }
    goto LABEL_124;
  }
  if (v7 == 43)
  {
    IPC::handleMessage<Messages::GPUConnectionToWebProcess::CreateRenderingBackend,WebKit::GPUConnectionToWebProcess,WebKit::GPUConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)>((uint64_t *)a3, (uint64_t)this);
    goto LABEL_124;
  }
  if (v7 != 41 || *((unsigned char *)this + 404) == 0 || *((unsigned char *)this + 390) == 0)
  {
    if (v7 == 50 && *((unsigned char *)this + 404) && *((unsigned char *)this + 390))
    {
      uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v13)
      {
        WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL((uint64_t)this, v12);
        goto LABEL_124;
      }
      goto LABEL_95;
    }
    if (v7 == 40 && *((unsigned char *)this + 406))
    {
      uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v26
        && (uint64_t v27 = v25,
            uint64_t v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3),
            v29))
      {
        uint64_t v30 = v28;
        IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(v114, a3);
        char v31 = v114[24];
        if (v114[24])
        {
          *(void *)unint64_t v120 = v27;
          *(void *)&v120[8] = v30;
          WTF::MachSendRight::MachSendRight();
          WTF::MachSendRight::MachSendRight();
          *(void *)&v120[32] = *(void *)&v114[16];
          char v31 = 1;
        }
        else
        {
          v120[0] = 0;
        }
        v120[40] = v31;
        std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](v114);
        if (v120[40])
        {
LABEL_42:
          char v34 = (WTF::MachSendRight *)&v120[16];
          WebKit::GPUConnectionToWebProcess::createGPU((uint64_t)this, *(uint64_t *)v120, *(uint64_t *)&v120[8], (WTF::MachSendRight *)&v120[16]);
          if (!v120[40]) {
            goto LABEL_124;
          }
          char v35 = (WTF::MachSendRight *)&v120[24];
          goto LABEL_44;
        }
      }
      else
      {
        v120[0] = 0;
        v120[40] = 0;
      }
      uint64_t v88 = *(void *)a3;
      uint64_t v89 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v90 = *((void *)a3 + 3);
      if (!v90) {
        goto LABEL_124;
      }
      if (!v89) {
        goto LABEL_124;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v90 + 16))(v90, v88);
      if (!v120[40]) {
        goto LABEL_124;
      }
      goto LABEL_42;
    }
    if (v7 == 49 && *((unsigned char *)this + 406))
    {
      uint64_t v32 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v33) {
        WebKit::GPUConnectionToWebProcess::releaseGPU((uint64_t)this, v32);
      }
      goto LABEL_124;
    }
    switch(*((_WORD *)a3 + 25))
    {
      case '%':
        WebKit::GPUConnectionToWebProcess::clearNowPlayingInfo(this);
        goto LABEL_124;
      case '&':
        IPC::Decoder::decode<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>>(a3, v120);
        if (v120[16])
        {
          WebKit::GPUConnectionToWebProcess::configureLoggingChannel((int)this, (WebCore *)v120, v120[8], v120[9]);
          if (v120[16])
          {
            int v45 = *(WTF::StringImpl **)v120;
            *(void *)unint64_t v120 = 0;
            if (v45) {
              goto LABEL_118;
            }
          }
        }
        goto LABEL_124;
      case '\'':
        uint64_t v70 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v71) {
          WebKit::GPUConnectionToWebProcess::createAudioHardwareListener((uint64_t)this, v70);
        }
        goto LABEL_124;
      case '*':
        uint64_t v68 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v69) {
          WebKit::GPUConnectionToWebProcess::createRemoteCommandListener((uint64_t)this, v68);
        }
        goto LABEL_124;
      case ',':
        uint64_t v46 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v47) {
          goto LABEL_95;
        }
        uint64_t v48 = v46;
        uint64_t v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v50) {
          goto LABEL_95;
        }
        unint64_t v51 = *((void *)a3 + 1);
        uint64_t v52 = *(void *)a3;
        unint64_t v53 = *((void *)a3 + 2) - *(void *)a3;
        if (v51 <= v53)
        {
          unint64_t v108 = 0;
          uint64_t v109 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v110 = *((void *)a3 + 3);
          if (v110)
          {
            if (v51)
            {
              (*(void (**)(uint64_t))(*(void *)v110 + 16))(v110);
              uint64_t v109 = *(void *)a3;
              unint64_t v108 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v108 = 0;
              uint64_t v109 = 0;
            }
          }
        }
        else
        {
          char v54 = (unsigned __int8 *)(v52 + v53);
          *((void *)a3 + 2) = v54 + 1;
          if (v52)
          {
            unsigned int v55 = *v54;
            if (v55 < 2)
            {
              WebKit::GPUConnectionToWebProcess::createVisibilityPropagationContextForPage((uint64_t)this, v48, v49, v55 != 0);
              goto LABEL_124;
            }
LABEL_152:
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v112 = *((void *)a3 + 3);
            if (v112 && v51) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v112 + 16))(v112, v52);
            }
            goto LABEL_95;
          }
          unint64_t v108 = v51;
          uint64_t v109 = 0;
        }
        unint64_t v51 = 0;
        uint64_t v52 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v111 = *((void *)a3 + 3);
        if (v111)
        {
          if (v108)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v111 + 16))(v111, v109, v108);
            uint64_t v52 = *(void *)a3;
            unint64_t v51 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v51 = 0;
            uint64_t v52 = 0;
          }
        }
        goto LABEL_152;
      case '-':
        uint64_t v63 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v64) {
          goto LABEL_95;
        }
        uint64_t v65 = v63;
        uint64_t v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v67) {
          goto LABEL_95;
        }
        WebKit::GPUConnectionToWebProcess::destroyVisibilityPropagationContextForPage((uint64_t)this, v65, v66);
        goto LABEL_124;
      case '.':
        if (!*((unsigned char *)this + 354))
        {
          WebCore::MediaStrategy::addMockMediaSourceEngine(v6);
          *((unsigned char *)this + 354) = 1;
        }
        goto LABEL_124;
      case '/':
        WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(this);
        goto LABEL_124;
      case '0':
        uint64_t v74 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v75) {
          WebKit::GPUConnectionToWebProcess::releaseAudioHardwareListener((uint64_t)this, v74);
        }
        goto LABEL_124;
      case '3':
        uint64_t v72 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v73) {
          WebKit::GPUConnectionToWebProcess::releaseRemoteCommandListener((uint64_t)this, v72);
        }
        goto LABEL_124;
      case '5':
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)v120, a3);
        if (!v120[16]) {
          goto LABEL_124;
        }
        WebKit::GPUConnectionToWebProcess::setMediaEnvironment((uint64_t *)this, *(WTF::StringImpl **)v120, (WTF::StringImpl **)&v120[8]);
        if (!v120[16]) {
          goto LABEL_124;
        }
        int v45 = *(WTF::StringImpl **)&v120[8];
        *(void *)&v120[8] = 0;
        if (!v45) {
          goto LABEL_124;
        }
        goto LABEL_118;
      case '6':
        IPC::ArgumentCoder<WebKit::MediaOverridesForTesting,void>::decode(a3, (uint64_t)v120);
        if (v120[40])
        {
          *(_OWORD *)&v114[1] = *(_OWORD *)&v120[1];
          *(_OWORD *)&v114[17] = *(_OWORD *)&v120[17];
          *(void *)&v114[32] = *(void *)&v120[32];
          v114[0] = v120[0];
          WebKit::GPUConnectionToWebProcess::setMediaOverridesForTesting((uint64_t)this, v114);
          goto LABEL_124;
        }
        uint64_t v91 = *(void *)a3;
        uint64_t v92 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v93 = *((void *)a3 + 3);
        if (!v93 || !v92)
        {
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          goto LABEL_124;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 16))(v93, v91);
        uint64_t v76 = *(void *)a3;
        uint64_t v77 = *((void *)a3 + 1);
        uint64_t v78 = *((void *)a3 + 3);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        if (!v78) {
          goto LABEL_124;
        }
        goto LABEL_96;
      case '7':
        IPC::Decoder::decode<WebCore::NowPlayingInfo>(a3, (uint64_t)v120);
        if (!v125)
        {
          std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120, v56);
          goto LABEL_95;
        }
        long long v57 = *(_OWORD *)v120;
        long long v58 = *(_OWORD *)&v120[16];
        memset(v120, 0, 32);
        *(_OWORD *)unint64_t v114 = v57;
        *(_OWORD *)&v114[16] = v58;
        v114[32] = 0;
        char v116 = 0;
        if (v122)
        {
          long long v59 = *(_OWORD *)&v120[32];
          *(void *)&v120[32] = 0;
          *(void *)&v120[40] = 0;
          *(_OWORD *)&v114[32] = v59;
          uint64_t v60 = v121;
          uint64_t v121 = 0;
          uint64_t v115 = v60;
          char v116 = 1;
        }
        long long v117 = v123;
        v118[0] = v124[0];
        *(_OWORD *)((char *)v118 + 11) = *(_OWORD *)((char *)v124 + 11);
        char v119 = 1;
        std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120, v56);
        WebKit::GPUConnectionToWebProcess::setNowPlayingInfo((uint64_t)this);
        if (v119)
        {
          std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v114[32], v61);
          uint64_t v62 = *(WTF::StringImpl **)&v114[24];
          *(void *)&v114[24] = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2) {
              WTF::StringImpl::destroy(v62, v44);
            }
            else {
              *(_DWORD *)v62 -= 2;
            }
          }
          char v79 = *(WTF::StringImpl **)&v114[16];
          *(void *)&v114[16] = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2) {
              WTF::StringImpl::destroy(v79, v44);
            }
            else {
              *(_DWORD *)v79 -= 2;
            }
          }
          __int16 v80 = *(WTF::StringImpl **)&v114[8];
          *(void *)&v114[8] = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2) {
              WTF::StringImpl::destroy(v80, v44);
            }
            else {
              *(_DWORD *)v80 -= 2;
            }
          }
          int v45 = *(WTF::StringImpl **)v114;
          *(void *)unint64_t v114 = 0;
          if (v45)
          {
LABEL_118:
            if (*(_DWORD *)v45 == 2) {
              WTF::StringImpl::destroy(v45, v44);
            }
            else {
              *(_DWORD *)v45 -= 2;
            }
          }
        }
        goto LABEL_124;
      case '8':
        uint64_t v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v37) {
          goto LABEL_145;
        }
        uint64_t v38 = v36;
        IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v114);
        if (!v114[16])
        {
          uint64_t v94 = *(void *)a3;
          uint64_t v95 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v96 = *((void *)a3 + 3);
          if (v96 && v95) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v96 + 16))(v96, v94);
          }
          goto LABEL_145;
        }
        unint64_t v39 = *((void *)a3 + 1);
        uint64_t v40 = *(void *)a3;
        unint64_t v41 = *((void *)a3 + 2) - *(void *)a3;
        if (v39 <= v41)
        {
          unint64_t v97 = 0;
          uint64_t v98 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v99 = *((void *)a3 + 3);
          if (v99)
          {
            if (v39)
            {
              (*(void (**)(uint64_t))(*(void *)v99 + 16))(v99);
              uint64_t v98 = *(void *)a3;
              unint64_t v97 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v97 = 0;
              uint64_t v98 = 0;
            }
          }
        }
        else
        {
          long long v42 = (unsigned __int8 *)(v40 + v41);
          *((void *)a3 + 2) = v42 + 1;
          if (v40)
          {
            unsigned int v43 = *v42;
            if (v43 < 2)
            {
              if (!v43)
              {
                v126[0] = 0;
                char v127 = 0;
                char v128 = 1;
                goto LABEL_99;
              }
              IPC::Decoder::takeLastAttachment(a3, v120);
              if (v120[4])
              {
                WTF::MachSendRight::MachSendRight();
                char v127 = 1;
                char v128 = 1;
                if (!v120[4]) {
                  goto LABEL_99;
                }
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v120);
                if (v128) {
                  goto LABEL_99;
                }
                goto LABEL_144;
              }
LABEL_143:
              v126[0] = 0;
              char v128 = 0;
LABEL_144:
              uint64_t v102 = *(void *)a3;
              uint64_t v103 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v104 = *((void *)a3 + 3);
              if (!v104
                || !v103
                || ((*(void (**)(uint64_t, uint64_t))(*(void *)v104 + 16))(v104, v102), !v128))
              {
LABEL_145:
                v120[0] = 0;
                v120[32] = 0;
                goto LABEL_146;
              }
LABEL_99:
              *(void *)unint64_t v120 = v38;
              *(_OWORD *)&v120[8] = *(_OWORD *)v114;
              v120[24] = 0;
              v120[28] = 0;
              if (!v127)
              {
                v120[32] = 1;
                goto LABEL_105;
              }
              WTF::MachSendRight::MachSendRight();
              v120[28] = 1;
              v120[32] = 1;
              if (!v128 || !v127 || (WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v126), v120[32]))
              {
LABEL_105:
                char v34 = (WTF::MachSendRight *)&v120[24];
                WebKit::GPUConnectionToWebProcess::updateSampleBufferDisplayLayerBoundsAndPosition((uint64_t)this, *(uint64_t *)v120, (uint64_t)&v120[24]);
                if (v120[32] && v120[28]) {
                  goto LABEL_45;
                }
                goto LABEL_124;
              }
LABEL_146:
              uint64_t v105 = *(void *)a3;
              uint64_t v106 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v107 = *((void *)a3 + 3);
              if (!v107) {
                goto LABEL_124;
              }
              if (!v106) {
                goto LABEL_124;
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v107 + 16))(v107, v105);
              if (!v120[32]) {
                goto LABEL_124;
              }
              goto LABEL_105;
            }
LABEL_142:
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v101 = *((void *)a3 + 3);
            if (v101 && v39) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v101 + 16))(v101, v40);
            }
            goto LABEL_143;
          }
          unint64_t v97 = v39;
          uint64_t v98 = 0;
        }
        unint64_t v39 = 0;
        uint64_t v40 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v100 = *((void *)a3 + 3);
        if (v100)
        {
          if (v97)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v100 + 16))(v100, v98, v97);
            uint64_t v40 = *(void *)a3;
            unint64_t v39 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v39 = 0;
            uint64_t v40 = 0;
          }
        }
        goto LABEL_142;
      default:
        WebKit::GPUConnectionToWebProcess::dispatchMessage(this, a2, a3);
        goto LABEL_124;
    }
  }
  uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
  if (!v15) {
    goto LABEL_122;
  }
  uint64_t v16 = v14;
  uint64_t v17 = IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::decode(a3);
  if ((v18 & 0xFF00) == 0)
  {
    uint64_t v81 = *(void *)a3;
    uint64_t v82 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v83 = *((void *)a3 + 3);
    if (v83 && v82) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v81);
    }
    goto LABEL_122;
  }
  long long v19 = v17;
  char v20 = v18;
  uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
  if (!v22)
  {
LABEL_122:
    v120[0] = 0;
    char v122 = 0;
    goto LABEL_123;
  }
  uint64_t v23 = v21;
  IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(v114, a3);
  char v24 = v114[24];
  if (v114[24])
  {
    *(void *)unint64_t v120 = v16;
    *(void *)&v120[8] = v19;
    v120[16] = v20;
    *(void *)&v120[24] = v23;
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    uint64_t v121 = *(void *)&v114[16];
    char v24 = 1;
  }
  else
  {
    v120[0] = 0;
  }
  char v122 = v24;
  std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](v114);
  if (!v122)
  {
LABEL_123:
    uint64_t v84 = *(void *)a3;
    uint64_t v85 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v86 = *((void *)a3 + 3);
    if (!v86) {
      goto LABEL_124;
    }
    if (!v85) {
      goto LABEL_124;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v84);
    if (!v122) {
      goto LABEL_124;
    }
  }
  char v34 = (WTF::MachSendRight *)&v120[32];
  WebKit::GPUConnectionToWebProcess::createGraphicsContextGL((uint64_t)this, *(uint64_t *)v120, *(uint64_t *)&v120[8], v120[16], *(uint64_t *)&v120[24], (WTF::MachSendRight *)&v120[32]);
  if (!v122) {
    goto LABEL_124;
  }
  char v35 = (WTF::MachSendRight *)&v120[40];
LABEL_44:
  WTF::MachSendRight::~MachSendRight(v35);
LABEL_45:
  WTF::MachSendRight::~MachSendRight(v34);
LABEL_124:
  uint64_t v87 = v113;
  uint64_t v113 = 0;
  if (v87) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v87 + 16));
  }
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  unint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (!v4)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9BA030;
    *(void *)(v8 + 8) = v1;
    *(void *)(v8 + 16) = v6;
    *(unsigned char *)(v8 + 24) = v5;
    uint64_t v10 = (atomic_uchar *)v8;
    WTF::ensureOnMainThread();
    this = v10;
    if (v10) {
      return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
    }
  }
  return this;
}

void *WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(void *a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  ++*(void *)(v5 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  *a1 = a2;
  return a1;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>@<X0>(atomic_uchar *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v4 = this;
  char v6 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  if (*((void *)v4 + 3)) {
    ++*((void *)v4 + 1);
  }
  else {
    a2 = 0;
  }
  *a3 = a2;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return this;
}

WebKit::RemoteMediaPlayerManagerProxy *WebKit::RemoteMediaPlayerManagerProxy::RemoteMediaPlayerManagerProxy(WebKit::RemoteMediaPlayerManagerProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9C0E40;
  char v4 = (atomic_uchar *)*((void *)a2 + 2);
  if (v4) {
    char v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  *((void *)this + 3) = v4;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = 0;
  return this;
}

void WebKit::RemoteVideoFrameObjectHeap::create(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xB8);
  uint64_t v5 = (WebKit *)WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap(v4, a1);
  *a2 = v5;
  uint64_t v6 = *((void *)v5 + 3);
  uint64_t v7 = WebKit::remoteVideoFrameObjectHeapQueue(v5);

  IPC::Connection::addWorkQueueMessageReceiver(v6, 0x81u, v7, v4, 0);
}

uint64_t WebKit::remoteVideoFrameObjectHeapQueue(WebKit *this)
{
    return WebKit::remoteVideoFrameObjectHeapQueue(void)::queue;
  WTF::WorkQueue::create();
  uint64_t result = v2;
  WebKit::remoteVideoFrameObjectHeapQueue(void)::queue = v2;
  return result;
}

uint64_t WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver((IPC::WorkQueueMessageReceiver *)a1);
  *(void *)uint64_t v4 = &unk_1EE9C1B28;
  uint64_t v5 = *a2;
  *a2 = 0;
  *((void *)v4 + 3) = v5;
  *((void *)v4 + 4) = &unk_1EE9C1E48;
  *((_WORD *)v4 + 20) = 0;
  *((void *)v4 + 6) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((IPC::WorkQueueMessageReceiver *)((char *)v4 + 56));
  WebKit::SharedVideoFrameReader::SharedVideoFrameReader((WebKit::SharedVideoFrameReader *)(a1 + 80));
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  return a1;
}

uint64_t WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result = *((void *)this + 18);
  if (!result)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::GPUProxyForCapture,WebKit::GPUConnectionToWebProcess &>((uint64_t)this, &v7);
    std::make_unique[abi:sn180100]<WebKit::UserMediaCaptureManagerProxy,WTF::UniqueRef<WebKit::GPUProxyForCapture>>((uint64_t *)&v7, &v8);
    uint64_t v3 = v8;
    uint64_t v8 = 0;
    uint64_t v4 = *((void *)this + 18);
    *((void *)this + 18) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v6 = v8;
      uint64_t v8 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5) {
      std::default_delete<WebKit::GPUProxyForCapture>::operator()[abi:sn180100]((int)&v7, v5);
    }
    return *((void *)this + 18);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::UserMediaCaptureManagerProxy,WTF::UniqueRef<WebKit::GPUProxyForCapture>>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x50);
  uint64_t v5 = *a1;
  *a1 = 0;
  uint64_t v7 = v5;
  *a2 = WebKit::UserMediaCaptureManagerProxy::UserMediaCaptureManagerProxy(v4, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WebKit::SharedVideoFrameWriter *WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter(WebKit::SharedVideoFrameWriter *this)
{
  uint64_t v2 = (_DWORD *)WTF::fastMalloc((WTF *)8);
  _DWORD *v2 = 0;
  v2[1] = 0;
  semaphore_create(*MEMORY[0x1E4F14960], v2 + 1, 0, 0);
  *(void *)this = v2;
  *((void *)this + 1) = 0;
  *(_DWORD *)((char *)this + 15) = 0;
  return this;
}

double WebKit::SharedVideoFrameReader::SharedVideoFrameReader(WebKit::SharedVideoFrameReader *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + ++*(_DWORD *)(this + 12) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 9) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  return result;
}

uint64_t WebKit::NetworkStorageManager::NetworkStorageManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, WTF::FileSystemImpl *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, char a20,char a21)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver((IPC::WorkQueueMessageReceiver *)a1);
  *((_DWORD *)v27 + 6) = 0;
  *(void *)uint64_t v27 = &unk_1EE9CC758;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v28 = *(atomic_uint **)(a2 + 8);
  if (v28) {
    atomic_fetch_add(v28, 1u);
  }
  *(void *)(a1 + 32) = v28;
  *(void *)(a1 + 40) = a3;
  WTF::SuspendableWorkQueue::create();
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 1++*(_DWORD *)(this + 12) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 200) = 1;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(void *)(a1 + 3++*(_DWORD *)(this + 12) = a4;
  *(void *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  if (*a5 && *((_DWORD *)*a5 + 1))
  {
    if ((_MergedGlobals_76 & 1) == 0)
    {
      qword_1EB359928 = 0;
      _MergedGlobals_76 = 1;
    }
    WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::add<WebKit::NetworkStorageManager&>((uint64_t)v51, a5, (const WTF::StringImpl *)a1);
    if (!v52)
    {
      uint64_t v44 = v51[0] + 8;
      unsigned int v43 = *(atomic_uchar **)(v51[0] + 8);
      if (v43
        && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v50, v43, *(void *)(v51[0] + 16)), (uint64_t v45 = v50) != 0))
      {
        uint64_t v46 = qword_1EB3585F0;
        if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v48 = *(void *)(a1 + 40);
          uint64_t v49 = *(void *)(v45 + 40);
          *(_DWORD *)buf = 134218496;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v48;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v54 = v49;
          _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "%p - NetworkStorageManager::NetworkStorageManager path for session %llu is already in use by session %llu", buf, 0x20u);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v45 + 16), v47);
      }
      else
      {
        WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>::operator=<WebKit::NetworkStorageManager,(void *)0>(v44, (void *)a1);
      }
    }
  }
  WTF::FileSystemImpl::lexicallyNormal((uint64_t *)buf, (WTF::FileSystemImpl *)a5, v29);
  uint64_t v31 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v32 = *(WTF::StringImpl **)(a1 + 64);
  *(void *)(a1 + 64) = v31;
  if (v32)
  {
    int v33 = *(_DWORD *)v32 - 2;
    if (*(_DWORD *)v32 != 2)
    {
LABEL_10:
      *(_DWORD *)uint64_t v32 = v33;
      goto LABEL_11;
    }
    WTF::StringImpl::destroy(v32, v30);
    uint64_t v32 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v32)
    {
      int v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 != 2) {
        goto LABEL_10;
      }
      WTF::StringImpl::destroy(v32, v30);
    }
  }
LABEL_11:
  WTF::FileSystemImpl::lexicallyNormal((uint64_t *)buf, a7, v30);
  uint64_t v35 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v36 = *(WTF::StringImpl **)(a1 + 168);
  *(void *)(a1 + 168) = v35;
  if (!v36) {
    goto LABEL_14;
  }
  int v37 = *(_DWORD *)v36 - 2;
  if (*(_DWORD *)v36 != 2) {
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v36, v34);
  uint64_t v36 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v36)
  {
    int v37 = *(_DWORD *)v36 - 2;
    if (*(_DWORD *)v36 != 2)
    {
LABEL_13:
      *(_DWORD *)uint64_t v36 = v37;
      goto LABEL_14;
    }
    WTF::StringImpl::destroy(v36, v42);
  }
LABEL_14:
  *(void *)buf = a1;
  uint64_t v38 = *(atomic_uchar **)(a1 + 16);
  if (v38) {
    uint64_t v38 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v38);
  }
  *(void *)&buf[8] = v38;
  *(void *)&buf[16] = a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  uint64_t v55 = a10;
  uint64_t v56 = a11;
  char v57 = a12;
  uint64_t v58 = a13;
  char v59 = a14;
  uint64_t v60 = a15;
  char v61 = a16;
  uint64_t v62 = a17;
  char v63 = a18;
  char v64 = a20;
  char v65 = a21;
  WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>(v51, (uint64_t *)buf);
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v40 = v51[0];
  v51[0] = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0(buf, v39);
  return a1;
}

IPC::WorkQueueMessageReceiver *IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver(IPC::WorkQueueMessageReceiver *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9B71B0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *((void *)this + 2) = v2;
  *(void *)this = &unk_1EE9B7178;
  return this;
}

void sub_19870E570(_Unwind_Exception *a1, void *a2)
{
  void *v2 = v4;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

void *WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
  }
  return a1;
}

void WebKit::LibWebRTCCodecsProxy::create(WebKit::LibWebRTCCodecsProxy *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v5 = (uint64_t *)WTF::fastMalloc((WTF *)0x58);
  WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy((WebKit::LibWebRTCCodecsProxy *)v5, this);
  *a2 = v5;
  IPC::Connection::addWorkQueueMessageReceiver(v5[3], 0x15u, v5[4], (uint64_t)v5, 0);
}

void sub_19870E6C8(_Unwind_Exception *a1, void *a2)
{
  void *v2 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  _Unwind_Resume(a1);
}

WebKit::LibWebRTCCodecsProxy *WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy(WebKit::LibWebRTCCodecsProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  uint64_t v4 = IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver(this);
  *(void *)uint64_t v4 = &unk_1EE9B6E90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v4 + 3, *((atomic_uchar *volatile **)a2 + 7));
  uint64_t v5 = WebKit::GPUProcess::libWebRTCCodecsQueue(*((WebKit::GPUProcess **)a2 + 10));
  (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  *((void *)this + 4) = v5;
  uint64_t v6 = WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap(a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v6 + 16));
  *((void *)this + 5) = v6;
  WTF::MachSendRight::MachSendRight((WebKit::LibWebRTCCodecsProxy *)((char *)this + 48), (WebKit::GPUConnectionToWebProcess *)((char *)a2 + 96));
  *((void *)this + 10) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 72) = 0;
  return this;
}

void sub_19870E7B4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  uint64_t v6 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  uint64_t v7 = *v3;
  WTF::StringImpl *v3 = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v7);
  }
  *(void *)uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

void sub_19870E84C()
{
}

uint64_t WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap(WebKit::GPUConnectionToWebProcess *this)
{
  return *((void *)this + 25);
}

uint64_t WebKit::WebProcessPool::prewarmProcess(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(this + 88);
  if (!v2 || !*(void *)(v2 + 8))
  {
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      *(_OWORD *)algn_1EB35A7B8 = 0u;
    }
    this = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
    unsigned int v3 = WebKit::liveProcessesLRU(void)::processes;
    if ((void)WebKit::liveProcessesLRU(void)::processes) {
      unsigned int v3 = *(_DWORD *)(WebKit::liveProcessesLRU(void)::processes - 12);
    }
    if (v3 < WebKit::s_maxProcessCount)
    {
      uint64_t v4 = qword_1EB358280;
      BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v8 = v1;
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::prewarmProcess: Prewarming a WebProcess for performance", buf, 0xCu);
      }
      if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
      {
        BOOL isLockdownModeEnabledBySystemIgnoringCaching = (_BYTE)WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally != 0;
      }
      else
      {
        BOOL isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)v5);
        WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = isLockdownModeEnabledBySystemIgnoringCaching | 0x100;
      }
      WebKit::WebProcessPool::createNewWebProcess(v1, 0, isLockdownModeEnabledBySystemIgnoringCaching, 1);
    }
  }
  return this;
}

void WebKit::WebProcessPool::createNewWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void WebKit::WebProcessProxy::create(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x4B8);
  WebKit::WebProcessProxy::WebProcessProxy(v7, a1, a2, a4);
}

uint64_t WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    char v3 = 0;
    do
    {
      uint64_t v4 = (void *)v2[2];
      if (!*(void *)(*v2 + 8))
      {
        uint64_t v7 = v2;
        WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, &v7);
        WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, (WTF *)v2);
        char v3 = 1;
      }
      uint64_t v2 = v4;
    }
    while (v4);
  }
  else
  {
    char v3 = 0;
  }
  unsigned int v5 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(void *)a1)
  {
    unsigned int v5 = *(_DWORD *)(*(void *)a1 - 12);
    if (v5 > 0x7FFFFFFE) {
      unsigned int v5 = 0x7FFFFFFF;
    }
  }
  *(_DWORD *)(a1 + 28) = 2 * v5;
  return v3 & 1;
}

void WebKit::WebProcessProxy::WebProcessProxy(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy(a1, *(unsigned char *)(a2 + 521), *(unsigned char *)(a2 + 520), 3.0);
  *uint64_t v7 = &unk_1EE9DC788;
  v7[3] = &unk_1EE9DC8B0;
  v7[4] = &unk_1EE9DC908;
  WebKit::BackgroundProcessResponsivenessTimer::BackgroundProcessResponsivenessTimer((WebKit::BackgroundProcessResponsivenessTimer *)(v7 + 52), (WebKit::WebProcessProxy *)a1);
  *(unsigned char *)(a1 + 504) = a4;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v8 = *(atomic_uint **)(a2 + 24);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(a1 + 5++*(_DWORD *)(this + 12) = v8;
  *(void *)(a1 + 520) = 0;
  WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference(a1 + 504);
  *(unsigned char *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_WORD *)(a1 + 680) = 1;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 7++*(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(a1 + 716) = 1;
  *(_OWORD *)(a1 + 720) = 0u;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9DD368;
  v9[1] = a1;
  *(void *)(a1 + 736) = v9;
  operator new();
}

uint64_t WebKit::UserMediaCaptureManagerProxy::UserMediaCaptureManagerProxy(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9E2AA0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  long long v5 = 0u;
  uint64_t v6 = "UserMediaCaptureManagerProxy";
  uint64_t v7 = 0;
  WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v5, (uint64_t *)(a1 + 64));
  *(void *)(a1 + 72) = 0;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 150, a1);
  return a1;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(uint64_t a1, WTF::NativePromiseBase *a2)
{
  char v4 = 0;
  uint64_t v8 = (WTF::Lock *)(a1 + 48);
  char v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]();
  }
  WTF::NativePromiseBase::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(a2, " resolving ", a1);
  __int16 v7 = 0;
  double result = (WTF::Lock *)WTF::NativePromise<void,void,0u>::settleImpl<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(a1, &v7, (atomic_uchar *volatile *)&v8);
  if (v9)
  {
    double result = v8;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

WTF::StringImpl *WTF::NativePromiseBase::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(WTF::NativePromiseBase *a1, const char *a2, uint64_t a3)
{
  double result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a1, a2, a3);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>@<X0>(WTF::NativePromiseBase *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v5 = WTF::NativePromise<void,void,0u>::NativePromise(v4, a1);
  *a2 = v5;

  return WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(v5, a1);
}

uint64_t WTF::NativePromise<void,void,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9E2C48;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 1++*(_DWORD *)(this + 12) = 0;
  WTF::NativePromiseBase::log<char [10],WTF::NativePromise<void,void,0u>>((WTF::NativePromiseBase *)"creating ", a1);
  return a1;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [10],WTF::NativePromise<void,void,0u>>(WTF::NativePromiseBase *a1, uint64_t a2)
{
  double result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    return WTF::Logger::log<char [10],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, (char *)a1, a2);
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::settleImpl<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(uint64_t a1, _WORD *a2, atomic_uchar *volatile *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C1238[v6])(&v8, a1 + 56);
  }
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 56) = *a2;
  *(_DWORD *)(a1 + 64) = 1;
  return WTF::NativePromise<void,void,0u>::dispatchAll(a1, a3);
}

uint64_t WTF::NativePromise<void,void,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  BOOL v5 = (unsigned int **)(a1 + 72);
  uint64_t v4 = *(void **)(a1 + 72);
  uint64_t v21 = &v23;
  unint64_t v22 = 1;
  char v24 = (WTF::NativePromiseBase **)&v26;
  uint64_t v25 = 1;
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v26, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 72) = a1 + 88;
    char v24 = (WTF::NativePromiseBase **)v4;
    int v15 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v25) = v15;
  }
  *(_DWORD *)(a1 + 84) = 0;
  HIDWORD(v25) = v6;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, &v21);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v21 = (uint64_t *)v8;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = *(unsigned int *)(a1 + 108);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  unint64_t v22 = __PAIR64__(v10, v9);
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 96, v20);
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v11);
  if (HIDWORD(v25))
  {
    uint64_t v16 = v24;
    uint64_t v17 = 8 * HIDWORD(v25);
    do
    {
      __int16 v18 = *v16++;
      WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(v18, a1, a2);
      v17 -= 8;
    }
    while (v17);
  }
  if (v10)
  {
    uint64_t v19 = 40 * v10;
    do
    {
      WTF::NativePromise<void,void,0u>::settleChainedPromise(a1, v8);
      v8 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v13);
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>>::destruct(*(unsigned int **)a1, (unsigned int **)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(unsigned int **)a1;
  if (a1 + 16 != *(void *)a1 && v4 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = 40 * v3;
    do
    {
      uint64_t v6 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v6) + 5;
      v7 -= 40;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int **WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int **__dst, _DWORD *a2)
{
  uint64_t v4 = *((unsigned int *)__dst + 3);
  if (v4) {
    WTF::VectorDestructor<true,WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>>::destruct(*__dst, (unsigned int **)&(*__dst)[2 * v4]);
  }
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(__dst, a2);
  return __dst;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = 40 * v4;
    do
    {
      uint64_t v6 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v6) + 5;
      v7 -= 40;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

WTF *WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(_DWORD *__dst, _DWORD *a2)
{
  BOOL v5 = (WTF *)(__dst + 4);
  double result = *(WTF **)__dst;
  if (result != v5)
  {
    if (result)
    {
      *(void *)__dst = 0;
      __dst[2] = 0;
      double result = (WTF *)WTF::fastFree(result, a2);
    }
    *(void *)__dst = v5;
  }
  uint64_t v6 = *(const void **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    double result = (WTF *)memcpy(v5, v6, 8 * a2[3]);
    int v7 = a2[2];
  }
  else
  {
    *(void *)a2 = a2 + 4;
    *(void *)__dst = v6;
    int v7 = a2[2];
    a2[2] = 1;
  }
  __dst[2] = v7;
  int v8 = a2[3];
  a2[3] = 0;
  __dst[3] = v8;
  return result;
}

void WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference(uint64_t a1)
{
  if (!*(unsigned char *)a1 && (uint64_t v5 = *(void *)(a1 + 8)) != 0 && (v6 = *(void *)(v5 + 8)) != 0)
  {
    uint64_t v2 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v2;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

WebKit::BackgroundProcessResponsivenessTimer *WebKit::BackgroundProcessResponsivenessTimer::BackgroundProcessResponsivenessTimer(WebKit::BackgroundProcessResponsivenessTimer *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v4 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v5, 1u);
  *(void *)this = v5;
  *((void *)this + 1) = 0x4034000000000000;
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v4);
  int v7 = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::BackgroundProcessResponsivenessTimer>((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16), v6, (uint64_t)this, (uint64_t)WebKit::BackgroundProcessResponsivenessTimer::responsivenessCheckTimerFired, 0);
  int v8 = (WTF::RunLoop *)WTF::RunLoop::main(v7);
  WTF::RunLoop::Timer::Timer<WebKit::BackgroundProcessResponsivenessTimer>((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48), v8, (uint64_t)this, (uint64_t)WebKit::BackgroundProcessResponsivenessTimer::timeoutTimerFired, 0);
  *((unsigned char *)this + 80) = 1;
  return this;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::BackgroundProcessResponsivenessTimer>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9D5890;
  v10[1] = a4;
  uint64_t v10[2] = a5;
  v10[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v10;
  return result;
}

uint64_t *WebKit::WebPasteboardProxy::singleton(WebKit::WebPasteboardProxy *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB359CE8, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_1EB359CE8, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebPasteboardProxy::singleton(void)::$_0 &&>>);
  }
  return &qword_1EB359CF8;
}

unsigned int *WebKit::UIProxyForCapture::addMessageReceiver(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(*(void *)(*(void *)(a1 + 8) + 8) + 152);
  char v6 = a2;
  return WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>(v3, &v6, a3, &v5);
}

uint64_t WebKit::GPUProcess::videoMediaStreamTrackRendererQueue(WebKit::GPUProcess *this)
{
  uint64_t result = *((void *)this + 22);
  if (!result)
  {
    WTF::WorkQueue::create();
    uint64_t v3 = *((void *)this + 22);
    *((void *)this + 22) = v4;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
    }
    return *((void *)this + 22);
  }
  return result;
}

uint64_t WebKit::GPUProcess::libWebRTCCodecsQueue(WebKit::GPUProcess *this)
{
  uint64_t result = *((void *)this + 24);
  if (!result)
  {
    WTF::WorkQueue::create();
    uint64_t v3 = *((void *)this + 24);
    *((void *)this + 24) = v4;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
    }
    return *((void *)this + 24);
  }
  return result;
}

uint64_t *WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

IPC::Encoder **IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::GPUProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::GPUProcess::*)::{lambda(Messages::GPUProcess::CreateGPUConnectionToWebProcess &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2885;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::WebProcessProxy::allProcessMap(void)::map;
  if (WebKit::WebProcessProxy::allProcessMap(void)::map)
  {
    int v3 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
    int v4 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebKit::WebProcessProxy::allProcessMap(void)::map = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      int v8 = (uint64_t *)(v2 + 16 * i);
      uint64_t v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (WebKit::WebProcessProxy::allProcessMap(void)::map) {
            int v14 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            char v6 = *(void **)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v6);
          uint64_t v21 = (uint64_t *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v20);
          uint64_t v22 = v21[1];
          v21[1] = 0;
          if (v22)
          {
            uint64_t v23 = (unsigned int *)(v22 + 48);
            if (!atomic_load(v23))
            {
              __break(0xC471u);
              JUMPOUT(0x198710234);
            }
            atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF);
          }
          *uint64_t v21 = *v8;
          uint64_t v25 = v2 + 16 * i;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v21[1] = v26;
          uint64_t v27 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v27)
          {
            uint64_t v28 = (unsigned int *)(v27 + 48);
            if (!atomic_load(v28))
            {
LABEL_31:
              __break(0xC471u);
              JUMPOUT(0x198710214);
            }
            atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF);
          }
        }
        else
        {
          uint64_t v10 = v2 + 16 * i;
          uint64_t v11 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = 0;
          if (v11)
          {
            uint64_t v12 = (unsigned int *)(v11 + 48);
            if (!atomic_load(v12)) {
              goto LABEL_31;
            }
            atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF);
          }
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  if (WebKit::WebProcessProxy::allProcessMap(void)::map
    && (int v0 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4)) != 0)
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(8u);
  }
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x98);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9CC840;
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = a2[1];
  uint64_t v6 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *(void *)(v4 + 24) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(v4 + 32) = v7;
  uint64_t v8 = a2[4];
  a2[4] = 0;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = a2[5];
  a2[5] = 0;
  *(void *)(v4 + 48) = v9;
  uint64_t v10 = a2[6];
  a2[6] = 0;
  *(void *)(v4 + 56) = v10;
  uint64_t v11 = a2[7];
  a2[7] = 0;
  *(void *)(v4 + 64) = v11;
  long long v12 = *((_OWORD *)a2 + 5);
  long long v13 = *((_OWORD *)a2 + 6);
  long long v14 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(v4 + 130) = *(_OWORD *)((char *)a2 + 122);
  *(_OWORD *)(v4 + 120) = v14;
  *(_OWORD *)(v4 + 104) = v13;
  *(_OWORD *)(v4 + 88) = v12;
  *(_OWORD *)(v4 + 72) = *((_OWORD *)a2 + 4);
  *a1 = v4;
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::add<WebKit::NetworkStorageManager&>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v23 = a3;
  uint64_t v5 = qword_1EB359928;
  if (qword_1EB359928
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0),
        (uint64_t v5 = qword_1EB359928) != 0))
  {
    int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v9 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v8 & v6;
    long long v12 = (uint64_t *)(v5 + 24 * (v8 & v6));
    long long v13 = (WTF *)*v12;
    if (!*v12)
    {
      if (v9)
      {
        *uint64_t v9 = 0;
        v9[1] = 0;
        void v9[2] = 0;
        --*(_DWORD *)(qword_1EB359928 - 16);
        long long v12 = v9;
      }
      uint64_t result = (uint64_t *)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebKit::NetworkStorageManager&>(WTF::String const&,WebKit::NetworkStorageManager&)::{lambda(void)#1}>(v12, a2, (uint64_t *)&v23);
      if (qword_1EB359928) {
        int v15 = *(_DWORD *)(qword_1EB359928 - 12) + 1;
      }
      else {
        int v15 = 1;
      }
      *(_DWORD *)(qword_1EB359928 - ++*(_DWORD *)(this + 12) = v15;
      uint64_t v16 = qword_1EB359928;
      if (qword_1EB359928) {
        int v17 = *(_DWORD *)(qword_1EB359928 - 12);
      }
      else {
        int v17 = 0;
      }
      uint64_t v18 = (*(_DWORD *)(qword_1EB359928 - 16) + v17);
      unint64_t v19 = *(unsigned int *)(qword_1EB359928 - 4);
      if (v19 > 0x400)
      {
        if (v19 > 2 * v18) {
          goto LABEL_16;
        }
      }
      else if (3 * v19 > 4 * v18)
      {
LABEL_16:
        uint64_t v20 = v16 + 24 * v19;
        char v21 = 1;
        goto LABEL_17;
      }
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12);
      long long v12 = result;
      uint64_t v16 = qword_1EB359928;
      if (qword_1EB359928) {
        LODWORD(v19) = *(_DWORD *)(qword_1EB359928 - 4);
      }
      else {
        LODWORD(v19) = 0;
      }
      goto LABEL_16;
    }
    if (v13 == (WTF *)-1)
    {
      uint64_t v9 = (uint64_t *)(v5 + 24 * v11);
      goto LABEL_25;
    }
    uint64_t result = (uint64_t *)WTF::equal(v13, *a2, a3);
    if (result) {
      break;
    }
LABEL_25:
    unsigned int v8 = i + v11;
  }
  if (qword_1EB359928) {
    unsigned int v22 = *(_DWORD *)(qword_1EB359928 - 4);
  }
  else {
    unsigned int v22 = 0;
  }
  char v21 = 0;
  uint64_t v20 = qword_1EB359928 + 24 * v22;
LABEL_17:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1, void *a2)
{
  uint64_t v4 = qword_1EB359928;
  if (qword_1EB359928)
  {
    unsigned int v5 = *(_DWORD *)(qword_1EB359928 - 4);
    int v6 = *(_DWORD *)(qword_1EB359928 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  uint64_t v9 = (_DWORD *)v7;
  uint64_t v10 = v7 + 16;
  if (a1) {
    bzero((void *)(v7 + 16), 24 * a1);
  }
  qword_1EB359928 = v10;
  void v9[2] = a1 - 1;
  v9[3] = a1;
  *uint64_t v9 = 0;
  *(_DWORD *)(qword_1EB359928 - ++*(_DWORD *)(this + 12) = v6;
  unsigned int v11 = 0;
  if (v5)
  {
    uint64_t v13 = v5;
    long long v14 = (void *)v4;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          int v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert((uint64_t)v14, v8);
          WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a2) {
            unsigned int v11 = v15;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>::~KeyValuePair((uint64_t)v14, v8);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(void *a1)
{
  if (qword_1EB359928 && (int v2 = *(_DWORD *)(qword_1EB359928 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(qword_1EB359928 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v3, a1);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a1, a2);
    uint64_t v6 = *(unsigned int *)(v2 - 4);
    if (v5) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v2 + 16 * v6;
    }
    if (v2 + 16 * v6 == v7)
    {
      return 0;
    }
    else
    {
      uint64_t v2 = *(unsigned __int16 *)(v7 + 8) | (*(unsigned __int8 *)(v7 + 10) << 16);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::remove(a1, (void *)v7);
    }
  }
  return v2;
}

unint64_t WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      IPC::Encoder *v3 = v6;
      uint64_t result = (void **)memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          IPC::Encoder *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess31CreateGPUConnectionToWebProcessEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS2_16ConnectionHandleEONS7_30GPUProcessConnectionParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDDC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess31CreateGPUConnectionToWebProcessEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS2_16ConnectionHandleEONS7_30GPUProcessConnectionParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::GPUProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::GPUProcess::*)::{lambda(Messages::GPUProcess::CreateGPUConnectionToWebProcess &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

atomic_uchar *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::GPUProxyForCapture,WebKit::GPUConnectionToWebProcess &>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9BEDF0;
  uint64_t result = *(atomic_uchar **)(a1 + 16);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  }
  v4[1] = result;
  v4[2] = a1;
  *a2 = v4;
  return result;
}

atomic_uchar *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebKit::NetworkStorageManager&>(WTF::String const&,WebKit::NetworkStorageManager&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, uint64_t *a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v6 = *a3;
  uint64_t result = *(atomic_uchar **)(v6 + 16);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  }
  unint64_t v8 = (atomic_uchar *)a1[1];
  a1[1] = (uint64_t)result;
  if (v8) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, v5);
  }
  a1[2] = v6;
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>>(unsigned char *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[120])
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
}

IPC::Encoder **IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasVP9HardwareDecoder>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 63;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

IPC::Encoder **IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasVP9HardwareDecoder>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasVP9HardwareDecoder>(a1, a2, v4);
}

IPC::Encoder **IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasAV1HardwareDecoder>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 62;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1)
{
  uint64_t v3 = IPC::Decoder::decode<unsigned int>(a1);
  if ((v3 & 0xFF00000000) != 0) {
    return IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v3);
  }
  else {
    return 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (!v4) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 4))
  {
    LODWORD(v5) = *(_DWORD *)a2;
    HIDWORD(v5) = result;
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned int *WebKit::NavigationState::createHistoryClient@<X0>(WebKit::NavigationState *this@<X0>, void *a2@<X8>)
{
  uint64_t result = WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::HistoryClient,WebKit::NavigationState&>((uint64_t)this, &v4);
  *a2 = v4;
  return result;
}

unsigned int *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::HistoryClient,WebKit::NavigationState&>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9CE8B8;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v6 = *(atomic_uint **)(a1 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  v4[1] = v6;
  *a2 = v4;
  return result;
}

void sub_198710D54(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::encode(IPC::Encoder *a1, WebCore::ScrollingStateFrameScrollingNode *this)
{
  char isMainFrame = WebCore::ScrollingStateFrameScrollingNode::isMainFrame(this);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1987115C8);
  }
  *uint64_t v5 = isMainFrame;
  long long v49 = *(_OWORD *)((char *)this + 24);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v49);
  uint64_t v51 = *((void *)&v49 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v51);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)this + 72);
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((void *)this + 5));
  uint64_t v8 = *((void *)this + 5);
  if (v8)
  {
    if (*((void *)this + 13))
    {
      long long v49 = *(_OWORD *)((char *)this + 104);
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
      LOBYTE(v49) = 0;
    }
    char v50 = v19;
    uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
    uint64_t v8 = *((void *)this + 5);
    if ((v8 & 2) == 0)
    {
LABEL_4:
      if ((v8 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_69;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)this + 32);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 4) == 0)
  {
LABEL_5:
    if ((v8 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)this + 34);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 8) == 0)
  {
LABEL_6:
    if ((v8 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)this + 36);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x10) == 0)
  {
LABEL_7:
    if ((v8 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_72;
  }
LABEL_71:
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 38));
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 39));
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x20) == 0)
  {
LABEL_8:
    if ((v8 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v49) = *((_DWORD *)this + 40);
  IPC::Encoder::operator<<<int>(a1, (int *)&v49);
  LODWORD(v49) = *((_DWORD *)this + 41);
  uint64_t result = (unsigned char *)IPC::Encoder::operator<<<int>(a1, (int *)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x40) == 0)
  {
LABEL_9:
    if ((v8 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(a1, (char *)this + 438);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x80) == 0)
  {
LABEL_10:
    if ((v8 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(a1, (uint64_t)this + 452);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x100) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(a1, (uint64_t)this + 168);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_77;
  }
LABEL_76:
  *(void *)&long long v49 = *((void *)this + 30);
  uint64_t result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x400) == 0)
  {
LABEL_13:
    if ((v8 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_78;
  }
LABEL_77:
  *(void *)&long long v49 = *((void *)this + 31);
  uint64_t result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x800) == 0)
  {
LABEL_14:
    if ((v8 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_80;
  }
LABEL_78:
  char v25 = *((unsigned char *)this + 534);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1987115E8);
  }
  unsigned char *result = v25;
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x1000) == 0)
  {
LABEL_15:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_84;
  }
LABEL_80:
  uint64_t v27 = *((void *)this + 34);
  if (v27)
  {
    long long v49 = *((_OWORD *)this + 17);
    LOBYTE(v27) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v27;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x2000) == 0)
  {
LABEL_16:
    if ((v8 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_88;
  }
LABEL_84:
  uint64_t v28 = *((void *)this + 39);
  if (v28)
  {
    long long v49 = *(_OWORD *)((char *)this + 312);
    LOBYTE(v28) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v28;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x4000) == 0)
  {
LABEL_17:
    if ((v8 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_92;
  }
LABEL_88:
  uint64_t v29 = *((void *)this + 44);
  if (v29)
  {
    long long v49 = *((_OWORD *)this + 22);
    LOBYTE(v29) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v29;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x8000) == 0)
  {
LABEL_18:
    if ((v8 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_96;
  }
LABEL_92:
  uint64_t v30 = *((void *)this + 49);
  if (v30)
  {
    long long v49 = *(_OWORD *)((char *)this + 392);
    LOBYTE(v30) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v30;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x10000) == 0)
  {
LABEL_19:
    if ((v8 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_98;
  }
LABEL_96:
  char v31 = *((unsigned char *)this + 535);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198711608);
  }
  unsigned char *result = v31;
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x20000) == 0)
  {
LABEL_20:
    if ((v8 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_99;
  }
LABEL_98:
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::MouseLocationState,void>::encode(a1, (int *)this + 105);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x40000) == 0)
  {
LABEL_21:
    if ((v8 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_100;
  }
LABEL_99:
  LOWORD(v49) = *((_WORD *)this + 208);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49);
  uint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49 + 1);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x80000) == 0)
  {
LABEL_22:
    if ((v8 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_101;
  }
LABEL_100:
  LOWORD(v49) = *((_WORD *)this + 218);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49);
  uint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49 + 1);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x100000) == 0)
  {
LABEL_23:
    if ((v8 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_102;
  }
LABEL_101:
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *((unsigned char *)this + 532));
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x200000) == 0)
  {
LABEL_24:
    if ((v8 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }
LABEL_102:
  LOBYTE(v49) = *((unsigned char *)this + 533);
  uint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x400000) == 0)
  {
LABEL_25:
    if ((v8 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_104;
  }
LABEL_103:
  LOBYTE(v49) = *((unsigned char *)this + 496);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49);
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::KeyboardScroll>,void>::encode<IPC::Encoder,std::optional<WebCore::KeyboardScroll> const&>(a1, (uint64_t)this + 500);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x800000) == 0)
  {
LABEL_26:
    if ((v8 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 213));
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v8 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_115;
  }
LABEL_105:
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)this + 776);
  uint64_t v33 = *((void *)this + 100);
  if (v33) {
    int v34 = *(_DWORD *)(v33 - 12);
  }
  else {
    int v34 = 0;
  }
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v35 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198711628);
  }
  *(_DWORD *)uint64_t result = v34;
  uint64_t v36 = *((void *)this + 100);
  if (!v36)
  {
    int v37 = 0;
    uint64_t v38 = 0;
LABEL_110:
    unint64_t v39 = (unsigned char *)(v36 + 32 * v38);
    goto LABEL_111;
  }
  uint64_t v38 = *(unsigned int *)(v36 - 4);
  unint64_t v39 = (unsigned char *)(v36 + 32 * v38);
  if (!*(_DWORD *)(v36 - 12))
  {
    int v37 = (unsigned char *)(v36 + 32 * v38);
    goto LABEL_110;
  }
  int v37 = (unsigned char *)*((void *)this + 100);
  if (v38)
  {
    uint64_t v48 = 32 * v38;
    int v37 = (unsigned char *)*((void *)this + 100);
    while (*v37 >= 0xFEu)
    {
      v37 += 32;
      v48 -= 32;
      if (!v48)
      {
        int v37 = v39;
        break;
      }
    }
  }
LABEL_111:
  if (v36) {
    uint64_t v40 = (unsigned char *)(v36 + 32 * *(unsigned int *)(v36 - 4));
  }
  else {
    uint64_t v40 = 0;
  }
  while (v37 != v40)
  {
    char v47 = v37 + 32;
    LOBYTE(v49) = *v37;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v49);
    uint64_t result = IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(v37 + 8));
    int v37 = v39;
    if (v47 != v39)
    {
      int v37 = v47;
      while (*v37 >= 0xFEu)
      {
        v37 += 32;
        if (v37 == v39)
        {
          int v37 = v39;
          break;
        }
      }
    }
  }
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v8 & 0x4000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_119;
  }
LABEL_115:
  uint64_t v41 = *((void *)this + 69);
  if (v41)
  {
    long long v49 = *(_OWORD *)((char *)this + 552);
    LOBYTE(v41) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v41;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v8 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_123;
  }
LABEL_119:
  uint64_t v42 = *((void *)this + 74);
  if (v42)
  {
    long long v49 = *((_OWORD *)this + 37);
    LOBYTE(v42) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v42;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v8 & 0x10000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_127;
  }
LABEL_123:
  uint64_t v43 = *((void *)this + 79);
  if (v43)
  {
    long long v49 = *(_OWORD *)((char *)this + 632);
    LOBYTE(v43) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v43;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_31:
    if ((v8 & 0x20000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_131;
  }
LABEL_127:
  uint64_t v44 = *((void *)this + 84);
  if (v44)
  {
    long long v49 = *((_OWORD *)this + 42);
    LOBYTE(v44) = 1;
  }
  else
  {
    LOBYTE(v49) = 0;
  }
  char v50 = v44;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_32:
    if ((v8 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_132;
  }
LABEL_131:
  LODWORD(v49) = *((_DWORD *)this + 215);
  uint64_t result = (unsigned char *)IPC::Encoder::operator<<<int>(a1, (int *)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_133;
  }
LABEL_132:
  LODWORD(v49) = *((_DWORD *)this + 216);
  uint64_t result = (unsigned char *)IPC::Encoder::operator<<<int>(a1, (int *)&v49);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_133:
  char v45 = *((unsigned char *)this + 868);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x198711648);
  }
  unsigned char *result = v45;
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x100000000) != 0)
  {
LABEL_35:
    uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 214));
    uint64_t v8 = *((void *)this + 5);
  }
LABEL_36:
  if ((v8 & 0x200000000) != 0)
  {
    char v9 = *((unsigned char *)this + 869);
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198711668);
    }
    unsigned char *result = v9;
    uint64_t v8 = *((void *)this + 5);
  }
  if ((v8 & 0x400000000) != 0)
  {
    char v11 = *((unsigned char *)this + 870);
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198711688);
    }
    unsigned char *result = v11;
    uint64_t v8 = *((void *)this + 5);
  }
  if ((v8 & 0x800000000) != 0)
  {
    char v13 = *((unsigned char *)this + 871);
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1987116A8);
    }
    unsigned char *result = v13;
    uint64_t v8 = *((void *)this + 5);
  }
  if ((v8 & 0x1000000000) != 0)
  {
    char v15 = *((unsigned char *)this + 872);
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1987116C8);
    }
    unsigned char *result = v15;
    uint64_t v8 = *((void *)this + 5);
  }
  if ((v8 & 0x2000000000) != 0)
  {
    char v17 = *((unsigned char *)this + 873);
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1987116E8);
    }
    unsigned char *result = v17;
    uint64_t v8 = *((void *)this + 5);
  }
  if ((v8 & 0x4000000000) != 0)
  {
    long long v49 = *(_OWORD *)((char *)this + 808);
    uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v49);
    uint64_t v8 = *((void *)this + 5);
    if ((v8 & 0x8000000000) == 0)
    {
LABEL_53:
      if ((v8 & 0x10000000000) == 0) {
        goto LABEL_54;
      }
      goto LABEL_61;
    }
  }
  else if ((v8 & 0x8000000000) == 0)
  {
    goto LABEL_53;
  }
  float v20 = *((float *)this + 207);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 206));
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v20);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v8 & 0x20000000000) == 0) {
      goto LABEL_55;
    }
LABEL_62:
    int v22 = *((_DWORD *)this + 212);
    *(void *)&long long v49 = *((void *)this + 105);
    DWORD2(v49) = v22;
    uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(a1, (uint64_t)&v49);
    if ((*((void *)this + 5) & 0x40000000000) == 0) {
      return result;
    }
    goto LABEL_63;
  }
LABEL_61:
  float v21 = *((float *)this + 209);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 208));
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v21);
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 0x20000000000) != 0) {
    goto LABEL_62;
  }
LABEL_55:
  if ((v8 & 0x40000000000) == 0) {
    return result;
  }
LABEL_63:
  char v23 = *((unsigned char *)this + 874);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198711708);
  }
  unsigned char *result = v23;
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1987117B8);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
      uint64_t v8 = *(void *)(a2 + 8);
      return (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v8);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1987117D8);
    }
    unsigned char *result = 0;
  }
  return result;
}

unsigned char *IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = *(uint64_t **)a2;
    do
    {
      uint64_t v8 = *v7;
      unsigned int v9 = *(unsigned __int8 *)(*v7 + 16);
      if (v9 <= 1)
      {
        LOBYTE(v38) = 0;
        IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
        uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::encode((int)a1, (WebCore::ScrollingStateFrameScrollingNode *)v8);
      }
      else if (v9 == 2)
      {
        LOBYTE(v38) = 1;
        IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
        long long v38 = *(_OWORD *)(v8 + 24);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v38);
        uint64_t v40 = *((void *)&v38 + 1);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v40);
        IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
        uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v8 + 40));
        uint64_t v10 = *(void *)(v8 + 40);
        if (v10)
        {
          if (*(void *)(v8 + 104))
          {
            long long v38 = *(_OWORD *)(v8 + 104);
            char v29 = 1;
          }
          else
          {
            char v29 = 0;
            LOBYTE(v38) = 0;
          }
          char v39 = v29;
          uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
          uint64_t v10 = *(void *)(v8 + 40);
        }
        if ((v10 & 2) != 0)
        {
          long long v38 = *(_OWORD *)(v8 + 128);
          uint64_t result = IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)&v38);
        }
      }
      else
      {
        switch(*(unsigned char *)(*v7 + 16))
        {
          case 3:
            LOBYTE(v38) = 4;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            uint64_t result = IPC::ArgumentCoder<WebCore::ScrollingStatePluginScrollingNode,void>::encode(a1, v8);
            break;
          case 4:
            LOBYTE(v38) = 5;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            uint64_t result = IPC::ArgumentCoder<WebCore::ScrollingStatePluginHostingNode,void>::encode(a1, v8);
            break;
          case 5:
            LOBYTE(v38) = 2;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            long long v38 = *(_OWORD *)(v8 + 24);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v38);
            uint64_t v40 = *((void *)&v38 + 1);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v40);
            IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
            uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v8 + 40));
            uint64_t v11 = *(void *)(v8 + 40);
            if (v11)
            {
              if (*(void *)(v8 + 104))
              {
                long long v38 = *(_OWORD *)(v8 + 104);
                char v16 = 1;
              }
              else
              {
                char v16 = 0;
                LOBYTE(v38) = 0;
              }
              char v39 = v16;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 2) != 0)
            {
              uint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(v8 + 128));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 4) != 0)
            {
              uint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(v8 + 136));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 8) != 0)
            {
              uint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(v8 + 144));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x10) != 0)
            {
              IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 152));
              uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 156));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x20) != 0)
            {
              LODWORD(v38) = *(_DWORD *)(v8 + 160);
              IPC::Encoder::operator<<<int>(a1, (int *)&v38);
              LODWORD(v38) = *(_DWORD *)(v8 + 164);
              uint64_t result = (unsigned char *)IPC::Encoder::operator<<<int>(a1, (int *)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x40) != 0)
            {
              uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(a1, (char *)(v8 + 438));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x80) != 0)
            {
              uint64_t result = IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(a1, v8 + 452);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x100) != 0)
            {
              uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(a1, v8 + 168);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x200) != 0)
            {
              *(void *)&long long v38 = *(void *)(v8 + 240);
              uint64_t result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x400) != 0)
            {
              *(void *)&long long v38 = *(void *)(v8 + 248);
              uint64_t result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x800) == 0) {
              goto LABEL_37;
            }
            char v12 = *(unsigned char *)(v8 + 534);
            uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
            if (!v13) {
              goto LABEL_110;
            }
            unsigned char *result = v12;
            uint64_t v11 = *(void *)(v8 + 40);
LABEL_37:
            if ((v11 & 0x1000) != 0)
            {
              uint64_t v17 = *(void *)(v8 + 272);
              if (v17)
              {
                long long v38 = *(_OWORD *)(v8 + 272);
                LOBYTE(v17) = 1;
              }
              else
              {
                LOBYTE(v38) = 0;
              }
              char v39 = v17;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x2000) != 0)
            {
              uint64_t v18 = *(void *)(v8 + 312);
              if (v18)
              {
                long long v38 = *(_OWORD *)(v8 + 312);
                LOBYTE(v18) = 1;
              }
              else
              {
                LOBYTE(v38) = 0;
              }
              char v39 = v18;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x4000) != 0)
            {
              uint64_t v19 = *(void *)(v8 + 352);
              if (v19)
              {
                long long v38 = *(_OWORD *)(v8 + 352);
                LOBYTE(v19) = 1;
              }
              else
              {
                LOBYTE(v38) = 0;
              }
              char v39 = v19;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x8000) != 0)
            {
              uint64_t v20 = *(void *)(v8 + 392);
              if (v20)
              {
                long long v38 = *(_OWORD *)(v8 + 392);
                LOBYTE(v20) = 1;
              }
              else
              {
                LOBYTE(v38) = 0;
              }
              char v39 = v20;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x10000) != 0)
            {
              char v14 = *(unsigned char *)(v8 + 535);
              uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
              if (!v15)
              {
                __break(0xC471u);
                JUMPOUT(0x1987120F8);
              }
              unsigned char *result = v14;
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x20000) != 0)
            {
              uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::MouseLocationState,void>::encode(a1, (int *)(v8 + 420));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x40000) != 0)
            {
              LOWORD(v38) = *(_WORD *)(v8 + 416);
              IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
              uint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38 + 1);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x80000) != 0)
            {
              LOWORD(v38) = *(_WORD *)(v8 + 436);
              IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
              uint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38 + 1);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x100000) != 0)
            {
              uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(v8 + 532));
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x200000) != 0)
            {
              LOBYTE(v38) = *(unsigned char *)(v8 + 533);
              uint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
              uint64_t v11 = *(void *)(v8 + 40);
            }
            if ((v11 & 0x400000) != 0)
            {
              LOBYTE(v38) = *(unsigned char *)(v8 + 496);
              IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::KeyboardScroll>,void>::encode<IPC::Encoder,std::optional<WebCore::KeyboardScroll> const&>(a1, v8 + 500);
            }
            break;
          case 6:
            LOBYTE(v38) = 3;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            long long v38 = *(_OWORD *)(v8 + 24);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v38);
            uint64_t v40 = *((void *)&v38 + 1);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v40);
            IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
            uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v8 + 40));
            uint64_t v21 = *(void *)(v8 + 40);
            if (v21)
            {
              if (*(void *)(v8 + 104))
              {
                long long v38 = *(_OWORD *)(v8 + 104);
                char v32 = 1;
              }
              else
              {
                char v32 = 0;
                LOBYTE(v38) = 0;
              }
              char v39 = v32;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v21 = *(void *)(v8 + 40);
            }
            if ((v21 & 2) != 0)
            {
              long long v38 = *(_OWORD *)(v8 + 128);
              IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v38);
              uint64_t v40 = *((void *)&v38 + 1);
              uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v40);
            }
            break;
          case 7:
            LOBYTE(v38) = 6;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            long long v38 = *(_OWORD *)(v8 + 24);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v38);
            uint64_t v40 = *((void *)&v38 + 1);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v40);
            IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
            uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v8 + 40));
            uint64_t v30 = *(void *)(v8 + 40);
            if (v30)
            {
              if (*(void *)(v8 + 104))
              {
                long long v38 = *(_OWORD *)(v8 + 104);
                char v31 = 1;
              }
              else
              {
                char v31 = 0;
                LOBYTE(v38) = 0;
              }
              char v39 = v31;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v30 = *(void *)(v8 + 40);
            }
            if ((v30 & 2) == 0) {
              break;
            }
            float v34 = *(float *)(v8 + 140);
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 136));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v34);
            int v35 = *(_DWORD *)(v8 + 144);
            uint64_t v36 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
            if (v37 <= 3)
            {
LABEL_110:
              __break(0xC471u);
              JUMPOUT(0x1987120D8);
            }
            _DWORD *v36 = v35;
            IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(v8 + 148));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 164));
            float v28 = *(float *)(v8 + 168);
            goto LABEL_83;
          case 8:
            LOBYTE(v38) = 7;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            long long v38 = *(_OWORD *)(v8 + 24);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v38);
            uint64_t v40 = *((void *)&v38 + 1);
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v40);
            IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
            uint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v8 + 40));
            uint64_t v22 = *(void *)(v8 + 40);
            if (v22)
            {
              if (*(void *)(v8 + 104))
              {
                long long v38 = *(_OWORD *)(v8 + 104);
                char v33 = 1;
              }
              else
              {
                char v33 = 0;
                LOBYTE(v38) = 0;
              }
              char v39 = v33;
              uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v38);
              uint64_t v22 = *(void *)(v8 + 40);
            }
            if ((v22 & 2) == 0) {
              break;
            }
            float v23 = *(float *)(v8 + 140);
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 136));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v23);
            int v24 = *(_DWORD *)(v8 + 144);
            char v25 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
            if (v26 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19871213CLL);
            }
            *char v25 = v24;
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 148));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 152));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 156));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 160));
            long long v38 = *(_OWORD *)(v8 + 164);
            IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v38);
            long long v38 = *(_OWORD *)(v8 + 180);
            IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v38);
            long long v38 = *(_OWORD *)(v8 + 196);
            IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v38);
            float v27 = *(float *)(v8 + 216);
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 212));
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v27);
            IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(v8 + 220));
            float v28 = *(float *)(v8 + 224);
LABEL_83:
            uint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v28);
            break;
          case 9:
            LOBYTE(v38) = 8;
            IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
            uint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollingStatePositionedNode,void>::encode(a1, v8);
            break;
          default:
            break;
        }
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setBackgroundExtendsBeyondPage(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 926) != a2)
  {
    *(unsigned char *)(this + 926) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundExtendsBeyondPage>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

void IPC::handleMessage<Messages::WebProcess::CreateWebPage,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters>>(&v3, a1);
  if (v5)
  {
    WebKit::WebProcess::createWebPage(a2, v3, (uint64_t)v4);
    if (v5) {
      WebKit::WebPageCreationParameters::~WebPageCreationParameters(v4);
    }
  }
}

void WebKit::WebProcess::createWebPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  uint64_t v10 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(a1 + 120), &v13, (uint64_t)&v11);
  *(unsigned char *)(a1 + 778) = 1;
  if (v12)
  {
    WebKit::WebPage::create(v13, a3, &v10);
    char v5 = v10;
    CFRetain(*((CFTypeRef *)v10 + 1));
    uint64_t v6 = *(void *)(v11 + 8);
    *(void *)(v11 + 8) = v5;
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    uint64_t v7 = *(atomic_uchar ***)(a1 + 336);
    if (v7)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(v7[3]);
      WebKit::WebPage::gpuProcessConnectionDidBecomeAvailable(v10, (WebKit::GPUProcessConnection *)v7);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(v7[3], v8);
    }
    ++*(_DWORD *)(a1 + 32);
    WebKit::WebProcess::updateIsWebTransportEnabled((WebKit::WebProcess *)a1);
    unsigned int v9 = v10;
    uint64_t v10 = 0;
    if (v9) {
      CFRelease(*((CFTypeRef *)v9 + 1));
    }
  }
  else
  {
    WebKit::WebPage::reinitializeWebPage(*(void *)(v11 + 8), a3);
  }
  if (*(unsigned char *)(a1 + 779))
  {
    *(unsigned char *)(a1 + 779) = 0;
    WebKit::WebProcess::accessibilityRelayProcessSuspended((WebKit::WebProcess *)a1, 0);
  }
}

void WebKit::WebPage::create(uint64_t a1@<X0>, uint64_t a2@<X1>, WebKit::WebProcess **a3@<X8>)
{
  uint64_t v6 = (WebKit::WebPage *)API::Object::newObject(0x9C8uLL, 140);
  uint64_t v7 = (WebKit::WebProcess *)WebKit::WebPage::WebPage((uint64_t)v6, a1, a2);
  *a3 = v7;
  uint64_t v8 = (WebKit::WebPage *)WebKit::WebProcess::singleton(v7);
  unsigned int v9 = (CFTypeRef *)*((void *)v8 + 17);
  if (v9)
  {
    CFRetain(v9[1]);
    WebKit::InjectedBundle::didCreatePage((WebKit::InjectedBundle *)v9, v6);
    CFRelease(v9[1]);
  }

  WebKit::WebPage::setHasLaunchedWebContentProcess(v8);
}

uint64_t WebKit::InjectedBundleClient::didCreatePage(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void))(result + 24);
  if (v3) {
    return v3(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(result + 16));
  }
  return result;
}

uint64_t WebKit::InjectedBundle::didCreatePage(WebKit::InjectedBundle *this, WebKit::WebPage *a2)
{
  return (*(uint64_t (**)(void, WebKit::InjectedBundle *, WebKit::WebPage *))(**((void **)this + 5) + 16))(*((void *)this + 5), this, a2);
}

uint64_t WebKit::WebProcess::updateIsWebTransportEnabled(WebKit::WebProcess *this)
{
  uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 15);
  if (v6) {
    uint64_t v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == result)
  {
    char v8 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t result = WebKit::WebPage::isWebTransportEnabled(*(WebKit::WebPage **)(v3 + 8));
      if (result) {
        break;
      }
      while (1)
      {
        v3 += 16;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v3 = v5;
LABEL_9:
      char v8 = 0;
      if (v3 == v7) {
        goto LABEL_5;
      }
    }
    char v8 = 1;
  }
LABEL_5:
  *((unsigned char *)this + 780) = v8;
  return result;
}

uint64_t WebKit::WebPage::isWebTransportEnabled(WebKit::WebPage *this)
{
  return *(unsigned char *)(*(void *)(*((void *)this + 6) + 112) + 711) & 1;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v7;
  unsigned int v9 = (void *)(v6 + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = *a2;
  if (*v9)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (v10 == v11)
      {
        uint64_t v23 = *a1;
        if (*a1) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 16 * v24;
        goto LABEL_14;
      }
      if (v10 == -1) {
        uint64_t v21 = v9;
      }
      unsigned int v8 = (v8 + v22) & v7;
      unsigned int v9 = (void *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      ++v22;
    }
    while (*v9);
    if (v21)
    {
      *uint64_t v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v11 = *a2;
      unsigned int v9 = v21;
    }
  }
  uint64_t v12 = v9[1];
  *unsigned int v9 = v11;
  v9[1] = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = *a1;
  if (*a1) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - ++*(_DWORD *)(this + 12) = v14;
  uint64_t v15 = *a1;
  if (*a1) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_13;
    }
LABEL_25:
    unsigned int v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, v9);
    uint64_t v15 = *a1;
    if (*a1) {
      unint64_t v18 = *(unsigned int *)(v15 - 4);
    }
    else {
      unint64_t v18 = 0;
    }
    goto LABEL_13;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_25;
  }
LABEL_13:
  uint64_t v19 = v15 + 16 * v18;
  char v20 = 1;
LABEL_14:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v19;
  *(unsigned char *)(a3 + 16) = v20;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    int v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          int v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(*a1, v14);
          uint64_t v17 = v14[1];
          v14[1] = 0;
          if (v17) {
            CFRelease(*(CFTypeRef *)(v17 + 8));
          }
          if (v14 == a3) {
            uint64_t v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = v14[1];
          v14[1] = 0;
          if (v15) {
            CFRelease(*(CFTypeRef *)(v15 + 8));
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v4, a2);
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[1488])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t didCreatePage(const OpaqueWKBundle *a1, OpaqueWKBundlePage *a2, void *a3)
{
  int v5 = (void *)a3[9];
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v7 = *(void *)([(OpaqueWKBundlePage *)a2 _apiObject] + 8);
    return [v5 webProcessPlugIn:a3 didCreateBrowserContextController:v7];
  }
  return result;
}

void *WKBundlePageSetResourceLoadClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  Client = (void *)WebKit::InjectedBundlePageResourceLoadClient::InjectedBundlePageResourceLoadClient(v4, a2);
  WebKit::WebPage::setInjectedBundleResourceLoadClient(v3, &Client);
  uint64_t result = Client;
  Client = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPage::setInjectedBundleResourceLoadClient(uint64_t a1, void **a2)
{
  if (*(void *)(a1 + 368))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    void *v3 = &unk_1EEA009F0;
  }
  uint64_t result = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = v3;
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::InjectedBundlePageResourceLoadClient(uint64_t result, long long *a2)
{
  *(_OWORD *)(result + 8) = 0u;
  char v2 = (_OWORD *)(result + 8);
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(void *)uint64_t result = &unk_1EE9F0AC8;
  if (a2)
  {
    int v3 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      _OWORD *v2 = *a2;
      long long v4 = a2[1];
      long long v5 = a2[2];
      long long v6 = a2[4];
      *(_OWORD *)(result + 56) = a2[3];
      *(_OWORD *)(result + 72) = v6;
      *(_OWORD *)(result + 24) = v4;
      *(_OWORD *)(result + 40) = v5;
    }
    else if (v3 <= 0)
    {
      if (v3)
      {
        __break(1u);
      }
      else
      {
        long long v7 = *a2;
        long long v8 = a2[1];
        long long v9 = a2[3];
        *(_OWORD *)(result + 40) = a2[2];
        *(_OWORD *)(result + 56) = v9;
        _OWORD *v2 = v7;
        *(_OWORD *)(result + 24) = v8;
      }
    }
  }
  return result;
}

uint64_t WKBundlePageSetPageLoaderClient(void *a1, _DWORD *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x150);
  uint64_t v6 = WebKit::InjectedBundlePageLoaderClient::InjectedBundlePageLoaderClient(v4, a2);
  WebKit::WebPage::setInjectedBundlePageLoaderClient(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPage::setInjectedBundlePageLoaderClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t v4 = *(void *)(a1 + 360);
    *(void *)(a1 + 360) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v3 = *(void *)(a1 + 360);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
    if ((_WORD)result && *(void *)(a1 + 48))
    {
      return WebCore::Page::addLayoutMilestones();
    }
  }
  else
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v6 = &unk_1EEA008C8;
    uint64_t result = *(void *)(a1 + 360);
    *(void *)(a1 + 360) = v6;
    if (result)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v7();
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::layoutMilestones(WebKit::InjectedBundlePageLoaderClient *this)
{
  uint64_t v1 = (uint64_t (*)(void))*((void *)this + 40);
  if (v1) {
    return v1(*((void *)this + 2)) & 0x1B7;
  }
  if (*((void *)this + 13)) {
    return (*((void *)this + 12) != 0) | 2u;
  }
  return *((void *)this + 12) != 0;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::InjectedBundlePageLoaderClient(uint64_t a1, _DWORD *a2)
{
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = a1 + 8;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(void *)a1 = &unk_1EE9F09A0;
  API::Client<WKBundlePageLoaderClientBase>::initialize((void *)v3, a2);
  return a1;
}

void *API::Client<WKBundlePageLoaderClientBase>::initialize(void *result, _DWORD *a2)
{
  if (!a2)
  {
    result[40] = 0;
    *((_OWORD *)result + 18) = 0u;
    *((_OWORD *)result + 19) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 17) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + ++*(_DWORD *)(this + 12) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    return result;
  }
  if (*a2 == 11)
  {
    size_t v3 = 328;
    return memcpy(result, a2, v3);
  }
  result[40] = 0;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + ++*(_DWORD *)(this + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  uint64_t v2 = *a2;
  if ((int)v2 <= 10)
  {
    if (v2 >= 0xC)
    {
      __break(1u);
      return result;
    }
    size_t v3 = qword_1994F7738[v2];
    return memcpy(result, a2, v3);
  }
  return result;
}

uint64_t layoutMilestones(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 314);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [WeakRetained webProcessPlugInBrowserContextControllerRenderingProgressEvents:a1];
    if (!WeakRetained) {
      return v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (WeakRetained) {
LABEL_5:
  }
    CFRelease(WeakRetained);
  return v3;
}

void sub_198713030(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::RemotePageParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a1 = 0;
    a1[216] = 0;
    return result;
  }
  if ((_BYTE)result)
  {
    IPC::Decoder::decode<WebKit::RemotePageParameters>(v7, a2);
    char v6 = v8;
    if (!v8)
    {
      *a1 = 0;
      goto LABEL_5;
    }
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::RemotePageParameters>((uint64_t)a1, (uint64_t)v7);
  }
  else
  {
    v7[0] = 0;
    char v8 = 0;
    std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v7);
  }
  char v6 = 1;
LABEL_5:
  a1[216] = v6;
  return std::optional<WebKit::RemotePageParameters>::~optional((uint64_t)v7, v5);
}

void sub_1987130F8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::optional<WebKit::RemotePageParameters>::~optional((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebKit::RemotePageParameters>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(unsigned char *)(a1 + 200)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 80), a2);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
    long long v5 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    char v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t)a1, (unint64_t *)a2, (uint64_t)v5);
  }
  else
  {
    *a1 = 0;
    a1[1488] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  IPC::Decoder::decode<WebKit::WebPageCreationParameters>(a2, v5);
  if (v6)
  {
    if (*(unsigned char *)(a3 + 8))
    {
      *(void *)a1 = *(void *)a3;
      WebKit::WebPageCreationParameters::WebPageCreationParameters(a1 + 8, (uint64_t *)v5);
      *(unsigned char *)(a1 + 1488) = 1;
      if (v6) {
        WebKit::WebPageCreationParameters::~WebPageCreationParameters(v5);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 1488) = 0;
  }
}

uint64_t WebKit::WebPageCreationParameters::WebPageCreationParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 29) = 0;
  uint64_t v5 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  char v6 = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 36) = v6;
  *(void *)(a1 + 53) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = a2[5];
  a2[5] = 0;
  *(void *)(a1 + 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + ++*(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(a1 + 48) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 52) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v7;
  LOBYTE(v7) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = 0;
  *(unsigned char *)(a1 + 60) = v7;
  long long v8 = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 64) = v8;
  uint64_t v9 = a2[11];
  a2[11] = 0;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  WebCore::Color::Color();
  long long v10 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 120) = v10;
  long long v11 = *(_OWORD *)(a2 + 19);
  long long v12 = *(_OWORD *)(a2 + 21);
  long long v13 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  uint64_t v14 = a2[27];
  a2[27] = 0;
  char v15 = *((unsigned char *)a2 + 224);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = v14;
  *(unsigned char *)(a1 + 224) = v15;
  *(void *)(a1 + 240) = 0;
  uint64_t v16 = a2[29];
  a2[29] = 0;
  *(void *)(a1 + 232) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(a1 + 244) = v16;
  long long v17 = *(_OWORD *)(a2 + 31);
  long long v18 = *(_OWORD *)(a2 + 35);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 280) = v18;
  *(_OWORD *)(a1 + 248) = v17;
  long long v19 = *(_OWORD *)(a2 + 37);
  long long v20 = *(_OWORD *)(a2 + 39);
  long long v21 = *(_OWORD *)(a2 + 41);
  *(_DWORD *)(a1 + 343) = *(_DWORD *)((char *)a2 + 343);
  *(_OWORD *)(a1 + 3++*(_DWORD *)(this + 12) = v20;
  *(_OWORD *)(a1 + 328) = v21;
  *(_OWORD *)(a1 + 296) = v19;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  uint64_t v22 = a2[44];
  a2[44] = 0;
  *(void *)(a1 + 352) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 90);
  *((_DWORD *)a2 + 90) = 0;
  *(_DWORD *)(a1 + 360) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 91);
  *((_DWORD *)a2 + 91) = 0;
  *(_DWORD *)(a1 + 364) = v22;
  *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
  long long v23 = *((_OWORD *)a2 + 24);
  long long v24 = *((_OWORD *)a2 + 25);
  long long v25 = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 27);
  *(_OWORD *)(a1 + 416) = v25;
  *(_OWORD *)(a1 + 400) = v24;
  *(_OWORD *)(a1 + 384) = v23;
  long long v26 = *((_OWORD *)a2 + 28);
  long long v27 = *((_OWORD *)a2 + 29);
  long long v28 = *((_OWORD *)a2 + 30);
  *(unsigned char *)(a1 + 496) = *((unsigned char *)a2 + 496);
  *(_OWORD *)(a1 + 480) = v28;
  *(_OWORD *)(a1 + 464) = v27;
  *(_OWORD *)(a1 + 448) = v26;
  WebCore::Color::Color();
  *(unsigned char *)(a1 + 5++*(_DWORD *)(this + 12) = *((unsigned char *)a2 + 512);
  *(_OWORD *)(a1 + 520) = 0u;
  uint64_t v29 = a2[65];
  a2[65] = 0;
  *(void *)(a1 + 520) = v29;
  LODWORD(v29) = *((_DWORD *)a2 + 132);
  *((_DWORD *)a2 + 132) = 0;
  *(_DWORD *)(a1 + 528) = v29;
  LODWORD(v29) = *((_DWORD *)a2 + 133);
  *((_DWORD *)a2 + 133) = 0;
  *(_DWORD *)(a1 + 532) = v29;
  *(_OWORD *)(a1 + 536) = 0u;
  uint64_t v30 = a2[67];
  a2[67] = 0;
  *(void *)(a1 + 536) = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 136);
  *((_DWORD *)a2 + 136) = 0;
  *(_DWORD *)(a1 + 544) = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 137);
  *((_DWORD *)a2 + 137) = 0;
  *(_DWORD *)(a1 + 548) = v30;
  *(_OWORD *)(a1 + 552) = 0u;
  uint64_t v31 = a2[69];
  a2[69] = 0;
  *(void *)(a1 + 552) = v31;
  LODWORD(v31) = *((_DWORD *)a2 + 140);
  *((_DWORD *)a2 + 140) = 0;
  *(_DWORD *)(a1 + 560) = v31;
  LODWORD(v31) = *((_DWORD *)a2 + 141);
  *((_DWORD *)a2 + 141) = 0;
  *(_DWORD *)(a1 + 564) = v31;
  *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
  uint64_t v32 = a2[72];
  a2[72] = 0;
  *(void *)(a1 + 576) = v32;
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 73);
  *(void *)(a1 + 600) = 0;
  uint64_t v33 = a2[75];
  a2[75] = 0;
  *(void *)(a1 + 600) = v33;
  *(_OWORD *)(a1 + 608) = 0u;
  uint64_t v34 = a2[76];
  a2[76] = 0;
  *(void *)(a1 + 608) = v34;
  LODWORD(v34) = *((_DWORD *)a2 + 154);
  *((_DWORD *)a2 + 154) = 0;
  *(_DWORD *)(a1 + 616) = v34;
  LODWORD(v34) = *((_DWORD *)a2 + 155);
  *((_DWORD *)a2 + 155) = 0;
  *(_DWORD *)(a1 + 620) = v34;
  std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 624), (uint64_t)(a2 + 78));
  __int16 v35 = *((_WORD *)a2 + 452);
  *(unsigned char *)(a1 + 906) = *((unsigned char *)a2 + 906);
  *(_WORD *)(a1 + 904) = v35;
  *(void *)(a1 + 9++*(_DWORD *)(this + 12) = a2[114];
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 928) = 0;
  uint64_t v36 = a2[115];
  a2[115] = 0;
  *(void *)(a1 + 920) = v36;
  LODWORD(v36) = *((_DWORD *)a2 + 232);
  *((_DWORD *)a2 + 232) = 0;
  *(_DWORD *)(a1 + 928) = v36;
  LODWORD(v36) = *((_DWORD *)a2 + 233);
  *((_DWORD *)a2 + 233) = 0;
  *(_DWORD *)(a1 + 932) = v36;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  uint64_t v37 = a2[117];
  a2[117] = 0;
  *(void *)(a1 + 936) = v37;
  LODWORD(v37) = *((_DWORD *)a2 + 236);
  *((_DWORD *)a2 + 236) = 0;
  *(_DWORD *)(a1 + 944) = v37;
  LODWORD(v37) = *((_DWORD *)a2 + 237);
  *((_DWORD *)a2 + 237) = 0;
  *(_DWORD *)(a1 + 948) = v37;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 952) = 0;
  uint64_t v38 = a2[119];
  a2[119] = 0;
  *(void *)(a1 + 952) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 240);
  *((_DWORD *)a2 + 240) = 0;
  *(_DWORD *)(a1 + 960) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 241);
  *((_DWORD *)a2 + 241) = 0;
  *(_DWORD *)(a1 + 964) = v38;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 968) = 0;
  uint64_t v39 = a2[121];
  a2[121] = 0;
  *(void *)(a1 + 968) = v39;
  LODWORD(v39) = *((_DWORD *)a2 + 244);
  *((_DWORD *)a2 + 244) = 0;
  *(_DWORD *)(a1 + 976) = v39;
  LODWORD(v39) = *((_DWORD *)a2 + 245);
  *((_DWORD *)a2 + 245) = 0;
  *(_DWORD *)(a1 + 980) = v39;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 984) = 0;
  uint64_t v40 = a2[123];
  a2[123] = 0;
  *(void *)(a1 + 984) = v40;
  LODWORD(v40) = *((_DWORD *)a2 + 248);
  *((_DWORD *)a2 + 248) = 0;
  *(_DWORD *)(a1 + 992) = v40;
  LODWORD(v40) = *((_DWORD *)a2 + 249);
  *((_DWORD *)a2 + 249) = 0;
  *(_DWORD *)(a1 + 996) = v40;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1032) = 0;
  if (*((unsigned char *)a2 + 1032))
  {
    uint64_t v41 = a2[125];
    *(unsigned char *)(a1 + 1008) = *((unsigned char *)a2 + 1008);
    *(void *)(a1 + 1000) = v41;
    *(void *)(a1 + 1024) = 0;
    *(void *)(a1 + 1016) = 0;
    uint64_t v42 = a2[127];
    a2[127] = 0;
    *(void *)(a1 + 1016) = v42;
    LODWORD(v42) = *((_DWORD *)a2 + 256);
    *((_DWORD *)a2 + 256) = 0;
    *(_DWORD *)(a1 + 1024) = v42;
    LODWORD(v42) = *((_DWORD *)a2 + 257);
    *((_DWORD *)a2 + 257) = 0;
    *(_DWORD *)(a1 + 1028) = v42;
    *(unsigned char *)(a1 + 1032) = 1;
  }
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 1040), (uint64_t)(a2 + 130));
  *(_OWORD *)(a1 + 1056) = *((_OWORD *)a2 + 66);
  uint64_t v43 = a2[134];
  a2[134] = 0;
  *(void *)(a1 + 1072) = v43;
  *(_OWORD *)(a1 + 1080) = 0u;
  uint64_t v44 = a2[135];
  a2[135] = 0;
  *(void *)(a1 + 1080) = v44;
  LODWORD(v44) = *((_DWORD *)a2 + 272);
  *((_DWORD *)a2 + 272) = 0;
  *(_DWORD *)(a1 + 1088) = v44;
  LODWORD(v44) = *((_DWORD *)a2 + 273);
  *((_DWORD *)a2 + 273) = 0;
  *(_DWORD *)(a1 + 1092) = v44;
  *(void *)(a1 + 1096) = 0;
  uint64_t v45 = a2[137];
  a2[137] = 0;
  *(void *)(a1 + 1096) = v45;
  *(_WORD *)(a1 + 1104) = *((_WORD *)a2 + 552);
  std::__optional_move_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__optional_move_base[abi:sn180100](a1 + 1112, a2 + 139);
  int v46 = *((_DWORD *)a2 + 286);
  *(_DWORD *)(a1 + 1147) = *(_DWORD *)((char *)a2 + 1147);
  *(_DWORD *)(a1 + 1144) = v46;
  uint64_t v47 = a2[144];
  a2[144] = 0;
  *(void *)(a1 + 1152) = v47;
  long long v48 = *(_OWORD *)(a2 + 145);
  *(void *)(a1 + 1173) = *(uint64_t *)((char *)a2 + 1173);
  *(_OWORD *)(a1 + 1160) = v48;
  std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 1184), (uint64_t)(a2 + 148));
  long long v49 = *(_OWORD *)(a2 + 175);
  long long v50 = *(_OWORD *)(a2 + 177);
  *(void *)(a1 + 1432) = a2[179];
  *(_OWORD *)(a1 + 1400) = v49;
  *(_OWORD *)(a1 + 1416) = v50;
  *(_OWORD *)(a1 + 1440) = 0u;
  uint64_t v51 = a2[180];
  a2[180] = 0;
  *(void *)(a1 + 1440) = v51;
  LODWORD(v51) = *((_DWORD *)a2 + 362);
  *((_DWORD *)a2 + 362) = 0;
  *(_DWORD *)(a1 + 1448) = v51;
  LODWORD(v51) = *((_DWORD *)a2 + 363);
  *((_DWORD *)a2 + 363) = 0;
  *(_DWORD *)(a1 + 1452) = v51;
  *(_OWORD *)(a1 + 1456) = 0u;
  uint64_t v52 = a2[182];
  a2[182] = 0;
  *(void *)(a1 + 1456) = v52;
  LODWORD(v52) = *((_DWORD *)a2 + 366);
  *((_DWORD *)a2 + 366) = 0;
  *(_DWORD *)(a1 + 1464) = v52;
  LODWORD(v52) = *((_DWORD *)a2 + 367);
  *((_DWORD *)a2 + 367) = 0;
  *(_DWORD *)(a1 + 1468) = v52;
  uint64_t v53 = a2[184];
  a2[184] = 0;
  *(void *)(a1 + 1472) = v53;
  return a1;
}

void sub_198713864(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t *a14)
{
  long long v23 = *(WTF::StringImpl **)(v14 + 1152);
  *(void *)(v14 + 1152) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (*(unsigned char *)(v14 + 1136) && *v17) {
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(*v17, (WTF::StringImpl *)*(unsigned int *)(v14 + 1120));
  }
  long long v24 = *(WTF::StringImpl ***)(v14 + 1096);
  if (v24) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  long long v26 = *(WTF::StringImpl **)(v14 + 1072);
  *(void *)(v14 + 1072) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (*(unsigned char *)(v14 + 1048))
  {
    uint64_t v27 = *v22;
    if ((*v22 & 0x8000000000000) != 0)
    {
      long long v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v25);
      }
    }
  }
  if (*(unsigned char *)(v14 + 1032)) {
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 1016, v25);
  }
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 984, v25);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 968, v29);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 952, v30);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v14 + 936), v31);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 920, v32);
  if (*(unsigned char *)(v14 + 896)) {
    WebCore::ApplicationManifest::~ApplicationManifest(v21, v33);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 608, v33);
  __int16 v35 = *(WTF::StringImpl ***)(v14 + 600);
  if (v35) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v34);
  }
  uint64_t v36 = *(WTF::StringImpl **)(v14 + 576);
  *(void *)(v14 + 576) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v34);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20, v34);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, v37);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, v38);
  uint64_t v40 = *a13;
  if ((*a13 & 0x8000000000000) != 0)
  {
    uint64_t v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v39);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16 + 120, v39);
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v42);
  uint64_t v44 = *(WTF::StringImpl **)(v14 + 216);
  *(void *)(v14 + 216) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v43);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  uint64_t v45 = *a14;
  if ((*a14 & 0x8000000000000) != 0)
  {
    int v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, v43);
    }
  }
  uint64_t v47 = *(WTF::StringImpl **)(v14 + 88);
  *(void *)(v14 + 88) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v43);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  if (*v19) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*v19, (WTF::StringImpl *)*(unsigned int *)(v14 + 48));
  }
  if (*v18) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*v18, (WTF::StringImpl *)*(unsigned int *)(v14 + 24));
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    WebCore::Color::Color();
    a1[8] = 1;
  }
  return a1;
}

void sub_198713B04(_Unwind_Exception *a1, void *a2)
{
  std::optional<WebCore::Color>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[272] = 0;
  if (*(unsigned char *)(a2 + 272))
  {
    WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a1, (uint64_t *)a2);
    a1[272] = 1;
  }
  return a1;
}

void sub_198713B60(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 272)) {
    WebCore::ApplicationManifest::~ApplicationManifest(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[208] = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    std::construct_at[abi:sn180100]<WebKit::RemotePageParameters,WebKit::RemotePageParameters,WebKit::RemotePageParameters*>((uint64_t)a1, a2);
    a1[208] = 1;
  }
  return a1;
}

void sub_198713BC8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebKit::RemotePageParameters>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 13) = 0;
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v2;
    LOBYTE(v2) = *((unsigned char *)a2 + 20);
    *((unsigned char *)a2 + 20) = 0;
    *(unsigned char *)(result + 20) = v2;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

void IPC::Decoder::decode<WebKit::WebPageCreationParameters>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::decode(a1, a2);
  if (!a2[1480])
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
}

uint64_t IPC::handleMessage<Messages::EventDispatcher::PageScreenDidChange,WebKit::EventDispatcher,WebKit::EventDispatcher,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>)>(IPC::Decoder *a1, WTF *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>>(&v4, a1);
  if (v5)
  {
    return WTF::isIntegralOrPointerType(a2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t WebKit::WebSQLiteDatabaseTracker::willBeginFirstTransaction(uint64_t this)
{
  uint64_t v1 = this;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(this + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 24), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = MEMORY[0x19972E8D0](this + 24);
  }
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4)
  {
    *(void *)(v1 + 32) = v4 + 1;
  }
  else if (!*(unsigned char *)(v1 + 40))
  {
    this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), 1);
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return this;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_0,void,BOOL>::call(WTF::StringImpl *result, void *a2)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v3 = *(void *)(v2 + 328);
  if (a2)
  {
    if (!v3 || *(unsigned char *)(v3 + 48))
    {
      pid_t v4 = getpid();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v11 = 0;
      uint64_t v5 = WTF::fastMalloc((WTF *)0xB0);
      char v6 = (WebKit::ProcessAssertion *)WebKit::ProcessAssertion::ProcessAssertion(v5, v4, (_DWORD **)&v12, 5, MEMORY[0x1E4F30980]);
      WebKit::ProcessAssertion::aquireAssertion(v6, 0, &v11);
      uint64_t v8 = *(void *)(v2 + 328);
      *(void *)(v2 + 328) = v5;
      if (v8) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 8), v7);
      }
      uint64_t v9 = v11;
      uint64_t v11 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      uint64_t result = v12;
      long long v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(void *)(v2 + 328) = 0;
    if (v3)
    {
      long long v10 = *(atomic_uchar **)(v3 + 8);
      return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(v10, a2);
    }
  }
  return result;
}

uint64_t WebKit::ProcessAssertion::ProcessAssertion(uint64_t a1, int a2, _DWORD **a3, char a4, const WTF::String **a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1994F5F10;
  *(void *)(v10 + 24) = a1;
  *(void *)a1 = &unk_1EE9CF770;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a2;
  uint64_t v11 = *a3;
  if (*a3) {
    *v11 += 2;
  }
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 144) = 0;
  WebKit::ProcessAssertion::init((WebKit::ProcessAssertion *)a1, *a5);
  return a1;
}

void sub_198714030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 168))
  {
    uint64_t v20 = *(unsigned int *)(v13 + 160);
    if (v20 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CFBE8[v20])(&a13, v16);
    }
    *(_DWORD *)(v13 + 160) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v15);
  if (*(unsigned char *)(v13 + 128)) {
    WebKit::AssertionCapability::~AssertionCapability(v14);
  }
  uint64_t v22 = *(void *)(v13 + 64);
  *(void *)(v13 + 64) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *v18;
  uint64_t *v18 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  long long v24 = *(const void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v24) {
    CFRelease(v24);
  }
  long long v25 = *v17;
  void *v17 = 0;
  if (v25) {
    CFRelease(v25);
  }
  long long v26 = *(WTF::StringImpl **)(v13 + 24);
  *(void *)(v13 + 24) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v21);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::init(WebKit::ProcessAssertion *this, const WTF::String *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  switch(*((unsigned char *)this + 16))
  {
    case 1:
      uint64_t v3 = "Background";
      goto LABEL_6;
    case 2:
      uint64_t v3 = "UnboundedNetworking";
      uint64_t v4 = 20;
      break;
    case 3:
      uint64_t v3 = "Foreground";
LABEL_6:
      uint64_t v4 = 11;
      break;
    case 4:
      uint64_t v3 = "MediaPlayback";
      goto LABEL_11;
    case 5:
      uint64_t v3 = "FinishTaskCanSleep";
      uint64_t v4 = 19;
      break;
    case 6:
      uint64_t v3 = "FinishTaskInterruptable";
      uint64_t v4 = 24;
      break;
    case 7:
      uint64_t v3 = "BoostedJetsam";
LABEL_11:
      uint64_t v4 = 14;
      break;
    default:
      uint64_t v3 = "Suspended";
      uint64_t v4 = 10;
      break;
  }
  uint64_t v5 = *((unsigned int *)this + 5);
  if ((int)v5 > 0)
  {
    if (a2 && *((_DWORD *)a2 + 1)) {
      uint64_t v6 = [MEMORY[0x1E4F96478] targetWithPid:v5 environmentIdentifier:WTF::StringImpl::operator NSString *()];
    }
    else {
      uint64_t v6 = [MEMORY[0x1E4F96478] targetWithPid:*((unsigned int *)this + 5)];
    }
    uint64_t v9 = v6;
    uint64_t v10 = (void *)MEMORY[0x1E4F96358];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v11 = *(WTF::StringImpl **)buf;
    if (*(void *)buf) {
      long long v12 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v12 = &stru_1EEA10550;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (*(void *)buf) {
      uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v13 = &stru_1EEA10550;
    }
    uint64_t v15 = [v10 attributeWithDomain:v12 name:v13];
    if (*(void *)buf)
    {
      if (**(_DWORD **)buf == 2)
      {
        WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, v14);
LABEL_29:
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v14);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
LABEL_32:
        id v16 = objc_alloc(MEMORY[0x1E4F96318]);
        if (*((void *)this + 3)) {
          long long v17 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          long long v17 = &stru_1EEA10550;
        }
        uint64_t v28 = v15;
        uint64_t v18 = objc_msgSend(v16, "initWithExplanation:target:attributes:", v17, v9, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v28, 1));
        long long v19 = (const void *)*((void *)this + 4);
        *((void *)this + 4) = v18;
        if (v19) {
          CFRelease(v19);
        }
        uint64_t v20 = objc_alloc_init(WKRBSAssertionDelegate);
        long long v21 = (const void *)*((void *)this + 5);
        *((void *)this + 5) = v20;
        if (v21)
        {
          CFRelease(v21);
          uint64_t v20 = (WKRBSAssertionDelegate *)*((void *)this + 5);
        }
        [*((id *)this + 4) addObserver:v20];
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 3221225472;
        v26[2] = ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke;
        v26[3] = &__block_descriptor_56_e5_v8__0l;
        v26[4] = this;
        v26[5] = v3;
        v26[6] = v4;
        [*((id *)this + 5) setInvalidationCallback:v26];
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke_113;
        v25[3] = &__block_descriptor_56_e5_v8__0l;
        v25[4] = this;
        v25[5] = v3;
        v25[6] = v4;
        return [*((id *)this + 5) setPrepareForInvalidationCallback:v25];
      }
      **(_DWORD **)buf -= 2;
    }
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  uint64_t v7 = qword_1EB358348;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR);
  if (result)
  {
    WTF::String::utf8();
    uint64_t v22 = v27 ? (char *)v27 + 16 : 0;
    int v23 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218754;
    *(void *)&uint8_t buf[4] = this;
    __int16 v30 = 2082;
    uint64_t v31 = v3;
    __int16 v32 = 2082;
    uint64_t v33 = v22;
    __int16 v34 = 1024;
    int v35 = v23;
    _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - ProcessAssertion: Failed to acquire RBS %{public}s assertion '%{public}s' for process because PID %d is invalid", buf, 0x26u);
    uint64_t result = (uint64_t)v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1) {
        uint64_t result = WTF::fastFree((WTF *)result, v24);
      }
      else {
        --*(_DWORD *)result;
      }
    }
  }
  *((unsigned char *)this + 48) = 1;
  return result;
}

void sub_198714580(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ProcessAssertion::aquireAssertion(WebKit::ProcessAssertion *a1, int a2, uint64_t *a3)
{
  if (a2)
  {
    WebKit::ProcessAssertion::acquireAsync((uint64_t)a1, a3);
  }
  else
  {
    WebKit::ProcessAssertion::acquireSync(a1);
    uint64_t v4 = *a3;
    if (*a3)
    {
      *a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t v5 = *(void (**)(uint64_t))(*(void *)v4 + 8);
      v5(v4);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CC868;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E5E10;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D3088;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D31C8;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB218;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest((WebKit *)(a1 + 16), a2);
  if (v2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = isFullWebBrowserOrRunningTest == 0;
  }
  if (v4) {
    goto LABEL_10;
  }
  if ((isFullWebBrowserOrRunningTest & 1) == 0)
  {
    if ((byte_1EB359009 & 1) == 0)
    {
      uint64_t isFullWebBrowserOrRunningTest = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"NSCrossWebsiteTrackingUsageDescription");
      _MergedGlobals_58 = isFullWebBrowserOrRunningTest != 0;
      byte_1EB359009 = 1;
    }
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_58);
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
  }
  TCC_kTCCServiceWebKitIntelligentTrackingPrevention = (WebKit *)WebKit::get_TCC_kTCCServiceWebKitIntelligentTrackingPrevention((WebKit *)isFullWebBrowserOrRunningTest);
  uint64_t isFullWebBrowserOrRunningTest = WebKit::softLinkTCCTCCAccessPreflight(TCC_kTCCServiceWebKitIntelligentTrackingPrevention, 0, v7);
  if (isFullWebBrowserOrRunningTest == 1) {
LABEL_10:
  }
    unsigned __int8 v8 = 2;
  else {
LABEL_11:
  }
    unsigned __int8 v8 = 1;
  atomic_store(v8, WebKit::currentTrackingPreventionState);
  WTF::RunLoop::main((WTF::RunLoop *)isFullWebBrowserOrRunningTest);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9BEA08;
  uint64_t v11 = v9;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v11;
  if (v11) {
    return (*(uint64_t (**)(void *))(*v11 + 8))(v11);
  }
  return result;
}

void sub_1987149CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::get_TCC_kTCCServiceWebKitIntelligentTrackingPrevention(WebKit *this)
{
  if (qword_1EB358E98 != -1) {
    dispatch_once(&qword_1EB358E98, &__block_literal_global_14_1);
  }
  return qword_1EB358E90;
}

const void **WebKit::SessionWrapper::initialize(uint64_t a1, WebKit::AuxiliaryProcess *a2, WebKit **a3, int a4)
{
  int isParentProcessAFullWebBrowser = WebKit::isParentProcessAFullWebBrowser(a3[4], a2);
  if (![(WebKit::AuxiliaryProcess *)a2 _sourceApplicationSecondaryIdentifier]
    && isParentProcessAFullWebBrowser)
  {
    [(WebKit::AuxiliaryProcess *)a2 set_sourceApplicationSecondaryIdentifier:@"com.apple.WebKit.InAppBrowser"];
  }
  WebKit::NetworkSessionCocoa::applyProxyConfigurationToSessionConfiguration((WebKit::NetworkSessionCocoa *)a3, (NSURLSessionConfiguration *)a2);
  uint64_t v9 = [[WKNetworkSessionDelegate alloc] initWithNetworkSession:a3 wrapper:a1 withCredentials:a4 == 1];
  uint64_t v10 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  if (v10)
  {
    CFRelease(v10);
    uint64_t v9 = *(WKNetworkSessionDelegate **)(a1 + 16);
  }
  uint64_t v11 = (const void *)objc_msgSend(MEMORY[0x1E4F18DC0], "sessionWithConfiguration:delegate:delegateQueue:", a2, v9, objc_msgSend(MEMORY[0x1E4F28F08], "mainQueue"));

  return WTF::RetainPtr<NSURLSession>::operator=((const void **)(a1 + 8), v11);
}

uint64_t WebKit::isParentProcessAFullWebBrowser(WebKit *this, WebKit::AuxiliaryProcess *a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit30isParentProcessAFullWebBrowserERNS_16AuxiliaryProcessE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = this;
  if (qword_1EB359020 != -1) {
    dispatch_once(&qword_1EB359020, block);
  }
  WebCore::applicationBundleIdentifier((uint64_t *)&v7, this);
  if (WebKit::isRunningTest((WebKit *)&v7, v2))
  {
    uint64_t v4 = 1;
  }
  else if (byte_1EB35900B)
  {
    uint64_t v4 = MEMORY[0x19972E990](v7, "inAppBrowserPrivacyTestIdentifier", 33) ^ 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned __int8 v5 = v7;
  CFDictionaryRef v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_198714CAC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E5B78;
  *(unsigned char *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 17) = 2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v6 = (WebKit *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 216) = 1048576000;
  uint64_t isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v6);
  uint64_t v8 = 0x3FC3333333333333;
  if (isFullWebBrowserOrRunningTest) {
    uint64_t v8 = 0x3FE3333333333333;
  }
  *(void *)(a1 + 224) = v8;
  *(void *)(a1 + 232) = 1;
  int v9 = WebKit::isFullWebBrowserOrRunningTest(isFullWebBrowserOrRunningTest);
  uint64_t v10 = 0x3FC999999999999ALL;
  if (v9) {
    uint64_t v10 = 0x3FE999999999999ALL;
  }
  *(void *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 248) = xmmword_1994F76C0;
  *(unsigned char *)(a1 + 264) = 1;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 256;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 3++*(_DWORD *)(this + 12) = 0u;
  *(void *)(a1 + 328) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 328));
  *(void *)(a1 + 368) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 368));
  *(void *)(a1 + 408) = 0x10001010000;
  *(unsigned char *)(a1 + 416) = 1;
  *(unsigned char *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 417) = 0;
  *(_DWORD *)(a1 + 428) = 1;
  *(void *)(a1 + 432) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 432));
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 5++*(_DWORD *)(this + 12) = 0u;
  *(_WORD *)(a1 + 528) = 0;
  if (a2)
  {
    if (a3)
    {
      WebKit::WebsiteDataStoreConfiguration::initializePaths((WebKit::WebsiteDataStoreConfiguration *)a1, v11);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v13 = *(WTF::StringImpl **)(a1 + 480);
      *(void *)(a1 + 480) = v15;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  return a1;
}

uint64_t WebKit::isFullWebBrowserOrRunningTest(WebKit *this)
{
  WebCore::applicationBundleIdentifier((uint64_t *)&v6, this);
  uint64_t isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest((WebKit *)&v6, v1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return isFullWebBrowserOrRunningTest;
}

void sub_198714F30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::isFullWebBrowserOrRunningTest(WebKit *this, const WTF::String *a2)
{
  {
    WebKit::isFullWebBrowserOrRunningTest(WTF::String const&)::fullWebBrowser = WTF::processHasEntitlement();
  }
  if (WebKit::isRunningTest(this, a2)) {
    return 1;
  }
  if (WebKit::isFullWebBrowserOrRunningTest(WTF::String const&)::fullWebBrowser) {
    return MEMORY[0x19972E990](*(void *)this, "inAppBrowserPrivacyTestIdentifier", 33) ^ 1;
  }
  return 0;
}

uint64_t WebKit::isRunningTest(WebKit *this, const WTF::String *a2)
{
  if ((MEMORY[0x19972E990](*(void *)this, "com.apple.WebKit.TestWebKitAPI", 30) & 1) == 0
    && (MEMORY[0x19972E990](*(void *)this, "com.apple.WebKit.WebKitTestRunner", 33) & 1) == 0)
  {
    JUMPOUT(0x19972E990);
  }
  return 1;
}

WTF::StringImpl *WebKit::WebsiteDataStoreConfiguration::initializePaths(WebKit::WebsiteDataStoreConfiguration *this, const WTF::String *a2)
{
  uint64_t v3 = (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 48);
  WebKit::WebsiteDataStore::defaultApplicationCacheDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 48), a2);
  unsigned __int8 v5 = v79;
  char v79 = 0;
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = v5;
  if (v6)
  {
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v6, v4);
    uint64_t v6 = v79;
    char v79 = 0;
    if (!v6) {
      goto LABEL_6;
    }
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)uint64_t v6 = v7;
  }
LABEL_6:
  WebKit::WebsiteDataStore::defaultCacheStorageDirectory(v3, v4);
  int v9 = v79;
  char v79 = 0;
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = v9;
  if (v10)
  {
    int v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_10:
      *(_DWORD *)uint64_t v10 = v11;
      goto LABEL_11;
    }
    WTF::StringImpl::destroy(v10, v8);
    uint64_t v10 = v79;
    char v79 = 0;
    if (v10)
    {
      int v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  WebKit::WebsiteDataStore::defaultNetworkCacheDirectory(v3, v8);
  uint64_t v13 = v79;
  char v79 = 0;
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = v13;
  if (!v14) {
    goto LABEL_16;
  }
  int v15 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 != 2) {
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v14, v12);
  uint64_t v14 = v79;
  char v79 = 0;
  if (!v14) {
    goto LABEL_16;
  }
  int v15 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy(v14, v12);
  }
  else {
LABEL_15:
  }
    *(_DWORD *)uint64_t v14 = v15;
LABEL_16:
  WebKit::WebsiteDataStore::defaultMediaCacheDirectory(v3, v12);
  long long v17 = v79;
  char v79 = 0;
  uint64_t v18 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = v17;
  if (v18)
  {
    int v19 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 != 2)
    {
LABEL_20:
      *(_DWORD *)uint64_t v18 = v19;
      goto LABEL_21;
    }
    WTF::StringImpl::destroy(v18, v16);
    uint64_t v18 = v79;
    char v79 = 0;
    if (v18)
    {
      int v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
LABEL_21:
  WebKit::WebsiteDataStore::defaultHSTSStorageDirectory(v3, v16);
  long long v21 = v79;
  char v79 = 0;
  uint64_t v22 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = v21;
  if (!v22) {
    goto LABEL_26;
  }
  int v23 = *(_DWORD *)v22 - 2;
  if (*(_DWORD *)v22 != 2) {
    goto LABEL_25;
  }
  WTF::StringImpl::destroy(v22, v20);
  uint64_t v22 = v79;
  char v79 = 0;
  if (!v22) {
    goto LABEL_26;
  }
  int v23 = *(_DWORD *)v22 - 2;
  if (*(_DWORD *)v22 == 2) {
    WTF::StringImpl::destroy(v22, v20);
  }
  else {
LABEL_25:
  }
    *(_DWORD *)uint64_t v22 = v23;
LABEL_26:
  WebKit::WebsiteDataStore::defaultModelElementCacheDirectory(MEMORY[0x1E4F30978], v20);
  long long v25 = v79;
  char v79 = 0;
  long long v26 = (WTF::StringImpl *)*((void *)this + 26);
  *((void *)this + 26) = v25;
  if (v26)
  {
    int v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2)
    {
LABEL_30:
      *(_DWORD *)long long v26 = v27;
      goto LABEL_31;
    }
    WTF::StringImpl::destroy(v26, v24);
    long long v26 = v79;
    char v79 = 0;
    if (v26)
    {
      int v27 = *(_DWORD *)v26 - 2;
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v24);
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
LABEL_31:
  WebKit::WebsiteDataStore::defaultAlternativeServicesDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v24);
  uint64_t v29 = v79;
  char v79 = 0;
  __int16 v30 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = v29;
  if (!v30) {
    goto LABEL_36;
  }
  int v31 = *(_DWORD *)v30 - 2;
  if (*(_DWORD *)v30 != 2) {
    goto LABEL_35;
  }
  WTF::StringImpl::destroy(v30, v28);
  __int16 v30 = v79;
  char v79 = 0;
  if (!v30) {
    goto LABEL_36;
  }
  int v31 = *(_DWORD *)v30 - 2;
  if (*(_DWORD *)v30 == 2) {
    WTF::StringImpl::destroy(v30, v28);
  }
  else {
LABEL_35:
  }
    *(_DWORD *)__int16 v30 = v31;
LABEL_36:
  WebKit::WebsiteDataStore::defaultIndexedDBDatabaseDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v28);
  uint64_t v33 = v79;
  char v79 = 0;
  __int16 v34 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = v33;
  if (v34)
  {
    int v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 != 2)
    {
LABEL_40:
      *(_DWORD *)__int16 v34 = v35;
      goto LABEL_41;
    }
    WTF::StringImpl::destroy(v34, v32);
    __int16 v34 = v79;
    char v79 = 0;
    if (v34)
    {
      int v35 = *(_DWORD *)v34 - 2;
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::destroy(v34, v32);
        goto LABEL_41;
      }
      goto LABEL_40;
    }
  }
LABEL_41:
  WebKit::WebsiteDataStore::defaultServiceWorkerRegistrationDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v32);
  uint64_t v37 = v79;
  char v79 = 0;
  uint64_t v38 = (WTF::StringImpl *)*((void *)this + 24);
  *((void *)this + 24) = v37;
  if (!v38) {
    goto LABEL_46;
  }
  int v39 = *(_DWORD *)v38 - 2;
  if (*(_DWORD *)v38 != 2) {
    goto LABEL_45;
  }
  WTF::StringImpl::destroy(v38, v36);
  uint64_t v38 = v79;
  char v79 = 0;
  if (!v38) {
    goto LABEL_46;
  }
  int v39 = *(_DWORD *)v38 - 2;
  if (*(_DWORD *)v38 == 2) {
    WTF::StringImpl::destroy(v38, v36);
  }
  else {
LABEL_45:
  }
    *(_DWORD *)uint64_t v38 = v39;
LABEL_46:
  WebKit::WebsiteDataStore::defaultWebSQLDatabaseDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v36);
  uint64_t v41 = v79;
  char v79 = 0;
  uint64_t v42 = (WTF::StringImpl *)*((void *)this + 25);
  *((void *)this + 25) = v41;
  if (v42)
  {
    int v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2)
    {
LABEL_50:
      *(_DWORD *)uint64_t v42 = v43;
      goto LABEL_51;
    }
    WTF::StringImpl::destroy(v42, v40);
    uint64_t v42 = v79;
    char v79 = 0;
    if (v42)
    {
      int v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::destroy(v42, v40);
        goto LABEL_51;
      }
      goto LABEL_50;
    }
  }
LABEL_51:
  WebKit::WebsiteDataStore::defaultLocalStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v40);
  uint64_t v45 = v79;
  char v79 = 0;
  int v46 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = v45;
  if (!v46) {
    goto LABEL_56;
  }
  int v47 = *(_DWORD *)v46 - 2;
  if (*(_DWORD *)v46 != 2) {
    goto LABEL_55;
  }
  WTF::StringImpl::destroy(v46, v44);
  int v46 = v79;
  char v79 = 0;
  if (!v46) {
    goto LABEL_56;
  }
  int v47 = *(_DWORD *)v46 - 2;
  if (*(_DWORD *)v46 == 2) {
    WTF::StringImpl::destroy(v46, v44);
  }
  else {
LABEL_55:
  }
    *(_DWORD *)int v46 = v47;
LABEL_56:
  WebKit::WebsiteDataStore::defaultMediaKeysStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v44);
  long long v49 = v79;
  char v79 = 0;
  long long v50 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = v49;
  if (v50)
  {
    int v51 = *(_DWORD *)v50 - 2;
    if (*(_DWORD *)v50 != 2)
    {
LABEL_60:
      *(_DWORD *)long long v50 = v51;
      goto LABEL_61;
    }
    WTF::StringImpl::destroy(v50, v48);
    long long v50 = v79;
    char v79 = 0;
    if (v50)
    {
      int v51 = *(_DWORD *)v50 - 2;
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::destroy(v50, v48);
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
LABEL_61:
  WebKit::WebsiteDataStore::defaultResourceLoadStatisticsDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v48);
  uint64_t v53 = v79;
  char v79 = 0;
  uint64_t v54 = (WTF::StringImpl *)*((void *)this + 22);
  *((void *)this + 22) = v53;
  if (!v54) {
    goto LABEL_66;
  }
  int v55 = *(_DWORD *)v54 - 2;
  if (*(_DWORD *)v54 != 2) {
    goto LABEL_65;
  }
  WTF::StringImpl::destroy(v54, v52);
  uint64_t v54 = v79;
  char v79 = 0;
  if (!v54) {
    goto LABEL_66;
  }
  int v55 = *(_DWORD *)v54 - 2;
  if (*(_DWORD *)v54 == 2) {
    WTF::StringImpl::destroy(v54, v52);
  }
  else {
LABEL_65:
  }
    *(_DWORD *)uint64_t v54 = v55;
LABEL_66:
  WebKit::WebsiteDataStore::defaultDeviceIdHashSaltsStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v52);
  char v57 = v79;
  char v79 = 0;
  uint64_t v58 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = v57;
  if (v58)
  {
    int v59 = *(_DWORD *)v58 - 2;
    if (*(_DWORD *)v58 != 2)
    {
LABEL_70:
      *(_DWORD *)uint64_t v58 = v59;
      goto LABEL_71;
    }
    WTF::StringImpl::destroy(v58, v56);
    uint64_t v58 = v79;
    char v79 = 0;
    if (v58)
    {
      int v59 = *(_DWORD *)v58 - 2;
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::destroy(v58, v56);
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
LABEL_71:
  WebKit::WebsiteDataStore::defaultJavaScriptConfigurationDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v56);
  char v61 = v79;
  char v79 = 0;
  uint64_t v62 = (WTF::StringImpl *)*((void *)this + 17);
  *((void *)this + 17) = v61;
  if (!v62) {
    goto LABEL_76;
  }
  int v63 = *(_DWORD *)v62 - 2;
  if (*(_DWORD *)v62 != 2) {
    goto LABEL_75;
  }
  WTF::StringImpl::destroy(v62, v60);
  uint64_t v62 = v79;
  char v79 = 0;
  if (!v62) {
    goto LABEL_76;
  }
  int v63 = *(_DWORD *)v62 - 2;
  if (*(_DWORD *)v62 == 2) {
    WTF::StringImpl::destroy(v62, v64);
  }
  else {
LABEL_75:
  }
    *(_DWORD *)uint64_t v62 = v63;
LABEL_76:
  WebKit::WebsiteDataStore::defaultGeneralStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), &v79);
  uint64_t v66 = v79;
  char v79 = 0;
  char v67 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = v66;
  if (v67)
  {
    int v68 = *(_DWORD *)v67 - 2;
    if (*(_DWORD *)v67 != 2)
    {
LABEL_80:
      *(_DWORD *)char v67 = v68;
      goto LABEL_81;
    }
    WTF::StringImpl::destroy(v67, v65);
    char v67 = v79;
    char v79 = 0;
    if (v67)
    {
      int v68 = *(_DWORD *)v67 - 2;
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::destroy(v67, v69);
        goto LABEL_81;
      }
      goto LABEL_80;
    }
  }
LABEL_81:
  WebKit::WebsiteDataStore::defaultCookieStorageFile((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), &v79);
  char v71 = v79;
  char v79 = 0;
  uint64_t v72 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + ++*(_DWORD *)(this + 12) = v71;
  if (!v72) {
    goto LABEL_86;
  }
  int v73 = *(_DWORD *)v72 - 2;
  if (*(_DWORD *)v72 != 2) {
    goto LABEL_85;
  }
  WTF::StringImpl::destroy(v72, v70);
  uint64_t v72 = v79;
  char v79 = 0;
  if (!v72) {
    goto LABEL_86;
  }
  int v73 = *(_DWORD *)v72 - 2;
  if (*(_DWORD *)v72 == 2) {
    WTF::StringImpl::destroy(v72, v70);
  }
  else {
LABEL_85:
  }
    *(_DWORD *)uint64_t v72 = v73;
LABEL_86:
  WebKit::WebsiteDataStore::defaultSearchFieldHistoryDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v70);
  char v75 = v79;
  char v79 = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)this + 23);
  *((void *)this + 23) = v75;
  if (!result) {
    return result;
  }
  int v77 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result == 2)
  {
    WTF::StringImpl::destroy(result, v74);
    uint64_t result = v79;
    char v79 = 0;
    if (!result) {
      return result;
    }
    int v77 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v78);
    }
  }
  *(_DWORD *)uint64_t result = v77;
  return result;
}

void WebKit::NetworkSessionCocoa::applyProxyConfigurationToSessionConfiguration(WebKit::NetworkSessionCocoa *this, NSURLSessionConfiguration *a2)
{
  if (*((_DWORD *)this + 293))
  {
    unsigned __int8 v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 293)];
    uint64_t v6 = *((unsigned int *)this + 293);
    if (v6)
    {
      int v7 = (void *)*((void *)this + 145);
      uint64_t v8 = 8 * v6;
      do
      {
        [v5 addObject:*v7++];
        v8 -= 8;
      }
      while (v8);
    }
    [(NSURLSessionConfiguration *)a2 setProxyConfigurations:v5];
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F1CBF0];
    [(NSURLSessionConfiguration *)a2 setProxyConfigurations:v3];
  }
}

void sub_198715764(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultServiceWorkerRegistrationDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715848(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultDeviceIdHashSaltsStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_19871593C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultJavaScriptConfigurationDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v5;
    uint64_t v4 = v5;
    WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(&v4, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v3);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715A30(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultResourceLoadStatisticsDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715B24(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultAlternativeServicesDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715C18(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultSearchFieldHistoryDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715D0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultModelElementCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v5;
    uint64_t v4 = v5;
    WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(&v4, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v3);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715E00(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultIndexedDBDatabaseDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715EF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultMediaKeysStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198715FE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultApplicationCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    isMobileSafarint i = (WebCore::IOSApplication *)WebCore::IOSApplication::isMobileSafari(this);
    if ((isMobileSafari & 1) != 0
      || WebCore::IOSApplication::isWebBookmarksD(isMobileSafari))
    {
      uint64_t v3 = [[(NSString *)NSHomeDirectory() stringByAppendingPathComponent:@"Library/Caches/com.apple.WebAppCache"] stringByStandardizingPath];
      MEMORY[0x19972EAD0](&v9, v3);
      WebKit::stringByResolvingSymlinksInPath();
      unsigned __int8 v5 = v9;
      int v9 = 0;
      if (!v5) {
        return;
      }
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v9;
      uint64_t v8 = v9;
      WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v8, v7, 0);
      if (!v6) {
        return;
      }
      if (*(_DWORD *)v6 != 2)
      {
        *(_DWORD *)v6 -= 2;
        return;
      }
      unsigned __int8 v5 = v6;
    }
    WTF::StringImpl::destroy(v5, v4);
  }
}

void sub_19871615C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultWebSQLDatabaseDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198716278(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebsiteDataStore::defaultGeneralStorageDirectory@<X0>(WebKit::WebsiteDataStore *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    return (WTF::StringImpl *)WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned __int8 v5 = v12;
    int v11 = v12;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v11, v6, 1);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v7);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3321888768;
    block[2] = ___ZN6WebKit16WebsiteDataStore30defaultGeneralStorageDirectoryERKN3WTF6StringE_block_invoke;
    block[3] = &__block_descriptor_40_e8_32c17_ZTSN3WTF6StringE_e5_v8__0l;
    uint64_t v8 = *a2;
    if (*a2) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v10 = v8;
    if (WebKit::WebsiteDataStore::defaultGeneralStorageDirectory(WTF::String const&)::onceToken != -1) {
      dispatch_once(&WebKit::WebsiteDataStore::defaultGeneralStorageDirectory(WTF::String const&)::onceToken, block);
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198716410(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultNetworkCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_198716504(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultLocalStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_1987165F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultCacheStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_1987166EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultHSTSStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v6;
    unsigned __int8 v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v4);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_1987167E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultMediaCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v2 = v5;
    uint64_t v4 = v5;
    WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(&v4, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v3);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void sub_1987168D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebsiteDataStore::defaultCookieStorageFile@<X0>(WTF *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    *(void *)&long long v6 = "Cookies";
    DWORD2(v6) = 7;
    BYTE12(v6) = 1;
    uint64_t v7 = "Cookies.binarycookies";
    int v8 = 21;
    char v9 = 1;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v4, &v6, 2uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    this = v4;
    if (v4)
    {
      uint64_t v4 = 0;
      int v5 = 0;
      return (WTF *)WTF::fastFree(this, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void sub_1987169EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSession::createUniqueRegistrationStore@<X0>(WebKit::NetworkSession *this@<X0>, WebCore::SWServer *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  if ((v5 & 0x8000000000000000) == 0 || v5 == -1)
  {
    long long v6 = (WebKit::NetworkStorageManager *)*((void *)this + 131);
    uint64_t v7 = (WebKit::WebSWRegistrationStore *)WTF::fastMalloc((WTF *)0x60);
    uint64_t result = WebKit::WebSWRegistrationStore::WebSWRegistrationStore(v7, a2, v6);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

WebKit::WebSWRegistrationStore *WebKit::WebSWRegistrationStore::WebSWRegistrationStore(WebKit::WebSWRegistrationStore *this, WebCore::SWServer *a2, WebKit::NetworkStorageManager *a3)
{
  *(void *)this = &unk_1EE9CA238;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  long long v6 = (atomic_uint *)*((void *)a2 + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *((void *)this + 2) = v6;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  uint64_t v7 = (atomic_uint *)*((void *)a3 + 1);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *((void *)this + 3) = v7;
  WebCore::Timer::Timer<WebKit::WebSWRegistrationStore,WebKit::WebSWRegistrationStore>((WebKit::WebSWRegistrationStore *)((char *)this + 32), (uint64_t)this);
  *((void *)this + 11) = 0;
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::WebSWRegistrationStore,WebKit::WebSWRegistrationStore>(WebCore::TimerBase *a1, uint64_t a2)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9CA698;
  v4[1] = WebKit::WebSWRegistrationStore::updateTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((void *)a1 + 6) = v4;
  return a1;
}

void WebKit::WebChromeClient::dispatchDisabledAdaptationsDidChange(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::disabledAdaptationsDidChange(v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

atomic_uchar *WebKit::WebPage::disabledAdaptationsDidChange(uint64_t a1)
{
  uint64_t result = (atomic_uchar *)WebCore::ViewportConfiguration::setDisabledAdaptations();
  if (result)
  {
    return WebKit::WebPage::viewportConfigurationChanged(a1, 0);
  }
  return result;
}

void WebKit::WebChromeClient::dispatchViewportPropertiesDidChange(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (WebCore::ViewportConfiguration::setViewportArguments()) {
    WebKit::WebPage::viewportConfigurationChanged(v2, 0);
  }
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::pageExtendedBackgroundColorDidChange(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  *(unsigned char *)(v2 + 946) = 1;
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

unsigned int *WebKit::PlatformCALayerRemoteTiledBacking::setBorderColor(WebKit::PlatformCALayerRemoteTiledBacking *this, const Color *a2)
{
  uint64_t v2 = (WebCore::TileController *)*((void *)this + 105);
  WebCore::Color::Color((WebCore::Color *)&v6, a2);
  v3.m_colorAndFlags = (unint64_t)&v6;
  uint64_t result = (unsigned int *)WebCore::TileController::setTileDebugBorderColor(v2, v3);
  if ((v6 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned long const,18446744073709551615ul>(uint64_t result, uint64_t *a2, unint64_t a3)
{
  int v3 = a3;
  uint64_t v4 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = a3;
  if (!a3) {
    return v4;
  }
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)(8 * a3));
    *(_DWORD *)(v4 + 8) = v3;
    *(void *)uint64_t v4 = v7;
    do
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    return v4;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(BOOL)>>(uint64_t a1, unint64_t a2)
{
  uint64_t result = (uint64_t *)WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *result;
  uint64_t *result = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198717170);
    }
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = (uint64_t *)(*(void *)result + 8 * *(unsigned int *)(result + 12));
    unint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    uint64_t result = WTF::VectorMover<false,WTF::CompletionHandler<void ()(BOOL)>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WTF::CompletionHandler<void ()(BOOL)>>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      uint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t ___ZN6WebKit10TCCLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
  _MergedGlobals_55 = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 32;
    __break(0xC471u);
  }
  return result;
}

unint64_t WebKit::PlatformCALayerRemote::setBackgroundColor(int8x16_t *this, const WebCore::Color *a2, const Color *a3)
{
  unint64_t result = *(void *)a2;
  unint64_t v5 = this[39].u64[1];
  if (((result | v5) & 0x8000000000000) != 0)
  {
    unint64_t result = WebCore::outOfLineComponentsEqual(result, v5, a3);
    if (result) {
      return result;
    }
  }
  else if (result == v5)
  {
    return result;
  }
  unint64_t result = WebCore::Color::operator=();
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x200000uLL));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1},WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA00C88;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree((WTF *)a1, v2);
}

{
  uint64_t v2;

  *(void *)a1 = &unk_1EEA00C88;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)(a1 + 16));
  int v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

WebKit::WebPageGroup *WebKit::WebPageGroup::WebPageGroup(WebKit::WebPageGroup *this, WTF::StringImpl **a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9D97E0;
  if ((byte_1EB359C45 & 1) == 0)
  {
    qword_1EB359C50 = 0;
    byte_1EB359C45 = 1;
  }
  if ((unint64_t)*a2 + 1 < 2)
  {
    IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    goto LABEL_30;
  }
  uint64_t v6 = qword_1EB359C50;
  if (qword_1EB359C50
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0),
        (uint64_t v6 = qword_1EB359C50) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = (uint64_t *)(v6 + 16 * (v9 & v7));
    uint64_t v14 = (WTF *)*v13;
    if (*v13 == -1)
    {
      unint64_t v10 = (uint64_t *)(v6 + 16 * v12);
      goto LABEL_17;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *a2, v4)) {
      goto LABEL_29;
    }
LABEL_17:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    uint64_t *v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(qword_1EB359C50 - 16);
    uint64_t v13 = v10;
  }
  WTF::String::operator=(v13, a2);
  v13[1] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (qword_1EB359C50) {
    int v15 = *(_DWORD *)(qword_1EB359C50 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(qword_1EB359C50 - ++*(_DWORD *)(this + 12) = v15;
  if (qword_1EB359C50) {
    int v16 = *(_DWORD *)(qword_1EB359C50 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(qword_1EB359C50 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(qword_1EB359C50 - 4);
  if (v18 > 0x400)
  {
    if (v18 <= 2 * v17) {
LABEL_28:
    }
      uint64_t v13 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((WTF::StringImpl **)v13);
  }
  else if (3 * v18 <= 4 * v17)
  {
    goto LABEL_28;
  }
LABEL_29:
  IdentifierInternal = (WTF::StringImpl *)v13[1];
LABEL_30:
  int v46 = 0;
  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    WTF::String::operator=((uint64_t *)&v46, a2);
    int v19 = v46;
    goto LABEL_34;
  }
  v48[0] = (WebKit::WebPreferences *)"__uniquePageGroupID-";
  v48[1] = (WebKit::WebPreferences *)21;
  int v47 = IdentifierInternal;
  unint64_t result = (WebKit::WebPageGroup *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>((uint64_t *)v48, (unint64_t *)&v47, &v45);
  int v19 = v45;
  if (v45)
  {
LABEL_34:
    *((void *)this + 3) = v19;
    *((void *)this + 4) = IdentifierInternal;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebPreferences::createWithLegacyDefaults((WebKit::WebPageGroup *)((char *)this + 24), (const WTF::String *)&v47, (const WTF::String *)&v46, v48);
    *((WebKit::WebPreferences **)this + 5) = v48[0];
    uint64_t v22 = v46;
    int v46 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    int v23 = v47;
    int v47 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v21);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    if (byte_1EB359C46)
    {
      uint64_t v24 = qword_1EB359C58;
      if (!qword_1EB359C58) {
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    qword_1EB359C58 = 0;
    byte_1EB359C46 = 1;
LABEL_44:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand();
    uint64_t v24 = qword_1EB359C58;
    if (qword_1EB359C58) {
LABEL_45:
    }
      int v25 = *(_DWORD *)(v24 - 8);
    else {
      int v25 = 0;
    }
    uint64_t v26 = *((void *)this + 4);
    unint64_t v27 = (v26 + ~(v26 << 32)) ^ ((unint64_t)(v26 + ~(v26 << 32)) >> 22);
    unint64_t v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    unint64_t v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    unsigned int v30 = v25 & ((v29 >> 31) ^ v29);
    int v31 = (void *)(v24 + 16 * v30);
    uint64_t v32 = *v31;
    if (!*v31)
    {
LABEL_54:
      void *v31 = v26;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this);
      uint64_t v36 = (atomic_uint *)*((void *)this + 2);
      atomic_fetch_add(v36, 1u);
      uint64_t v37 = (unsigned int *)v31[1];
      v31[1] = v36;
      if (v37 && atomic_fetch_add((atomic_uint *volatile)v37, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v35);
      }
      if (qword_1EB359C58) {
        int v38 = *(_DWORD *)(qword_1EB359C58 - 12) + 1;
      }
      else {
        int v38 = 1;
      }
      *(_DWORD *)(qword_1EB359C58 - ++*(_DWORD *)(this + 12) = v38;
      if (qword_1EB359C58) {
        int v42 = *(_DWORD *)(qword_1EB359C58 - 12);
      }
      else {
        int v42 = 0;
      }
      uint64_t v43 = (*(_DWORD *)(qword_1EB359C58 - 16) + v42);
      unint64_t v44 = *(unsigned int *)(qword_1EB359C58 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43) {
          return this;
        }
      }
      else if (3 * v44 > 4 * v43)
      {
        return this;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand();
      return this;
    }
    uint64_t v33 = 0;
    int v34 = 1;
    while (v32 != v26)
    {
      if (v32 == -1) {
        uint64_t v33 = v31;
      }
      unsigned int v30 = (v30 + v34) & v25;
      int v31 = (void *)(v24 + 16 * v30);
      uint64_t v32 = *v31;
      ++v34;
      if (!*v31)
      {
        if (v33)
        {
          *uint64_t v33 = 0;
          v33[1] = 0;
          --*(_DWORD *)(v24 - 16);
          uint64_t v26 = *((void *)this + 4);
          int v31 = v33;
        }
        goto LABEL_54;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this);
    uint64_t v40 = (atomic_uint *)*((void *)this + 2);
    atomic_fetch_add(v40, 1u);
    uint64_t v41 = (unsigned int *)v31[1];
    v31[1] = v40;
    if (v41 && atomic_fetch_add((atomic_uint *volatile)v41, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v39);
    }
    return this;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebPreferences::registerDefaultUInt32ValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, int a3)
{
  unint64_t v5 = (WebKit::WebPreferences *)((char *)this + 40);
  WebKit::WebPreferencesStore::setOverrideDefaultsUInt32ValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  unsigned int v7 = 0;
  uint64_t result = WebKit::WebPreferences::platformGetUInt32UserValueForKey(this, a2, &v7);
  if (result) {
    return WebKit::WebPreferencesStore::setUInt32ValueForKey(v5, a2, v7);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPreferencesStore::setOverrideDefaultsUInt32ValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, int a3)
{
  int v5 = a3;
  int v6 = 2;
  uint64_t result = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this + 24, a2, (const WTF::StringImpl *)&v5, (uint64_t)v4);
  if (v6 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v6])(v4, &v5);
  }
  return result;
}

uint64_t WebKit::WebPreferences::createWithLegacyDefaults@<X0>(WebKit::WebPreferences *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, WebKit::WebPreferences **a4@<X8>)
{
  unsigned int v9 = (WebKit::WebPreferences *)API::Object::newObject(0x70uLL, 92);
  unint64_t v10 = WebKit::WebPreferences::WebPreferences(v9, this, a2, a3);
  *a4 = v10;
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }

  return WebKit::WebPreferences::registerDefaultUInt32ValueForKey(v10, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, 0);
}

uint64_t WebKit::WebPageProxy::WebPageProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE9D9848;
  *(void *)(a1 + 16) = &unk_1EE9D9898;
  uint64_t v8 = WTF::fastMalloc((WTF *)0xA40);
  *(_DWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 32) = 0;
  *(void *)uint64_t v8 = &unk_1EE9D1170;
  *(void *)(v8 + 16) = &unk_1EE9D1248;
  *(void *)(v8 + 24) = &unk_1EE9D12C0;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = &unk_1EE9D12F0;
  *(void *)(v8 + 56) = a1;
  *(_WORD *)(v8 + 64) = 0;
  unsigned int v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v8);
  WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>((WTF::RunLoop::TimerBase *)(v8 + 72), v9, a1, (uint64_t)WebKit::WebPageProxy::clearAudibleActivity, 0);
  *(unsigned char *)(v8 + 104) = 0;
  *(unsigned char *)(v8 + 1++*(_DWORD *)(this + 12) = 0;
  *(unsigned char *)(v8 + 208) = 0;
  *(void *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 0;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_WORD *)(v8 + 248) = 256;
  *(unsigned char *)(v8 + 272) = 0;
  *(unsigned char *)(v8 + 576) = 0;
  *(unsigned char *)(v8 + 592) = 0;
  *(unsigned char *)(v8 + 704) = 0;
  *(void *)(v8 + 250) = 0;
  *(unsigned char *)(v8 + 258) = 0;
  *(void *)(v8 + 720) = 0;
  *(_OWORD *)(v8 + 728) = 0u;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  unint64_t v10 = *(atomic_uint **)(a1 + 24);
  atomic_fetch_add(v10, 1u);
  *(void *)(v8 + 744) = v10;
  *(void *)(v8 + 752) = 0;
  *(void *)(v8 + 760) = WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(_OWORD *)(v8 + 768) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(unsigned char *)(v8 + 800) = 0;
  *(_DWORD *)(v8 + 801) = 16843009;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 836) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_OWORD *)(v8 + 872) = 0u;
  *(_OWORD *)(v8 + 888) = 0u;
  *(unsigned char *)(v8 + 904) = 0;
  *(void *)(v8 + 920) = 0;
  *(void *)(v8 + 9++*(_DWORD *)(this + 12) = &unk_1EE9E5248;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  unint64_t v11 = *(atomic_uint **)(a1 + 24);
  atomic_fetch_add(v11, 1u);
  *(void *)(v8 + 928) = v11;
  *(_WORD *)(v8 + 936) = 0;
  *(unsigned char *)(v8 + 968) = 0;
  *(_OWORD *)(v8 + 944) = 0u;
  *(unsigned char *)(v8 + 960) = 0;
  State = WebKit::PageLoadState::PageLoadState((WebKit::PageLoadState *)(v8 + 976), (WebKit::WebPageProxy *)a1);
  *(_WORD *)(v8 + 1352) = 0;
  *(void *)(v8 + 1360) = 0;
  *(unsigned char *)(v8 + 1368) = 0;
  *(unsigned char *)(v8 + 1696) = 0;
  *(_DWORD *)(v8 + 1704) = 0;
  uint64_t v13 = (WTF::RunLoop *)WTF::RunLoop::main(State);
  uint64_t v14 = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>((WTF::RunLoop::TimerBase *)(v8 + 1712), v13, a1, (uint64_t)WebKit::WebPageProxy::resetRecentCrashCount, 0);
  *(_DWORD *)(v8 + 1744) = 16843009;
  *(void *)(v8 + 1752) = 0;
  *(unsigned char *)(v8 + 1760) = 0;
  *(void *)(v8 + 1764) = 0;
  *(void *)(v8 + 1776) = 0;
  int v15 = (WTF::RunLoop *)WTF::RunLoop::main(v14);
  int v16 = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>((WTF::RunLoop::TimerBase *)(v8 + 1784), v15, a1, (uint64_t)WebKit::WebPageProxy::tryCloseTimedOut, 0);
  *(_OWORD *)(v8 + 1816) = 0u;
  uint64_t v17 = (WTF::RunLoop *)WTF::RunLoop::main(v16);
  WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>((WTF::RunLoop::TimerBase *)(v8 + 1832), v17, a1, (uint64_t)WebKit::WebPageProxy::updateReportedMediaCaptureState, 0);
  *(void *)(v8 + 1864) = 0;
  *(unsigned char *)(v8 + 1872) = 0;
  *(unsigned char *)(v8 + 1888) = 0;
  *(unsigned char *)(v8 + 1892) = 0;
  *(unsigned char *)(v8 + 1900) = 0;
  *(void *)(v8 + 1904) = 0;
  *(_OWORD *)(v8 + 19++*(_DWORD *)(this + 12) = 0u;
  unint64_t v18 = (WTF::RunLoop *)WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::generate();
  *(void *)(v8 + 1928) = v18;
  *(unsigned char *)(v8 + 1936) = 0;
  *(unsigned char *)(v8 + 1976) = 0;
  *(void *)(v8 + 2080) = 0;
  *(unsigned char *)(v8 + 2088) = 0;
  *(unsigned char *)(v8 + 2128) = 0;
  *(void *)(v8 + 2132) = 0;
  *(unsigned char *)(v8 + 2208) = 0;
  *(_DWORD *)(v8 + 2216) = 0;
  *(_OWORD *)(v8 + 2424) = 0u;
  *(_OWORD *)(v8 + 1944) = 0u;
  *(unsigned char *)(v8 + 1960) = 0;
  *(_OWORD *)(v8 + 1984) = 0u;
  *(_OWORD *)(v8 + 2000) = 0u;
  *(_OWORD *)(v8 + 2016) = 0u;
  *(_OWORD *)(v8 + 2032) = 0u;
  *(_OWORD *)(v8 + 2048) = 0u;
  *(_OWORD *)(v8 + 2057) = 0u;
  *(unsigned char *)(v8 + 2160) = 0;
  *(_OWORD *)(v8 + 2144) = 0u;
  *(_DWORD *)(v8 + 2416) = 0;
  *(_OWORD *)(v8 + 2400) = 0u;
  *(_OWORD *)(v8 + 2384) = 0u;
  *(_OWORD *)(v8 + 2368) = 0u;
  *(_OWORD *)(v8 + 2352) = 0u;
  *(_OWORD *)(v8 + 2336) = 0u;
  *(_OWORD *)(v8 + 2320) = 0u;
  *(_OWORD *)(v8 + 2304) = 0u;
  *(_OWORD *)(v8 + 2288) = 0u;
  *(_OWORD *)(v8 + 2272) = 0u;
  *(_OWORD *)(v8 + 2256) = 0u;
  *(_OWORD *)(v8 + 2240) = 0u;
  *(_OWORD *)(v8 + 2224) = 0u;
  *(void *)(v8 + 2440) = 0xBFF0000000000000;
  *(_DWORD *)(v8 + 2448) = 0;
  int v19 = (WTF::RunLoop *)WTF::RunLoop::main(v18);
  WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>((WTF::RunLoop::TimerBase *)(v8 + 2456), v19, a1, (uint64_t)WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired, 0);
  *(unsigned char *)(v8 + 2488) = 0;
  *(unsigned char *)(v8 + 2496) = 0;
  *(unsigned char *)(v8 + 2504) = 0;
  *(unsigned char *)(v8 + 2584) = 0;
  *(_OWORD *)(v8 + 2592) = 0u;
  *(unsigned char *)(v8 + 2608) = 1;
  *(void *)(a1 + 32) = v8;
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20) {
    goto LABEL_6;
  }
  uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v20 = 1;
  *(void *)(v20 + 8) = a2;
  uint64_t v22 = *(unsigned int **)(a2 + 8);
  *(void *)(a2 + 8) = v20;
  if (!v22) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v22);
    WTF::fastFree((WTF *)v22, v21);
  }
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  *(void *)(a1 + 40) = v20;
  uint64_t v23 = *a4;
  *a4 = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v23;
  uint64_t v24 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v24 = &unk_1EE9D9EF0;
  *(void *)(a1 + 72) = v24;
  int v25 = (void *)WTF::fastMalloc((WTF *)8);
  *int v25 = &unk_1EE9DA078;
  *(void *)(a1 + 80) = v25;
  uint64_t v26 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v26 = &unk_1EE9D9AE8;
  *(void *)(a1 + 88) = v26;
  unint64_t v27 = (void *)WTF::fastMalloc((WTF *)8);
  void *v27 = &unk_1EE9D9B10;
  *(void *)(a1 + 96) = v27;
  unint64_t v28 = (void *)WTF::fastMalloc((WTF *)8);
  void *v28 = &unk_1EE9E0798;
  *(void *)(a1 + 104) = v28;
  unint64_t v29 = (void *)WTF::fastMalloc((WTF *)8);
  void *v29 = &unk_1EE9D9B38;
  *(void *)(a1 + 1++*(_DWORD *)(this + 12) = v29;
  unsigned int v30 = (void *)WTF::fastMalloc((WTF *)8);
  void *v30 = &unk_1EE9D9B80;
  *(void *)(a1 + 120) = v30;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  int v31 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(void *)int v31 = 0;
  *((void *)v31 + 1) = 0;
  *(void *)(a1 + 160) = v31;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v32 = (WTF::RunLoop *)WTF::RunLoop::main(v31);
  WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>((WTF::RunLoop::TimerBase *)(a1 + 200), v32, a1, (uint64_t)WebKit::WebPageProxy::didEndNetworkRequestsForPageLoadTimingTimerFired, 0);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 16), 1u);
  *(void *)(a1 + 256) = a3;
  uint64_t v33 = *(void *)(*(void *)(a1 + 48) + 128);
  CFRetain(*(CFTypeRef *)(v33 + 8));
  *(void *)(a1 + 264) = v33;
  int v34 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)(*(void *)(a1 + 48) + 40));
  CFRetain(*((CFTypeRef *)v34 + 1));
  *(void *)(a1 + 272) = v34;
  int v35 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get((WebKit::WebUserContentControllerProxy **)(*(void *)(a1 + 48) + 32));
  CFRetain(*((CFTypeRef *)v35 + 1));
  *(void *)(a1 + 280) = v35;
  uint64_t v36 = *(void *)(a1 + 48);
  uint64_t v37 = *(void *)(v36 + 112);
  if (v37)
  {
    CFRetain(*(CFTypeRef *)(v37 + 8));
    uint64_t v36 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 288) = v37;
  uint64_t v38 = *(void *)(v36 + 120);
  if (v38)
  {
    uint64_t v39 = *(void *)(v38 + 8);
    if (v39)
    {
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v39 + 8), *(void *)(v38 + 8));
      uint64_t v38 = *(void *)(v39 + 8);
      if (v38) {
        atomic_fetch_add((atomic_uint *volatile)v38, 1u);
      }
    }
    else
    {
      uint64_t v38 = 0;
    }
  }
  *(void *)(a1 + 296) = v38;
  uint64_t v40 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::VisitedLinkStore,&API::PageConfiguration::Data::createVisitedLinkStore>::get((WebKit::VisitedLinkStore **)(*(void *)(a1 + 48) + 48));
  CFRetain(*((CFTypeRef *)v40 + 1));
  *(void *)(a1 + 304) = v40;
  uint64_t v41 = API::PageConfiguration::websiteDataStore(*(API::PageConfiguration **)(a1 + 48));
  CFRetain(*((CFTypeRef *)v41 + 1));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 3++*(_DWORD *)(this + 12) = v41;
  uint64_t v42 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v42 + 184))
  {
    uint64_t v43 = WebKit::WebFrameProxy::webFrame(*(void *)(v42 + 168), *(void *)(v42 + 176));
    uint64_t v44 = v43;
    if (v43) {
      CFRetain(*(CFTypeRef *)(v43 + 8));
    }
  }
  else
  {
    uint64_t v44 = 0;
  }
  *(void *)(a1 + 336) = v44;
  *(void *)(a1 + 344) = 0;
  WebCore::standardUserAgentWithApplicationName();
  *(void *)buf = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v45 = *(_DWORD **)(*(void *)(a1 + 48) + 272);
  if (v45) {
    *v45 += 2;
  }
  *(void *)(a1 + 392) = v45;
  *(_OWORD *)(a1 + 400) = 0uLL;
  int v46 = (void *)WTF::fastMalloc((WTF *)8);
  *int v46 = &unk_1EE9D9BB0;
  *(void *)(a1 + 416) = v46;
  *(void *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 439) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 447) = 0;
  *(_DWORD *)(a1 + 444) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(unsigned char *)(a1 + 568) = 0;
  *(void *)(a1 + 592) = a1;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0;
  uint64_t v47 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(v47 + 236);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(v47 + 248);
  long long v48 = (WebKit::WebBackForwardList *)API::Object::newObject(0x38uLL, 43);
  long long v49 = WebKit::WebBackForwardList::WebBackForwardList(v48, (WebKit::WebPageProxy *)a1);
  *(void *)(a1 + 664) = v49;
  *(unsigned char *)(a1 + 672) = 0;
  uint64_t v50 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 673) = *(unsigned char *)(v50 + 237);
  *(unsigned char *)(a1 + 674) = 0;
  *(void *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 688) = 0;
  *(void *)(a1 + 696) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 704) = _Q0;
  *(_OWORD *)(a1 + 720) = _Q0;
  *(_OWORD *)(a1 + 736) = xmmword_1994F7170;
  *(void *)(a1 + 752) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 760) = 1065353216;
  *(unsigned char *)(a1 + 764) = 0;
  *(unsigned char *)(a1 + 768) = 0;
  *(void *)(a1 + 772) = 0;
  *(_DWORD *)(a1 + 779) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  uint64_t v56 = *(void *)(a3 + 136);
  if (v56 && *(unsigned char *)(v56 + 104))
  {
    int v57 = 0;
  }
  else if (*(void *)(a3 + 144))
  {
    int v57 = 1;
  }
  else
  {
    int v57 = 2;
  }
  *(unsigned char *)(a1 + 800) = v57 != 2;
  *(_DWORD *)(a1 + 801) = 0;
  *(unsigned char *)(a1 + 805) = 1;
  *(void *)(a1 + 816) = 0;
  *(unsigned char *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 828) = 0;
  *(unsigned char *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 806) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0uLL;
  *(_OWORD *)(a1 + 856) = 0uLL;
  *(_OWORD *)(a1 + 880) = 0uLL;
  *(_WORD *)(a1 + 896) = 256;
  *(unsigned char *)(a1 + 898) = *(unsigned char *)(v50 + 239);
  *(_DWORD *)(a1 + 900) = 0;
  *(unsigned char *)(a1 + 904) = WebKit::TextChecker::isSmartInsertDeleteEnabled(v49);
  *(void *)(a1 + 908) = 0;
  *(void *)(a1 + 914) = 0;
  *(_DWORD *)(a1 + 922) = 16842753;
  *(unsigned char *)(a1 + 926) = 1;
  *(_DWORD *)(a1 + 927) = 0;
  *(_OWORD *)(a1 + 932) = 0u;
  *(void *)(a1 + 947) = 0;
  *(_DWORD *)(a1 + 956) = 1065353216;
  *(_WORD *)(a1 + 960) = 1;
  *(unsigned char *)(a1 + 962) = 1;
  *(void *)(a1 + 1024) = 0;
  *(unsigned char *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 963) = 0;
  *(void *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_WORD *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(unsigned char *)(a1 + 1056) = 1;
  *(void *)(a1 + 1064) = 0x4008000000000000;
  *(_DWORD *)(a1 + 1072) = 0;
  *(_WORD *)(a1 + 1076) = 0;
  *(void *)(a1 + 1080) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_WORD *)(a1 + 1104) = 0;
  *(void *)(a1 + 11++*(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  uint64_t v58 = (Inspector::BackendDispatcher **)WTF::fastMalloc((WTF *)0x48);
  *(void *)(a1 + 1144) = WebKit::WebPageInspectorController::WebPageInspectorController(v58, (WebKit::WebPageProxy *)a1);
  int v59 = (WebKit::WebPageDebuggable *)WTF::fastMalloc((WTF *)0x38);
  *(void *)(a1 + 1152) = WebKit::WebPageDebuggable::WebPageDebuggable(v59, (WebKit::WebPageProxy *)a1);
  *(unsigned char *)(a1 + 1160) = 0;
  *(unsigned char *)(a1 + 1168) = 0;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1183) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  uint64_t v60 = *(void *)(a1 + 48) + 344;
  *(_OWORD *)(a1 + 1251) = 0u;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 1280, v60);
  *(_DWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 13++*(_DWORD *)(this + 12) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  uint64_t v61 = *(void *)(a1 + 48);
  *(_WORD *)(a1 + 1332) = *(_WORD *)(v61 + 424);
  *(_WORD *)(a1 + 1334) = 0;
  *(unsigned char *)(a1 + 1336) = 1;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_DWORD *)(a1 + 1360) = 1;
  *(void *)(a1 + 1368) = 0;
  *(_DWORD *)(a1 + 1376) = 1;
  *(void *)(a1 + 1384) = 0;
  *(unsigned char *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1400) = 0u;
  uint64_t v62 = (_DWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::BrowsingContextGroup,&API::PageConfiguration::Data::createBrowsingContextGroup>::get((uint64_t *)(v61 + 16));
  ++*v62;
  *(void *)(a1 + 1416) = v62;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(unsigned char *)(a1 + 1456) = 0;
  int v63 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(void *)int v63 = &unk_1EE9DA0B8;
  *((void *)v63 + 1) = a1;
  *(void *)(a1 + 1464) = v63;
  *(void *)(a1 + 1472) = 0x3FF8000000000000;
  char v64 = (WTF::RunLoop *)WTF::RunLoop::main(v63);
  WTF::RunLoop::Timer::Timer<PAL::HysteresisActivity>((WTF::RunLoop::TimerBase *)(a1 + 1480), v64, a1 + 1464, (uint64_t)PAL::HysteresisActivity::hysteresisTimerFired, 0);
  *(unsigned char *)(a1 + 15++*(_DWORD *)(this + 12) = 0;
  char v65 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v65 = &unk_1EE9DC628;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v66 = *(atomic_uint **)(a1 + 24);
  atomic_fetch_add(v66, 1u);
  v65[1] = v66;
  *(void *)(a1 + 1520) = v65;
  char v67 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v68 = *(void *)(a1 + 32);
    uint64_t v69 = *(void *)(v68 + 760);
    uint64_t v70 = *(void *)(v68 + 1928);
    uint64_t v71 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v71) {
      LODWORD(v71) = *(_DWORD *)(v71 + 108);
    }
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v120 = 2048;
    uint64_t v121 = v69;
    __int16 v122 = 2048;
    uint64_t v123 = v70;
    __int16 v124 = 1024;
    int v125 = v71;
    _os_log_impl(&dword_1985F2000, v67, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::constructor:", buf, 0x26u);
  }
  if (!*(unsigned char *)(*(void *)(a1 + 48) + 238))
  {
    *(void *)buf = 0x1104000000000000;
    std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>(*(void *)(a1 + 32) + 104);
    if ((*(void *)buf & 0x8000000000000) != 0)
    {
      long long v117 = (unsigned int *)(*(void *)buf & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v117);
        WTF::fastFree((WTF *)v117, v72);
      }
    }
  }
  WebKit::WebPageProxy::updateActivityState((void *)a1, 1023);
  WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)a1, v73, v74);
  WebKit::WebPageProxy::updateHiddenPageThrottlingAutoIncreases((WebKit::WebPageProxy *)a1, v75, v76);
  uint64_t v77 = *(void *)(a1 + 32);
  if ((*(_WORD *)(v77 + 64) & 0x10) != 0)
  {
    uint64_t v78 = *(void *)(a1 + 40);
    if (v78) {
      uint64_t v79 = *(void *)(v78 + 8);
    }
    else {
      uint64_t v79 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v79 + 1592))(v79);
    *(unsigned char *)(*(void *)(a1 + 32) + 800) = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 120))(v79);
    (*(void (**)(uint64_t))(*(void *)v79 + 1600))(v79);
  }
  else
  {
    *(unsigned char *)(v77 + 800) = 1;
  }
  ++HIDWORD(WebKit::WebProcessPool::statistics(void)::statistics);
  uint64_t v80 = *(void *)(a1 + 272);
  CFRetain(*(CFTypeRef *)(v80 + 8));
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>(v80 + 88, (unsigned int *)a1, (uint64_t)buf);
  CFRelease(*(CFTypeRef *)(v80 + 8));
  uint64_t v81 = *(CFTypeRef **)(a1 + 288);
  if (v81) {
    goto LABEL_39;
  }
  uint64_t v113 = *(void *)(a1 + 296);
  if (v113)
  {
    uint64_t v114 = *(void *)(v113 + 8);
    if (v114)
    {
      uint64_t v81 = (CFTypeRef *)(v114 - 16);
LABEL_39:
      CFRetain(v81[1]);
      WebKit::WebExtensionController::addPage((WebKit::WebExtensionController *)v81, (WebKit::WebPageProxy *)a1);
      CFRelease(v81[1]);
    }
  }
  uint64_t v82 = (WebKit::WebInspectorUIProxy *)API::Object::newObject(0x58uLL, 71);
  uint64_t v83 = WebKit::WebInspectorUIProxy::WebInspectorUIProxy(v82, (WebKit::WebPageProxy *)a1);
  uint64_t v84 = *(void *)(a1 + 400);
  *(void *)(a1 + 400) = v83;
  if (v84) {
    CFRelease(*(CFTypeRef *)(v84 + 8));
  }
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800)) {
    WebKit::WebPageProxy::didAttachToRunningProcess((WebKit::WebPageProxy *)a1);
  }
  WebKit::WebPageProxy::addAllMessageReceivers((WebKit::WebPageProxy *)a1);
  uint64_t v86 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v86 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, v85);
  *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(BoolValueForKey) + 17) = (_BYTE)BoolValueForKey;
  uint64_t v88 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)(*(void *)(a1 + 48) + 40));
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v88 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, v89))
  {
    uint64_t v90 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
    atomic_fetch_add((atomic_uint *volatile)(v90 + 16), 1u);
    uint64_t v91 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v91 = 395;
    *((void *)v91 + 1) = 0;
    *((void *)v91 + 66) = (char *)v91 + 16;
    *((void *)v91 + 67) = 512;
    *((void *)v91 + 68) = 0;
    *((void *)v91 + 70) = 0;
    *((void *)v91 + 69) = 0;
    IPC::Encoder::encodeHeader(v91);
    uint64_t v118 = v91;
    buf[0] = 0;
    BYTE2(v121) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v90, &v118, 0, (uint64_t)buf, 1);
    if (BYTE2(v121))
    {
      uint64_t v93 = *(void *)buf;
      *(void *)buf = 0;
      if (v93) {
        (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
      }
    }
    uint64_t v94 = v118;
    uint64_t v118 = 0;
    if (v94)
    {
      IPC::Encoder::~Encoder(v94, v92);
      WTF::fastFree(v115, v116);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v90 + 16));
  }
  uint64_t v95 = WTF::fastMalloc((WTF *)0x18);
  uint64_t v96 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v96 = &unk_1EE9D9C00;
  v96[1] = a1;
  *(void *)uint64_t v95 = v96;
  *(_WORD *)(v95 + 8) = 512;
  *(void *)(v95 + 16) = 0;
  std::unique_ptr<WebCore::RunLoopObserver>::reset[abi:sn180100]((WebCore::RunLoopObserver **)(a1 + 976), (WebCore::RunLoopObserver *)v95);
  unint64_t v97 = *(Inspector::RemoteInspectionTarget **)(a1 + 1152);
  JSRemoteInspectorGetInspectionEnabledByDefault();
  Inspector::RemoteInspectionTarget::setInspectable(v97);
  uint64_t v98 = *(void *)(*(void *)(*(void *)(a1 + 256) + 512) + 8);
  if (v98) {
    uint64_t v99 = v98 - 16;
  }
  else {
    uint64_t v99 = 0;
  }
  *(_DWORD *)buf = *(_DWORD *)(*(void *)(v99 + 48) + 80);
  uint8_t buf[4] = 1;
  Inspector::RemoteInspectionTarget::setPresentingApplicationPID();
  Inspector::RemoteControllableTarget::init(*(Inspector::RemoteControllableTarget **)(a1 + 1152));
  WebKit::WebPageInspectorController::init(*(WebKit::WebPageInspectorController **)(a1 + 1144));
  uint64_t v100 = *(void *)(*(void *)(a1 + 48) + 192);
  if (v100 && (uint64_t v101 = *(void *)(v100 + 8)) != 0)
  {
    uint64_t v102 = v101 - 16;
    CFRetain(*(CFTypeRef *)(v101 - 8));
  }
  else
  {
    uint64_t v102 = 0;
  }
  uint64_t v103 = *(void *)(a1 + 1408);
  *(void *)(a1 + 1408) = v102;
  if (v103) {
    CFRelease(*(CFTypeRef *)(v103 + 8));
  }
  {
    qword_1EB35A4F0 = 0;
    WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
    unk_1EB35A4E0 = 0u;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v104 = *(atomic_uint **)(a1 + 24);
  if (v104) {
    atomic_fetch_add(v104, 1u);
  }
  uint64_t v105 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v105 = &unk_1EE9DA0E0;
  *((void *)v105 + 1) = v104;
  uint64_t v118 = v105;
  WebKit::LinkDecorationFilteringController::observeUpdates((uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance, (uint64_t *)&v118, (uint64_t *)buf);
  uint64_t v107 = *(void *)buf;
  *(void *)buf = 0;
  unint64_t v108 = *(WebKit::LinkDecorationFilteringDataObserver **)(a1 + 1368);
  *(void *)(a1 + 1368) = v107;
  if (v108)
  {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v108, v106);
    uint64_t v110 = *(WebKit::LinkDecorationFilteringDataObserver **)buf;
    *(void *)buf = 0;
    if (v110) {
      WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v110, v109);
    }
  }
  uint64_t v111 = v118;
  uint64_t v118 = 0;
  if (v111) {
    (*(void (**)(IPC::Encoder *))(*(void *)v111 + 8))(v111);
  }
  return a1;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::WebPageProxy>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9D9EC8;
  v10[1] = a4;
  uint64_t v10[2] = a5;
  v10[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v10;
  return result;
}

WebCore::RunLoopObserver *std::unique_ptr<WebCore::RunLoopObserver>::reset[abi:sn180100](WebCore::RunLoopObserver **a1, WebCore::RunLoopObserver *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(result);
    return (WebCore::RunLoopObserver *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::WebScreenOrientationManagerProxy *std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100](WebKit::WebScreenOrientationManagerProxy **a1, WebKit::WebScreenOrientationManagerProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebScreenOrientationManagerProxy::~WebScreenOrientationManagerProxy(result);
    return (WebKit::WebScreenOrientationManagerProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

unsigned int *WebKit::LinkDecorationFilteringController::observeUpdates@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(void *)a1)
  {
    int v6 = objc_opt_new();
    unsigned int v7 = *(const void **)a1;
    *(void *)a1 = v6;
    if (v7)
    {
      CFRelease(v7);
      int v6 = *(void **)a1;
    }
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___ZN6WebKit33LinkDecorationFilteringController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke;
    v30[3] = &__block_descriptor_40_e5_v8__0l;
    v30[4] = a1;
    [v6 listenForLinkFilteringDataChanges:v30];
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = 0;
  unint64_t v10 = (unsigned int *)(v9 + 8);
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(v9 + 16) = v11;
  *a3 = v9;
  unsigned int v12 = (uint64_t *)(a1 + 24);
  unsigned int v13 = *(_DWORD *)(a1 + 36);
  LODWORD(v11) = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 > v13)
  {
    uint64_t v14 = *v12;
    if (*v12)
    {
      int v15 = *(_DWORD *)(v14 - 4);
      if (!v15) {
        goto LABEL_27;
      }
      int v16 = 0;
      unsigned int v17 = v15 - 1;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)(v14 + 8 * v17);
        if ((unint64_t)(v19 + 1) >= 2 && !*(void *)(v19 + 8))
        {
          *(void *)(v14 + 8 * v17) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v19);
            WTF::fastFree((WTF *)v19, v8);
          }
          *(void *)(v14 + 8 * v17) = -1;
          ++v16;
        }
        --v17;
      }
      while (v18);
      uint64_t v14 = *v12;
      if (v16)
      {
        *(_DWORD *)(v14 - 16) += v16;
        uint64_t v20 = *v12;
        if (*v12) {
          int v21 = *(_DWORD *)(v20 - 12);
        }
        else {
          int v21 = 0;
        }
        *(_DWORD *)(v20 - ++*(_DWORD *)(this + 12) = v21 - v16;
        uint64_t v14 = *v12;
      }
      if (v14)
      {
        unsigned int v22 = *(_DWORD *)(v14 - 4);
        if (v22 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v22)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 24));
          uint64_t v14 = *(void *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = 0;
          if (!v14)
          {
            unsigned int v24 = 0;
            goto LABEL_31;
          }
          goto LABEL_30;
        }
LABEL_27:
        *(_DWORD *)(a1 + 32) = 0;
LABEL_30:
        unsigned int v24 = *(_DWORD *)(v14 - 12);
        int v25 = 0x7FFFFFFF;
        if (v24 >= 0x7FFFFFFF)
        {
LABEL_32:
          *(_DWORD *)(a1 + 36) = 2 * v25;
          goto LABEL_33;
        }
LABEL_31:
        int v25 = v24;
        goto LABEL_32;
      }
    }
    unsigned int v24 = 0;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_31;
  }
LABEL_33:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10, v9);
  uint64_t v26 = *(atomic_uint **)v10;
  atomic_fetch_add(*(atomic_uint *volatile *)v10, 1u);
  atomic_fetch_add(v26, 1u);
  int v31 = (WTF *)v26;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v31, (uint64_t)v29);
  uint64_t result = (unsigned int *)v31;
  int v31 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
  }
  if (v26)
  {
    if (atomic_fetch_add(v26, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v26);
      return (unsigned int *)WTF::fastFree((WTF *)v26, v27);
    }
  }
  return result;
}

void sub_198718F50(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  if (a18 && atomic_fetch_add((atomic_uint *volatile)a18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a18);
    WTF::fastFree(a18, a2);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  void *v18 = 0;
  WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v19, a2);
  _Unwind_Resume(a1);
}

WebKit::WebPageInspectorController *WebKit::WebPageInspectorController::WebPageInspectorController(Inspector::BackendDispatcher **this, WebKit::WebPageProxy *a2)
{
  Inspector::FrontendRouter::create((Inspector::FrontendRouter *)this);
  uint64_t v4 = *this;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)*this + 1;
  unsigned int v13 = v4;
  Inspector::BackendDispatcher::create();
  if (v13) {
    WTF::RefCounted<Inspector::FrontendRouter>::deref((uint64_t)v13, v5);
  }
  Inspector::AgentRegistry::AgentRegistry((Inspector::AgentRegistry *)(this + 2));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  int v6 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v6, 1u);
  this[4] = (Inspector::BackendDispatcher *)v6;
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  *((unsigned char *)this + 64) = 0;
  unsigned int v7 = *this;
  uint64_t v8 = this[1];
  uint64_t v9 = (Inspector::InspectorTargetAgent *)WTF::fastMalloc((WTF *)0x40);
  uint64_t v10 = Inspector::InspectorTargetAgent::InspectorTargetAgent(v9, v7, v8);
  this[5] = (Inspector::BackendDispatcher *)v10;
  uint64_t v12 = v10;
  Inspector::AgentRegistry::append();
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return (WebKit::WebPageInspectorController *)this;
}

WTF::StringImpl *WebKit::WebPageInspectorController::init(WebKit::WebPageInspectorController *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 4) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *(void *)(*(void *)(v3 + 32) + 1928), &v6);
  WebKit::WebPageInspectorController::createInspectorTarget((uint64_t)this, (_DWORD **)&v6, 0);
  uint64_t result = v6;
  int v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::WebPageInspectorTargetController *WebKit::WebPageInspectorTargetController::WebPageInspectorTargetController(WebKit::WebPageInspectorTargetController *this, WebKit::WebPage *a2)
{
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *(void *)this = a2;
  *((void *)this + 1) = &unk_1EE9F1900;
  *((void *)this + 5) = a2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  uint64_t v4 = (uint64_t *)((char *)this + 56);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((void *)a2 + 5), &v10);
  uint64_t v9 = v3;
  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WebKit::WebPageInspectorTarget *>(v4, &v10, (uint64_t *)&v9, (uint64_t)v8);
  int v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long long>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  unint64_t v6 = a3;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(v7, &v6, a4);
  if (!*a4) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v8 = *a1;
  if (v5 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v5;
    unint64_t v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  v16[4] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v11 = v16[0];
        if (v16[0])
        {
          uint64_t v12 = (unsigned char *)(v16[0] + 20);
          *(_DWORD *)v16[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(void *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          if (a4)
          {
            if (a4 == 1) {
              unsigned char *v12 = a3->i8[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)(v11 + 20), a3, a4);
            }
          }
          uint64_t v13 = 0;
          do
          {
            *((unsigned char *)&v16[3] + v13--) = (a5 % 0xA) | 0x30;
            BOOL v14 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v14);
          if (v13 + 26 <= 25) {
            uint64_t result = (uint64_t)memcpy(&v12[a4], (char *)&v16[3] + v13 + 1, -v13);
          }
        }
        goto LABEL_12;
      }
LABEL_15:
      uint64_t v11 = 0;
      goto LABEL_12;
    }
LABEL_16:
    uint64_t v11 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if (!result) {
    goto LABEL_16;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_15;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v11 = v16[0];
  if (v16[0])
  {
    int v15 = (char *)(v16[0] + 20);
    *(_DWORD *)v16[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(void *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>(v15, a3, a4, a5);
  }
LABEL_12:
  *a6 = v11;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  int v3 = 0;
  int v4 = *(_DWORD *)(result + 8);
  unint64_t v5 = *a2;
  do
  {
    ++v3;
    BOOL v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (((v3 | v4) & 0x80000000) == 0)
  {
    BOOL v7 = __OFADD__(v4, v3);
    uint64_t v8 = (v4 + v3);
    if (!v7) {
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>(v8, 1, *(int8x16_t **)result, *(void *)(result + 8), *a2, a3);
    }
  }
  *a3 = 0;
  return result;
}

void WebKit::WebPageInspectorController::createInspectorTarget(uint64_t a1, _DWORD **a2, char a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x40);
  uint64_t v13 = (WebKit::InspectorTargetProxy *)WebKit::InspectorTargetProxy::InspectorTargetProxy(v8, v7, a2, a3);
  WebKit::WebPageInspectorController::addTarget(a1, &v13);
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(v10, v9);
    WTF::fastFree(v11, v12);
  }
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

WTF::StringImpl *WebKit::WebPageInspectorController::addTarget(uint64_t a1, Inspector::InspectorTarget **a2)
{
  Inspector::InspectorTargetAgent::targetCreated(*(Inspector::InspectorTargetAgent **)(a1 + 40), *a2);
  int v4 = (WTF::StringImpl *)*((void *)*a2 + 5);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v8 = v4;
  WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>((uint64_t *)(a1 + 48), &v8, (const WTF::StringImpl *)a2, (uint64_t)&v7);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebExtensionController::addPage(WebKit::WebExtensionController *this, WebKit::WebPageProxy *a2)
{
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 72, (unsigned int *)a2, (uint64_t)v51);
  uint64_t v4 = *((void *)this + 21);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = (void *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      uint64_t v7 = (void *)*((void *)this + 21);
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        uint64_t v7 = (void *)*((void *)this + 21);
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            uint64_t v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v7 = (void *)(v4 + 16 * v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)(v4 + 16 * v5);
  if (v4)
  {
LABEL_8:
    int v9 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  int v9 = 0;
LABEL_13:
  while (v7 != v9)
  {
    uint64_t v10 = v7[1];
    ++*(_DWORD *)(v10 + 8);
    v51[0] = (uint64_t *)v10;
    WebKit::WebPageProxy::setURLSchemeHandlerForScheme(a2, (const WTF::StringImpl **)v51);
    uint64_t v11 = v51[0];
    v51[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1) {
        (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      }
      else {
        --*((_DWORD *)v11 + 2);
      }
    }
    uint64_t v12 = v7 + 2;
    uint64_t v7 = v6;
    if (v12 != v6)
    {
      uint64_t v7 = v12;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          uint64_t v7 = v6;
          break;
        }
      }
    }
  }
  uint64_t v13 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)a2 + 6) + 24));
  CFRetain(*(CFTypeRef *)(v13 + 8));
  BOOL v14 = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 88, (unsigned int *)v13, (uint64_t)v51);
  if (v52)
  {
    int v15 = WebKit::WebExtensionMatchPattern::extensionSchemes((WebKit::WebExtensionMatchPattern *)v14);
    int v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v15);
    uint64_t v18 = v16;
    uint64_t v20 = v19;
    if (*v15) {
      uint64_t v21 = *v15 + 8 * *(unsigned int *)(*v15 - 4);
    }
    else {
      uint64_t v21 = 0;
    }
    if ((WTF::StringImpl **)v21 != v16)
    {
      do
      {
        WebKit::WebProcessPool::registerURLSchemeAsSecure((WebKit::WebProcessPool *)v13, v18, v17);
        WebKit::WebProcessPool::registerURLSchemeAsBypassingContentSecurityPolicy((WebKit::WebProcessPool *)v13, v18, v22);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v13 + 352), v18, v23, (uint64_t)v51);
        v51[0] = (uint64_t *)v18;
        WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(v13, v51, 0);
        while (++v18 != v20)
        {
          if ((unint64_t)*v18 + 1 > 1) {
            goto LABEL_33;
          }
        }
        uint64_t v18 = v20;
LABEL_33:
        ;
      }
      while (v18 != (WTF::StringImpl **)v21);
    }
    uint64_t v24 = *((void *)this + 4);
    uint64_t v49 = 167;
    uint64_t v50 = v24;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v13 + 64), (unsigned __int8 *)&v49, (uint64_t)this + 16, (unsigned __int8 **)v51);
    int v25 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
    uint64_t v26 = v25;
    unint64_t v28 = v27;
    uint64_t v29 = *((void *)this + 7);
    if (v29) {
      unsigned int v30 = (void *)(v29 + 8 * *(unsigned int *)(v29 - 4));
    }
    else {
      unsigned int v30 = 0;
    }
    if (v30 != v25)
    {
      do
      {
        uint64_t v31 = *v26;
        CFRetain(*(CFTypeRef *)(*v26 + 8));
        uint64_t v32 = *(void *)(v31 + 32);
        uint64_t v49 = 165;
        uint64_t v50 = v32;
        WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v13 + 64), (unsigned __int8 *)&v49, v31 + 16, (unsigned __int8 **)v51);
        CFRelease(*(CFTypeRef *)(v31 + 8));
        while (++v26 != v28)
        {
          if ((unint64_t)(*v26 + 1) > 1) {
            goto LABEL_43;
          }
        }
        uint64_t v26 = v28;
LABEL_43:
        ;
      }
      while (v26 != v30);
    }
  }
  uint64_t v33 = *((void *)a2 + 39);
  CFRetain(*(CFTypeRef *)(v33 + 8));
  if (!*((void *)this + 24))
  {
    int v34 = (void *)WTF::fastMalloc((WTF *)0x18);
    v34[1] = 0;
    void *v34 = &unk_1EEA00048;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    int v35 = (atomic_uint *)*((void *)this + 3);
    if (v35) {
      atomic_fetch_add(v35, 1u);
    }
    v34[2] = v35;
    uint64_t v36 = *((void *)this + 24);
    *((void *)this + 24) = v34;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
  }
  WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>((uint64_t)this + 104, (unsigned int *)v33, (uint64_t)v51);
  uint64_t v37 = WebKit::WebsiteDataStore::cookieStore((WebKit::WebsiteDataStore *)v33);
  API::HTTPCookieStore::registerObserver((uint64_t)v37, *((void **)this + 24));
  uint64_t v38 = *((void *)a2 + 35);
  CFRetain(*(CFTypeRef *)(v38 + 8));
  uint64_t v39 = *(void *)(v33 + 24);
  if ((v39 & 0x8000000000000000) == 0 || v39 == -1)
  {
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 136, (unsigned int *)v38, (uint64_t)v51);
    char v40 = 1;
  }
  else
  {
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 152, (unsigned int *)v38, (uint64_t)v51);
    char v40 = 0;
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 120, (unsigned int *)v38, (uint64_t)v51);
  if (v52)
  {
    uint64_t v41 = (void *)((char *)this + 56);
    uint64_t v42 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 7);
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v46 = *v41 ? *v41 + 8 * *(unsigned int *)(*v41 - 4) : 0;
    if ((void *)v46 != v42)
    {
      do
      {
        uint64_t v47 = *v43;
        CFRetain(*(CFTypeRef *)(*v43 + 8));
        if (*(unsigned char *)(v47 + 273)) {
          char v48 = 1;
        }
        else {
          char v48 = v40;
        }
        if (v48) {
          WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)v47, (WebKit::WebUserContentControllerProxy *)v38);
        }
        CFRelease(*(CFTypeRef *)(v47 + 8));
        while (++v43 != v45)
        {
          if ((unint64_t)(*v43 + 1) > 1) {
            goto LABEL_66;
          }
        }
        uint64_t v43 = v45;
LABEL_66:
        ;
      }
      while (v43 != (void *)v46);
    }
  }
  CFRelease(*(CFTypeRef *)(v38 + 8));
  CFRelease(*(CFTypeRef *)(v33 + 8));
  CFRelease(*(CFTypeRef *)(v13 + 8));
}

void sub_198719B3C(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v5, a2);
  WTF::fastFree(v4, v7);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + ++*(_DWORD *)(this + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 6, (uint64_t)(a2 + 4));
  uint64_t v20 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  uint64_t v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

uint64_t WebKit::WebProcessPool::registerURLSchemeAsBypassingContentSecurityPolicy(WebKit::WebProcessPool *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&qword_1EB35A6F8, a2, a3, (uint64_t)&v13);
  uint64_t v13 = (uint64_t *)a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>((uint64_t)this, &v13, 0);
  WebKit::NetworkProcessProxy::allNetworkProcesses(v5, (uint64_t)&v13);
  if (v14)
  {
    unsigned int v7 = v13;
    uint64_t v8 = 8 * v14;
    do
    {
      uint64_t v9 = *v7;
      int v10 = (atomic_uint *)(*v7 + 16);
      atomic_fetch_add(v10, 1u);
      uint64_t v12 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(v9, (uint64_t **)&v12, 0, 0);
      if (v9) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v6);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 438;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::registerURLSchemeAsSecure(WebKit::WebProcessPool *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&qword_1EB35A6F0, a2, a3, (uint64_t)&v13);
  uint64_t v13 = (uint64_t *)a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsSecure>((uint64_t)this, &v13, 0);
  WebKit::NetworkProcessProxy::allNetworkProcesses(v5, (uint64_t)&v13);
  if (v14)
  {
    unsigned int v7 = v13;
    uint64_t v8 = 8 * v14;
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = (atomic_uint *)(*v7 + 16);
      atomic_fetch_add(v10, 1u);
      uint64_t v12 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsSecure>(v9, (uint64_t **)&v12, 0, 0);
      if (v9) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v6);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsSecure>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 441;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    unsigned int v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2651;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    unsigned int v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2674;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsSecure>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    unsigned int v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsSecure>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsSecure>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2659;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::InspectorTargetProxy::InspectorTargetProxy(uint64_t a1, uint64_t a2, _DWORD **a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE9E3540;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v8 = *(atomic_uint **)(a2 + 24);
  atomic_fetch_add(v8, 1u);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *a3;
  if (*a3) {
    *v9 += 2;
  }
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  return a1;
}

WebKit::WebInspectorUIProxy *WebKit::WebInspectorUIProxy::WebInspectorUIProxy(WebKit::WebInspectorUIProxy *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E3590;
  *((void *)this + 2) = &unk_1EE9E35D0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_1EE9E3608;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 5) = v4;
  *((void *)this + 6) = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v5 = &unk_1EE9E3648;
  *((void *)this + 7) = v5;
  uint64_t v6 = *(void *)(*((void *)a2 + 4) + 760);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = v6;
  uint64_t v7 = *(void *)(*((void *)this + 5) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 256);
  uint64_t v10 = *(void *)(*(void *)(v8 + 32) + 1928);
  v13[0] = 180;
  v13[1] = v10;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v9 + 160), (unsigned __int8 *)v13, (uint64_t)this + 16, &v12);
  return this;
}

WebKit::WebBackForwardList *WebKit::WebBackForwardList::WebBackForwardList(WebKit::WebBackForwardList *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9D84B8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = v4;
  *((unsigned char *)this + 40) = 0;
  return this;
}

WebKit::WebPageDebuggable *WebKit::WebPageDebuggable::WebPageDebuggable(WebKit::WebPageDebuggable *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = this;
  *((_DWORD *)this + 4) = 0;
  *(void *)this = MEMORY[0x1E4F309B0] + 16;
  *((void *)this + 1) = v4;
  if (JSRemoteInspectorGetInspectionFollowsInternalPolicies()) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  *((unsigned char *)this + 20) = v5;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 36) = 0;
  *(void *)this = &unk_1EE9E37E0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v6 = (atomic_uint *)*((void *)a2 + 3);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *((void *)this + 5) = v6;
  *((void *)this + 6) = 0;
  return this;
}

API::HTTPCookieStore *WebKit::WebsiteDataStore::cookieStore(WebKit::WebsiteDataStore *this)
{
  uint64_t result = (API::HTTPCookieStore *)*((void *)this + 49);
  if (!result)
  {
    uint64_t v3 = (API::HTTPCookieStore *)API::Object::newObject(0x30uLL, 66);
    uint64_t result = API::HTTPCookieStore::HTTPCookieStore(v3, this);
    uint64_t v4 = *((void *)this + 49);
    *((void *)this + 49) = result;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      return (API::HTTPCookieStore *)*((void *)this + 49);
    }
  }
  return result;
}

WebKit::PageLoadState *WebKit::PageLoadState::PageLoadState(WebKit::PageLoadState *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v4, 1u);
  *((void *)this + 2) = v4;
  *((_DWORD *)this + 6) = 2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  WTF::URL::invalidate((WebKit::PageLoadState *)((char *)this + 120));
  *((_WORD *)this + 80) = 0;
  *((unsigned char *)this + 162) = 0;
  *((void *)this + 21) = 0;
  *((unsigned char *)this + 176) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 2;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  WTF::URL::invalidate((WebKit::PageLoadState *)((char *)this + 288));
  *((_WORD *)this + 164) = 0;
  *((unsigned char *)this + 330) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 344) = 0;
  *((_DWORD *)this + 93) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((unsigned char *)this + 368) = 0;
  return this;
}

uint64_t WebKit::WebPageProxy::updateHiddenPageThrottlingAutoIncreases(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, a3);
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *(void *)(v6 + 752);
  if (result)
  {
    if (v7) {
      return result;
    }
    uint64_t v8 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(v9 + 568);
    if (!v10 || (v11 = *(uint64_t **)v10, ++*(void *)(v10 + 8), !v11) || (uint64_t result = *v11) == 0)
    {
      *(void *)(v6 + 752) = v10;
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, 1);
    uint64_t v12 = *((void *)this + 4);
    uint64_t v13 = *(void *)(v12 + 752);
    *(void *)(v12 + 752) = v10;
    if (!v13) {
      return result;
    }
    unsigned int v14 = *(uint64_t **)v13;
    uint64_t v15 = *(void *)(v13 + 8) - 1;
    *(void *)(v13 + 8) = v15;
    if (v14)
    {
      uint64_t result = *v14;
      if (!*v14) {
        return result;
      }
      char v16 = *(unsigned char *)(v13 + 16);
      *(unsigned char *)(v13 + 16) = 1;
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
      *(unsigned char *)(v13 + 16) = v16;
      if (*(void *)v13) {
        return result;
      }
      uint64_t v15 = *(void *)(v13 + 8);
    }
    if (!v15)
    {
LABEL_24:
      JUMPOUT(0x199740C10);
    }
  }
  else
  {
    *(void *)(v6 + 752) = 0;
    if (!v7) {
      return result;
    }
    char v17 = *(uint64_t **)v7;
    uint64_t v18 = *(void *)(v7 + 8) - 1;
    *(void *)(v7 + 8) = v18;
    if (v17)
    {
      uint64_t result = *v17;
      if (!*v17) {
        return result;
      }
      char v19 = *(unsigned char *)(v7 + 16);
      *(unsigned char *)(v7 + 16) = 1;
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
      *(unsigned char *)(v7 + 16) = v19;
      if (*(void *)v7) {
        return result;
      }
      uint64_t v18 = *(void *)(v7 + 8);
    }
    if (!v18) {
      goto LABEL_24;
    }
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::addAllMessageReceivers(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 32);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)(*((void *)this + 4) + 1960), v2, *(unsigned __int8 **)(*((void *)this + 4) + 1928), (uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = v3 + 912;
  uint64_t v5 = *(void *)(v3 + 1928);
  v8[0] = 45;
  v8[1] = v5;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v2 + 160), (unsigned __int8 *)v8, v4, &v7);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
}

unsigned int *WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages(a1);
  v13[0] = 184;
  v13[1] = a3;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a2 + 160), (unsigned __int8 *)v13, a4, &v10);
  atomic_fetch_add((atomic_uint *volatile)(a2 + 16), 1u);
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  char v12 = 1;
  uint64_t result = std::__optional_storage_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>>((unsigned int *)a1, (uint64_t)&v10);
  if (v12)
  {
    uint64_t v9 = v11;
    uint64_t v11 = 0;
    if (v9) {
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
    }
  }
  return result;
}

unsigned int *std::__optional_storage_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>>(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*((unsigned __int8 *)result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((unsigned char *)result + 16))
    {
      *(void *)uint64_t result = *(void *)a2;
      uint64_t v3 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      uint64_t v4 = *((void *)result + 1);
      *((void *)result + 1) = v3;
      if (v4)
      {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
      }
    }
  }
  else if (*((unsigned char *)result + 16))
  {
    uint64_t v5 = *((void *)result + 1);
    *((void *)result + 1) = 0;
    if (v5) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
    }
    *((unsigned char *)v2 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t result = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *((void *)result + 1) = v6;
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unsigned __int8 *WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages(unsigned __int8 *this)
{
  if (this[16])
  {
    uint64_t v1 = *(void *)this;
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    this[16] = 0;
    this = IPC::MessageReceiverMap::removeMessageReceiver(v2 + 152, 0xB8u, v1);
    if (v2)
    {
      return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
    }
  }
  return this;
}

uint64_t WebKit::TextChecker::isSmartInsertDeleteEnabled(WebKit::TextChecker *this)
{
  return [MEMORY[0x1E4F42B20] smartInsertDeleteIsEnabled];
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359C58;
  if (qword_1EB359C58)
  {
    int v3 = *(_DWORD *)(qword_1EB359C58 - 4);
    int v4 = *(_DWORD *)(qword_1EB359C58 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359C58 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB359C58 - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (uint64_t *)(v2 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1EB359C58) {
            int v12 = *(_DWORD *)(qword_1EB359C58 - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(qword_1EB359C58 + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          uint64_t v20 = (uint64_t *)(qword_1EB359C58 + 16 * v18);
          uint64_t v21 = (unsigned int *)v20[1];
          v20[1] = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v6);
          }
          uint64_t *v20 = *v8;
          uint64_t v22 = v2 + 16 * v7;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          v20[1] = v23;
          uint64_t v11 = *(atomic_uint **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = v2 + 16 * v7;
          uint64_t v11 = *(atomic_uint **)(v10 + 8);
          *(void *)(v10 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        atomic_store(1u, (unsigned int *)v11);
        WTF::fastFree((WTF *)v11, v6);
      }
LABEL_18:
      if (++v7 == v3) {
        goto LABEL_25;
      }
    }
  }
  if (v2)
  {
LABEL_25:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand()
{
  if (qword_1EB359C58 && (int v0 = *(_DWORD *)(qword_1EB359C58 - 4)) != 0) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359C58 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(8u);
  }
}

WebKit::InspectorTargetProxy *WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    unint64_t v15 = (WTF **)(v8 + 16 * v14);
    unsigned int v16 = *v15;
    if (*v15 != (WTF *)-1) {
      break;
    }
    int v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      unsigned __int8 *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      unint64_t v15 = v12;
    }
    WTF::String::operator=((uint64_t *)v15, (uint64_t *)a2);
    int v17 = *(WebKit::InspectorTargetProxy **)a3;
    *(void *)a3 = 0;
    uint64_t result = std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v15 + 1, v17);
    uint64_t v19 = *a1;
    if (*a1) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - ++*(_DWORD *)(this + 12) = v20;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_26:
        uint64_t result = (WebKit::InspectorTargetProxy *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        unint64_t v15 = (WTF **)result;
        uint64_t v23 = *a1;
        if (*a1) {
          unint64_t v26 = *(unsigned int *)(v23 - 4);
        }
        else {
          unint64_t v26 = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_26;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v23 + 16 * v26;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v21 = *a1;
  if (*a1) {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v21 + 16 * v22;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t v27 = *(WebKit::InspectorTargetProxy **)a3;
  *(void *)a3 = 0;

  return std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100]((WebKit::InspectorTargetProxy **)(v8 + 16 * v14 + 8), v27);
}

WebKit::InspectorTargetProxy *std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](WebKit::InspectorTargetProxy **a1, WebKit::InspectorTargetProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(result, a2);
    return (WebKit::InspectorTargetProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      unint64_t v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v14 + 4);
          if (v18 >= 0x100) {
            unsigned int v19 = v18 >> 8;
          }
          else {
            unsigned int v19 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v20 = 0;
          do
          {
            uint64_t v21 = v19 & v17;
            unsigned int v19 = ++v20 + v21;
          }
          while (*(void *)(v16 + 16 * v21));
          uint64_t v22 = (WTF::StringImpl **)(v16 + 16 * v21);
          std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v22 + 1, 0);
          int v24 = *v22;
          *uint64_t v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v23);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = *v13;
          *unint64_t v13 = 0;
          *uint64_t v22 = v25;
          unint64_t v26 = (WebKit::InspectorTargetProxy **)(v6 + 16 * v11);
          unint64_t v27 = v26[1];
          *++unint64_t v26 = 0;
          v22[1] = v27;
          std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v26, 0);
          unint64_t v28 = *v13;
          *unint64_t v13 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v10);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (v13 == a3) {
            int v12 = v22;
          }
        }
        else
        {
          std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100]((WebKit::InspectorTargetProxy **)(v6 + 16 * v11 + 8), 0);
          unint64_t v15 = *v13;
          *unint64_t v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

API::HTTPCookieStore *API::HTTPCookieStore::HTTPCookieStore(API::HTTPCookieStore *this, WebKit::WebsiteDataStore *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DFD70;
  *((void *)this + 2) = *((void *)a2 + 3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  int v4 = (atomic_uint *)*((void *)a2 + 2);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v4;
  return this;
}

void sub_19871B6F0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

WebKit::ViewGestureController *WebKit::ViewGestureController::ViewGestureController(WebKit::ViewGestureController *this, WebKit::WebPageProxy *a2)
{
  *((void *)this + 1) = 0;
  int v4 = (unsigned int *)((char *)this + 8);
  *(void *)this = &unk_1EE9DD9C8;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 1;
  unsigned int v5 = (WebKit::ViewGestureController *)((char *)this + 32);
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  int v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v7 = &unk_1EE9DDA88;
  v7[1] = WebKit::ViewGestureController::checkForActiveLoads;
  uint64_t v7[2] = 0;
  v7[3] = this;
  int v8 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase(v5, v6);
  *((void *)this + 4) = &unk_1EE9B3390;
  *((unsigned char *)this + 168) = 0;
  *((void *)this + 7) = v7;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 149) = 0u;
  uint64_t v9 = (WTF::RunLoop *)WTF::RunLoop::main(v8);
  unsigned int v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9DDAB0;
  v10[1] = WebKit::ViewGestureController::SnapshotRemovalTracker::watchdogTimerFired;
  uint64_t v10[2] = 0;
  v10[3] = (char *)this + 168;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::ViewGestureController *)((char *)this + 200), v9);
  *((void *)this + 25) = &unk_1EE9B3390;
  *((void *)this + 28) = v10;
  *((unsigned char *)this + 232) = 1;
  *((void *)this + 30) = 0;
  if (!*((unsigned char *)a2 + 801) && *((unsigned char *)a2 + 800)) {
    WebKit::ViewGestureController::connectToProcess((unsigned __int8 *)this);
  }
  {
    uint64_t v11 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers;
    uint64_t v12 = *(void *)(*((void *)a2 + 4) + 760);
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
    {
LABEL_7:
      int v13 = *(_DWORD *)(v11 - 8);
      goto LABEL_8;
    }
  }
  else
  {
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
    uint64_t v12 = *(void *)(*((void *)a2 + 4) + 760);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v11 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers;
  if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers) {
    goto LABEL_7;
  }
  int v13 = 0;
LABEL_8:
  unint64_t v14 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
  unsigned int v18 = (void *)(v11 + 16 * v17);
  uint64_t v19 = *v18;
  if (!*v18)
  {
LABEL_16:
    void *v18 = v12;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, (uint64_t)this);
    uint64_t v23 = (atomic_uint *)*((void *)this + 1);
    atomic_fetch_add(v23, 1u);
    int v24 = (unsigned int *)v18[1];
    v18[1] = v23;
    if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v22);
    }
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers) {
      int v25 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) + 1;
    }
    else {
      int v25 = 1;
    }
    *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - ++*(_DWORD *)(this + 12) = v25;
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers) {
      int v26 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 16) + v26);
    unint64_t v28 = *(unsigned int *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27) {
        return this;
      }
    }
    else if (3 * v28 > 4 * v27)
    {
      return this;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
    return this;
  }
  int v20 = 0;
  int v21 = 1;
  while (v19 != v12)
  {
    if (v19 == -1) {
      int v20 = v18;
    }
    unsigned int v17 = (v17 + v21) & v13;
    unsigned int v18 = (void *)(v11 + 16 * v17);
    uint64_t v19 = *v18;
    ++v21;
    if (!*v18)
    {
      if (v20)
      {
        void *v20 = 0;
        v20[1] = 0;
        --*(_DWORD *)(v11 - 16);
        unsigned int v18 = v20;
      }
      goto LABEL_16;
    }
  }
  return this;
}

void WebKit::ViewGestureController::installSwipeHandler(WebKit::ViewGestureController *this, UIView *a2, UIView *a3)
{
  unsigned int v5 = [[WKSwipeTransitionController alloc] initWithViewGestureController:this gestureRecognizerView:a2];
  uint64_t v6 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = v5;
  if (v6) {
    CFRelease(v6);
  }
  *((void *)this + 13) = a3;
}

unsigned __int8 *WebKit::ViewGestureController::connectToProcess(unsigned __int8 *this)
{
  if (!this[161])
  {
    uint64_t v1 = this;
    uint64_t v2 = *((void *)this + 2);
    uint64_t v3 = *(void *)(v2 + 256);
    uint64_t v4 = *(void *)(*(void *)(v2 + 32) + 1928);
    v6[0] = 153;
    v6[1] = v4;
    this = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v3 + 160), (unsigned __int8 *)v6, (uint64_t)this, &v5);
    v1[161] = 1;
  }
  return this;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers;
  if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
  {
    int v3 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
    int v4 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (uint64_t *)(v2 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers) {
            int v12 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          int v20 = (uint64_t *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers + 16 * v18);
          int v21 = (unsigned int *)v20[1];
          v20[1] = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v6);
          }
          uint64_t *v20 = *v8;
          uint64_t v22 = v2 + 16 * v7;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          v20[1] = v23;
          uint64_t v11 = *(atomic_uint **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = v2 + 16 * v7;
          uint64_t v11 = *(atomic_uint **)(v10 + 8);
          *(void *)(v10 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        atomic_store(1u, (unsigned int *)v11);
        WTF::fastFree((WTF *)v11, v6);
      }
LABEL_18:
      if (++v7 == v3) {
        goto LABEL_25;
      }
    }
  }
  if (v2)
  {
LABEL_25:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers
    && (int v0 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4)) != 0)
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(8u);
  }
}

void sub_19871BF08(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

double WebKit::ProcessAssertion::remainingRunTimeInSeconds(WebKit::ProcessAssertion *this)
{
  int v1 = (int)this;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F963F8] identifierWithPid:this];
  if (!v2)
  {
    uint64_t v6 = qword_1EB358348;
    if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR)) {
      return 0.0;
    }
    int v8 = 67109120;
    int v9 = v1;
    uint64_t v7 = "ProcessAssertion::remainingRunTimeInSeconds failed to get identifier for process with PID=%d";
LABEL_11:
    _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v8, 8u);
    return 0.0;
  }
  int v3 = (void *)[MEMORY[0x1E4F963E8] handleForIdentifier:v2 error:0];
  if (!v3)
  {
    uint64_t v6 = qword_1EB358348;
    if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR)) {
      return 0.0;
    }
    int v8 = 67109120;
    int v9 = v1;
    uint64_t v7 = "ProcessAssertion::remainingRunTimeInSeconds failed to get handle for process with PID=%d";
    goto LABEL_11;
  }
  int v4 = (void *)[v3 activeLimitations];

  [v4 runTime];
  return result;
}

void IPC::StreamConnectionWorkQueue::processStreams(IPC::StreamConnectionWorkQueue *this)
{
  int v4 = (char *)this + 41;
  unsigned int v5 = (char *)this + 96;
  do
  {
    uint64_t v6 = (atomic_uint *)WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)v156);
    char v8 = 0;
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      uint64_t v6 = (atomic_uint *)MEMORY[0x19972E8D0](v4);
    }
    unint64_t v10 = *((void *)this + 7);
    unint64_t v9 = *((void *)this + 8);
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    unint64_t v150 = (WTF *)*((void *)this + 9);
    unint64_t v151 = v9;
    *((void *)this + 9) = 0;
    uint64_t v143 = *((unsigned int *)this + 20);
    *((_DWORD *)this + 20) = 0;
    if (v5 != (char *)&v154)
    {
      uint64_t v7 = *((unsigned int *)this + 27);
      if (HIDWORD(v155) > v7)
      {
        uint64_t v6 = (atomic_uint *)WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)&v154, v7);
      }
      else
      {
        LODWORD(v11) = v155;
        if (v7 > v155)
        {
          if (v155)
          {
            if (HIDWORD(v155)) {
              WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)&v154, 0);
            }
            uint64_t v6 = (atomic_uint *)v154;
            if (v154)
            {
              uint64_t v154 = 0;
              LODWORD(v155) = 0;
              uint64_t v6 = (atomic_uint *)WTF::fastFree((WTF *)v6, (void *)v7);
            }
          }
          uint64_t v12 = *((unsigned int *)this + 27);
          if (v155 < v12)
          {
            unint64_t explicit = v12 >> 29;
            if (explicit)
            {
              __break(0xC471u);
LABEL_254:
              __break(1u);
LABEL_255:
              atomic_store(v11, (unsigned int *)explicit);
              uint64_t v6 = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
              goto LABEL_231;
            }
            unint64_t v14 = v154;
            uint64_t v15 = HIDWORD(v155);
            unsigned int v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
            LODWORD(v155) = v12;
            uint64_t v154 = v16;
            uint64_t v6 = (atomic_uint *)memcpy(v16, v14, 8 * v15);
            if (v14)
            {
              if (v154 == v14)
              {
                uint64_t v154 = 0;
                LODWORD(v155) = 0;
              }
              uint64_t v6 = (atomic_uint *)WTF::fastFree(v14, (void *)v7);
            }
          }
        }
      }
      unint64_t v1 = *(void *)v5;
      uint64_t v2 = (unsigned int *)v154;
      if (HIDWORD(v155))
      {
        uint64_t v12 = (uint64_t)v4;
        int v4 = (atomic_uchar *)(8 * HIDWORD(v155));
        do
        {
          uint64_t v124 = *(void *)v1;
          atomic_fetch_add((atomic_uint *volatile)(*(void *)v1 + 8), 1u);
          uint64_t v6 = *(atomic_uint **)v2;
          *(void *)uint64_t v2 = v124;
          if (v6)
          {
            unint64_t explicit = (unint64_t)(v6 + 2);
            LODWORD(v11) = atomic_fetch_add(v6 + 2, 0xFFFFFFFF);
            if (v11 == 1) {
              goto LABEL_255;
            }
          }
LABEL_231:
          v1 += 8;
          v2 += 2;
          v4 -= 8;
        }
        while (v4);
        unint64_t v1 = *(void *)v5;
        uint64_t v17 = HIDWORD(v155);
        uint64_t v2 = (unsigned int *)v154;
        int v4 = (atomic_uchar *)v12;
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *((unsigned int *)this + 27);
      if (v17 != v18)
      {
        uint64_t v19 = &v2[2 * v17];
        int v20 = (uint64_t *)(v1 + 8 * v17);
        uint64_t v21 = 8 * v18 - 8 * v17;
        do
        {
          uint64_t v22 = *v20++;
          atomic_fetch_add((atomic_uint *volatile)(v22 + 8), 1u);
          *(void *)uint64_t v19 = v22;
          v19 += 2;
          v21 -= 8;
        }
        while (v21);
        LODWORD(v17) = *((_DWORD *)this + 27);
      }
      HIDWORD(v155) = v17;
    }
    int v23 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 != 1) {
      uint64_t v6 = (atomic_uint *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    if (v10 != v151)
    {
      uint64_t v2 = (unsigned int *)v10;
      do
      {
        uint64_t v6 = (atomic_uint *)(*(uint64_t (**)(void))(**((void **)v150 + (void)v2) + 16))(*((void *)v150 + (void)v2));
        uint64_t v2 = (unsigned int *)((char *)v2 + v143 + 1);
        do
          uint64_t v2 = (unsigned int *)((char *)v2 - v143);
        while ((unint64_t)v2 >= v143);
      }
      while ((unsigned int *)v151 != v2);
    }
    if (HIDWORD(v155))
    {
      unsigned int v24 = 0;
      uint64_t v27 = v154;
      uint64_t v144 = (char *)v154 + 8 * HIDWORD(v155);
      unint64_t v145 = v10;
      unint64_t v146 = v5;
      unint64_t v147 = v4;
      while (1)
      {
        unsigned int v149 = v24;
        uint64_t v2 = 0;
        unint64_t v1 = 0;
        unint64_t v10 = 0;
        uint64_t v148 = v27;
        unsigned int v5 = *(char **)v27;
        uint64_t v152 = (WTF::Lock *)(*(void *)v27 + 136);
        uint64_t v141 = (uint64_t **)(*(void *)v27 + 40);
        unint64_t v142 = (WTF::Lock *)(*(void *)v27 + 80);
        uint64_t v12 = 214;
        while (1)
        {
          unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 8) + 16) + 128), memory_order_acquire);
          if (explicit == 0x80000000) {
            break;
          }
          unint64_t v28 = *((void *)v5 + 9);
          unint64_t v29 = *((void *)v5 + 7);
          if (v29 - 1 >= explicit) {
            unint64_t v30 = explicit;
          }
          else {
            unint64_t v30 = v29 - 1;
          }
          unint64_t v11 = (v28 + 1) & 0xFFFFFFFFFFFFFFFELL;
          if (v11 + 16 >= v29) {
            unint64_t v11 = 0;
          }
          if (v28 >= v30)
          {
            if (v28 > v30 && (v11 < v28 ? (BOOL v79 = v30 > v11) : (BOOL v79 = 1), v79))
            {
              if (v30 < v11) {
                unint64_t v30 = *((void *)v5 + 7);
              }
              unint64_t v31 = v30 - v11;
            }
            else
            {
              unint64_t v31 = 0;
            }
          }
          else
          {
            unint64_t v31 = v30 - v11;
            BOOL v32 = v30 > v11 && v11 >= v28;
            if (!v32) {
              unint64_t v31 = 0;
            }
          }
          uint64_t v33 = *((void *)v5 + 8);
          unint64_t v34 = *(void *)(v33 + 8);
          if (v34 <= 0xFF) {
            goto LABEL_254;
          }
          unint64_t v35 = v34 - 256;
          unint64_t v36 = v35 - v11;
          if (v35 < v11) {
            goto LABEL_254;
          }
          uint64_t v37 = *(void *)(v33 + 16);
          if (v31 != -1)
          {
            BOOL v32 = v36 >= v31;
            unint64_t v36 = v31;
            if (!v32) {
              goto LABEL_254;
            }
          }
          if (v36 <= 0xF)
          {
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v37 + 128), &explicit, 0x80000000uLL);
            unint64_t v62 = *((void *)v5 + 9);
            unint64_t v63 = *((void *)v5 + 7);
            unint64_t v64 = v63 - 1;
            if (v63 - 1 >= explicit) {
              unint64_t v64 = explicit;
            }
            unint64_t explicit = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
            if (explicit + 16 >= v63) {
              unint64_t explicit = 0;
            }
            if (v62 >= v64)
            {
              if (v62 > v64 && (explicit >= v62 || v64 > explicit))
              {
                if (v64 < explicit) {
                  unint64_t v64 = *((void *)v5 + 7);
                }
                unint64_t v11 = v64 - explicit;
              }
              else
              {
                unint64_t v11 = 0;
              }
            }
            else
            {
              unint64_t v11 = v64 - explicit;
              if (v64 <= explicit || explicit < v62) {
                unint64_t v11 = 0;
              }
            }
            uint64_t v66 = *((void *)v5 + 8);
            unint64_t v67 = *(void *)(v66 + 8);
            if (v67 <= 0xFF) {
              goto LABEL_254;
            }
            unint64_t v68 = v67 - 256;
            unint64_t v36 = v68 - explicit;
            if (v68 < explicit) {
              goto LABEL_254;
            }
            uint64_t v69 = *(void *)(v66 + 16);
            if (v11 != -1)
            {
              BOOL v32 = v36 >= v11;
              unint64_t v36 = v11;
              if (!v32) {
                goto LABEL_254;
              }
            }
            if (v36 < 0x10) {
              break;
            }
            uint64_t v38 = v69 + explicit;
          }
          else
          {
            uint64_t v38 = v37 + v11;
          }
          IPC::Decoder::Decoder((uint64_t)&v157, v38 + 256, v36, *((void *)v5 + 19));
          if (!v157) {
            goto LABEL_210;
          }
          unsigned int v39 = v161;
          if (v161 == 2871)
          {
            unint64_t v70 = v158;
            unint64_t v71 = ((v159 + 7) & 0xFFFFFFFFFFFFFFF8) - v157;
            if (v158 < v71 || v158 - v71 <= 7)
            {
              uint64_t v157 = 0;
              unint64_t v158 = 0;
              if (v160)
              {
                if (v70)
                {
                  (*(void (**)(void))(*(void *)v160 + 16))();
                  unint64_t v128 = v158;
                  uint64_t v157 = 0;
                  unint64_t v158 = 0;
                  if (v160)
                  {
                    if (v128) {
                      (*(void (**)(void))(*(void *)v160 + 16))();
                    }
                  }
                }
              }
LABEL_210:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v163, v141);
              IPC::Connection::dispatchDidReceiveInvalidMessage((uint64_t)v163[0], v161, v162);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v163);
              goto LABEL_191;
            }
            uint64_t v72 = *(void *)((v159 + 7) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v159 = ((v159 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (*((void *)v5 + 19) != v72)
            {
              *((void *)v5 + 19) = v72;
              if (v2)
              {
                if (atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v2 + 2);
                  (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
                }
                uint64_t v2 = 0;
              }
            }
            unint64_t v73 = (*((void *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v74 = *((void *)v5 + 7);
            if (v73 + 16 >= v74) {
              unint64_t v73 = 0;
            }
            uint64_t v75 = v159 - v157;
            if (v159 - v157 <= 0x10) {
              uint64_t v75 = 16;
            }
            unint64_t v43 = v73 + v75;
            if (v74 <= v43) {
              unint64_t v43 = 0;
            }
            uint64_t v44 = *(atomic_ullong **)(*((void *)v5 + 8) + 16);
            goto LABEL_70;
          }
          if (v161 == 2870)
          {
            char v80 = 0;
            atomic_compare_exchange_strong_explicit(v5 + 80, (unsigned __int8 *)&v80, 1u, memory_order_acquire, memory_order_acquire);
            if (v80) {
              MEMORY[0x19972E8D0](v142);
            }
            uint64_t v81 = *((void *)v5 + 11);
            if (v81 == *((void *)v5 + 12))
            {
              int v111 = 1;
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v142, (unsigned __int8 *)&v111, 0, memory_order_release, memory_order_relaxed);
              if (v111 != 1) {
                WTF::Lock::unlockSlow(v142);
              }
              goto LABEL_191;
            }
            uint64_t v82 = *((void *)v5 + 13);
            uint64_t v83 = *(void *)(v82 + 8 * v81);
            *(void *)(v82 + 8 * v81) = 0;
            std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(*((void *)v5 + 13) + 8 * v81));
            uint64_t v84 = *((void *)v5 + 11);
            if (v84 == *((unsigned int *)v5 + 28) - 1) {
              uint64_t v85 = 0;
            }
            else {
              uint64_t v85 = v84 + 1;
            }
            *((void *)v5 + 11) = v85;
            int v86 = 1;
            atomic_compare_exchange_strong_explicit(v5 + 80, (unsigned __int8 *)&v86, 0, memory_order_release, memory_order_relaxed);
            if (v86 != 1) {
              WTF::Lock::unlockSlow(v142);
            }
            int v87 = 0;
            unsigned int v88 = *(unsigned __int16 *)(v83 + 50);
            if (v88 >= 0xEF4) {
              unsigned int v88 = 3828;
            }
            int v89 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v88 + 2]);
            uint64_t v90 = *(void *)(v83 + 64);
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v152, (unsigned __int8 *)&v87, 1u, memory_order_acquire, memory_order_acquire);
            if (v87)
            {
              int v140 = v89;
              uint64_t v137 = v90;
              MEMORY[0x19972E8D0](v152);
              uint64_t v90 = v137;
              int v89 = v140;
            }
            uint64_t v91 = *((void *)v5 + 18);
            if (v91)
            {
              int v92 = *(_DWORD *)(v91 - 8);
              unsigned int v93 = 9 * ((~(v89 << 15) + v89) ^ ((~(v89 << 15) + v89) >> 10));
              unsigned int v94 = (v93 ^ (v93 >> 6)) + ~((v93 ^ (v93 >> 6)) << 11);
              unint64_t v95 = (v90 + ~(v90 << 32)) ^ ((unint64_t)(v90 + ~(v90 << 32)) >> 22);
              unint64_t v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
              unint64_t v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
              unsigned int v98 = v92 & ((0xD7862706ELL
                          * (unint64_t)(277951225 * (v94 ^ HIWORD(v94))
                                             + 95187966 * ((v97 >> 31) ^ v97))) >> 4);
              uint64_t v99 = (unsigned __int8 *)(v91 + 24 * v98);
              int v100 = *v99;
              uint64_t v101 = *((void *)v99 + 1);
              if (v100 != v89 || v101 != v90)
              {
                int v112 = 1;
                while (v100 || v101)
                {
                  unsigned int v98 = (v98 + v112) & v92;
                  uint64_t v113 = (unsigned __int8 *)(v91 + 24 * v98);
                  int v100 = *v113;
                  uint64_t v101 = *((void *)v113 + 1);
                  ++v112;
                  if (v100 == v89 && v101 == v90) {
                    goto LABEL_168;
                  }
                }
                goto LABEL_251;
              }
LABEL_168:
              uint64_t v103 = *(atomic_uint **)(v91 + 24 * v98 + 16);
              if (v103)
              {
                char v134 = 0;
                atomic_fetch_add(v103 + 2, 1u);
                goto LABEL_170;
              }
            }
            else
            {
LABEL_251:
              uint64_t v103 = 0;
            }
            char v134 = 1;
LABEL_170:
            unint64_t v139 = (IPC::Decoder *)v83;
            int v104 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v152, (unsigned __int8 *)&v104, 0, memory_order_release, memory_order_relaxed);
            if (v104 != 1)
            {
              __int16 v120 = v103;
              WTF::Lock::unlockSlow(v152);
              uint64_t v103 = v120;
            }
            if (v103
              && (unint64_t v135 = v103,
                  (*(void (**)(atomic_uint *, char *, IPC::Decoder *))(*(void *)v103 + 16))(v103, v5, v139), uint64_t v103 = v135, !*(void *)v139))
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v163, v141);
              IPC::Connection::dispatchDidReceiveInvalidMessage((uint64_t)v163[0], *((_WORD *)v139 + 25), *((_DWORD *)v139 + 18));
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v163);
              uint64_t v103 = v135;
              char v110 = 0;
            }
            else
            {
              unint64_t v105 = v159 - v157;
              unint64_t v106 = (*((void *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v107 = *((void *)v5 + 7);
              if (v106 + 16 >= v107) {
                unint64_t v106 = 0;
              }
              if (v105 <= 0x10) {
                unint64_t v105 = 16;
              }
              unint64_t v108 = v106 + v105;
              if (v107 <= v108) {
                unint64_t v108 = 0;
              }
              unint64_t v109 = atomic_exchange(*(atomic_ullong *volatile *)(*((void *)v5 + 8) + 16), v108);
              *((void *)v5 + 9) = v108;
              if (v109 == 0x80000000)
              {
                char v119 = v103;
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 41));
                uint64_t v103 = v119;
              }
              char v110 = 1;
            }
            int v4 = (atomic_uchar *)v139;
            if ((v134 & 1) == 0 && atomic_fetch_add(v103 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)v103 + 2);
              char v138 = v110;
              (*(void (**)(atomic_uint *))(*(void *)v103 + 8))(v103);
              char v110 = v138;
            }
            if (v139)
            {
              char v136 = v110;
              IPC::Decoder::~Decoder(v139);
              WTF::fastFree(v115, v116);
              if ((v136 & 1) == 0) {
                goto LABEL_191;
              }
            }
            else if ((v110 & 1) == 0)
            {
              goto LABEL_191;
            }
            goto LABEL_71;
          }
          if (v161 >= 0xEF4u) {
            unsigned int v39 = 3828;
          }
          int v4 = (atomic_uchar *)LOBYTE((&IPC::Detail::messageDescriptions)[3 * v39 + 2]);
          if (v12 != v4)
          {
            if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v2 + 2);
              (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
            }
            uint64_t v12 = (uint64_t)v4;
LABEL_79:
            if (v12 == 255 || (uint64_t v46 = *((void *)v5 + 19), !v12) && !v46)
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v163, v141);
              IPC::Connection::dispatchDidReceiveInvalidMessage((uint64_t)v163[0], v161, v162);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v163);
LABEL_249:
              uint64_t v2 = 0;
LABEL_191:
              IPC::Decoder::~Decoder((IPC::Decoder *)&v157);
              break;
            }
            char v47 = 0;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v152, (unsigned __int8 *)&v47, 1u, memory_order_acquire, memory_order_acquire);
            if (v47) {
              MEMORY[0x19972E8D0](v152);
            }
            uint64_t v48 = *((void *)v5 + 18);
            if (v48)
            {
              int v49 = *(_DWORD *)(v48 - 8);
              unsigned int v50 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
              unsigned int v51 = (v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11);
              unint64_t v52 = (v46 + ~(v46 << 32)) ^ ((unint64_t)(v46 + ~(v46 << 32)) >> 22);
              unint64_t v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
              unint64_t v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
              unsigned int v55 = v49 & ((0xD7862706ELL
                          * (unint64_t)(277951225 * (v51 ^ HIWORD(v51))
                                             + 95187966 * ((v54 >> 31) ^ v54))) >> 4);
              uint64_t v56 = (unsigned __int8 *)(v48 + 24 * v55);
              int v57 = *v56;
              uint64_t v58 = *((void *)v56 + 1);
              BOOL v59 = v57 == v12 && v58 == v46;
              if (!v59)
              {
                int v76 = 1;
                while (v57 || v58)
                {
                  unsigned int v55 = (v55 + v76) & v49;
                  uint64_t v77 = (unsigned __int8 *)(v48 + 24 * v55);
                  int v57 = *v77;
                  uint64_t v58 = *((void *)v77 + 1);
                  ++v76;
                  if (v57 == v12 && v58 == v46) {
                    goto LABEL_90;
                  }
                }
                goto LABEL_222;
              }
LABEL_90:
              uint64_t v2 = *(unsigned int **)(v48 + 24 * v55 + 16);
              if (v2) {
                atomic_fetch_add((atomic_uint *volatile)v2 + 2, 1u);
              }
            }
            else
            {
LABEL_222:
              uint64_t v2 = 0;
            }
            int v60 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v152, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
            if (v60 != 1) {
              WTF::Lock::unlockSlow(v152);
            }
            if (!v2)
            {
              char v122 = 0;
              int v123 = 1;
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v152, (unsigned __int8 *)&v122, 1u, memory_order_acquire, memory_order_acquire);
              if (v122) {
                MEMORY[0x19972E8D0](v152);
              }
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v152, (unsigned __int8 *)&v123, 0, memory_order_release, memory_order_relaxed);
              if (v123 != 1) {
                WTF::Lock::unlockSlow(v152);
              }
              goto LABEL_249;
            }
            goto LABEL_61;
          }
          if (!v2) {
            goto LABEL_79;
          }
LABEL_61:
          v5[120] = 1;
          (*(void (**)(unsigned int *, char *, uint64_t *))(*(void *)v2 + 16))(v2, v5, &v157);
          v5[120] = 0;
          if (!v157) {
            goto LABEL_210;
          }
          if (v161 >= 0xE09u)
          {
            atomic_store(0, (unint64_t *)(*(void *)(*((void *)v5 + 8) + 16) + 128));
            unint64_t v117 = atomic_exchange(*(atomic_ullong *volatile *)(*((void *)v5 + 8) + 16), 0);
            *((void *)v5 + 9) = 0;
            uint64_t v118 = (uint64_t *)*((void *)v5 + 16);
            if (v118)
            {
              uint64_t v129 = *((void *)v5 + 5);
              *((void *)v5 + 16) = 0;
              v163[0] = v118;
              IPC::Connection::sendSyncReply(v129, (uint64_t *)v163);
              std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)v163, v130);
            }
            if (v117 != 0x80000000) {
              goto LABEL_71;
            }
LABEL_208:
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 41));
            goto LABEL_71;
          }
          unint64_t v40 = v159 - v157;
          unint64_t v41 = (*((void *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v42 = *((void *)v5 + 7);
          if (v41 + 16 >= v42) {
            unint64_t v41 = 0;
          }
          if (v40 <= 0x10) {
            unint64_t v40 = 16;
          }
          unint64_t v43 = v41 + v40;
          if (v42 <= v43) {
            unint64_t v43 = 0;
          }
          uint64_t v44 = *(atomic_ullong **)(*((void *)v5 + 8) + 16);
LABEL_70:
          unint64_t v45 = atomic_exchange(v44, v43);
          *((void *)v5 + 9) = v43;
          if (v45 == 0x80000000) {
            goto LABEL_208;
          }
LABEL_71:
          IPC::Decoder::~Decoder((IPC::Decoder *)&v157);
          unint64_t v1 = v10++ > 0x3E6;
          if (v10 == 1000)
          {
            LODWORD(v1) = 1;
            break;
          }
        }
        unsigned int v5 = v146;
        int v4 = v147;
        unint64_t v10 = v145;
        if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v2 + 2);
          uint64_t v6 = (atomic_uint *)(*(uint64_t (**)(unsigned int *))(*(void *)v2 + 8))(v2);
        }
        unsigned int v24 = v149 | v1;
        uint64_t v27 = (WTF *)((char *)v148 + 8);
        if ((char *)v148 + 8 == v144) {
          goto LABEL_26;
        }
      }
    }
    LOBYTE(v24) = 0;
LABEL_26:
    WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v154, (void *)v7);
    unint64_t v1 = v10;
    if (v10 > v151)
    {
      int v125 = v5;
      uint64_t v2 = (unsigned int *)v4;
      if (v151)
      {
        uint64_t v131 = v150;
        uint64_t v132 = 8 * v151;
        do
        {
          uint64_t v133 = *(void *)v131;
          *(void *)uint64_t v131 = 0;
          if (v133) {
            (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
          }
          uint64_t v131 = (WTF *)((char *)v131 + 8);
          v132 -= 8;
        }
        while (v132);
      }
      int v4 = (atomic_uchar *)v2;
      unsigned int v5 = v125;
      int v26 = v150;
      if (v1 != v143)
      {
        unint64_t v126 = v1;
        unint64_t v1 = (unint64_t)v150 + 8 * v1;
        uint64_t v153 = (WTF::Lock *)(8 * v143 - 8 * v126);
        do
        {
          uint64_t v127 = *(void *)v1;
          *(void *)unint64_t v1 = 0;
          if (v127) {
            (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
          }
          v1 += 8;
          BOOL v59 = v153 == (WTF::Lock *)8;
          uint64_t v153 = (WTF::Lock *)((char *)v153 - 8);
          int v4 = (atomic_uchar *)v2;
          unsigned int v5 = v125;
          int v26 = v150;
        }
        while (!v59);
      }
    }
    else
    {
      int v26 = v150;
      if (v10 != v151)
      {
        unint64_t v1 = (unint64_t)v150 + 8 * v10;
        uint64_t v2 = (unsigned int *)(8 * v151 - 8 * v10);
        do
        {
          uint64_t v121 = *(void *)v1;
          *(void *)unint64_t v1 = 0;
          if (v121) {
            (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
          }
          v1 += 8;
          v2 -= 2;
          int v26 = v150;
        }
        while (v2);
      }
    }
    if (v26) {
      WTF::fastFree(v26, v25);
    }
    WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)v156);
  }
  while ((v24 & 1) != 0);
}

atomic_uchar *volatile **WebKit::RemoteDisplayListRecorder::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v260 = *MEMORY[0x1E4F143B8];
  int v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x332:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      uint64_t v214 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v214 & 0xFF00000000) != 0) {
        WebKit::RemoteDisplayListRecorder::applyDeviceScaleFactor((WebKit::RemoteDisplayListRecorder *)v4, *(float *)&v214);
      }
      goto LABEL_25;
    case 0x333:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      WebKit::RemoteDisplayListRecorder::applyFillPattern((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x334:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      WebKit::RemoteDisplayListRecorder::applyStrokePattern((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x335:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      uint64_t v110 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v110 & 0xFF00000000) != 0)
      {
        *(_DWORD *)v245 = v110;
        int v111 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::BeginTransparencyLayer::apply((WebCore::DisplayList::BeginTransparencyLayer *)v245, v111);
      }
      goto LABEL_25;
    case 0x336:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      uint64_t v213 = IPC::Decoder::decode<std::tuple<WebCore::CompositeMode>>((uint64_t *)a3);
      if ((v213 & 0xFFFFFF) >= 0x10000) {
        WebKit::RemoteDisplayListRecorder::beginTransparencyLayerWithCompositeMode((uint64_t)v4, v213);
      }
      goto LABEL_25;
    case 0x337:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      WebKit::RemoteDisplayListRecorder::clearDropShadow((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x338:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)v252);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        int v86 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::ClearRect::apply((WebCore::DisplayList::ClearRect *)v245, v86);
      }
      goto LABEL_8;
    case 0x339:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)v252);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        unint64_t v53 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Clip::apply((WebCore::DisplayList::Clip *)v245, v53);
      }
      goto LABEL_8;
    case 0x33A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)v252);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        uint64_t v91 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::ClipOut::apply((WebCore::DisplayList::ClipOut *)v245, v91);
      }
      goto LABEL_8;
    case 0x33B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRoundedRect>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[48])
      {
        *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
        long long v246 = *(_OWORD *)&v252[32];
        *(_OWORD *)v245 = *(_OWORD *)v252;
        char v173 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::ClipOutRoundedRect::apply((WebCore::DisplayList::ClipOutRoundedRect *)v245, v173);
      }
      goto LABEL_8;
    case 0x33C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::ClipOutToPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x33D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<WebCore::Path>(v245, (unint64_t *)a3);
      if (v250)
      {
        unsigned __int16 v41 = IPC::Decoder::decode<WebCore::RotationDirection>(a3);
        if (v41 <= 0xFFu)
        {
          int v44 = 0;
          v252[0] = 0;
        }
        else
        {
          if (!v250) {
            goto LABEL_270;
          }
          char v42 = v41;
          v252[8] = 0;
          LODWORD(v253.m_colorAndFlags) = -1;
          int v43 = v249;
          if (v249 != -1)
          {
            ((void (*)(unint64_t *, unsigned char *, unsigned char *))off_1EE9BBD38[v249])(&v239, &v252[8], &v245[8]);
            LODWORD(v253.m_colorAndFlags) = v43;
          }
          LOBYTE(v254) = v42;
          int v44 = 1;
        }
        LOBYTE(v255) = v44;
        if (v250 && v249 != -1)
        {
          ((void (*)(unint64_t *, unsigned char *))off_1EE9BBD20[v249])(&v239, &v245[8]);
          int v44 = v255;
        }
        if (v44) {
          goto LABEL_77;
        }
      }
      else
      {
        v252[0] = 0;
        LOBYTE(v255) = 0;
      }
      uint64_t v210 = *(void *)a3;
      uint64_t v211 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v212 = *((void *)a3 + 3);
      if (!v212) {
        goto LABEL_8;
      }
      if (!v211) {
        goto LABEL_8;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v212 + 16))(v212, v210);
      if (!(_BYTE)v255) {
        goto LABEL_8;
      }
LABEL_77:
      WebKit::RemoteDisplayListRecorder::clipPath((uint64_t)v4, (const WebCore::Path *)v252, v254);
      if ((_BYTE)v255)
      {
LABEL_17:
        if (LODWORD(v253.m_colorAndFlags) != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9BBD20[LODWORD(v253.m_colorAndFlags)])(v245, &v252[8]);
        }
      }
      goto LABEL_8;
    case 0x33E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRoundedRect>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[48])
      {
        *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
        long long v246 = *(_OWORD *)&v252[32];
        *(_OWORD *)v245 = *(_OWORD *)v252;
        int v87 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::ClipRoundedRect::apply((WebCore::DisplayList::ClipRoundedRect *)v245, v87);
      }
      goto LABEL_8;
    case 0x33F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[24]) {
        WebKit::RemoteDisplayListRecorder::clipToImageBuffer((uint64_t)v4, *(uint64_t *)v252, (long long *)&v252[8]);
      }
      goto LABEL_35;
    case 0x340:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a3, (uint64_t)v252);
      if (!v252[48]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
      long long v246 = *(_OWORD *)&v252[32];
      unint64_t v9 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::ConcatenateCTM::apply((WebCore::DisplayList::ConcatenateCTM *)v245, v9);
      goto LABEL_8;
    case 0x341:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v238, a2 + 5);
      IPC::Decoder::decode<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>(a3, (uint64_t)&v239, v92, v93, v94);
      if (!v240)
      {
        v252[0] = 0;
        char v258 = 0;
        goto LABEL_174;
      }
      IPC::Decoder::decode<WebCore::FloatRoundedRect>((uint64_t)&v241, (unint64_t *)a3);
      if (!v244) {
        goto LABEL_330;
      }
      unint64_t v95 = *((void *)a3 + 1);
      uint64_t v96 = *(void *)a3;
      unint64_t v97 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v95 >= v97 && v95 - v97 > 3)
      {
        uint64_t v99 = (int *)(v96 + v97);
        *((void *)a3 + 2) = v99 + 1;
        if (v96)
        {
          int v100 = *v99;
          IPC::Decoder::decode<WebCore::ControlStyle>(a3, (uint64_t)v245);
          char v102 = v247;
          if ((_BYTE)v247)
          {
            if (!v240) {
              goto LABEL_270;
            }
            *(_OWORD *)&v252[8] = v241;
            unint64_t v103 = v239;
            unint64_t v239 = 0;
            *(void *)v252 = v103;
            *(_OWORD *)&v252[24] = v242;
            *(_OWORD *)&v252[40] = v243;
            v253.m_colorAndFlags = *(void *)v245;
            int v254 = *(_DWORD *)&v245[8];
            *(_DWORD *)&v252[56] = v100;
            WebCore::Color::Color();
            WebCore::Color::Color();
            long long v257 = v246;
            char v102 = 1;
          }
          else
          {
            v252[0] = 0;
          }
          char v258 = v102;
          std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v245, v101);
          goto LABEL_170;
        }
        unint64_t v206 = v95;
        uint64_t v207 = 0;
      }
      else
      {
        unint64_t v206 = 0;
        uint64_t v207 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v208 = *((void *)a3 + 3);
        if (v208)
        {
          if (v95)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v208 + 16))(v208, v96, v95);
            uint64_t v207 = *(void *)a3;
            unint64_t v206 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v206 = 0;
            uint64_t v207 = 0;
          }
        }
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v209 = *((void *)a3 + 3);
      if (v209 && v206) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v209 + 16))(v209, v207);
      }
LABEL_330:
      v252[0] = 0;
      char v258 = 0;
LABEL_170:
      if (v240)
      {
        int v104 = (uint64_t *)v239;
        unint64_t v239 = 0;
        if (v104)
        {
          if (*((_DWORD *)v104 + 2) == 1) {
            (*(void (**)(uint64_t *))(*v104 + 8))(v104);
          }
          else {
            --*((_DWORD *)v104 + 2);
          }
        }
      }
LABEL_174:
      if (v258 || (IPC::Decoder::markInvalid(a3), v258))
      {
        uint64_t v105 = *(void *)v252;
        *(void *)v252 = 0;
        *(void *)v245 = v105;
        WebKit::RemoteDisplayListRecorder::drawControlPart((uint64_t)v4);
        unint64_t v107 = *(_DWORD **)v245;
        *(void *)v245 = 0;
        if (v107)
        {
          if (v107[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v107 + 8))(v107);
          }
          else {
            --v107[2];
          }
        }
        if (v258)
        {
          if ((v256 & 0x8000000000000) != 0)
          {
            int v204 = (unsigned int *)(v256 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v256 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v204);
              WTF::fastFree((WTF *)v204, v106);
            }
          }
          if ((v255 & 0x8000000000000) != 0)
          {
            unsigned __int8 v205 = (unsigned int *)(v255 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v255 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v205);
              WTF::fastFree((WTF *)v205, v106);
            }
          }
          unint64_t v108 = *(_DWORD **)v252;
          *(void *)v252 = 0;
          if (v108)
          {
            if (v108[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v108 + 8))(v108);
            }
            else {
              --v108[2];
            }
          }
        }
      }
      goto LABEL_184;
    case 0x342:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v252, a3);
      if (v252[16]) {
        WebKit::RemoteDisplayListRecorder::drawDecomposedGlyphs((uint64_t)v4, *(uint64_t *)v252, *(uint64_t *)&v252[8]);
      }
      goto LABEL_35;
    case 0x343:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>((uint64_t *)a3, v18, (uint64_t)v245, v19, v20, v21);
      if (!v245[16])
      {
        uint64_t v126 = *(void *)a3;
        uint64_t v127 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v128 = *((void *)a3 + 3);
        if (!v128) {
          goto LABEL_209;
        }
        if (!v127) {
          goto LABEL_209;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v128 + 16))(v128, v126);
        if (!v245[16]) {
          goto LABEL_209;
        }
      }
      uint64_t v22 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
      if (!(_BYTE)v23)
      {
        uint64_t v129 = *(void **)a3;
        uint64_t v130 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v131 = *((void *)a3 + 3);
        if (v131 && v130) {
          (*(void (**)(uint64_t, void *))(*(void *)v131 + 16))(v131, v129);
        }
        if (v245[16]) {
          WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v245, v129);
        }
        goto LABEL_209;
      }
      if (!v245[16]) {
        goto LABEL_270;
      }
      *(void *)v252 = *(void *)v245;
      uint64_t v24 = *(void *)&v245[8];
      *(void *)v245 = 0;
      *(void *)&v245[8] = 0;
      *(void *)&v252[8] = v24;
      *(void *)&v252[16] = v22;
      v252[24] = 1;
      WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v245, v23);
      WebKit::RemoteDisplayListRecorder::drawDisplayListItems((uint64_t)v4);
      if (v252[24]) {
        WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v252, v25);
      }
      goto LABEL_8;
    case 0x344:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawDotsForDocumentMarker,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::FloatRect const&,WebCore::DocumentMarkerLineStyle const&)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_25;
    case 0x345:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)v252);
      if (v252[16]) {
        WebKit::RemoteDisplayListRecorder::drawEllipse((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v252);
      }
      goto LABEL_35;
    case 0x346:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v238, a2 + 5);
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3, v245);
      if (!v245[16]) {
        goto LABEL_404;
      }
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)&v241);
      if ((_BYTE)v242)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>(a3, (uint64_t)&v239);
        if (v240)
        {
          if (!v245[16]) {
            goto LABEL_270;
          }
          *(_OWORD *)v252 = *(_OWORD *)v245;
          *(_OWORD *)&v252[16] = v241;
          unint64_t v153 = v239;
          unint64_t v239 = 0;
          v252[40] = 1;
          WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v239, v152);
          *(void *)&v252[32] = 0;
          *(void *)v245 = v153;
          WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer((uint64_t)v4, *(uint64_t *)v252, v252[8], (uint64_t)&v252[16], (uint64_t *)v245);
          WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)v245, v154);
          if (v252[40]) {
            WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v252[32], v155);
          }
LABEL_184:
          unsigned int v5 = (atomic_uchar *volatile **)&v238;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
        }
      }
      else
      {
        uint64_t v226 = *(void *)a3;
        uint64_t v227 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v228 = *((void *)a3 + 3);
        if (v228 && v227) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v228 + 16))(v228, v226);
        }
      }
LABEL_404:
      IPC::Decoder::markInvalid(a3);
      goto LABEL_184;
    case 0x347:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawFocusRingPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&,float,WebCore::Color const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x348:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v239, a2 + 5);
      IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a3, v156, (uint64_t)v245);
      if (!v245[16])
      {
        v252[0] = 0;
        v252[32] = 0;
        goto LABEL_264;
      }
      unint64_t v157 = *((void *)a3 + 1);
      unint64_t v158 = *(char **)a3;
      unint64_t v159 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v157 < v159 || v157 - v159 <= 3)
      {
        unint64_t v229 = 0;
        uint64_t v230 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v231 = *((void *)a3 + 3);
        if (v231)
        {
          if (v157)
          {
            (*(void (**)(uint64_t))(*(void *)v231 + 16))(v231);
            uint64_t v230 = *(void *)a3;
            unint64_t v229 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v229 = 0;
            uint64_t v230 = 0;
          }
        }
        goto LABEL_408;
      }
      unsigned __int16 v161 = &v158[v159];
      *((void *)a3 + 2) = v161 + 4;
      if (!v158)
      {
        unint64_t v229 = v157;
        uint64_t v230 = 0;
LABEL_408:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v232 = *((void *)a3 + 3);
        if (v232 && v229) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v232 + 16))(v232, v230, v229);
        }
        goto LABEL_417;
      }
      unint64_t v162 = ((unint64_t)(v161 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v158;
      if (v157 < v162 || v157 - v162 <= 3)
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v233 = *((void *)a3 + 3);
        if (v233)
        {
          if (v157)
          {
            (*(void (**)(uint64_t))(*(void *)v233 + 16))(v233);
            unint64_t v158 = *(char **)a3;
            uint64_t v234 = *((void *)a3 + 1);
            uint64_t v235 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v235)
            {
              if (v234) {
                (*(void (**)(uint64_t, char *))(*(void *)v235 + 16))(v235, v158);
              }
            }
          }
        }
        goto LABEL_417;
      }
      int v164 = *(_DWORD *)v161;
      int v165 = *(_DWORD *)((unint64_t)(v161 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)a3 + 2) = ((unint64_t)(v161 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v241);
      if (!BYTE8(v241))
      {
        unint64_t v158 = *(char **)a3;
        uint64_t v236 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v237 = *((void *)a3 + 3);
        if (!v237
          || !v236
          || ((*(void (**)(uint64_t, char *))(*(void *)v237 + 16))(v237, v158), !BYTE8(v241)))
        {
LABEL_417:
          v252[0] = 0;
          v252[32] = 0;
          goto LABEL_261;
        }
      }
      if (!v245[16])
      {
LABEL_270:
        __break(1u);
LABEL_271:
        uint64_t v168 = *(void *)a3;
        uint64_t v169 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v170 = *((void *)a3 + 3);
        if (v170 && v169) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v170 + 16))(v170, v168);
        }
        goto LABEL_209;
      }
      *(void *)v252 = *(void *)v245;
      uint64_t v166 = *(void *)&v245[8];
      *(void *)v245 = 0;
      *(void *)&v245[8] = 0;
      *(void *)&v252[8] = v166;
      *(_DWORD *)&v252[16] = v164;
      *(_DWORD *)&v252[20] = v165;
      WebCore::Color::Color();
      v252[32] = 1;
      if (BYTE8(v241))
      {
        if ((v241 & 0x8000000000000) != 0)
        {
          uint64_t v219 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v219);
            WTF::fastFree((WTF *)v219, v158);
          }
        }
      }
LABEL_261:
      if (v245[16])
      {
        char v167 = *(WTF **)v245;
        if (*(void *)v245)
        {
          *(void *)v245 = 0;
          *(_DWORD *)&v245[8] = 0;
          WTF::fastFree(v167, v158);
        }
      }
LABEL_264:
      if (v252[32] || (IPC::Decoder::markInvalid(a3), v252[32]))
      {
        WebKit::RemoteDisplayListRecorder::drawFocusRingRects((uint64_t)v4, (uint64_t)v252, (const Color *)&v252[24], *(float *)&v252[16], *(float *)&v252[20]);
        if (v252[32])
        {
          if ((*(void *)&v252[24] & 0x8000000000000) != 0)
          {
            char v218 = (unsigned int *)(*(void *)&v252[24] & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v252[24] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v218);
              WTF::fastFree((WTF *)v218, v32);
            }
          }
          unint64_t v34 = *(unsigned int **)v252;
          if (*(void *)v252)
          {
            *(void *)v252 = 0;
            *(_DWORD *)&v252[8] = 0;
            goto LABEL_269;
          }
        }
      }
      goto LABEL_5;
    case 0x349:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<WebCore::DisplayList::DrawGlyphs>((unint64_t *)a3, (uint64_t)v252);
      if (v252[56])
      {
        uint64_t v61 = *(void *)&v252[8];
        memset(&v252[8], 0, 32);
        *(void *)v245 = *(void *)v252;
        *(void *)&v245[8] = v61;
        *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
        long long v246 = *(_OWORD *)&v252[32];
        LOBYTE(v247) = v252[48];
        char v248 = 1;
        std::__optional_destruct_base<WebCore::DisplayList::DrawGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v252, v60);
        WebKit::RemoteDisplayListRecorder::drawGlyphs((uint64_t)v4, (uint64_t *)v245);
        if (v248)
        {
          unint64_t v63 = *(WTF **)&v245[24];
          if (*(void *)&v245[24])
          {
            *(void *)&v245[24] = 0;
            LODWORD(v246) = 0;
            WTF::fastFree(v63, v62);
          }
          unint64_t v64 = *(WTF **)&v245[8];
          if (*(void *)&v245[8])
          {
            *(void *)&v245[8] = 0;
            *(_DWORD *)&v245[16] = 0;
            goto LABEL_113;
          }
        }
        goto LABEL_8;
      }
      std::__optional_destruct_base<WebCore::DisplayList::DrawGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v252, v60);
LABEL_209:
      uint64_t v132 = *(void *)a3;
      uint64_t v133 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v134 = *((void *)a3 + 3);
      if (!v134) {
        goto LABEL_8;
      }
      goto LABEL_305;
    case 0x34A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>((uint64_t)v252, (unint64_t *)a3);
      if (!v252[48]) {
        goto LABEL_211;
      }
      WebKit::RemoteDisplayListRecorder::drawImageBuffer((uint64_t)v4, *(uint64_t *)v252, (long long *)&v252[8], (long long *)&v252[24], *(unsigned __int16 *)&v252[40] | (v252[42] << 16));
      goto LABEL_35;
    case 0x34B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatPoint,WebCore::FloatPoint>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[16]) {
        WebKit::RemoteDisplayListRecorder::drawLine((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatPoint *)v252, (const WebCore::FloatPoint *)&v252[8]);
      }
      goto LABEL_35;
    case 0x34C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<WebCore::DisplayList::DrawLinesForText>((unint64_t *)a3, (uint64_t)v252);
      if (!v252[40]) {
        goto LABEL_316;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
      LODWORD(v246) = *(_DWORD *)&v252[32];
      *(_DWORD *)((char *)&v246 + 3) = *(_DWORD *)&v252[35];
      BYTE8(v246) = 1;
      WebKit::RemoteDisplayListRecorder::drawLinesForText((uint64_t)v4, (uint64_t)v245);
      if (!BYTE8(v246)) {
        goto LABEL_8;
      }
      unint64_t v64 = *(WTF **)&v245[16];
      if (!*(void *)&v245[16]) {
        goto LABEL_8;
      }
      *(void *)&v245[16] = 0;
      *(_DWORD *)&v245[24] = 0;
      goto LABEL_113;
    case 0x34D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>((uint64_t)v252, (unint64_t *)a3);
      if (v252[48])
      {
        WebKit::RemoteDisplayListRecorder::drawNativeImage((uint64_t)v4, *(uint64_t *)v252);
        goto LABEL_35;
      }
LABEL_211:
      uint64_t v123 = *(void *)a3;
      uint64_t v124 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v125 = *((void *)a3 + 3);
      if (v125) {
        goto LABEL_212;
      }
      goto LABEL_35;
    case 0x34E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x34F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawPattern,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_25;
    case 0x350:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect,float>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[20])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        *(_DWORD *)&v245[16] = *(_DWORD *)&v252[16];
        unint64_t v71 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::DrawRect::apply((WebCore::DisplayList::DrawRect *)v245, v71);
      }
      goto LABEL_8;
    case 0x351:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawSystemImage,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>,WebCore::FloatRect const&)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_25;
    case 0x352:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawVideoFrame,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebKit::SharedVideoFrame &&,WebCore::FloatRect const&,WebKit::SharedVideoFrame &&::ImageOrientation,BOOL)>(a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x353:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      unint64_t v109 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::EndTransparencyLayer::apply((WebCore::DisplayList::EndTransparencyLayer *)v245, v109);
      goto LABEL_25;
    case 0x354:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathArc,void>::decode((unint64_t *)a3, (uint64_t)v252);
      if (!v252[24]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(void *)&v245[16] = *(void *)&v252[16];
      v245[24] = 1;
      WebKit::RemoteDisplayListRecorder::fillArc((WebKit::RemoteDisplayListRecorder *)v4, (const PathArc *)v245);
      goto LABEL_8;
    case 0x355:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillBezierCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataBezierCurve const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x356:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathClosedArc,void>::decode((unint64_t *)a3, (uint64_t)v252);
      if (!v252[24]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(void *)&v245[16] = *(void *)&v252[16];
      uint64_t v37 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillClosedArc::apply((WebCore::DisplayList::FillClosedArc *)v245, v37);
      goto LABEL_8;
    case 0x357:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v239, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v245);
      if (!v245[16])
      {
        uint64_t v174 = *(void *)a3;
        uint64_t v175 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v176 = *((void *)a3 + 3);
        if (v176 && v175) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v176 + 16))(v176, v174);
        }
        v252[0] = 0;
        v252[32] = 0;
        goto LABEL_282;
      }
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v241);
      if (!BYTE8(v241))
      {
        uint64_t v180 = *(void *)a3;
        uint64_t v181 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v182 = *((void *)a3 + 3);
        if (!v182
          || !v181
          || ((*(void (**)(uint64_t, uint64_t))(*(void *)v182 + 16))(v182, v180), !BYTE8(v241)))
        {
          v252[0] = 0;
          v252[32] = 0;
          goto LABEL_93;
        }
      }
      unint64_t v45 = *((void *)a3 + 1);
      uint64_t v46 = *(unsigned char **)a3;
      unint64_t v47 = *((void *)a3 + 2) - *(void *)a3;
      if (v45 <= v47)
      {
        unint64_t v183 = 0;
        uint64_t v184 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v185 = *((void *)a3 + 3);
        if (v185)
        {
          if (v45)
          {
            (*(void (**)(uint64_t))(*(void *)v185 + 16))(v185);
            uint64_t v184 = *(void *)a3;
            unint64_t v183 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v183 = 0;
            uint64_t v184 = 0;
          }
        }
      }
      else
      {
        uint64_t v48 = &v46[v47];
        *((void *)a3 + 2) = v48 + 1;
        if (v46)
        {
          unsigned int v49 = *v48;
          if (v49 < 0xE)
          {
            if (v45 <= v48 + 1 - v46)
            {
              unint64_t v188 = 0;
              uint64_t v189 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v190 = *((void *)a3 + 3);
              if (v190)
              {
                (*(void (**)(uint64_t))(*(void *)v190 + 16))(v190);
                unint64_t v188 = 0;
                uint64_t v46 = *(unsigned char **)a3;
                uint64_t v215 = *((void *)a3 + 1);
                uint64_t v216 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v189 = 0;
                if (v216)
                {
                  if (v215)
                  {
                    (*(void (**)(uint64_t, unsigned char *))(*(void *)v216 + 16))(v216, v46);
                    uint64_t v189 = *(void *)a3;
                    unint64_t v188 = *((void *)a3 + 1);
                  }
                }
              }
            }
            else
            {
              *((void *)a3 + 2) = v48 + 2;
              int v50 = v48[1];
              if ((v50 - 1) < 0x12)
              {
                *(_OWORD *)v252 = *(_OWORD *)v245;
                WebCore::Color::Color();
                v252[24] = v49;
                v252[25] = v50;
                char v51 = 1;
                goto LABEL_91;
              }
              unint64_t v188 = v45;
              uint64_t v189 = (uint64_t)v46;
            }
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v191 = *((void *)a3 + 3);
            if (v191 && v188) {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v191 + 16))(v191, v189, v188);
            }
LABEL_295:
            char v51 = 0;
            v252[0] = 0;
LABEL_91:
            v252[32] = v51;
            if (BYTE8(v241))
            {
              if ((v241 & 0x8000000000000) != 0)
              {
                char v171 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v171);
                  WTF::fastFree((WTF *)v171, v46);
                }
              }
            }
LABEL_93:
            if (v252[32]) {
              goto LABEL_94;
            }
LABEL_282:
            uint64_t v177 = *(void *)a3;
            uint64_t v178 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v179 = *((void *)a3 + 3);
            if (!v179) {
              goto LABEL_5;
            }
            if (!v178) {
              goto LABEL_5;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v179 + 16))(v179, v177);
            if (!v252[32]) {
              goto LABEL_5;
            }
LABEL_94:
            WebKit::RemoteDisplayListRecorder::fillCompositedRect((uint64_t)v4, (long long *)v252, (Color *)&v252[16], v252[24], v252[25]);
            if (!v252[32]) {
              goto LABEL_5;
            }
LABEL_95:
            uint64_t v33 = *(void *)&v252[16];
            if ((*(void *)&v252[16] & 0x8000000000000) == 0) {
              goto LABEL_5;
            }
            goto LABEL_54;
          }
LABEL_290:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v187 = *((void *)a3 + 3);
          if (v187 && v45) {
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v187 + 16))(v187, v46);
          }
          goto LABEL_295;
        }
        unint64_t v183 = v45;
        uint64_t v184 = 0;
      }
      unint64_t v45 = 0;
      uint64_t v46 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v186 = *((void *)a3 + 3);
      if (v186)
      {
        if (v183)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v186 + 16))(v186, v184, v183);
          uint64_t v46 = *(unsigned char **)a3;
          unint64_t v45 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v45 = 0;
          uint64_t v46 = 0;
        }
      }
      goto LABEL_290;
    case 0x358:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)v252);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        char v172 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::FillEllipse::apply((WebCore::DisplayList::FillEllipse *)v245, v172);
      }
      goto LABEL_8;
    case 0x359:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::PathDataLine>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        uint64_t v83 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::FillLine::apply((WebCore::DisplayList::FillLine *)v245, v83);
      }
      goto LABEL_8;
    case 0x35A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v252, (unint64_t *)a3);
      if (!(_BYTE)v254) {
        goto LABEL_8;
      }
      WebCore::Path::Path((WebCore::Path *)v245, (const WebCore::Path *)v252);
      unint64_t v13 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillPath::apply((WebCore::DisplayList::FillPath *)v245, v13);
      goto LABEL_14;
    case 0x35B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::PathSegment>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[56])
      {
        uint64_t v247 = *(void *)&v252[48];
        *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
        long long v246 = *(_OWORD *)&v252[32];
        *(_OWORD *)v245 = *(_OWORD *)v252;
        uint64_t v84 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::FillPathSegment::apply((WebCore::DisplayList::FillPathSegment *)v245, v84);
      }
      goto LABEL_8;
    case 0x35C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillQuadCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataQuadCurve const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x35D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v245);
      if (!v245[16]) {
        goto LABEL_271;
      }
      unsigned __int16 v39 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a3);
      if (v39 <= 0xFFu) {
        goto LABEL_209;
      }
      *(void *)&v252[1] = *(void *)&v245[1];
      *(void *)&v252[8] = *(void *)&v245[8];
      v252[0] = v245[0];
      v252[16] = v39 != 0;
      unint64_t v40 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillRect::apply((WebCore::DisplayList::FillRect *)v252, v40);
      goto LABEL_8;
    case 0x35E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v239, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v245);
      if (v245[16])
      {
        IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v241);
        if (BYTE8(v241)
          || (uint64_t v201 = *(void *)a3,
              uint64_t v202 = *((void *)a3 + 1),
              *(void *)a3 = 0,
              *((void *)a3 + 1) = 0,
              (uint64_t v203 = *((void *)a3 + 3)) != 0)
          && v202
          && ((*(void (**)(uint64_t, uint64_t))(*(void *)v203 + 16))(v203, v201), BYTE8(v241)))
        {
          *(_OWORD *)v252 = *(_OWORD *)v245;
          WebCore::Color::Color();
          v252[24] = 1;
          if (BYTE8(v241))
          {
            if ((v241 & 0x8000000000000) != 0)
            {
              char v197 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v197);
                WTF::fastFree((WTF *)v197, v85);
              }
            }
          }
        }
        else
        {
          v252[0] = 0;
          v252[24] = 0;
        }
        if (v252[24]) {
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v198 = *(void *)a3;
        uint64_t v199 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v200 = *((void *)a3 + 3);
        if (v200 && v199) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v200 + 16))(v200, v198);
        }
        v252[0] = 0;
        v252[24] = 0;
      }
      IPC::Decoder::markInvalid(a3);
      if (!v252[24]) {
        goto LABEL_5;
      }
LABEL_139:
      WebKit::RemoteDisplayListRecorder::fillRectWithColor((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v252, (Color *)&v252[16]);
      if (v252[24]) {
        goto LABEL_95;
      }
      goto LABEL_5;
    case 0x35F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<WebCore::DisplayList::FillRectWithGradient>((unint64_t *)a3, (uint64_t)v252);
      if (!v252[24]) {
        goto LABEL_316;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      uint64_t v89 = *(void *)&v252[16];
      *(void *)&v252[16] = 0;
      *(void *)&v245[16] = v89;
      WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v252[16], v88);
      v245[24] = 1;
      WebKit::RemoteDisplayListRecorder::fillRectWithGradient((uint64_t)v4, (uint64_t)v245);
      if (v245[24]) {
        WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v245[16], v90);
      }
      goto LABEL_8;
    case 0x360:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillRectWithGradientAndSpaceTransform,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::DisplayList::FillRectWithGradientAndSpaceTransform &&)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_25;
    case 0x361:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v238, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)&v241);
      if ((_BYTE)v242)
      {
        IPC::Decoder::decode<WebCore::FloatRoundedRect>((uint64_t)v245, (unint64_t *)a3);
        if ((_BYTE)v247)
        {
          IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v239);
          if (v240
            || (uint64_t v223 = *(void *)a3,
                uint64_t v224 = *((void *)a3 + 1),
                *(void *)a3 = 0,
                *((void *)a3 + 1) = 0,
                (uint64_t v225 = *((void *)a3 + 3)) != 0)
            && v224
            && ((*(void (**)(uint64_t, uint64_t))(*(void *)v225 + 16))(v225, v223), v240))
          {
            *(_OWORD *)v252 = v241;
            *(_OWORD *)&v252[16] = *(_OWORD *)v245;
            *(_OWORD *)&v252[32] = *(_OWORD *)&v245[16];
            *(_OWORD *)&v252[48] = v246;
            WebCore::Color::Color();
            LOBYTE(v254) = 1;
            if (v240)
            {
              if ((v239 & 0x8000000000000) != 0)
              {
                uint64_t v217 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v239 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v217);
                  WTF::fastFree((WTF *)v217, v149);
                }
              }
            }
          }
          else
          {
            v252[0] = 0;
            LOBYTE(v254) = 0;
          }
          if ((_BYTE)v254) {
            goto LABEL_235;
          }
LABEL_399:
          IPC::Decoder::markInvalid(a3);
          if (!(_BYTE)v254) {
            goto LABEL_184;
          }
LABEL_235:
          WebKit::RemoteDisplayListRecorder::fillRectWithRoundedHole((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v252, (const WebCore::FloatRoundedRect *)&v252[16], &v253);
          if ((_BYTE)v254)
          {
            if ((v253.m_colorAndFlags & 0x8000000000000) != 0)
            {
              unint64_t v151 = (unsigned int *)(v253.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v253.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v151);
                WTF::fastFree((WTF *)v151, v150);
              }
            }
          }
          goto LABEL_184;
        }
      }
      else
      {
        uint64_t v220 = *(void *)a3;
        uint64_t v221 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v222 = *((void *)a3 + 3);
        if (v222 && v221) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v222 + 16))(v222, v220);
        }
      }
      v252[0] = 0;
      LOBYTE(v254) = 0;
      goto LABEL_399;
    case 0x362:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v239, a2 + 5);
      IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode((unint64_t *)a3, (uint64_t)v245);
      if (!(_BYTE)v247)
      {
        uint64_t v135 = *(void *)a3;
        uint64_t v136 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v137 = *((void *)a3 + 3);
        if (v137 && v136) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v137 + 16))(v137, v135);
        }
        v252[0] = 0;
        LOBYTE(v253.m_colorAndFlags) = 0;
        goto LABEL_219;
      }
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v241);
      if (!BYTE8(v241))
      {
        uint64_t v141 = *(void *)a3;
        uint64_t v142 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v143 = *((void *)a3 + 3);
        if (!v143
          || !v142
          || ((*(void (**)(uint64_t, uint64_t))(*(void *)v143 + 16))(v143, v141), !BYTE8(v241)))
        {
          v252[0] = 0;
          LOBYTE(v253.m_colorAndFlags) = 0;
          goto LABEL_51;
        }
      }
      unint64_t v26 = *((void *)a3 + 1);
      uint64_t v27 = *(char **)a3;
      unint64_t v28 = *((void *)a3 + 2) - *(void *)a3;
      if (v26 <= v28)
      {
        unint64_t v144 = 0;
        uint64_t v145 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v146 = *((void *)a3 + 3);
        if (v146)
        {
          if (v26)
          {
            (*(void (**)(uint64_t))(*(void *)v146 + 16))(v146);
            uint64_t v145 = *(void *)a3;
            unint64_t v144 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v144 = 0;
            uint64_t v145 = 0;
          }
        }
        goto LABEL_226;
      }
      unint64_t v29 = &v27[v28];
      *((void *)a3 + 2) = v29 + 1;
      if (!v27)
      {
        unint64_t v144 = v26;
        uint64_t v145 = 0;
LABEL_226:
        unint64_t v26 = 0;
        uint64_t v27 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v147 = *((void *)a3 + 3);
        if (v147)
        {
          if (v144)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v147 + 16))(v147, v145, v144);
            uint64_t v27 = *(char **)a3;
            unint64_t v26 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v26 = 0;
            uint64_t v27 = 0;
          }
        }
        goto LABEL_227;
      }
      int v30 = *v29;
      if ((v30 - 1) < 0x12)
      {
        *(_OWORD *)v252 = *(_OWORD *)v245;
        *(_OWORD *)&v252[16] = *(_OWORD *)&v245[16];
        *(_OWORD *)&v252[32] = v246;
        WebCore::Color::Color();
        v252[56] = v30;
        char v31 = 1;
        goto LABEL_49;
      }
LABEL_227:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v148 = *((void *)a3 + 3);
      if (v148 && v26) {
        (*(void (**)(uint64_t, char *))(*(void *)v148 + 16))(v148, v27);
      }
      char v31 = 0;
      v252[0] = 0;
LABEL_49:
      LOBYTE(v253.m_colorAndFlags) = v31;
      if (BYTE8(v241))
      {
        if ((v241 & 0x8000000000000) != 0)
        {
          char v119 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v119);
            WTF::fastFree((WTF *)v119, v27);
          }
        }
      }
LABEL_51:
      if (LOBYTE(v253.m_colorAndFlags)) {
        goto LABEL_52;
      }
LABEL_219:
      uint64_t v138 = *(void *)a3;
      uint64_t v139 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v140 = *((void *)a3 + 3);
      if (!v140) {
        goto LABEL_5;
      }
      if (!v139) {
        goto LABEL_5;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v140 + 16))(v140, v138);
      if (!LOBYTE(v253.m_colorAndFlags)) {
        goto LABEL_5;
      }
LABEL_52:
      WebKit::RemoteDisplayListRecorder::fillRoundedRect((uint64_t)v4, v252, (Color *)&v252[48], v252[56]);
      if (!LOBYTE(v253.m_colorAndFlags)) {
        goto LABEL_5;
      }
      uint64_t v33 = *(void *)&v252[48];
      if ((*(void *)&v252[48] & 0x8000000000000) == 0) {
        goto LABEL_5;
      }
LABEL_54:
      unint64_t v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v34);
LABEL_269:
        WTF::fastFree((WTF *)v34, v32);
      }
LABEL_5:
      unsigned int v5 = (atomic_uchar *volatile **)&v239;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
    case 0x363:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      WebKit::RemoteDisplayListRecorder::resetClip((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x364:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      uint64_t v12 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::Restore::apply((WebCore::DisplayList::Restore *)v245, v12);
      goto LABEL_25;
    case 0x365:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      uint64_t v192 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v192 & 0xFF00000000) != 0)
      {
        *(_DWORD *)v245 = v192;
        uint64_t v193 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Rotate::apply((WebCore::DisplayList::Rotate *)v245, v193);
      }
      goto LABEL_25;
    case 0x366:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      unint64_t v11 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::Save::apply((WebCore::DisplayList::Save *)v245, v11);
      goto LABEL_25;
    case 0x367:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      unint64_t v68 = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>((unint64_t *)a3);
      if (v69)
      {
        *(void *)v252 = v68;
        unint64_t v70 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Scale::apply((WebCore::DisplayList::Scale *)v252, v70);
      }
      goto LABEL_35;
    case 0x368:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a3, (uint64_t)v252);
      if (!v252[48]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
      long long v246 = *(_OWORD *)&v252[32];
      unint64_t v10 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetCTM::apply((WebCore::DisplayList::SetCTM *)v245, v10);
      goto LABEL_8;
    case 0x369:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      uint64_t v16 = IPC::ArgumentCoder<WebCore::DisplayList::SetInlineFillColor,void>::decode((uint64_t *)a3);
      if ((v16 & 0xFF00000000) != 0)
      {
        *(void *)v252 = v16 | 0x100000000;
        uint64_t v17 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetInlineFillColor::apply((WebCore::DisplayList::SetInlineFillColor *)v252, v17);
      }
      else
      {
        uint64_t v120 = *(void *)a3;
        uint64_t v121 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v122 = *((void *)a3 + 3);
        if (v122)
        {
          if (v121)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 16))(v122, v120);
            uint64_t v123 = *(void *)a3;
            uint64_t v124 = *((void *)a3 + 1);
            uint64_t v125 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v125)
            {
LABEL_212:
              if (v124) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v125 + 16))(v125, v123);
              }
            }
          }
        }
      }
LABEL_35:
      unsigned int v5 = (atomic_uchar *volatile **)v245;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
    case 0x36A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::decode((uint64_t *)a3, (uint64_t)v252);
      if (!v252[16]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      v245[16] = 1;
      uint64_t v6 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetInlineStroke::apply((WebCore::DisplayList::SetInlineStroke *)v245, v6);
      goto LABEL_8;
    case 0x36B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      unsigned __int16 v56 = IPC::Decoder::decode<WebCore::LineCap>((uint64_t *)a3);
      if (v56 <= 0xFFu) {
        goto LABEL_298;
      }
      v245[0] = v56;
      int v57 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetLineCap::apply((WebCore::DisplayList::SetLineCap *)v245, v57);
      goto LABEL_25;
    case 0x36C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<WebCore::DisplayList::SetLineDash>(a3, (uint64_t)v252);
      if (v252[24])
      {
        *(void *)v245 = *(void *)v252;
        *(void *)&v245[8] = *(void *)&v252[8];
        *(_DWORD *)&v245[16] = *(_DWORD *)&v252[16];
        v245[24] = 1;
        WebKit::RemoteDisplayListRecorder::setLineDash((uint64_t)v4, (uint64_t)v245);
        if (v245[24])
        {
          unint64_t v64 = *(WTF **)v245;
          if (*(void *)v245)
          {
            *(void *)v245 = 0;
            *(_DWORD *)&v245[8] = 0;
LABEL_113:
            WTF::fastFree(v64, v62);
          }
        }
      }
      else
      {
LABEL_316:
        IPC::Decoder::markInvalid(a3);
      }
      goto LABEL_8;
    case 0x36D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      unsigned __int16 v54 = IPC::Decoder::decode<WebCore::LineCap>((uint64_t *)a3);
      if (v54 <= 0xFFu)
      {
LABEL_298:
        uint64_t v194 = *(void *)a3;
        uint64_t v195 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v196 = *((void *)a3 + 3);
        if (v196 && v195) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v196 + 16))(v196, v194);
        }
      }
      else
      {
        v245[0] = v54;
        unsigned int v55 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetLineJoin::apply((WebCore::DisplayList::SetLineJoin *)v245, v55);
      }
      goto LABEL_25;
    case 0x36E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      uint64_t v58 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v58 & 0xFF00000000) != 0)
      {
        *(_DWORD *)v245 = v58;
        BOOL v59 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetMiterLimit::apply((WebCore::DisplayList::SetMiterLimit *)v245, v59);
      }
      goto LABEL_25;
    case 0x36F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::SetSharedVideoFrameMemory,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::SharedMemoryHandle &&)>(a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_25;
    case 0x370:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v252, a2 + 5);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::SetSharedVideoFrameSemaphore,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(IPC::Semaphore &&)>(a3, (WebKit::RemoteDisplayListRecorder *)v4);
LABEL_25:
      unsigned int v5 = (atomic_uchar *volatile **)v252;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
    case 0x371:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::DisplayList::SetState,void>::decode((uint64_t *)a3, v252);
      if (v259
        || (uint64_t v113 = *(void *)a3,
            uint64_t v114 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + 1) = 0,
            (uint64_t v115 = *((void *)a3 + 3)) != 0)
        && v114
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v115 + 16))(v115, v113), v259))
      {
        WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v245, (uint64_t)v252);
        char v251 = 1;
        if (!v259) {
          goto LABEL_31;
        }
        WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v252, v14);
        if (v251) {
          goto LABEL_31;
        }
      }
      else
      {
        v245[0] = 0;
        char v251 = 0;
      }
      uint64_t v116 = *(void *)a3;
      uint64_t v117 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v118 = *((void *)a3 + 3);
      if (!v118) {
        goto LABEL_8;
      }
      if (!v117) {
        goto LABEL_8;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v118 + 16))(v118, v116);
      if (!v251) {
        goto LABEL_8;
      }
LABEL_31:
      WebKit::RemoteDisplayListRecorder::setState((uint64_t)v4, (WebCore::SourceBrush *)v245);
      if (v251) {
        WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v245, v15);
      }
LABEL_8:
      unsigned int v5 = (atomic_uchar *volatile **)&v241;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
    case 0x372:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathArc,void>::decode((unint64_t *)a3, (uint64_t)v252);
      if (!v252[24]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(void *)&v245[16] = *(void *)&v252[16];
      uint64_t v7 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::StrokeArc::apply((WebCore::DisplayList::StrokeArc *)v245, v7);
      goto LABEL_8;
    case 0x373:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode((unint64_t *)a3, (uint64_t)v252);
      if (!v252[32]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
      unint64_t v36 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::StrokeBezierCurve::apply((WebCore::DisplayList::StrokeBezierCurve *)v245, v36);
      goto LABEL_8;
    case 0x374:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathClosedArc,void>::decode((unint64_t *)a3, (uint64_t)v252);
      if (!v252[24]) {
        goto LABEL_128;
      }
      *(_OWORD *)v245 = *(_OWORD *)v252;
      *(void *)&v245[16] = *(void *)&v252[16];
      uint64_t v38 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::StrokeClosedArc::apply((WebCore::DisplayList::StrokeClosedArc *)v245, v38);
      goto LABEL_8;
    case 0x375:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)a3, (uint64_t)v252);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        uint64_t v72 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeEllipse::apply((WebCore::DisplayList::StrokeEllipse *)v245, v72);
      }
      goto LABEL_8;
    case 0x376:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::PathDataLine>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[16])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        unint64_t v52 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeLine::apply((WebCore::DisplayList::StrokeLine *)v245, v52);
      }
      goto LABEL_8;
    case 0x377:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v239, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)&v241);
      if ((_BYTE)v242
        && (IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::decode((uint64_t *)a3, (uint64_t)v245),
            v245[16]))
      {
        *(_OWORD *)v252 = v241;
        *(_OWORD *)&v252[16] = *(_OWORD *)v245;
        v252[32] = 1;
        WebKit::RemoteDisplayListRecorder::strokeLineWithColorAndThickness((uint64_t)v4, (long long *)v252, (WebCore::DisplayList::SetInlineStroke *)&v252[16]);
      }
      else
      {
        uint64_t v74 = *(void *)a3;
        uint64_t v75 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v76 = *((void *)a3 + 3);
        if (v76 && v75) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 16))(v76, v74);
        }
        uint64_t v77 = *(void *)a3;
        uint64_t v78 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v79 = *((void *)a3 + 3);
        if (v79 && v78) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 16))(v79, v77);
        }
      }
      goto LABEL_5;
    case 0x378:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v252, (unint64_t *)a3);
      if ((_BYTE)v254)
      {
        WebCore::Path::Path((WebCore::Path *)v245, (const WebCore::Path *)v252);
        char v8 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokePath::apply((WebCore::DisplayList::StrokePath *)v245, v8);
LABEL_14:
        if (v249 != -1) {
          ((void (*)(unint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v249])(&v239, &v245[8]);
        }
        if ((_BYTE)v254) {
          goto LABEL_17;
        }
      }
      goto LABEL_8;
    case 0x379:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::PathSegment>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[56])
      {
        uint64_t v247 = *(void *)&v252[48];
        *(_OWORD *)&v245[16] = *(_OWORD *)&v252[16];
        long long v246 = *(_OWORD *)&v252[32];
        *(_OWORD *)v245 = *(_OWORD *)v252;
        int v112 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokePathSegment::apply((WebCore::DisplayList::StrokePathSegment *)v245, v112);
      }
      goto LABEL_8;
    case 0x37A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode((unint64_t *)a3, (uint64_t)v252);
      if (v252[24])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        *(void *)&v245[16] = *(void *)&v252[16];
        unint64_t v35 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeQuadCurve::apply((WebCore::DisplayList::StrokeQuadCurve *)v245, v35);
      }
      else
      {
LABEL_128:
        uint64_t v80 = *(void *)a3;
        uint64_t v81 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v82 = *((void *)a3 + 3);
        if (v82 && v81)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v80);
          uint64_t v132 = *(void *)a3;
          uint64_t v133 = *((void *)a3 + 1);
          uint64_t v134 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v134)
          {
LABEL_305:
            if (v133) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v134 + 16))(v134, v132);
            }
          }
        }
        else
        {
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
        }
      }
      goto LABEL_8;
    case 0x37B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v241, a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect,float>>((uint64_t)v252, (unint64_t *)a3);
      if (v252[20])
      {
        *(_OWORD *)v245 = *(_OWORD *)v252;
        *(_DWORD *)&v245[16] = *(_DWORD *)&v252[16];
        unint64_t v73 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeRect::apply((WebCore::DisplayList::StrokeRect *)v245, v73);
      }
      goto LABEL_8;
    case 0x37C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v245, a2 + 5);
      unint64_t v65 = IPC::Decoder::decode<std::tuple<float,float>>((uint64_t *)a3);
      if (v66)
      {
        *(void *)v252 = v65;
        unint64_t v67 = (WebCore::GraphicsContext *)(*((uint64_t (**)(atomic_uchar *volatile *))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Translate::apply((WebCore::DisplayList::Translate *)v252, v67);
      }
      goto LABEL_35;
    default:
      return this;
  }
}

uint64_t WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    int v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      atomic_uchar *v4 = 0;
      if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

atomic_uchar *volatile **non-virtual thunk to'WebKit::RemoteRenderingBackend::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  return WebKit::RemoteRenderingBackend::didReceiveStreamMessage(this - 1, a2, a3);
}

atomic_uchar *volatile **WebKit::RemoteRenderingBackend::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  unint64_t v10 = (atomic_uchar *)this;
  int v11 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x529:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v140, a2 + 5);
      IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::decode((unint64_t *)a3, (uint64_t)v130);
      if (LOBYTE(v130[1]))
      {
        uint64_t v16 = v130[0];
        v130[0] = 0;
        CFTypeRef v122 = v16;
        WTF::Ref<WebCore::DecomposedGlyphs,WTF::RawPtrTraits<WebCore::DecomposedGlyphs>,WTF::DefaultRefDerefTraits<WebCore::DecomposedGlyphs>>::~Ref((uint64_t *)v130, v15);
        LOBYTE(v123) = 1;
        WebKit::RemoteRenderingBackend::cacheDecomposedGlyphs(v10, (uint64_t *)&v122);
        if ((_BYTE)v123) {
          WTF::Ref<WebCore::DecomposedGlyphs,WTF::RawPtrTraits<WebCore::DecomposedGlyphs>,WTF::DefaultRefDerefTraits<WebCore::DecomposedGlyphs>>::~Ref((uint64_t *)&v122, v17);
        }
      }
      else
      {
        unint64_t v77 = *(void *)a3;
        uint64_t v78 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v79 = *((void *)a3 + 3);
        if (v79 && v78)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v79 + 16))(v79, v77);
          unint64_t v112 = *(void *)a3;
          uint64_t v113 = *((void *)a3 + 1);
          uint64_t v114 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v114 && v113) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v114 + 16))(v114, v112);
          }
        }
        else
        {
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
        }
      }
      goto LABEL_10;
    case 0x52A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      IPC::handleMessage<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>> &&)>(a3, v10);
      goto LABEL_4;
    case 0x52B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v121, a2 + 5);
      IPC::Decoder::decode<WebCore::FontInternalAttributes>(a3, (uint64_t)&v140);
      if (!v142)
      {
        int v39 = 0;
        LOBYTE(v130[0]) = 0;
        char v139 = 0;
        goto LABEL_110;
      }
      IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::decode(a3, (uint64_t)&v122);
      if (!v128)
      {
        IPC::Decoder::markInvalid(a3);
        if (!v128)
        {
          LOBYTE(v130[0]) = 0;
          char v139 = 0;
LABEL_109:
          int v39 = 0;
LABEL_110:
          IPC::Decoder::markInvalid(a3);
          goto LABEL_40;
        }
      }
      uint64_t v36 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3, &v143);
      int v38 = v144;
      if (v144)
      {
        if (!v142 || !v128) {
          goto LABEL_209;
        }
        *(_OWORD *)uint64_t v130 = v140;
        CFTypeRef v131 = v141;
        CFTypeRef v132 = v122;
        LOBYTE(v133) = (_BYTE)v123;
        CFTypeRef v7 = v124;
        CFTypeRef v134 = v124;
        int v6 = v125;
        int v135 = v125;
        CFTypeRef v5 = cf;
        CFTypeRef v4 = v127;
        CFTypeRef v136 = cf;
        CFTypeRef v137 = v127;
        long long v138 = v143;
        int v39 = 1;
        char v139 = 1;
        CFTypeRef cf = 0;
        CFTypeRef v127 = 0;
        CFTypeRef v124 = 0;
      }
      else
      {
        LOBYTE(v130[0]) = 0;
        char v139 = 0;
        if (!v128) {
          goto LABEL_109;
        }
        CFTypeRef v85 = v127;
        CFTypeRef v127 = 0;
        if (v85) {
          CFRelease(v85);
        }
        int v39 = 0;
      }
      CFTypeRef v40 = cf;
      CFTypeRef cf = 0;
      if (v40) {
        CFRelease(v40);
      }
      CFTypeRef v41 = v124;
      CFTypeRef v124 = 0;
      if (v41) {
        CFRelease(v41);
      }
      if (!v38) {
        goto LABEL_110;
      }
LABEL_40:
      if (v39)
      {
        CFTypeRef v122 = v132;
        LOBYTE(v123) = (_BYTE)v133;
        CFTypeRef v124 = v7;
        int v125 = v6;
        CFTypeRef v136 = 0;
        CFTypeRef v137 = 0;
        CFTypeRef v134 = 0;
        CFTypeRef cf = v5;
        CFTypeRef v127 = v4;
        WebKit::RemoteRenderingBackend::cacheFont((uint64_t)v10, (uint64_t)v130, (uint64_t)&v122, v138, SBYTE8(v138));
        CFTypeRef v42 = v127;
        CFTypeRef v127 = 0;
        if (v42) {
          CFRelease(v42);
        }
        CFTypeRef v43 = cf;
        CFTypeRef cf = 0;
        if (v43) {
          CFRelease(v43);
        }
        CFTypeRef v44 = v124;
        CFTypeRef v124 = 0;
        if (v44) {
          CFRelease(v44);
        }
        if (v139)
        {
          CFTypeRef v45 = v137;
          CFTypeRef v137 = 0;
          if (v45) {
            CFRelease(v45);
          }
          CFTypeRef v46 = v136;
          CFTypeRef v136 = 0;
          if (v46) {
            CFRelease(v46);
          }
          CFTypeRef v47 = v134;
          CFTypeRef v134 = 0;
          if (v47) {
            CFRelease(v47);
          }
        }
      }
      unint64_t v14 = (atomic_uchar *volatile **)&v121;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
    case 0x52C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      IPC::handleMessage<Messages::RemoteRenderingBackend::CacheFontCustomPlatformData,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WebCore::FontCustomPlatformSerializedData &&)>(a3, (uint64_t)v10);
      goto LABEL_4;
    case 0x52D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v140, a2 + 5);
      IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>((unint64_t *)a3, (uint64_t)v130);
      if (LOBYTE(v130[1]))
      {
        uint64_t v24 = v130[0];
        v130[0] = 0;
        CFTypeRef v122 = v24;
        WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)v130, v23);
        LOBYTE(v123) = 1;
        WebKit::RemoteRenderingBackend::cacheGradient(v10, (uint64_t *)&v122);
        if ((_BYTE)v123) {
          WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v122, v25);
        }
      }
      else
      {
        IPC::Decoder::markInvalid(a3);
      }
      goto LABEL_10;
    case 0x52E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v140, a2 + 5);
      IPC::Decoder::decode<WebCore::ShareableBitmapHandle>(a3, &v122);
      char v68 = v129;
      if (!v129) {
        goto LABEL_165;
      }
      unint64_t v37 = *((void *)a3 + 1);
      unint64_t v69 = *(void *)a3;
      unint64_t v70 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v37 < v70 || v37 - v70 <= 7)
      {
        unint64_t v106 = 0;
        unint64_t v107 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v36 = *((void *)a3 + 3);
        if (v36) {
          goto LABEL_210;
        }
        goto LABEL_162;
      }
      uint64_t v72 = (const void **)(v69 + v70);
      *((void *)a3 + 2) = v72 + 1;
      if (!v69)
      {
        unint64_t v106 = v37;
        unint64_t v107 = 0;
        goto LABEL_162;
      }
      unint64_t v73 = *v72;
      if ((char *)*v72 - 1 >= (char *)0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_163;
      }
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v130, (uint64_t)&v122);
      CFTypeRef v137 = v73;
      char v68 = 1;
      goto LABEL_91;
    case 0x52F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v140, a2 + 5);
      int v50 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
      if (!v51)
      {
        unint64_t v88 = *(void *)a3;
        uint64_t v89 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v90 = *((void *)a3 + 3);
        if (v90 && v89) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v90 + 16))(v90, v88);
        }
        goto LABEL_122;
      }
      unint64_t v52 = (WTF *)v50;
      unsigned __int16 v53 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a3);
      if (v53 > 0xFFu)
      {
        LOBYTE(v4) = v53;
        unsigned __int16 v54 = IPC::ArgumentCoder<WebCore::ReferrerPolicy,void>::decode<IPC::Decoder>(a3);
        if (v54 > 0xFFu)
        {
          unint64_t v55 = *((void *)a3 + 1);
          unsigned __int16 v56 = *(char **)a3;
          unint64_t v57 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
          if (v55 < v57 || v55 - v57 <= 3)
          {
            unint64_t v91 = 0;
            unint64_t v92 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v93 = *((void *)a3 + 3);
            if (v93)
            {
              if (v55)
              {
                (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
                unint64_t v92 = *(void *)a3;
                unint64_t v91 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v91 = 0;
                unint64_t v92 = 0;
              }
            }
          }
          else
          {
            uint64_t v58 = (float *)&v56[v57];
            *((void *)a3 + 2) = v58 + 1;
            if (v56)
            {
              unsigned __int8 v3 = v54;
              float v8 = *v58;
              IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a3, v56, (uint64_t)&v122);
              if ((_BYTE)v123)
              {
                int v59 = v4;
                uint64_t v36 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a3);
                if ((unsigned __int16)v36 <= 0xFFu)
                {
                  IPC::Decoder::markInvalid(a3);
LABEL_137:
                  int v65 = 0;
                  LOBYTE(v130[0]) = 0;
                  int v63 = 1;
                  goto LABEL_74;
                }
                unint64_t v37 = *((void *)a3 + 1);
                unint64_t v60 = *(void *)a3;
                unint64_t v61 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
                if (v37 < v61 || v37 - v61 <= 7)
                {
                  unint64_t v95 = 0;
                  unint64_t v96 = 0;
                  *(void *)a3 = 0;
                  *((void *)a3 + 1) = 0;
                  uint64_t v97 = *((void *)a3 + 3);
                  if (v97)
                  {
                    if (v37)
                    {
                      (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
                      unint64_t v96 = *(void *)a3;
                      unint64_t v95 = *((void *)a3 + 1);
                    }
                    else
                    {
                      unint64_t v95 = 0;
                      unint64_t v96 = 0;
                    }
                  }
                }
                else
                {
                  unint64_t v62 = (CFTypeRef *)(v60 + v61);
                  *((void *)a3 + 2) = v62 + 1;
                  if (v60)
                  {
                    CFTypeRef v5 = *v62;
                    if ((char *)*v62 - 1 < (char *)0xFFFFFFFFFFFFFFFELL)
                    {
                      if (!(_BYTE)v123) {
                        goto LABEL_209;
                      }
                      LOBYTE(v4) = v36;
                      int v63 = 0;
                      v130[0] = v52;
                      LOBYTE(v130[1]) = v59;
                      BYTE1(v130[1]) = v3;
                      *((float *)&v130[1] + 1) = v8;
                      CFTypeRef v64 = v122;
                      CFTypeRef v122 = 0;
                      CFTypeRef v131 = v64;
                      LOBYTE(v132) = v36;
                      CFTypeRef v133 = v5;
                      int v65 = 1;
LABEL_74:
                      LOBYTE(v134) = v65;
                      if ((_BYTE)v123)
                      {
                        CFTypeRef v66 = v122;
                        CFTypeRef v122 = 0;
                        if (v66) {
                          CFRelease(v66);
                        }
                      }
                      if (!v63)
                      {
LABEL_78:
                        if (v65)
                        {
                          WebKit::RemoteRenderingBackend::createImageBuffer((uint64_t *)v10, (uint64_t *)v130, v59 != 0, v3, &v131, (char)v4, (uint64_t)v5, v8);
                          if ((_BYTE)v134)
                          {
                            CFTypeRef v67 = v131;
                            CFTypeRef v131 = 0;
                            if (v67) {
                              CFRelease(v67);
                            }
                          }
                        }
LABEL_10:
                        unint64_t v14 = (atomic_uchar *volatile **)&v140;
                        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
                      }
LABEL_123:
                      IPC::Decoder::markInvalid(a3);
                      goto LABEL_78;
                    }
                    goto LABEL_136;
                  }
                  unint64_t v95 = v37;
                  unint64_t v96 = 0;
                }
                unint64_t v37 = 0;
                unint64_t v60 = 0;
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v98 = *((void *)a3 + 3);
                if (v98)
                {
                  if (v95)
                  {
                    uint64_t v36 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v98 + 16))(v98, v96, v95);
                    if (*(void *)a3) {
                      goto LABEL_209;
                    }
                    unint64_t v60 = 0;
                    unint64_t v37 = *((void *)a3 + 1);
                  }
                  else
                  {
                    unint64_t v37 = 0;
                    unint64_t v60 = 0;
                  }
                }
LABEL_136:
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v99 = *((void *)a3 + 3);
                if (v99 && v37) {
                  (*(void (**)(uint64_t, unint64_t))(*(void *)v99 + 16))(v99, v60);
                }
                goto LABEL_137;
              }
LABEL_122:
              int v59 = 0;
              int v65 = 0;
              LOBYTE(v130[0]) = 0;
              LOBYTE(v134) = 0;
              goto LABEL_123;
            }
            unint64_t v91 = v55;
            unint64_t v92 = 0;
          }
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v94 = *((void *)a3 + 3);
          if (v94 && v91) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v92);
          }
          goto LABEL_122;
        }
      }
      IPC::Decoder::markInvalid(a3);
      goto LABEL_122;
    case 0x532:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v27) {
        goto LABEL_104;
      }
      unint64_t v28 = *((void *)a3 + 1);
      unint64_t v29 = *(void *)a3;
      unint64_t v30 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v28 >= v30 && v28 - v30 > 7)
      {
        BOOL v32 = (uint64_t *)(v29 + v30);
        *((void *)a3 + 2) = v32 + 1;
        if (v29)
        {
          uint64_t v33 = *v32;
          if ((unint64_t)(v33 - 1) < 0xFFFFFFFFFFFFFFFELL)
          {
            WebKit::RemoteRenderingBackend::createRemoteImageBufferSet((uint64_t)v10, v26, v33);
            goto LABEL_4;
          }
          goto LABEL_103;
        }
        unint64_t v80 = v28;
        unint64_t v81 = 0;
      }
      else
      {
        unint64_t v80 = 0;
        unint64_t v81 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v82 = *((void *)a3 + 3);
        if (v82)
        {
          if (v28)
          {
            (*(void (**)(uint64_t))(*(void *)v82 + 16))(v82);
            unint64_t v81 = *(void *)a3;
            unint64_t v80 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v80 = 0;
            unint64_t v81 = 0;
          }
        }
      }
      unint64_t v28 = 0;
      unint64_t v29 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v83 = *((void *)a3 + 3);
      if (v83)
      {
        if (v80)
        {
          uint64_t v36 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v83 + 16))(v83, v81, v80);
          if (*(void *)a3)
          {
LABEL_209:
            while (1)
            {
              __break(1u);
LABEL_210:
              if (v37)
              {
                (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
                unint64_t v107 = *(void *)a3;
                unint64_t v106 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v106 = 0;
                unint64_t v107 = 0;
              }
LABEL_162:
              unint64_t v37 = 0;
              unint64_t v69 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v108 = *((void *)a3 + 3);
              if (!v108) {
                break;
              }
              if (!v106)
              {
                unint64_t v37 = 0;
                unint64_t v69 = 0;
                break;
              }
              uint64_t v36 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v108 + 16))(v108, v107, v106);
              if (!*(void *)a3)
              {
                unint64_t v69 = 0;
                unint64_t v37 = *((void *)a3 + 1);
                break;
              }
            }
LABEL_163:
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v109 = *((void *)a3 + 3);
            if (v109 && v37) {
              (*(void (**)(uint64_t, unint64_t))(*(void *)v109 + 16))(v109, v69);
            }
            char v68 = 0;
LABEL_165:
            LOBYTE(v130[0]) = 0;
LABEL_91:
            LOBYTE(v138) = v68;
            std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v122);
            if ((_BYTE)v138 || (IPC::Decoder::markInvalid(a3), (_BYTE)v138))
            {
              WebKit::RemoteRenderingBackend::cacheNativeImage((uint64_t)v10);
              if ((_BYTE)v138)
              {
                if ((_BYTE)v133)
                {
                  CFTypeRef v74 = v132;
                  CFTypeRef v132 = 0;
                  if (v74) {
                    CFRelease(v74);
                  }
                }
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v130);
              }
            }
            goto LABEL_10;
          }
          unint64_t v29 = 0;
          unint64_t v28 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v28 = 0;
          unint64_t v29 = 0;
        }
      }
LABEL_103:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v84 = *((void *)a3 + 3);
      if (v84 && v28) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v84 + 16))(v84, v29);
      }
LABEL_104:
      IPC::Decoder::markInvalid(a3);
      goto LABEL_4;
    case 0x534:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      WebKit::RemoteRenderingBackend::destroyGetPixelBufferSharedMemory((WebKit::RemoteRenderingBackend *)v10);
      goto LABEL_4;
    case 0x535:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      uint64_t updated = IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>((uint64_t *)a3);
      if (v19) {
        WebKit::RemoteRenderingBackend::finalizeRenderingUpdate(v10, updated);
      }
      goto LABEL_4;
    case 0x536:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      IPC::handleMessageAsync<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&)>((atomic_uchar *volatile *)v130[0], a3, (uint64_t)v10);
      goto LABEL_4;
    case 0x538:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v122, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((uint64_t)v130, (uint64_t *)a3);
      if ((_BYTE)v133)
      {
        WebKit::RemoteRenderingBackend::markSurfacesVolatile(v10, (uint64_t)v130[0], (uint64_t *)&v130[1], v132);
        if ((_BYTE)v133)
        {
          unsigned int v49 = v130[1];
          if (v130[1])
          {
            v130[1] = 0;
            LODWORD(v131) = 0;
            WTF::fastFree(v49, v48);
          }
        }
      }
      goto LABEL_59;
    case 0x539:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      unint64_t v100 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v101) {
        WebKit::RemoteRenderingBackend::moveToImageBuffer((WTF::ApproximateTime *)v10, v100);
      }
      goto LABEL_4;
    case 0x53A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      unint64_t v86 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v87) {
        WebKit::RemoteRenderingBackend::moveToSerializedBuffer(v10, v86);
      }
      goto LABEL_4;
    case 0x53B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v140, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v130, a3);
      if ((_BYTE)v131)
      {
        CFTypeRef v122 = v130[0];
        __n128 v20 = v130[1];
        v130[0] = 0;
        v130[1] = 0;
        uint64_t v123 = v20;
        WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplay((uint64_t)v10, (uint64_t)&v122);
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v122, v21);
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v130, v22);
      }
      goto LABEL_10;
    case 0x53C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      WebKit::RemoteRenderingBackend::releaseAllDrawingResources((uint64_t *)v10);
      goto LABEL_4;
    case 0x53D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      WebKit::RemoteRenderingBackend::releaseAllImageResources((uint64_t *)v10);
      goto LABEL_4;
    case 0x53E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      uint64_t v75 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v76) {
        WebKit::RemoteRenderingBackend::releaseImageBuffer(v10, v75);
      }
      goto LABEL_4;
    case 0x541:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      uint64_t v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v35) {
        goto LABEL_104;
      }
      WebKit::RemoteRenderingBackend::releaseRemoteImageBufferSet((uint64_t)v10, v34);
      goto LABEL_4;
    case 0x543:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
      uint64_t v12 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v13) {
        WebKit::RemoteRenderingBackend::releaseRenderingResource((uint64_t)v10, v12);
      }
      goto LABEL_4;
    default:
      int v102 = *((unsigned __int8 *)this[6] + 397);
      if (v11 == 1328 && v102 != 0)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
        IPC::handleMessage<Messages::RemoteRenderingBackend::CreateRemoteBarcodeDetector,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ShapeDetection::BarcodeDetectorOptions const&)>((uint64_t *)a3, (uint64_t *)v10);
LABEL_4:
        unint64_t v14 = (atomic_uchar *volatile **)v130;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
      }
      if (v11 == 1343 && v102 != 0)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
        uint64_t v110 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v111) {
          WebKit::RemoteRenderingBackend::releaseRemoteBarcodeDetector((uint64_t)v10, v110);
        }
        goto LABEL_4;
      }
      if (v11 == 1335 && v102 != 0)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
        IPC::handleMessageAsync<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>((atomic_uchar *volatile *)v130[0], a3, (uint64_t)v10);
        goto LABEL_4;
      }
      if (v11 == 1329 && *((unsigned char *)this[6] + 397))
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v122, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ShapeDetection::FaceDetectorOptions>>((uint64_t)v130, (uint64_t *)a3);
        if ((_BYTE)v131) {
          WebKit::RemoteRenderingBackend::createRemoteFaceDetector((uint64_t *)v10, (uint64_t)v130[0]);
        }
LABEL_59:
        unint64_t v14 = (atomic_uchar *volatile **)&v122;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
      }
      if (v11 == 1344 && *((unsigned char *)this[6] + 397))
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
        uint64_t v115 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v116) {
          WebKit::RemoteRenderingBackend::releaseRemoteFaceDetector((uint64_t)v10, v115);
        }
        goto LABEL_4;
      }
      if (v11 == 1331 && *((unsigned char *)this[6] + 397))
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
        uint64_t v117 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v118) {
          WebKit::RemoteRenderingBackend::createRemoteTextDetector((uint64_t *)v10, v117);
        }
        goto LABEL_4;
      }
      if (v11 == 1346 && *((unsigned char *)this[6] + 397))
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v130, a2 + 5);
        uint64_t v119 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v120) {
          WebKit::RemoteRenderingBackend::releaseRemoteTextDetector((uint64_t)v10, v119);
        }
        goto LABEL_4;
      }
      if (v11 == 3731)
      {
        return (atomic_uchar *volatile **)IPC::handleMessageSynchronous<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>((uint64_t)a2, a3, (uint64_t)this);
      }
      return this;
  }
}

atomic_uchar *volatile **WebKit::RemoteImageBufferSet::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4 = (uint64_t)this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1119)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a2 + 5);
    uint64_t updated = (void *)IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>((uint64_t *)a3);
    if (v7) {
      WebKit::RemoteImageBufferSet::endPrepareForDisplay(v4, updated);
    }
    float v8 = &v29;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v8);
  }
  if (v5 == 1120)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v28, a2 + 5);
    unint64_t v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
    if (!v10) {
      goto LABEL_27;
    }
    int v11 = (uint64_t *)v9;
    unsigned __int16 v12 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a3);
    if (v12 <= 0xFFu)
    {
      IPC::Decoder::markInvalid(a3);
    }
    else
    {
      unint64_t v14 = *((void *)a3 + 1);
      uint64_t v15 = *(void *)a3;
      unint64_t v16 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v14 < v16 || v14 - v16 <= 3)
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v25 = *((void *)a3 + 3);
        if (!v25)
        {
LABEL_28:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v26 = *((void *)a3 + 3);
          if (v26 && v23) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
          }
          goto LABEL_34;
        }
        if (!v14)
        {
          unint64_t v23 = 0;
          uint64_t v24 = 0;
          goto LABEL_28;
        }
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v15, v14);
LABEL_27:
        uint64_t v24 = *(void *)a3;
        unint64_t v23 = *((void *)a3 + 1);
        goto LABEL_28;
      }
      uint64_t v18 = (float *)(v15 + v16);
      *((void *)a3 + 2) = v18 + 1;
      if (!v15)
      {
LABEL_36:
        unint64_t v23 = v14;
        uint64_t v24 = v15;
        goto LABEL_28;
      }
      char v19 = v12;
      float v20 = *v18;
      IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a3, v13, (uint64_t)&v35);
      if (v36)
      {
        unsigned __int16 v21 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a3);
        if (v21 < 0x100u)
        {
          IPC::Decoder::markInvalid(a3);
          if (v36)
          {
            CFTypeRef v27 = v35;
            CFTypeRef v35 = 0;
            if (v27) {
              CFRelease(v27);
            }
          }
          goto LABEL_34;
        }
        uint64_t v15 = v36;
        if (v36)
        {
          unint64_t v29 = v11;
          char v30 = v19;
          float v31 = v20;
          CFTypeRef cf = v35;
          char v33 = v21;
          char v34 = 1;
          WebKit::RemoteImageBufferSet::updateConfiguration(v4, &v29, v19 != 0, &cf, v21, v20);
          if (v34)
          {
            CFTypeRef v22 = cf;
            CFTypeRef cf = 0;
            if (v22) {
              CFRelease(v22);
            }
          }
          goto LABEL_22;
        }
        __break(1u);
        goto LABEL_36;
      }
    }
LABEL_34:
    IPC::Decoder::markInvalid(a3);
LABEL_22:
    float v8 = &v28;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v8);
  }
  return this;
}

IPC::Encoder *WebKit::RemoteRenderingBackend::finalizeRenderingUpdate(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = a1[12];
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1318;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  (*(void (**)(void *, IPC::Encoder **, void))(*a1 + 32))(a1, &v10, 0);
  double result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillCompositedRect(uint64_t a1, long long *a2, Color *a3, char a4, char a5)
{
  long long v11 = *a2;
  WebCore::Color::Color((WebCore::Color *)&v12, a3);
  char v13 = a4;
  char v14 = a5;
  float v8 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  double result = (unsigned int *)WebCore::DisplayList::FillCompositedRect::apply((WebCore::DisplayList::FillCompositedRect *)&v11, v8);
  if ((v12 & 0x8000000000000) != 0)
  {
    double result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillRectWithColor(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2, Color *a3)
{
  long long v7 = *(_OWORD *)a2;
  WebCore::Color::Color((WebCore::Color *)&v8, a3);
  uint64_t v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  double result = (unsigned int *)WebCore::DisplayList::FillRectWithColor::apply((WebCore::DisplayList::FillRectWithColor *)&v7, v4);
  if ((v8 & 0x8000000000000) != 0)
  {
    double result = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void WebKit::RemoteImageBufferSet::updateConfiguration(uint64_t a1, void *a2, char a3, CFTypeRef *a4, char a5, float a6)
{
  *(void *)(a1 + 72) = *a2;
  *(unsigned char *)(a1 + 80) = a3;
  *(float *)(a1 + 84) = a6;
  CFTypeRef v8 = *a4;
  if (*a4) {
    CFRetain(*a4);
  }
  uint64_t v9 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = v8;
  if (v9) {
    CFRelease(v9);
  }
  *(unsigned char *)(a1 + 96) = a5;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v10)
  {
    char v11 = 0;
    uint64_t v12 = *(void *)(v10 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](v12);
    }
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v13 - 1;
    *(void *)(v12 + 8) = v13 - 1;
    if (v13 == 1)
    {
      uint64_t v35 = *(void *)(v12 + 16);
      uint64_t v16 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = 0;
      BOOL v17 = v35 != 0;
    }
    else
    {
      uint64_t v16 = 0;
      BOOL v17 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
    }
    if (!v15)
    {
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      if (!v17) {
        WTF::fastFree((WTF *)v12, a2);
      }
    }
    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v18 + 8));
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v18;
  if (v19)
  {
    char v20 = 0;
    uint64_t v21 = *(void *)(v19 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
    if (v20) {
      MEMORY[0x19972E8D0](v21);
    }
    uint64_t v22 = *(void *)(v21 + 8);
    int v23 = 1;
    uint64_t v24 = v22 - 1;
    *(void *)(v21 + 8) = v22 - 1;
    if (v22 == 1)
    {
      uint64_t v36 = *(void *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 24);
      *(void *)(v21 + 24) = 0;
      BOOL v26 = v36 != 0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
    }
    if (!v24)
    {
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      if (!v26) {
        WTF::fastFree((WTF *)v21, a2);
      }
    }
    uint64_t v18 = *(void *)(a1 + 48);
  }
  if (v18) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v18 + 8));
  }
  uint64_t v27 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v18;
  if (v27)
  {
    char v28 = 0;
    uint64_t v29 = *(void *)(v27 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
    if (v28) {
      MEMORY[0x19972E8D0](v29);
    }
    uint64_t v30 = *(void *)(v29 + 8);
    int v31 = 1;
    uint64_t v32 = v30 - 1;
    *(void *)(v29 + 8) = v30 - 1;
    if (v30 == 1)
    {
      uint64_t v37 = *(void *)(v29 + 16);
      uint64_t v33 = *(void *)(v29 + 24);
      *(void *)(v29 + 24) = 0;
      BOOL v34 = v37 != 0;
    }
    else
    {
      uint64_t v33 = 0;
      BOOL v34 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
    if (v31 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
    }
    if (!v32)
    {
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      if (!v34)
      {
        WTF::fastFree((WTF *)v29, a2);
      }
    }
  }
}

IPC::Encoder **WebKit::RemoteRenderingBackend::workQueueInitialize(WebKit::RemoteRenderingBackend *this)
{
  IPC::StreamServerConnection::open(*((IPC::StreamServerConnection **)this + 5), *((atomic_uint **)this + 4));
  IPC::StreamServerConnection::startReceivingMessages(*((void *)this + 5), (uint64_t)this + 8, 0x75u, *((void *)this + 12));
  uint64_t v2 = (IPC::Semaphore *)(*((void *)this + 5) + 160);
  v4[0] = (IPC::Semaphore *)(*((void *)this + 4) + 32);
  v4[1] = v2;
  return IPC::MessageSender::send<Messages::RemoteRenderingBackendProxy::DidInitialize>((uint64_t)this, v4, *((void *)this + 12));
}

IPC::Encoder **WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackend::startListeningForIPC(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::RemoteRenderingBackend::workQueueInitialize(*(WebKit::RemoteRenderingBackend **)(a1 + 8));
}

unint64_t IPC::Decoder::decode<std::tuple<float,float>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<float,float>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::RemoteRenderingBackendProxy::DidInitialize>(uint64_t a1, IPC::Semaphore **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1319;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,void>::encode<IPC::Encoder,std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,0ul,1ul>((uint64_t)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

void *WebKit::WebSWOriginStore::importComplete(WebKit::WebSWOriginStore *this)
{
  *((unsigned char *)this + 1++*(_DWORD *)(this + 12) = 1;
  uint64_t v2 = (char *)this + 120;
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v14, (void **)this + 15);
  uint64_t v3 = *((void *)this + 15);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v9 = v2;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  uint64_t v12 = v5;
  uint64_t v13 = v3 + 8 * v4;
  unint64_t result = WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  uint64_t v7 = v15;
  uint64_t v8 = v10;
  while (v7 != v8)
  {
    IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>(*(void *)(*(void *)v7 + 8) + 56);
    unint64_t result = WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
    uint64_t v7 = v15;
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2730;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v7 = v4;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v7, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>(a1, v2);
}

uint64_t non-virtual thunk to'WebKit::WebSWServerConnection::messageSenderDestinationID(WebKit::WebSWServerConnection *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setContentsScale(int8x16_t *this, __n128 a2)
{
  unsigned __int32 v2 = a2.n128_u32[0];
  if (this->i8[12] != 3)
  {
    this[38].i32[1] = a2.n128_u32[0];
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20000uLL));
    WebKit::PlatformCALayerRemote::updateBackingStore((WebKit::PlatformCALayerRemote *)this);
  }
  uint64_t v4 = this[52].i64[1];
  a2.n128_u32[0] = v2;

  return MEMORY[0x1F416DE68](v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CB678;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void WebKit::WebsiteDataStoreConfiguration::~WebsiteDataStoreConfiguration(WebKit::WebsiteDataStoreConfiguration *this, void *a2)
{
  *(void *)this = &unk_1EE9E5B78;
  uint64_t v3 = (WTF *)*((void *)this + 64);
  if (v3)
  {
    *((void *)this + 64) = 0;
    *((_DWORD *)this + 130) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (const void *)*((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 64), (WTF::StringImpl *)a2);
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  BOOL v17 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebsiteDataStoreConfiguration::~WebsiteDataStoreConfiguration(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E5DE8;
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)(a1 + 3), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void sub_198721B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStoreConfiguration::copy(WebKit::WebsiteDataStoreConfiguration *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 16);
  uint64_t v5 = API::Object::newObject(0x220uLL, 125);
  uint64_t v6 = WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v5, v4, 0);
  *(void *)a2 = v6;
  WTF::String::operator=((uint64_t *)(v6 + 48), (WTF::StringImpl **)this + 6);
  WTF::String::operator=((uint64_t *)(v5 + 56), (WTF::StringImpl **)this + 7);
  WTF::String::operator=((uint64_t *)(v5 + 64), (WTF::StringImpl **)this + 8);
  WTF::String::operator=((uint64_t *)(v5 + 72), (WTF::StringImpl **)this + 9);
  WTF::String::operator=((uint64_t *)(v5 + 80), (WTF::StringImpl **)this + 10);
  WTF::String::operator=((uint64_t *)(v5 + 88), (WTF::StringImpl **)this + 11);
  WTF::String::operator=((uint64_t *)(v5 + 96), (WTF::StringImpl **)this + 12);
  WTF::String::operator=((uint64_t *)(v5 + 104), (WTF::StringImpl **)this + 13);
  WTF::String::operator=((uint64_t *)(v5 + 112), (WTF::StringImpl **)this + 14);
  WTF::String::operator=((uint64_t *)(v5 + 120), (WTF::StringImpl **)this + 15);
  WTF::String::operator=((uint64_t *)(v5 + 128), (WTF::StringImpl **)this + 16);
  WTF::String::operator=((uint64_t *)(v5 + 136), (WTF::StringImpl **)this + 17);
  WTF::String::operator=((uint64_t *)(v5 + 144), (WTF::StringImpl **)this + 18);
  WTF::String::operator=((uint64_t *)(v5 + 152), (WTF::StringImpl **)this + 19);
  WTF::String::operator=((uint64_t *)(v5 + 160), (WTF::StringImpl **)this + 20);
  WTF::String::operator=((uint64_t *)(v5 + 168), (WTF::StringImpl **)this + 21);
  WTF::String::operator=((uint64_t *)(v5 + 176), (WTF::StringImpl **)this + 22);
  WTF::String::operator=((uint64_t *)(v5 + 184), (WTF::StringImpl **)this + 23);
  WTF::String::operator=((uint64_t *)(v5 + 192), (WTF::StringImpl **)this + 24);
  WTF::String::operator=((uint64_t *)(v5 + 200), (WTF::StringImpl **)this + 25);
  WTF::String::operator=((uint64_t *)(v5 + 208), (WTF::StringImpl **)this + 26);
  *(_WORD *)(v5 + 4++*(_DWORD *)(this + 12) = *((_WORD *)this + 206);
  *(_WORD *)(v5 + 288) = *((_WORD *)this + 144);
  *(unsigned char *)(v5 + 17) = *((unsigned char *)this + 17);
  *(void *)(v5 + 216) = *((void *)this + 27);
  uint64_t v7 = *((void *)this + 28);
  *(unsigned char *)(v5 + 232) = *((unsigned char *)this + 232);
  *(void *)(v5 + 224) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 248);
  *(void *)(v5 + 240) = *((void *)this + 30);
  *(unsigned char *)(v5 + 248) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 264);
  *(void *)(v5 + 256) = *((void *)this + 32);
  *(unsigned char *)(v5 + 264) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 280);
  *(void *)(v5 + 272) = *((void *)this + 34);
  *(unsigned char *)(v5 + 280) = v7;
  WTF::String::operator=((uint64_t *)(v5 + 296), (WTF::StringImpl **)this + 37);
  WTF::String::operator=((uint64_t *)(v5 + 304), (WTF::StringImpl **)this + 38);
  WTF::String::operator=((uint64_t *)(v5 + 328), (WTF::StringImpl **)this + 41);
  long long v8 = *((_OWORD *)this + 22);
  *(_OWORD *)(v5 + 336) = *((_OWORD *)this + 21);
  *(_OWORD *)(v5 + 352) = v8;
  WTF::String::operator=((uint64_t *)(v5 + 368), (WTF::StringImpl **)this + 46);
  long long v9 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)(v5 + 376) = v9;
  *(unsigned char *)(v5 + 408) = *((unsigned char *)this + 408);
  *(unsigned char *)(v5 + 409) = *((unsigned char *)this + 409);
  WTF::String::operator=((uint64_t *)(v5 + 312), (WTF::StringImpl **)this + 39);
  *(_WORD *)(v5 + 410) = *((_WORD *)this + 205);
  WTF::String::operator=((uint64_t *)(v5 + 320), (WTF::StringImpl **)this + 40);
  *(unsigned char *)(v5 + 414) = *((unsigned char *)this + 414);
  *(_DWORD *)(v5 + 428) = *((_DWORD *)this + 107);
  *(_WORD *)(v5 + 415) = *(_WORD *)((char *)this + 415);
  *(_WORD *)(v5 + 418) = *((_WORD *)this + 209);
  char v10 = *((unsigned char *)this + 424);
  *(_DWORD *)(v5 + 420) = *((_DWORD *)this + 105);
  *(unsigned char *)(v5 + 424) = v10;
  *(unsigned char *)(v5 + 417) = *((unsigned char *)this + 417);
  WTF::String::operator=((uint64_t *)(v5 + 432), (WTF::StringImpl **)this + 54);
  long long v11 = *(_OWORD *)((char *)this + 440);
  *(_OWORD *)(v5 + 456) = *(_OWORD *)((char *)this + 456);
  *(_OWORD *)(v5 + 440) = v11;
  *(unsigned char *)(v5 + 472) = *((unsigned char *)this + 472);
  *(unsigned char *)(v5 + 473) = *((unsigned char *)this + 473);
  WTF::String::operator=((uint64_t *)(v5 + 480), (WTF::StringImpl **)this + 60);
  WTF::String::operator=((uint64_t *)(v5 + 488), (WTF::StringImpl **)this + 61);
  WTF::String::operator=((uint64_t *)(v5 + 496), (WTF::StringImpl **)this + 62);
  *(unsigned char *)(v5 + 474) = *((unsigned char *)this + 474);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)this + 2);
  CFDictionaryRef v12 = (const __CFDictionary *)*((void *)this + 63);
  if (v12)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v12);
    uint64_t v14 = *(const void **)(v5 + 504);
    *(void *)(v5 + 504) = Copy;
    if (v14) {
      CFRelease(v14);
    }
  }
  *(unsigned char *)(*(void *)a2 + 475) = *((unsigned char *)this + 475);
}

uint64_t WebKit::WebsiteDataStore::WebsiteDataStore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9E5B50;
  *(void *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(a1 + 208) = v6;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(v6 + 474);
  *(unsigned char *)(a1 + 265) = 0;
  *(void *)(a1 + 272) = 0;
  WTF::WorkQueue::create();
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  uint64_t v7 = (WebKit::AuthenticatorManager *)WTF::fastMalloc((WTF *)0x358);
  *(void *)(a1 + 352) = WebKit::AuthenticatorManager::AuthenticatorManager(v7);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  long long v8 = (void *)WTF::fastMalloc((WTF *)8);
  *long long v8 = &unk_1EE9E5D20;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 384) = v8;
  *(void *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 416) = 0;
  long long v9 = (WebCore::LocalWebLockRegistry *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v10 = WebCore::LocalWebLockRegistry::LocalWebLockRegistry(v9);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = v10;
  *(_WORD *)(a1 + 448) = 1;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  long long v11 = qword_1EB3585F0;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    uint64_t v13 = *(WTF **)(a1 + 24);
    *(_DWORD *)buf = 134218240;
    uint64_t v66 = a1;
    __int16 v67 = 2048;
    char v68 = v13;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - WebsiteDataStore::WebsiteDataStore sessionID=%llu", buf, 0x16u);
  }
  WebKit::determineTrackingPreventionState((WebKit *)v12);
  WTF::allPrivileges(v14);
  uint64_t v15 = (WebKit *)WTF::setProcessPrivileges();
  uint64_t v16 = WebKit::allDataStores(v15);
  uint64_t v17 = WebKit::allDataStores(void)::map;
  if (WebKit::allDataStores(void)::map
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(),
        (uint64_t v17 = WebKit::allDataStores(void)::map) != 0))
  {
    int v18 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    int v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  unint64_t v20 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
  unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  unsigned int v23 = v18 & ((v22 >> 31) ^ v22);
  uint64_t v24 = (void *)(v17 + 16 * v23);
  uint64_t v25 = *v24;
  if (!*v24)
  {
LABEL_14:
    *uint64_t v24 = v19;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
    uint64_t v29 = *(atomic_uint **)(a1 + 16);
    atomic_fetch_add(v29, 1u);
    uint64_t v16 = (uint64_t *)v24[1];
    v24[1] = v29;
    if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v16);
      uint64_t v16 = (uint64_t *)WTF::fastFree((WTF *)v16, v28);
    }
    if (WebKit::allDataStores(void)::map) {
      int v30 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(WebKit::allDataStores(void)::map - ++*(_DWORD *)(this + 12) = v30;
    if (WebKit::allDataStores(void)::map) {
      int v31 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12);
    }
    else {
      int v31 = 0;
    }
    uint64_t v32 = (*(_DWORD *)(WebKit::allDataStores(void)::map - 16) + v31);
    unint64_t v33 = *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32) {
        goto LABEL_24;
      }
    }
    else if (3 * v33 > 4 * v32)
    {
      goto LABEL_24;
    }
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand();
    goto LABEL_24;
  }
  BOOL v26 = 0;
  int v27 = 1;
  while (v25 != v19)
  {
    if (v25 == -1) {
      BOOL v26 = v24;
    }
    unsigned int v23 = (v23 + v27) & v18;
    uint64_t v24 = (void *)(v17 + 16 * v23);
    uint64_t v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *BOOL v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(v17 - 16);
        uint64_t v19 = *(void *)(a1 + 24);
        uint64_t v24 = v26;
      }
      goto LABEL_14;
    }
  }
LABEL_24:
  BOOL v34 = WebKit::WebsiteDataStore::initializeAppBoundDomains((WebKit *)v16, 0);
  WebKit::WebsiteDataStore::initializeManagedDomains(v34, 0);
  uint64_t v37 = *(WTF::StringImpl **)(*(void *)(a1 + 208) + 112);
  if (v37) {
    *(_DWORD *)v37 += 2;
  }
  CFTypeRef v64 = v37;
  uint64_t v38 = *(void *)(a1 + 24);
  if (v38 < 0 && v38 != -1) {
    goto LABEL_60;
  }
  if (!v37 || !*((_DWORD *)v37 + 1)) {
    goto LABEL_59;
  }
  if (_MergedGlobals_104)
  {
    uint64_t v39 = qword_1EB359DD8;
    if (qword_1EB359DD8) {
      goto LABEL_32;
    }
  }
  else
  {
    qword_1EB359DD8 = 0;
    _MergedGlobals_104 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
  uint64_t v39 = qword_1EB359DD8;
  if (!qword_1EB359DD8)
  {
    int v40 = 0;
    goto LABEL_33;
  }
LABEL_32:
  int v40 = *(_DWORD *)(v39 - 8);
LABEL_33:
  unsigned int v41 = *((_DWORD *)v37 + 4);
  if (v41 >= 0x100) {
    unsigned int v42 = v41 >> 8;
  }
  else {
    unsigned int v42 = WTF::StringImpl::hashSlowCase(v37);
  }
  CFTypeRef v43 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v45 = v42 & v40;
    CFTypeRef v46 = (uint64_t *)(v39 + 16 * (v42 & v40));
    CFTypeRef v47 = (WTF *)*v46;
    if (*v46 == -1)
    {
      CFTypeRef v43 = (uint64_t *)(v39 + 16 * v45);
      goto LABEL_42;
    }
    if (!v47)
    {
      if (v43)
      {
        *CFTypeRef v43 = 0;
        v43[1] = 0;
        --*(_DWORD *)(qword_1EB359DD8 - 16);
        CFTypeRef v46 = v43;
      }
      WTF::String::operator=(v46, &v64);
      v46[1] = *(void *)(a1 + 24);
      if (qword_1EB359DD8) {
        int v48 = *(_DWORD *)(qword_1EB359DD8 - 12) + 1;
      }
      else {
        int v48 = 1;
      }
      *(_DWORD *)(qword_1EB359DD8 - ++*(_DWORD *)(this + 12) = v48;
      if (qword_1EB359DD8) {
        int v55 = *(_DWORD *)(qword_1EB359DD8 - 12);
      }
      else {
        int v55 = 0;
      }
      uint64_t v56 = (*(_DWORD *)(qword_1EB359DD8 - 16) + v55);
      unint64_t v57 = *(unsigned int *)(qword_1EB359DD8 - 4);
      if (v57 > 0x400)
      {
        if (v57 > 2 * v56) {
          goto LABEL_59;
        }
      }
      else if (3 * v57 > 4 * v56)
      {
        goto LABEL_59;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
      goto LABEL_59;
    }
    if (WTF::equal(v47, v37, v36)) {
      break;
    }
LABEL_42:
    unsigned int v42 = i + v45;
  }
  unsigned int v49 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_FAULT))
  {
    uint64_t v52 = *(void *)(a1 + 24);
    if (_MergedGlobals_104)
    {
      uint64_t v53 = qword_1EB359DD8;
      if (qword_1EB359DD8)
      {
        int v59 = *(_DWORD *)(qword_1EB359DD8 - 8);
        unsigned int v60 = *((_DWORD *)v37 + 4);
        if (v60 >= 0x100) {
          unsigned int v61 = v60 >> 8;
        }
        else {
          unsigned int v61 = WTF::StringImpl::hashSlowCase(v37);
        }
        for (j = 0; ; unsigned int v61 = j + v63)
        {
          uint64_t v63 = v61 & v59;
          unsigned __int16 v54 = *(WTF **)(v53 + 16 * v63);
          if (v54 != (WTF *)-1)
          {
            if (!v54) {
              goto LABEL_81;
            }
            if (WTF::equal(v54, v37, v51)) {
              break;
            }
          }
          ++j;
        }
        unsigned __int16 v54 = *(WTF **)(v53 + 16 * v63 + 8);
      }
      else
      {
        unsigned __int16 v54 = 0;
      }
    }
    else
    {
      unsigned __int16 v54 = 0;
      qword_1EB359DD8 = 0;
      _MergedGlobals_104 = 1;
    }
LABEL_81:
    *(_DWORD *)buf = 134218240;
    uint64_t v66 = v52;
    __int16 v67 = 2048;
    char v68 = v54;
    _os_log_fault_impl(&dword_1985F2000, v49, OS_LOG_TYPE_FAULT, "GeneralStorageDirectory for session %llu is already in use by session %llu", buf, 0x16u);
  }
LABEL_59:
  uint64_t v37 = v64;
LABEL_60:
  CFTypeRef v64 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v35);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  return a1;
}

uint64_t *WebKit::allDataStores(WebKit *this)
{
  if ((WTF::isUIThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1987224A8);
  }
  {
    WebKit::allDataStores(void)::map = 0;
  }
  return &WebKit::allDataStores(void)::map;
}

void WebKit::determineTrackingPreventionState(WebKit *this)
{
  if (!atomic_load(WebKit::currentTrackingPreventionState))
  {
    char v2 = WTF::linkedOnOrAfterSDKWithBehavior();
    uint64_t v3 = (WebCore *)WTF::WorkQueue::create();
    {
      uint64_t v3 = (WebCore *)WebKit::itpQueue(void)::itpQueue;
      uint64_t v4 = v13;
      uint64_t v13 = 0;
      WebKit::itpQueue(void)::itpQueue = v4;
      if (v3)
      {
        (*(void (**)(WebCore *))(*(void *)v3 + 56))(v3);
        uint64_t v3 = (WebCore *)v13;
        uint64_t v13 = 0;
      }
      {
        uint64_t v5 = WebKit::itpQueue(void)::itpQueue;
      }
      else
      {
        uint64_t v5 = 0;
        WebKit::itpQueue(void)::itpQueue = 0;
      }
    }
    else
    {
      uint64_t v5 = v13;
      WebKit::itpQueue(void)::itpQueue = v13;
    }
    LOBYTE(v13) = v2;
    WebCore::applicationBundleIdentifier((uint64_t *)&v12, v3);
    WTF::String::isolatedCopy();
    uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v6 = &unk_1EE9BE9E0;
    *(unsigned char *)(v6 + 8) = v13;
    uint64_t v7 = v14;
    uint64_t v14 = 0;
    uint64_t v15 = v6;
    *(void *)(v6 + 16) = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, &v15);
    uint64_t v9 = v15;
    uint64_t v15 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    long long v11 = v12;
    BOOL v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_1987226D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::AuthenticatorManager *WebKit::AuthenticatorManager::AuthenticatorManager(WebKit::AuthenticatorManager *this)
{
  return this;
}

{
  WTF::RunLoop *v2;
  WTF::RunLoop *v3;

  WebKit::AuthenticatorTransportServiceObserver::AuthenticatorTransportServiceObserver(this);
  WebKit::AuthenticatorObserver::AuthenticatorObserver((WebKit::AuthenticatorManager *)((char *)this + 16));
  *(void *)this = &unk_1EE9B3288;
  *((void *)this + 2) = &unk_1EE9B3330;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((WebKit::AuthenticatorManager *)((char *)this + 32));
  char v2 = (WTF::RunLoop *)WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::CompletionHandler((void *)this + 97);
  uint64_t v3 = (WTF::RunLoop *)WTF::RunLoop::main(v2);
  WTF::RunLoop::Timer::Timer<WebKit::AuthenticatorManager>((WebKit::AuthenticatorManager *)((char *)this + 784), v3, (uint64_t)this, (uint64_t)WebKit::AuthenticatorManager::timeOutTimerFired, 0);
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>((void *)this + 102);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 824);
  WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::HashSet((void *)this + 105);
  *((_DWORD *)this + 2++*(_DWORD *)(this + 12) = 0;
  return this;
}

WebKit::AuthenticatorTransportServiceObserver *WebKit::AuthenticatorTransportServiceObserver::AuthenticatorTransportServiceObserver(WebKit::AuthenticatorTransportServiceObserver *this)
{
  *(void *)this = &unk_1EE9B2EB0;
  return this;
}

WebKit::AuthenticatorObserver *WebKit::AuthenticatorObserver::AuthenticatorObserver(WebKit::AuthenticatorObserver *this)
{
  *(void *)this = &unk_1EE9B2EE0;
  return this;
}

void *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase(void *a1)
{
  return a1;
}

uint64_t WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(WebKit::WebsiteDataStore *this)
{
  if (*((unsigned char *)this + 34))
  {
    uint64_t result = 495;
    __break(0xC471u);
  }
  else
  {
    *((unsigned char *)this + 34) = 1;
    WTF::WorkQueue::create();
    uint64_t v2 = v29;
    CFRetain(*((CFTypeRef *)this + 1));
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    BOOL v27 = *(_OWORD *)(*((void *)this + 26) + 32) != 0;
    uint64_t v3 = WTF::fastMalloc((WTF *)0xB8);
    *(void *)uint64_t v3 = &unk_1EE9E5DE8;
    *(void *)(v3 + 8) = this;
    *(void *)(v3 + 16) = this;
    uint64_t v4 = *((void *)&v17 + 1);
    long long v17 = 0u;
    *(void *)(v3 + 24) = v4;
    *(void *)(v3 + 32) = v18;
    uint64_t v5 = *((void *)&v18 + 1);
    long long v18 = 0u;
    *(void *)(v3 + 40) = v5;
    *(void *)(v3 + 48) = v19;
    uint64_t v6 = *((void *)&v19 + 1);
    long long v19 = 0u;
    *(void *)(v3 + 56) = v6;
    *(void *)(v3 + 64) = v20;
    uint64_t v7 = *((void *)&v20 + 1);
    long long v20 = 0u;
    *(void *)(v3 + 72) = v7;
    *(void *)(v3 + 80) = v21;
    uint64_t v8 = *((void *)&v21 + 1);
    long long v21 = 0u;
    *(void *)(v3 + 88) = v8;
    *(void *)(v3 + 96) = v22;
    uint64_t v9 = *((void *)&v22 + 1);
    long long v22 = 0u;
    *(void *)(v3 + 104) = v9;
    *(void *)(v3 + 1++*(_DWORD *)(this + 12) = v23;
    uint64_t v10 = *((void *)&v23 + 1);
    long long v23 = 0u;
    *(void *)(v3 + 120) = v10;
    *(void *)(v3 + 128) = v24;
    uint64_t v11 = *((void *)&v24 + 1);
    long long v24 = 0u;
    *(void *)(v3 + 136) = v11;
    *(void *)(v3 + 144) = v25;
    uint64_t v12 = *((void *)&v25 + 1);
    long long v25 = 0u;
    *(void *)(v3 + 152) = v12;
    *(void *)(v3 + 160) = v26;
    uint64_t v13 = *((void *)&v26 + 1);
    long long v26 = 0u;
    *(void *)(v3 + 168) = v13;
    *(unsigned char *)(v3 + 176) = v27;
    uint64_t v28 = v3;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 32))(v2, &v28);
    uint64_t v15 = v28;
    uint64_t v28 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)((char *)&v17 + 8), v14);
    if ((void)v17) {
      CFRelease(*(CFTypeRef *)(v17 + 8));
    }
    uint64_t result = v29;
    uint64_t v29 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    }
  }
  return result;
}

void WebKit::WebsiteDataStoreConfiguration::Directories::~Directories(WebKit::WebsiteDataStoreConfiguration::Directories *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + ++*(_DWORD *)(this + 12) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  long long v17 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  long long v18 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  long long v19 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, a2);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  long long v20 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, a2);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  long long v21 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
}

WebKit *WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit *result, int a2)
{
  char v2 = a2;
  unsigned __int8 v3 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v3 & 1) == 0 || a2)
  {
    uint64_t v4 = WebKit::appBoundDomainQueue(result);
    uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9D3060;
    *(unsigned char *)(v5 + 8) = v2;
    uint64_t v6 = (WebKit *)v5;
    (*(void (**)(uint64_t, WebKit **))(*(void *)v4 + 32))(v4, &v6);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (WebKit *)(*(uint64_t (**)(WebKit *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198723084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::appBoundDomainQueue(WebKit *this)
{
    return WebKit::appBoundDomainQueue(void)::queue;
  WTF::WorkQueue::create();
  uint64_t result = v2;
  WebKit::appBoundDomainQueue(void)::queue = v2;
  return result;
}

WebKit *WebKit::WebsiteDataStore::initializeManagedDomains(WebKit *result, int a2)
{
  char v2 = a2;
  unsigned __int8 v3 = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v3 & 1) == 0 || a2)
  {
    uint64_t v4 = WebKit::managedDomainQueue(result);
    uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9D31A0;
    *(unsigned char *)(v5 + 8) = v2;
    uint64_t v6 = (WebKit *)v5;
    (*(void (**)(uint64_t, WebKit **))(*(void *)v4 + 32))(v4, &v6);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (WebKit *)(*(uint64_t (**)(WebKit *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198723204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::managedDomainQueue(WebKit *this)
{
    return WebKit::managedDomainQueue(void)::queue;
  WTF::WorkQueue::create();
  uint64_t result = v2;
  WebKit::managedDomainQueue(void)::queue = v2;
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359DD8;
  if (qword_1EB359DD8)
  {
    unsigned int v3 = *(_DWORD *)(qword_1EB359DD8 - 4);
    int v4 = *(_DWORD *)(qword_1EB359DD8 - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t v7 = (_DWORD *)v5;
  uint64_t v8 = v5 + 16;
  if (a1) {
    bzero((void *)(v5 + 16), 16 * a1);
  }
  qword_1EB359DD8 = v8;
  uint64_t v7[2] = a1 - 1;
  v7[3] = a1;
  *uint64_t v7 = 0;
  *(_DWORD *)(qword_1EB359DD8 - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v3;
    do
    {
      uint64_t v11 = (WTF::StringImpl **)(v2 + 16 * v9);
      uint64_t v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          uint64_t v13 = qword_1EB359DD8;
          if (qword_1EB359DD8) {
            int v14 = *(_DWORD *)(qword_1EB359DD8 - 8);
          }
          else {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)v12 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(v12);
          }
          int v17 = 0;
          do
          {
            uint64_t v18 = v16 & v14;
            unsigned int v16 = ++v17 + v18;
          }
          while (*(void *)(v13 + 16 * v18));
          long long v19 = (WTF::StringImpl **)(v13 + 16 * v18);
          long long v20 = *(WTF::StringImpl **)(v2 + 16 * v9 + 8);
          WTF::StringImpl *v19 = 0;
          long long v21 = *v11;
          *uint64_t v11 = 0;
          WTF::StringImpl *v19 = v21;
          v19[1] = v20;
          long long v22 = *v11;
          *uint64_t v11 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v6);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        else
        {
          *uint64_t v11 = 0;
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v2)
  {
    return;
  }

  WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand()
{
  if (qword_1EB359DD8 && (int v0 = *(_DWORD *)(qword_1EB359DD8 - 4)) != 0) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359DD8 - 12) >= (2 * v0)));
  }
  else {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
  }
}

void WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::allDataStores(void)::map;
  if (WebKit::allDataStores(void)::map)
  {
    int v3 = *(_DWORD *)(WebKit::allDataStores(void)::map - 4);
    int v4 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t v7 = v5;
  uint64_t v8 = v5 + 16;
  if (a1) {
    bzero((void *)(v5 + 16), 16 * a1);
  }
  WebKit::allDataStores(void)::map = v8;
  *(_DWORD *)(v7 + ++*(_DWORD *)(this + 12) = a1;
  *(_DWORD *)(WebKit::allDataStores(void)::map - 8) = a1 - 1;
  *(_DWORD *)(WebKit::allDataStores(void)::map - 16) = 0;
  *(_DWORD *)(WebKit::allDataStores(void)::map - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v2 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          if (WebKit::allDataStores(void)::map) {
            int v14 = *(_DWORD *)(WebKit::allDataStores(void)::map - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(WebKit::allDataStores(void)::map + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          long long v22 = (uint64_t *)(WebKit::allDataStores(void)::map + 16 * v20);
          long long v23 = (unsigned int *)v22[1];
          v22[1] = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v6);
          }
          *long long v22 = *v10;
          uint64_t v24 = v2 + 16 * v9;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          v22[1] = v25;
          uint64_t v13 = *(atomic_uint **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v12 = v2 + 16 * v9;
          uint64_t v13 = *(atomic_uint **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        atomic_store(1u, (unsigned int *)v13);
        WTF::fastFree((WTF *)v13, v6);
      }
LABEL_20:
      if (++v9 == v3) {
        goto LABEL_27;
      }
    }
  }
  if (v2)
  {
LABEL_27:
    WTF::fastFree((WTF *)(v2 - 16), v6);
  }
}

void WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand()
{
  if (WebKit::allDataStores(void)::map && (int v0 = *(_DWORD *)(WebKit::allDataStores(void)::map - 4)) != 0) {
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::allDataStores(void)::map - 12) >= (2 * v0)));
  }
  else {
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(8u);
  }
}

void *WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::HashSet(void *a1)
{
  return a1;
}

{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  return a1;
}

void *WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::CompletionHandler(void *a1)
{
  return a1;
}

{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::Function(a1);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void *WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::Function(void *a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

void *std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(void *a1)
{
  return a1;
}

void *std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::unique_ptr[abi:sn180100]<true,void>(void *a1)
{
  return a1;
}

void *std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]<std::__value_init_tag,std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,0,false>::__compressed_pair_elem[abi:sn180100](a1);
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
  return a1;
}

void *std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,0,false>::__compressed_pair_elem[abi:sn180100](void *result)
{
  void *result = 0;
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>>(v13, a2);
  if (v14[40])
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B7A58;
      v8[1] = v10;
      uint64_t v9 = v11;
      uint64_t v11 = 0;
      uint64_t v12 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkProcess::createNetworkConnectionToWebProcess(a3, v13[0], v13[1], (uint64_t)v14, (uint64_t *)&v12);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[56])
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::create@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, double a3@<D0>)
{
  IPC::Connection::createConnectionIdentifierPair((uint64_t)&v21);
  if (!v24)
  {
    *a2 = 0;
    a2[32] = 0;
    return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21);
  }
  uint64_t result = IPC::StreamClientConnectionBuffer::create(a1, (uint64_t)v19);
  if (!v20)
  {
    *a2 = 0;
    a2[32] = 0;
    goto LABEL_11;
  }
  if (v24)
  {
    int v16 = v21;
    object = v22;
    if (v22) {
      os_retain(v22);
    }
    IPC::Connection::createServerConnection((uint64_t)&v16, (mach_port_context_t *)&v18);
    if (object) {
      os_release(object);
    }
    uint64_t result = WTF::fastMalloc((WTF *)0x80);
    char v7 = v18;
    unsigned int v18 = 0;
    int v14 = v7;
    if (v20)
    {
      uint64_t v8 = (unsigned int *)result;
      IPC::StreamClientConnection::StreamClientConnection(result, (uint64_t *)&v14, v19, a3);
      uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
      if (v24)
      {
        IPC::StreamConnectionBuffer::createHandle((IPC::StreamConnectionBuffer *)(v8 + 16), (uint64_t)&v10);
        IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)v12, (uint64_t)&v23, (uint64_t)&v10);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v10);
        unint64_t v15 = 0;
        uint64_t v10 = v8;
        IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)&v11, (uint64_t)v12);
        std::optional<IPC::StreamClientConnection::StreamConnectionPair>::optional[abi:sn180100]<IPC::StreamClientConnection::StreamConnectionPair,0>((uint64_t)a2, (uint64_t *)&v10);
        IPC::StreamClientConnection::StreamConnectionPair::~StreamConnectionPair(&v10);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v13);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v12);
        WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v15, v9);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
LABEL_11:
        std::optional<IPC::StreamClientConnectionBuffer>::~optional((uint64_t)v19);
        return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21);
      }
    }
  }
  __break(1u);
  return result;
}

unsigned int **WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(unsigned int **a1, void *a2)
{
  uint64_t v2 = a1;
  int v3 = *a1;
  char *v2 = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    char v7 = v2;
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v3, a2);
    WTF::fastFree(v5, v6);
    return v7;
  }
  return v2;
}

void IPC::StreamClientConnection::StreamConnectionPair::~StreamConnectionPair(unsigned int **this)
{
  uint64_t v2 = (WTF::MachSendRight *)(this + 1);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 2));
  WTF::MachSendRight::~MachSendRight(v2);

  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(this, v3);
}

uint64_t std::optional<IPC::StreamClientConnectionBuffer>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 32));
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 32));
      IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 24));
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 24));
    }
    uint64_t v2 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v2) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
    }
  }
  return a1;
}

uint64_t std::optional<IPC::StreamClientConnection::StreamConnectionPair>::optional[abi:sn180100]<IPC::StreamClientConnection::StreamConnectionPair,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(void *)(a1 + 24) = a2[3];
  *(unsigned char *)(a1 + 32) = 1;
  return a1;
}

uint64_t WebKit::WebProcess::ensureGPUProcessConnection(WebKit::WebProcess *this)
{
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  uint64_t result = *((void *)this + 42);
  if (result) {
    return result;
  }
  IPC::Connection::createConnectionIdentifierPair((uint64_t)&v24);
  if (!v27)
  {
    __break(0xC471u);
LABEL_30:
    __break(1u);
LABEL_31:
    JUMPOUT(0x19872403CLL);
  }
  int v21 = v24;
  object = v25;
  uint64_t v25 = 0;
  IPC::Connection::createServerConnection((uint64_t)&v21, (mach_port_context_t *)&v23);
  if (object) {
    os_release(object);
  }
  WebKit::GPUProcessConnection::create((uint64_t *)&v23, (uint64_t *)v20);
  uint64_t v5 = v20[0];
  v20[0] = 0;
  uint64_t v6 = *((void *)this + 42);
  *((void *)this + 42) = v5;
  if (v6)
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 24), v4);
    uint64_t v8 = v20[0];
    v20[0] = 0;
    if (v8) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 3), v7);
    }
  }
  uint64_t v9 = (atomic_uchar *volatile *)*((void *)this + 5);
  if (v9) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*((atomic_uchar *volatile **)this + 5));
  }
  uint64_t v19 = *(void *)(*((void *)this + 42) + 56);
  if (!v27) {
    goto LABEL_30;
  }
  v20[0] = (WebKit::GPUProcessConnection *)&v19;
  v20[1] = (WebKit::GPUProcessConnection *)&v26;
  IPC::Connection::send<Messages::WebProcessProxy::CreateGPUProcessConnection>((uint64_t)v9, (uint64_t)v20);
  if (v9) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v9);
  }
  uint64_t v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *((void *)this + 15);
  if (v14) {
    unint64_t v15 = (void *)(v14 + 16 * *(unsigned int *)(v14 - 4));
  }
  else {
    unint64_t v15 = 0;
  }
  if (v15 != v10)
  {
    do
    {
      int v16 = (WebKit::WebPage *)v11[1];
      if (v16)
      {
        WTF::Ref<WebKit::GPUProcessConnection,WTF::RawPtrTraits<WebKit::GPUProcessConnection>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection>>::Ref(v20, *((void *)this + 42));
        WebKit::WebPage::gpuProcessConnectionDidBecomeAvailable(v16, v20[0]);
        unsigned int v18 = v20[0];
        v20[0] = 0;
        if (v18) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v18 + 3), v17);
        }
      }
      while (1)
      {
        v11 += 2;
        if (v11 == v13) {
          break;
        }
        if ((unint64_t)(*v11 + 1) > 1) {
          goto LABEL_24;
        }
      }
      uint64_t v11 = v13;
LABEL_24:
      ;
    }
    while (v11 != v15);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
  std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24);
  return *((void *)this + 42);
}

uint64_t WebKit::WebPage::gpuProcessConnectionDidBecomeAvailable(WebKit::WebPage *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t result = WebKit::GPUProcessConnection::createVisibilityPropagationContextForPage(a2, this);
  uint64_t v5 = *((void *)this + 309);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 4))
    {
      uint64_t v6 = *((void *)this + 5);
      v8[1] = (uint64_t *)((char *)this + 2472);
      uint64_t v9 = v6;
      uint64_t v7 = *((void *)a2 + 4);
      v8[0] = &v9;
      return IPC::Connection::send<Messages::GPUConnectionToWebProcess::SetMediaEnvironment>(v7, v8, 0, 0, 0);
    }
  }
  return result;
}

void WebKit::GPUProcessConnection::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::fastMalloc((WTF *)0xD0);
  *a2 = WebKit::GPUProcessConnection::GPUProcessConnection(v4, a1);
  uint64_t v5 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = v4;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "GPUProcessConnection::create - %p", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t WebKit::GPUProcessConnection::GPUProcessConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = a1;
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9E7AE8;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(a1 + 32) = v5;
  WebKit::DownloadMap::DownloadMap((void *)(a1 + 40));
  IdentifierInternal = (WTF::RunLoop *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 56) = IdentifierInternal;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 1++*(_DWORD *)(this + 12) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v7 = *(IPC::Connection **)(a1 + 32);
  uint64_t v8 = (_OWORD *)WTF::RunLoop::current(IdentifierInternal);
  uint64_t v9 = (WebKit::WebProcess *)IPC::Connection::open(v7, a1, v8);
  uint64_t v10 = (unsigned __int8 *)WebKit::WebProcess::singleton(v9);
  WebKit::WebProcess::shouldUseRemoteRenderingFor(v10, 8);
  return a1;
}

uint64_t WebKit::GPUProcessConnection::createVisibilityPropagationContextForPage(WebKit::GPUProcessConnection *this, WebKit::WebPage *a2)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)a2 + 265);
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = v3;
  if (v4) {
    LOBYTE(v4) = *(unsigned char *)(v4 + 449) != 0;
  }
  v8[0] = &v7;
  v8[1] = &v6;
  char v9 = v4;
  return IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateVisibilityPropagationContextForPage>(v2, (uint64_t)v8, 0, 0, 0);
}

WebCore::PlatformMediaSessionManager *WebKit::GPUProcessConnection::didReceiveMessage(WebKit::GPUProcessConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WTF::Ref<WebKit::GPUProcessConnection,WTF::RawPtrTraits<WebKit::GPUProcessConnection>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection>>::Ref(&v10, (uint64_t)this);
  int v6 = *((unsigned __int16 *)a3 + 25);
  switch(v6)
  {
    case ';':
      uint64_t result = (WebCore::PlatformMediaSessionManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v8) {
        uint64_t result = (WebCore::PlatformMediaSessionManager *)WebKit::GPUProcessConnection::resetAudioMediaStreamTrackRendererInternalUnit((uint64_t)this, (uint64_t)result);
      }
      break;
    case ':':
      uint64_t result = (WebCore::PlatformMediaSessionManager *)IPC::Decoder::decode<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>>((uint64_t *)a3, v11);
      if (v11[32])
      {
        WebCore::PlatformMediaSessionManager::sharedManager(result);
        uint64_t result = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::processDidReceiveRemoteControlCommand();
      }
      break;
    case '9':
      uint64_t result = (WebCore::PlatformMediaSessionManager *)IPC::Decoder::decode<std::tuple<std::optional<WebKit::GPUProcessConnectionInfo>>>((uint64_t)v11, a3);
      if (v11[44]) {
        uint64_t result = (WebCore::PlatformMediaSessionManager *)WebKit::GPUProcessConnection::didInitialize((uint64_t)this, v11);
      }
      break;
    default:
      uint64_t result = (WebCore::PlatformMediaSessionManager *)WebKit::GPUProcessConnection::dispatchMessage(this, a2, a3);
      break;
  }
  uint64_t v9 = v10;
  uint64_t v10 = 0;
  if (v9) {
    return (WebCore::PlatformMediaSessionManager *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 24), v8);
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = v4 - 1;
  *((void *)v2 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    BOOL v6 = 0;
    uint64_t v7 = 0;
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (!v5)
  {
    v10[0] = v2;
    v10[1] = v7;
    BOOL v11 = v6;
    return (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v10, a2);
  }
  return this;
}

void *WTF::Ref<WebKit::GPUProcessConnection,WTF::RawPtrTraits<WebKit::GPUProcessConnection>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection>>::Ref(void *a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  ++*(void *)(v5 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  *a1 = a2;
  return a1;
}

uint64_t WebKit::NetworkProcess::createNetworkConnectionToWebProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v46 = a2;
  IPC::Connection::createConnectionIdentifierPair((uint64_t)&v43);
  if (!v45)
  {
    LOBYTE(v38) = 0;
    BYTE4(v38) = 0;
    uint64_t v27 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v27 + 16))(v27, &v38, 1);
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    if (BYTE4(v38)) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v38);
    }
    return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43);
  }
  int v40 = v43;
  unsigned int v41 = object;
  if (object) {
    os_retain(object);
  }
  WebKit::NetworkConnectionToWebProcess::create((uint64_t)a1, a2, a3, a4, (uint64_t)&v40, (uint64_t *)&v42);
  if (v41) {
    os_release(v41);
  }
  uint64_t v10 = (uint64_t)v42;
  ++v42[2];
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>((uint64_t)&v38, a1 + 17, &v46, (uint64_t *)&v42);
  uint64_t v38 = a3;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 29, &v38);
  if (v45)
  {
    uint64_t v12 = (WebCore::NetworkStorageSession *)result;
    WTF::MachSendRight::MachSendRight();
    BYTE4(v38) = 1;
    if (v12) {
      WebCore::NetworkStorageSession::cookieAcceptPolicy(v12);
    }
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 16))(v13, &v38);
    uint64_t v14 = (WebCore::NetworkStateNotifier *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    if (BYTE4(v38)) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v38);
    }
    unint64_t v15 = (WebCore::NetworkStateNotifier *)WebCore::NetworkStateNotifier::singleton(v14);
    char v16 = WebCore::NetworkStateNotifier::onLine(v15);
    WebKit::NetworkConnectionToWebProcess::setOnLineState((WebKit::NetworkConnectionToWebProcess *)v10, v16);
    uint64_t v38 = a3;
    uint64_t v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 28, &v38);
    if (!v17) {
      goto LABEL_18;
    }
    uint64_t v18 = v17;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 30, &v46);
    long long v22 = v19;
    uint64_t v23 = (uint64_t *)a1[30];
    if (v23) {
      v23 += 3 * *((unsigned int *)v23 - 1);
    }
    if (v23 != v19)
    {
      uint64_t v28 = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v19 + 2, v20, v21);
      int v31 = v28;
      v37[0] = v28;
      v37[1] = v29;
      uint64_t v32 = v22[2];
      unint64_t v33 = v32 ? (uint64_t *)(v32 + 8 * *(unsigned int *)(v32 - 4)) : 0;
      if (v33 != v28)
      {
        do
        {
          uint64_t v34 = HIDWORD(v39);
          if (HIDWORD(v39) == v39)
          {
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v38, (unint64_t)v31);
            int v31 = v37[0];
          }
          else
          {
            uint64_t v35 = v38;
            uint64_t v36 = (_DWORD *)*v31;
            if (*v31) {
              *v36 += 2;
            }
            *(void *)(v35 + 8 * v34) = v36;
            HIDWORD(v39) = v34 + 1;
          }
          v37[0] = v31 + 1;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v37, (uint64_t)v29, v30);
          int v31 = v37[0];
        }
        while (v37[0] != v33);
      }
    }
    uint64_t v24 = *(void *)(v18 + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v24 + 16));
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v37, (uint64_t **)(v10 + 72));
    WebKit::NetworkStorageManager::startReceivingMessageFromConnection(v24, (uint64_t)v37[0], (uint64_t)&v38);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v37);
    if (v24) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v24 + 16), v25);
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v25);
    if (v10)
    {
LABEL_18:
      if (*(_DWORD *)(v10 + 8) == 1) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      else {
        --*(_DWORD *)(v10 + 8);
      }
    }
    uint64_t v26 = v42;
    unsigned int v42 = 0;
    if (v26)
    {
      if (v26[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
      }
      else {
        --v26[2];
      }
    }
    return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43);
  }
  __break(1u);
  return result;
}

void IPC::Connection::createConnectionIdentifierPair(uint64_t a1@<X8>)
{
  kern_return_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  unsigned char v9[4];
  mach_port_name_t name;
  uint8_t buf[4];
  kern_return_t v12;
  id v13;
  void v14[2];

  v14[1] = *MEMORY[0x1E4F143B8];
  name = 0;
  char v3 = mach_port_allocate(*MEMORY[0x1E4F14960], 1u, &name);
  if (v3)
  {
    uint64_t v5 = qword_1EB358960;
    if (!os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    *(_DWORD *)buf = 67109120;
    uint64_t v12 = v3;
    int v6 = "Connection::createConnectionIdentifierPair: Could not allocate mach port, error %x";
    uint64_t v7 = v5;
    int v8 = 8;
    goto LABEL_12;
  }
  if (name - 1 >= 0xFFFFFFFE)
  {
    char v4 = qword_1EB358960;
    if (!os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      return;
    }
    *(_WORD *)buf = 0;
    int v6 = "Connection::createConnectionIdentifierPair: Could not allocate mach port, returned port was invalid";
    uint64_t v7 = v4;
    int v8 = 2;
LABEL_12:
    _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, v6, buf, v8);
    goto LABEL_8;
  }
  *(_DWORD *)buf = name;
  uint64_t v13 = 0;
  WTF::MachSendRight::createFromReceiveRight((WTF::MachSendRight *)name);
  WTF::MachSendRight::MachSendRight();
  *(_DWORD *)a1 = *(_DWORD *)buf;
  *(void *)(a1 + 8) = v13;
  uint64_t v13 = 0;
  WTF::MachSendRight::MachSendRight();
  *(unsigned char *)(a1 + 24) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v14);
  if (v13) {

  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
}

void sub_198724A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  char v4 = *(void **)(v2 + 8);
  if (v4) {

  }
  IPC::Connection::ConnectionIdentifierPair::~ConnectionIdentifierPair((IPC::Connection::ConnectionIdentifierPair *)va1);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

void IPC::Connection::ConnectionIdentifierPair::~ConnectionIdentifierPair(IPC::Connection::ConnectionIdentifierPair *this)
{
  WTF::MachSendRight::~MachSendRight((IPC::Connection::ConnectionIdentifierPair *)((char *)this + 16));
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2) {
}
  }

void *WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1::operator()(void *result, char a2)
{
  if (result)
  {
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v2 + 136));
      char v4 = result;
      int v6 = v5;
      uint64_t v7 = *(void *)(v2 + 136);
      uint64_t v8 = v7 ? v7 + 16 * *(unsigned int *)(v7 - 4) : 0;
      if ((void *)v8 != result)
      {
        do
        {
          uint64_t result = WebKit::NetworkConnectionToWebProcess::setOnLineState((WebKit::NetworkConnectionToWebProcess *)v4[1], a2);
          while (1)
          {
            v4 += 2;
            if (v4 == v6) {
              break;
            }
            if ((unint64_t)(*v4 + 1) > 1) {
              goto LABEL_10;
            }
          }
          char v4 = v6;
LABEL_10:
          ;
        }
        while (v4 != (void *)v8);
      }
    }
  }
  return result;
}

IPC::Encoder **WebKit::NetworkConnectionToWebProcess::setOnLineState(WebKit::NetworkConnectionToWebProcess *this, char a2)
{
  uint64_t v2 = *((void *)this + 9);
  char v4 = a2;
  return IPC::Connection::send<Messages::NetworkProcessConnection::SetOnLineState>(v2, &v4);
}

IPC::Encoder **IPC::Connection::send<Messages::NetworkProcessConnection::SetOnLineState>(uint64_t a1, char *a2)
{
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 312;
  *((void *)v4 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v7 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  char v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = WTF::fastMalloc((WTF *)0x178);
  uint64_t v13 = v12;
  int v14 = *(_DWORD *)a5;
  unint64_t v15 = *(void **)(a5 + 8);
  if (v15)
  {
    os_retain(v15);
    WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(v13, a1, a2, a3, a4, v14, v15);
    os_release(v15);
  }
  else
  {
    WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(v12, a1, a2, a3, a4, v14, 0);
  }
  *a6 = v13;
}

uint64_t WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *object)
{
  *(_DWORD *)(a1 + 8) = 1;
  uint64_t v12 = a1 + 48;
  *(void *)(a1 + 56) = 0;
  uint64_t v13 = (unsigned int *)(a1 + 56);
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)a1 = &unk_1EE9C3038;
  *(void *)(a1 + 16) = &unk_1EE9C30F0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_1EE9C3128;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &unk_1EE9C3150;
  int v14 = (mach_port_context_t *)(a1 + 72);
  int v31 = a6;
  objecta = object;
  if (object) {
    os_retain(object);
  }
  IPC::Connection::createServerConnection((uint64_t)&v31, v14);
  if (objecta) {
    os_release(objecta);
  }
  atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a4;
  *(void *)(a1 + 96) = 0;
  unint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9C3350;
  v15[1] = a1;
  int v30 = v15;
  WebKit::NetworkResourceLoadMap::NetworkResourceLoadMap(a1 + 104, (uint64_t *)&v30);
  uint64_t v16 = (uint64_t)v30;
  int v30 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  WebKit::NetworkMDNSRegister::NetworkMDNSRegister((WebKit::NetworkMDNSRegister *)(a1 + 168), (WebKit::NetworkConnectionToWebProcess *)a1);
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a3;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v17 = 1;
  *(void *)(v17 + 8) = 0;
  *(void *)(a1 + 288) = v17;
  uint64_t v18 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *((void *)v18 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = &unk_1EE9C49F0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 3++*(_DWORD *)(this + 12) = 0;
  *(void *)(a1 + 296) = v18;
  uint64_t v19 = *(void *)(a5 + 32);
  long long v20 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 336) = v20;
  *(void *)(a1 + 352) = v19;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  int v21 = (WTF::RunLoop *)WTF::RunLoop::main(v18);
  if (WTF::RunLoop::isCurrent(v21))
  {
    long long v22 = (WTF::RunLoop *)IPC::Connection::setOnlySendMessagesAsDispatchWhenWaitingForSyncReplyWhenProcessingSuchAMessage(*v14, 1);
    uint64_t v23 = (IPC::Connection *)*v14;
    uint64_t v24 = (_OWORD *)WTF::RunLoop::current(v22);
    IPC::Connection::open(v23, v12, v24);
    uint64_t v25 = *v14;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v13, v12);
    uint64_t v26 = *(atomic_uint **)v13;
    if (v26) {
      atomic_fetch_add(v26, 1u);
    }
    uint64_t v27 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v27 = &unk_1EE9C3378;
    v27[1] = v26;
    int v30 = v27;
    IPC::Connection::setOutgoingMessageQueueIsGrowingLargeCallback(v25, (uint64_t *)&v30);
    uint64_t v28 = (uint64_t)v30;
    int v30 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    WebKit::NetworkConnectionToWebProcess::establishSWServerConnection((void *)a1);
    WebKit::NetworkConnectionToWebProcess::establishSharedWorkerServerConnection((uint64_t *)a1);
    return a1;
  }
  else
  {
    uint64_t result = 150;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Connection::setOnlySendMessagesAsDispatchWhenWaitingForSyncReplyWhenProcessingSuchAMessage(uint64_t this, char a2)
{
  *(unsigned char *)(this + 34) = a2;
  return this;
}

uint64_t *WebKit::NetworkConnectionToWebProcess::establishSharedWorkerServerConnection(uint64_t *this)
{
  unint64_t v1 = this;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[29];
  if (!v2 || !*(void *)(v2 + 8))
  {
    uint64_t v3 = this[10];
    *(void *)uint64_t v13 = this[11];
    this = (uint64_t *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 224), v13);
    if (this)
    {
      uint64_t v4 = (WebKit::NetworkSession *)this;
      uint64_t v5 = qword_1EB3585C8;
      if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = v1[33];
        *(_DWORD *)uint64_t v13 = 134218240;
        *(void *)&v13[4] = v1;
        __int16 v14 = 2048;
        uint64_t v15 = v6;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::establishSharedWorkerServerConnection:", v13, 0x16u);
      }
      WebKit::NetworkSession::ensureSharedWorkerServer(v4);
      uint64_t v8 = v7;
      std::make_unique[abi:sn180100]<WebKit::WebSharedWorkerServerConnection,WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &,WebKit::WebSharedWorkerServer &,IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>((uint64_t *)v13, v1 + 10, v7, v1[9], v1 + 33);
      uint64_t v9 = *(void *)v13;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*(void *)v13 + 16), *(void *)v13 + 8);
      BOOL v11 = *(atomic_uint **)(v9 + 16);
      if (v11) {
        atomic_fetch_add(v11, 1u);
      }
      uint64_t v12 = (unsigned int *)v1[29];
      v1[29] = (uint64_t)v11;
      if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
      WebKit::WebSharedWorkerServer::addConnection(v8, (uint64_t *)v13);
      this = *(uint64_t **)v13;
      *(void *)uint64_t v13 = 0;
      if (this) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::WebSharedWorkerServerConnection,WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &,WebKit::WebSharedWorkerServer &,IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebSharedWorkerServerConnection::WebSharedWorkerServerConnection(v10, *a2, a3, a4, *a5);
  *a1 = result;
  return result;
}

uint64_t WebKit::WebSharedWorkerServerConnection::WebSharedWorkerServerConnection(uint64_t a1, uint64_t a2, uint64_t a3, atomic_uchar *volatile *a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9CA288;
  *(void *)(a1 + 8) = &unk_1EE9CA2E0;
  *(void *)(a1 + 16) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)(a1 + 24), a4);
  atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  ++*(_DWORD *)(a3 + 8);
  *(void *)(a1 + 48) = a5;
  uint64_t v9 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218240;
    uint64_t v12 = a1;
    __int16 v13 = 2048;
    uint64_t v14 = a5;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::WebSharedWorkerServerConnection:", (uint8_t *)&v11, 0x16u);
  }
  return a1;
}

void *WebKit::NetworkConnectionToWebProcess::establishSWServerConnection(void *this)
{
  unint64_t v1 = this;
  uint64_t v2 = this[27];
  if (!v2 || !*(void *)(v2 + 8))
  {
    uint64_t v3 = this[10];
    int v11 = (void *)this[11];
    this = (void *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 224), &v11);
    if (this)
    {
      uint64_t v4 = WebKit::NetworkSession::ensureSWServer((WebKit::NetworkSession *)this);
      uint64_t v5 = v1[9];
      uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
      uint64_t v7 = WebKit::WebSWServerConnection::WebSWServerConnection(v6, v1, v4, v5, v1[33]);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v6);
      uint64_t v9 = *(atomic_uint **)(v6 + 8);
      if (v9) {
        atomic_fetch_add(v9, 1u);
      }
      uint64_t v10 = (unsigned int *)v1[27];
      v1[27] = v9;
      if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
      int v11 = (void *)v6;
      WebCore::SWServer::addConnection();
      this = v11;
      int v11 = 0;
      if (this) {
        return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebKit::NetworkResourceLoadMap::NetworkResourceLoadMap(uint64_t result, uint64_t *a2)
{
  *(void *)uint64_t result = 0;
  *(unsigned char *)(result + 8) = 0;
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::addConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 48);
  uint64_t v8 = v5;
  uint64_t v6 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::addConnection(%p): processIdentifier=%llu", buf, 0x16u);
  }
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>((uint64_t)buf, (uint64_t *)(a1 + 24), &v8, a2);
}

uint64_t WebKit::WebSWServerConnection::WebSWServerConnection(uint64_t a1, uint64_t a2, uint64_t a3, atomic_uchar *volatile *a4)
{
  uint64_t v7 = (void *)WebCore::SWServer::Connection::Connection();
  *uint64_t v7 = &unk_1EEA0D260;
  v7[7] = &unk_1EEA0D308;
  v7[8] = &unk_1EEA0D358;
  v7[9] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  uint64_t v8 = *(atomic_uint **)(a2 + 56);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(a1 + 80) = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)(a1 + 88), a4);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 1++*(_DWORD *)(this + 12) = 1;
  uint64_t v9 = (WebKit::NetworkSession *)WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1);
  if (!v9) {
    return a1;
  }
  uint64_t v10 = v9;
  ++*((_DWORD *)v9 + 4);
  WebKit::NetworkSession::registerSWServerConnection(v9, (WebKit::WebSWServerConnection *)a1);
  int v11 = *((_DWORD *)v10 + 4);
  if (v11)
  {
    *((_DWORD *)v10 + 4) = v11 - 1;
    return a1;
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::NetworkProcess::networkSession(WebKit::NetworkProcess *this, SessionID a2)
{
  unint64_t m_identifier = a2.m_identifier;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 28, &m_identifier);
}

uint64_t WebKit::WebSWServerConnection::session(WebKit::WebSWServerConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 10) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  v3.unint64_t m_identifier = *(void *)(*(void *)(*((void *)this + 3) + 8) + 168);
  return WebKit::NetworkProcess::networkSession(*(WebKit::NetworkProcess **)(v2 + 80), v3);
}

atomic_uchar **WebKit::NetworkStorageManager::startReceivingMessageFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IPC::Connection::addWorkQueueMessageReceiver(a2, 0x2Bu, *(void *)(a1 + 48), a1, 0);
  WTF::ThreadSafeWeakHashSet<IPC::Connection>::add<IPC::Connection,(void *)0>((uint64_t *)(a1 + 96), (atomic_uchar **)a2);
  uint64_t v6 = *(atomic_uchar **)(a2 + 24);

  return WebKit::NetworkStorageManager::addAllowedSitesForConnection((atomic_uchar **)a1, v6, a3);
}

atomic_uchar **WebKit::NetworkStorageManager::addAllowedSitesForConnection(atomic_uchar **result, atomic_uchar *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 12))
  {
    uint64_t v5 = (atomic_uchar *)result;
    uint64_t v6 = result[2];
    if (v6) {
      uint64_t v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
    }
    v9[0] = v6;
    v9[1] = v5;
    v10[0] = 0;
    v10[1] = 0;
    void v9[2] = a2;
    _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((WTF::StringImpl *)v10, (uint64_t *)a3);
    WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>(&v11, (uint64_t *)v9);
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    return WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0(v9, v7);
  }
  return result;
}

WebKit::NetworkMDNSRegister *WebKit::NetworkMDNSRegister::NetworkMDNSRegister(WebKit::NetworkMDNSRegister *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 7);
  atomic_fetch_add(v4, 1u);
  *(void *)this = v4;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void WebKit::WebSWOriginStore::registerSWServerConnection(WebKit::WebSWOriginStore **this, WebKit::WebSWServerConnection *a2)
{
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebSWServerConnection>((uint64_t)v4, (uint64_t)(this + 15), (uint64_t)a2);
  if (*((_DWORD *)this + 8)) {
    WebKit::WebSWOriginStore::sendStoreHandle(this[5], a2);
  }
  if (*((unsigned char *)this + 112)) {
    IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>((uint64_t)a2 + 56);
  }
}

void WebKit::NetworkSession::registerSWServerConnection(WebKit::NetworkSession *this, WebKit::WebSWServerConnection *a2)
{
  uint64_t v2 = *((void *)this + 97);
  if (v2)
  {
    SessionID v3 = *(WebKit::WebSWOriginStore ***)(v2 + 136);
    if (v3) {
      WebKit::WebSWOriginStore::registerSWServerConnection(v3, a2);
    }
  }
}

void WebKit::NetworkSession::ensureSharedWorkerServer(WebKit::NetworkSession *this)
{
  if (!*((void *)this + 100))
  {
    uint64_t v2 = WTF::fastMalloc((WTF *)0x38);
    WebKit::WebSharedWorkerServer::WebSharedWorkerServer(v2, (uint64_t)this);
    SessionID v3 = (WebKit::WebSharedWorkerServer *)*((void *)this + 100);
    *((void *)this + 100) = v4;
    if (v3) {
      WebKit::WebSharedWorkerServer::operator delete(v3, (WTF::StringImpl *)0x38);
    }
  }
}

double WebKit::WebSharedWorkerServer::WebSharedWorkerServer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a2 + 16);
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t WebKit::NetworkSession::ensureSWServer(WebKit::NetworkSession *this)
{
  if (!*((void *)this + 97))
  {
    if (*((unsigned char *)this + 768))
    {
      SessionID v3 = (WTF::StringImpl *)*((void *)this + 94);
      if (v3)
      {
        char v4 = 0;
        *(_DWORD *)v3 += 4;
      }
      else
      {
        char v4 = 1;
      }
    }
    else
    {
      SessionID v3 = 0;
      char v4 = 1;
    }
    uint64_t v5 = (WebKit::WebSWOriginStore *)WTF::fastMalloc((WTF *)0x88);
    uint64_t v8 = WebKit::WebSWOriginStore::WebSWOriginStore(v5);
    WebKit::NetworkProcess::parentProcessHasServiceWorkerEntitlement(*((WebKit::NetworkProcess **)this + 4));
    WebCore::SWServer::create();
    uint64_t v7 = (_DWORD *)*((void *)this + 97);
    *((void *)this + 97) = v9;
    if (v7) {
      WTF::RefCounted<WebCore::SWServer>::deref(v7);
    }
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v6);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if ((v4 & 1) == 0)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v6);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return *((void *)this + 97);
}

uint64_t WebKit::NetworkProcess::parentProcessHasServiceWorkerEntitlement(WebKit::NetworkProcess *this)
{
  if (WebKit::disableServiceWorkerEntitlementTestingOverride) {
    return 0;
  }
  if (byte_1EB358EA1 == 1) {
    return _MergedGlobals_56 != 0;
  }
  char hasEntitlement = WTF::hasEntitlement();
  uint64_t result = 1;
  if ((hasEntitlement & 1) == 0) {
    uint64_t result = WTF::hasEntitlement();
  }
  _MergedGlobals_56 = result;
  byte_1EB358EA1 = 1;
  return result;
}

WebKit::WebSWOriginStore *WebKit::WebSWOriginStore::WebSWOriginStore(WebKit::WebSWOriginStore *this)
{
  *(void *)this = &unk_1EEA0D1A8;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1EEA0D1F0;
  WebKit::SharedStringHashStore::SharedStringHashStore((char *)this + 24);
  *((unsigned char *)this + 1++*(_DWORD *)(this + 12) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  return this;
}

BOOL WebKit::WebProcess::shouldUseRemoteRenderingFor(unsigned __int8 *a1, int a2)
{
  if ((a2 - 2) < 5)
  {
    int v2 = a1[762];
    return v2 != 0;
  }
  if (a2 == 1)
  {
    int v2 = a1[761];
    return v2 != 0;
  }
  if (a2 == 8)
  {
    int v2 = a1[763];
    return v2 != 0;
  }
  return 0;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t result = (uint64_t *)(v2 + 24 * v7);
  uint64_t v9 = *result;
  if (*result != *a2)
  {
    int v10 = 1;
    while (v9)
    {
      unsigned int v7 = (v7 + v10) & v3;
      uint64_t result = (uint64_t *)(v2 + 24 * v7);
      uint64_t v9 = *result;
      ++v10;
      if (*result == *a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v11 = result & v9;
  uint64_t v12 = (void *)(v8 + 16 * (result & v9));
  uint64_t v13 = *v12;
  uint64_t v14 = *a3;
  if (*v12)
  {
    uint64_t v24 = 0;
    int v25 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v26 = *a2;
        if (*a2) {
          uint64_t v27 = *(unsigned int *)(v26 - 4);
        }
        else {
          uint64_t v27 = 0;
        }
        char v23 = 0;
        uint64_t v22 = v26 + 16 * v27;
        goto LABEL_14;
      }
      if (v13 == -1) {
        uint64_t v24 = v12;
      }
      unsigned int v11 = (v11 + v25) & v9;
      uint64_t v12 = (void *)(v8 + 16 * v11);
      uint64_t v13 = *v12;
      ++v25;
    }
    while (*v12);
    if (v24)
    {
      *uint64_t v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v14 = *a3;
      uint64_t v12 = v24;
    }
  }
  void *v12 = v14;
  uint64_t v15 = *a4;
  *a4 = 0;
  uint64_t result = v12[1];
  v12[1] = v15;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - ++*(_DWORD *)(this + 12) = v17;
  uint64_t v18 = *a2;
  if (*a2) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v12);
    uint64_t v12 = (void *)result;
    uint64_t v18 = *a2;
    if (*a2) {
      unint64_t v21 = *(unsigned int *)(v18 - 4);
    }
    else {
      unint64_t v21 = 0;
    }
    goto LABEL_13;
  }
  if (3 * v21 <= 4 * v20) {
    goto LABEL_26;
  }
LABEL_13:
  uint64_t v22 = v18 + 16 * v21;
  char v23 = 1;
LABEL_14:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v22;
  *(unsigned char *)(a1 + 16) = v23;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  unsigned int v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, v14);
          uint64_t v17 = v14[1];
          v14[1] = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          if (v14 == a3) {
            unsigned int v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = v14[1];
          v14[1] = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = a4;
  uint64_t v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v7 = *a2) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v10 = result & v8;
  unsigned int v11 = (void *)(v7 + 16 * (result & v8));
  uint64_t v12 = *v11;
  uint64_t v13 = *a3;
  if (*v11)
  {
    uint64_t v22 = 0;
    int v23 = 1;
    do
    {
      if (v12 == v13)
      {
        uint64_t v24 = *a2;
        if (*a2) {
          uint64_t v25 = *(unsigned int *)(v24 - 4);
        }
        else {
          uint64_t v25 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v24 + 16 * v25;
        goto LABEL_12;
      }
      if (v12 == -1) {
        uint64_t v22 = v11;
      }
      unsigned int v10 = (v10 + v23) & v8;
      unsigned int v11 = (void *)(v7 + 16 * v10);
      uint64_t v12 = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *uint64_t v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = *a3;
      unsigned int v11 = v22;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>> &&)::{lambda(void)#1}>(v11, v13, &v26);
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v11);
    unsigned int v11 = (void *)result;
    uint64_t v16 = *a2;
    if (*a2) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v20 = v16 + 16 * v19;
  char v21 = 1;
LABEL_12:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  unsigned int v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          int v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>::~KeyValuePair((uint64_t)v14);
          if (v14 == a3) {
            unsigned int v11 = v15;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>::~KeyValuePair((uint64_t)v14);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess35CreateNetworkConnectionToWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS7_34NetworkProcessConnectionParametersEONS_17CompletionHandlerIFvONSt3__18optionalINS2_16ConnectionHandleEEENSA_22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7A58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess35CreateNetworkConnectionToWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS7_34NetworkProcessConnectionParametersEONS_17CompletionHandlerIFvONSt3__18optionalINS2_16ConnectionHandleEEENSA_22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_EE4callESP_SQ_(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  return IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::CreateNetworkConnectionToWebProcess &&)#1}::operator()<IPC::ConnectionHandle,std::optional<IPC::ConnectionHandle> &>((uint64_t *)(a1 + 8), a2, &v4);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::CreateNetworkConnectionToWebProcess &&)#1}::operator()<IPC::ConnectionHandle,std::optional<IPC::ConnectionHandle> &>(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = *a1;
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2974;
  *((void *)v7 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unsigned int v10 = v7;
  IPC::ArgumentCoder<std::optional<IPC::ConnectionHandle>,void>::encode<IPC::Encoder,std::optional<IPC::ConnectionHandle>>(v7, a2);
  char v11 = *a3;
  IPC::Encoder::operator<<<BOOL>(v7, &v11);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v10, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::ThreadSafeWeakHashSet<IPC::Connection>::add<IPC::Connection,(void *)0>(uint64_t *a1, atomic_uchar **a2)
{
  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(*a2))
  {
    __break(0xC471u);
    JUMPOUT(0x198726578);
  }
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a1 + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 2);
  }
  uint64_t result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::ThreadSafeWeakPtrControlBlock::weakRef(*a2);
  uint64_t v13 = result;
  if (result)
  {
    unsigned int v6 = *((_DWORD *)a1 + 3);
    unsigned int v7 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v7;
    if (v7 > v6)
    {
      _ZN3WTF9HashTableIPKN3IPC10ConnectionENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((atomic_uchar *)a1);
      *((_DWORD *)a1 + 2) = 0;
      uint64_t v8 = *a1;
      if (*a1)
      {
        LODWORD(v8) = *(_DWORD *)(v8 - 12);
        if (v8 > 0x7FFFFFFE) {
          LODWORD(v8) = 0x7FFFFFFF;
        }
      }
      *((_DWORD *)a1 + 3) = 2 * v8;
    }
    uint64_t v12 = a2;
    WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>((uint64_t)v11, a1, (WTF **)&v12, &v13);
    uint64_t result = v13;
    if (v13) {
      uint64_t result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v13, v9);
    }
  }
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a1 + 16, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::ThreadSafeWeakPtrControlBlock *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 2));
  }
  return result;
}

atomic_uchar *_ZN3WTF9HashTableIPKN3IPC10ConnectionENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_(atomic_uchar *result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    int v2 = *(_DWORD *)(v1 - 4);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)result;
      int v4 = 0;
      unsigned int v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        unsigned int v7 = (void *)(v1 + 16 * v5);
        if ((unint64_t)(*v7 + 1) >= 2)
        {
          uint64_t v8 = v1 + 16 * v5;
          int v10 = *(atomic_uchar **)(v8 + 8);
          uint64_t v9 = (atomic_uchar **)(v8 + 8);
          uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v10);
          if (result)
          {
            *unsigned int v7 = -1;
            uint64_t result = *v9;
            *uint64_t v9 = 0;
            if (result) {
              uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v11);
            }
            ++v4;
          }
        }
        --v5;
      }
      while (v6);
      uint64_t v12 = *v3;
      if (v4)
      {
        *(_DWORD *)(v12 - 16) += v4;
        uint64_t v15 = *v3;
        if (*v3) {
          int v16 = *(_DWORD *)(v15 - 12);
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)(v15 - ++*(_DWORD *)(this + 12) = v16 - v4;
        uint64_t v12 = *v3;
      }
      if (v12)
      {
        unsigned int v13 = *(_DWORD *)(v12 - 4);
        if (6 * *(_DWORD *)(v12 - 12) < v13 && v13 >= 9)
        {
          return (atomic_uchar *)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::shrinkToBestSize(v3);
        }
      }
    }
  }
  return result;
}

unint64_t WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>(uint64_t a1, uint64_t *a2, WTF **a3, WTF **a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t result = WTF::IntHash<unsigned long>::hash(*a3);
  unsigned int v12 = result & v9;
  unsigned int v13 = (WTF **)(v8 + 16 * (result & v9));
  uint64_t v14 = *v13;
  uint64_t v15 = *a3;
  if (*v13)
  {
    uint64_t v25 = 0;
    int v26 = 1;
    do
    {
      if (v14 == v15)
      {
        uint64_t v27 = *a2;
        if (*a2) {
          uint64_t v28 = *(unsigned int *)(v27 - 4);
        }
        else {
          uint64_t v28 = 0;
        }
        char v24 = 0;
        uint64_t v23 = v27 + 16 * v28;
        goto LABEL_14;
      }
      if (v14 == (WTF *)-1) {
        uint64_t v25 = v13;
      }
      unsigned int v12 = (v12 + v26) & v9;
      unsigned int v13 = (WTF **)(v8 + 16 * v12);
      uint64_t v14 = *v13;
      ++v26;
    }
    while (*v13);
    if (v25)
    {
      *uint64_t v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = *a3;
      unsigned int v13 = v25;
    }
  }
  *unsigned int v13 = v15;
  int v16 = *a4;
  *a4 = 0;
  unint64_t result = (unint64_t)v13[1];
  v13[1] = v16;
  if (result) {
    unint64_t result = (unint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v11);
  }
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - ++*(_DWORD *)(this + 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21) {
      goto LABEL_13;
    }
LABEL_26:
    unint64_t result = (unint64_t)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::expand(a2, v13);
    unsigned int v13 = (WTF **)result;
    uint64_t v19 = *a2;
    if (*a2) {
      unint64_t v22 = *(unsigned int *)(v19 - 4);
    }
    else {
      unint64_t v22 = 0;
    }
    goto LABEL_13;
  }
  if (3 * v22 <= 4 * v21) {
    goto LABEL_26;
  }
LABEL_13:
  uint64_t v23 = v19 + 16 * v22;
  char v24 = 1;
LABEL_14:
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

void *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  char v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          int v16 = WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::reinsert(*a1, v14);
          uint64_t v17 = (atomic_uchar *)v14[1];
          v14[1] = 0;
          if (v17) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, v10);
          }
          if (v14 == a3) {
            char v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = (atomic_uchar *)v14[1];
          v14[1] = 0;
          if (v15) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v15, v10);
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  unint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(a1, v5, a2);
}

unint64_t WTF::IntHash<unsigned long>::hash(WTF *a1)
{
  return WTF::intHash(a1);
}

unint64_t WTF::intHash(WTF *this)
{
  unint64_t v1 = ~(((9
         * (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22))
           + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) >> 8))) ^ ((9 * (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) >> 8))) >> 15)) << 27);
  unint64_t v3 = ((9
       * (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22))
         + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) >> 8))) ^ ((9 * (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) + ~((((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22)) << 13)) >> 8))) >> 15))
     + v1;
  return v3 ^ (v3 >> 31);
}

_DWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>> &&)::{lambda(void)#1}>(void *a1, uint64_t a2, uint64_t **a3)
{
  *a1 = a2;
  uint64_t v4 = **a3;
  **a3 = 0;
  unint64_t result = (_DWORD *)a1[1];
  a1[1] = v4;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebSWServerConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  unsigned int v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit21WebSWServerConnectionES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)a2, (void *)a2);
    *(_DWORD *)(a2 + 8) = 0;
    int v8 = *(unsigned int **)a2;
    if (*(void *)a2)
    {
      LODWORD(v8) = *(v8 - 3);
      if (v8 > 0x7FFFFFFE) {
        LODWORD(v8) = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(a2 + ++*(_DWORD *)(this + 12) = 2 * v8;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v9 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v9, 1u);
  atomic_fetch_add(v9, 1u);
  unsigned int v12 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v12, a1);
  unint64_t result = (unsigned int *)v12;
  unsigned int v12 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v10);
  }
  if (v9)
  {
    if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v9);
      return (unsigned int *)WTF::fastFree((WTF *)v9, v10);
    }
  }
  return result;
}

unsigned int **_ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit21WebSWServerConnectionES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  int v2 = *result;
  if (*result)
  {
    int v3 = *(v2 - 1);
    if (v3)
    {
      uint64_t v4 = (uint64_t *)result;
      int v5 = 0;
      unsigned int v6 = v3 - 1;
      do
      {
        unint64_t result = (unsigned int **)&v2[2 * v6];
        if ((unint64_t)*result + 1 >= 2 && !*((void *)*result + 1))
        {
          unint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      uint64_t v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        uint64_t v11 = *v4;
        if (*v4) {
          int v12 = *(_DWORD *)(v11 - 12);
        }
        else {
          int v12 = 0;
        }
        *(_DWORD *)(v11 - ++*(_DWORD *)(this + 12) = v12 - v5;
        uint64_t v8 = *v4;
      }
      if (v8)
      {
        unsigned int v9 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v9 && v9 >= 9)
        {
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
        }
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::GPUProcessConnectionInfo>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::GPUProcessConnectionInfo>>((uint64_t)&v7, a2);
  if (v9)
  {
    long long v5 = *(_OWORD *)v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)&v8[12];
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    uint64_t result = IPC::Decoder::markInvalid(a2);
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 44) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::GPUProcessConnectionInfo>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 44))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::StreamClientConnectionBuffer::create@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this < 0x1F
    && this > 5
    && (this = WebCore::SharedMemory::allocate((WebCore::SharedMemory *)((1 << this) + 256)), v7))
  {
    int v3 = v7;
    long long v7 = 0;
    IPC::StreamClientConnectionBuffer::StreamClientConnectionBuffer((uint64_t)&v4, (uint64_t *)&v3);
    *(_OWORD *)a2 = v4;
    *((void *)&v4 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    *(void *)(a2 + 16) = v5;
    std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::optional[abi:sn180100](a2 + 24, (uint64_t)&v6);
    *(unsigned char *)(a2 + 48) = 1;
    IPC::StreamClientConnectionBuffer::~StreamClientConnectionBuffer((IPC::StreamClientConnectionBuffer *)&v4);
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    this = (uint64_t)v7;
    long long v7 = 0;
    if (this) {
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)this);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
  return this;
}

void IPC::StreamClientConnectionBuffer::~StreamClientConnectionBuffer(IPC::StreamClientConnectionBuffer *this)
{
  if (*((unsigned char *)this + 40))
  {
    IPC::Semaphore::destroy((IPC::StreamClientConnectionBuffer *)((char *)this + 32));
    WTF::MachSendRight::~MachSendRight((IPC::StreamClientConnectionBuffer *)((char *)this + 32));
    IPC::Semaphore::destroy((IPC::StreamClientConnectionBuffer *)((char *)this + 24));
    WTF::MachSendRight::~MachSendRight((IPC::StreamClientConnectionBuffer *)((char *)this + 24));
  }
  int v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
}

uint64_t IPC::StreamClientConnectionBuffer::StreamClientConnectionBuffer(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 + 8) - 256;
  *a2 = 0;
  *(void *)uint64_t result = v3;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 40) = 0;
  if ((unint64_t)(*(void *)(v2 + 8) - 257) >= 0x7FFFFFFF)
  {
    uint64_t result = 93;
    __break(0xC471u);
  }
  else
  {
    *(void *)(*(void *)(v2 + 16) + 128) = 0x80000000;
    **(void **)(*(void *)(result + 8) + 16) = 0;
  }
  return result;
}

void IPC::StreamConnectionBuffer::createHandle(IPC::StreamConnectionBuffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  atomic_fetch_add(v3, 1u);
  WebCore::SharedMemory::createHandle();
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v3);
  }
  if (v6)
  {
    WTF::MachSendRight::MachSendRight();
    *(void *)(a2 + 8) = v5;
    if (v6) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    unint64_t v1 = (WTF *)MEMORY[0x199731020]();
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::StreamClientConnection(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  *(_DWORD *)a1 = 1;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v7;
  a3[1] = 0;
  uint64_t v9 = a3[2];
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::optional[abi:sn180100](a1 + 88, (uint64_t)(a3 + 3));
  *(void *)(a1 + 1++*(_DWORD *)(this + 12) = 20;
  *(double *)(a1 + 120) = a4;
  return a1;
}

uint64_t std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    WTF::MachSendRight::MachSendRight();
    int v5 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a1 + 4) = v5;
    WTF::MachSendRight::MachSendRight();
    int v6 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + ++*(_DWORD *)(this + 12) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 12) = v6;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::optional<IPC::ConnectionHandle>,void>::encode<IPC::Encoder,std::optional<IPC::ConnectionHandle>>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 4))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 4))
    {
      return IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::decode<IPC::Decoder>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 44) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      uint64_t result = IPC::Decoder::decode<WebKit::GPUProcessConnectionInfo>((uint64_t)v7, a2);
      char v5 = v9;
      if (v9)
      {
        long long v6 = v7[1];
        *(_OWORD *)a1 = v7[0];
        *(_OWORD *)(a1 + 16) = v6;
        *(void *)(a1 + 32) = v8;
        char v5 = 1;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        *(unsigned char *)a1 = 0;
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 40) = 0;
      char v5 = 1;
    }
    *(unsigned char *)(a1 + 44) = v5;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::GPUProcessConnectionInfo>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 40))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (IPC::Decoder *)a2, (uint64_t)v6);
  }
  *a1 = 0;
  a1[56] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID>((uint64_t)a1, (uint64_t *)a2, a3, v8);
  }
  *a1 = 0;
  a1[56] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = IPC::Decoder::decode<WebKit::NetworkProcessConnectionParameters>((uint64_t)v11, a2);
  char v8 = v13;
  if (!v13)
  {
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a3 + 8) && *((unsigned char *)a4 + 8))
  {
    uint64_t v9 = *a4;
    *(void *)a1 = *(void *)a3;
    *(void *)(a1 + 8) = v9;
    long long v10 = v11[1];
    *(_OWORD *)(a1 + 16) = v11[0];
    *(_OWORD *)(a1 + 32) = v10;
    *(void *)(a1 + 48) = v12;
    char v8 = 1;
LABEL_5:
    *(unsigned char *)(a1 + 56) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::NetworkProcessConnectionParameters>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::NetworkProcessConnectionParameters,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 40))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkProcessConnectionParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::SharedPreferencesForWebProcess>(a1, v7);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  if (v9)
  {
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(void *)(a2 + 32) = v8;
    LOBYTE(v5) = 1;
LABEL_4:
    *(unsigned char *)(a2 + 40) = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::SharedPreferencesForWebProcess>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::decode(a1, a2);
  if (!a2[40])
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(v8, a1);
  unsigned __int16 v4 = IPC::Decoder::decode<BOOL>(a1);
  uint64_t result = IPC::Decoder::decode<BOOL>(a1);
  if (!*(void *)a1) {
    goto LABEL_8;
  }
  if (!v10 || (long long v6 = v8[1], LOBYTE(v7) = v9, v4 <= 0xFFu) || (unsigned __int16)result <= 0xFFu)
  {
    __break(1u);
LABEL_8:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
    return result;
  }
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 36) = v4;
  *(unsigned char *)(a2 + 37) = result;
  *(unsigned char *)(a2 + 40) = 1;
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateVisibilityPropagationContextForPage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 44;
  *((void *)v10 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,BOOL>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  char v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder **IPC::Connection::send<Messages::WebProcessProxy::CreateGPUProcessConnection>(uint64_t a1, uint64_t a2)
{
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 2590;
  *((void *)v4 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v7 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GPUProcessConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::ConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::ConnectionHandle &&,0ul,1ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 1, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GPUProcessConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::ConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::ConnectionHandle &&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v6 = **(void **)a2;
  IPC::Encoder::operator<<<unsigned long long>(a1, &v6);
  uint64_t v4 = *(void *)(a2 + 8);

  return IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v4);
}

uint64_t IPC::Connection::setOutgoingMessageQueueIsGrowingLargeCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WebKit::WebChromeClient::shouldUseTiledBackingForFrameView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 72) + 224))(*(void *)(v4 + 72), a2);
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v5;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::shouldUseTiledBackingForFrameView(WebKit::RemoteLayerTreeDrawingArea *this, const WebCore::LocalFrameView *a2)
{
  uint64_t v3 = WebCore::LocalFrameView::frame(a2);
  if (*(void *)(*(void *)(v3 + 616) + 8) == v3) {
    return 1;
  }
  uint64_t v4 = *(void *)(*((void *)this + 5) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  return *(unsigned char *)(*(void *)(*(void *)(v5 + 48) + 112) + 668) & 1;
}

void ___ZN6WebKit16SecItemShimProxy9singletonEv_block_invoke()
{
}

void WebKit::WebLocalFrameLoaderClient::overrideContentSecurityPolicy(WebKit::WebFrame **this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = WebKit::WebFrame::page(this[2]);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v5 = *(_DWORD **)(v4 + 2056);
    if (v5) {
      *v5 += 2;
    }
    *a2 = v5;
    uint64_t v6 = *(const void **)(v4 + 8);
    CFRelease(v6);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D0850;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9BE9E0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BA5C8;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void sub_19872840C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14)
{
  if (a13) {
    CFRelease(*(CFTypeRef *)(a13 + 8));
  }
  _Unwind_Resume(exception_object);
}

WebKit::NavigationState *std::unique_ptr<WebKit::NavigationState>::reset[abi:sn180100](WebKit::NavigationState **a1, WebKit::NavigationState *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NavigationState::~NavigationState(result);
    return (WebKit::NavigationState *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t *std::unique_ptr<WebKit::UIDelegate>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  WebKit::NavigationState *result = a2;
  if (v2)
  {
    objc_destroyWeak((id *)(v2 + 16));
    objc_destroyWeak((id *)(v2 + 8));
    uint64_t v4 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v2, v3);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

uint64_t API::PageConfiguration::copy@<X0>(API::PageConfiguration *this@<X0>, API::PageConfiguration **a2@<X8>)
{
  uint64_t v4 = (API::PageConfiguration *)API::Object::newObject(0x218uLL, 87);
  uint64_t v5 = API::PageConfiguration::PageConfiguration(v4);
  *a2 = v5;
  uint64_t v6 = (uint64_t)v5 + 16;

  return API::PageConfiguration::Data::operator=(v6, (uint64_t)this + 16);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ContentSizeCategoryDidChange>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2179;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198728748(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WebKit::ResourceLoadDelegate *WebKit::ResourceLoadDelegate::ResourceLoadDelegate(WebKit::ResourceLoadDelegate *this, WKWebView *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  objc_initWeak((id *)this + 1, a2);
  *((void *)this + 2) = 0;
  return this;
}

WebKit::NavigationState *WebKit::NavigationState::NavigationState(WebKit::NavigationState *this, WKWebView *a2)
{
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  *(void *)this = &unk_1EE9CE648;
  *((void *)this + 2) = 0;
  inited = (WTF::RunLoop *)objc_initWeak((id *)this + 2, a2);
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 48) = 0;
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::current(inited);
  int v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v7 = &unk_1EE9CF6F0;
  v7[1] = WebKit::NavigationState::releaseNetworkActivityAfterLoadCompletion;
  _OWORD v7[2] = 0;
  v7[3] = this;
  CFTypeRef v8 = (CFTypeRef)WTF::RunLoop::TimerBase::TimerBase((WebKit::NavigationState *)((char *)this + 64), v6);
  *((void *)this + 8) = &unk_1EE9B3390;
  *((void *)this + 1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v7;
  m_ptr = a2->_page.m_ptr;
  if (m_ptr) {
    CFTypeRef v8 = CFRetain(*((CFTypeRef *)m_ptr + 1));
  }
  {
    unsigned int v11 = dword_1EB35A628++;
    if (v11 > dword_1EB35A62C) {
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v8, v9);
    }
  }
  else
  {
    WebKit::navigationStates(void)::navigationStates = 0;
    *(void *)&dword_1EB35A628 = 1;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)m_ptr + 6, (uint64_t)m_ptr + 16);
  char v13 = (atomic_uint *)*((void *)m_ptr + 3);
  atomic_fetch_add(v13, 1u);
  atomic_fetch_add(v13, 1u);
  if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  uint64_t v14 = WebKit::navigationStates(void)::navigationStates;
  if (WebKit::navigationStates(void)::navigationStates
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(),
        (uint64_t v14 = WebKit::navigationStates(void)::navigationStates) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = 0;
  unint64_t v17 = ((unint64_t)v13 + ~((void)v13 << 32)) ^ (((unint64_t)v13 + ~((void)v13 << 32)) >> 22);
  unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  unsigned int v20 = (v19 >> 31) ^ v19;
  for (int i = 1; ; ++i)
  {
    unsigned int v22 = v20 & v15;
    uint64_t v23 = (atomic_uint **)(v14 + 16 * v22);
    char v24 = *v23;
    if (*v23 == (atomic_uint *)-1)
    {
      uint64_t v16 = (void *)(v14 + 16 * v22);
      goto LABEL_18;
    }
    if (!v24)
    {
      if (v16)
      {
        void *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16);
        void *v16 = v13;
      }
      else
      {
        IPC::Connection *v23 = v13;
        uint64_t v16 = (void *)(v14 + 16 * v22);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, (uint64_t)this);
      int v26 = *(atomic_uint **)v4;
      if (*(void *)v4) {
        atomic_fetch_add(v26, 1u);
      }
      uint64_t v27 = (unsigned int *)v16[1];
      v16[1] = v26;
      if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v25);
      }
      if (WebKit::navigationStates(void)::navigationStates) {
        int v28 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) + 1;
      }
      else {
        int v28 = 1;
      }
      *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - ++*(_DWORD *)(this + 12) = v28;
      if (WebKit::navigationStates(void)::navigationStates) {
        int v29 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12);
      }
      else {
        int v29 = 0;
      }
      uint64_t v30 = (*(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16) + v29);
      unint64_t v31 = *(unsigned int *)(WebKit::navigationStates(void)::navigationStates - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30) {
          goto LABEL_39;
        }
      }
      else if (3 * v31 > 4 * v30)
      {
        goto LABEL_39;
      }
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand();
      goto LABEL_39;
    }
    if (v24 == v13) {
      break;
    }
LABEL_18:
    unsigned int v20 = i + v22;
  }
  if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v13);
    WTF::fastFree((WTF *)v13, v12);
  }
LABEL_39:
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(*((void *)m_ptr + 4) + 976, (unsigned int *)this, (uint64_t)v33);
  CFRelease(*((CFTypeRef *)m_ptr + 1));
  return this;
}

void sub_198728B70(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::ProcessThrottlerActivity **a10, id *location)
{
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, a2);
  }
  CFRelease(*(CFTypeRef *)(v16 + 8));
  *(void *)(v14 + 64) = a9;
  uint64_t v19 = *(void *)(v14 + 88);
  *(void *)(v14 + 88) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v15);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a10, 0);
  objc_destroyWeak(location);
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v11, v20);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::setApplicationNameForUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(this[45], *a2, a3);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)WTF::String::operator=((uint64_t *)this + 45, a2);
    uint64_t v6 = this[47];
    if (!v6 || !*((_DWORD *)v6 + 1))
    {
      WebCore::standardUserAgentWithApplicationName();
      WebKit::WebPageProxy::setUserAgent((uint64_t)this, (uint64_t *)&v8, 0);
      uint64_t result = (uint64_t)v8;
      CFTypeRef v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setForceAlwaysUserScalable(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 1077) != a2)
  {
    *(unsigned char *)(this + 1077) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        uint64_t v2 = *(void *)(this + 256);
        char v3 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetForceAlwaysUserScalable>(v2, &v3, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetForceAlwaysUserScalable>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  CFTypeRef v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v8 = 2431;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198728E7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::setFindClient(uint64_t a1, void **a2)
{
  char v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    char v3 = (void *)WTF::fastMalloc((WTF *)8);
    void *v3 = &unk_1EE9D9B38;
  }
  uint64_t result = *(void *)(a1 + 112);
  *(void *)(a1 + 1++*(_DWORD *)(this + 12) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void WebKit::WebPageProxy::setUserAgent(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  char v11 = (char)a3;
  if ((WTF::equal(*(WTF **)(a1 + 352), (const WTF::StringImpl *)*a2, a3) & 1) == 0)
  {
    WTF::String::operator=((uint64_t *)(a1 + 352), a2);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 256) + 512) + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebKit::WebProcessPool::updateRemoteWorkerUserAgent((WTF **)v6, (const WTF::StringImpl **)(a1 + 352), v7);
    if (v5) {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
    {
      CFTypeRef v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *CFTypeRef v8 = &unk_1EE9DA748;
      v8[1] = a1;
      _OWORD v8[2] = &v11;
      uint64_t v10 = v8;
      WebKit::WebPageProxy::forEachWebContentProcess((void *)a1, &v10);
      char v9 = v10;
      uint64_t v10 = 0;
      if (v9) {
        (*(void (**)(void *))(*v9 + 8))(v9);
      }
    }
  }
}

uint64_t WebKit::WebProcessPool::updateRemoteWorkerUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)(this + 21);
  uint64_t result = WTF::equal(this[21], *a2, a3);
  if ((result & 1) == 0)
  {
    WTF::String::operator=(v4, a2);
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      unk_1EB35A750 = 0;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v15);
    if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
    {
      uint64_t v6 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
      uint64_t v7 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v6;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v10 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
    uint64_t v11 = v7;
    uint64_t v12 = v7;
    uint64_t v13 = v7;
    uint64_t v14 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v6;
    uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
    for (uint64_t i = v16; v16 != v11; uint64_t i = v16)
    {
      uint64_t v9 = *(void *)(*(void *)i + 8);
      atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
      WebKit::WebProcessProxy::setRemoteWorkerUserAgent(v9, (const WTF::String *)v4);
      if (v9) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
      }
      uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v15);
    }
  }
  return result;
}

WebKit::UIDelegate *WebKit::UIDelegate::UIDelegate(WebKit::UIDelegate *this, WKWebView *a2)
{
  *(void *)this = 0;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  objc_initWeak((id *)this + 1, a2);
  *((void *)this + 2) = 0;
  return this;
}

void sub_1987291C8(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::navigationStates(void)::navigationStates;
  if (WebKit::navigationStates(void)::navigationStates)
  {
    int v3 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4);
    int v4 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t v7 = v5;
  uint64_t v8 = v5 + 16;
  if (a1) {
    bzero((void *)(v5 + 16), 16 * a1);
  }
  WebKit::navigationStates(void)::navigationStates = v8;
  *(_DWORD *)(v7 + ++*(_DWORD *)(this + 12) = a1;
  *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 8) = a1 - 1;
  *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16) = 0;
  *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v9 = &qword_1EB35A000;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = (atomic_uint **)(v2 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11 != (atomic_uint *)-1)
      {
        if (v12)
        {
          uint64_t v17 = v9[196];
          if (v17) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = ((unint64_t)v12 + ~((void)v12 << 32)) ^ (((unint64_t)v12 + ~((void)v12 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (unsigned int **)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v6);
            uint64_t v9 = &qword_1EB35A000;
          }
          int v28 = *v26;
          *int v26 = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v6);
            uint64_t v9 = &qword_1EB35A000;
          }
          int v29 = (unsigned int *)*v11;
          *uint64_t v11 = 0;
          *int v26 = v29;
          uint64_t v30 = v2 + 16 * v10;
          unint64_t v31 = *(unsigned int **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          v26[1] = v31;
          uint64_t v32 = *(unsigned int **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v32);
            uint64_t v34 = v9;
            WTF::fastFree((WTF *)v32, v6);
            uint64_t v9 = v34;
          }
          uint64_t v15 = *v11;
          *uint64_t v11 = 0;
          if (!v15 || atomic_fetch_add(v15, 0xFFFFFFFF) != 1) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v13 = v2 + 16 * v10;
          uint64_t v14 = *(unsigned int **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v14);
            unint64_t v33 = v9;
            WTF::fastFree((WTF *)v14, v6);
            uint64_t v9 = v33;
          }
          uint64_t v15 = *v11;
          *uint64_t v11 = 0;
          if (!v15 || atomic_fetch_add(v15, 0xFFFFFFFF) != 1) {
            goto LABEL_29;
          }
        }
        atomic_store(1u, (unsigned int *)v15);
        uint64_t v16 = v9;
        WTF::fastFree((WTF *)v15, v6);
        uint64_t v9 = v16;
      }
LABEL_29:
      if (++v10 == v3) {
        goto LABEL_36;
      }
    }
  }
  if (v2)
  {
LABEL_36:
    WTF::fastFree((WTF *)(v2 - 16), v6);
  }
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand()
{
  if (WebKit::navigationStates(void)::navigationStates
    && (int v0 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4)) != 0)
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) >= (2 * v0)));
  }
  else
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(8u);
  }
}

void sub_1987295BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198729658(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::NavigationState::createNavigationClient@<X0>(WebKit::NavigationState *this@<X0>, void *a2@<X8>)
{
  uint64_t result = WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::NavigationClient,WebKit::NavigationState&>((uint64_t)this, &v4);
  *a2 = v4;
  return result;
}

unsigned int *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::NavigationClient,WebKit::NavigationState&>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9CE730;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v6 = *(atomic_uint **)(a1 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  v4[1] = v6;
  *a2 = v4;
  return result;
}

void sub_198729804(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::~NavigationClient(WebKit::NavigationState::NavigationClient *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

{
  unsigned int *v3;

  int v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void sub_198729930(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::PageClientImpl *std::unique_ptr<WebKit::PageClientImpl>::reset[abi:sn180100](WebKit::PageClientImpl **a1, WebKit::PageClientImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::PageClientImpl::~PageClientImpl(result);
    return (WebKit::PageClientImpl *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::PageClientImpl *WebKit::PageClientImpl::PageClientImpl(WebKit::PageClientImpl *this, WKContentView *a2, WKWebView *a3)
{
  uint64_t v5 = WebKit::PageClientImplCocoa::PageClientImplCocoa(this, a3);
  *(void *)uint64_t v5 = &unk_1EE9D33E8;
  *((void *)v5 + 4) = &unk_1EE9D3BA8;
  *((void *)v5 + 5) = 0;
  objc_initWeak((id *)v5 + 5, a2);
  *((void *)this + 6) = objc_alloc_init(WKEditorUndoTarget);
  return this;
}

void sub_198729A1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  WebKit::PageClientImplCocoa::~PageClientImplCocoa(v1);
  _Unwind_Resume(a1);
}

WebKit::PageClientImplCocoa *WebKit::PageClientImplCocoa::PageClientImplCocoa(WebKit::PageClientImplCocoa *this, WKWebView *a2)
{
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9CE8F8;
  *((void *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  int v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = 0;
  v3[1] = 0;
  *((void *)this + 3) = v3;
  return this;
}

void sub_198729AB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v4);
  _Unwind_Resume(a1);
}

void sub_198729BA0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

id *std::unique_ptr<WebKit::ApplicationStateTracker>::reset[abi:sn180100](id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ApplicationStateTracker::~ApplicationStateTracker(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::ApplicationStateTracker *WebKit::ApplicationStateTracker::ApplicationStateTracker(WebKit::ApplicationStateTracker *this, UIView *a2, objc_selector *a3, objc_selector *a4, objc_selector *a5, objc_selector *a6)
{
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(void *)this = 0;
  objc_initWeak((id *)this + 1, a2);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v11 = [[WKUIWindowSceneObserver alloc] initWithParent:this];
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 5) = v11;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 7) = a3;
  *((void *)this + 8) = a4;
  *((void *)this + 9) = a5;
  *((void *)this + 10) = a6;
  *((unsigned char *)this + 88) = 1;
  *((_OWORD *)this + 7) = 0u;
  {
    int v14 = dword_1EB35A600;
    unsigned int v13 = dword_1EB35A604;
  }
  else
  {
    unsigned int v13 = 0;
    int v14 = 0;
    WebKit::allApplicationStateTrackers(void)::trackers = 0;
    *(void *)&dword_1EB35A600 = 0;
  }
  dword_1EB35A600 = v14 + 1;
  if (v14 + 1 > v13)
  {
    uint64_t v15 = &qword_1EB35A000;
    uint64_t v16 = WebKit::allApplicationStateTrackers(void)::trackers;
    if (WebKit::allApplicationStateTrackers(void)::trackers)
    {
      int v17 = *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
      if (!v17) {
        goto LABEL_25;
      }
      int v18 = 0;
      unsigned int v19 = v17 - 1;
      do
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v16 + 8 * v19);
        if ((unint64_t)(v21 + 1) >= 2 && !*(void *)(v21 + 8))
        {
          *(void *)(v16 + 8 * v19) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v21);
            WTF::fastFree((WTF *)v21, v12);
            uint64_t v15 = &qword_1EB35A000;
          }
          *(void *)(v16 + 8 * v19) = -1;
          ++v18;
        }
        --v19;
      }
      while (v20);
      uint64_t v16 = v15[191];
      if (v18)
      {
        *(_DWORD *)(v16 - 16) += v18;
        uint64_t v22 = v15[191];
        if (v22) {
          int v23 = *(_DWORD *)(v22 - 12);
        }
        else {
          int v23 = 0;
        }
        *(_DWORD *)(v22 - ++*(_DWORD *)(this + 12) = v23 - v18;
        uint64_t v16 = v15[191];
      }
      if (v16)
      {
        unsigned int v24 = *(_DWORD *)(v16 - 4);
        if (v24 >= 9 && 6 * *(_DWORD *)(v16 - 12) < v24)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::allApplicationStateTrackers(void)::trackers);
          uint64_t v16 = WebKit::allApplicationStateTrackers(void)::trackers;
          dword_1EB35A600 = 0;
          if (!WebKit::allApplicationStateTrackers(void)::trackers)
          {
            unsigned int v26 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        dword_1EB35A600 = 0;
LABEL_28:
        unsigned int v26 = *(_DWORD *)(v16 - 12);
        int v27 = 0x7FFFFFFF;
        if (v26 >= 0x7FFFFFFF)
        {
LABEL_30:
          dword_1EB35A604 = 2 * v27;
          goto LABEL_31;
        }
LABEL_29:
        int v27 = v26;
        goto LABEL_30;
      }
    }
    unsigned int v26 = 0;
    dword_1EB35A600 = 0;
    goto LABEL_29;
  }
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  int v28 = *(atomic_uint **)this;
  atomic_fetch_add(*(atomic_uint *volatile *)this, 1u);
  atomic_fetch_add(v28, 1u);
  unint64_t v33 = (WTF *)v28;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&WebKit::allApplicationStateTrackers(void)::trackers, &v33, (uint64_t)v32);
  uint64_t v30 = (unsigned int *)v33;
  unint64_t v33 = 0;
  if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v29);
  }
  if (v28 && atomic_fetch_add(v28, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v28);
    WTF::fastFree((WTF *)v28, v29);
  }
  return this;
}

void sub_198729EC8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
  }
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, a2);
  }
  objc_destroyWeak(v19 + 3);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19 + 1);
  objc_destroyWeak(v19);
  int v23 = *(const void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
  if (v23) {
    CFRelease(v23);
  }
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v14, v24);
  _Unwind_Resume(a1);
}

void WebKit::WebChromeClient::isAnyAnimationAllowedToPlayDidChange(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::isAnyAnimationAllowedToPlayDidChange((IPC::Encoder **)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

IPC::Encoder **WebKit::WebPage::isAnyAnimationAllowedToPlayDidChange(IPC::Encoder **this, char a2)
{
  if ((*(unsigned char *)(*((void *)this[6] + 14) + 711) & 0x40) != 0)
  {
    char v2 = a2;
    return IPC::MessageSender::send<Messages::WebPageProxy::IsAnyAnimationAllowedToPlayDidChange>((uint64_t)(this + 4), &v2);
  }
  return this;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::IsAnyAnimationAllowedToPlayDidChange>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1993;
  *((void *)v6 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::IsAnyAnimationAllowedToPlayDidChange>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::IsAnyAnimationAllowedToPlayDidChange>(a1, a2, v4);
}

void WebKit::WebExtensionControllerConfiguration::~WebExtensionControllerConfiguration(WebKit::WebExtensionControllerConfiguration *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E31A8;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E31A8;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

WTF *WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x8000);
  bzero(v3, 0x8000uLL);
  int v28 = (WTF *)v3;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x8000);
  bzero(v4, 0x8000uLL);
  uint64_t v26 = 0;
  int v27 = (WTF *)v4;
  uint64_t v25 = 0;
  WTF::String::isolatedCopy();
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v5 = &unk_1EE9CB2B8;
  v5[1] = &v26;
  void v5[2] = &v27;
  v5[3] = (char *)&v26 + 4;
  v5[4] = &v28;
  unsigned int v24 = v5;
  WebKit::NetworkCache::traverseRecordsFiles((WTF::FileSystemImpl *)v23, (uint64_t)&v25, (uint64_t)&v24);
  uint64_t v7 = v24;
  unsigned int v24 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  uint64_t v8 = v23[0];
  v23[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (WTF::StringImpl *)WebKit::NetworkCache::Storage::estimateRecordsSize((WebKit::NetworkCache::Storage *)v2, (const WTF::String *)HIDWORD(v26), v26);
  WebKit::NetworkCache::BlobStorage::synchronize((WebKit::NetworkCache::BlobStorage *)(v2 + 336));
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::deleteEmptyRecordsDirectories((WebKit::NetworkCache *)v23, v10);
  uint64_t v12 = v23[0];
  v23[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      uint64_t v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::RunLoop::main(v12);
  uint64_t v13 = a1[1];
  a1[1] = 0;
  uint64_t v14 = v28;
  int v28 = 0;
  uint64_t v15 = v27;
  int v27 = 0;
  v23[0] = (WTF::StringImpl *)v2;
  v23[4] = v9;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v16 = &unk_1EE9CB330;
  v16[1] = v2;
  v16[2] = v13;
  void v16[3] = v14;
  memset(&v23[1], 0, 24);
  v16[4] = v15;
  void v16[5] = v9;
  unsigned int v24 = v16;
  WTF::RunLoop::dispatch();
  int v18 = v24;
  unsigned int v24 = 0;
  if (v18) {
    (*(void (**)(void *))(*v18 + 8))(v18);
  }
  WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1}::~(v23, v17);
  uint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = v27;
  int v27 = 0;
  if (v21) {
    WTF::fastFree(v21, v19);
  }
  uint64_t result = v28;
  int v28 = 0;
  if (result) {
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

void *WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1}::~(void *a1, void *a2)
{
  uint64_t v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }
  return a1;
}

unint64_t WebKit::NetworkCache::Storage::estimateRecordsSize(WebKit::NetworkCache::Storage *this, const WTF::String *a2, unsigned int a3)
{
  int v3 = (int)a2;
  if (a2 >= a3) {
    uint64_t v4 = a2 - a3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = WebKit::NetworkCache::Storage::volumeBlockSize(this, a2);
  return (v5 * v3) + ((unint64_t)WTF::pageSize((WTF *)v5) >> 1) * v4;
}

uint64_t WebKit::NetworkCache::Storage::volumeBlockSize(WebKit::NetworkCache::Storage *this, const WTF::String *a2)
{
  if (*((unsigned char *)this + 60)) {
    return *((unsigned int *)this + 14);
  }
  uint64_t result = WTF::FileSystemImpl::volumeFileBlockSize((WebKit::NetworkCache::Storage *)((char *)this + 8), a2);
  if ((result & 0xFF00000000) != 0) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 4096;
  }
  *((_DWORD *)this + 14) = result;
  *((unsigned char *)this + 60) = 1;
  return result;
}

uint64_t WebKit::NetworkCache::deleteEmptyRecordsDirectories(WebKit::NetworkCache *this, const WTF::String *a2)
{
  int v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9CB2E0;
  v3[1] = this;
  uint64_t v6 = v3;
  WebKit::NetworkCache::traverseDirectory(this, (const WTF::String *)&v6);
  uint64_t v4 = *(uint64_t (**)(void *))(*v3 + 8);

  return v4(v3);
}

uint64_t WebKit::NetworkCache::traverseRecordsFiles(WTF::FileSystemImpl *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9CB240;
  v6[1] = a1;
  void v6[2] = a2;
  v6[3] = a3;
  uint64_t v9 = v6;
  WebKit::NetworkCache::traverseDirectory(a1, (const WTF::String *)&v9);
  uint64_t v7 = *(uint64_t (**)(void *))(*v6 + 8);

  return v7(v6);
}

uint64_t WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0::operator()(WTF::FileSystemImpl *a1)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9CB6A0;
  v2[1] = a1;
  uint64_t v5 = v2;
  WebKit::NetworkCache::traverseDirectory(a1, (const WTF::String *)&v5);
  int v3 = *(uint64_t (**)(void *))(*v2 + 8);

  return v3(v2);
}

uint64_t WebKit::NetworkCache::traverseDirectory(WTF::FileSystemImpl *a1, const WTF::String *a2)
{
  WTF::FileSystemImpl::listDirectory(&v13, a1, a2);
  if (v14)
  {
    uint64_t v4 = v13;
    uint64_t v5 = 8 * v14;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      uint64_t v7 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v12, v6);
      BOOL v9 = (v7 & 0xFF00000000) == 0 || v7 != 1;
      (*(void (**)(void, uint64_t, BOOL))(**(void **)a2 + 16))(*(void *)a2, v4, v9);
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v3);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v3);
}

unint64_t WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0::operator()(void)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1}::operator()(unint64_t result, unint64_t *a2, int a3)
{
  if (a3) {
    return result;
  }
  uint64_t result = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t result = WTF::StringImpl::startsWith();
  if (!result) {
    return result;
  }
  unint64_t v4 = *a2;
  if (!v4 || (uint64_t v5 = *(unsigned int *)(v4 + 4), v5 < 9))
  {
    unint64_t v7 = 0x100000000;
    BOOL v9 = "";
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v4 + 8);
  unint64_t v7 = (v5 - 8);
  unint64_t v8 = v5 - 8;
  if ((*(unsigned char *)(v4 + 16) & 4) == 0)
  {
    if (v8 >= v7)
    {
      BOOL v9 = (const char *)(v6 + 16);
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  if (v8 < v7) {
    goto LABEL_19;
  }
  BOOL v9 = (const char *)(v6 + 8);
  v7 |= 0x100000000uLL;
LABEL_9:
  uint64_t result = WTF::parseInteger<unsigned int>((uint64_t)v9, v7);
  if (HIDWORD(result))
  {
    if (result <= 0x10)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v12, v10);
      uint64_t result = (unint64_t)v12;
      uint64_t v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::BlobStorage::synchronize(WebKit::NetworkCache::BlobStorage *this)
{
  WTF::String::isolatedCopy();
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v10, v2);
  atomic_store(0, (unint64_t *)this + 2);
  int v3 = v10;
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  BOOL v9 = v3;
  unint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9CAC20;
  v4[1] = this;
  v4[2] = &v9;
  unint64_t v8 = v4;
  WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)&v9, (const WTF::String *)&v8);
  (*(void (**)(void *))(*v4 + 8))(v4);
  uint64_t v6 = v9;
  BOOL v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0::operator()(void)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(uint64_t a1, unint64_t *a2, int a3)
{
  return WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0::operator()(void)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1}::operator()(a1 + 8, a2, a3);
}

uint64_t WTF::parseInteger<unsigned int,unsigned char>(uint64_t a1, uint64_t a2)
{
  int v2 = 0;
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  if (!a1 || !a2) {
    return v3 | v4 | v2;
  }
  uint64_t v5 = 0;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(a1 + v5);
    if ((v6 - 9) >= 5 && v6 != 32) {
      break;
    }
    if (a2 == ++v5) {
      goto LABEL_36;
    }
  }
  if (v6 == 43)
  {
    if (a2 - 1 == v5) {
      goto LABEL_36;
    }
    uint64_t v8 = ~v5 + a2;
    unint64_t v7 = (unsigned __int8 *)(a1 + v5 + 1);
    int v6 = *v7;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)(a1 + v5);
    uint64_t v8 = a2 - v5;
  }
  if ((v6 - 48) > 9)
  {
LABEL_36:
    uint64_t v3 = 0;
    int v2 = 0;
    unsigned int v4 = 0;
    return v3 | v4 | v2;
  }
  unsigned int v9 = 0;
  char v10 = 0;
  while (1)
  {
    int v11 = v6 - 48;
    uint64_t v12 = 10 * v9;
    if ((v12 & 0xFFFFFFFF00000000) == 0) {
      v9 *= 10;
    }
    BOOL v13 = __CFADD__(v9, v11);
    unsigned int v14 = v9 + v11;
    int v15 = v13;
    if (!v13) {
      unsigned int v9 = v14;
    }
    if ((v12 & 0xFFFFFFFF00000000) != 0) {
      int v16 = 1;
    }
    else {
      int v16 = v15;
    }
    if (v16) {
      char v10 = 1;
    }
    if (!--v8) {
      break;
    }
    int v17 = *++v7;
    int v6 = v17;
    unsigned int v18 = v17 - 48;
    if ((v17 - 48) > 9 || v18 >= 0xA)
    {
      if (!v10)
      {
        uint64_t v20 = 0;
        while (1)
        {
          int v21 = v7[v20];
          if ((v21 - 9) >= 5 && v21 != 32) {
            break;
          }
          if (v8 == ++v20) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_36;
    }
  }
  if (v10) {
    goto LABEL_36;
  }
LABEL_38:
  unsigned int v4 = v9 & 0xFFFFFF00;
  int v2 = v9;
  uint64_t v3 = 0x100000000;
  return v3 | v4 | v2;
}

uint64_t WTF::parseInteger<unsigned int>(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0) {
    return WTF::parseInteger<unsigned int,unsigned char>(a1, a2);
  }
  else {
    return WTF::parseInteger<unsigned int,char16_t>(a1, a2);
  }
}

void sub_19872AD7C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeDrawingAreaProxy *WebKit::RemoteLayerTreeDrawingAreaProxy::RemoteLayerTreeDrawingAreaProxy(WebKit::RemoteLayerTreeDrawingAreaProxy *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3)
{
  uint64_t v5 = (void *)WebKit::DrawingAreaProxy::DrawingAreaProxy((uint64_t)this, 0, (unsigned int *)a2, (uint64_t)a3);
  *uint64_t v5 = &unk_1EE9D1900;
  void v5[2] = &unk_1EE9D1AA8;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x48);
  unint64_t v7 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v8 = (atomic_uint *)*((void *)this + 1);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)uint64_t v6 = v8;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 49) = 0u;
  *((void *)this + 9) = v6;
  *((unsigned char *)this + 80) = 0;
  *((_DWORD *)this + 22) = 3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  unsigned int v9 = (WebCore::IOSurfacePool *)WebCore::IOSurfacePool::sharedPool((WebCore::IOSurfacePool *)v7);
  WebCore::IOSurfacePool::setPoolSize(v9);
  uint64_t v11 = *((void *)a2 + 34);
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v11 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, v10))WebKit::RemoteLayerTreeDrawingAreaProxy::initializeDebugIndicator(this); {
  return this;
  }
}

void sub_19872AEE8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);
  WebKit::DrawingAreaProxy::~DrawingAreaProxy(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DrawingAreaProxy::DrawingAreaProxy(uint64_t a1, char a2, unsigned int *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EE9B71B0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EEA102E8;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1EE9D5568;
  *(void *)(a1 + 16) = &unk_1EE9D56C8;
  *(void *)(a1 + 24) = IdentifierInternal;
  *(unsigned char *)(a1 + 36) = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a3 + 6, (uint64_t)(a3 + 4));
  unsigned int v9 = (atomic_uint *)*((void *)a3 + 3);
  atomic_fetch_add(v9, 1u);
  *(void *)(a1 + 40) = v9;
  atomic_fetch_add((atomic_uint *volatile)(a4 + 16), 1u);
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = WebKit::WebPageProxy::viewSize((WebKit::WebPageProxy *)a3);
  *(void *)(a1 + 64) = 0;
  return a1;
}

WebKit::DrawingAreaProxy *WebKit::WebPageProxy::setDrawingArea(WebKit::DrawingAreaProxy **a1, WebKit::DrawingAreaProxy **a2)
{
  unsigned int v4 = a1[31];
  a1[31] = 0;
  if (v4) {
    (*(void (**)(WebKit::DrawingAreaProxy *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[29];
  if (v5) {
    WebKit::DrawingAreaProxy::stopReceivingMessages(v5, a1[32]);
  }
  uint64_t result = *a2;
  *a2 = 0;
  unint64_t v7 = a1[29];
  a1[29] = result;
  if (v7)
  {
    (*(void (**)(WebKit::DrawingAreaProxy *))(*(void *)v7 + 8))(v7);
    uint64_t result = a1[29];
  }
  if (result)
  {
    WebKit::DrawingAreaProxy::startReceivingMessages(result, a1[32]);
    uint64_t v8 = (int32x2_t *)a1[29];
    int32x2_t v12 = 0;
    IntSize v13 = (IntSize)WebKit::WebPageProxy::viewSize((WebKit::WebPageProxy *)a1);
    WebKit::DrawingAreaProxy::setSize(v8, &v13, &v12, v9, v10);
    uint64_t result = a1[29];
    if (result)
    {
      if (!*((unsigned char *)result + 36))
      {
        (*(void (**)(IntSize *__return_ptr))(*(void *)result + 352))(&v13);
        IntSize v11 = v13;
        IntSize v13 = 0;
        uint64_t result = a1[31];
        a1[31] = (WebKit::DrawingAreaProxy *)v11;
        if (result)
        {
          (*(void (**)(WebKit::DrawingAreaProxy *))(*(void *)result + 8))(result);
          uint64_t result = (WebKit::DrawingAreaProxy *)v13;
          IntSize v13 = 0;
          if (result) {
            return (WebKit::DrawingAreaProxy *)(*(uint64_t (**)(WebKit::DrawingAreaProxy *))(*(void *)result + 8))(result);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::viewSize(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1600))(v2);
  return v3;
}

uint64_t WebKit::PageClientImpl::viewSize(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained bounds];
  v5.width = v2;
  v5.height = v3;
  WebCore::IntSize::IntSize((WebCore::IntSize *)&v6, &v5);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v6;
}

void sub_19872B2F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::RemoteScrollingCoordinatorProxy *WebKit::RemoteLayerTreeDrawingAreaProxyIOS::createScrollingCoordinatorProxy@<X0>(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this@<X0>, WebKit::RemoteScrollingCoordinatorProxy **a2@<X8>)
{
  unsigned int v4 = (WebKit::RemoteScrollingCoordinatorProxy *)WTF::fastMalloc((WTF *)0xA0);
  uint64_t v5 = *(void *)(*((void *)this + 5) + 8);
  if (v5) {
    uint64_t v6 = (WebKit::WebPageProxy *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = WebKit::RemoteScrollingCoordinatorProxy::RemoteScrollingCoordinatorProxy(v4, v6);
  *(void *)uint64_t result = &unk_1EE9D20C0;
  *((void *)result + 18) = 0;
  *((void *)result + 19) = 0;
  *a2 = result;
  return result;
}

WebKit::RemoteScrollingCoordinatorProxy *WebKit::RemoteScrollingCoordinatorProxy::RemoteScrollingCoordinatorProxy(WebKit::RemoteScrollingCoordinatorProxy *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = &unk_1EE9E3D68;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  unsigned int v4 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v4, 1u);
  *((void *)this + 2) = v4;
  uint64_t v5 = (WebKit::RemoteScrollingTree *)WTF::fastMalloc((WTF *)0x168);
  uint64_t v6 = WebKit::RemoteScrollingTree::RemoteScrollingTree(v5, this);
  *(void *)uint64_t v6 = &unk_1EE9E5458;
  *((void *)this + 3) = v6;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 76) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 116) = 0;
  *((unsigned char *)this + 120) = 0;
  *((unsigned char *)this + 124) = 0;
  *((unsigned char *)this + 128) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + ++*(_DWORD *)(this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((unsigned char *)this + 1++*(_DWORD *)(this + 12) = 0;
  return this;
}

WebKit::RemoteScrollingTree *WebKit::RemoteScrollingTree::RemoteScrollingTree(WebKit::RemoteScrollingTree *this, WebKit::RemoteScrollingCoordinatorProxy *a2)
{
  *(void *)WebCore::ScrollingTree::ScrollingTree(this) = &unk_1EE9E52C8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  unsigned int v4 = (atomic_uint *)*((void *)a2 + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 43) = v4;
  *((unsigned char *)this + 352) = 0;
  return this;
}

unsigned __int8 *WebKit::DrawingAreaProxy::startReceivingMessages(WebKit::DrawingAreaProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(WebKit::DrawingAreaProxy *))(*(void *)this + 40))(this);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    uint64_t v8 = (uint64_t *)((char *)a2 + 160);
    do
    {
      unsigned int v9 = *v6++;
      uint64_t v10 = *((void *)this + 3);
      v12[0] = v9;
      v12[1] = v10;
      uint64_t result = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v8, (unsigned __int8 *)v12, (uint64_t)this, &v11);
      --v7;
    }
    while (v7);
  }
  return result;
}

__int16 *WebKit::RemoteLayerTreeDrawingAreaProxy::messageReceiverNames(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  if ((_MergedGlobals_84 & 1) == 0)
  {
    word_1EB359AE2 = 23047;
    _MergedGlobals_84 = 1;
  }
  return &word_1EB359AE2;
}

uint64_t WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  CGFloat v3 = *(atomic_uchar **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  CGFloat v3 = *(atomic_uchar **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  CGFloat v3 = *(atomic_uchar **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setTransform(int8x16_t *this, const WebCore::TransformationMatrix *a2)
{
  uint64_t v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
  long long v6 = *((_OWORD *)a2 + 3);
  long long v8 = *(_OWORD *)a2;
  long long v7 = *((_OWORD *)a2 + 1);
  void v5[2] = *((_OWORD *)a2 + 2);
  v5[3] = v6;
  *uint64_t v5 = v8;
  v5[1] = v7;
  long long v9 = *((_OWORD *)a2 + 7);
  long long v11 = *((_OWORD *)a2 + 4);
  long long v10 = *((_OWORD *)a2 + 5);
  v5[6] = *((_OWORD *)a2 + 6);
  v5[7] = v9;
  v5[4] = v11;
  v5[5] = v10;
  int32x2_t v12 = (WTF *)this[5].i64[1];
  this[5].i64[1] = (uint64_t)v5;
  if (v12) {
    WTF::fastFree(v12, v4);
  }
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(2uLL));
  this[4] = result;
  return result;
}

void WebKit::WebPageProxy::setInspectable(WebKit::WebPageProxy *this, int a2)
{
  CGFloat v3 = (Inspector::RemoteInspectionTarget *)*((void *)this + 144);
  if (v3 && Inspector::RemoteInspectionTarget::inspectable(v3) != a2)
  {
    Inspector::RemoteInspectionTarget::setInspectable(*((Inspector::RemoteInspectionTarget **)this + 144));
    unsigned int v4 = (CFTypeRef *)*((void *)this + 39);
    CFRetain(v4[1]);
    WebKit::WebsiteDataStore::updateServiceWorkerInspectability((WebKit::WebsiteDataStore *)v4, v5);
    CFTypeRef v6 = v4[1];
    CFRelease(v6);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessProxy &)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D0808;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  unsigned int v4 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }

  return WTF::fastFree(a1, v3);
}

IPC::Encoder **IPC::Connection::send<Messages::GPUProcessConnection::DidInitialize>(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v4 = 57;
  *((void *)v4 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v7 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::GPUProcessConnectionInfo> const&>(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::GPUProcessConnectionInfo> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 40))
    {
      return IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::encode(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken> const&>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 36));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 37));
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    char v8 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v8);
    if (*(unsigned char *)(a2 + 32))
    {
      for (uint64_t i = 0; i != 32; i += 4)
        unint64_t result = IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + i));
    }
    else
    {
      uint64_t v6 = (WebKit::RemoteLayerTreeDrawingArea *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebKit::RemoteLayerTreeDrawingArea::setDeviceScaleFactor(v6, v7);
    }
  }
  else
  {
    char v9 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v9);
  }
  return result;
}

void WebKit::RemoteLayerTreeDrawingArea::setDeviceScaleFactor(WebKit::RemoteLayerTreeDrawingArea *this, float a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 5) + 8);
  if (v3) {
    unsigned int v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    unsigned int v4 = 0;
  }
  CFRetain(v4[1]);
  WebKit::WebPage::setDeviceScaleFactor((WebKit::WebPage *)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

float *WebKit::WebPage::setDeviceScaleFactor(WebKit::WebPage *this, float a2)
{
  unint64_t result = (float *)*((void *)this + 6);
  if (result[91] != a2)
  {
    unint64_t result = (float *)WebCore::Page::setDeviceScaleFactor((WebCore::Page *)result, a2);
    uint64_t v4 = *((void *)this + 56);
    if (*(unsigned char *)(v4 + 24))
    {
      uint64_t v5 = *(void *)(v4 + 16);
      if (v5)
      {
        if (*(void *)(v5 + 8))
        {
          WebCore::Page::layoutIfNeeded();
          uint64_t v6 = (WebKit::FindController *)*((void *)this + 56);
          return (float *)WebKit::FindController::updateFindIndicator(v6, 1, 0);
        }
      }
    }
  }
  return result;
}

void API::ProcessPoolConfiguration::~ProcessPoolConfiguration(API::ProcessPoolConfiguration *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v6);
  char v8 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

{
  uint64_t vars8;

  API::ProcessPoolConfiguration::~ProcessPoolConfiguration(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::RemoteScrollingTreeIOS::createScrollingTreeNode@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebCore::ScrollingTreeScrollingNode **a5@<X8>)
{
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t result = WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::create(a5);
      break;
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t result = WebKit::RemoteScrollingTree::createScrollingTreeNode(a1, a2, a3, a4);
      break;
    case 3:
      uint64_t result = (uint64_t)WebKit::ScrollingTreePluginScrollingNodeIOS::create(a5);
      break;
    case 5:
      uint64_t result = (uint64_t)WebKit::ScrollingTreeOverflowScrollingNodeIOS::create(a5);
      break;
    default:
      uint64_t result = MEMORY[0x1F41719F0](a1, a3, a4);
      break;
  }
  return result;
}

void API::String::~String(API::String *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

void sub_19872C038(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::setFormClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    void *v3 = &unk_1EE9D9B10;
  }
  uint64_t result = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::DrawingArea::create@<X0>(WebKit::WebPage *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x170);
    uint64_t result = WebKit::RemoteLayerTreeDrawingArea::RemoteLayerTreeDrawingArea(v7, a1, a2);
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::RemoteLayerTreeDrawingArea(uint64_t a1, WebKit::WebPage *a2, uint64_t a3)
{
  uint64_t v6 = (void *)WebKit::DrawingArea::DrawingArea(a1, 0, *(void *)(a3 + 72), (uint64_t)a2);
  *uint64_t v6 = &unk_1EE9BA238;
  void v6[2] = &unk_1EE9BA418;
  v6[9] = &unk_1EE9BA440;
  WebKit::RemoteLayerTreeContext::create((WebKit::RemoteLayerTreeContext *)(v6 + 10), a2);
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  WebCore::Timer::Timer<WebKit::RemoteLayerTreeDrawingArea,WebKit::RemoteLayerTreeDrawingArea>((WebCore::TimerBase *)(a1 + 168), a1, (uint64_t)WebKit::RemoteLayerTreeDrawingArea::updateRendering, 0);
  *(unsigned char *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  uint64_t v7 = (WebKit::WebProcess *)WTF::WorkQueue::create();
  uint64_t v8 = WebKit::WebProcess::singleton(v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, *(atomic_uchar *volatile **)(v8 + 40));
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = v16;
  *(unsigned char *)(v9 + 16) = 0;
  *(void *)(a1 + 240) = v9;
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  WebCore::Timer::Timer<WebKit::RemoteLayerTreeDrawingArea,WebKit::RemoteLayerTreeDrawingArea>((WebCore::TimerBase *)(a1 + 288), a1, (uint64_t)WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdateTimerFired, 0);
  *(_DWORD *)(a1 + 344) = 60;
  *(unsigned char *)(a1 + 348) = 1;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  char v10 = *(unsigned char *)(a3 + 172);
  if (v10)
  {
    long long v12 = *(_OWORD *)(a3 + 156);
    char v13 = v10;
    __int16 v14 = *(_WORD *)(a3 + 173);
    char v15 = *(unsigned char *)(a3 + 175);
    WebKit::RemoteLayerTreeDrawingArea::setViewExposedRect(a1, &v12);
  }
  return a1;
}

void sub_19872C330(_Unwind_Exception *a1)
{
  WebCore::Timer::~Timer(v6);
  uint64_t v9 = *(WTF **)(v1 + 256);
  if (v9)
  {
    *(void *)(v1 + 256) = 0;
    *(_DWORD *)(v1 + 264) = 0;
    WTF::fastFree(v9, v8);
  }
  char v10 = *(atomic_uchar ****)(v1 + 240);
  *(void *)(v1 + 240) = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(v10, v8);
  }
  uint64_t v11 = *v5;
  *uint64_t v5 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 56))(v11);
  }
  WebCore::Timer::~Timer(v4);
  WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v12);
  WTF::Ref<WebKit::RemoteLayerTreeContext,WTF::RawPtrTraits<WebKit::RemoteLayerTreeContext>,WTF::DefaultRefDerefTraits<WebKit::RemoteLayerTreeContext>>::~Ref(v2);
  WebKit::DrawingArea::~DrawingArea((WebKit::DrawingArea *)v1);
  _Unwind_Resume(a1);
}

void sub_19872C3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uchar **a12)
{
  if (a12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a12);
  }
  JUMPOUT(0x19872C35CLL);
}

void sub_19872C3E0()
{
}

void sub_19872C3E8()
{
}

void sub_19872C3F0()
{
}

void sub_19872C3F8()
{
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::RemoteLayerTreeDrawingArea,WebKit::RemoteLayerTreeDrawingArea>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(aWTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = &unk_1EE9BA5F0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9BA550;
  v8[1] = a3;
  _OWORD v8[2] = a4;
  void v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}

void sub_19872C484(_Unwind_Exception *a1)
{
  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeContext::create(WebKit::RemoteLayerTreeContext *this, WebKit::WebPage *a2)
{
  uint64_t v4 = (WebKit::RemoteLayerTreeContext *)WTF::fastMalloc((WTF *)0xD8);
  uint64_t result = WebKit::RemoteLayerTreeContext::RemoteLayerTreeContext(v4, a2);
  *(void *)this = v4;
  return result;
}

void sub_19872C4DC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeContext *WebKit::RemoteLayerTreeContext::RemoteLayerTreeContext(WebKit::RemoteLayerTreeContext *this, WebKit::WebPage *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9DF0F8;
  *((void *)this + 3) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  MEMORY[0x19973C070]((char *)this + 96);
  *((void *)this + 25) = 0;
  *((_WORD *)this + 104) = 0;
  std::make_unique[abi:sn180100]<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerTreeContext &>(&v5, this);
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v5;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return this;
}

void sub_19872C5C8(_Unwind_Exception *a1)
{
  uint64_t v6 = *(_DWORD **)(v1 + 200);
  if (v6)
  {
    if (!*v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19872C60CLL);
    }
    --*v6;
  }
  MEMORY[0x19973C080](v3);
  uint64_t v8 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(unsigned int ***)(v1 + 80);
  if (v9) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v9, v7);
  }
  uint64_t v10 = *(void *)(v1 + 72);
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 16), v7);
  }
  uint64_t v11 = *(void *)(v1 + 64);
  if (v11) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v11, v7);
  }
  uint64_t v12 = *(void *)(v1 + 56);
  if (v12) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v12, v7);
  }
  char v13 = *(WTF **)(v1 + 40);
  if (v13)
  {
    *(void *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 48) = 0;
    WTF::fastFree(v13, v7);
  }
  if (*v4) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(*v4, v7);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v7);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:sn180100]<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerTreeContext &>(WebKit::RemoteLayerBackingStoreCollection **a1, WebKit::RemoteLayerTreeContext *a2)
{
  uint64_t v4 = (WebKit::RemoteLayerBackingStoreCollection *)WTF::fastMalloc((WTF *)0x98);
  uint64_t result = WebKit::RemoteLayerBackingStoreCollection::RemoteLayerBackingStoreCollection(v4, a2);
  *a1 = v4;
  return result;
}

void sub_19872C6F8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStoreCollection *WebKit::RemoteLayerBackingStoreCollection::RemoteLayerBackingStoreCollection(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerTreeContext *a2)
{
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9BFD58;
  *((void *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  WebCore::Timer::Timer<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerBackingStoreCollection>((WebKit::RemoteLayerBackingStoreCollection *)((char *)this + 88), (uint64_t)this);
  *((unsigned char *)this + 144) = 0;
  return this;
}

void sub_19872C788(_Unwind_Exception *a1, void *a2)
{
  uint64_t v6 = (unsigned int **)v3[9];
  if (v6) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = (unsigned int **)v3[7];
  if (v7) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, a2);
  }
  uint64_t v8 = (unsigned int **)v3[5];
  if (v8) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, a2);
  }
  if (*v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerBackingStoreCollection>(WebCore::TimerBase *a1, uint64_t a2)
{
  *(void *)WebCore::TimerBase::TimerBase(aWTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = &unk_1EE9BA5F0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9BFE60;
  v4[1] = WebKit::RemoteLayerBackingStoreCollection::volatilityTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((void *)a1 + 6) = v4;
  return a1;
}

void sub_19872C864(_Unwind_Exception *a1)
{
  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DrawingArea::DrawingArea(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EE9F7D20;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EE9F7EF8;
  *(unsigned char *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  uint64_t v6 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
  uint64_t v7 = *(atomic_uint **)(a4 + 24);
  atomic_fetch_add(v7, 1u);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 63) = 0;
  uint64_t v8 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v6);
  WebKit::AuxiliaryProcess::addMessageReceiver(v8, 6u, *(void *)(a1 + 32), a1);
  return a1;
}

uint64_t IPC::handleMessage<Messages::NetworkConnectionToWebProcess::SetCORSDisablingPatterns,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v5, a1);
  if (v7)
  {
    uint64_t result = WebKit::NetworkConnectionToWebProcess::setCORSDisablingPatterns(a2, v5, (uint64_t)v6);
    if (v7) {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::setCORSDisablingPatterns(uint64_t a1, void *a2, uint64_t a3)
{
  return WebKit::NetworkProcess::setCORSDisablingPatterns(*(void *)(a1 + 80), a1, a2, a3);
}

uint64_t WebKit::NetworkProcess::setCORSDisablingPatterns(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v11 = a3;
  v8[0] = a2;
  WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v9, a4, (uint64_t)v8);
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v9, v10);
  if (v10) {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v8, (uint64_t *)(a1 + 384), (uint64_t *)&v11, &v9);
  }
  else {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 384), a3);
  }
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(v2 - 8);
    unint64_t v5 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t result = (uint64_t *)(v2 + 24 * v8);
    uint64_t v9 = *result;
    if ((void *)*result != a2)
    {
      int v10 = 1;
      while (v9)
      {
        unsigned int v8 = (v8 + v10) & v4;
        uint64_t result = (uint64_t *)(v2 + 24 * v8);
        uint64_t v9 = *result;
        ++v10;
        if ((void *)*result == a2) {
          goto LABEL_8;
        }
      }
      uint64_t result = (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_8:
    if ((uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4)) != result)
    {
      float *result = -1;
      uint64_t result = (uint64_t *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 1), a2);
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v11 = *v3;
      int v12 = *v3 ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - ++*(_DWORD *)(this + 12) = v12;
      uint64_t v13 = *v3;
      if (*v3)
      {
        unsigned int v14 = 6 * *(_DWORD *)(v13 - 12);
        unsigned int v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
        {
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v3, v15 >> 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::CompactMapper<WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>::compactMap(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = 8 * a3;
    do
    {
      WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()<WTF::String>((uint64_t)&v18, a4);
      if (v21)
      {
        uint64_t v9 = v18;
        long long v10 = v19;
        uint64_t v18 = 0;
        long long v19 = 0uLL;
        long long v16 = v10;
        __int16 v17 = v20;
        uint64_t v11 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
        uint64_t v15 = 0;
        *(void *)uint64_t v11 = v9;
        uint64_t v12 = v16;
        *(void *)&long long v16 = 0;
        *(void *)(v11 + 8) = v12;
        uint64_t v13 = *((void *)&v16 + 1);
        *((void *)&v16 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
        *(void *)(v11 + 16) = v13;
        *(_WORD *)(v11 + 24) = v17;
        ++*(_DWORD *)(a1 + 12);
        WebCore::UserContentURLPattern::~UserContentURLPattern((WebCore::UserContentURLPattern *)&v15, v8);
      }
      std::__optional_destruct_base<WebCore::UserContentURLPattern,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v8);
      a2 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, *(unsigned int *)(a1 + 12));
}

uint64_t WTF::CompactMapper<WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>::compactMap(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WTF::String const>((uint64_t)&v17);
      if (v20)
      {
        long long v8 = v17;
        long long v17 = 0uLL;
        long long v14 = v8;
        uint64_t v9 = v18;
        uint64_t v18 = 0;
        uint64_t v15 = v9;
        __int16 v16 = v19;
        uint64_t v10 = *(unsigned int *)(a1 + 12);
        if (v10 == *(_DWORD *)(a1 + 8))
        {
          WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern>(a1, (unint64_t)&v14);
        }
        else
        {
          uint64_t v11 = *(void *)a1 + 32 * v10;
          *(void *)&long long v14 = 0;
          *(void *)uint64_t v11 = v8;
          uint64_t v12 = *((void *)&v14 + 1);
          *((void *)&v14 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
          *(void *)(v11 + 8) = v12;
          uint64_t v13 = v15;
          uint64_t v15 = 0;
          *(void *)(v11 + 16) = v13;
          *(_WORD *)(v11 + 24) = v16;
          ++*(_DWORD *)(a1 + 12);
        }
        WebCore::UserContentURLPattern::~UserContentURLPattern((WebCore::UserContentURLPattern *)&v14, v7);
      }
      std::__optional_destruct_base<WebCore::UserContentURLPattern,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v7);
      a2 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, *(unsigned int *)(a1 + 12));
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct((WTF::StringImpl *)(*(void *)result + 32 * a2), (WTF::StringImpl *)(*(void *)result + 32 * v4));
      *(_DWORD *)(v3 + ++*(_DWORD *)(this + 12) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(v5, (WTF::StringImpl *)((char *)v5 + 32 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)result;
  float *result = 0;
  result[1] = 0;
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    if (v6 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(v5 + 8) = v6;
    *(void *)uint64_t v5 = v7;
    unsigned int v8 = *(_DWORD *)(a2 + 12);
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)a2;

  return (void *)WTF::CompactMapper<WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>::compactMap(v5, v9, v8, a3);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t)a1, a2, (uint64_t)v6);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v9);
  if (v11)
  {
    if (*(unsigned char *)(a3 + 8))
    {
      uint64_t v7 = v9;
      *(void *)a1 = *(void *)a3;
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = v10;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      *(void *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 24) = 1;
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void *WebKit::WebPreferences::setTextExtractionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setTelephoneNumberParsingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setShouldSuppressTextInputFromEditingDuringProvisionalNavigation(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setShouldAllowUserInstalledFonts(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setSafeBrowsingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setNeedsSiteSpecificQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaSourceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaDevicesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setDiagnosticLoggingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setApplePayCapabilityDisclosureAllowed(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setJavaScriptEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setShouldPrintBackgrounds(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setJavaScriptCanOpenWindowsAutomatically(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setFullScreenEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void WebKit::WebChromeClient::wheelEventHandlersChanged(WebKit::WebChromeClient *this, int a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  if (*(unsigned __int8 *)(v4 + 853) != a2)
  {
    *(unsigned char *)(v4 + 853) = a2;
    WebKit::WebPage::recomputeShortCircuitHorizontalWheelEventsState((unsigned int *)v4);
  }
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void sub_19872E0B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *API::PageConfiguration::Data::createWebPreferences@<X0>(WebKit::WebPreferences **a1@<X8>)
{
  uint64_t v9 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v3 = (WebKit::WebPreferences *)API::Object::newObject(0x70uLL, 92);
  *a1 = WebKit::WebPreferences::WebPreferences(v3, (const WTF::String *)&v9, (const WTF::String *)&v8, (const WTF::String *)&v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::WebPreferences *WebKit::WebPreferences::WebPreferences(WebKit::WebPreferences *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DC6B0;
  uint64_t v8 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v8 += 2;
  }
  *((void *)this + 2) = v8;
  uint64_t v9 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v9 += 2;
  }
  *((void *)this + 3) = v9;
  uint64_t v10 = *(_DWORD **)a4;
  if (*(void *)a4) {
    *v10 += 2;
  }
  *((void *)this + 4) = v10;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(void *)((char *)this + 10WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  WebKit::WebPreferences::platformInitializeStore(this);
  return this;
}

void WebKit::WebChromeClient::invalidateContentsAndRootView(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v5 = *(void *)(*(void *)(v4 + 48) + 160);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v5 + 144) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = (unsigned int *)(v5 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
    uint64_t v8 = *(void *)(v5 + 296);
    if (v8)
    {
      int v9 = *(_DWORD *)(v8 + 28);
      *(_DWORD *)(v8 + 28) = v9 + 2;
      if (*(unsigned char *)(v8 + 3436))
      {
        if (v9)
        {
          *(_DWORD *)(v8 + 28) = v9;
        }
        else if ((*(_WORD *)(v8 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
        goto LABEL_14;
      }
      if (v9)
      {
        *(_DWORD *)(v8 + 28) = v9;
      }
      else if ((*(_WORD *)(v8 + 34) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
    }
    (*(void (**)(void, const WebCore::IntRect *))(**(void **)(v4 + 72) + 48))(*(void *)(v4 + 72), a2);
LABEL_14:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  if (v3)
  {
    uint64_t v10 = *(const void **)(v3 - 8);
    CFRelease(v10);
  }
}

uint64_t WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  LOBYTE(v6[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    v6[0] = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    v6[1] = v5;
    char v7 = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(v2, (uint64_t)v6);
  if (v7) {
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *a1;
  *a1 = 0;
  LOBYTE(v5[0]) = 0;
  char v6 = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    v5[0] = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v5[1] = v4;
    char v6 = 1;
  }
  WTF::Function<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(&v7, (uint64_t)v5);
  if (v6) {
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v2);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Function<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  LOBYTE(v6[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    v6[0] = *(void *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v6[1] = v5;
    char v7 = 1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v6);
  if (v7) {
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
  }
  return result;
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProvider::stopUpdatingDeviceMotion(uint64_t a1, void *a2)
{
  uint64_t v4 = (unsigned int *)(a1 + 64);
  uint64_t result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 64));
  if ((result & 1) == 0)
  {
    WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(v4, a2);
    uint64_t result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v4);
    if (result)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          uint64_t v9 = *(void *)(v7 + 16);
          uint64_t v8 = v7 + 16;
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
          char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)char v11 = 1593;
          *((void *)v11 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v10;
          *((void *)v11 + 66) = (char *)v11 + 16;
          *((void *)v11 + 67) = 512;
          *((void *)v11 + 68) = 0;
          *((void *)v11 + 70) = 0;
          *((void *)v11 + 69) = 0;
          IPC::Encoder::encodeHeader(v11);
          uint64_t v15 = v11;
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v15, 0);
          uint64_t result = v15;
          uint64_t v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v12);
            return (IPC::Encoder *)WTF::fastFree(v13, v14);
          }
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProvider::stopUpdatingDeviceOrientation(uint64_t a1, void *a2)
{
  uint64_t v4 = (unsigned int *)(a1 + 48);
  uint64_t result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 48));
  if ((result & 1) == 0)
  {
    WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(v4, a2);
    uint64_t result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v4);
    if (result)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          uint64_t v9 = *(void *)(v7 + 16);
          uint64_t v8 = v7 + 16;
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
          char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)char v11 = 1594;
          *((void *)v11 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v10;
          *((void *)v11 + 66) = (char *)v11 + 16;
          *((void *)v11 + 67) = 512;
          *((void *)v11 + 68) = 0;
          *((void *)v11 + 70) = 0;
          *((void *)v11 + 69) = 0;
          IPC::Encoder::encodeHeader(v11);
          uint64_t v15 = v11;
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v15, 0);
          uint64_t result = v15;
          uint64_t v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v12);
            return (IPC::Encoder *)WTF::fastFree(v13, v14);
          }
        }
      }
    }
  }
  return result;
}

BOOL WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(void **a1)
{
  if (!*a1 || !*((_DWORD *)*a1 - 3)) {
    return 1;
  }
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v11, a1);
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *((unsigned int *)v2 - 1);
    uint64_t v4 = &v2[v3];
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v6 = a1;
  uint64_t v7 = v4;
  uint64_t v8 = v4;
  uint64_t v9 = v4;
  uint64_t v10 = &v2[v3];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v6);
  return v11[1] == (void)v7;
}

void sub_19872E994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::IconLoadingDelegate::createIconLoadingClient@<X0>(WebKit::IconLoadingDelegate *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  void *result = &unk_1EE9CE0F8;
  result[1] = this;
  ++*(_DWORD *)this;
  *a2 = result;
  return result;
}

uint64_t WebKit::WebPageProxy::setIconLoadingClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t result = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = v3;
    if (!result) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v5 = &unk_1EE9D9AE8;
  uint64_t result = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v5;
  if (result) {
LABEL_3:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
LABEL_4:
  if (!*(unsigned char *)(a1 + 801))
  {
    if (*(unsigned char *)(a1 + 800))
    {
      BOOL v6 = v3 != 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseIconLoadingClient>(*(void *)(a1 + 256), (char *)&v6, *(void *)(*(void *)(a1 + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseIconLoadingClient>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2480;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebPageProxy::windowScreenDidChange(WebKit::WebPageProxy *this, uint64_t a2)
{
  int v2 = a2;
  *((_DWORD *)this + 206) = a2;
  *((unsigned char *)this + 828) = 1;
  uint64_t result = *((void *)this + 29);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 72))(result, a2);
  }
  if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
  {
    LOBYTE(v10) = 0;
    char v11 = 0;
    uint64_t v5 = *((void *)this + 29);
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
      int v10 = v6;
      char v11 = BYTE4(v6);
    }
    uint64_t v7 = (uint64_t *)(*((void *)this + 4) + 1928);
    LODWORD(v8) = v2;
    uint64_t v9 = &v10;
    WebKit::AuxiliaryProcessProxy::send<Messages::EventDispatcher::PageScreenDidChange>(*((void *)this + 32), (uint64_t)&v7, *v7, 0);
    LODWORD(v7) = v2;
    uint64_t v8 = &v10;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WindowScreenDidChange>(*((void *)this + 32), (int *)&v7, *(void *)(*((void *)this + 4) + 1928), 0);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayNominalFramesPerSecond(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  return [(WKDisplayLinkHandler *)WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this) nominalFramesPerSecond] | 0x100000000;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WindowScreenDidChange>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2554;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,std::optional<unsigned int> const&>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::EventDispatcher::PageScreenDidChange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 34;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned int,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned int,std::optional<unsigned int> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned int,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned int,std::optional<unsigned int> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t v7 = *(void *)(a2 + 16);
    return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, v7);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB330;
  uint64_t v3 = (WTF *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    WTF::fastFree(v3, a2);
  }
  int v4 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WebKit::WebPreferences::setStorageBlockingPolicy(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CD0E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::WebStorageNamespaceProvider *WebKit::WebStorageNamespaceProvider::getOrCreate@<X0>(WebKit::WebStorageNamespaceProvider **a1@<X8>)
{
  {
    if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
    {
      uint64_t result = *(WebKit::WebStorageNamespaceProvider **)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider
                                                       + 8);
      if (result)
      {
        ++*((_DWORD *)result + 2);
        goto LABEL_5;
      }
    }
  }
  else
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = 0;
  }
  uint64_t v4 = (WebKit::WebStorageNamespaceProvider *)WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(v4);
LABEL_5:
  *a1 = result;
  return result;
}

WebKit::WebStorageNamespaceProvider *WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(WebKit::WebStorageNamespaceProvider *this)
{
  uint64_t v2 = WebCore::StorageNamespaceProvider::StorageNamespaceProvider(this);
  *(void *)uint64_t v2 = &unk_1EE9F8EC0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 40) = 0;
  uint64_t v3 = (atomic_uint **)(v2 + 40);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 40), (uint64_t)this);
  uint64_t v5 = *v3;
  if (*v3) {
    atomic_fetch_add(v5, 1u);
  }
  {
    unint64_t v6 = (unsigned int *)WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider;
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = (uint64_t)v5;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  else
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = (uint64_t)v5;
  }
  return this;
}

unsigned char *IPC::handleMessage<Messages::GPUConnectionToWebProcess::CreateRenderingBackend,WebKit::GPUConnectionToWebProcess,WebKit::GPUConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>>(&v4, a1);
  if (v5[24]) {
    WebKit::GPUConnectionToWebProcess::createRenderingBackend(a2, v4, (WTF::MachSendRight *)v5);
  }
  return std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>,false>::~__optional_destruct_base[abi:sn180100](&v4);
}

unsigned char *std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>,false>::~__optional_destruct_base[abi:sn180100](unsigned char *a1)
{
  if (a1[32])
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
  }
  return a1;
}

unsigned int *WebKit::GPUConnectionToWebProcess::createRenderingBackend(uint64_t a1, uint64_t a2, WTF::MachSendRight *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  IPC::StreamServerConnection::tryCreate(a3, (uint64_t *)&v8);
  if (v8)
  {
    *(void *)&long long buf = a1;
    *((void *)&buf + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = &v9;
    uint64_t v11 = &v8;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::ensure<WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0>((uint64_t)v12, (uint64_t *)(a1 + 256), &v9, (uint64_t)&buf);
    if (!v13)
    {
      IPC::StreamServerConnection::invalidate(v8);
      uint64_t v5 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = "void WebKit::GPUConnectionToWebProcess::createRenderingBackend(RenderingBackendI"
                                        "dentifier, IPC::StreamServerConnection::Handle &&)";
        _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 686: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&buf, (uint64_t **)(a1 + 56));
      *(unsigned char *)(buf + 98) = 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&buf);
    }
    uint64_t result = (unsigned int *)v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    unint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)&v12[4] = "void WebKit::GPUConnectionToWebProcess::createRenderingBackend(RenderingBackendIdentifier, IP"
                           "C::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 679: Invalid message dispatched %{public}s", v12, 0xCu);
    }
    uint64_t v7 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v12, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)v12 + 98) = 1;
    return (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v7);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::ensure<WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v11 = result & v9;
  uint64_t v12 = (void *)(v8 + 16 * (result & v9));
  uint64_t v13 = *v12;
  uint64_t v14 = *a3;
  if (*v12)
  {
    int v23 = 0;
    int v24 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v25 = *a2;
        if (*a2) {
          uint64_t v26 = *(unsigned int *)(v25 - 4);
        }
        else {
          uint64_t v26 = 0;
        }
        char v22 = 0;
        uint64_t v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1) {
        int v23 = v12;
      }
      unsigned int v11 = (v11 + v24) & v9;
      uint64_t v12 = (void *)(v8 + 16 * v11);
      uint64_t v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      void *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v14 = *a3;
      uint64_t v12 = v23;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0>(v12, v14, a4);
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - ++*(_DWORD *)(this + 12) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, (uint64_t)v12);
    uint64_t v12 = (void *)result;
    uint64_t v17 = *a2;
    if (*a2) {
      unint64_t v20 = *(unsigned int *)(v17 - 4);
    }
    else {
      unint64_t v20 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v21 = v17 + 16 * v20;
  char v22 = 1;
LABEL_12:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v22;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    do
    {
      if (*(void *)v16 != -1)
      {
        if (*(void *)v16)
        {
          uint64_t v17 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, (void *)v16);
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(v16 + 8));
          if (v16 == a3) {
            uint64_t v13 = v17;
          }
        }
        else
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(v16 + 8));
        }
      }
      v16 += 16;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

WebKit::RemoteRenderingBackend **WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  uint64_t v3 = (WebKit::RemoteRenderingBackend **)(a1 + 1);
  WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0::operator()(&v5, a3);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::operator=(v3, &v5);
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue(&v5);
}

unsigned int *WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = *(WebKit::GPUConnectionToWebProcess **)a2;
  uint64_t v4 = **(void **)(a2 + 8);
  unsigned int v5 = *(uint64_t **)(a2 + 16);
  unsigned int v7 = (unsigned int *)*v5;
  *unsigned int v5 = 0;
  WebKit::RemoteRenderingBackend::create(v3, v4, (uint64_t *)&v7, &v8);
  uint64_t result = v7;
  *a1 = v8;
  unsigned int v7 = 0;
  int v8 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WebKit::RemoteRenderingBackend::create@<X0>(WebKit::GPUConnectionToWebProcess *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, WebKit::RemoteRenderingBackend **a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x90);
  uint64_t v9 = (WebKit::RemoteRenderingBackend *)WebKit::RemoteRenderingBackend::RemoteRenderingBackend(v8, a1, a2, a3);
  *a4 = v9;

  return WebKit::RemoteRenderingBackend::startListeningForIPC(v9);
}

uint64_t WebKit::RemoteRenderingBackend::RemoteRenderingBackend(uint64_t a1, WebKit::GPUConnectionToWebProcess *a2, uint64_t a3, uint64_t *a4)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE9BF230;
  *(void *)(a1 + 8) = &unk_1EE9BF288;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x70);
  *(void *)(a1 + 32) = IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue(v8, (uint64_t)"RemoteRenderingBackend work queue", 34);
  uint64_t v9 = *a4;
  *a4 = 0;
  *(void *)(a1 + 40) = v9;
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref((void *)(a1 + 48), (uint64_t)a2);
  WebKit::GPUConnectionToWebProcess::sharedResourceCache(a2, (WebKit::RemoteSharedResourceCache **)(a1 + 56));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = a3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v10 = (WebKit::ShapeDetection::ObjectHeap *)WTF::fastMalloc((WTF *)0x28);
  WebKit::ShapeDetection::ObjectHeap::ObjectHeap(v10);
  *(void *)(a1 + 136) = v11;
  return a1;
}

WebKit::RemoteSharedResourceCache *WebKit::GPUConnectionToWebProcess::sharedResourceCache@<X0>(WebKit::GPUConnectionToWebProcess *this@<X0>, WebKit::RemoteSharedResourceCache **a2@<X8>)
{
  uint64_t result = (WebKit::RemoteSharedResourceCache *)*((void *)this + 14);
  if (!result)
  {
    unsigned int v5 = (WebKit::RemoteSharedResourceCache *)WTF::fastMalloc((WTF *)0x50);
    uint64_t result = WebKit::RemoteSharedResourceCache::RemoteSharedResourceCache(v5, this);
    uint64_t v6 = *((void *)this + 14);
    *((void *)this + 14) = result;
    if (v6)
    {
      WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 16));
      uint64_t result = (WebKit::RemoteSharedResourceCache *)*((void *)this + 14);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
  *a2 = result;
  return result;
}

WebKit::RemoteSharedResourceCache *WebKit::RemoteSharedResourceCache::RemoteSharedResourceCache(WebKit::RemoteSharedResourceCache *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(void *)this = &unk_1EE9BED20;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_1EE9BEDD0;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 5) = 0;
  uint64_t v3 = (WebCore::IOSurfacePool *)WTF::MachSendRight::MachSendRight((WebKit::RemoteSharedResourceCache *)((char *)this + 48), (WebKit::GPUConnectionToWebProcess *)((char *)a2 + 96));
  WebCore::IOSurfacePool::create(v3);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  return this;
}

void *WebKit::RemoteRenderingBackend::startListeningForIPC(WebKit::RemoteRenderingBackend *this)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9BF470;
  v2[1] = this;
  uint64_t v4 = v2;
  IPC::StreamConnectionWorkQueue::dispatch(*((void *)this + 4), (uint64_t *)&v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

double WebKit::ShapeDetection::ObjectHeap::ObjectHeap(WebKit::ShapeDetection::ObjectHeap *this)
{
  *(_DWORD *)this = 1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>>(unsigned char *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[32])
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
}

WebKit::RemoteRenderingBackend **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::operator=(WebKit::RemoteRenderingBackend **a1, WebKit::RemoteRenderingBackend **a2)
{
  if (a1 != a2)
  {
    if (*a1) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>(a1);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    unsigned int v5 = *a1;
    *a1 = v4;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5 + 4);
      (*(void (**)(void))(*((void *)v5 + 1) + 8))();
    }
  }
  return a1;
}

WebKit::RemoteRenderingBackend **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteRenderingBackend **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>(a1);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v3 + 4);
      (*(void (**)(void))(*((void *)v3 + 1) + 8))();
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)a1);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)uint64_t v6 = &unk_1EEA103F0;
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 36) = 0;
  semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)(v6 + 36), 0, 0);
  *(_WORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

uint64_t IPC::StreamConnectionWorkQueue::dispatch(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  unsigned int v5 = (atomic_uchar *)(result + 41);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 41), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    double result = MEMORY[0x19972E8D0](result + 41);
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v3 + 40));
  if (v6) {
    goto LABEL_7;
  }
  double result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(v3 + 56, a2);
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v3 + 40));
  if ((v7 & 1) == 0 && !*(void *)(v3 + 48))
  {
    double result = IPC::StreamConnectionWorkQueue::startProcessingThread((IPC::StreamConnectionWorkQueue *)v3);
LABEL_7:
    int v8 = 0;
    goto LABEL_9;
  }
  int v8 = 1;
LABEL_9:
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    double result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (v8)
  {
    JUMPOUT(0x1997420B0);
  }
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)(v5 + 8 * v6) = v7;
  if (v6 == *(unsigned int *)(a1 + 24) - 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  *(void *)(a1 + 8) = v8;
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)a1)
  {
    ++v1;
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (!v1)
    {
      if (v3) {
        return a1;
      }
      return WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(a1);
    }
    uint64_t v2 = v3 - 1;
  }
  if (v1 == v2) {
    return WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(a1);
  }
  return a1;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x198730260);
  }
  char v4 = *(WTF **)(a1 + 16);
  int v5 = v2 + 1;
  uint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
  *(_DWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 16) = v6;
  unint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 > v7)
  {
    WTF::VectorMover<false,WTF::Function<void ()(void)>>::move((uint64_t)v4, (uint64_t *)v4 + v7, v6);
    uint64_t v10 = *(void *)a1 - v1 + *(unsigned int *)(a1 + 24);
    uint64_t result = WTF::VectorMover<false,WTF::Function<void ()(void)>>::move((uint64_t)v4 + 8 * *(void *)a1, (uint64_t *)v4 + v1, (uint64_t *)(*(void *)(a1 + 16) + 8 * v10));
    *(void *)a1 = v10;
  }
  else
  {
    uint64_t result = WTF::VectorMover<false,WTF::Function<void ()(void)>>::move((uint64_t)v4 + 8 * *(void *)a1, (uint64_t *)v4 + v7, &v6[*(void *)a1]);
  }
  if (v4)
  {
    if (*(WTF **)(a1 + 16) == v4)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
    }
    return WTF::fastFree(v4, v9);
  }
  return result;
}

uint64_t WTF::VectorMover<false,WTF::Function<void ()(void)>>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    int v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      *int v5 = 0;
      *a3 = v6;
      uint64_t result = *v5;
      *int v5 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t IPC::StreamConnectionWorkQueue::startProcessingThread(IPC::StreamConnectionWorkQueue *this)
{
  unint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EEA104B8;
  v2[1] = this;
  uint64_t v5 = (uint64_t)v2;
  WTF::Thread::create();
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = v6;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

unsigned int *IPC::StreamServerConnection::tryCreate@<X0>(WTF::MachSendRight *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (unsigned int *)WebCore::SharedMemory::map();
  if (v14)
  {
    uint64_t v10 = *((void *)v14 + 1) - 256;
    uint64_t v11 = (unsigned int *)v14;
    uint64_t v12 = 0;
    char v13 = 1;
    int v8 = WTF::MachSendRight::leakSendRight(a1);
    object = 0;
    IPC::Connection::createClientConnection((uint64_t)&v8, (mach_port_context_t *)&v14);
    if (object) {
      os_release(object);
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)0xA8);
    uint64_t v6 = v14;
    uint64_t v14 = 0;
    unint64_t v7 = v6;
    *a2 = IPC::StreamServerConnection::StreamServerConnection(v5, (uint64_t *)&v7, &v10);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v7);
    uint64_t result = (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
    if (v13)
    {
      uint64_t result = v11;
      if (v11) {
        return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t IPC::StreamServerConnection::StreamServerConnection(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1EEA10420;
  *(void *)(a1 + 16) = &unk_1EEA10468;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a3[1] = 0;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = a3[2];
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)(a1 + 164), 0, 0);
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder>(unsigned char *a1, uint64_t *a2)
{
  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (IPC::Decoder *)a2, (uint64_t)v5);
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(v5, a2);
  if (!v5[24])
  {
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a3 + 8))
  {
    std::optional<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>>::optional[abi:sn180100]<std::in_place_t,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle,void>((uint64_t)a1, *(void *)a3, (uint64_t)v5);
LABEL_4:
    std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](v5);
    return;
  }
  __break(1u);
}

uint64_t std::optional<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle>>::optional[abi:sn180100]<std::in_place_t,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(void *)(a1 + 24) = *(void *)(a3 + 16);
  *(unsigned char *)(a1 + 32) = 1;
  return a1;
}

unsigned char *std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](unsigned char *a1)
{
  if (a1[24])
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)a1);
  }
  return a1;
}

void IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<IPC::StreamServerConnectionHandle,void>::decode(a2, a1);
  if (!a1[24])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void ___ZN6WebKit15ProcessLauncher22finishLaunchingProcessEN3WTF12ASCIILiteralE_block_invoke(uint64_t a1, id a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 104) && object_getClass(a2) != (Class)MEMORY[0x1E4F145A8])
  {
    WTF::deallocateSendRightSafely((WTF *)*(unsigned int *)(a1 + 40));
    uint64_t v4 = *(_xpc_connection_s **)(v2 + 24);
    if (!v4)
    {
      v13[0] = 0;
      v13[1] = 0;
      WebKit::ProcessLauncher::didFinishLaunchingProcess(v2, 0, (uint64_t)v13);
      return;
    }
    pid_t pid = xpc_connection_get_pid(v4);
    int v6 = *(_DWORD *)(a1 + 40);
    unint64_t v7 = *(void **)(v2 + 24);
    if (v7)
    {
      id v8 = v7;
      int v11 = v6;
      uint64_t v12 = v7;
      WebKit::ProcessLauncher::didFinishLaunchingProcess(v2, pid, (uint64_t)&v11);
    }
    else
    {
      int v11 = v6;
      uint64_t v12 = 0;
      WebKit::ProcessLauncher::didFinishLaunchingProcess(v2, pid, (uint64_t)&v11);
    }
    int v9 = *(void **)(v2 + 24);
    if (v9) {

    }
    *(void *)(v2 + 24) = 0;
  }
  uint64_t v10 = *(atomic_uchar **)(v2 + 8);

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(v10, a2);
}

void WebKit::ProcessLauncher::didFinishLaunchingProcess(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 108) = a2;
  *(unsigned char *)(a1 + 104) = 0;
  kdebug_trace();
  uint64_t v5 = *(void *)(a1 + 16);
  mach_port_name_t v6 = *(_DWORD *)a3;
  if (v5)
  {
    mach_port_name_t v9 = *(_DWORD *)a3;
    unint64_t v7 = *(void **)(a3 + 8);
    object = v7;
    if (v7) {
      os_retain(v7);
    }
    (*(void (**)(uint64_t, uint64_t, mach_port_name_t *))(*(void *)v5 + 16))(v5, a1, &v9);
    if (object) {
      os_release(object);
    }
  }
  else if (v6)
  {
    ipc_space_t v8 = *MEMORY[0x1E4F14960];
    mach_port_mod_refs(v8, v6, 1u, -1);
  }
}

void non-virtual thunk to'WebKit::NetworkProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unsigned int *non-virtual thunk to'WebKit::WebProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebProcessProxy::didFinishLaunching(a1 - 24, a2, a3);
}

void non-virtual thunk to'WebKit::GPUProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void WebKit::NetworkProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  mach_port_name_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v11 = a1;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::didFinishLaunching", buf, 0xCu);
  }
  int v8 = *(_DWORD *)a3;
  unint64_t v7 = *(void **)(a3 + 8);
  object = v7;
  if (v7) {
    os_retain(v7);
  }
  WebKit::AuxiliaryProcessProxy::didFinishLaunching(a1, a2, &v8);
  if (object) {
    os_release(object);
  }
  if ((*(_DWORD *)a3 - 1) >= 0xFFFFFFFE) {
    WebKit::NetworkProcessProxy::networkProcessDidTerminate(a1, (void *)5);
  }
}

unsigned int *WebKit::WebProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  mach_port_name_t v6 = qword_1EB358960;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didFinishLaunching:", buf, 0x12u);
  }
  if ((WebKit::isMainThreadOrCheckDisabled((WebKit *)v7) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_101;
  }
  mach_port_name_t v9 = (unsigned int *)(a1 + 16);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  int v60 = *(_DWORD *)a3;
  uint64_t v10 = *(void **)(a3 + 8);
  object = v10;
  if (v10) {
    os_retain(v10);
  }
  WebKit::AuxiliaryProcessProxy::didFinishLaunching(a1, a2, &v60);
  if (object) {
    os_release(object);
  }
  if ((*(_DWORD *)a3 - 1) < 0xFFFFFFFE)
  {
    uint64_t v11 = *(WebKit::WebsiteDataStore **)(a1 + 752);
    if (v11)
    {
      uint64_t v12 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess(v11);
      char v13 = (unsigned int *)(v12 + 4);
      atomic_fetch_add(v12 + 4, 1u);
      WebKit::NetworkProcessProxy::sendXPCEndpointToProcess((WebKit::NetworkProcessProxy *)v12, (WebKit::AuxiliaryProcessProxy *)a1);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
    }
    uint64_t v14 = *(void *)(a1 + 512);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15) {
        uint64_t v16 = v15 - 16;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v19 = (WTF::WallTime *)CFRetain(*(CFTypeRef *)(v16 + 8));
    if (!*(unsigned char *)(v16 + 336))
    {
      uint64_t v19 = (WTF::WallTime *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v16 + 312) + 48))(*(void *)(v16 + 312), v16);
      *(unsigned char *)(v16 + 336) = 1;
    }
    if (!*(unsigned char *)(v16 + 440))
    {
LABEL_65:
      uint64_t v46 = *(void *)(v16 + 48);
      if (*(unsigned char *)(v46 + 72))
      {
        WebKit::AuxiliaryProcessProxy::protectedConnection((WebKit::AuxiliaryProcessProxy *)a1, (atomic_uchar *volatile **)buf);
        *(unsigned char *)(*(void *)buf + 96) = 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        uint64_t v46 = *(void *)(v16 + 48);
      }
      if (*(unsigned char *)(v46 + 73))
      {
        WebKit::AuxiliaryProcessProxy::protectedConnection((WebKit::AuxiliaryProcessProxy *)a1, (atomic_uchar *volatile **)buf);
        *(unsigned char *)(*(void *)buf + 97) = 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
      }
      WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)&v63);
      if (v64)
      {
        int v48 = v63;
        uint64_t v49 = 8 * v64;
        do
        {
          int v50 = (WebKit::WebPageProxy *)*v48;
          uint64_t v51 = *((void *)*v48 + 4);
          if (*(unsigned char *)(v51 + 2584))
          {
            uint64_t v52 = qword_1EB358320;
            if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT))
            {
              WebKit::MediaCapability::environmentIdentifier((id *)(v51 + 2504), (uint64_t *)&v62);
              WTF::String::utf8();
              if (v65) {
                uint64_t v53 = (char *)v65 + 16;
              }
              else {
                uint64_t v53 = 0;
              }
              *(_DWORD *)long long buf = 134218242;
              *(void *)&uint8_t buf[4] = v16;
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v53;
              _os_log_impl(&dword_1985F2000, v52, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processDidFinishLaunching[envID=%{public}s]: updating media capability", buf, 0x16u);
              int v55 = v65;
              int v65 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 1) {
                  WTF::fastFree(v55, v54);
                }
                else {
                  --*(_DWORD *)v55;
                }
              }
              uint64_t v56 = v62;
              unint64_t v62 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2) {
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
                }
                else {
                  *(_DWORD *)v56 -= 2;
                }
              }
              int v50 = (WebKit::WebPageProxy *)*v48;
            }
            WebKit::WebPageProxy::updateMediaCapability(v50);
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v47);
        mach_port_name_t v9 = (unsigned int *)(a1 + 16);
        if (!v16) {
          goto LABEL_91;
        }
      }
      else
      {
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v47);
      }
      CFRelease(*(CFTypeRef *)(v16 + 8));
LABEL_91:
      WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
      int shouldTakeNearSuspendedAssertion = WebKit::WebProcessProxy::shouldTakeNearSuspendedAssertion((WebKit::WebProcessProxy *)a1);
      WebKit::ProcessThrottler::setShouldTakeNearSuspendedAssertion((unsigned int *)(a1 + 200), shouldTakeNearSuspendedAssertion);
      int shouldDropNearSuspendedAssertionAfterDelay = WebKit::WebProcessProxy::shouldDropNearSuspendedAssertionAfterDelay((WebKit::WebProcessProxy *)a1);
      WebKit::ProcessThrottler::setShouldDropNearSuspendedAssertionAfterDelay(a1 + 200, shouldDropNearSuspendedAssertionAfterDelay);
      WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded(a1);
      WebKit::WebProcessProxy::enableRemoteInspectorIfNeeded((WebKit::WebProcessProxy *)a1);
      WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks(a1);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
    }
    uint64_t v63 = 0;
    WTF::WallTime::now(v19);
    if (v20 >= 1.84467441e19)
    {
      unint64_t v21 = -1;
    }
    else if (v20 <= 0.0)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = (unint64_t)v20;
    }
    uint64_t v22 = *(void *)(a1 + 136);
    if (v22) {
      uint64_t v23 = *(unsigned int *)(v22 + 108);
    }
    else {
      uint64_t v23 = 0;
    }
    int v24 = 0;
    unint64_t v25 = v21;
    do
    {
      ++v24;
      BOOL v26 = v25 > 9;
      v25 /= 0xAuLL;
    }
    while (v26);
    if ((v23 & 0x80000000) != 0)
    {
      unsigned int v29 = -(int)v23;
      int v27 = 1;
      do
      {
        ++v27;
        BOOL v30 = v29 >= 0xA;
        v29 /= 0xAu;
      }
      while (v30);
    }
    else
    {
      int v27 = 0;
      unsigned int v28 = v23;
      do
      {
        ++v27;
        BOOL v26 = v28 > 9;
        v28 /= 0xAu;
      }
      while (v26);
    }
    if ((v27 & 0x80000000) == 0)
    {
      BOOL v31 = __OFADD__(v27, 3);
      int v32 = v27 + 3;
      BOOL v33 = v31;
      if ((v24 & 0x80000000) == 0 && !v33)
      {
        BOOL v31 = __OFADD__(v24, v32);
        int v34 = v24 + v32;
        if (!v31)
        {
          uint64_t v35 = (v34 + 10);
          if (!__OFADD__(v34, 10))
          {
            if (v34 == -10)
            {
              uint64_t v36 = MEMORY[0x1E4F30960];
              *MEMORY[0x1E4F30960] += 2;
LABEL_56:
              int v65 = (WTF::StringImpl *)v36;
              WebKit::SandboxExtension::createHandleForTemporaryFile(*(const char ***)(v36 + 8), (const char **)(*(unsigned int *)(v36 + 4) | ((unint64_t)((*(_DWORD *)(v36 + 16) >> 2) & 1) << 32)), 1, (uint64_t)buf);
              if (buf[16])
              {
                unsigned int v42 = *(WTF::StringImpl **)&buf[8];
                uint64_t v63 = *(const char ***)buf;
                *(void *)long long buf = 0;
                *(void *)&buf[8] = 0;
                int v65 = v42;
                if (*(_DWORD *)v36 == 2) {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v36, v41);
                }
                else {
                  *(_DWORD *)v36 -= 2;
                }
              }
              std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::SandboxExtensionHandle *)buf, v41);
              uint64_t v43 = *(void *)(v16 + 448);
              *(void *)long long buf = &v63;
              *(void *)&buf[8] = &v65;
              *(void *)&buf[16] = v43;
              WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StartMemorySampler>(a1, (uint64_t)buf);
              char v45 = v65;
              int v65 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2) {
                  WTF::StringImpl::destroy(v45, v44);
                }
                else {
                  *(_DWORD *)v45 -= 2;
                }
              }
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v63);
              goto LABEL_65;
            }
            if ((v35 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v35 + 20));
              uint64_t v36 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v37 = 0;
                **(_DWORD **)long long buf = 2;
                *(_DWORD *)(v36 + 4) = v35;
                *(void *)(v36 + 20) = *(void *)"WebProcess";
                *(void *)(v36 + 8) = v36 + 20;
                *(_DWORD *)(v36 + 16) = 4;
                *(_WORD *)(v36 + 28) = 29555;
                unint64_t v38 = v21;
                do
                {
                  buf[v37-- + 24] = (v38 % 0xA) | 0x30;
                  BOOL v26 = v38 > 9;
                  v38 /= 0xAuLL;
                }
                while (v26);
                if (v37 + 26 <= 25) {
                  memcpy((void *)(v36 + 30), &buf[v37 + 25], -v37);
                }
                unsigned int v39 = 0;
                do
                {
                  ++v39;
                  BOOL v26 = v21 > 9;
                  v21 /= 0xAuLL;
                }
                while (v26);
                uint64_t v40 = v36 + 30 + v39;
                *(unsigned char *)(v40 + 2) = 100;
                *(_WORD *)uint64_t v40 = 26992;
                WTF::writeIntegerToBuffer<unsigned char,int>(v23, (void *)(v40 + 3));
                goto LABEL_56;
              }
            }
          }
        }
      }
    }
    __break(0xC471u);
LABEL_101:
    JUMPOUT(0x1987312E4);
  }
  uint64_t v17 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v59 = *(void *)(a1 + 136);
    if (v59) {
      LODWORD(v59) = *(_DWORD *)(v59 + 108);
    }
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v59;
    _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didFinishLaunching: Invalid connection identifier (web process failed to launch)", buf, 0x12u);
    WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(a1, 5);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  uint64_t result = WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(a1, 5);
  if (a1) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks(uint64_t this)
{
  *(unsigned char *)(this + 169) = 1;
  if (*(unsigned char *)(this + 185))
  {
    unsigned int v1 = *(unsigned __int16 *)(this + 184);
    if (v1 <= 0xFF)
    {
      __break(1u);
    }
    else
    {
      *(unsigned char *)(this + 185) = 0;
      return WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(this, v1 != 0);
    }
  }
  return this;
}

uint64_t WebKit::isMainThreadOrCheckDisabled(WebKit *this)
{
  unsigned int v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if (WTF::RunLoop::isCurrent(v1)) {
    return 1;
  }
  else {
    return WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
  }
}

uint64_t WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded(uint64_t this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(this + 681)) {
    return this;
  }
  uint64_t v1 = this;
  this = _AXSApplicationAccessibilityEnabled();
  if (!this) {
    return this;
  }
  uint64_t v2 = *(void *)(v1 + 136);
  if (!v2 || !*(_DWORD *)(v2 + 108)) {
    return this;
  }
  if (*(unsigned char *)(v2 + 104))
  {
    uint64_t v3 = *(void *)(v1 + 144);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 144);
    if (!v3) {
      return this;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  if (*(void *)(v3 + 352))
  {
    xpc_connection_get_audit_token();
    char v4 = v16[0];
    v18[0] = *(long long *)((char *)v16 + 1);
    *(_OWORD *)((char *)v18 + 15) = v16[1];
    LOBYTE(v3) = 1;
    goto LABEL_13;
  }
  LOBYTE(v3) = 0;
LABEL_8:
  char v4 = 0;
LABEL_13:
  LOBYTE(v16[0]) = v4;
  *(long long *)((char *)v16 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v18[0];
  v16[1] = *(_OWORD *)((char *)v18 + 15);
  char v17 = v3;
  WebKit::SandboxExtension::createHandlesForMachLookup(0, 0, v16, 1, 0, (uint64_t)&v12);
  if (HIDWORD(v15))
  {
    mach_port_name_t v6 = (const char ***)v14;
    uint64_t v7 = 8 * HIDWORD(v15);
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v6);
      mach_port_name_t v6 = (const char ***)(v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  mach_port_name_t v9 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v9, v5);
  }
  uint64_t v14 = v12;
  uint64_t v10 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = v10;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
  *(void *)&v16[0] = &v14;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::UnblockServicesRequiredByAccessibility>(v1, (uint64_t *)v16, 0, 0);
  *(unsigned char *)(v1 + 68WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 1;
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v11);
}

void sub_198731508(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebProcessProxy::enableRemoteInspectorIfNeeded(WebKit::WebProcessProxy *this)
{
  uint64_t result = (IPC::Encoder *)CFPreferencesGetAppIntegerValue(@"RemoteInspectorEnabled", @"com.apple.webinspectord", 0);
  if (result)
  {
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 2630;
    *((void *)v3 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    uint64_t v10 = v3;
    LOBYTE(v8) = 0;
    char v9 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v10, 0, (uint64_t)&v8, 1);
    if (v9)
    {
      uint64_t v5 = v8;
      uint64_t v8 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      return (IPC::Encoder *)WTF::fastFree(v6, v7);
    }
  }
  return result;
}

void sub_198731624(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GPUProcessProxy::didFinishLaunching(WebKit::AuxiliaryProcessProxy *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  mach_port_name_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::didFinishLaunching:", buf, 0xCu);
  }
  int v15 = *(_DWORD *)a3;
  uint64_t v7 = *(void **)(a3 + 8);
  object = v7;
  if (v7) {
    os_retain(v7);
  }
  WebKit::AuxiliaryProcessProxy::didFinishLaunching((uint64_t)a1, a2, &v15);
  if (object) {
    os_release(object);
  }
  if ((*(_DWORD *)a3 - 1) >= 0xFFFFFFFE)
  {
    WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)a1, 5u);
  }
  else
  {
    {
      uint64_t v9 = WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
      if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
      {
        atomic_fetch_add((atomic_uint *volatile)WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess, 1u);
        uint64_t v10 = *(WebKit::NetworkProcessProxy **)(v9 + 8);
        if (v10) {
          WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v10, a1);
        }
        if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, v8);
        }
      }
    }
    else
    {
      WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
    }
    WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks((uint64_t)a1);
    WebKit::WebProcessPool::allProcessPools((uint64_t)buf);
    if (v18)
    {
      uint64_t v12 = *(WebKit::WebProcessPool ***)buf;
      uint64_t v13 = 8 * v18;
      do
      {
        uint64_t v14 = *v12++;
        WebKit::WebProcessPool::gpuProcessDidFinishLaunching(v14);
        v13 -= 8;
      }
      while (v13);
    }
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v11);
    WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(a1);
  }
}

void WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(WebKit::GPUProcessProxy *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 18);
  if (v1)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v6, v1);
    uint64_t v2 = v6;
    mach_port_name_t v6 = 0;
    uint64_t v3 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    void *v3 = MEMORY[0x1E4F14398];
    v3[1] = 50331650;
    v3[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::{lambda(void *)#1}::__invoke;
    v3[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::descriptor;
    v3[4] = v2;
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v3);
    _Block_release(v3);
    uint64_t v5 = (atomic_uchar **)v6;
    mach_port_name_t v6 = 0;
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v5);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void sub_19873192C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10)
{
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v10);
  }
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::gpuProcessDidFinishLaunching(WebKit::WebProcessPool *this)
{
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, (uint64_t)this + 72);
  if (v8)
  {
    uint64_t v2 = v7;
    uint64_t v3 = 8 * v8;
    do
    {
      char v4 = *v2;
      uint64_t v5 = (atomic_uint *)((char *)*v2 + 16);
      atomic_fetch_add(v5, 1u);
      WebKit::WebProcessProxy::gpuProcessDidFinishLaunching(v4);
      if (v4) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v1);
}

uint64_t WebKit::WebProcessProxy::gpuProcessDidFinishLaunching(WebKit::WebProcessProxy *this)
{
  WebKit::WebProcessProxy::pages(this, (uint64_t)&v6);
  if (v7)
  {
    uint64_t v2 = v6;
    uint64_t v3 = 8 * v7;
    do
    {
      char v4 = *v2++;
      CFRetain(v4[1]);
      WebKit::WebPageProxy::gpuProcessDidFinishLaunching((WebKit::WebPageProxy *)v4);
      CFRelease(v4[1]);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

void WebKit::WebPageProxy::gpuProcessDidFinishLaunching(WebKit::WebPageProxy *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 592))(v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  uint64_t v4 = *((void *)this + 4);
  if (*(unsigned char *)(v4 + 2584))
  {
    uint64_t v5 = qword_1EB358320;
    if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT))
    {
      mach_port_name_t v6 = (id *)(v4 + 2504);
      uint64_t v7 = *(void *)(v4 + 760);
      uint64_t v8 = *(void *)(v4 + 1928);
      uint64_t v9 = *(void *)(*((void *)this + 32) + 136);
      if (v9) {
        int v10 = *(_DWORD *)(v9 + 108);
      }
      else {
        int v10 = 0;
      }
      WebKit::MediaCapability::environmentIdentifier(v6, (uint64_t *)&v15);
      WTF::String::utf8();
      if (v16) {
        uint64_t v11 = (char *)v16 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)long long buf = 134219010;
      unsigned int v18 = this;
      __int16 v19 = 2048;
      uint64_t v20 = v7;
      __int16 v21 = 2048;
      uint64_t v22 = v8;
      __int16 v23 = 1024;
      int v24 = v10;
      __int16 v25 = 2082;
      BOOL v26 = v11;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::gpuProcessDidFinishLaunching[envID=%{public}s]: updating media capability", buf, 0x30u);
      uint64_t v13 = v16;
      uint64_t v16 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      uint64_t v14 = v15;
      int v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    WebKit::WebPageProxy::updateMediaCapability(this);
  }
}

uint64_t WebKit::PageClientImplCocoa::gpuProcessDidFinishLaunching(id *this)
{
  uint64_t v1 = this + 2;
  [objc_loadWeak(this + 2) willChangeValueForKey:@"_gpuProcessIdentifier"];
  id Weak = objc_loadWeak(v1);

  return [Weak didChangeValueForKey:@"_gpuProcessIdentifier"];
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v7++;
        atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::create@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x1B0);
  uint64_t result = WebCore::ScrollingTreeFrameScrollingNode::ScrollingTreeFrameScrollingNode();
  void *v2 = &unk_1EE9D21B8;
  v2[52] = 0;
  v2[53] = 0;
  v2[51] = 0;
  *a1 = v2;
  return result;
}

void sub_198731DF0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessCreationParameters>>(v14, a2);
  if (v15)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if ((_BYTE)v7)
    {
      uint64_t v11 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B7A30;
      v8[1] = v11;
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      uint64_t v13 = v8;
      _OWORD v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
      if (!v15)
      {
        __break(1u);
        return;
      }
      WebKit::NetworkProcess::initializeNetworkProcess(a3, (uint64_t)v14, (uint64_t *)&v13);
      uint64_t v10 = (uint64_t)v13;
      uint64_t v13 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    if (v15) {
      WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v14, v7);
    }
  }
}

void WebKit::NetworkProcess::initializeNetworkProcess(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v49 = v5;
  WebKit::AuxiliaryProcess::applyProcessCreationParameters((WTF *)a1, (WebCore *)a2);
  uint64_t v6 = (WebCore::SQLiteDatabase *)WTF::setProcessPrivileges();
  WebCore::SQLiteDatabase::useFastMalloc(v6);
  WebCore::NetworkStorageSession::permitProcessToUseCookieAPI((WebCore::NetworkStorageSession *)1);
  WebKit::NetworkProcess::platformInitializeNetworkProcess((WebKit *)a1, (WebKit::NetworkProcess *)a2);
  IsUserInitiated = (WebCore *)WTF::Thread::setCurrentThreadIsUserInitiated(0);
  uint64_t v8 = (WTF::MemoryPressureHandler *)WebCore::initializeCommonAtomStrings(IsUserInitiated);
  int v9 = *(unsigned __int8 *)(a2 + 33);
  *(unsigned char *)(a1 + 146) = v9;
  if (!v9)
  {
    uint64_t v10 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(v8);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v11 = *(atomic_uint **)(a1 + 8);
    if (v11) {
      atomic_fetch_add(v11, 1u);
    }
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v12 = &unk_1EE9C3CF0;
    v12[1] = v11;
    uint64_t v13 = *((void *)v10 + 6);
    *((void *)v10 + 6) = v12;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    WTF::MemoryPressureHandler::install(v10);
  }
  WebKit::NetworkProcess::setCacheModel(a1, *(unsigned __int8 *)(a2 + 32));
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 144);
  *(_WORD *)(a1 + 409) = *(_WORD *)(a2 + 145);
  uint64_t v14 = *(unsigned int *)(a2 + 180);
  if (v14)
  {
    uint64_t v37 = *(uint64_t **)(a2 + 168);
    unint64_t v38 = &v37[2 * v14];
    do
    {
      uint64_t v39 = *v37;
      *(void *)long long buf = *v37;
      uint64_t v40 = (_DWORD *)v37[1];
      if (v40)
      {
        *v40 += 2;
        uint64_t v39 = *(void *)buf;
      }
      *(void *)&buf[8] = v40;
      unsigned int v41 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v41 = &unk_1EE9C3D18;
      int v48 = v41;
      WebKit::NetworkProcess::addAllowedFirstPartyForCookies(a1, v39, (WTF::ASCIICaseInsensitiveHash **)&buf[8], 0, (uint64_t *)&v48);
      if (v48) {
        (*(void (**)(void *))(*v48 + 8))(v48);
      }
      uint64_t v43 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v42);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
      v37 += 2;
    }
    while (v37 != v38);
  }
  char v15 = *(const WTF::String **)(a1 + 208);
  uint64_t v16 = (const WTF::String *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v15);
  unsigned int v18 = v16;
  __int16 v19 = v17;
  if (v15) {
    char v15 = (const WTF::String *)((char *)v15 + 24 * *((unsigned int *)v15 - 1));
  }
  if (v15 != v16)
  {
    do
    {
      (*(void (**)(void, uint64_t))(**((void **)v18 + 2) + 24))(*((void *)v18 + 2), a2);
      while (1)
      {
        unsigned int v18 = (const WTF::String *)((char *)v18 + 24);
        if (v18 == v19) {
          break;
        }
        if (*(void *)v18) {
          BOOL v20 = *(void *)v18 == -1;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20) {
          goto LABEL_17;
        }
      }
      unsigned int v18 = v19;
LABEL_17:
      ;
    }
    while (v18 != v15);
  }
  uint64_t v21 = *(unsigned int *)(a2 + 92);
  if (v21)
  {
    uint64_t v22 = *(WebCore::LegacySchemeRegistry **)(a2 + 80);
    uint64_t v23 = 8 * v21;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(v22, v17);
      uint64_t v22 = (WebCore::LegacySchemeRegistry *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  uint64_t v24 = *(unsigned int *)(a2 + 108);
  if (v24)
  {
    __int16 v25 = *(WebCore::LegacySchemeRegistry **)(a2 + 96);
    uint64_t v26 = 8 * v24;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(v25, v17);
      __int16 v25 = (WebCore::LegacySchemeRegistry *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  uint64_t v27 = *(unsigned int *)(a2 + 124);
  if (v27)
  {
    CFTypeRef v44 = *(WebCore::LegacySchemeRegistry **)(a2 + 112);
    uint64_t v45 = 8 * v27;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(v44, v17);
      CFTypeRef v44 = (WebCore::LegacySchemeRegistry *)((char *)v44 + 8);
      v45 -= 8;
    }
    while (v45);
  }
  uint64_t v28 = *(unsigned int *)(a2 + 140);
  if (v28)
  {
    uint64_t v46 = *(WebCore::LegacySchemeRegistry **)(a2 + 128);
    uint64_t v47 = 8 * v28;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(v46, v17);
      uint64_t v46 = (WebCore::LegacySchemeRegistry *)((char *)v46 + 8);
      v47 -= 8;
    }
    while (v47);
  }
  unsigned int v29 = *(_DWORD *)(a2 + 164);
  if (v29)
  {
    uint64_t v30 = *(void *)(a2 + 152);
    uint64_t v31 = 704 * v29;
    do
    {
      WebKit::NetworkProcess::addWebsiteDataStore(a1, v30);
      v30 += 704;
      v31 -= 704;
    }
    while (v31);
  }
  uint64_t v32 = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  BOOL v33 = *(WTF::StringImpl ***)(a1 + 400);
  *(void *)(a1 + 400) = v32;
  if (v33) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v17);
  }
  WebCore::NetworkStorageSession::updateStorageAccessPromptQuirks();
  int v34 = qword_1EB358960;
  BOOL v35 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    int v36 = WebCore::presentingApplicationPID((WebCore *)v35);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v36;
    _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::initializeNetworkProcess: Presenting processPID=%d", buf, 0x12u);
  }
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v49);
}

WTF::StringImpl **WebKit::LegacyCustomProtocolManager::initialize(WebKit::LegacyCustomProtocolManager *this, const WebKit::NetworkProcessCreationParameters *a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::isIntegralOrPointerType(this);
  uint64_t v5 = *((unsigned int *)a2 + 13);
  if (v5)
  {
    uint64_t v6 = (WTF::StringImpl **)*((void *)a2 + 5);
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t result = WebKit::LegacyCustomProtocolManager::registerScheme(this, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl **WebKit::LegacyCustomProtocolManager::registerScheme(WebKit::LegacyCustomProtocolManager *this, WTF::StringImpl **a2)
{
  char v4 = 0;
  uint64_t v5 = (char *)this + 56;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 56, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 56);
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 6, a2, (uint64_t)v8);
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

void sub_198732400(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkProcess::platformInitializeNetworkProcessCocoa(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 420) = *(unsigned char *)(a2 + 72);
  _CFNetworkSetATSContext();
  char v4 = WTF::String::operator=((uint64_t *)(a1 + 152), (WTF::StringImpl **)(a2 + 56));
  WebKit::initializeNetworkSettings((WebKit *)v4);
  WTF::FileSystemImpl::setAllowsMaterializingDatalessFiles();
  *(unsigned char *)(a1 + 344) = 2;
  uint64_t v5 = (const void *)[objc_alloc(MEMORY[0x1E4F18D78]) initWithMemoryCapacity:0 diskCapacity:0 diskPath:0];
  [MEMORY[0x1E4F18D78] setSharedURLCache:v5];
  if (*(void *)(*(void *)(a1 + 40) + 352))
  {
    xpc_connection_get_audit_token();
    v6[0] = v8;
    v6[1] = v9;
    char v7 = 1;
    if (objc_opt_respondsToSelector()) {
      [MEMORY[0x1E4F38CE0] setDelegation:v6];
    }
  }
  *(unsigned char *)(a1 + 42WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *(unsigned char *)(a2 + 147);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198732518(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::initializeNetworkSettings(WebKit *this)
{
  _CFNetworkHTTPConnectionCacheSetLimit();
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"WebKitEnableHTTPPipelining", (CFStringRef)*MEMORY[0x1E4F1D3D8], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    WebCore::ResourceRequest::setHTTPPipeliningEnabled((WebCore::ResourceRequest *)(AppBooleanValue != 0));
  }
  _CFNetworkHTTPConnectionCacheSetLimit();
  _CFNetworkHTTPConnectionCacheSetLimit();
  return _CFNetworkHTTPConnectionCacheSetLimit();
}

void WebKit::NetworkProcess::platformInitializeNetworkProcess(WebKit *a1, WebKit::NetworkProcess *a2)
{
  WebKit::initializeSecItemShim(a1, a2);

  WebKit::NetworkProcess::platformInitializeNetworkProcessCocoa((uint64_t)a1, (uint64_t)a2);
}

uint64_t WebKit::initializeSecItemShim(WebKit *this, WebKit::NetworkProcess *a2)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  char v4 = (atomic_uint *)*((void *)this + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  if (byte_1EB359909)
  {
    uint64_t v5 = (unsigned int *)qword_1EB359918;
    qword_1EB359918 = (uint64_t)v4;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  else
  {
    byte_1EB359909 = 1;
    qword_1EB359918 = (uint64_t)v4;
  }
  return _CFURLConnectionSetFrameworkStubs();
}

atomic_uchar *WebKit::NetworkProcess::addWebsiteDataStore(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 32);
  unint64_t v11 = v4;
  if (*(unsigned char *)(a2 + 648)) {
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 640), (const WebKit::SandboxExtensionHandle *)a2);
  }
  if (*(unsigned char *)(a2 + 664)) {
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 656), (const WebKit::SandboxExtensionHandle *)a2);
  }
  if (*(unsigned char *)(a2 + 680)) {
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 672), (const WebKit::SandboxExtensionHandle *)a2);
  }
  if (*(unsigned char *)(a2 + 696)) {
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 688), (const WebKit::SandboxExtensionHandle *)a2);
  }
  WebKit::NetworkProcess::addStorageSession((uint64_t *)a1, v4, a2);
  v9[0] = a1;
  v9[1] = a2;
  uint64_t result = (atomic_uchar *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::ensure<WebKit::NetworkProcess::addWebsiteDataStore(WebKit::WebsiteDataStoreParameters &&)::$_0>((uint64_t)v10, (uint64_t *)(a1 + 224), (uint64_t *)&v11, (uint64_t)v9);
  if (*(unsigned char *)(a1 + 411))
  {
    uint64_t v6 = *(void *)(*(void *)(v10[0] + 8) + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v6 + 16));
    char v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v7 = &unk_1EE9C3D68;
    v10[0] = (uint64_t)v7;
    WebKit::NetworkStorageManager::suspend(v6, v10);
    uint64_t result = (atomic_uchar *)v10[0];
    v10[0] = 0;
    if (result)
    {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
      if (!v6) {
        return result;
      }
    }
    else if (!v6)
    {
      return result;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v8);
  }
  return result;
}

void WebKit::NetworkProcess::addStorageSession(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v26 = a2;
  WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)&v24, a1 + 29, (uint64_t *)&v26);
  if (!v25) {
    return;
  }
  if (!*(unsigned char *)(a3 + 330))
  {
    CFTypeRef cf = 0;
    if ((v26 & 0x8000000000000000) != 0 && v26 != -1
      || !*(_DWORD *)(a3 + 12)
      || (WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 16), v5), v26 == 1))
    {
      uint64_t v6 = 0;
    }
    else
    {
      WebKit::cookieStorageFromIdentifyingData(a3, (uint64_t *)&v28);
      uint64_t v6 = v28;
      CFTypeRef cf = v28;
    }
    char v7 = *WebKit::NetworkProcess::uiProcessBundleIdentifier((WebKit::NetworkProcess *)a1);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(&v22, (uint64_t)v7, 46, v26);
    long long v9 = v22;
    if (v22)
    {
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v8);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      CFTypeRef v21 = 0;
      *(_DWORD *)v9 += 2;
      WTF::UUID::UUID((WTF::UUID *)v27);
      uint64_t v30 = v9;
      uint64_t v28 = ".PrivateBrowsing.";
      int v29 = 17;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(&v20, (uint64_t *)&v30, (uint64_t)&v28, v27);
      if (v20)
      {
        WTF::String::createCFString((uint64_t *)&v28, (WTF::String *)&v20);
        PrivateStorageSession = v20;
        BOOL v20 = 0;
        if (PrivateStorageSession)
        {
          if (*(_DWORD *)PrivateStorageSession == 2) {
            PrivateStorageSession = (WTF::StringImpl *)WTF::StringImpl::destroy(PrivateStorageSession, v10);
          }
          else {
            *(_DWORD *)PrivateStorageSession -= 2;
          }
        }
        if (*(_DWORD *)v9 == 2) {
          PrivateStorageSession = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v10);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
        if ((v26 & 0x8000000000000000) != 0)
        {
          if (v26 != -1)
          {
            PrivateStorageSession = (WTF::StringImpl *)WebCore::createPrivateStorageSession();
            goto LABEL_22;
          }
        }
        else if (v26 == 1)
        {
          uint64_t v12 = 0;
LABEL_23:
          if (WebCore::NetworkStorageSession::processMayUseCookieAPI(PrivateStorageSession) && !v6 && v12) {
            CFTypeRef cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
          }
          uint64_t v13 = WTF::fastMalloc((WTF *)0x128);
          MEMORY[0x199735F30](v13, v26, &v21, &cf, 0);
          uint64_t v15 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = v13;
          if (v15) {
            WebCore::NetworkStorageSession::operator delete(v15, 0x128uLL);
          }
          uint64_t v16 = v28;
          uint64_t v28 = 0;
          if (v16) {
            CFRelease(v16);
          }
          CFTypeRef v17 = v21;
          CFTypeRef v21 = 0;
          if (v17) {
            CFRelease(v17);
          }
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v14);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
          CFTypeRef v18 = cf;
          CFTypeRef cf = 0;
          if (v18) {
            CFRelease(v18);
          }
          return;
        }
        PrivateStorageSession = (WTF::StringImpl *)WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier();
LABEL_22:
        uint64_t v12 = v27[0];
        CFTypeRef v21 = (CFTypeRef)v27[0];
        goto LABEL_23;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x198732AB4);
  }
  WebKit::NetworkProcess::newTestingSession((uint64_t *)&v28, v26);
  uint64_t v19 = *(void *)(v24 + 8);
  *(void *)(v24 + 8) = v28;
  if (v19) {
    WebCore::NetworkStorageSession::operator delete(v19, 0x128uLL);
  }
}

WTF::StringImpl **WebKit::NetworkProcess::uiProcessBundleIdentifier(WebKit::NetworkProcess *this)
{
  uint64_t v1 = (WTF::StringImpl **)((char *)this + 152);
  if (!*((void *)this + 19))
  {
    MEMORY[0x19972EAD0](&v8, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"));
    unint64_t v4 = v8;
    long long v8 = 0;
    uint64_t v5 = *v1;
    *uint64_t v1 = v4;
    if (v5)
    {
      int v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v3);
        uint64_t v5 = v8;
        long long v8 = 0;
        if (!v5) {
          return v1;
        }
        int v6 = *(_DWORD *)v5 - 2;
        if (*(_DWORD *)v5 == 2)
        {
          WTF::StringImpl::destroy(v5, v7);
          return v1;
        }
      }
      *(_DWORD *)uint64_t v5 = v6;
    }
  }
  return v1;
}

void WebKit::cookieStorageFromIdentifyingData(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CFDataRef v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)a1, *(unsigned int *)(a1 + 12));
  *a2 = CFHTTPCookieStorageCreateFromIdentifyingData();
  [MEMORY[0x1E4F18D80] resourceLoaderRunLoop];
  CFHTTPCookieStorageScheduleWithRunLoop();
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198732C04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkProcess::setCacheModel(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 144) || *(unsigned __int8 *)(result + 145) != a2)
  {
    *(unsigned char *)(result + 144) = 1;
    *(unsigned char *)(result + 145) = a2;
    uint64_t v3 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v3 = &unk_1EE9C46A0;
    uint64_t v4 = v3;
    WebKit::NetworkProcess::forEachNetworkSession(v2, &v4);
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::forEachNetworkSession(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 224);
  if (!v3)
  {
    int v6 = 0;
    uint64_t v4 = 0;
LABEL_21:
    uint64_t v5 = (void *)(v3 + 16 * v4);
    goto LABEL_8;
  }
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  uint64_t v5 = (void *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    int v6 = (void *)(v3 + 16 * v4);
    goto LABEL_21;
  }
  int v6 = *(void **)(result + 224);
  if (v4)
  {
    uint64_t v7 = 16 * v4;
    int v6 = *(void **)(result + 224);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        int v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v3) {
    long long v8 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    long long v8 = 0;
  }
  while (v6 != v8)
  {
    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a2 + 16))(*a2, v6[1]);
    long long v9 = v6 + 2;
    int v6 = v5;
    if (v9 != v5)
    {
      int v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          int v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

void WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3) & v7;
  long long v9 = (uint64_t *)(v6 + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = *a3;
  if (*v9)
  {
    CFTypeRef v21 = 0;
    int v22 = 1;
    do
    {
      if (v10 == v11)
      {
        uint64_t v23 = *a2;
        if (*a2) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 16 * v24;
        goto LABEL_14;
      }
      if (v10 == -1) {
        CFTypeRef v21 = v9;
      }
      unsigned int v8 = (v8 + v22) & v7;
      long long v9 = (uint64_t *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      ++v22;
    }
    while (*v9);
    if (v21)
    {
      *CFTypeRef v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      long long v9 = v21;
    }
  }
  uint64_t v12 = v9[1];
  *long long v9 = v11;
  v9[1] = 0;
  if (v12) {
    WebCore::NetworkStorageSession::operator delete(v12, 0x128uLL);
  }
  uint64_t v13 = *a2;
  if (*a2) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - ++*(_DWORD *)(this + 12) = v14;
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_13;
    }
LABEL_25:
    long long v9 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, v9);
    uint64_t v15 = *a2;
    if (*a2) {
      unint64_t v18 = *(unsigned int *)(v15 - 4);
    }
    else {
      unint64_t v18 = 0;
    }
    goto LABEL_13;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_25;
  }
LABEL_13:
  uint64_t v19 = v15 + 16 * v18;
  char v20 = 1;
LABEL_14:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = v20;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    int v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          unint64_t v18 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          uint64_t v19 = v16[1];
          v16[1] = 0;
          if (v19) {
            WebCore::NetworkStorageSession::operator delete(v19, 0x128uLL);
          }
          if (v16 == a3) {
            uint64_t v13 = v18;
          }
        }
        else
        {
          uint64_t v17 = v16[1];
          v16[1] = 0;
          if (v17) {
            WebCore::NetworkStorageSession::operator delete(v17, 0x128uLL);
          }
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::ensure<WebKit::NetworkProcess::addWebsiteDataStore(WebKit::WebsiteDataStoreParameters &&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v11 = result & v9;
  uint64_t v12 = (void *)(v8 + 16 * (result & v9));
  uint64_t v13 = *v12;
  uint64_t v14 = *a3;
  if (*v12)
  {
    uint64_t v23 = 0;
    int v24 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v25 = *a2;
        if (*a2) {
          uint64_t v26 = *(unsigned int *)(v25 - 4);
        }
        else {
          uint64_t v26 = 0;
        }
        char v22 = 0;
        uint64_t v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1) {
        uint64_t v23 = v12;
      }
      unsigned int v11 = (v11 + v24) & v9;
      uint64_t v12 = (void *)(v8 + 16 * v11);
      uint64_t v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      void *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v14 = *a3;
      uint64_t v12 = v23;
    }
  }
  uint64_t result = WTF::HashMapEnsureTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>::translate<PAL::SessionID const&,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WebKit::NetworkProcess::addWebsiteDataStore(WebKit::WebsiteDataStoreParameters &&)::$_0>(v12, v14, *(WebKit::NetworkSession **)a4, *(void *)(a4 + 8));
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - ++*(_DWORD *)(this + 12) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_23:
    uint64_t result = (uint64_t)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, v12);
    uint64_t v12 = (void *)result;
    uint64_t v17 = *a2;
    if (*a2) {
      unint64_t v20 = *(unsigned int *)(v17 - 4);
    }
    else {
      unint64_t v20 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v21 = v17 + 16 * v20;
  char v22 = 1;
LABEL_12:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v22;
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    int v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          int v18 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          uint64_t v19 = v16[1];
          v16[1] = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
          if (v16 == a3) {
            uint64_t v13 = v18;
          }
        }
        else
        {
          uint64_t v17 = v16[1];
          v16[1] = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

void *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(void *result, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t v6 = result;
  if (a2) {
    int v7 = *(_DWORD *)(a2 + 4);
  }
  else {
    int v7 = 0;
  }
  int v8 = 0;
  unint64_t v9 = a4;
  do
  {
    ++v8;
    BOOL v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (v8 < 0
    || ((BOOL v11 = __OFADD__(v8, 1), v12 = v8 + 1, !v11) ? (v13 = 0) : (v13 = 1),
        v7 < 0 || (v13 & 1) != 0 || (unsigned int v14 = v7 + v12, __OFADD__(v7, v12))))
  {
    uint64_t *result = 0;
  }
  else
  {
    BOOL v15 = !a2 || (*(unsigned char *)(a2 + 16) & 4) != 0;
    uint64_t result = (void *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((uint64_t)&v16, v14, v15, a2, a3, a4);
    *uint64_t v6 = v16;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, char a5, unint64_t a6)
{
  BOOL v10 = (void *)result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      uint64_t v11 = v12;
      if (v12)
      {
        *(_DWORD *)uint64_t v12 = 2;
        *(_DWORD *)(v12 + 4) = a2;
        *(void *)(v12 + 8) = v12 + 20;
        *(_DWORD *)(v12 + 16) = 4;
        uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((char *)(v12 + 20), a4, a5, a6);
      }
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v11 = 0;
    goto LABEL_5;
  }
  if (a2 > 0x7FFFFFEF) {
    goto LABEL_7;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  uint64_t v11 = v12;
  if (v12)
  {
    *(_DWORD *)uint64_t v12 = 2;
    *(_DWORD *)(v12 + 4) = a2;
    *(void *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((char *)(v12 + 20), a4, a5, a6);
  }
LABEL_5:
  void *v10 = v11;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(char *__dst, uint64_t a2, char a3, unint64_t a4)
{
  v13[5] = *MEMORY[0x1E4F143B8];
  v13[0] = a2;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v13, __dst);
  uint64_t v8 = v13[0];
  if (v13[0]) {
    uint64_t v8 = *(unsigned int *)(v13[0] + 4);
  }
  uint64_t v9 = 0;
  BOOL v10 = &__dst[v8];
  char *v10 = a3;
  do
  {
    *((unsigned char *)&v13[4] + v9-- + 7) = (a4 % 0xA) | 0x30;
    BOOL v11 = a4 >= 9;
    BOOL v12 = a4 == 9;
    a4 /= 0xAuLL;
  }
  while (!v12 && v11);
  if (v9 + 26 <= 25) {
    return (uint64_t *)memcpy(v10 + 1, (char *)&v13[5] + v9, -v9);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (*a2) {
    int v8 = *(_DWORD *)(*a2 + 4);
  }
  else {
    int v8 = 0;
  }
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((uint64_t)a4, (uint64_t)&v16);
  if (((result | v9) & 0x80000000) != 0
    || ((int v11 = v9 + result, !__OFADD__(v9, result)) ? (v12 = 0) : (v12 = 1),
        v8 < 0 || (v12 & 1) != 0 || __OFADD__(v8, v11)))
  {
    *a1 = 0;
  }
  else
  {
    uint64_t v13 = *a2;
    BOOL v14 = !*a2 || (*(unsigned char *)(v13 + 16) & 4) != 0;
    uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((uint64_t)&v15, v8 + v11, v14, v13, *(int8x16_t **)a3, *(void *)(a3 + 8), *a4, a4[1]);
    *a1 = v15;
  }
  return result;
}

uint64_t _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WTF::Internal::appendHex();
  int v19 = v3;
  WTF::Internal::appendHex();
  int v17 = v4;
  WTF::Internal::appendHex();
  int v15 = v5;
  WTF::Internal::appendHex();
  int v13 = v6;
  memset(v9, 45, sizeof(v9));
  WTF::Internal::appendHex();
  int v11 = v7;
  return _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE6lengthEvEUlDpOT_E_JNS_15HexNumberBufferEcS8_cS8_cS8_cS8_EEEDcOT_DpOT0_(a2, (uint64_t)v18, &v9[3], (uint64_t)v16, &v9[2], (uint64_t)v14, &v9[1], (uint64_t)v12, v9, (uint64_t)v10);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, int8x16_t *a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  BOOL v14 = (void *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        uint64_t v15 = v16;
        if (v16)
        {
          *(_DWORD *)uint64_t v16 = 2;
          *(_DWORD *)(v16 + 4) = a2;
          *(void *)(v16 + 8) = v16 + 20;
          *(_DWORD *)(v16 + 16) = 4;
          uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((char *)(v16 + 20), a4, a5->i8, a6, a7, a8);
        }
        goto LABEL_6;
      }
LABEL_9:
      uint64_t v15 = 0;
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v15 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_6;
  }
  if (!a2) {
    goto LABEL_10;
  }
  if (a2 > 0x7FFFFFEF) {
    goto LABEL_9;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  uint64_t v15 = v16;
  if (v16)
  {
    *(_DWORD *)uint64_t v16 = 2;
    *(_DWORD *)(v16 + 4) = a2;
    *(void *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((char *)(v16 + 20), a4, a5, a6, a7, a8);
  }
LABEL_6:
  *BOOL v14 = v15;
  return result;
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v13, __dst);
  uint64_t v11 = v13;
  if (v13) {
    uint64_t v11 = *(unsigned int *)(v13 + 4);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(&__dst[v11], a3, a4, a5, a6);
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a3 == 1) {
      *__dst = *a2;
    }
    else {
      memcpy(__dst, a2, a3);
    }
  }
  v10[0] = a4;
  v10[1] = a5;
  uint64_t v11 = &v12;
  char v12 = &__dst[a3];
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v10, &v11);
}

unsigned char *_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(uint64_t a1, unsigned char ***a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  WTF::Internal::appendHex();
  v14[4] = v3;
  WTF::Internal::appendHex();
  v13[4] = v4;
  WTF::Internal::appendHex();
  v12[4] = v5;
  WTF::Internal::appendHex();
  v11[4] = v6;
  WTF::Internal::appendHex();
  int v10 = v7;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(**a2, v14, 45, v13, 45, v12, 45, v11, 45, (uint64_t)v9);
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(unsigned char *__dst, unsigned int *a2, char a3, unsigned int *a4, char a5, unsigned int *a6, char a7, unsigned int *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = a2 + 4;
  size_t v19 = a2[4];
  if (v19 >= 0x11)
  {
    __break(1u);
  }
  else
  {
    int v10 = a8;
    char v13 = a7;
    uint64_t v11 = a6;
    char v14 = a5;
    char v12 = a4;
    uint64_t v16 = __dst;
    char v17 = a9;
    uint64_t v15 = a10;
    if (!v19) {
      goto LABEL_5;
    }
    a2 = (unsigned int *)((char *)v20 - v19);
    if (v19 != 1)
    {
      memcpy(__dst, a2, v19);
      goto LABEL_5;
    }
  }
  unsigned char *v16 = *(unsigned char *)a2;
LABEL_5:
  uint64_t v21 = *v20;
  v16[v21] = a3;

  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(&v16[v21 + 1], v12, v14, v11, v13, v10, v17, v15);
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(unsigned char *__dst, unsigned int *a2, char a3, unsigned int *a4, char a5, unsigned int *a6, char a7, uint64_t a8)
{
  uint64_t v16 = a2 + 4;
  size_t v15 = a2[4];
  if (v15 >= 0x11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = a8;
    char v11 = a7;
    int v9 = a6;
    char v12 = a5;
    int v10 = a4;
    char v13 = __dst;
    if (!v15) {
      goto LABEL_5;
    }
    a2 = (unsigned int *)((char *)v16 - v15);
    if (v15 != 1)
    {
      memcpy(__dst, a2, v15);
      goto LABEL_5;
    }
  }
  *char v13 = *(unsigned char *)a2;
LABEL_5:
  uint64_t v17 = *v16;
  v13[v17] = a3;

  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(&v13[v17 + 1], v10, v12, v9, v11, v8);
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(unsigned char *__dst, unsigned int *a2, char a3, unsigned int *a4, char a5, uint64_t a6)
{
  char v12 = a2 + 4;
  size_t v11 = a2[4];
  if (v11 >= 0x11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a6;
    char v8 = a5;
    int v7 = a4;
    int v9 = __dst;
    if (!v11) {
      goto LABEL_5;
    }
    a2 = (unsigned int *)((char *)v12 - v11);
    if (v11 != 1)
    {
      memcpy(__dst, a2, v11);
      goto LABEL_5;
    }
  }
  *int v9 = *(unsigned char *)a2;
LABEL_5:
  uint64_t v13 = *v12;
  v9[v13] = a3;

  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(&v9[v13 + 1], v7, v8, v6);
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(unsigned char *__dst, unsigned int *a2, char a3, uint64_t a4)
{
  char v8 = a2 + 4;
  size_t v7 = a2[4];
  if (v7 >= 0x11) {
    goto LABEL_11;
  }
  uint64_t v4 = a4;
  unsigned int v5 = __dst;
  if (v7)
  {
    a2 = (unsigned int *)((char *)v8 - v7);
    if (v7 == 1) {
      goto LABEL_12;
    }
    memcpy(__dst, a2, v7);
  }
  while (1)
  {
    uint64_t v9 = *v8;
    v5[v9] = a3;
    uint64_t result = &v5[v9 + 1];
    unsigned int v12 = *(_DWORD *)(v4 + 16);
    v4 += 16;
    size_t v11 = v12;
    if (v12 < 0x11) {
      break;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    *unsigned int v5 = *(unsigned char *)a2;
  }
  if (v11)
  {
    uint64_t v13 = (unsigned char *)(v4 - v11);
    if (v11 == 1)
    {
      unsigned char *result = *v13;
    }
    else
    {
      return memcpy(result, v13, v11);
    }
  }
  return result;
}

uint64_t WTF::HashMapEnsureTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>::translate<PAL::SessionID const&,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WebKit::NetworkProcess::addWebsiteDataStore(WebKit::WebsiteDataStoreParameters &&)::$_0>(void *a1, uint64_t a2, WebKit::NetworkSession *a3, uint64_t a4)
{
  *a1 = a2;
  WebKit::NetworkSession::create(&v7, a3, (WebKit::NetworkProcess *)(a4 + 32), a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  uint64_t result = a1[1];
  a1[1] = v5;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

WebKit::NetworkSessionCocoa *WebKit::NetworkSessionCocoa::create@<X0>(WebKit::NetworkSessionCocoa *this@<X0>, WebKit::NetworkProcess *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::make_unique[abi:sn180100]<WebKit::NetworkSessionCocoa,WebKit::NetworkProcess &,WebKit::NetworkSessionCreationParameters const&>(&v6, this, a2);
  *a3 = v6;
  return result;
}

WebKit::NetworkSessionCocoa *std::make_unique[abi:sn180100]<WebKit::NetworkSessionCocoa,WebKit::NetworkProcess &,WebKit::NetworkSessionCreationParameters const&>(WebKit::NetworkSessionCocoa **a1, WebKit::NetworkProcess *a2, const WebKit::NetworkSessionCreationParameters *a3)
{
  uint64_t v6 = (WebKit::NetworkSessionCocoa *)WTF::fastMalloc((WTF *)0x4C8);
  uint64_t result = WebKit::NetworkSessionCocoa::NetworkSessionCocoa(v6, a2, a3);
  *a1 = v6;
  return result;
}

void sub_198734020(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE6lengthEvEUlDpOT_E_JNS_15HexNumberBufferEcS8_cS8_cS8_cS8_EEEDcOT_DpOT0_(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t v19 = a2;
  char v18 = *a3;
  uint64_t v17 = a4;
  char v16 = *a5;
  uint64_t v15 = a6;
  char v14 = *a7;
  uint64_t v13 = a8;
  char v12 = *a9;
  uint64_t v11 = a10;
  return WTF::StringTypeAdapter<WTF::UUID,void>::length(void)const::{lambda(WTF::UUID &&)#1}::operator()<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer>(a1, (uint64_t)&v19, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&v11);
}

uint64_t WTF::StringTypeAdapter<WTF::UUID,void>::length(void)const::{lambda(WTF::UUID &&)#1}::operator()<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(*(_DWORD *)(*(void *)a2 + 16), 1, *(unsigned int *)(*(void *)a4 + 16), 1, *(_DWORD *)(*(void *)a6 + 16), 1, *(_DWORD *)(*(void *)a8 + 16), 1, (uint64_t)v11, *(_DWORD *)(*(void *)a10 + 16));
  if (v11[0]) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v12;
  }
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10)
{
  uint64_t result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(a3, a4, a5, a6, a7, a8, a10, (uint64_t)v17);
  if (a2 < 0
    || v17[0]
    || (int v14 = a2 + v18, __OFADD__(a2, v18))
    || a1 < 0
    || (BOOL v15 = __OFADD__(a1, v14), v16 = a1 + v14, v15))
  {
    *(_DWORD *)(a9 + 4) = 0;
    *(unsigned char *)a9 = 1;
  }
  else
  {
    *(unsigned char *)a9 = 0;
    *(_DWORD *)(a9 + 4) = v16;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  if ((a7 | a6) < 0) {
    goto LABEL_29;
  }
  int v8 = a6 + a7;
  BOOL v9 = __OFADD__(a6, a7);
  if (a5 < 0 || v9) {
    goto LABEL_29;
  }
  BOOL v10 = __OFADD__(a5, v8);
  int v11 = a5 + v8;
  BOOL v12 = v10;
  if (a4 < 0 || v12) {
    goto LABEL_29;
  }
  BOOL v10 = __OFADD__(a4, v11);
  int v13 = a4 + v11;
  BOOL v14 = v10;
  if (a3 < 0 || v14) {
    goto LABEL_29;
  }
  BOOL v10 = __OFADD__(a3, v13);
  int v15 = a3 + v13;
  BOOL v16 = v10;
  if (a2 < 0
    || v16
    || ((BOOL v10 = __OFADD__(a2, v15), v17 = a2 + v15, !v10) ? (v18 = 0) : (v18 = 1),
        (result & 0x80000000) != 0 || v18 || (BOOL v10 = __OFADD__(result, v17), v19 = result + v17, v10)))
  {
LABEL_29:
    *(_DWORD *)(a8 + 4) = 0;
    *(unsigned char *)a8 = 1;
  }
  else
  {
    *(unsigned char *)a8 = 0;
    *(_DWORD *)(a8 + 4) = v19;
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessCreationParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessCreationParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[208])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessCreationParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::NetworkProcessCreationParameters>(v5, a2);
  if (v6)
  {
    WebKit::NetworkProcessCreationParameters::NetworkProcessCreationParameters((uint64_t)a1, v5);
    int v4 = v6;
    a1[208] = 1;
    if (v4) {
      WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v5, v3);
    }
  }
  else
  {
    *a1 = 0;
    a1[208] = 0;
  }
}

uint64_t WebKit::NetworkProcessCreationParameters::NetworkProcessCreationParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)(result + 8) = v3;
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *(void *)(result + 16) = v4;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(result + 24) = v5;
  *(_WORD *)(result + 32) = *((_WORD *)a2 + 16);
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  uint64_t v6 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + ++*(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(result + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(result + 52) = v6;
  uint64_t v7 = a2[7];
  a2[7] = 0;
  *(void *)(result + 56) = v7;
  uint64_t v8 = a2[8];
  a2[8] = 0;
  *(void *)(result + 64) = v8;
  *(unsigned char *)(result + 72) = *((unsigned char *)a2 + 72);
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  uint64_t v9 = a2[10];
  a2[10] = 0;
  *(void *)(result + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  *(_DWORD *)(result + 88) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = 0;
  *(_DWORD *)(result + 92) = v9;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  uint64_t v10 = a2[12];
  a2[12] = 0;
  *(void *)(result + 96) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = 0;
  *(_DWORD *)(result + 104) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = 0;
  *(_DWORD *)(result + 108) = v10;
  *(void *)(result + 1++*(_DWORD *)(this + 12) = 0;
  *(void *)(result + 120) = 0;
  uint64_t v11 = a2[14];
  a2[14] = 0;
  *(void *)(result + 1++*(_DWORD *)(this + 12) = v11;
  LODWORD(v1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(result + 120) = v11;
  LODWORD(v1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 3WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(result + 124) = v11;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  uint64_t v12 = a2[16];
  a2[16] = 0;
  *(void *)(result + 128) = v12;
  LODWORD(v++*(_DWORD *)(this + 12) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(result + 136) = v12;
  LODWORD(v++*(_DWORD *)(this + 12) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(result + 140) = v12;
  *(_DWORD *)(result + 144) = *((_DWORD *)a2 + 36);
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = 0;
  uint64_t v13 = a2[19];
  a2[19] = 0;
  *(void *)(result + 152) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(result + 160) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 4WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(result + 164) = v13;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  uint64_t v14 = a2[21];
  a2[21] = 0;
  *(void *)(result + 168) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = 0;
  *(_DWORD *)(result + 176) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = 0;
  *(_DWORD *)(result + 180) = v14;
  *(void *)(result + 184) = 0;
  uint64_t v15 = a2[23];
  a2[23] = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 200) = 0;
  *(void *)(result + 184) = v15;
  uint64_t v16 = a2[24];
  a2[24] = 0;
  *(void *)(result + 192) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = 0;
  *(_DWORD *)(result + 200) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 5WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(result + 204) = v16;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::NetworkProcessCreationParameters>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::decode(a2, a1);
  if (!a1[208])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void WebKit::RemoteScrollingTree::scrollingTreeNodeDidScroll(uint64_t a1, uint64_t a2, char a3)
{
  WebCore::ScrollingTree::scrollingTreeNodeDidScroll();
  uint64_t v6 = *(void *)(a1 + 344);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      LOBYTE(v1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
      char v12 = 0;
      if (*(unsigned __int8 *)(a2 + 40) <= 1u)
      {
        char v12 = 1;
        uint64_t v11 = *(void *)(a2 + 344);
      }
      uint64_t v8 = *(void **)(a2 + 48);
      uint64_t v9 = *(void **)(a2 + 56);
      uint64_t v10 = *(void *)(a2 + 144);
      WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeDidScroll(v7, v8, v9, &v10, &v11, a3);
    }
  }
}

void WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeDidScroll(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5, char a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) != 0
    || ((uint64_t v21 = *(void **)(*(void *)(a1 + 24) + 16)) == 0
      ? (char v22 = 0)
      : (v22 = (void *)v21[6], uint64_t v21 = (void *)v21[7]),
        a2 != v22 || a3 != v21))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
    if (v12) {
      uint64_t v13 = v12 - 16;
    }
    else {
      uint64_t v13 = 0;
    }
    CFRetain(*(CFTypeRef *)(v13 + 8));
    if ((WebKit::WebPageProxy::scrollingUpdatesDisabledForTesting((WebKit::WebPageProxy *)v13) & 1) == 0)
    {
      WebKit::WebPageProxy::scrollingNodeScrollViewDidScroll(v13, (uint64_t)a2, (uint64_t)a3);
      if (!*(unsigned char *)(*(void *)(a1 + 24) + 336))
      {
        v23._attr.layer = a2;
        v23._attr._objc_observation_info = a3;
        uint64_t v14 = *a5;
        uint64_t v24 = *a4;
        uint64_t v25 = v14;
        char v26 = *((unsigned char *)a5 + 8);
        char v27 = 0;
        char v28 = a6;
        WebCore::ScrollingTree::addPendingScrollUpdate();
        uint64_t v15 = *(WebKit::RemoteLayerTreeScrollingPerformanceData **)(v13 + 984);
        if (v15)
        {
          WebCore::ScrollingTree::layoutViewport(*(WebCore::ScrollingTree **)(a1 + 24));
          v23.super.isa = (Class)__PAIR64__(v17, v16);
          v23._attr.refcount = v18;
          v23._attr.magic = v19;
          unsigned int v20 = WebKit::RemoteLayerTreeScrollingPerformanceData::blankPixelCount(v15, &v23);
          WebKit::RemoteLayerTreeScrollingPerformanceData::appendBlankPixelCount(v15, 1, v20);
        }
        if (!*(unsigned char *)(a1 + 128)) {
          WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll((WebKit::RemoteScrollingCoordinatorProxy *)a1);
        }
      }
    }
    if (v12) {
      CFRelease(*(CFTypeRef *)(v12 - 8));
    }
  }
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::propagatesMainFrameScrolls(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = result;
  unsigned __int8 v2 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v2 & 1) == 0 || *(unsigned char *)(result + 8))
  {
    uint64_t v3 = (WTF::RunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"WKAppBoundDomains");
    atomic_store(v3 != 0, WebKit::keyExists);
    WTF::RunLoop::main(v3);
    char v4 = *(unsigned char *)(v1 + 8);
    if (v3) {
      CFRetain(v3);
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v5 = &unk_1EE9D3088;
    *(unsigned char *)(v5 + 8) = v4;
    *(void *)(v5 + 16) = v3;
    uint64_t v6 = v5;
    WTF::RunLoop::dispatch();
    uint64_t result = v6;
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return result;
}

void sub_198734800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CD108;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 32)) {
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D1D50;
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3) {

  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void sub_198734A2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebKit::WebPageProxy *this, unint64_t *a2)
{
  uint64_t v2 = (uint64_t)this;
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*((void *)this + 4) + 1816);
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      BOOL v20 = 0;
      unint64_t v21 = 0;
      long long v26 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      long long v25 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      do
      {
        if (*((float *)&v26 + v21) != *((float *)&v25 + v21)) {
          break;
        }
        BOOL v20 = v21++ > 2;
      }
      while (v21 != 4);
      if (v20 && HIBYTE(v3) == HIBYTE(v4) && BYTE6(v3) == BYTE6(v4)) {
        return this;
      }
    }
  }
  else if (v3 == v4 && (v4 & 0x8000000000000) == 0)
  {
    return this;
  }
  WebKit::WebPageProxy::underPageBackgroundColor(this, (uint64_t *)&v24);
  WebCore::Color::Color();
  WebCore::Color::operator=();
  WebKit::WebPageProxy::underPageBackgroundColor((WebKit::WebPageProxy *)v2, (uint64_t *)&v22);
  if ((v24 & 0x8000000000000) != 0)
  {
    if ((v22 & 0x8000000000000) == 0)
    {
      WebCore::Color::operator=();
      goto LABEL_27;
    }
    BOOL v9 = 0;
    unint64_t v10 = 0;
    long long v26 = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
    long long v25 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
    do
    {
      if (*((float *)&v26 + v10) != *((float *)&v25 + v10)) {
        break;
      }
      BOOL v9 = v10++ > 2;
    }
    while (v10 != 4);
    BOOL v7 = v9 && ((v22 ^ v24) & 0xFE000000000000) == 0 && HIBYTE(v24) == HIBYTE(v22);
    goto LABEL_24;
  }
  BOOL v7 = 0;
  if ((v22 & 0x8000000000000) != 0 || v24 != v22)
  {
LABEL_24:
    if ((v22 & 0x8000000000000) != 0)
    {
      unsigned int v19 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v6);
      }
    }
    WebCore::Color::operator=();
    if (v7) {
      goto LABEL_26;
    }
LABEL_27:
    uint64_t v13 = *(void *)(v2 + 40);
    if (v13) {
      uint64_t v14 = *(void *)(v13 + 8);
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v14 + 1592))(v14);
    (*(void (**)(uint64_t))(*(void *)v14 + 1336))(v14);
    (*(void (**)(uint64_t))(*(void *)v14 + 1600))(v14);
    WebCore::Color::operator=();
    uint64_t v15 = *(void *)(v2 + 40);
    if (v15) {
      uint64_t v16 = *(void *)(v15 + 8);
    }
    else {
      uint64_t v16 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v16 + 1592))(v16);
    (*(void (**)(uint64_t))(*(void *)v16 + 1344))(v16);
    this = (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 1600))(v16);
    goto LABEL_34;
  }
  uint64_t v8 = (v22 ^ v24) & 0xFE000000000000;
  WebCore::Color::operator=();
  if (v8) {
    goto LABEL_27;
  }
LABEL_26:
  this = (WebKit::WebPageProxy *)WebCore::Color::operator=();
LABEL_34:
  if (!*(unsigned char *)(v2 + 776))
  {
    *(unsigned char *)(v2 + 776) = 1;
    WTF::RunLoop::main(this);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 24), v2 + 16);
    unsigned int v17 = *(atomic_uint **)(v2 + 24);
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    int v18 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v18 = &unk_1EE9DA338;
    v18[1] = v2;
    _OWORD v18[2] = v17;
    *(void *)&long long v26 = v18;
    WTF::RunLoop::dispatch();
    this = (WebKit::WebPageProxy *)v26;
    *(void *)&long long v26 = 0;
    if (this) {
      this = (WebKit::WebPageProxy *)(*(uint64_t (**)(WebKit::WebPageProxy *))(*(void *)this + 8))(this);
    }
  }
  if ((v23 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v23 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (WebKit::WebPageProxy *)WTF::fastFree(this, v12);
    }
  }
  if ((v24 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v24 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      return (WebKit::WebPageProxy *)WTF::fastFree(this, v12);
    }
  }
  return this;
}

void WebKit::WebProcessPool::WebProcessPool(WebKit::WebProcessPool *this, API::ProcessPoolConfiguration *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EE9DC6D8;
  *((void *)this + 2) = &unk_1EE9DC720;
  *((void *)this + 4) = &unk_1EE9DC758;
  *((void *)this + 5) = 0;
  API::ProcessPoolConfiguration::copy(a2, (API::ProcessPoolConfiguration **)this + 6);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = 0;
  __s2[0] = 0;
  unint64_t v4 = (WebKit::WebPageGroup *)API::Object::newObject(0x30uLL, 88);
  *((void *)this + 23) = WebKit::WebPageGroup::WebPageGroup(v4, (WTF::StringImpl **)__s2);
  uint64_t v6 = (WTF::StringImpl *)__s2[0];
  __s2[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  *((void *)this + 24) = 0;
  BOOL v7 = (void *)WTF::fastMalloc((WTF *)8);
  *BOOL v7 = &unk_1EE9DC968;
  *((void *)this + 25) = v7;
  *((void *)this + 36) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v8 = &unk_1EE9DC9A0;
  *((void *)this + 37) = v8;
  *((void *)this + 38) = 0;
  BOOL v9 = (void *)WTF::fastMalloc((WTF *)8);
  *BOOL v9 = &unk_1EE9DC9D0;
  *((void *)this + 39) = v9;
  *((void *)this + 40) = 0;
  unint64_t v10 = (WebKit::VisitedLinkStore *)API::Object::newObject(0x98uLL, 109);
  *((void *)this + 4WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = WebKit::VisitedLinkStore::VisitedLinkStore(v10);
  *((unsigned char *)this + 336) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 386) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((unsigned char *)this + 440) = 0;
  *((void *)this + 56) = 0x4095E00000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_WORD *)this + 252) = 1;
  *((unsigned char *)this + 506) = 0;
  *((void *)this + 64) = 0;
  uint64_t v11 = *((void *)this + 6);
  *((unsigned char *)this + 520) = *(unsigned char *)(v11 + 76);
  *(_WORD *)((char *)this + 52WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *(unsigned __int8 *)(v11 + 77);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v12 = &unk_1EE9DCEF8;
  v12[1] = this;
  *((void *)this + 66) = v12;
  operator new();
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::WebProcessPool>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9DCF70;
  v10[1] = a4;
  void v10[2] = a5;
  uint64_t v10[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v10;
  return result;
}

WebKit::VisitedLinkStore *WebKit::VisitedLinkStore::VisitedLinkStore(WebKit::VisitedLinkStore *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9D79C8;
  *((void *)this + 2) = &unk_1EE9B71B0;
  *((void *)this + 3) = 0;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)this = &unk_1EE9D7920;
  *((void *)this + 2) = &unk_1EE9D7960;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 4) = IdentifierInternal;
  *((void *)this + 5) = &unk_1EE9D7998;
  WebKit::SharedStringHashStore::SharedStringHashStore((uint64_t)this + 64, (uint64_t)this + 40);
  return this;
}

uint64_t WebKit::SharedStringHashStore::SharedStringHashStore(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v3 = (WTF::RunLoop::TimerBase *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  unint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::RunLoop::Timer::Timer<WebKit::SharedStringHashStore>(v3, v4, a1);
  return a1;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::SharedStringHashStore>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9D05C0;
  v6[1] = WebKit::SharedStringHashStore::processPendingOperations;
  _OWORD v6[2] = 0;
  v6[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v6;
  return result;
}

unsigned int *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      uint64_t v6 = a1[3];
    }
    else
    {
      uint64_t v6 = 0;
    }
    memcpy((void *)(*(void *)a1 + 8 * v6), (const void *)(*(void *)a2 + 8 * v6), *(void *)a2 + 8 * *(unsigned int *)(a2 + 12) - (*(void *)a2 + 8 * v6));
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

void WebKit::UIProcess::initializeLoggingIfNecessary(WebKit::UIProcess *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::UIProcess::initializeLoggingIfNecessary(void)::onceFlag, memory_order_acquire) != -1)
  {
    unint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&WebKit::UIProcess::initializeLoggingIfNecessary(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UIProcess::initializeLoggingIfNecessary(void)::$_0 &&>>);
  }
}

unsigned int *WebKit::StorageAccessUserAgentStringQuirkController::observeUpdates@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = objc_opt_new();
    BOOL v7 = *(const void **)a1;
    *(void *)a1 = v6;
    if (v7)
    {
      CFRelease(v7);
      uint64_t v6 = *(void **)a1;
    }
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___ZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke;
    v30[3] = &__block_descriptor_40_e5_v8__0l;
    v30[4] = a1;
    [v6 listenForStorageAccessUserAgentStringQuirkChanges:v30];
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = 0;
  unint64_t v10 = (unsigned int *)(v9 + 8);
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(v9 + 16) = v11;
  *a3 = v9;
  uint64_t v12 = (uint64_t *)(a1 + 16);
  unsigned int v13 = *(_DWORD *)(a1 + 28);
  LODWORD(v1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v11;
  if (v11 > v13)
  {
    uint64_t v14 = *v12;
    if (*v12)
    {
      int v15 = *(_DWORD *)(v14 - 4);
      if (!v15) {
        goto LABEL_27;
      }
      int v16 = 0;
      unsigned int v17 = v15 - 1;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)(v14 + 8 * v17);
        if ((unint64_t)(v19 + 1) >= 2 && !*(void *)(v19 + 8))
        {
          *(void *)(v14 + 8 * v17) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v19);
            WTF::fastFree((WTF *)v19, v8);
          }
          *(void *)(v14 + 8 * v17) = -1;
          ++v16;
        }
        --v17;
      }
      while (v18);
      uint64_t v14 = *v12;
      if (v16)
      {
        *(_DWORD *)(v14 - 16) += v16;
        uint64_t v20 = *v12;
        if (*v12) {
          int v21 = *(_DWORD *)(v20 - 12);
        }
        else {
          int v21 = 0;
        }
        *(_DWORD *)(v20 - ++*(_DWORD *)(this + 12) = v21 - v16;
        uint64_t v14 = *v12;
      }
      if (v14)
      {
        unsigned int v22 = *(_DWORD *)(v14 - 4);
        if (v22 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v22)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 16));
          uint64_t v14 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = 0;
          if (!v14)
          {
            unsigned int v24 = 0;
            goto LABEL_31;
          }
          goto LABEL_30;
        }
LABEL_27:
        *(_DWORD *)(a1 + 24) = 0;
LABEL_30:
        unsigned int v24 = *(_DWORD *)(v14 - 12);
        int v25 = 0x7FFFFFFF;
        if (v24 >= 0x7FFFFFFF)
        {
LABEL_32:
          *(_DWORD *)(a1 + 28) = 2 * v25;
          goto LABEL_33;
        }
LABEL_31:
        int v25 = v24;
        goto LABEL_32;
      }
    }
    unsigned int v24 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_31;
  }
LABEL_33:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10, v9);
  long long v26 = *(atomic_uint **)v10;
  atomic_fetch_add(*(atomic_uint *volatile *)v10, 1u);
  atomic_fetch_add(v26, 1u);
  uint64_t v31 = (WTF *)v26;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v31, (uint64_t)v29);
  uint64_t result = (unsigned int *)v31;
  uint64_t v31 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
  }
  if (v26)
  {
    if (atomic_fetch_add(v26, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v26);
      return (unsigned int *)WTF::fastFree((WTF *)v26, v27);
    }
  }
  return result;
}

void sub_19873661C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  if (a18 && atomic_fetch_add((atomic_uint *volatile)a18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a18);
    WTF::fastFree(a18, a2);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  void *v18 = 0;
  WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v19, a2);
  _Unwind_Resume(a1);
}

unsigned char *WebKit::StorageAccessUserAgentStringQuirkController::initialize(unsigned char *this)
{
  if (!this[32])
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v2 = &unk_1EE9BDC00;
    v2[1] = v1;
    unint64_t v3 = v2;
    WebKit::StorageAccessUserAgentStringQuirkController::updateQuirks(v1, (uint64_t *)&v3);
    this = v3;
    unint64_t v3 = 0;
    if (this) {
      this = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)this + 8))(this);
    }
    *(unsigned char *)(v1 + 32) = 1;
  }
  return this;
}

void sub_198736724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::StorageAccessUserAgentStringQuirkController::updateQuirks(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = PAL::WebPrivacyLibrary((PAL *)1);
  if (v4)
  {
    unsigned int v5 = (uint64_t (**)(uint64_t))MEMORY[0x1E4FB6298];
    uint64_t v4 = [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6298])() instancesRespondToSelector:sel_requestStorageAccessUserAgentStringQuirksData_completionHandler_];
    if (v4)
    {
      if (byte_1EB358ECC)
      {
        uint64_t v6 = dword_1EB358FBC;
        if (dword_1EB358FBC == dword_1EB358FB8)
        {
          a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&qword_1EB358FB0, dword_1EB358FBC + 1, (unint64_t)a2);
          int v7 = dword_1EB358FBC;
          uint64_t v8 = (uint64_t *)(qword_1EB358FB0 + 8 * dword_1EB358FBC);
          goto LABEL_11;
        }
        unint64_t v10 = (uint64_t *)qword_1EB358FB0;
        int v7 = dword_1EB358FBC;
      }
      else
      {
        uint64_t v6 = 0;
        int v7 = 0;
        unint64_t v10 = &qword_1EB358FC0;
        qword_1EB358FB0 = (uint64_t)&qword_1EB358FC0;
        *(void *)&dword_1EB358FB8 = 1;
        byte_1EB358ECC = 1;
      }
      uint64_t v8 = &v10[v6];
LABEL_11:
      uint64_t v11 = *a2;
      *a2 = 0;
      *uint64_t v8 = v11;
      dword_1EB358FBC = v7 + 1;
      if ((v7 + 1) <= 1)
      {
        uint64_t v12 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
        unsigned int v13 = objc_msgSend((id)(*v5)(objc_msgSend(v12, "setAfterUpdates:", 0)), "sharedInstance");
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        v14[2] = ___ZN6WebKit43StorageAccessUserAgentStringQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke;
        v14[3] = &__block_descriptor_40_e62_v24__0__WPStorageAccessUserAgentStringQuirksData_8__NSError_16l;
        v14[4] = a1;
        [v13 requestStorageAccessUserAgentStringQuirksData:v12 completionHandler:v14];
        if (v12) {
          CFRelease(v12);
        }
      }
      return;
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v15, a2);
  WTF::RunLoop::dispatch();
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

void sub_198736958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *WebKit::StorageAccessPromptQuirkController::initialize(unsigned char *this)
{
  if (!this[40])
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v2 = &unk_1EE9BDB38;
    v2[1] = v1;
    unint64_t v3 = v2;
    WebKit::StorageAccessPromptQuirkController::updateQuirks(v1, (uint64_t *)&v3);
    this = v3;
    unint64_t v3 = 0;
    if (this) {
      this = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)this + 8))(this);
    }
    *(unsigned char *)(v1 + 40) = 1;
  }
  return this;
}

void sub_198736A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::StorageAccessPromptQuirkController::updateQuirks(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = PAL::WebPrivacyLibrary((PAL *)1);
  if (v4)
  {
    unsigned int v5 = (uint64_t (**)(uint64_t))MEMORY[0x1E4FB6298];
    uint64_t v4 = [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6298])() instancesRespondToSelector:sel_requestStorageAccessPromptQuirksData_completionHandler_];
    if (v4)
    {
      if (byte_1EB358ECB)
      {
        uint64_t v6 = dword_1EB358FA4;
        if (dword_1EB358FA4 == dword_1EB358FA0)
        {
          a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&qword_1EB358F98, dword_1EB358FA4 + 1, (unint64_t)a2);
          int v7 = dword_1EB358FA4;
          uint64_t v8 = (uint64_t *)(qword_1EB358F98 + 8 * dword_1EB358FA4);
          goto LABEL_11;
        }
        unint64_t v10 = (uint64_t *)qword_1EB358F98;
        int v7 = dword_1EB358FA4;
      }
      else
      {
        uint64_t v6 = 0;
        int v7 = 0;
        unint64_t v10 = &qword_1EB358FA8;
        qword_1EB358F98 = (uint64_t)&qword_1EB358FA8;
        *(void *)&dword_1EB358FA0 = 1;
        byte_1EB358ECB = 1;
      }
      uint64_t v8 = &v10[v6];
LABEL_11:
      uint64_t v11 = *a2;
      *a2 = 0;
      *uint64_t v8 = v11;
      dword_1EB358FA4 = v7 + 1;
      if ((v7 + 1) <= 1)
      {
        uint64_t v12 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
        unsigned int v13 = objc_msgSend((id)(*v5)(objc_msgSend(v12, "setAfterUpdates:", 0)), "sharedInstance");
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        v14[2] = ___ZN6WebKit34StorageAccessPromptQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke;
        v14[3] = &__block_descriptor_40_e53_v24__0__WPStorageAccessPromptQuirksData_8__NSError_16l;
        v14[4] = a1;
        [v13 requestStorageAccessPromptQuirksData:v12 completionHandler:v14];
        if (v12) {
          CFRelease(v12);
        }
      }
      return;
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v15, a2);
  WTF::RunLoop::dispatch();
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

void sub_198736C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebNotificationManagerProxy *WebKit::WebNotificationManagerProxy::WebNotificationManagerProxy(WebKit::WebNotificationManagerProxy *this, WebKit::WebProcessPool *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E3F98;
  WebKit::WebContextSupplement::WebContextSupplement((WebKit::WebNotificationManagerProxy *)((char *)this + 16), a2);
  *(void *)this = &unk_1EE9E3C98;
  *((void *)this + 2) = &unk_1EE9E3CD8;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)8);
  void *v4 = &unk_1EE9E4088;
  *((void *)this + 4) = v4;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return this;
}

WebKit::WebContextSupplement *WebKit::WebContextSupplement::WebContextSupplement(WebKit::WebContextSupplement *this, WebKit::WebProcessPool *a2)
{
  *(void *)this = &unk_1EE9D8F78;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v4;
  return this;
}

WebKit::WebGeolocationManagerProxy *WebKit::WebGeolocationManagerProxy::WebGeolocationManagerProxy(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessPool *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9D8E18;
  WebKit::WebContextSupplement::WebContextSupplement((WebKit::WebGeolocationManagerProxy *)((char *)this + 16), a2);
  *(void *)this = &unk_1EE9D8CC8;
  *((void *)this + 2) = &unk_1EE9D8D28;
  *((void *)this + 4) = &unk_1EE9D8D60;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = &unk_1EE9D8D98;
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v4 = v5 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  char v8 = -83;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v4 + 56), &v8, (uint64_t)this + 32, &v7);
  return this;
}

void WebKit::NetworkProcessProxy::ensureDefaultNetworkProcess(WebKit::NetworkProcessProxy **a1@<X8>)
{
  {
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
    {
      unint64_t v3 = *(atomic_uint **)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
      if (v3)
      {
        atomic_fetch_add(v3 + 4, 1u);
        *a1 = (WebKit::NetworkProcessProxy *)v3;
        return;
      }
    }
  }
  else
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
  uint64_t v4 = (WebKit::NetworkProcessProxy *)WTF::fastMalloc((WTF *)0x250);
  uint64_t v5 = WebKit::NetworkProcessProxy::NetworkProcessProxy(v4);
  *a1 = v5;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v5 + 2, (uint64_t)v4);
  int v7 = (atomic_uint *)*((void *)v4 + 1);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  char v8 = (unsigned int *)WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
  WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = (uint64_t)v7;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v6);
  }
}

WebKit::NetworkProcessProxy *WebKit::NetworkProcessProxy::NetworkProcessProxy(WebKit::NetworkProcessProxy *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  char v2 = WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(this);
  WebKit::WebProcessPool::allProcessPools((uint64_t)buf);
  if (v23)
  {
    uint64_t v4 = *(uint64_t **)buf;
    uint64_t v5 = 8 * v23 - 8;
    do
    {
      uint64_t v6 = *v4++;
      char v7 = *(unsigned char *)(v6 + 520) != 0;
      if (*(unsigned char *)(v6 + 520)) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v5 == 0;
      }
      v5 -= 8;
    }
    while (!v8);
  }
  else
  {
    char v7 = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v3);
  WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy((uint64_t)this, v2, v7, 6.0);
  *(void *)this = &unk_1EE9E3A88;
  *((void *)this + 3) = &unk_1EE9E3B90;
  *((void *)this + 4) = &unk_1EE9E3BE8;
  *((void *)this + 52) = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9CE588;
  v9[1] = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = v9;
  *((void *)this + 54) = &unk_1EE9E3C38;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  unint64_t v10 = (atomic_uint *)*((void *)this + 1);
  atomic_fetch_add(v10, 1u);
  *((void *)this + 56) = v10;
  LOBYTE(v2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 19;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 19, &v21, (uint64_t)this + 432, (unsigned int **)buf);
  *((void *)this + 57) = 0;
  *((_DWORD *)this + 116) = 0;
  *((unsigned char *)this + 520) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 6WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 59) = 0;
  *((unsigned char *)this + 496) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  uint64_t v11 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::NetworkProcessProxy", buf, 0xCu);
  }
  WebKit::AuxiliaryProcessProxy::connect(this);
  WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(this);
  WebKit::NetworkProcessProxy::updateProcessAssertion(this);
  {
    WebKit::networkProcessesSet(void)::set = 0;
    *(void *)algn_1EB35A878 = 0;
  }
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::networkProcessesSet(void)::set, (unsigned int *)this, (uint64_t)buf);
  WebKit::NetworkProcessProxy::addBackgroundStateObservers(this);
  {
    unk_1EB35A530 = 0u;
    unk_1EB35A540 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v12 = (atomic_uint *)*((void *)this + 1);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  unsigned int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v13 = &unk_1EE9E4158;
  v13[1] = v12;
  int v21 = v13;
  WebKit::StorageAccessPromptQuirkController::observeUpdates((uint64_t)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance, (uint64_t *)&v21, (uint64_t *)buf);
  uint64_t v15 = *(void *)buf;
  *(void *)long long buf = 0;
  int v16 = (WebKit::LinkDecorationFilteringDataObserver *)*((void *)this + 61);
  *((void *)this + 6WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v15;
  if (v16)
  {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v16, v14);
    uint64_t v18 = *(WebKit::LinkDecorationFilteringDataObserver **)buf;
    *(void *)long long buf = 0;
    if (v18) {
      WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v18, v17);
    }
  }
  uint64_t v19 = (uint64_t)v21;
  int v21 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  return this;
}

unsigned int *WebKit::StorageAccessPromptQuirkController::observeUpdates@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = objc_opt_new();
    char v7 = *(const void **)a1;
    *(void *)a1 = v6;
    if (v7)
    {
      CFRelease(v7);
      uint64_t v6 = *(void **)a1;
    }
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___ZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke;
    v30[3] = &__block_descriptor_40_e5_v8__0l;
    v30[4] = a1;
    [v6 listenForStorageAccessPromptQuirkChanges:v30];
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = 0;
  unint64_t v10 = (unsigned int *)(v9 + 8);
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(v9 + 16) = v11;
  *a3 = v9;
  uint64_t v12 = (uint64_t *)(a1 + 24);
  unsigned int v13 = *(_DWORD *)(a1 + 36);
  LODWORD(v1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 > v13)
  {
    uint64_t v14 = *v12;
    if (*v12)
    {
      int v15 = *(_DWORD *)(v14 - 4);
      if (!v15) {
        goto LABEL_27;
      }
      int v16 = 0;
      unsigned int v17 = v15 - 1;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)(v14 + 8 * v17);
        if ((unint64_t)(v19 + 1) >= 2 && !*(void *)(v19 + 8))
        {
          *(void *)(v14 + 8 * v17) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v19);
            WTF::fastFree((WTF *)v19, v8);
          }
          *(void *)(v14 + 8 * v17) = -1;
          ++v16;
        }
        --v17;
      }
      while (v18);
      uint64_t v14 = *v12;
      if (v16)
      {
        *(_DWORD *)(v14 - 16) += v16;
        uint64_t v20 = *v12;
        if (*v12) {
          int v21 = *(_DWORD *)(v20 - 12);
        }
        else {
          int v21 = 0;
        }
        *(_DWORD *)(v20 - ++*(_DWORD *)(this + 12) = v21 - v16;
        uint64_t v14 = *v12;
      }
      if (v14)
      {
        unsigned int v22 = *(_DWORD *)(v14 - 4);
        if (v22 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v22)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 24));
          uint64_t v14 = *(void *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = 0;
          if (!v14)
          {
            unsigned int v24 = 0;
            goto LABEL_31;
          }
          goto LABEL_30;
        }
LABEL_27:
        *(_DWORD *)(a1 + 32) = 0;
LABEL_30:
        unsigned int v24 = *(_DWORD *)(v14 - 12);
        int v25 = 0x7FFFFFFF;
        if (v24 >= 0x7FFFFFFF)
        {
LABEL_32:
          *(_DWORD *)(a1 + 36) = 2 * v25;
          goto LABEL_33;
        }
LABEL_31:
        int v25 = v24;
        goto LABEL_32;
      }
    }
    unsigned int v24 = 0;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_31;
  }
LABEL_33:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10, v9);
  long long v26 = *(atomic_uint **)v10;
  atomic_fetch_add(*(atomic_uint *volatile *)v10, 1u);
  atomic_fetch_add(v26, 1u);
  uint64_t v31 = (WTF *)v26;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v31, (uint64_t)v29);
  uint64_t result = (unsigned int *)v31;
  uint64_t v31 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
  }
  if (v26)
  {
    if (atomic_fetch_add(v26, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v26);
      return (unsigned int *)WTF::fastFree((WTF *)v26, v27);
    }
  }
  return result;
}

void sub_198737614(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  if (a18 && atomic_fetch_add((atomic_uint *volatile)a18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a18);
    WTF::fastFree(a18, a2);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  void *v18 = 0;
  WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v19, a2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkProcessProxy::addBackgroundStateObservers(WebKit::NetworkProcessProxy *this)
{
  char v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = [MEMORY[0x1E4F42738] sharedApplication];
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v4 = (atomic_uint *)*((void *)this + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  uint64_t v6 = *MEMORY[0x1E4F43660];
  *uint64_t v5 = MEMORY[0x1E4F14398];
  v5[1] = 50331650;
  void v5[2] = WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::{lambda(void *,NSNotification *)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::descriptor;
  v5[4] = v4;
  char v7 = (const void *)[v2 addObserverForName:v6 object:v3 queue:0 usingBlock:v5];
  BOOL v8 = v7;
  if (v7) {
    CFRetain(v7);
  }
  uint64_t v9 = (const void *)*((void *)this + 72);
  *((void *)this + 72) = v8;
  if (v9) {
    CFRelease(v9);
  }
  _Block_release(v5);
  unint64_t v10 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v11 = [MEMORY[0x1E4F42738] sharedApplication];
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v12 = (atomic_uint *)*((void *)this + 1);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  unsigned int v13 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  uint64_t v14 = *MEMORY[0x1E4F43708];
  *unsigned int v13 = MEMORY[0x1E4F14398];
  v13[1] = 50331650;
  void v13[2] = WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::{lambda(void *,NSNotification *)#1}::__invoke;
  void v13[3] = &WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::descriptor;
  v13[4] = v12;
  int v15 = (const void *)[v10 addObserverForName:v14 object:v11 queue:0 usingBlock:v13];
  int v16 = v15;
  if (v15) {
    CFRetain(v15);
  }
  unsigned int v17 = (const void *)*((void *)this + 73);
  *((void *)this + 73) = v16;
  if (v17) {
    CFRelease(v17);
  }

  _Block_release(v13);
}

void sub_198737884(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessCache::platformInitialize(WebKit::WebProcessCache *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "doubleForKey:", @"WebProcessCacheCachedProcessLifetimeInSeconds");
  if (v1 > 0.0 && v1 <= 86400.0)
  {
    WebKit::WebProcessCache::cachedProcessLifetime = *(void *)&v1;
    double v4 = v1;
    WTFLogAlways();
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults", *(void *)&v4), "doubleForKey:", @"WebProcessCacheClearingDelayAfterApplicationResignsActiveInSeconds");
  if (v3 > 0.0 && v3 <= 3600.0)
  {
    WebKit::WebProcessCache::clearingDelayAfterApplicationResignsActive = *(void *)&v3;
    return WTFLogAlways();
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcessPool::platformResolvePathsForSandboxExtensions(WebKit::WebProcessPool *this)
{
  MEMORY[0x19972EAD0](&v7, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "resourcePath"));
  WebKit::resolvePathForSandboxExtension(&v8);
  double v3 = v8;
  BOOL v8 = 0;
  double v4 = (WTF::StringImpl *)*((void *)this + 87);
  *((void *)this + 87) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      uint64_t v5 = v8;
      BOOL v8 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v4 -= 2;
      BOOL v8 = 0;
    }
  }
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198737A8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::updateBackForwardCacheCapacity(uint64_t this)
{
  if (*(unsigned char *)(*(void *)(this + 48) + 92))
  {
    uint64_t v1 = this;
    int v6 = 0;
    unsigned int v4 = 0;
    {
      uint64_t v2 = WebKit::LegacyGlobalSettings::singleton(void)::properties;
    }
    else
    {
      uint64_t v2 = 2;
      WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
      *(_OWORD *)&qword_1EB35A6F0 = 0u;
      *(_OWORD *)&qword_1EB35A700 = 0u;
      qword_1EB35A710 = 0;
    }
    WebKit::calculateMemoryCacheSizes((WTF *)v2, &v6, &v6, (unsigned int *)&v6, &v5, &v4);
    double v3 = *(_DWORD **)(v1 + 760);
    ++*v3;
    this = WebKit::WebBackForwardCache::setCapacity((uint64_t)v3, v4);
    if (!*v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198737B70);
    }
    --*v3;
  }
  return this;
}

unint64_t WebKit::calculateMemoryCacheSizes(WTF *a1, int *a2, int *a3, unsigned int *a4, void *a5, _DWORD *a6)
{
  int v11 = (int)a1;
  unint64_t result = WTF::ramSize(a1);
  switch(v11)
  {
    case 2:
      unint64_t v13 = result >> 29;
      if (result >> 29)
      {
        *a6 = 2;
        unint64_t v14 = result >> 31;
        if (result >> 30) {
          int v15 = 0x4000000;
        }
        else {
          int v15 = 0x2000000;
        }
        if (result >> 30) {
          int v16 = 0x1000000;
        }
        else {
          int v16 = 0x800000;
        }
        BOOL v17 = v13 > 2;
        if (v13 <= 2) {
          int v18 = v15;
        }
        else {
          int v18 = 100663296;
        }
        if (v17) {
          int v19 = 25165824;
        }
        else {
          int v19 = v16;
        }
        if (v14) {
          int v20 = 0x8000000;
        }
        else {
          int v20 = v18;
        }
        if (v14) {
          int v21 = 0x2000000;
        }
        else {
          int v21 = v19;
        }
      }
      else
      {
        *a6 = (result & 0xFFFFFFFFF0000000) != 0;
        int v21 = 0x400000;
        int v20 = 0x1000000;
      }
      *a2 = v20;
      *a3 = v21;
      unsigned int v22 = *a2 >> 1;
      if (v22 <= 0x18) {
        unsigned int v22 = 24;
      }
      *a4 = v22;
      *a5 = 0x404E000000000000;
      break;
    case 1:
      unint64_t v27 = result >> 29;
      if (result >> 29)
      {
        *a6 = 2;
        unint64_t v28 = result >> 31;
        if (result >> 30) {
          int v29 = 0x2000000;
        }
        else {
          int v29 = 0x1000000;
        }
        if (result >> 30) {
          int v30 = 0x400000;
        }
        else {
          int v30 = 0x200000;
        }
        BOOL v31 = v27 > 2;
        if (v27 <= 2) {
          int v32 = v29;
        }
        else {
          int v32 = 0x4000000;
        }
        if (v31) {
          int v33 = 0x800000;
        }
        else {
          int v33 = v30;
        }
        if (v28) {
          int v34 = 100663296;
        }
        else {
          int v34 = v32;
        }
        if (v28) {
          int v35 = 12582912;
        }
        else {
          int v35 = v33;
        }
      }
      else
      {
        *a6 = (result & 0xFFFFFFFFF0000000) != 0;
        int v35 = 0x100000;
        int v34 = 0x800000;
      }
      *a2 = v34;
      *a3 = v35;
      *a4 = *a2 >> 2;
      break;
    case 0:
      *a6 = 0;
      if (result >> 29) {
        int v23 = 0x1000000;
      }
      else {
        int v23 = 0x800000;
      }
      if (result >> 30) {
        int v24 = 0x2000000;
      }
      else {
        int v24 = v23;
      }
      if (result >> 29 <= 2) {
        int v25 = v24;
      }
      else {
        int v25 = 0x4000000;
      }
      if (result >> 31) {
        int v26 = 100663296;
      }
      else {
        int v26 = v25;
      }
      *a2 = v26;
      *a3 = 0;
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t WebKit::WebBackForwardCache::setCapacity(uint64_t this, unsigned int a2)
{
  uint64_t v2 = (int *)(this + 16);
  if (*(_DWORD *)(this + 16) != a2)
  {
    uint64_t v4 = this;
    *(_DWORD *)(this + 16) = a2;
    uint64_t v5 = (uint64_t *)(this + 24);
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(this + 24);
    uint64_t v6 = *(void *)(v4 + 24);
    if (v6)
    {
      do
      {
        if (*(_DWORD *)(v6 - 12) <= a2) {
          break;
        }
        uint64_t v8 = WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst((uint64_t)v5);
        if (v8)
        {
          uint64_t v9 = v8;
          CFRetain(*(CFTypeRef *)(v8 + 8));
          std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v9 + 416), 0);
          CFRelease(*(CFTypeRef *)(v9 + 8));
        }
        WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v5);
        uint64_t v6 = *v5;
      }
      while (*v5);
    }
    uint64_t v7 = *(void *)(v4 + 8);
    unint64_t v10 = v2;
    return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetBackForwardCacheCapacity>(v7, &v10, 0);
  }
  return this;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetBackForwardCacheCapacity>(uint64_t result, int **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      unint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        unint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetBackForwardCacheCapacity>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v3;
    while (1)
    {
      unint64_t v10 = (_OWORD *)(v2 + 24 * v8);
      if (*(void *)v10 != -1)
      {
        if (*(void *)v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          int v15 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)(v2 + 24 * v8), v7);
          int v16 = 0;
          do
          {
            unsigned int v17 = v15 & v14;
            int v18 = (void *)(v13 + 24 * (v15 & v14));
            int v15 = ++v16 + (v15 & v14);
          }
          while (*v18);
          uint64_t v19 = v13 + 24 * v17;
          uint64_t v22 = *(void *)(v19 + 16);
          int v21 = (void *)(v19 + 16);
          uint64_t v20 = v22;
          *int v21 = 0;
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
          }
          *(_OWORD *)int v18 = *v10;
          uint64_t v23 = v2 + 24 * v8;
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = 0;
          *int v21 = v24;
          uint64_t v12 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = 0;
          if (!v12) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
          goto LABEL_21;
        }
        uint64_t v11 = v2 + 24 * v8;
        uint64_t v12 = *(void *)(v11 + 16);
        *(void *)(v11 + 16) = 0;
        if (v12) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v8 == v9) {
        goto LABEL_24;
      }
    }
  }
  if (v2)
  {
LABEL_24:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

unsigned int *WTF::VectorMover<false,WTF::WeakRef<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl>>::move(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  if (result != a2)
  {
    unsigned int v5 = result;
    do
    {
      uint64_t v6 = *(unsigned int **)v5;
      *(void *)unsigned int v5 = 0;
      *a3 = v6;
      uint64_t result = *(unsigned int **)v5;
      *(void *)unsigned int v5 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++a3;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *API::ProcessPoolConfiguration::copy@<X0>(API::ProcessPoolConfiguration *this@<X0>, API::ProcessPoolConfiguration **a2@<X8>)
{
  uint64_t v4 = API::Object::newObject(0xA8uLL, 90);
  unsigned int v5 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v4);
  *a2 = v5;
  WTF::String::operator=((uint64_t *)v5 + 2, (WTF::StringImpl **)this + 2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 24), (uint64_t)this + 24);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 40), (uint64_t)this + 40);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 56), (uint64_t)this + 56);
  *(_DWORD *)(v4 + 72) = *((_DWORD *)this + 18);
  *(_WORD *)(v4 + 76) = *((_WORD *)this + 38);
  *(unsigned char *)(v4 + 78) = *((unsigned char *)this + 78);
  *(_WORD *)(v4 + 94) = *((_WORD *)this + 47);
  *(_DWORD *)(v4 + 80) = *((_DWORD *)this + 20);
  *(_WORD *)(v4 + 84) = *((_WORD *)this + 42);
  *(_WORD *)(v4 + 86) = *((_WORD *)this + 43);
  *(unsigned char *)(v4 + 88) = *((unsigned char *)this + 88);
  *(_WORD *)(v4 + 89) = *(_WORD *)((char *)this + 89);
  *(_WORD *)(v4 + 9WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *(_WORD *)((char *)this + 91);
  *(unsigned char *)(v4 + 96) = *((unsigned char *)this + 96);
  long long v6 = *(_OWORD *)((char *)this + 116);
  long long v7 = *(_OWORD *)((char *)this + 100);
  *(unsigned char *)(v4 + 132) = *((unsigned char *)this + 132);
  *(_OWORD *)(v4 + 100) = v7;
  *(_OWORD *)(v4 + 116) = v6;
  WTF::String::operator=((uint64_t *)(v4 + 136), (WTF::StringImpl **)this + 17);
  *(void *)(v4 + 144) = *((void *)this + 18);

  return WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 152), (uint64_t)this + 152);
}

API::ProcessPoolConfiguration *API::ProcessPoolConfiguration::ProcessPoolConfiguration(API::ProcessPoolConfiguration *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E0650;
  *((_OWORD *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 59) = 0u;
  *(_DWORD *)((char *)this + 75) = 16842753;
  *((_DWORD *)this + 20) = getpid();
  *(void *)((char *)this + 84) = 0;
  *((_DWORD *)this + 23) = 16777217;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 100) = 0;
  *((unsigned char *)this + 132) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void sub_198738388(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1987383E8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::didChangeMainDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::WebFrameProxy::webFrame(a2, a3);
  uint64_t v7 = v6;
  if (v6) {
    CFRetain(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v8 = *(void *)(a1 + 560);
  if (v8)
  {
    v16[0] = a2;
    v16[1] = a3;
    char v17 = 1;
    WebKit::UserMediaPermissionRequestManagerProxy::resetAccess(v8, (uint64_t)v16);
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 256) + 512) + 8);
    uint64_t v11 = v10 ? v10 - 16 : 0;
    uint64_t v12 = *(void *)(v11 + 176);
    if (v12)
    {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
      if (v7)
      {
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v20, (WebCore::SecurityOriginData *)(v7 + 48), v9);
        uint64_t v13 = *(void *)(*(void *)(a1 + 256) + 176);
        v18[0] = v20;
        v18[1] = &v19;
        uint64_t v19 = v13;
        WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateCaptureOrigin>(v12, (uint64_t)v18, 0, 0);
        if (v21 != -1) {
          ((void (*)(void *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v21])(v18, v20);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
    }
  }
  *(unsigned char *)(a1 + 1265) = 0;
  std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)(a1 + 1256), 0);
  if (v7)
  {
    if (*(unsigned char *)(v7 + 441))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14) {
        uint64_t v15 = *(void *)(v14 + 8);
      }
      else {
        uint64_t v15 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v15 + 1592))(v15);
      (*(void (**)(uint64_t, void))(*(void *)v15 + 1888))(v15, 0);
      (*(void (**)(uint64_t))(*(void *)v15 + 1600))(v15);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

WebKit::SpeechRecognitionPermissionManager *std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100](WebKit::SpeechRecognitionPermissionManager **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SpeechRecognitionPermissionManager::~SpeechRecognitionPermissionManager(result, a2);
    return (WebKit::SpeechRecognitionPermissionManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::PageClientImplCocoa::hasActiveNowPlayingSessionChanged(id *this, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = this + 2;
  uint64_t result = [objc_loadWeak(this + 2) _hasActiveNowPlayingSession];
  if (result != a2)
  {
    unsigned int v5 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained(v3);
      int v7 = 134218240;
      id v8 = WeakRetained;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p PageClientImplCocoa::hasActiveNowPlayingSessionChanged %d", (uint8_t *)&v7, 0x12u);
      if (WeakRetained) {
        CFRelease(WeakRetained);
      }
    }
    [objc_loadWeak(v3) willChangeValueForKey:@"_hasActiveNowPlayingSession"];
    [objc_loadWeak(v3) _setHasActiveNowPlayingSession:a2];
    return [objc_loadWeak(v3) didChangeValueForKey:@"_hasActiveNowPlayingSession"];
  }
  return result;
}

uint64_t WebKit::WebFrameProxy::webFrame(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  v4[0] = a1;
  v4[1] = a2;
  if (a2 != -1 && a2 | a1)
  {
    {
      WebKit::allFrames(void)::map = 0;
    }
    return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&WebKit::allFrames(void)::map, v4);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    unsigned int v17 = -1640531527;
    __int16 v18 = 0;
    char v19 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v17, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
    uint64_t v6 = a2[1];
    unsigned int v7 = v5 & v4;
    id v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
LABEL_13:
      uint64_t v15 = *(void *)(v2 + 24 * v7 + 16);
      if (v15) {
        return *(void *)(v15 + 8);
      }
    }
    else
    {
      int v12 = 1;
      while (v9 | v10)
      {
        unsigned int v7 = (v7 + v12) & v4;
        uint64_t v13 = (uint64_t *)(v2 + 24 * v7);
        uint64_t v9 = *v13;
        uint64_t v10 = v13[1];
        ++v12;
        if (v9 == *a2 && v10 == v6) {
          goto LABEL_13;
        }
      }
    }
  }
  return 0;
}

uint64_t *WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  v28[0] = 0;
  char v29 = 0;
  unsigned int v3 = (WebKit::ServiceWorkerStorageManager *)v2[46];
  if (!v3)
  {
    v27[0] = 0;
    v27[1] = 0;
    WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v26, v2);
    int v5 = (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v26);
    uint64_t v6 = v4;
    unsigned int v7 = 0;
    uint64_t v8 = v26;
    if (v26) {
      unsigned int v7 = (WebCore::SecurityOriginData *)(v26 + ((unint64_t)*(unsigned int *)(v26 - 4) << 6));
    }
    if (v7 == v5)
    {
      char v9 = 0;
    }
    else
    {
      char v9 = 0;
      do
      {
        __int16 v18 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, v5);
        char v19 = WebKit::OriginStorageManager::defaultBucket(v18);
        uint64_t v20 = (WebKit::ServiceWorkerStorageManager *)WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager((WebKit::OriginStorageManager::StorageBucket *)v19);
        WebKit::ServiceWorkerStorageManager::importRegistrations(v20, &v22);
        if (v24)
        {
          WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v27, &v22);
          if (v24) {
            WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v21);
          }
          char v9 = 1;
        }
        WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v5);
        while (1)
        {
          int v5 = (WebCore::SecurityOriginData *)((char *)v5 + 64);
          if (v5 == v6) {
            break;
          }
          if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v5)) {
            goto LABEL_29;
          }
        }
        int v5 = v6;
LABEL_29:
        ;
      }
      while (v5 != v7);
      uint64_t v8 = v26;
    }
    if (v8) {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v8, v4);
    }
    if (v9) {
      std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>((uint64_t)v28, (WTF::StringImpl *)v27);
    }
    uint64_t v10 = v27;
    goto LABEL_11;
  }
  WebKit::ServiceWorkerStorageManager::importRegistrations(v3, &v22);
  uint64_t v11 = std::__optional_storage_base<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((WTF *)v28, (WTF::StringImpl *)&v22);
  if (v24)
  {
    uint64_t v10 = &v22;
LABEL_11:
    uint64_t v11 = (WTF::RunLoop *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v4);
  }
  WTF::RunLoop::main(v11);
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v22 = v12;
  WTF::CrossThreadCopierBase<false,false,std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy<std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v23, (uint64_t)v28);
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v25 = v13;
  WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(v27, &v22);
  WTF::RunLoop::dispatch();
  uint64_t v15 = v27[0];
  v27[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t result = WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(&v22, v14);
  if (v29) {
    return (uint64_t *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v17);
  }
  return result;
}

uint64_t *WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)a1 + 24)) {
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t *WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::operator()(uint64_t *result)
{
  uint64_t v1 = (atomic_uchar *)result[1];
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *result;
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(&v36, v1, result[2]);
    uint64_t v4 = v36;
    if (v36)
    {
      *(void *)(v3 + 192) = v2[8];
      uint64_t v5 = v2[9];
      *(unsigned char *)(v3 + 216) = *((unsigned char *)v2 + 80);
      *(void *)(v3 + 208) = v5;
      uint64_t v6 = v2[11];
      *(unsigned char *)(v3 + 232) = *((unsigned char *)v2 + 96);
      *(void *)(v3 + 224) = v6;
      uint64_t v7 = v2[13];
      *(unsigned char *)(v3 + 248) = *((unsigned char *)v2 + 112);
      *(void *)(v3 + 240) = v7;
      uint64_t v8 = v2[15];
      *(unsigned char *)(v3 + 264) = *((unsigned char *)v2 + 128);
      *(void *)(v3 + 256) = v8;
      *(void *)(v3 + 360) = 0x40F5180000000000;
      WebKit::NetworkStorageManager::setStorageSiteValidationEnabledInternal(v3, (WTF::StringImpl *)*((unsigned __int8 *)v2 + 137));
      uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      uint64_t v11 = *(WTF **)(v3 + 120);
      *(void *)(v3 + 120) = v10;
      if (v11) {
        WebKit::StorageAreaRegistry::operator delete(v11, v9);
      }
      uint64_t v13 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      uint64_t v14 = *(WTF **)(v3 + 128);
      *(void *)(v3 + 128) = v13;
      if (v14) {
        WebKit::StorageAreaRegistry::operator delete(v14, v12);
      }
      uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)uint64_t v16 = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
      unsigned int v17 = *(WTF **)(v3 + 136);
      *(void *)(v3 + 136) = v16;
      if (v17) {
        WebKit::IDBStorageRegistry::operator delete(v17, v15);
      }
      uint64_t v19 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v19 = 0;
      *(void *)(v19 + 8) = 0;
      uint64_t v20 = *(WTF **)(v3 + 144);
      *(void *)(v3 + 144) = v19;
      if (v20) {
        WebKit::CacheStorageRegistry::operator delete(v20, v18);
      }
      *(unsigned char *)(v3 + 305) = *((unsigned char *)v2 + 136);
      WTF::String::operator=((uint64_t *)(v3 + 56), (WTF::StringImpl **)v2 + 3);
      uint64_t v21 = v3 + 152;
      WTF::String::operator=((uint64_t *)(v3 + 152), (WTF::StringImpl **)v2 + 4);
      WTF::String::operator=((uint64_t *)(v3 + 160), (WTF::StringImpl **)v2 + 5);
      WTF::String::operator=((uint64_t *)(v3 + 176), (WTF::StringImpl **)v2 + 6);
      uint64_t v22 = (WTF::StringImpl **)(v2 + 7);
      uint64_t v23 = (_DWORD **)(v3 + 184);
      WTF::String::operator=((uint64_t *)(v3 + 184), v22);
      uint64_t v24 = *(void *)(v3 + 56);
      if (v24 && *(_DWORD *)(v24 + 4))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        uint64_t Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v35, v25);
        uint64_t v28 = (_BYTE)v27 ? Salt : 0;
        *(void *)(v3 + 72) = v28;
        char v29 = v35;
        int v35 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v27);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
      }
      if (*(unsigned __int8 *)(v3 + 305) < 2u)
      {
        BOOL v31 = (WebKit::ServiceWorkerStorageManager *)WTF::fastMalloc((WTF *)0x10);
        int v32 = *v23;
        if (*v23) {
          *v32 += 2;
        }
        *(void *)BOOL v31 = v32;
        *((void *)v31 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
        std::unique_ptr<WebKit::ServiceWorkerStorageManager>::reset[abi:sn180100]((WebKit::ServiceWorkerStorageManager **)(v3 + 368), v31);
      }
      else
      {
        WebKit::NetworkStorageManager::migrateServiceWorkerRegistrationsToOrigins((WebKit::NetworkStorageManager *)v3);
      }
      if (!*(unsigned char *)(v3 + 305) && *(void *)v21 && *(_DWORD *)(*(void *)v21 + 4))
      {
        WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)(v3 + 152), v30);
        WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)(v3 + 152), (const WTF::String *)1);
      }
      VersionDirectoryIfNeeded = WebKit::IDBStorageManager::createVersionDirectoryIfNeeded((WTF::FileSystemImpl *)(v3 + 160), v30);
      WTF::RunLoop::main(VersionDirectoryIfNeeded);
      int v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v34 = &unk_1EE9CC868;
      *((void *)v34 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v4;
      int v35 = v34;
      WTF::RunLoop::dispatch();
      uint64_t result = (uint64_t *)v35;
      int v35 = 0;
      if (result) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::migrateServiceWorkerRegistrationsToOrigins(WebKit::NetworkStorageManager *this)
{
  uint64_t v2 = (WebKit::ServiceWorkerStorageManager *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v3 = v2;
  uint64_t v4 = (_DWORD *)*((void *)this + 23);
  if (v4) {
    *v4 += 2;
  }
  *(void *)uint64_t v2 = v4;
  *((void *)v2 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  WebKit::ServiceWorkerStorageManager::importRegistrations(v2, &v13);
  if (v15)
  {
    v11[0] = 0;
    v11[1] = 0;
    WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin((uint64_t)v12, (uint64_t *)this, v13, v14, (uint64_t)v11);
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v5);
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v6);
    WebKit::ServiceWorkerStorageManager::clearAllRegistrations(v3);
    if (v15) {
      WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v7);
    }
  }
  WebKit::ServiceWorkerStorageManager::~ServiceWorkerStorageManager(v3);
  return WTF::fastFree(v8, v9);
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WebCore::ServiceWorkerContextData **)a1;
    uint64_t v7 = 592 * v3;
    do
    {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v6, a2);
      uint64_t v6 = (WebCore::ServiceWorkerContextData *)(v8 + 592);
      v7 -= 592;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkStorageManager>(void *result, atomic_uchar *this, uint64_t a3)
{
  uint64_t v5 = result;
  char v6 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](this);
  }
  if (*((void *)this + 3)) {
    ++*((void *)this + 1);
  }
  else {
    a3 = 0;
  }
  *uint64_t v5 = a3;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return result;
}

void WebKit::ServiceWorkerStorageManager::~ServiceWorkerStorageManager(WebKit::ServiceWorkerStorageManager *this)
{
  std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100]((uint64_t *)this + 1, 0);
  unsigned int v3 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

uint64_t std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x1997376C0]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerStorageManager::clearAllRegistrations(WebKit::ServiceWorkerStorageManager *this)
{
  uint64_t result = WebKit::ServiceWorkerStorageManager::ensureDatabase(this);
  if (result)
  {
    return MEMORY[0x1F4170E70]();
  }
  return result;
}

uint64_t WebKit::ServiceWorkerStorageManager::importRegistrations@<X0>(WebKit::ServiceWorkerStorageManager *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = WebKit::ServiceWorkerStorageManager::ensureDatabase(this);
  if (result)
  {
    return MEMORY[0x1F4170E60]();
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t WebKit::ServiceWorkerStorageManager::ensureDatabase(WebKit::ServiceWorkerStorageManager *this)
{
  unsigned int v3 = (uint64_t *)((char *)this + 8);
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
    {
      uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
      MEMORY[0x1997376B0](v4, this);
      std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100](v3, v4);
      return *((void *)this + 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(uint64_t a1, uint64_t *a2, long long *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  if (a4)
  {
    uint64_t v19 = 592 * a4;
    do
    {
      WebCore::ServiceWorkerRegistrationKey::clientOrigin(v28, (WebCore::ServiceWorkerRegistrationKey *)((char *)a3 + 24));
      WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)::$_0>((uint64_t)v26, &v27, (uint64_t)v28);
      uint64_t v20 = v26[0];
      unsigned int v21 = *(_DWORD *)(v26[0] + 76);
      if (v21 == *(_DWORD *)(v26[0] + 72))
      {
        WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>(v26[0] + 64, (unint64_t)a3);
      }
      else
      {
        WebCore::ServiceWorkerContextData::ServiceWorkerContextData(*(void *)(v26[0] + 64) + 592 * v21, a3);
        ++*(_DWORD *)(v20 + 76);
      }
      WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v28);
      a3 += 37;
      v19 -= 592;
    }
    while (v19);
  }
  uint64_t v8 = *(unsigned int *)(a5 + 12);
  if (v8)
  {
    uint64_t v22 = *(WebCore::ServiceWorkerRegistrationKey **)a5;
    uint64_t v23 = 72 * v8;
    do
    {
      WebCore::ServiceWorkerRegistrationKey::clientOrigin(v28, v22);
      WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)::$_0>((uint64_t)v26, &v27, (uint64_t)v28);
      uint64_t v24 = v26[0];
      unsigned int v25 = *(_DWORD *)(v26[0] + 92);
      if (v25 == *(_DWORD *)(v26[0] + 88))
      {
        WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationKey>(v26[0] + 80, (unint64_t)v22);
      }
      else
      {
        WebCore::ServiceWorkerRegistrationKey::ServiceWorkerRegistrationKey(*(void *)(v26[0] + 80) + 72 * v25, (uint64_t)v22);
        ++*(_DWORD *)(v24 + 92);
      }
      WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v28);
      uint64_t v22 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v22 + 72);
      v23 -= 72;
    }
    while (v23);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = v27;
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(v27);
  uint64_t v12 = (WebCore::SecurityOriginData *)result;
  uint64_t v13 = v11;
  unsigned int v14 = 0;
  if (v9) {
    unsigned int v14 = (WebCore::SecurityOriginData *)(v9 + 96 * *(unsigned int *)(v9 - 4));
  }
  if (v14 != (WebCore::SecurityOriginData *)result)
  {
    do
    {
      char v15 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a2, v12);
      uint64_t v16 = WebKit::OriginStorageManager::defaultBucket(v15);
      unsigned int v17 = (WebKit::ServiceWorkerStorageManager *)WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager((WebKit::OriginStorageManager::StorageBucket *)v16);
      uint64_t result = WebKit::ServiceWorkerStorageManager::updateRegistrations(v17, v28);
      if (v29)
      {
        uint64_t result = (uint64_t)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((unsigned int *)a1, v28);
        if (v29) {
          uint64_t result = WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v11);
        }
      }
      while (1)
      {
        uint64_t v12 = (WebCore::SecurityOriginData *)((char *)v12 + 96);
        if (v12 == v13) {
          break;
        }
        uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v12);
        if (!result) {
          goto LABEL_16;
        }
      }
      uint64_t v12 = v13;
LABEL_16:
      ;
    }
    while (v12 != v14);
    uint64_t v9 = v27;
  }
  if (v9) {
    return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v9, v11);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::setStorageSiteValidationEnabledInternal(uint64_t this, WTF::StringImpl *a2)
{
  int v2 = *(unsigned __int8 *)(this + 392);
  if ((*(unsigned char *)(this + 392) != 0) != a2)
  {
    uint64_t v3 = this;
    this += 384;
    if (a2)
    {
      uint64_t v5 = 0;
      std::optional<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>,void>(this, (WTF::StringImpl *)&v5);
      this = v5;
      if (v5) {
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, v4);
      }
    }
    else if (v2)
    {
      this = *(void *)this;
      if (this) {
        this = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(this, a2);
      }
      *(unsigned char *)(v3 + 392) = 0;
    }
  }
  return this;
}

uint64_t WebKit::NetworkStorageManager::getAllOrigins(WebKit::NetworkStorageManager *this, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  uint64_t v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(a2[11]);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  uint64_t v9 = a2[11];
  if (v9) {
    uint64_t v8 = v9 + 72 * *(unsigned int *)(v9 - 4);
  }
  if (v8 != v4)
  {
    do
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t *)this, v5, (uint64_t)v27);
      while (1)
      {
        v5 += 72;
        if (v5 == v7) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v5)) {
          goto LABEL_37;
        }
      }
      uint64_t v5 = v7;
LABEL_37:
      ;
    }
    while (v5 != v8);
  }
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9CCBE0;
  v10[1] = this;
  v27[0] = v10;
  WebKit::NetworkStorageManager::forEachOriginDirectory((uint64_t)a2, (const WTF::String *)v27);
  (*(void (**)(void *))(*v10 + 8))(v10);
  WebKit::LocalStorageManager::originsOfLocalStorageData(&v25, (const WTF::String *)(a2 + 19));
  if (v26)
  {
    uint64_t v22 = v25;
    uint64_t v23 = 32 * v26;
    do
    {
      LOBYTE(v27[0]) = 0;
      int v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, v22);
      v29[0] = 0;
      int v30 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v29, v22);
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t)v24, (uint64_t *)this, (uint64_t)v27);
      WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v27);
      v22 += 32;
      v23 -= 32;
    }
    while (v23);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v11);
  WebKit::IDBStorageManager::originsOfIDBStorageData((WTF::StringImpl *)v24, (const WTF::String *)(a2 + 20));
  uint64_t v13 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(v24);
  unsigned int v14 = v12;
  uint64_t v15 = v24[0];
  if (v24[0]) {
    unint64_t v16 = v24[0] + ((unint64_t)*(unsigned int *)(v24[0] - 4) << 6);
  }
  else {
    unint64_t v16 = 0;
  }
  if (v16 != v13)
  {
    do
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t *)this, v13, (uint64_t)v27);
      while (1)
      {
        v13 += 64;
        if ((void *)v13 == v14) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v13)) {
          goto LABEL_21;
        }
      }
      uint64_t v13 = (uint64_t)v14;
LABEL_21:
      ;
    }
    while (v13 != v16);
    uint64_t v15 = v24[0];
  }
  if (v15) {
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v15, v12);
  }
  WebKit::CacheStorageManager::originsOfCacheStorageData((WebKit::CacheStorageManager *)(a2 + 22), (const WTF::String *)v12, v24);
  uint64_t v18 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(v24);
  uint64_t v19 = v17;
  uint64_t result = v24[0];
  if (v24[0]) {
    unint64_t v21 = v24[0] + ((unint64_t)*(unsigned int *)(v24[0] - 4) << 6);
  }
  else {
    unint64_t v21 = 0;
  }
  if (v21 != v18)
  {
    do
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t *)this, v18, (uint64_t)v27);
      while (1)
      {
        v18 += 64;
        if ((void *)v18 == v19) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v18)) {
          goto LABEL_28;
        }
      }
      uint64_t v18 = (uint64_t)v19;
LABEL_28:
      ;
    }
    while (v18 != v21);
    uint64_t result = v24[0];
  }
  if (result) {
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(result, v17);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v1 - 12)) {
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::makeConstIterator(a1, v1);
  }
  return v1 + ((unint64_t)*(unsigned int *)(v1 - 4) << 6);
}

uint64_t WebKit::NetworkStorageManager::forEachOriginDirectory(uint64_t a1, const WTF::String *a2)
{
  WTF::FileSystemImpl::listDirectory(&v18, (WTF::FileSystemImpl *)(a1 + 56), a2);
  if (v19)
  {
    uint64_t v5 = v18;
    uint64_t v6 = v18 + 8 * v19;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::listDirectory((uint64_t *)&v15, (WTF::FileSystemImpl *)&v17, v7);
      if (v16)
      {
        uint64_t v11 = v15;
        uint64_t v12 = 8 * v16;
        do
        {
          if (!*v11 || (WTF::StringImpl::startsWith() & 1) == 0)
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            (*(void (**)(void, WTF::StringImpl **))(**(void **)a2 + 16))(*(void *)a2, &v14);
            uint64_t v13 = v14;
            unsigned int v14 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v9);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      else
      {
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v17, v8);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v9);
      uint64_t v10 = v17;
      unsigned int v17 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v3);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v3);
}

void *WebKit::LocalStorageManager::originsOfLocalStorageData(void *this, const WTF::String *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *this = 0;
  this[1] = 0;
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v2 = (uint64_t)this;
    WTF::FileSystemImpl::listDirectory((uint64_t *)&v8, a2, a2);
    if (v9)
    {
      uint64_t v4 = (WTF::StringImpl **)v8;
      uint64_t v5 = 8 * v9;
      do
      {
        WebKit::fileNameToOrigin((WebKit *)v11, v4);
        if (v13)
        {
          uint64_t v6 = *(unsigned int *)(v2 + 12);
          if (v6 == *(_DWORD *)(v2 + 8))
          {
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>(v2, (unint64_t)v11);
          }
          else
          {
            uint64_t v7 = *(void *)v2 + 32 * v6;
            *(unsigned char *)uint64_t v7 = 0;
            *(_DWORD *)(v7 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v7, (uint64_t)v11);
            ++*(_DWORD *)(v2 + 12);
          }
          if (v13)
          {
            if (v12 != -1) {
              ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v12])(&v10, v11);
            }
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    return (void *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
  }
  return this;
}

uint64_t WebKit::CacheStorageManager::originsOfCacheStorageData@<X0>(WebKit::CacheStorageManager *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v18, this, a2);
  if (v19)
  {
    uint64_t v6 = v18;
    uint64_t v7 = 8 * v19;
    do
    {
      *(void *)&long long v20 = 0;
      DWORD2(v20) = 0;
      LOBYTE(v8) = 1;
      BYTE12(v20) = 1;
      uint64_t v9 = *v6;
      if (*v6)
      {
        unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
        uint64_t v11 = *(void *)(v9 + 8);
        LODWORD(v9) = *(_DWORD *)(v9 + 4);
        *(void *)&long long v20 = v11;
        int v8 = (v10 >> 2) & 1;
      }
      DWORD2(v20) = v9;
      BYTE12(v20) = v8;
      unint64_t v21 = "origin";
      int v22 = 6;
      char v23 = 1;
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, &v20, 2uLL);
      WTF::FileSystemImpl::pathByAppendingComponents();
      char v13 = v15;
      if (v15)
      {
        uint64_t v15 = 0;
        int v16 = 0;
        WTF::fastFree(v13, v12);
      }
      WebCore::StorageUtilities::readOriginFromFile((uint64_t *)&v20, (WebCore::StorageUtilities *)&v17, (const WTF::String *)v12);
      if (v24) {
        WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(a3, (uint64_t)&v20, (uint64_t)&v15);
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
      uint64_t v14 = v17;
      unsigned int v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v4);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v4);
}

WTF::FileSystemImpl *WebKit::IDBStorageManager::createVersionDirectoryIfNeeded(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    WTF::FileSystemImpl::listDirectory((uint64_t *)&v22, this, a2);
    if (!v23)
    {
      char v3 = 0;
LABEL_5:
      if (!HIDWORD(v25) && (v3 & 1) == 0) {
        goto LABEL_7;
      }
      WTF::FileSystemImpl::pathByAppendingComponent();
      uint64_t v6 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)v26, v5);
      if ((v6 & 0xFF00000000) != 0)
      {
        if (v6 == 2)
        {
          WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)v26, v2);
          goto LABEL_24;
        }
        if (!v6)
        {
          WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v26, v2);
LABEL_24:
          char v3 = 0;
        }
      }
      uint64_t v11 = HIDWORD(v25);
      if (HIDWORD(v25))
      {
        if ((v3 & 1) != 0
          || (WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)v26, v2), uint64_t v11 = HIDWORD(v25), HIDWORD(v25)))
        {
          uint64_t v12 = v24;
          uint64_t v13 = v24 + 8 * v11;
          do
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            WTF::FileSystemImpl::pathByAppendingComponent();
            WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v21, (const WTF::String *)&v20, v14);
            uint64_t v15 = v20;
            long long v20 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v2);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
            int v16 = v21;
            unint64_t v21 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2) {
                WTF::StringImpl::destroy(v16, v2);
              }
              else {
                *(_DWORD *)v16 -= 2;
              }
            }
            v12 += 8;
          }
          while (v12 != v13);
        }
      }
      else if (v3)
      {
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)v26, v2);
      }
      unsigned int v17 = v26[0];
      v26[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v2);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
LABEL_7:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
      return (WTF::FileSystemImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v4);
    }
    char v3 = 0;
    uint64_t v7 = v22;
    uint64_t v8 = 8 * v23;
    while (1)
    {
      char v9 = MEMORY[0x19972E990](*v7, "v0", 2);
      if ((MEMORY[0x19972E990](*v7, "v0", 2) & 1) == 0 && (MEMORY[0x19972E990](*v7, "v1", 2) & 1) == 0)
      {
        WebCore::SecurityOriginData::fromDatabaseIdentifier();
        if (v28)
        {
          uint64_t v10 = HIDWORD(v25);
          if (HIDWORD(v25) != v25)
          {
            uint64_t v18 = v24;
            unsigned int v19 = (_DWORD *)*v7;
            if (*v7) {
              *v19 += 2;
            }
            *(void *)(v18 + 8 * v10) = v19;
            HIDWORD(v25) = v10 + 1;
LABEL_21:
            if (v27 != -1) {
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v27])(&v21, v26);
            }
            goto LABEL_16;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v24, (unint64_t)v7);
          if (v28) {
            goto LABEL_21;
          }
        }
      }
LABEL_16:
      v3 |= v9;
      ++v7;
      v8 -= 8;
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::IDBStorageManager::originsOfIDBStorageData(WTF::StringImpl *this, const WTF::String *a2)
{
  *(void *)this = 0;
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v2 = this;
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebKit::getOriginsForVersion((WTF::FileSystemImpl *)&v6, v2);
    uint64_t v4 = v6;
    uint64_t v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebKit::getOriginsForVersion((WTF::FileSystemImpl *)&v6, v2);
    this = v6;
    uint64_t v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebKit::getOriginsForVersion(WTF::FileSystemImpl *a1, const WTF::String *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  WTF::FileSystemImpl::listDirectory(&v21, a1, a2);
  if (v22)
  {
    uint64_t v5 = v21;
    uint64_t v6 = v21 + 8 * v22;
    do
    {
      WebCore::SecurityOriginData::fromDatabaseIdentifier();
      if (v32)
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::listDirectory(&v18, (WTF::FileSystemImpl *)&v20, v7);
        if (v19)
        {
          uint64_t v9 = v18;
          uint64_t v10 = 8 * v19;
          do
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            if ((WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v17, v11) & 1) == 0)
            {
              WebCore::SecurityOriginData::fromDatabaseIdentifier();
              if (v29)
              {
                if (!v32) {
                  goto LABEL_33;
                }
                v23[0] = 0;
                int v24 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)v30);
                if (!v29) {
                  goto LABEL_33;
                }
                v25[0] = 0;
                int v26 = -1;
                uint64_t v13 = v27;
              }
              else
              {
                if (!v32
                  || (v23[0] = 0,
                      int v24 = -1,
                      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)v30), !v32))
                {
LABEL_33:
                  __break(1u);
                }
                v25[0] = 0;
                int v26 = -1;
                uint64_t v13 = v30;
              }
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, (uint64_t)v13);
              WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t)v16, (uint64_t *)a2, (uint64_t)v23);
              WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v23);
              if (v29 && v28 != -1) {
                ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v28])(v23, v27);
              }
            }
            uint64_t v12 = v17;
            unsigned int v17 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2) {
                WTF::StringImpl::destroy(v12, v8);
              }
              else {
                *(_DWORD *)v12 -= 2;
              }
            }
            v9 += 8;
            v10 -= 8;
          }
          while (v10);
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8);
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v20, v14);
        uint64_t v15 = v20;
        long long v20 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v3);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        if (v32 && v31 != -1) {
          ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_1[v31])(v23, v30);
        }
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v3);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(_DWORD *)(a1 - 12)) {
    return a1 + 96 * *(unsigned int *)(a1 - 4);
  }
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(a1, a1);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)(a1 - 12)) {
    return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(a1, a1);
  }
  return a1 + 72 * *(unsigned int *)(a1 - 4);
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9CD108;
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 32) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    uint64_t v8 = a2[1];
    a2[1] = 0;
    *(void *)(v4 + 16) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(v4 + 24) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(v4 + 28) = v8;
    *(unsigned char *)(v4 + 32) = 1;
  }
  uint64_t v6 = a2[4];
  a2[4] = 0;
  *(void *)(v4 + 40) = v6;
  *a1 = v4;
  return a1;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationKey>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 72 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ServiceWorkerScripts>::destruct(*(unsigned int **)a1, (unsigned int *)(*(void *)a1 + 40 * v3));
  }
  uint64_t v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(unsigned int **)a1;
  if (v3)
  {
    uint64_t v6 = 32 * v3;
    do
    {
      uint64_t v7 = v4[6];
      if (v7 != -1) {
        ((void (*)(char *, unsigned int *))off_1EE9B7B38[v7])(&v8, v4);
      }
      v4[6] = -1;
      v4 += 8;
      v6 -= 32;
    }
    while (v6);
    uint64_t v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned char *WTF::CrossThreadCopierBase<false,false,std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy<std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unsigned char *result, uint64_t a2)
{
  uint64_t v2 = result;
  char v3 = *(unsigned char *)(a2 + 16);
  if (v3)
  {
    WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v6, a2);
    *(void *)uint64_t v2 = v6;
    uint64_t v4 = v7;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    *((void *)v2 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v4;
    uint64_t result = (unsigned char *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v5);
    char v3 = 1;
  }
  else
  {
    uint64_t *result = 0;
  }
  v2[16] = v3;
  return result;
}

uint64_t WebKit::WebSWRegistrationStore::importRegistrations(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    ++*(_DWORD *)(v3 + 24);
    uint64_t result = WebKit::NetworkStorageManager::importServiceWorkerRegistrations(v3, a2);
    int v5 = *(_DWORD *)(v3 + 24);
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v7[0] = 0;
    char v8 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(a2, (uint64_t)v7);
    if (v8) {
      return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::importServiceWorkerRegistrations(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    v12[0] = 0;
    char v13 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(a2, (uint64_t)v12);
    if (v13) {
      return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
    }
  }
  else
  {
    v10[0] = a1;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
    uint64_t v4 = *a2;
    *a2 = 0;
    int v5 = (void *)WTF::fastMalloc((WTF *)0x20);
    *int v5 = &unk_1EE9CD0E0;
    v5[1] = a1;
    void v5[2] = a1;
    v5[3] = v4;
    v10[1] = 0;
    void v10[2] = 0;
    uint64_t v11 = v5;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    if (v7) {
      (*(void (**)(void *))(*v7 + 8))(v7);
    }
    return WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::~$_0((uint64_t)v10, v6);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0>(WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0)::{lambda(void *)#1}::__invoke(WebKit *a1)
{
  int v2 = WebKit::currentHardwareKeyboardState(a1);
  uint64_t v3 = (atomic_uint *)*((void *)a1 + 4);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9D0850;
  *(void *)(v4 + 8) = v3;
  *(_WORD *)(v4 + 16) = v2;
  *(unsigned char *)(v4 + 18) = BYTE2(v2);
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_19873A974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::currentHardwareKeyboardState(WebKit *this)
{
  BOOL v1 = GSEventIsHardwareKeyboardAttached() != 0;
  int HardwareKeyboardCountry = GSEventGetHardwareKeyboardCountry();
  return (HardwareKeyboardCountry << 8) | (GSEventGetHardwareKeyboardType() << 16) | v1;
}

WebCore::TileController **WebKit::PlatformCALayerRemoteTiledBacking::customSublayers(WebCore::TileController **this)
{
  WebCore::TileController::containerLayers((uint64_t *)&v11, this[105]);
  uint64_t v3 = this + 106;
  uint64_t v4 = *((unsigned int *)this + 215);
  if (v4)
  {
    char v8 = *v3;
    uint64_t v9 = 8 * v4;
    do
    {
      uint64_t v10 = *(void *)v8;
      *(void *)char v8 = 0;
      if (v10) {
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
      }
      char v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  int v5 = *v3;
  if (*v3)
  {
    this[106] = 0;
    *((_DWORD *)this + 214) = 0;
    WTF::fastFree(v5, v2);
  }
  this[106] = v11;
  uint64_t v6 = v12;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  this[107] = v6;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v2);
  return this + 106;
}

WebKit::RemoteLayerTreeHost *WebKit::WebPageProxy::setRemoteLayerTreeRootNode(WebKit::WebPageProxy *this, WebKit::RemoteLayerTreeNode *a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  (*(void (**)(uint64_t, WebKit::RemoteLayerTreeNode *))(*(void *)v5 + 432))(v5, a2);
  (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);

  return std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 30, 0);
}

void sub_19873ABB0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::setRemoteLayerTreeRootNode(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = WeakRetained;
  if (a2) {
    uint64_t v5 = *(void *)(a2 + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  [WeakRetained _setAcceleratedCompositingRootView:v5];
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_19873AC54(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::webPageGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(a1 + 128), a2 + 1, (uint64_t)&v8);
  if (v9)
  {
    WebKit::WebPageGroupProxy::create((const WTF::String *)a2, (uint64_t *)&v7);
    uint64_t v3 = (uint64_t)v7;
    uint64_t v7 = 0;
    uint64_t v4 = *(_DWORD **)(v8 + 8);
    *(void *)(v8 + 8) = v3;
    if (v4)
    {
      int v5 = v4[2] - 1;
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (!v4) {
          return *(void *)(v8 + 8);
        }
        int v5 = v4[2] - 1;
        if (v4[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
          return *(void *)(v8 + 8);
        }
      }
      void v4[2] = v5;
    }
  }
  return *(void *)(v8 + 8);
}

uint64_t WebKit::WebPageGroupProxy::create@<X0>(const WTF::String *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::WebPageGroupProxy::WebPageGroupProxy(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebKit::WebPageGroupProxy::WebPageGroupProxy(uint64_t a1, const WTF::String *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9F86F8;
  uint64_t v3 = (WebCore::PageGroup *)(a1 + 16);
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 1);
  int v5 = (unsigned int *)WebCore::PageGroup::pageGroup(v3, a2);
  if (v5)
  {
    uint64_t v8 = (atomic_uint **)v5;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v5, (uint64_t)v5);
    uint64_t v6 = *v8;
    if (*v8) {
      atomic_fetch_add(v6, 1u);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(a1 + 32) = v6;
  return a1;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v9 = result & v7;
  uint64_t v10 = (void *)(v6 + 16 * (result & v7));
  uint64_t v11 = *v10;
  uint64_t v12 = *a2;
  if (*v10)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (v11 == v12)
      {
        uint64_t v23 = *a1;
        if (*a1) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 16 * v24;
        goto LABEL_12;
      }
      if (v11 == -1) {
        uint64_t v21 = v10;
      }
      unsigned int v9 = (v9 + v22) & v7;
      uint64_t v10 = (void *)(v6 + 16 * v9);
      uint64_t v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *uint64_t v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v12 = *a2;
      uint64_t v10 = v21;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,decltype(nullptr)>(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,decltype(nullptr) &&)::{lambda(void)#1}>(v10, v12);
  uint64_t v13 = *a1;
  if (*a1) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - ++*(_DWORD *)(this + 12) = v14;
  uint64_t v15 = *a1;
  if (*a1) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, v10);
    uint64_t v10 = (void *)result;
    uint64_t v15 = *a1;
    if (*a1) {
      unint64_t v18 = *(unsigned int *)(v15 - 4);
    }
    else {
      unint64_t v18 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v19 = v15 + 16 * v18;
  char v20 = 1;
LABEL_12:
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v19;
  *(unsigned char *)(a3 + 16) = v20;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    int v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          uint64_t v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>::~KeyValuePair((uint64_t)v14);
          if (v14 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>::~KeyValuePair((uint64_t)v14);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v4, a2);
}

_DWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,decltype(nullptr)>(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,decltype(nullptr) &&)::{lambda(void)#1}>(void *a1, uint64_t a2)
{
  uint64_t result = (_DWORD *)a1[1];
  *a1 = a2;
  a1[1] = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

WebKit::WebScreenOrientationManagerProxy *WebKit::WebPageProxy::didAttachToRunningProcess(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1208))(v3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x50);
  WebKit::WebFullScreenManagerProxy::WebFullScreenManagerProxy(v5, this, v4);
  uint64_t v6 = *((void *)this + 51);
  *((void *)this + 5WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  WebKit::PlaybackSessionManagerProxy::create(this, &v32);
  unsigned int v7 = v32;
  int v8 = (_DWORD *)*((void *)this + 53);
  *((void *)this + 53) = v32;
  if (!v8)
  {
LABEL_9:
    if (!v7) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v8[4] != 1)
  {
    --v8[4];
    goto LABEL_9;
  }
  (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  unsigned int v7 = (WebKit::WebPageProxy *)*((void *)this + 53);
  if (v7) {
LABEL_10:
  }
    ++*((_DWORD *)v7 + 4);
LABEL_11:
  WebKit::VideoPresentationManagerProxy::create(this, v7, &v32);
  uint64_t v9 = (_DWORD *)*((void *)this + 54);
  *((void *)this + 54) = v32;
  if (v9)
  {
    if (v9[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[4];
    }
  }
  if (*((_DWORD *)v7 + 4) == 1) {
    (*(void (**)(WebKit::WebPageProxy *))(*(void *)v7 + 8))(v7);
  }
  else {
    --*((_DWORD *)v7 + 4);
  }
  uint64_t v10 = *((void *)this + 54);
  if (v10)
  {
    int v11 = *(_DWORD *)(v10 + 16);
    *(_DWORD *)(v10 + 16) = v11 + 1;
    *(unsigned char *)(v10 + 32) = *((unsigned char *)this + 440);
    if (v11) {
      *(_DWORD *)(v10 + 16) = v11;
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v12 = *((void *)this + 4);
  uint64_t v13 = WTF::fastMalloc((WTF *)0x58);
  WebKit::WebPaymentCoordinatorProxy::WebPaymentCoordinatorProxy(v13, v12 + 16);
  uint64_t v14 = *((void *)this + 4);
  uint64_t v15 = *(void *)(v14 + 2008);
  *(void *)(v14 + 2008) = v13;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  int v16 = (WebKit::SystemPreviewController *)WTF::fastMalloc((WTF *)0x130);
  WebKit::SystemPreviewController::SystemPreviewController(v16, this);
  std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100]((WTF **)this + 57, v16);
  uint64_t v18 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v18 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v17))
  {
    uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v19 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    uint64_t v21 = (atomic_uint *)*((void *)this + 3);
    atomic_fetch_add(v21, 1u);
    v19[1] = v21;
    int v22 = (WTF *)*((void *)this + 58);
    *((void *)this + 58) = v19;
    if (v22) {
      std::default_delete<WebKit::ModelElementController>::operator()[abi:sn180100](v22, v20);
    }
  }
  uint64_t v23 = (WebKit::WebAuthenticatorCoordinatorProxy *)WTF::fastMalloc((WTF *)0x50);
  WebKit::WebAuthenticatorCoordinatorProxy::WebAuthenticatorCoordinatorProxy(v23, this);
  uint64_t v24 = *((void *)this + 61);
  *((void *)this + 6WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v23;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = (WebKit::DigitalCredentialsCoordinatorProxy *)WTF::fastMalloc((WTF *)0x18);
  WebKit::DigitalCredentialsCoordinatorProxy::DigitalCredentialsCoordinatorProxy(v25, this);
  std::unique_ptr<WebKit::DigitalCredentialsCoordinatorProxy>::reset[abi:sn180100]((WebKit::DigitalCredentialsCoordinatorProxy **)this + 60, v25);
  int v26 = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WTF::fastMalloc((WTF *)0x28);
  WebKit::WebDeviceOrientationUpdateProviderProxy::WebDeviceOrientationUpdateProviderProxy(v26, this);
  uint64_t v27 = *((void *)this + 164);
  *((void *)this + 164) = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  int v28 = *((_DWORD *)this + 111);
  if (v28 == -90)
  {
    char v29 = 3;
  }
  else if (v28 == 90)
  {
    char v29 = 2;
  }
  else
  {
    char v29 = v28 == 180;
  }
  int v30 = (WebKit::WebScreenOrientationManagerProxy *)WTF::fastMalloc((WTF *)0x30);
  WebKit::WebScreenOrientationManagerProxy::WebScreenOrientationManagerProxy((uint64_t)v30, (uint64_t)this, v29);

  return std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100]((WebKit::WebScreenOrientationManagerProxy **)this + 165, v30);
}

WebKit::DigitalCredentialsCoordinatorProxy *std::unique_ptr<WebKit::DigitalCredentialsCoordinatorProxy>::reset[abi:sn180100](WebKit::DigitalCredentialsCoordinatorProxy **a1, WebKit::DigitalCredentialsCoordinatorProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::DigitalCredentialsCoordinatorProxy::~DigitalCredentialsCoordinatorProxy(result);
    return (WebKit::DigitalCredentialsCoordinatorProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

WTF **std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  uint64_t v2 = *result;
  WebKit::DigitalCredentialsCoordinatorProxy *result = a2;
  if (v2)
  {
    _Block_release(*((const void **)v2 + 35));
    uint64_t v3 = *((void *)v2 + 34);
    *((void *)v2 + 34) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)v2 + 33, 0);
    uint64_t v5 = (const void *)*((void *)v2 + 32);
    *((void *)v2 + 32) = 0;
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)*((void *)v2 + 31);
    *((void *)v2 + 3WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    if (v6) {
      CFRelease(v6);
    }
    unsigned int v7 = (const void *)*((void *)v2 + 30);
    *((void *)v2 + 30) = 0;
    if (v7) {
      CFRelease(v7);
    }
    int v8 = (const void *)*((void *)v2 + 29);
    *((void *)v2 + 29) = 0;
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = (WTF::StringImpl *)*((void *)v2 + 28);
    *((void *)v2 + 28) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = (WTF::StringImpl *)*((void *)v2 + 23);
    *((void *)v2 + 23) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v4);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = (WTF::StringImpl *)*((void *)v2 + 18);
    *((void *)v2 + 18) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v4);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (*(void *)v2)
    {
      *(void *)(*(void *)v2 + 8) = 0;
      uint64_t v12 = *(unsigned int **)v2;
      *(void *)uint64_t v2 = 0;
      if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v4);
      }
    }
    else
    {
      *(void *)uint64_t v2 = 0;
    }
    return (WTF **)WTF::fastFree(v2, v4);
  }
  return result;
}

WebKit::WebDeviceOrientationUpdateProviderProxy *WebKit::WebDeviceOrientationUpdateProviderProxy::WebDeviceOrientationUpdateProviderProxy(WebKit::WebDeviceOrientationUpdateProviderProxy *this, WebKit::WebPageProxy *a2)
{
  uint64_t v3 = (char *)this + 16;
  *(void *)this = &unk_1EE9FB428;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1EE9FB460;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a2;
  uint64_t v4 = *(void *)(*((void *)a2 + 4) + 1928);
  uint64_t v5 = (uint64_t *)(*((void *)a2 + 32) + 160);
  v8[0] = 164;
  v8[1] = v4;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, (uint64_t)v3, &v7);
  return this;
}

WebKit::DigitalCredentialsCoordinatorProxy *WebKit::DigitalCredentialsCoordinatorProxy::DigitalCredentialsCoordinatorProxy(WebKit::DigitalCredentialsCoordinatorProxy *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = &unk_1EE9E30A0;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = *((void *)a2 + 3);
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  *((void *)this + 2) = v4;
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = *(void *)(v6 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 1928);
  v11[0] = 4;
  v11[1] = v8;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v7 + 160), (unsigned __int8 *)v11, (uint64_t)this, &v10);
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  return this;
}

uint64_t WebKit::WebScreenOrientationManagerProxy::WebScreenOrientationManagerProxy(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = &unk_1EE9DD928;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 25) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) + 1928);
  uint64_t v5 = (uint64_t *)(*(void *)(a2 + 256) + 160);
  v8[0] = 202;
  v8[1] = v4;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, a1, &v7);
  return a1;
}

WebKit::WebAuthenticatorCoordinatorProxy *WebKit::WebAuthenticatorCoordinatorProxy::WebAuthenticatorCoordinatorProxy(WebKit::WebAuthenticatorCoordinatorProxy *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = &unk_1EE9E56C0;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  uint64_t v3 = *(void *)(*((void *)a2 + 4) + 1928);
  uint64_t v4 = (uint64_t *)(*((void *)a2 + 32) + 160);
  v7[0] = 158;
  v7[1] = v3;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v4, (unsigned __int8 *)v7, (uint64_t)this, &v6);
  return this;
}

WebKit::VideoPresentationManagerProxy *WebKit::VideoPresentationManagerProxy::create@<X0>(WebKit::VideoPresentationManagerProxy *this@<X0>, WebKit::WebPageProxy *a2@<X1>, WebKit::VideoPresentationManagerProxy **a3@<X8>)
{
  uint64_t v7 = (WebKit::VideoPresentationManagerProxy *)WTF::fastMalloc((WTF *)0x70);
  uint64_t result = WebKit::VideoPresentationManagerProxy::VideoPresentationManagerProxy(v7, this, a2);
  *a3 = v7;
  return result;
}

void sub_19873BB18(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::VideoPresentationManagerProxy *WebKit::VideoPresentationManagerProxy::VideoPresentationManagerProxy(WebKit::VideoPresentationManagerProxy *this, WebKit::WebPageProxy *a2, WebKit::PlaybackSessionManagerProxy *a3)
{
  *((_DWORD *)this + 4) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9D03F0;
  *((unsigned char *)this + 32) = 0;
  *(int32x2_t *)((char *)this + 36) = vdup_n_s32(0x42C80000u);
  uint64_t v5 = (uint64_t *)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v6 = *v5;
  if (*v5) {
    atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  }
  ++*((_DWORD *)a3 + 4);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 6) = v6;
  *((void *)this + 7) = a3;
  *((_OWORD *)this + 6) = 0u;
  uint64_t v7 = *((void *)a3 + 9);
  uint64_t v8 = (unsigned __int8 *)*((void *)a3 + 10);
  v14[0] = "VideoPresentationManagerProxy";
  v14[1] = (unsigned __int8 *)30;
  v14[2] = "VideoPresentationManagerProxy";
  v14[3] = v8;
  if (*(unsigned char *)(v7 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v14);
    uint64_t v6 = *((void *)this + 6);
  }
  uint64_t v9 = *(void *)(v6 + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 32) + 1928);
  uint64_t v12 = (uint64_t *)(*(void *)(v10 + 256) + 160);
  v15[0] = 152;
  v15[1] = v11;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v12, (unsigned __int8 *)v15, (uint64_t)this, v14);
  return this;
}

void sub_19873BC68(_Unwind_Exception *a1, void *a2)
{
  uint64_t v8 = (unsigned int **)v2[12];
  if (v8) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, a2);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  uint64_t v10 = v2[9];
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  if (*v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*v6, v9);
  }
  uint64_t v11 = (_DWORD *)v2[7];
  v2[7] = 0;
  if (v11)
  {
    if (v11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[4];
    }
  }
  uint64_t v12 = (unsigned int *)v2[6];
  v2[6] = 0;
  if (v12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v9);
    }
  }
  void *v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, v9);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v13);
  _Unwind_Resume(a1);
}

WebKit::PlaybackSessionManagerProxy *WebKit::PlaybackSessionManagerProxy::create@<X0>(WebKit::PlaybackSessionManagerProxy *this@<X0>, WebKit::PlaybackSessionManagerProxy **a2@<X8>)
{
  uint64_t v5 = (WebKit::PlaybackSessionManagerProxy *)WTF::fastMalloc((WTF *)0x58);
  uint64_t result = WebKit::PlaybackSessionManagerProxy::PlaybackSessionManagerProxy(v5, this);
  *a2 = v5;
  return result;
}

void sub_19873BD88(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::PlaybackSessionManagerProxy *WebKit::PlaybackSessionManagerProxy::PlaybackSessionManagerProxy(WebKit::PlaybackSessionManagerProxy *this, WebKit::WebPageProxy *a2)
{
  *((void *)this + 3) = 0;
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *(void *)this = &unk_1EE9CF290;
  uint64_t v4 = (atomic_uint **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = *v4;
  if (*v4) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 4) = v5;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 0;
  uint64_t v6 = WebKit::WebPageProxy::logger(a2);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  *((void *)this + 9) = v6;
  unint64_t v7 = *(void *)(*((void *)a2 + 4) + 760) + ~(*(void *)(*((void *)a2 + 4) + 760) << 32);
  unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  uint64_t v10 = (unsigned __int8 *)(((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~(v9 << 27)));
  *((void *)this + 10) = v10;
  v16[0] = "VideoPresentationManagerProxy";
  v16[1] = (unsigned __int8 *)30;
  void v16[2] = "PlaybackSessionManagerProxy";
  void v16[3] = v10;
  if (*(unsigned char *)(v6 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16);
  }
  uint64_t v11 = *(void *)(*((void *)this + 4) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 1928);
  uint64_t v14 = (uint64_t *)(*(void *)(v12 + 256) + 160);
  v17[0] = 49;
  v17[1] = v13;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v14, (unsigned __int8 *)v17, (uint64_t)this, v16);
  return this;
}

void sub_19873BF14(_Unwind_Exception *a1, void *a2)
{
  unint64_t v7 = (unsigned int *)v2[9];
  v2[9] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v2[8];
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  if (*v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*v5, a2);
  }
  unint64_t v9 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  void *v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::logger(WebKit::WebPageProxy *this)
{
  if (!*((void *)this + 156))
  {
    uint64_t v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    *(void *)uint64_t v2 = &unk_1EE9BEFD8;
    *(unsigned char *)(v2 + ++*(_DWORD *)(this + 12) = 1;
    *(void *)(v2 + 16) = this;
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    uint64_t v3 = (unsigned int *)*((void *)this + 156);
    *((void *)this + 156) = v2;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
    char isAlwaysOnLoggingAllowed = WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(this);
    if (*(WebKit::WebPageProxy **)(v2 + 16) == this) {
      *(unsigned char *)(v2 + ++*(_DWORD *)(this + 12) = isAlwaysOnLoggingAllowed;
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return *((void *)this + 156);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v24, this);
  *(void *)long long buf = v24;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, &v25);
  if (v25)
  {
    uint64_t v8 = v24;
    uint64_t v24 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    unint64_t v9 = *(NSObject **)(a1 + 32);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v26 ? (char *)v26 + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v26;
      int v26 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        int v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              LODWORD(v26) = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v27, this);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)buf, (uint64_t)&v26, 1uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v20 + 16))(v20, a1, a2, buf);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v21);
              int v22 = v27;
              uint64_t v27 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2) {
                  WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)v22 -= 2;
                }
              }
              ++v18;
              v19 -= 8;
            }
            while (v19);
          }
          int v23 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  int v5 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        unint64_t v7 = v10;
        if (v10)
        {
          uint64_t v8 = (char *)(v10 + 5);
          _DWORD *v10 = 2;
          v7[1] = v5;
          *((void *)v7 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v7 + 5;
          v7[4] = 4;
          uint64_t v10 = a3;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v10, v8);
        }
        goto LABEL_12;
      }
LABEL_8:
      unint64_t v7 = 0;
      goto LABEL_12;
    }
LABEL_9:
    unint64_t v7 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if (!result) {
    goto LABEL_9;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_8;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  unint64_t v7 = v10;
  if (v10)
  {
    unint64_t v9 = (char *)(v10 + 5);
    _DWORD *v10 = 2;
    v7[1] = v5;
    *((void *)v7 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v7 + 5;
    v7[4] = 0;
    uint64_t v10 = a3;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v10, v9);
  }
LABEL_12:
  *a4 = v7;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t result = 0;
    int v4 = 1;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>(result, v4, (_DWORD *)v2, a2);
  }
  uint64_t result = *(unsigned int *)(v2 + 4);
  if ((result & 0x80000000) == 0)
  {
    int v4 = (*(unsigned __int8 *)(v2 + 16) >> 2) & 1;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>(result, v4, (_DWORD *)v2, a2);
  }
  *a2 = 0;
  return result;
}

uint64_t WebKit::WebPaymentCoordinatorProxy::WebPaymentCoordinatorProxy(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE9BE620;
  *(void *)(a1 + 16) = &unk_1EE9BE6A8;
  *(void *)(a1 + 24) = &unk_1EE9BE6F8;
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = 0;
  WTF::WorkQueue::create();
  *(void *)(a1 + 80) = 0;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a1, 188, a1);
  return a1;
}

void sub_19873C598(_Unwind_Exception *a1)
{
  int v5 = v3;
  objc_destroyWeak(v4);
  uint64_t v8 = *v5;
  *int v5 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 56))(v8);
  }
  uint64_t v9 = v1[8];
  v1[8] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *uint64_t v1 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v7);
  _Unwind_Resume(a1);
}

unsigned __int8 *non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorAddMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 1912);
  int v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 256) + 160);
  v8[0] = a3;
  v8[1] = v4;
  return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, a4, &v7);
}

uint64_t WebKit::WebFullScreenManagerProxy::WebFullScreenManagerProxy(uint64_t a1, WebKit::WebPageProxy *this, uint64_t a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9D8C90;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = this;
  *(void *)(a1 + 32) = a3;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = WebKit::WebPageProxy::logger(this);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  *(void *)(a1 + 64) = v5;
  unint64_t v6 = *(void *)(*((void *)this + 4) + 760) + ~(*(void *)(*((void *)this + 4) + 760) << 32);
  unint64_t v7 = 9 * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  *(void *)(a1 + 72) = (v8 >> 31) ^ v8;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(v9 + 256);
  uint64_t v11 = *(void *)(*(void *)(v9 + 32) + 1928);
  v14[0] = 171;
  v14[1] = v11;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v10 + 160), (unsigned __int8 *)v14, a1, &v13);
  return a1;
}

WebKit::SystemPreviewController *WebKit::SystemPreviewController::SystemPreviewController(WebKit::SystemPreviewController *this, WebKit::WebPageProxy *a2)
{
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = a2;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + ++*(_DWORD *)(this + 12) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  *((void *)this + 18) = 0;
  WTF::URL::invalidate((WebKit::SystemPreviewController *)((char *)this + 144));
  *((void *)this + 23) = 0;
  WTF::URL::invalidate((WebKit::SystemPreviewController *)((char *)this + 184));
  *((void *)this + 36) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return this;
}

uint64_t WebKit::PageClientImpl::fullScreenManagerProxyClient(WebKit::PageClientImpl *this)
{
  return (uint64_t)this + 32;
}

uint64_t IPC::Connection::dispatchSyncMessage(IPC::Connection *this, IPC::Decoder *a2)
{
  if (!*((void *)this + 2))
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!v5) {
    return result;
  }
  uint64_t v6 = result;
  ++*((_DWORD *)this + 21);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2872;
  *((void *)v7 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v14 = v7;
  if (*((_WORD *)a2 + 25) == 3828)
  {
    if (!*((unsigned char *)this + 96))
    {
      IPC::Decoder::markInvalid(a2);
      goto LABEL_5;
    }
    IPC::Decoder::unwrapForTesting(a2, v8, &v13);
    if (v13)
    {
      uint64_t v12 = v13;
      uint64_t v13 = 0;
      IPC::Connection::processIncomingMessage((uint64_t)this, &v12);
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v12);
      uint64_t v10 = (atomic_uchar *volatile **)*((void *)this + 2);
      uint64_t v11 = 0;
      IPC::Connection::SyncMessageState::dispatchMessages(v10, &v11);
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v13);
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x19873C954);
  }
  if (((*(uint64_t (**)(void, IPC::Connection *, IPC::Decoder *, IPC::Encoder **))(**((void **)this + 1)
                                                                                              + 32))(*((void *)this + 1), this, a2, &v14) & 1) == 0)LABEL_10:IPC::Connection::sendMessageImpl((uint64_t)this, (uint64_t *)&v14, 0, 0);
LABEL_5:
  uint64_t result = (uint64_t)std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v14, v9);
  --*((_DWORD *)this + 21);
  return result;
}

BOOL non-virtual thunk to'WebKit::WebProcessProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, IPC::Encoder **a4)
{
  return WebKit::WebProcessProxy::didReceiveSyncMessage(a1 - 32, a2, a3, a4);
}

BOOL WebKit::WebProcessProxy::didReceiveSyncWebProcessProxyMessage(atomic_uint *a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  char v5 = (unsigned int *)(a1 + 4);
  atomic_fetch_add(a1 + 4, 1u);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xEEE:
      unint64_t v8 = *a4;
      *a4 = 0;
      *(void *)&long long v56 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v56 + 1, a2);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v9 = &unk_1EEA0C468;
      *((void *)v9 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v56;
      uint64_t v10 = *((void *)&v56 + 1);
      long long v56 = 0uLL;
      *((void *)v9 + 2) = v10;
      uint64_t v53 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56 + 1);
      uint64_t v12 = (IPC::Encoder *)v56;
      *(void *)&long long v56 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v11);
        WTF::fastFree(v43, v44);
      }
      WebKit::WebProcessProxy::getNetworkProcessConnection((uint64_t)a1, (uint64_t *)&v53);
      uint64_t v13 = v53;
      uint64_t v53 = 0;
      if (v13) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 0xEEF:
      int v14 = *a4;
      *a4 = 0;
      *(void *)&long long v56 = v14;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v56 + 1, a2);
      int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)int v15 = &unk_1EEA0C440;
      *((void *)v15 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v56;
      uint64_t v16 = *((void *)&v56 + 1);
      long long v56 = 0uLL;
      *((void *)v15 + 2) = v16;
      uint64_t v53 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56 + 1);
      uint64_t v18 = (IPC::Encoder *)v56;
      *(void *)&long long v56 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v45, v46);
      }
      WebKit::WebProcessProxy::shouldTerminate((WebKit::WebProcessProxy *)a1, (uint64_t *)&v53);
      goto LABEL_22;
    case 0xEF0:
      IPC::Decoder::decode<std::tuple<WebCore::WrappedCryptoKey>>(a3, (uint64_t)&v56);
      BOOL v19 = v60 != 0;
      if (!v60) {
        goto LABEL_36;
      }
      uint64_t v20 = *a4;
      *a4 = 0;
      uint64_t v53 = v20;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v54, a2);
      uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v21 = &unk_1EEA0C4E0;
      v21[1] = v53;
      int v22 = v54[0];
      uint64_t v53 = 0;
      v54[0] = 0;
      void v21[2] = v22;
      int v55 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v54);
      uint64_t v24 = v53;
      uint64_t v53 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v23);
        WTF::fastFree(v47, v48);
      }
      if (!v60) {
        goto LABEL_39;
      }
      WebKit::WebProcessProxy::unwrapCryptoKey((uint64_t)a1, &v56, (uint64_t *)&v55);
      uint64_t v26 = (uint64_t)v55;
      int v55 = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      if (!v60) {
        goto LABEL_36;
      }
      uint64_t v27 = v58;
      if (!v58) {
        goto LABEL_36;
      }
      uint64_t v58 = 0;
      int v59 = 0;
      break;
    case 0xEF1:
      unint64_t v28 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if (!v29) {
        goto LABEL_25;
      }
      unint64_t v30 = v28;
      int v31 = *a4;
      *a4 = 0;
      *(void *)&long long v56 = v31;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v56 + 1, a2);
      char v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v32 = &unk_1EEA0C490;
      *((void *)v32 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v56;
      uint64_t v33 = *((void *)&v56 + 1);
      long long v56 = 0uLL;
      *((void *)v32 + 2) = v33;
      uint64_t v53 = v32;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56 + 1);
      int v35 = (IPC::Encoder *)v56;
      *(void *)&long long v56 = 0;
      if (v35)
      {
        IPC::Encoder::~Encoder(v35, v34);
        WTF::fastFree(v49, v50);
      }
      WebKit::WebProcessProxy::waitForSharedPreferencesForWebProcessToSync(a1, v30, (uint64_t *)&v53);
LABEL_22:
      uint64_t v13 = v53;
      uint64_t v53 = 0;
      if (v13) {
LABEL_23:
      }
        (*(void (**)(IPC::Encoder *))(*(void *)v13 + 8))(v13);
LABEL_24:
      BOOL v19 = 1;
      goto LABEL_36;
    case 0xEF2:
      IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, (uint64_t)&v56);
      BOOL v19 = v57 != 0;
      if (!v57) {
        goto LABEL_36;
      }
      uint64_t v36 = *a4;
      *a4 = 0;
      uint64_t v53 = v36;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v54, a2);
      uint64_t v37 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v37 = &unk_1EEA0C4B8;
      v37[1] = v53;
      unint64_t v38 = v54[0];
      uint64_t v53 = 0;
      v54[0] = 0;
      v37[2] = v38;
      int v55 = v37;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v54);
      uint64_t v40 = v53;
      uint64_t v53 = 0;
      if (v40)
      {
        IPC::Encoder::~Encoder(v40, v39);
        WTF::fastFree(v51, v52);
      }
      if (!v57) {
LABEL_39:
      }
        __break(1u);
      WebKit::WebProcessProxy::wrapCryptoKey((uint64_t)a1, (uint64_t *)&v56, (uint64_t *)&v55);
      uint64_t v41 = (uint64_t)v55;
      int v55 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
      if (!v57) {
        goto LABEL_36;
      }
      uint64_t v27 = (WTF *)v56;
      if (!(void)v56) {
        goto LABEL_36;
      }
      *(void *)&long long v56 = 0;
      DWORD2(v56) = 0;
      break;
    default:
LABEL_25:
      BOOL v19 = 0;
      goto LABEL_36;
  }
  WTF::fastFree(v27, v25);
LABEL_36:
  if (a1) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  return v19;
}

BOOL WebKit::WebProcessProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, IPC::Encoder **a4)
{
  if (IPC::MessageReceiverMap::dispatchSyncMessage((uint64_t *)(a1 + 152), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4)) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 512);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = v9 ? v9 - 16 : 0;
  }
  else
  {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  char v11 = IPC::MessageReceiverMap::dispatchSyncMessage((uint64_t *)(v10 + 56), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (v11) {
    return 1;
  }
  unsigned int v13 = a3[25];
  if (v13 >= 0xEF4) {
    unsigned int v13 = 3828;
  }
  if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v13 + 2]) != 193) {
    return 0;
  }

  return WebKit::WebProcessProxy::didReceiveSyncWebProcessProxyMessage((atomic_uint *)a1, a2, (IPC::Decoder *)a3, a4);
}

uint64_t IPC::MessageReceiverMap::dispatchSyncMessage(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v9 = *(unsigned __int16 *)(a3 + 50);
  if (v9 >= 0xEF4) {
    unsigned int v9 = 3828;
  }
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>((atomic_uint **)&v18, *a1, (&IPC::Detail::messageDescriptions)[3 * v9 + 2]);
  char v11 = (unsigned int *)v18;
  if (v18)
  {
    uint64_t v12 = *((void *)v18 + 1);
    if (v12) {
      char v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 32))(*((void *)v18 + 1), a2, a3, a4);
    }
    uint64_t v18 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
      if (v12) {
        return v4 & 1;
      }
    }
    else if (v12)
    {
      return v4 & 1;
    }
  }
  unsigned int v13 = *(unsigned __int16 *)(a3 + 50);
  if (v13 >= 0xEF4) {
    unsigned int v13 = 3828;
  }
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>((unint64_t)&v18, a1[1], (&IPC::Detail::messageDescriptions)[3 * v13 + 2], *(void *)(a3 + 64));
  int v15 = (unsigned int *)v18;
  if (!v18) {
    goto LABEL_15;
  }
  uint64_t v16 = *((void *)v18 + 1);
  if (v16) {
    char v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(*((void *)v18 + 1), a2, a3, a4);
  }
  uint64_t v18 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v14);
    if (v16) {
      return v4 & 1;
    }
    goto LABEL_15;
  }
  if (!v16) {
LABEL_15:
  }
    char v4 = 0;
  return v4 & 1;
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::encode(IPC::Encoder *a1, unsigned char *a2)
{
  IPC::Encoder::addAttachment((uint64_t)a1, (unint64_t)a2);
  IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::encode(a1, (uint64_t)(a2 + 8));
  char v4 = a2[48];
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *char v5 = v4;
    IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(a1, (uint64_t)(a2 + 52));
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 88);
    return (uint64_t)IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 90);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebProcessProxy::getNetworkProcessConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 752);
  if (v3)
  {
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebsiteDataStore::getNetworkProcessConnection((unsigned int *)v3, a1, a2, 1);
    char v5 = *(const void **)(v3 + 8);
    CFRelease(v5);
  }
  else
  {
    uint64_t v6 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v8) = 0;
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "WebProcessProxy should always have a WebsiteDataStore when used by a web process requesting a network process connection", (uint8_t *)&v8, 2u);
    }
    int v8 = 0;
    char v9 = 0;
    char v10 = 0;
    char v11 = 0;
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v7 + 16))(v7, &v8);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v8);
  }
}

unsigned int *WebKit::WebsiteDataStore::getNetworkProcessConnection(unsigned int *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  char v9 = (atomic_uint *)*((void *)a1 + 2);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
  char v10 = *(atomic_uint **)(v8 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  char v11 = *(atomic_uint **)(a2 + 8);
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9E63E8;
  *(void *)(v13 + 8) = v9;
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = v12;
  *(unsigned char *)(v13 + 40) = a4;
  uint64_t v16 = v13;
  WebKit::NetworkProcessProxy::getNetworkProcessConnection(v8, a2, &v16);
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
}

IPC::Encoder *WebKit::NetworkProcessProxy::getNetworkProcessConnection(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy is taking a background assertion because a web process is requesting a connection", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 169))
  {
    WebKit::ResponsivenessTimer::start(a1 + 56);
  }
  else if (!*(unsigned char *)(a1 + 185))
  {
    *(_WORD *)(a1 + 184) = 256;
  }
  uint64_t v26 = *(void *)(a2 + 1112);
  long long v7 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)long long buf = *(_OWORD *)(a2 + 1080);
  long long v25 = v7;
  uint64_t v8 = *(void *)(a2 + 176);
  uint64_t v19 = *(void *)(*(void *)(a2 + 752) + 24);
  uint64_t v20 = v8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  char v9 = *(atomic_uint **)(a1 + 8);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v11 = 387;
  *((void *)v11 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  int v23 = v11;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v20);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v19);
  IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::encode(v11, (uint64_t)buf);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v12 = &unk_1EE9E4180;
  v12[1] = a1;
  void v12[2] = v9;
  v12[3] = v10;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  char v22 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v23, 1, (uint64_t)v21, 1);
  if (v22)
  {
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t result = v23;
  int v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 9));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 10));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 11));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 12));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 13));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 14));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 15));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 17));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 18));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 19));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 20));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 21));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 22));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 23));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 25));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 26));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 27));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 28));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 29));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 30));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 31));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 32));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 33));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 34));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 35));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 36));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 37));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 38));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 39));
}

IPC::Encoder *WebKit::GPUProcessProxy::createGPUProcessConnection(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a4 + 88) = WebKit::GPUProcessProxy::s_hasVP9HardwareDecoder;
  *(_WORD *)(a4 + 90) = WebKit::GPUProcessProxy::s_hasAV1HardwareDecoder;
  uint64_t v8 = *(void *)(a2 + 752);
  if (v8)
  {
    if ((uint64_t v9 = *(void *)(a1 + 136)) != 0 && *(unsigned char *)(v9 + 104) || *(void *)(a1 + 144))
    {
      uint64_t v10 = *(void *)(v8 + 24);
      uint64_t v11 = *(void *)(a1 + 464);
      if (v11)
      {
        int v61 = *(_DWORD *)(v11 - 8);
        unint64_t v62 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
        unint64_t v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
        unint64_t v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
        unsigned int v65 = v61 & ((v64 >> 31) ^ v64);
        uint64_t v66 = *(void *)(v11 + 8 * v65);
        if (v66 == v10) {
          goto LABEL_49;
        }
        int v67 = 1;
        while (v66)
        {
          unsigned int v65 = (v65 + v67) & v61;
          uint64_t v66 = *(void *)(v11 + 8 * v65);
          ++v67;
          if (v66 == v10) {
            goto LABEL_49;
          }
        }
      }
      uint64_t v68 = *(void *)(v8 + 24);
      *(_OWORD *)long long buf = 0u;
      *(_OWORD *)uint64_t v75 = 0u;
      uint64_t v12 = WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)v8);
      WTF::String::operator=((uint64_t *)buf, (WTF::StringImpl **)(v12 + 88));
      unint64_t v73 = 0;
      if (*(void *)buf)
      {
        uint64_t v13 = *(unsigned int *)(*(void *)buf + 4);
        if (v13)
        {
          WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(*(void *)buf + 8), (WebKit::SandboxExtensionImpl *)(v13 | ((unint64_t)((*(_DWORD *)(*(void *)buf + 16) >> 2) & 1) << 32)), 1, (uint64_t)&v70);
          if (v71)
          {
            uint64_t v14 = v70;
            unint64_t v70 = 0;
            uint64_t v15 = *(const char ***)&buf[8];
            *(void *)&buf[8] = v14;
            if (!v15 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v15), WTF::fastFree(v57, v58), v71)) {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v70);
            }
          }
        }
      }
      WTF::String::operator=((uint64_t *)v75, (WTF::StringImpl **)(v12 + 96));
      uint64_t v69 = 0;
      if (v75[0])
      {
        uint64_t v16 = *((unsigned int *)v75[0] + 1);
        if (v16)
        {
          WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v75[0] + 1), (WebKit::SandboxExtensionImpl *)(v16 | ((unint64_t)((*((_DWORD *)v75[0] + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v70);
          if (v71)
          {
            uint64_t v17 = v70;
            unint64_t v70 = 0;
            uint64_t v18 = (const char **)v75[1];
            v75[1] = v17;
            if (!v18 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v18), WTF::fastFree(v59, v60), v71)) {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v70);
            }
          }
        }
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v69);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v73);
      uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v19 = 70;
      *((void *)v19 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
      *((void *)v19 + 66) = (char *)v19 + 16;
      *((void *)v19 + 67) = 512;
      *((void *)v19 + 68) = 0;
      *((void *)v19 + 70) = 0;
      *((void *)v19 + 69) = 0;
      IPC::Encoder::encodeHeader(v19);
      unint64_t v73 = v19;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, &v68);
      IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::encode(v19, (uint64_t)buf);
      LOBYTE(v70) = 0;
      char v72 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v73, 0, (uint64_t)&v70, 1);
      if (v72)
      {
        uint64_t v21 = v70;
        unint64_t v70 = 0;
        if (v21) {
          (*(void (**)(IPC::Encoder *))(*(void *)v21 + 8))(v21);
        }
      }
      char v22 = v73;
      unint64_t v73 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v20);
        WTF::fastFree(v55, v56);
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v75[1]);
      uint64_t v24 = v75[0];
      v75[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      long long v25 = (uint64_t *)(a1 + 464);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&buf[8]);
      uint64_t v27 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v26);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      uint64_t v28 = *(void *)(v8 + 24);
      uint64_t v29 = *v25;
      if (*v25
        || (WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand((uint64_t *)(a1 + 464), 0), (uint64_t v29 = *v25) != 0))
      {
        int v30 = *(_DWORD *)(v29 - 8);
      }
      else
      {
        int v30 = 0;
      }
      unint64_t v31 = (v28 + ~(v28 << 32)) ^ ((unint64_t)(v28 + ~(v28 << 32)) >> 22);
      unint64_t v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
      unint64_t v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
      unsigned int v34 = v30 & ((v33 >> 31) ^ v33);
      int v35 = (void *)(v29 + 8 * v34);
      uint64_t v36 = *v35;
      if (!*v35)
      {
LABEL_40:
        *int v35 = v28;
        uint64_t v39 = *v25;
        if (*v25) {
          int v40 = *(_DWORD *)(v39 - 12) + 1;
        }
        else {
          int v40 = 1;
        }
        *(_DWORD *)(v39 - ++*(_DWORD *)(this + 12) = v40;
        uint64_t v41 = *v25;
        if (*v25) {
          int v42 = *(_DWORD *)(v41 - 12);
        }
        else {
          int v42 = 0;
        }
        uint64_t v43 = (*(_DWORD *)(v41 - 16) + v42);
        unint64_t v44 = *(unsigned int *)(v41 - 4);
        if (v44 > 0x400)
        {
          if (v44 > 2 * v43) {
            goto LABEL_49;
          }
        }
        else if (3 * v44 > 4 * v43)
        {
          goto LABEL_49;
        }
        WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand((uint64_t *)(a1 + 464), v35);
        goto LABEL_49;
      }
      uint64_t v37 = 0;
      int v38 = 1;
      while (v36 != v28)
      {
        if (v36 == -1) {
          uint64_t v37 = v35;
        }
        unsigned int v34 = (v34 + v38) & v30;
        int v35 = (void *)(v29 + 8 * v34);
        uint64_t v36 = *v35;
        ++v38;
        if (!*v35)
        {
          if (v37)
          {
            *uint64_t v37 = 0;
            --*(_DWORD *)(*v25 - 16);
            int v35 = v37;
          }
          goto LABEL_40;
        }
      }
    }
  }
LABEL_49:
  uint64_t v45 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy is taking a background assertion because a web process is requesting a connection", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 169))
  {
    WebKit::ResponsivenessTimer::start(a1 + 56);
  }
  else if (!*(unsigned char *)(a1 + 185))
  {
    *(_WORD *)(a1 + 184) = 256;
  }
  unint64_t v73 = *(IPC::Encoder **)(a2 + 176);
  uint64_t v69 = *(const char ***)(*(void *)(a2 + 752) + 24);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v46 = *(atomic_uint **)(a1 + 8);
  if (v46) {
    atomic_fetch_add(v46, 1u);
  }
  uint64_t v47 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v47 = 72;
  *((void *)v47 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v47 + 66) = (char *)v47 + 16;
  *((void *)v47 + 67) = 512;
  *((void *)v47 + 68) = 0;
  *((void *)v47 + 70) = 0;
  *((void *)v47 + 69) = 0;
  IPC::Encoder::encodeHeader(v47);
  unint64_t v70 = v47;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v47, (uint64_t *)&v73);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v47, (uint64_t *)&v69);
  IPC::Encoder::addAttachment((uint64_t)v47, a3);
  IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::encode(v47, (unsigned char *)a4);
  int v48 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v48 = &unk_1EE9E36F0;
  v48[1] = a1;
  v48[2] = v46;
  uint64_t v49 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)long long buf = v48;
  *(void *)&buf[8] = v49;
  LOBYTE(v75[0]) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v70, 1, (uint64_t)buf, 1);
  if (LOBYTE(v75[0]))
  {
    uint64_t v51 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
  }
  uint64_t result = v70;
  unint64_t v70 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v50);
    return (IPC::Encoder *)WTF::fastFree(v53, v54);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(IPC::Encoder *a1, char *a2)
{
  int v4 = a2[1];
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19873DF0CLL);
    }
    char v7 = 0;
    goto LABEL_8;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19873DEECLL);
  }
  unsigned char *result = 1;
  if (a2[1])
  {
    char v7 = *a2;
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19873DEB0);
    }
LABEL_8:
    unsigned char *result = v7;
    return result;
  }
  uint64_t v9 = (WebKit::ResponsivenessTimer *)std::__throw_bad_optional_access[abi:sn180100]();
  return (unsigned char *)WebKit::ResponsivenessTimer::start(v9);
}

uint64_t WebKit::ResponsivenessTimer::start(uint64_t this)
{
  if (!*(unsigned char *)(this + 49))
  {
    uint64_t v1 = this;
    *(_WORD *)(this + 49) = 1;
    isActive = (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 8));
    if (isActive)
    {
      this = WTF::MonotonicTime::now(isActive);
      *(double *)(v1 + 40) = *(double *)(v1 + 56) + v3;
    }
    else
    {
      *(void *)(v1 + 40) = 0;
      return WTF::RunLoop::TimerBase::start();
    }
  }
  return this;
}

void *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 8 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    uint64_t v15 = (void *)v6;
    do
    {
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        uint64_t v16 = (void *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(a1, v15);
        void *v16 = *v15;
        if (v15 == a3) {
          uint64_t v13 = v16;
        }
      }
      ++v15;
      --v14;
    }
    while (v14);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

void *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_1,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  unsigned int v7 = **(atomic_uint ***)(a1 + 16);
  atomic_fetch_add(v7, 1u);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2405;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v8, *(_WORD *)(v5 + 64));
  IPC::ArgumentCoder<unsigned long long,void>::encode<IPC::Encoder>(v8, *v6);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9DA3D8;
  v9[1] = v7;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    uint64_t v11 = v15[0];
    v15[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(WebKit::NetworkProcessProxy *this)
{
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    uint64_t v3 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v3 = &unk_1EE9E40E0;
    *((void *)v3 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = this;
    v67[0] = v3;
    WTF::callOnMainRunLoopAndWait();
    int v4 = v67[0];
    v67[0] = 0;
    if (v4) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v4 + 8))(v4);
    }
  }
  __int16 v69 = 0;
  *(_OWORD *)int v67 = 0u;
  *(_OWORD *)uint64_t v68 = 0u;
  *(_OWORD *)unint64_t v70 = 0u;
  long long v71 = 0u;
  char isFullWebBrowserOrRunningTest = 0;
  *(_OWORD *)unint64_t v73 = 0u;
  *(_OWORD *)CFTypeRef v74 = 0u;
  *(_OWORD *)uint64_t v75 = 0u;
  *(_OWORD *)uint64_t v76 = 0u;
  int v77 = 1;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  uint64_t v81 = 0;
  WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters(&v63);
  uint64_t v6 = v63;
  unint64_t v63 = 0;
  unsigned int v7 = v67[0];
  v67[0] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v64;
  unint64_t v64 = 0;
  uint64_t v9 = v67[1];
  v67[1] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v65;
  unsigned int v65 = 0;
  uint64_t v11 = v68[0];
  v68[0] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::operator=[abi:sn180100]((WTF::StringImpl ****)&v68[1], (WTF::StringImpl *)&v66);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v66, v12);
  uint64_t v14 = v65;
  unsigned int v65 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v64;
  unint64_t v64 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v13);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  char v16 = v63;
  unint64_t v63 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v63, &qword_1EB35A6F0);
  if (HIDWORD(v73[1])) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v73[0], (WTF *)((char *)v73[0] + 8 * HIDWORD(v73[1])));
  }
  uint64_t v18 = v73[0];
  if (v73[0])
  {
    v73[0] = 0;
    LODWORD(v73[1]) = 0;
    WTF::fastFree(v18, v17);
  }
  v73[0] = v63;
  uint64_t v19 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  v73[1] = v19;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v17);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v63, &qword_1EB35A6F8);
  if (HIDWORD(v74[1])) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v74[0], (WTF *)((char *)v74[0] + 8 * HIDWORD(v74[1])));
  }
  uint64_t v21 = v74[0];
  if (v74[0])
  {
    v74[0] = 0;
    LODWORD(v74[1]) = 0;
    WTF::fastFree(v21, v20);
  }
  v74[0] = v63;
  char v22 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  v74[1] = v22;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v20);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v63, &qword_1EB35A700);
  if (HIDWORD(v75[1])) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v75[0], (WTF *)((char *)v75[0] + 8 * HIDWORD(v75[1])));
  }
  uint64_t v24 = v75[0];
  if (v75[0])
  {
    v75[0] = 0;
    LODWORD(v75[1]) = 0;
    WTF::fastFree(v24, v23);
  }
  v75[0] = v63;
  long long v25 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  v75[1] = v25;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v23);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v63, &qword_1EB35A708);
  if (HIDWORD(v76[1])) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v76[0], (WTF *)((char *)v76[0] + 8 * HIDWORD(v76[1])));
  }
  uint64_t v27 = v76[0];
  if (v76[0])
  {
    v76[0] = 0;
    LODWORD(v76[1]) = 0;
    WTF::fastFree(v27, v26);
  }
  v76[0] = v63;
  uint64_t v28 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  v76[1] = v28;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v26);
  {
    char v29 = WebKit::LegacyGlobalSettings::singleton(void)::properties;
  }
  else
  {
    char v29 = 2;
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  LOBYTE(v69) = v29;
  {
    WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
  }
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v63, (uint64_t **)&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set);
  if (HIDWORD(v70[1])) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v70[0], (WTF *)((char *)v70[0] + 8 * HIDWORD(v70[1])));
  }
  unint64_t v31 = v70[0];
  if (v70[0])
  {
    v70[0] = 0;
    LODWORD(v70[1]) = 0;
    WTF::fastFree(v31, v30);
  }
  v70[0] = v63;
  unint64_t v32 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  v70[1] = v32;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v30);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  unint64_t v33 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)&v80, (void **)&qword_1EB35A710);
  WebKit::WebsiteDataStore::parametersFromEachWebsiteDataStore((WebKit::WebsiteDataStore *)v33, (uint64_t)&v63);
  if (HIDWORD(v78))
  {
    uint64_t v35 = 0;
    uint64_t v36 = v78;
    uint64_t v37 = 704 * HIDWORD(v78);
    do
    {
      uint64_t v38 = v36 + v35;
      if (*(unsigned char *)(v36 + v35 + 696)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v38 + 688));
      }
      if (*(unsigned char *)(v38 + 680)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v36 + v35 + 672));
      }
      uint64_t v39 = v36 + v35;
      if (*(unsigned char *)(v36 + v35 + 664)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v39 + 656));
      }
      if (*(unsigned char *)(v39 + 648)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v36 + v35 + 640));
      }
      uint64_t v40 = v36 + v35;
      WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)(v36 + v35 + 32), v34);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v36 + v35 + 16));
      uint64_t v41 = *(WTF **)(v36 + v35);
      if (v41)
      {
        *(void *)uint64_t v40 = 0;
        *(_DWORD *)(v40 + 8) = 0;
        WTF::fastFree(v41, v34);
      }
      v35 += 704;
    }
    while (v37 != v35);
  }
  int v42 = (WTF *)v78;
  if ((void)v78)
  {
    *(void *)&long long v78 = 0;
    DWORD2(v78) = 0;
    WTF::fastFree(v42, v34);
  }
  *(void *)&long long v78 = v63;
  uint64_t v43 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  *((void *)&v78 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v43;
  WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v34);
  unint64_t v44 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)unint64_t v44 = &unk_1EE9E4108;
  *((void *)v44 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = this;
  unint64_t v63 = v44;
  WebKit::WebsiteDataStore::forEachWebsiteDataStore((WebKit *)&v63);
  uint64_t v45 = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v44 + 8))(v44);
  BYTE2(v77) = WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(v45);
  HIBYTE(v77) = CFPreferencesGetAppBooleanValue(@"EnableModernDownloadProgress", @"com.apple.WebKit", 0) != 0;
  WebKit::WebProcessProxy::allowedFirstPartiesForCookies((uint64_t)&v63);
  if (HIDWORD(v79)) {
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct((WTF::StringImpl *)v79, (WTF::StringImpl *)(v79 + 16 * HIDWORD(v79)));
  }
  uint64_t v47 = (WTF *)v79;
  if ((void)v79)
  {
    *(void *)&long long v79 = 0;
    DWORD2(v79) = 0;
    WTF::fastFree(v47, v46);
  }
  *(void *)&long long v79 = v63;
  int v48 = v64;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  *((void *)&v79 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v48;
  uint64_t v49 = (WebKit *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v46);
  char isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest(v49);
  {
    unk_1EB35A530 = 0u;
    unk_1EB35A540 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v80 + 2, (uint64_t)&qword_1EB35A528);
  WebKit::WebProcessPool::platformInitializeNetworkProcess((WebKit::WebProcessPool *)v67, v50);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v51 = (atomic_uint *)*((void *)this + 1);
  if (v51) {
    atomic_fetch_add(v51, 1u);
  }
  *(void *)&long long v61 = v51;
  WebKit::AuxiliaryProcessProxy::initializationActivityAndGrant(this, (void *)&v61 + 1);
  uint64_t v52 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v52 = 415;
  *((void *)v52 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v52 + 66) = (char *)v52 + 16;
  *((void *)v52 + 67) = 512;
  *((void *)v52 + 68) = 0;
  *((void *)v52 + 70) = 0;
  *((void *)v52 + 69) = 0;
  IPC::Encoder::encodeHeader(v52);
  uint64_t v82 = v52;
  IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::encode(v52, (uint64_t)v67);
  uint64_t v53 = v62;
  uint64_t v54 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v54 = &unk_1EE9E4130;
  *(_OWORD *)(v54 + 8) = v61;
  *(void *)(v54 + 24) = v53;
  int v55 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v63 = (WTF::StringImpl *)v54;
  unint64_t v64 = v55;
  LOBYTE(v65) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v82, 0, (uint64_t)&v63, 1);
  if ((_BYTE)v65)
  {
    char v57 = v63;
    unint64_t v63 = 0;
    if (v57) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v57 + 8))(v57);
    }
  }
  uint64_t v58 = v82;
  uint64_t v82 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v67, (WTF::StringImpl *)v56);
}

uint64_t WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    int v4 = (WTF::StringImpl *)*(unsigned int *)(a2 + 12);
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
    }
    else
    {
      WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk*>((uint64_t)&v6, *(void *)a2, *(void *)a2 + 32 * a1[3], *(void *)a1);
    WTF::VectorCopier<false,WebCore::OrganizationStorageAccessPromptQuirk>::uninitializedCopy<WebCore::OrganizationStorageAccessPromptQuirk>(*(void *)a2 + 32 * a1[3], *(void *)a2 + 32 * *(unsigned int *)(a2 + 12), *(void *)a1 + 32 * a1[3]);
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    WTF::String::operator=((uint64_t *)a4, (WTF::StringImpl **)v5);
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=((uint64_t *)(a4 + 8), (uint64_t *)(v5 + 8));
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a4 + 16), v5 + 16);
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t WTF::VectorCopier<false,WebCore::OrganizationStorageAccessPromptQuirk>::uninitializedCopy<WebCore::OrganizationStorageAccessPromptQuirk>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t *)(a3 + 8);
    do
    {
      uint64_t v6 = *(_DWORD **)v4;
      if (*(void *)v4) {
        *v6 += 2;
      }
      *(v5 - WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = (uint64_t)v6;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v5, (uint64_t *)(v4 + 8));
      uint64_t result = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v5 + 1), (uint64_t *)(v4 + 16));
      v4 += 32;
      v5 += 4;
    }
    while (v4 != a2);
  }
  return result;
}

void sub_19873EC98(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 8);
  *(void *)(v2 - 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19873ED78);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::OrganizationStorageAccessPromptQuirk>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::OrganizationStorageAccessPromptQuirk>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)result + 16;
    do
    {
      unsigned int v7 = (WTF::StringImpl **)(v5 - 16);
      uint64_t v6 = *(void *)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = 0;
      uint64_t v8 = *(void *)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = v8;
      uint64_t v9 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 16) = v9;
      LODWORD(v9) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 24) = v9;
      LODWORD(v9) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + ++*(_DWORD *)(this + 12) = 0;
      *(_DWORD *)(a3 + 28) = v9;
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      uint64_t v10 = *(void *)(v5 - 8);
      if (v10) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v10, a2);
      }
      uint64_t result = *v7;
      *unsigned int v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 32;
      a3 += 32;
    }
    while (v7 + 4 != (WTF::StringImpl **)a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    if (result[3] > a2) {
      uint64_t result = WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (WTF::StringImpl *)a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::OrganizationStorageAccessPromptQuirk>::move(v4, (WTF::StringImpl *)((char *)v4 + 32 * v5), (uint64_t)result);
      }
    }
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

WTF *WebKit::WebsiteDataStore::parametersFromEachWebsiteDataStore@<X0>(WebKit::WebsiteDataStore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WebKit::allDataStores(this);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (WebKit::allDataStores(void)::map && (unsigned int v4 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12)) != 0)
  {
    if (v4 >= 0x5D1746)
    {
      __break(0xC471u);
      return result;
    }
    int v5 = 704 * v4;
    uint64_t v6 = WTF::fastMalloc((WTF *)(704 * v4));
    *(_DWORD *)(a2 + 8) = (v5 & 0xFFFFFFC0) / 0x2C0;
    *(void *)a2 = v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::allDataStores(void)::map);
  unsigned int v7 = result;
  uint64_t v9 = v8;
  if (WebKit::allDataStores(void)::map) {
    uint64_t v10 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((WTF *)v10 != result)
  {
    unsigned int v11 = 0;
    do
    {
      WebKit::WebsiteDataStore::parameters(*(WebKit::WebsiteDataStore **)(*((void *)v7 + 1) + 8), (uint64_t)&v26);
      uint64_t v12 = v6 + 704 * v11;
      uint64_t v13 = v26;
      uint64_t v26 = 0;
      *(void *)uint64_t v12 = v13;
      LODWORD(v13) = v27;
      int v27 = 0;
      *(_DWORD *)(v12 + 8) = v13;
      LODWORD(v13) = v28;
      int v28 = 0;
      *(_DWORD *)(v12 + ++*(_DWORD *)(this + 12) = v13;
      uint64_t v14 = v29;
      char v29 = 0;
      *(void *)(v12 + 16) = v14;
      WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters(v12 + 32, (uint64_t)v30);
      *(unsigned char *)(v12 + 640) = 0;
      *(unsigned char *)(v12 + 648) = 0;
      if (v32)
      {
        char v22 = v31;
        unint64_t v31 = 0;
        *(void *)(v12 + 640) = v22;
        *(unsigned char *)(v12 + 648) = 1;
      }
      unsigned int v16 = v11;
      uint64_t v17 = v6 + 704 * v11;
      *(unsigned char *)(v17 + 656) = 0;
      *(unsigned char *)(v17 + 664) = 0;
      if (v34)
      {
        int v23 = v33;
        unint64_t v33 = 0;
        *(void *)(v17 + 656) = v23;
        *(unsigned char *)(v17 + 664) = 1;
      }
      uint64_t v18 = v6 + 704 * v11;
      *(unsigned char *)(v18 + 672) = 0;
      *(unsigned char *)(v18 + 680) = 0;
      int v19 = v36;
      if (v36)
      {
        uint64_t v24 = v35;
        uint64_t v35 = 0;
        *(void *)(v18 + 672) = v24;
        *(unsigned char *)(v18 + 680) = 1;
      }
      uint64_t v20 = v6 + 704 * v11;
      *(unsigned char *)(v20 + 688) = 0;
      *(unsigned char *)(v20 + 696) = 0;
      if (v38)
      {
        long long v25 = v37;
        uint64_t v37 = 0;
        *(void *)(v20 + 688) = v25;
        *(unsigned char *)(v20 + 696) = 1;
        *(_DWORD *)(a2 + ++*(_DWORD *)(this + 12) = ++v11;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v37);
        if (!v36) {
          goto LABEL_19;
        }
      }
      else
      {
        ++v11;
        *(_DWORD *)(a2 + ++*(_DWORD *)(this + 12) = v16 + 1;
        if (!v19) {
          goto LABEL_19;
        }
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v35);
LABEL_19:
      if (v34) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v33);
      }
      if (v32) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v31);
      }
      WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v30, v15);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
      uint64_t result = v26;
      if (v26)
      {
        uint64_t v26 = 0;
        int v27 = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v21);
      }
      while (1)
      {
        unsigned int v7 = (WTF *)((char *)v7 + 16);
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*(void *)v7 + 1) > 1) {
          goto LABEL_29;
        }
      }
      unsigned int v7 = v9;
LABEL_29:
      ;
    }
    while (v7 != (WTF *)v10);
  }
  return result;
}

void WebKit::WebsiteDataStore::forEachWebsiteDataStore(WebKit *a1)
{
  WebKit::allDataStores(a1);
  int v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::allDataStores(void)::map);
  uint64_t v3 = v2;
  int v5 = v4;
  if (WebKit::allDataStores(void)::map) {
    uint64_t v6 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  if ((void *)v6 != v2)
  {
    do
    {
      uint64_t v7 = *(void *)(v3[1] + 8);
      CFRetain(*(CFTypeRef *)(v7 + 8));
      (*(void (**)(void, uint64_t))(**(void **)a1 + 16))(*(void *)a1, v7);
      CFRelease(*(CFTypeRef *)(v7 + 8));
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != (void *)v6);
  }
}

uint64_t WebKit::WebProcessProxy::allowedFirstPartiesForCookies@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  WebKit::WebProcessProxy::globalPages((uint64_t)&v23);
  if (v24)
  {
    unsigned int v4 = v23;
    uint64_t v5 = 8 * v24;
    do
    {
      uint64_t v6 = *v4;
      CFRetain(*(CFTypeRef *)(*v4 + 8));
      uint64_t v7 = *(void *)(*(void *)(v6 + 256) + 176);
      WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v6, (uint64_t *)&v18);
      MEMORY[0x19972E890](v19, &v18, 0);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)v19);
      uint64_t v9 = v20;
      uint64_t v20 = 0;
      uint64_t v21 = v7;
      char v22 = v9;
      uint64_t v10 = *(unsigned int *)(a1 + 12);
      if (v10 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>(a1, (unint64_t)&v21);
      }
      else
      {
        unsigned int v11 = (void *)(*(void *)a1 + 16 * v10);
        *unsigned int v11 = v7;
        uint64_t v12 = v22;
        char v22 = 0;
        v11[1] = v12;
        ++*(_DWORD *)(a1 + 12);
      }
      uint64_t v13 = v22;
      char v22 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v8);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v20;
      uint64_t v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v8);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v15 = v19[0];
      v19[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v8);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      unsigned int v16 = v18;
      uint64_t v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v8);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v3);
}

void WebKit::WebProcessProxy::globalPages(uint64_t a1@<X8>)
{
  {
    uint64_t v3 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    if (v3 && (uint64_t v4 = *(unsigned int *)(v3 - 12), v4))
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a1 + 8) = v4;
      *(void *)a1 = v5;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::WebProcessProxy::globalPageMap(void)::pageMap);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (WebKit::WebProcessProxy::globalPageMap(void)::pageMap) {
    uint64_t v10 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap
  }
        + 16 * *(unsigned int *)(WebKit::WebProcessProxy::globalPageMap(void)::pageMap - 4);
  else {
    uint64_t v10 = 0;
  }
  if ((void *)v10 != v6)
  {
    unsigned int v11 = 0;
    do
    {
      unsigned int v12 = v11;
      uint64_t v13 = *(void *)(v7[1] + 8);
      if (v13) {
        uint64_t v14 = v13 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      CFRetain(*(CFTypeRef *)(v14 + 8));
      unsigned int v11 = v12 + 1;
      *(void *)(v5 + 8 * v++*(_DWORD *)(this + 12) = v14;
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 12) = v12 + 1;
      while (1)
      {
        v7 += 2;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v7 = v9;
LABEL_20:
      ;
    }
    while (v7 != (void *)v10);
  }
}

unsigned int *WebKit::WebProcessPool::platformInitializeNetworkProcess(WebKit::WebProcessPool *this, WebKit::NetworkProcessCreationParameters *a2)
{
  WebCore::applicationBundleIdentifier((uint64_t *)&v19, this);
  uint64_t v4 = v19;
  int v19 = 0;
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = v4;
  if (v5)
  {
    int v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v5, v3);
    uint64_t v5 = v19;
    int v19 = 0;
    if (!v5) {
      goto LABEL_6;
    }
    int v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v7);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)uint64_t v5 = v6;
  }
LABEL_6:
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v9 = MEMORY[0x19972CF60]();
  uint64_t v10 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = v9;
  if (v10) {
    CFRelease(v10);
  }
  *((unsigned char *)this + 33) = [v8 BOOLForKey:@"WebKitSuppressMemoryPressureHandler"];
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    goto LABEL_10;
  }
  if (WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key)
  {
LABEL_10:
    unsigned int v11 = (__CFString *)WTF::StringImpl::operator NSString *();
    goto LABEL_11;
  }
  unsigned int v11 = &stru_1EEA10550;
LABEL_11:
  if ([v8 objectForKey:v11])
  {
    {
      if (!WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key)
      {
        unsigned int v12 = &stru_1EEA10550;
        goto LABEL_15;
      }
    }
    else
    {
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned int v12 = (__CFString *)WTF::StringImpl::operator NSString *();
LABEL_15:
    char v13 = [v8 BOOLForKey:v12];
    goto LABEL_17;
  }
  char v13 = 1;
LABEL_17:
  *((unsigned char *)this + 144) = v13;
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    goto LABEL_19;
  }
  if (WebKit::WebPreferencesKey::ftpEnabledKey(void)::key)
  {
LABEL_19:
    uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    goto LABEL_20;
  }
  uint64_t v14 = &stru_1EEA10550;
LABEL_20:
  uint64_t v15 = (WebKit::StorageAccessPromptQuirkController *)[v8 objectForKey:v14];
  if (v15)
  {
    {
      if (!WebKit::WebPreferencesKey::ftpEnabledKey(void)::key)
      {
        unsigned int v16 = &stru_1EEA10550;
        goto LABEL_24;
      }
    }
    else
    {
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned int v16 = (__CFString *)WTF::StringImpl::operator NSString *();
LABEL_24:
    uint64_t v15 = (WebKit::StorageAccessPromptQuirkController *)[v8 BOOLForKey:v16];
  }
  *((unsigned char *)this + 145) = (_BYTE)v15;
  uint64_t v17 = WebKit::StorageAccessPromptQuirkController::shared(v15);
  return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 48, (uint64_t)v17 + 8);
}

void *WebKit::StorageAccessPromptQuirkController::shared(WebKit::StorageAccessPromptQuirkController *this)
{
  {
    unk_1EB35A530 = 0u;
    unk_1EB35A540 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  return &WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance;
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  uint64_t v6 = v4;
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    uint64_t v4 = (WTF::StringImpl *)*(unsigned int *)(a2 + 12);
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
    }
    else
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WTF::URL const*,WTF::URL const*,WTF::URL*,0>(*(void *)a2, *(void *)a2 + 40 * a1[3], *(void *)a1);
    uint64_t v5 = a1[3];
    unsigned int v6 = *(_DWORD *)(a2 + 12);
    if (v5 != v6)
    {
      uint64_t v7 = *(void *)a2 + 40 * v6;
      uint64_t v8 = 5 * v5;
      uint64_t v9 = *(void *)a1 + 40 * v5;
      uint64_t v10 = *(void *)a2 + 8 * v8;
      do
      {
        unsigned int v11 = *(_DWORD **)v10;
        if (*(void *)v10) {
          *v11 += 2;
        }
        *(void *)uint64_t v9 = v11;
        long long v12 = *(_OWORD *)(v10 + 8);
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v9 + 8) = v12;
        v10 += 40;
        v9 += 40;
      }
      while (v10 != v7);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v5;
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WTF::URL const*,WTF::URL const*,WTF::URL*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    WTF::String::operator=((uint64_t *)a3, (WTF::StringImpl **)v4);
    long long v6 = *(_OWORD *)(v4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(a3 + 24) = v6;
    a3 += 40;
    v4 += 40;
  }
  while (v4 != v5);
  return v5;
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x6666667)
  {
    int v5 = 40 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a2 + 40 * v7;
      do
      {
        uint64_t v10 = *(_DWORD **)v8;
        if (*(void *)v8) {
          *v10 += 2;
        }
        *(void *)uint64_t v6 = v10;
        long long v11 = *(_OWORD *)(v8 + 8);
        *(_OWORD *)(v6 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v6 + 8) = v11;
        v8 += 40;
        v6 += 40;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_1,void,WebKit::WebsiteDataStore &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = (unsigned int *)WebKit::NetworkProcessProxy::addSession(v3, (unsigned int *)a2, 0);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  uint64_t v5 = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = v3;
  if (v5)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::URL,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(a1, a2 + 1);

  return IPC::VectorArgumentCoder<false,WTF::URL,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

unint64_t IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 32));
  char v4 = *(unsigned char *)(a2 + 33);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_22;
  }
  *uint64_t v5 = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 40);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<__CFData const*,void>::encode(a1, *(CFTypeRef *)(a2 + 64));
  char v7 = *(unsigned char *)(a2 + 72);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19873FE1CLL);
  }
  *uint64_t v8 = v7;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 80);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 112);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 128);
  char v10 = *(unsigned char *)(a2 + 144);
  long long v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19873FE3CLL);
  }
  *long long v11 = v10;
  char v13 = *(unsigned char *)(a2 + 145);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19873FE5CLL);
  }
  *uint64_t v14 = v13;
  char v16 = *(unsigned char *)(a2 + 146);
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x19873FE7CLL);
  }
  unsigned char *v17 = v16;
  char v19 = *(unsigned char *)(a2 + 147);
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x19873FDFCLL);
  }
  unsigned char *v20 = v19;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 164));
  unsigned int v22 = *(_DWORD *)(a2 + 164);
  if (v22)
  {
    uint64_t v23 = *(void *)(a2 + 152);
    uint64_t v24 = 704 * v22;
    do
    {
      IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::encode(a1, v23);
      v23 += 704;
      v24 -= 704;
    }
    while (v24);
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 180));
  uint64_t v25 = *(unsigned int *)(a2 + 180);
  if (v25)
  {
    uint64_t v26 = *(uint64_t **)(a2 + 168);
    int v27 = &v26[2 * v25];
    do
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v26);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v26 + 1);
      v26 += 2;
    }
    while (v26 != v27);
  }
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 184));
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 204));
  uint64_t v29 = *(unsigned int *)(a2 + 204);
  if (v29)
  {
    int v30 = *(uint64_t **)(a2 + 192);
    uint64_t v31 = 32 * v29;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode(a1, v30);
      v30 += 4;
      v31 -= 32;
    }
    while (v31);
  }
  return result;
}

const char **IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));

  return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 24));
}

void WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *((void *)this[2] + 3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (*(void *)(*(void *)(v5 + 128) + 8) == v5)
        {
          uint64_t v6 = *(void *)(*((void *)this[11] + 1) + 296);
          if (v6)
          {
            v18[0] = (WTF::StringImpl *)WTF::URL::viewWithoutQueryOrFragmentIdentifier((WTF::URL *)(v6 + 768));
            v18[1] = v7;
            WTF::StringView::toStringWithoutCopying((uint64_t)v18, &v19);
            MEMORY[0x19972E890](v20, &v19, 0);
            uint64_t v9 = v19;
            char v19 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2) {
                uint64_t v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v8);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
            char v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v9);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v18, (const WTF::URL *)v20);
            int haveStorageAccessQuirksForDomain = WebKit::WebProcess::haveStorageAccessQuirksForDomain(v10, v18);
            char v13 = v18[0];
            v18[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                char v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
            if (haveStorageAccessQuirksForDomain)
            {
              uint64_t v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v13);
              char v16 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v15) + 24);
              v18[0] = (WTF::StringImpl *)v20;
              WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(v6 + 16), v6);
              uint64_t v17 = (atomic_uint *)(*(void *)(v6 + 16) & 0xFFFFFFFFFFFFLL);
              if (v17) {
                atomic_fetch_add(v17, 1u);
              }
              char v19 = (WTF::StringImpl *)v17;
              IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(v16, (uint64_t **)v18, (uint64_t *)&v19);
              if (v19) {
                WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v19, v11);
              }
            }
            uint64_t v14 = v20[0];
            v20[0] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v11);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
  uint64_t v6 = (WTF **)(v2 + 8 * v5);
  if (WTF::equal(*v6, 0, v7)) {
    return 0;
  }
  int v9 = 1;
  while (*v6 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v6, *a2, v8) & 1) == 0)
  {
    unsigned int v5 = (v5 + v9) & v4;
    uint64_t v6 = (WTF **)(v2 + 8 * v5);
    int v11 = WTF::equal(*v6, 0, v8);
    uint64_t result = 0;
    ++v9;
    if (v11) {
      return result;
    }
  }
  return 1;
}

uint64_t WTF::StringView::toStringWithoutCopying@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (!*(unsigned char *)(this + 12))
  {
    if (*(_DWORD *)(this + 8))
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(this + 8)) {
    goto LABEL_8;
  }
  this = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_4:
  uint64_t v3 = v4;
LABEL_5:
  *a2 = v3;
  return this;
}

uint64_t WebKit::WebProcess::haveStorageAccessQuirksForDomain(WebKit::WebProcess *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 101, a2);
}

uint64_t WebKit::WebPageProxy::listenForLayoutMilestones(uint64_t result, unsigned __int16 a2)
{
  unsigned __int16 v4 = a2;
  uint64_t v2 = *(void *)(result + 32);
  if (*(unsigned __int16 *)(v2 + 936) != a2)
  {
    *(_WORD *)(v2 + 936) = a2;
    if (!*(unsigned char *)(result + 801))
    {
      if (*(unsigned char *)(result + 800))
      {
        uint64_t v3 = &v4;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ListenForLayoutMilestones>(*(void *)(result + 256), (__int16 **)&v3, *(void *)(v2 + 1928), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ListenForLayoutMilestones>(uint64_t a1, __int16 **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2306;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v8, **a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebPageProxy::setUseFixedLayout(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 777) != a2)
  {
    *(unsigned char *)(this + 777) = a2;
    if ((a2 & 1) == 0) {
      *(void *)(*(void *)(this + 32) + 720) = 0;
    }
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseFixedLayout>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseFixedLayout>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2479;
  *((void *)v8 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::RemoteDisplayListRecorderProxy::recordScale(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatSize *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = (float *)a2;
  uint64_t v2 = *((void *)this + 481);
  if (v2)
  {
    unsigned __int16 v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, &v49);
      unsigned int v5 = v49;
      if (v49)
      {
        uint64_t v6 = (WTF::ApproximateTime *)*((void *)this + 479);
        if (v6) {
          goto LABEL_74;
        }
        int v48 = 0;
        while (1)
        {
          uint64_t v7 = *((void *)this + 478);
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v9);
            if (!buf[16]) {
              goto LABEL_67;
            }
            uint64_t v24 = *(void *)buf;
            unint64_t v25 = *(void *)&buf[8];
            unint64_t v26 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v27 = v26 - *(void *)buf;
            if (v26 < *(void *)buf)
            {
              unint64_t v29 = 0;
              unint64_t v28 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v28 = 0;
              if (v27 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v29 = 0;
              }
              else
              {
                unint64_t v29 = 0;
                if (v27 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v27) = 2871;
                  unint64_t v28 = v25;
                  unint64_t v29 = v27 + 2;
                }
              }
            }
            unint64_t v30 = (v24 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v30 >= v24 + v29)
            {
              unint64_t v31 = v30 - v24;
              if (v31 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_67;
              }
              unint64_t v29 = v31 + 8;
              if (v31 + 8 > v28) {
                goto LABEL_67;
              }
              *(void *)(v24 + v3WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v7;
            }
            if (!v28) {
              goto LABEL_67;
            }
            unint64_t v32 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v33 = *((void *)v5 + 8);
            if (v32 + 16 >= v33) {
              unint64_t v32 = 0;
            }
            if (v29 <= 0x10) {
              unint64_t v29 = 16;
            }
            unint64_t v34 = v32 + v29;
            if (v33 <= v34) {
              unint64_t v35 = 0;
            }
            else {
              unint64_t v35 = v34;
            }
            *((void *)v5 + 10) = v35;
            unint64_t v36 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v35);
            atomic_uint v37 = v5[29];
            if (v36 == 0x80000000 || v37 != 0)
            {
              unsigned int v39 = v37 + 1;
              v5[29] = v39;
              if (v39 >= v5[28])
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](v5[23]);
                }
                v5[29] = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), &v50, v9);
          if (!v52) {
            goto LABEL_67;
          }
          *(void *)long long buf = v50;
          *(void *)&buf[8] = v51;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v50;
          unint64_t v13 = v11 - v50;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v51)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v50 + v13) = 871;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          uint64_t v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, v47);
          if (*(void *)&buf[8])
          {
            uint64_t v15 = *(void *)&buf[16];
            unint64_t v16 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v17 = *((void *)v5 + 8);
            if (v16 + 16 >= v17) {
              unint64_t v16 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v15 = 16;
            }
            unint64_t v18 = v16 + v15;
            if (v17 <= v18) {
              unint64_t v18 = 0;
            }
            *((void *)v5 + 10) = v18;
            unint64_t v19 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v18);
            atomic_uint v20 = v5[29];
            if (v19 == 0x80000000 || v20 != 0)
            {
              unsigned int v23 = v20 + 1;
              v5[29] = v23;
              if (v23 >= v5[28])
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](v5[23]);
                }
                v5[29] = 0;
              }
            }
            goto LABEL_27;
          }
          if (v52) {
            break;
          }
          __break(1u);
LABEL_74:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, *((void *)this + 480), &v48);
          uint64_t v6 = v48;
          if (v48 && !*((unsigned char *)v48 + 4016))
          {
            *((unsigned char *)v48 + 4016) = 1;
            uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v50, v51);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Scale>(*(uint64_t *)buf, &v47, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v42) {
          goto LABEL_27;
        }
LABEL_67:
        uint64_t v43 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v44 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_Scale";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v44;
          _os_log_impl(&dword_1985F2000, v43, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v45 = *((void *)this + 481);
        if (v45)
        {
          uint64_t v46 = *(unsigned char **)(v45 + 8);
          if (v46) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v46);
          }
        }
LABEL_27:
        unsigned int v22 = v48;
        int v48 = 0;
        if (v22) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v22 + 1, v14);
        }
        uint64_t v49 = 0;
        if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v5);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5, v14);
          WTF::fastFree(v40, v41);
        }
      }
    }
  }
}

uint64_t WebKit::WebPage::updateSettingsGenerated(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2, WebCore::Settings *a3)
{
  unsigned int v5 = WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(this);
  BoolValueForKey = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v5, v6);
  uint64_t v8 = 0x2000000000;
  if (!BoolValueForKey) {
    uint64_t v8 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFDFFFFFFFFFLL | v8;
  double v9 = WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(BoolValueForKey);
  unint64_t v11 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v9, v10);
  uint64_t v12 = 0x800000000;
  if (!v11) {
    uint64_t v12 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFF7FFFFFFFFLL | v12;
  unint64_t v13 = WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(v11);
  uint64_t v15 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v13, v14);
  uint64_t v16 = 0x100000000;
  if (!v15) {
    uint64_t v16 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFEFFFFFFFFLL | v16;
  unint64_t v17 = WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(v15);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v17, &v1930);
  WTF::String::operator=((uint64_t *)a2 + 48, &v1930);
  unint64_t v19 = v1930;
  v1930 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      unint64_t v19 = (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  atomic_uint v20 = (unint64_t *)((char *)a2 + 664);
  uint64_t v21 = WebKit::WebPreferencesKey::fantasyFontFamilyKey(v19);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v21, &v1930);
  WebCore::SettingsBase::setFantasyFontFamily();
  unsigned int v23 = v1930;
  v1930 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      unsigned int v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = WebKit::WebPreferencesKey::minimumZoomFontSizeKey(v23);
  *((double *)a2 + 8WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v24);
  unint64_t v26 = WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(v25);
  double DoubleValueForKey = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v26);
  unint64_t v28 = (WebKit::WebPreferencesKey *)WebCore::Settings::setMinimumLogicalFontSize(a2, DoubleValueForKey);
  unint64_t v29 = WebKit::WebPreferencesKey::minimumFontSizeKey(v28);
  double v30 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v29);
  unint64_t v31 = (WebKit::WebPreferencesKey *)WebCore::Settings::setMinimumFontSize(a2, v30);
  unint64_t v32 = WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(v31);
  unint64_t v34 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v32, v33);
  uint64_t v35 = 0x80000000;
  if (!v34) {
    uint64_t v35 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFF7FFFFFFFLL | v35;
  unint64_t v36 = WebKit::WebPreferencesKey::fixedFontFamilyKey(v34);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v36, &v1930);
  WebCore::SettingsBase::setFixedFontFamily();
  char v38 = v1930;
  v1930 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      char v38 = (WTF::StringImpl *)WTF::StringImpl::destroy(v38, v37);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  unsigned int v39 = WebKit::WebPreferencesKey::mediaStreamEnabledKey(v38);
  uint64_t v41 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v39, v40);
  if (v41) {
    uint64_t v42 = 0x1000000000000;
  }
  else {
    uint64_t v42 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFEFFFFFFFFFFFFLL | v42;
  uint64_t v43 = WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(v41);
  uint64_t v45 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v43, v44);
  uint64_t v46 = 0x10000000;
  if (!v45) {
    uint64_t v46 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFEFFFFFFFLL | v46;
  uint64_t v47 = WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(v45);
  uint64_t v49 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v47, v48);
  uint64_t v50 = 0x400000;
  if (!v49) {
    uint64_t v50 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFBFFFFFLL | v50;
  unint64_t v51 = WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(v49);
  uint64_t v53 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v51, v52);
  uint64_t v54 = 0x800000;
  if (!v53) {
    uint64_t v54 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFF7FFFFFLL | v54;
  int v55 = WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(v53);
  *((double *)a2 + 59) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v55);
  char v57 = WebKit::WebPreferencesKey::mediaEnabledKey(v56);
  int v59 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v57, v58);
  uint64_t v60 = 0x8000;
  if (!v59) {
    uint64_t v60 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFF7FFFLL | v60;
  long long v61 = WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(v59);
  unint64_t v63 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v61, v62);
  uint64_t v64 = 0x8000000;
  if (!v63) {
    uint64_t v64 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFF7FFFFFFLL | v64;
  unsigned int v65 = WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(v63);
  int v67 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v65, v66);
  uint64_t v68 = 0x4000000;
  if (!v67) {
    uint64_t v68 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFBFFFFFFLL | v68;
  __int16 v69 = WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(v67);
  long long v71 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v69, v70);
  uint64_t v72 = 0x400000000;
  if (!v71) {
    uint64_t v72 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFBFFFFFFFFLL | v72;
  unint64_t v73 = WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(v71);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v73, &v1930);
  WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(a2, (const WTF::String *)&v1930);
  uint64_t v75 = v1930;
  v1930 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2) {
      uint64_t v75 = (WTF::StringImpl *)WTF::StringImpl::destroy(v75, v74);
    }
    else {
      *(_DWORD *)v75 -= 2;
    }
  }
  uint64_t v76 = WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(v75);
  long long v78 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v76, v77);
  if (v78) {
    uint64_t v79 = 0x1000000;
  }
  else {
    uint64_t v79 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFEFFFFFFLL | v79;
  long long v80 = WebKit::WebPreferencesKey::maxParseDurationKey(v78);
  *((double *)a2 + 56) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v80);
  uint64_t v82 = WebKit::WebPreferencesKey::mathMLEnabledKey(v81);
  uint64_t v84 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v82, v83);
  uint64_t v85 = 0x200000000;
  if (!v84) {
    uint64_t v85 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFDFFFFFFFFLL | v85;
  unint64_t v86 = WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(v84);
  *((double *)a2 + 79) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v86);
  unint64_t v88 = WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(v87);
  *((double *)a2 + 78) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v88);
  uint64_t v90 = WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(v89);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v90, v91);
  unint64_t v92 = (WebKit::WebPreferencesKey *)WebCore::Settings::setHiddenPageCSSAnimationSuspensionEnabled(a2);
  uint64_t v93 = WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(v92);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v93, v94);
  unint64_t v95 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLoadsImagesAutomatically(a2);
  DeferringEnabledKey = WebKit::WebPreferencesKey::loadDeferringEnabledKey(v95);
  uint64_t v98 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)DeferringEnabledKey, v97);
  if (v98) {
    uint64_t v99 = 0x4000;
  }
  else {
    uint64_t v99 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFBFFFLL | v99;
  unint64_t v100 = WebKit::WebPreferencesKey::linkPreloadEnabledKey(v98);
  int v102 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v100, v101);
  if (v102) {
    uint64_t v103 = 1024;
  }
  else {
    uint64_t v103 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFBFFLL | v103;
  int v104 = WebKit::WebPreferencesKey::linkPreconnectKey(v102);
  unint64_t v106 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v104, v105);
  uint64_t v107 = 256;
  if (!v106) {
    uint64_t v107 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFEFFLL | v107;
  uint64_t v108 = WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(v106);
  double v109 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v108);
  uint64_t v110 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLayoutViewportHeightExpansionFactor(a2, v109);
  char v111 = WebKit::WebPreferencesKey::layoutFallbackWidthKey(v110);
  UInt32ValueForKey = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v111);
  *((_DWORD *)a2 + 107) = UInt32ValueForKey;
  uint64_t v113 = WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(UInt32ValueForKey);
  uint64_t v115 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v113, v114);
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFFFELL | (v115 != 0);
  char v116 = WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(v115);
  uint64_t v117 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v116);
  *((_DWORD *)a2 + 106) = v117;
  char v118 = WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(v117);
  char v120 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v118, v119);
  if (v120) {
    uint64_t v121 = 1024;
  }
  else {
    uint64_t v121 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFBFFLL | v121;
  CFTypeRef v122 = WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(v120);
  CFTypeRef v124 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v122, v123);
  uint64_t v125 = 0x4000000000000000;
  if (!v124) {
    uint64_t v125 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xBFFFFFFFFFFFFFFFLL | v125;
  uint64_t v126 = WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(v124);
  char v128 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v126, v127);
  if (v128) {
    uint64_t v129 = 0x2000000000000000;
  }
  else {
    uint64_t v129 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xDFFFFFFFFFFFFFFFLL | v129;
  uint64_t v130 = WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(v128);
  CFTypeRef v132 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v130, v131);
  if (v132) {
    uint64_t v133 = 0x1000000000000;
  }
  else {
    uint64_t v133 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFEFFFFFFFFFFFFLL | v133;
  CFTypeRef v134 = WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(v132);
  CFTypeRef v136 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v134, v135);
  if (v136) {
    uint64_t v137 = 0x100000000000;
  }
  else {
    uint64_t v137 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFEFFFFFFFFFFFLL | v137;
  long long v138 = WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(v136);
  *((double *)a2 + 50) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v138);
  long long v140 = WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(v139);
  char v142 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v140, v141);
  uint64_t v143 = 0x200000000000;
  if (!v142) {
    uint64_t v143 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFDFFFFFFFFFFFLL | v143;
  unsigned __int8 v144 = WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(v142);
  uint64_t v146 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v144, v145);
  uint64_t v147 = 0x400000000000;
  if (!v146) {
    uint64_t v147 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFBFFFFFFFFFFFLL | v147;
  uint64_t v148 = WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(v146);
  unint64_t v150 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v148, v149);
  if (v150) {
    uint64_t v151 = 0x100000000000;
  }
  else {
    uint64_t v151 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFEFFFFFFFFFFFLL | v151;
  uint64_t v152 = WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(v150);
  *((double *)a2 + 52) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v152);
  uint64_t v154 = WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(v153);
  *((double *)a2 + 5WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v154);
  unint64_t v156 = WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(v155);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v156, v157);
  unint64_t v158 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAcceleratedCompositingEnabled(a2);
  unint64_t v159 = WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(v158);
  unsigned __int16 v161 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v159, v160);
  uint64_t v162 = 32;
  if (!v161) {
    uint64_t v162 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFFDFLL | v162;
  int v163 = WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(v161);
  int v165 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v163, v164);
  if (v165) {
    uint64_t v166 = 0x2000000000000000;
  }
  else {
    uint64_t v166 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xDFFFFFFFFFFFFFFFLL | v166;
  char v167 = WebKit::WebPreferencesKey::windowFocusRestrictedKey(v165);
  uint64_t v169 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v167, v168);
  uint64_t v170 = 0x1000000000000000;
  if (!v169) {
    uint64_t v170 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xEFFFFFFFFFFFFFFFLL | v170;
  char v171 = WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(v169);
  char v173 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v171, v172);
  if (v173) {
    uint64_t v174 = 1024;
  }
  else {
    uint64_t v174 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFBFFLL | v174;
  uint64_t v175 = WebKit::WebPreferencesKey::webSocketEnabledKey(v173);
  uint64_t v177 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v175, v176);
  if (v177) {
    uint64_t v178 = 0x80000000000000;
  }
  else {
    uint64_t v178 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFF7FFFFFFFFFFFFFLL | v178;
  matched = WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(v177);
  uint64_t v181 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)matched, v180);
  if (v181) {
    uint64_t v182 = 0x2000;
  }
  else {
    uint64_t v182 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFDFFFLL | v182;
  unint64_t v183 = WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(v181);
  uint64_t v185 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v183, v184);
  if (v185) {
    uint64_t v186 = 0x4000;
  }
  else {
    uint64_t v186 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFBFFFLL | v186;
  uint64_t v187 = WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(v185);
  uint64_t v189 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v187, v188);
  uint64_t v190 = 0x8000;
  if (!v189) {
    uint64_t v190 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFF7FFFLL | v190;
  uint64_t v191 = WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(v189);
  uint64_t v193 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v191, v192);
  uint64_t v194 = 0x20000;
  if (!v193) {
    uint64_t v194 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFDFFFFLL | v194;
  uint64_t v195 = WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(v193);
  char v197 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v195, v196);
  uint64_t v198 = 0x80000;
  if (!v197) {
    uint64_t v198 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFF7FFFFLL | v198;
  uint64_t v199 = WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(v197);
  uint64_t v201 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v199, v200);
  if (v201) {
    uint64_t v202 = 0x100000;
  }
  else {
    uint64_t v202 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFEFFFFFLL | v202;
  uint64_t v203 = WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(v201);
  unsigned __int8 v205 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v203, v204);
  uint64_t v206 = 0x800000000000;
  if (!v205) {
    uint64_t v206 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFF7FFFFFFFFFFFLL | v206;
  uint64_t v207 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(v205);
  uint64_t v209 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v207, v208);
  if (v209) {
    uint64_t v210 = 0x800000;
  }
  else {
    uint64_t v210 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFF7FFFFFLL | v210;
  uint64_t v211 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(v209);
  uint64_t v213 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v211, v212);
  if (v213) {
    uint64_t v214 = 0x1000000;
  }
  else {
    uint64_t v214 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFEFFFFFFLL | v214;
  uint64_t v215 = WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(v213);
  uint64_t v217 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v215, v216);
  uint64_t v218 = 0x2000000;
  if (!v217) {
    uint64_t v218 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFDFFFFFFLL | v218;
  uint64_t v219 = WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(v217);
  uint64_t v221 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v219, v220);
  uint64_t v222 = 0x100000000000000;
  if (!v221) {
    uint64_t v222 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFEFFFFFFFFFFFFFFLL | v222;
  uint64_t v223 = WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(v221);
  uint64_t v225 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v223, v224);
  uint64_t v226 = 0x200000000000000;
  if (!v225) {
    uint64_t v226 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFDFFFFFFFFFFFFFFLL | v226;
  uint64_t v227 = WebKit::WebPreferencesKey::webSecurityEnabledKey(v225);
  unint64_t v229 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v227, v228);
  uint64_t v230 = 0x10000000000000;
  if (!v229) {
    uint64_t v230 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFEFFFFFFFFFFFFFLL | v230;
  uint64_t v231 = WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(v229);
  uint64_t v233 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v231, v232);
  if (v233) {
    uint64_t v234 = 0x8000000;
  }
  else {
    uint64_t v234 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFF7FFFFFFLL | v234;
  uint64_t v235 = WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(v233);
  uint64_t v237 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v235, v236);
  if (v237) {
    uint64_t v238 = 0x40000000;
  }
  else {
    uint64_t v238 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFBFFFFFFFLL | v238;
  unint64_t v239 = WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(v237);
  long long v241 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v239, v240);
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFFELL | (v241 != 0);
  long long v242 = WebKit::WebPreferencesKey::applePayEnabledKey(v241);
  char v244 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v242, v243);
  uint64_t v245 = 2;
  if (!v244) {
    uint64_t v245 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFFDLL | v245;
  long long v246 = WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(v244);
  char v248 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v246, v247);
  uint64_t v249 = 0x400000000;
  if (!v248) {
    uint64_t v249 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFBFFFFFFFFLL | v249;
  char v250 = WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(v248);
  v252 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v250, v251);
  uint64_t v253 = 0x800000000;
  if (!v252) {
    uint64_t v253 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFF7FFFFFFFFLL | v253;
  int v254 = WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(v252);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v254, v255);
  uint64_t v256 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAuthorAndUserStylesEnabled(a2);
  long long v257 = WebKit::WebPreferencesKey::webAudioEnabledKey(v256);
  char v259 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v257, v258);
  uint64_t v260 = 0x10000000;
  if (!v259) {
    uint64_t v260 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFEFFFFFFFLL | v260;
  v261 = WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(v259);
  v263 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v261, v262);
  uint64_t v264 = 0x1000000000;
  if (!v263) {
    uint64_t v264 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFEFFFFFFFFFLL | v264;
  v265 = WebKit::WebPreferencesKey::visualViewportEnabledKey(v263);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v265, v266);
  v267 = (WebKit::WebPreferencesKey *)WebCore::Settings::setVisualViewportEnabled(a2);
  v268 = WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(v267);
  v269 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v268);
  *((_DWORD *)a2 + 153) = v269;
  v270 = WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(v269);
  v272 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v270, v271);
  if (v272) {
    uint64_t v273 = 0x100000;
  }
  else {
    uint64_t v273 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFEFFFFFLL | v273;
  v274 = WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(v272);
  v276 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v274, v275);
  if (v276) {
    uint64_t v277 = 0x80000000000;
  }
  else {
    uint64_t v277 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFF7FFFFFFFFFFLL | v277;
  v278 = WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(v276);
  v280 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v278, v279);
  if (v280) {
    uint64_t v281 = 0x40000000;
  }
  else {
    uint64_t v281 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFBFFFFFFFLL | v281;
  v282 = WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(v280);
  v284 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v282, v283);
  uint64_t v285 = 0x10000;
  if (!v284) {
    uint64_t v285 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFEFFFFLL | v285;
  v286 = WebKit::WebPreferencesKey::vp9DecoderEnabledKey(v284);
  v288 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v286, v287);
  uint64_t v289 = 0x200000;
  if (!v288) {
    uint64_t v289 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFDFFFFFLL | v289;
  v290 = WebKit::WebPreferencesKey::usesEncodingDetectorKey(v288);
  v292 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v290, v291);
  if (v292) {
    uint64_t v293 = 0x8000000;
  }
  else {
    uint64_t v293 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFF7FFFFFFLL | v293;
  v294 = WebKit::WebPreferencesKey::usesBackForwardCacheKey(v292);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v294, v295);
  v296 = (WebKit::WebPreferencesKey *)WebCore::Settings::setUsesBackForwardCache(a2);
  v297 = WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(v296);
  v298 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v297);
  *((unsigned char *)a2 + 560) = v298 != 0;
  v299 = WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(v298);
  v301 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v299, v300);
  if (v301) {
    uint64_t v302 = 0x800000;
  }
  else {
    uint64_t v302 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFF7FFFFFLL | v302;
  v303 = WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(v301);
  v305 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v303, v304);
  uint64_t v306 = 0x400000;
  if (!v305) {
    uint64_t v306 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFBFFFFFLL | v306;
  v307 = WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(v305);
  v309 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v307, v308);
  if (v309) {
    uint64_t v310 = 0x2000;
  }
  else {
    uint64_t v310 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFDFFFLL | v310;
  v311 = WebKit::WebPreferencesKey::textInteractionEnabledKey(v309);
  v313 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v311, v312);
  uint64_t v314 = 512;
  if (!v313) {
    uint64_t v314 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFDFFLL | v314;
  v315 = WebKit::WebPreferencesKey::textAutosizingEnabledKey(v313);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v315, v316);
  v317 = (WebKit::WebPreferencesKey *)WebCore::Settings::setTextAutosizingEnabled(a2);
  v318 = WebKit::WebPreferencesKey::textAreasAreResizableKey(v317);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v318, v319);
  v320 = (WebKit::WebPreferencesKey *)WebCore::Settings::setTextAreasAreResizable(a2);
  v321 = WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(v320);
  v323 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v321, v322);
  uint64_t v324 = 128;
  if (!v323) {
    uint64_t v324 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFF7FLL | v324;
  v325 = WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(v323);
  v327 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v325, v326);
  uint64_t v328 = 64;
  if (!v327) {
    uint64_t v328 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFFBFLL | v328;
  v329 = WebKit::WebPreferencesKey::systemPreviewEnabledKey(v327);
  v331 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v329, v330);
  uint64_t v332 = 0x4000000000000000;
  if (!v331) {
    uint64_t v332 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xBFFFFFFFFFFFFFFFLL | v332;
  v333 = WebKit::WebPreferencesKey::systemLayoutDirectionKey(v331);
  v334 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v333);
  *((unsigned char *)a2 + 549) = v334 != 0;
  v335 = WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(v334);
  v337 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v335, v336);
  uint64_t v338 = 8;
  if (!v337) {
    uint64_t v338 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFFF7 | v338;
  v339 = WebKit::WebPreferencesKey::standardFontFamilyKey(v337);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v339, &v1930);
  WebCore::SettingsBase::setStandardFontFamily();
  v341 = v1930;
  v1930 = 0;
  if (v341)
  {
    if (*(_DWORD *)v341 == 2) {
      v341 = (WTF::StringImpl *)WTF::StringImpl::destroy(v341, v340);
    }
    else {
      *(_DWORD *)v341 -= 2;
    }
  }
  v342 = WebKit::WebPreferencesKey::standaloneKey(v341);
  v344 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v342, v343);
  if (v344) {
    unint64_t v345 = 0x8000000000000000;
  }
  else {
    unint64_t v345 = 0;
  }
  *((void *)a2 + 87) = v345 & 0x8000000000000000 | *((void *)a2 + 87) & 0x7FFFFFFFFFFFFFFFLL;
  v346 = WebKit::WebPreferencesKey::spatialNavigationEnabledKey(v344);
  v348 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v346, v347);
  uint64_t v349 = 0x800000000000000;
  if (!v348) {
    uint64_t v349 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xF7FFFFFFFFFFFFFFLL | v349;
  v350 = WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(v348);
  v352 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v350, v351);
  uint64_t v353 = 0x4000000000;
  if (!v352) {
    uint64_t v353 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFBFFFFFFFFFLL | v353;
  v354 = WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(v352);
  v356 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v354, v355);
  uint64_t v357 = 0x400000000000000;
  if (!v356) {
    uint64_t v357 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFBFFFFFFFFFFFFFFLL | v357;
  v358 = WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(v356);
  v360 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v358, v359);
  if (v360) {
    uint64_t v361 = 0x80000000000000;
  }
  else {
    uint64_t v361 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFF7FFFFFFFFFFFFFLL | v361;
  v362 = WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(v360);
  v364 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v362, v363);
  uint64_t v365 = 0x40000000000000;
  if (!v364) {
    uint64_t v365 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFBFFFFFFFFFFFFFLL | v365;
  v366 = WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(v364);
  v368 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v366, v367);
  uint64_t v369 = 0x20000000000000;
  if (!v368) {
    uint64_t v369 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFDFFFFFFFFFFFFFLL | v369;
  v370 = WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(v368);
  v372 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v370, v371);
  uint64_t v373 = 0x800000000000;
  if (!v372) {
    uint64_t v373 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFF7FFFFFFFFFFFLL | v373;
  v374 = WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(v372);
  v376 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v374, v375);
  uint64_t v377 = 0x200000000000;
  if (!v376) {
    uint64_t v377 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFDFFFFFFFFFFFLL | v377;
  v378 = WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(v376);
  v380 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v378, v379);
  uint64_t v381 = 0x100000000000;
  if (!v380) {
    uint64_t v381 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFEFFFFFFFFFFFLL | v381;
  v382 = WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(v380);
  v384 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v382, v383);
  if (v384) {
    uint64_t v385 = 0x80000000000;
  }
  else {
    uint64_t v385 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFF7FFFFFFFFFFLL | v385;
  v386 = WebKit::WebPreferencesKey::caretBrowsingEnabledKey(v384);
  v388 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v386, v387);
  if (v388) {
    uint64_t v389 = 0x80000000000000;
  }
  else {
    uint64_t v389 = 0;
  }
  unint64_t *v20 = *v20 & 0xFF7FFFFFFFFFFFFFLL | v389;
  v390 = WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(v388);
  v392 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v390, v391);
  uint64_t v393 = 0x40000000000;
  if (!v392) {
    uint64_t v393 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFBFFFFFFFFFFLL | v393;
  v394 = WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(v392);
  v396 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v394, v395);
  uint64_t v397 = 0x10000000000;
  if (!v396) {
    uint64_t v397 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFEFFFFFFFFFFLL | v397;
  v398 = WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(v396);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v398, v399);
  ShouldEnableTextAutosizingBoost = (WebKit::WebPreferencesKey *)WebCore::Settings::setShouldEnableTextAutosizingBoost(a2);
  v401 = WebKit::WebPreferencesKey::colorFilterEnabledKey(ShouldEnableTextAutosizingBoost);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v401, v402);
  v403 = (WebKit::WebPreferencesKey *)WebCore::Settings::setColorFilterEnabled(a2);
  v404 = WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(v403);
  v406 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v404, v405);
  uint64_t v407 = 0x80000;
  if (!v406) {
    uint64_t v407 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFF7FFFFLL | v407;
  v408 = WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(v406);
  v410 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v408, v409);
  uint64_t v411 = 0x40000;
  if (!v410) {
    uint64_t v411 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFBFFFFLL | v411;
  v412 = WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(v410);
  v414 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v412, v413);
  uint64_t v415 = 0x20000;
  if (!v414) {
    uint64_t v415 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFDFFFFLL | v415;
  v416 = WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(v414);
  v418 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v416, v417);
  uint64_t v419 = 0x400000000;
  if (!v418) {
    uint64_t v419 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFBFFFFFFFFLL | v419;
  v420 = WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(v418);
  v422 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v420, v421);
  uint64_t v423 = 16;
  if (!v422) {
    uint64_t v423 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFEFLL | v423;
  v424 = WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(v422);
  v426 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v424, v425);
  if (v426) {
    unint64_t v427 = 0x8000000000000000;
  }
  else {
    unint64_t v427 = 0;
  }
  unint64_t *v20 = v427 & 0x8000000000000000 | *v20 & 0x7FFFFFFFFFFFFFFFLL;
  v428 = WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(v426);
  v430 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v428, v429);
  uint64_t v431 = 0x200000000;
  if (!v430) {
    uint64_t v431 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFDFFFFFFFFLL | v431;
  v432 = WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(v430);
  v434 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v432, v433);
  uint64_t v435 = 0x100000000;
  if (!v434) {
    uint64_t v435 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFEFFFFFFFFLL | v435;
  v436 = WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(v434);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v436, v437);
  ShouldAllowUserInstalledFonts = (WebKit::WebPreferencesKey *)WebCore::Settings::setShouldAllowUserInstalledFonts(a2);
  v439 = WebKit::WebPreferencesKey::serifFontFamilyKey(ShouldAllowUserInstalledFonts);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v439, &v1930);
  WebCore::SettingsBase::setSerifFontFamily();
  v441 = v1930;
  v1930 = 0;
  if (v441)
  {
    if (*(_DWORD *)v441 == 2) {
      v441 = (WTF::StringImpl *)WTF::StringImpl::destroy(v441, v440);
    }
    else {
      *(_DWORD *)v441 -= 2;
    }
  }
  v442 = WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(v441);
  v444 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v442, v443);
  uint64_t v445 = 0x800000;
  if (!v444) {
    uint64_t v445 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFF7FFFFFLL | v445;
  v446 = WebKit::WebPreferencesKey::sansSerifFontFamilyKey(v444);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v446, &v1930);
  WebCore::SettingsBase::setSansSerifFontFamily();
  v448 = v1930;
  v1930 = 0;
  if (v448)
  {
    if (*(_DWORD *)v448 == 2) {
      v448 = (WTF::StringImpl *)WTF::StringImpl::destroy(v448, v447);
    }
    else {
      *(_DWORD *)v448 -= 2;
    }
  }
  v449 = WebKit::WebPreferencesKey::cursiveFontFamilyKey(v448);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v449, &v1930);
  WebCore::SettingsBase::setCursiveFontFamily();
  v451 = v1930;
  v1930 = 0;
  if (v451)
  {
    if (*(_DWORD *)v451 == 2) {
      v451 = (WTF::StringImpl *)WTF::StringImpl::destroy(v451, v450);
    }
    else {
      *(_DWORD *)v451 -= 2;
    }
  }
  v452 = WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(v451);
  *((double *)a2 + 67) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v452);
  v454 = WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(v453);
  *((double *)a2 + 66) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v454);
  v456 = WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(v455);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v456, v457);
  v458 = (WebKit::WebPreferencesKey *)WebCore::Settings::setDNSPrefetchingEnabled(a2);
  v459 = WebKit::WebPreferencesKey::domPasteAllowedKey(v458);
  v461 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v459, v460);
  uint64_t v462 = 16;
  if (!v461) {
    uint64_t v462 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFFEFLL | v462;
  v463 = WebKit::WebPreferencesKey::dataDetectorTypesKey(v461);
  v464 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v463);
  *((unsigned char *)a2 + 616) = (_BYTE)v464;
  VideoKey = WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(v464);
  v467 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)VideoKey, v466);
  uint64_t v468 = 8;
  if (!v467) {
    uint64_t v468 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFF7 | v468;
  v469 = WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(v467);
  v471 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v469, v470);
  uint64_t v472 = 4;
  if (!v471) {
    uint64_t v472 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFFBLL | v472;
  v473 = WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(v471);
  v475 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v473, v474);
  uint64_t v476 = 2;
  if (!v475) {
    uint64_t v476 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFFDLL | v476;
  v477 = WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(v475);
  v479 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v477, v478);
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFFELL | (v479 != 0);
  v480 = WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(v479);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v480, v481);
  v482 = (WebKit::WebPreferencesKey *)WebCore::Settings::setPunchOutWhiteBackgroundsInDarkMode(a2);
  v483 = WebKit::WebPreferencesKey::defaultFixedFontSizeKey(v482);
  double v484 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v483);
  v485 = (WebKit::WebPreferencesKey *)WebCore::Settings::setDefaultFixedFontSize(a2, v484);
  v486 = WebKit::WebPreferencesKey::defaultFontSizeKey(v485);
  double v487 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v486);
  v488 = (WebKit::WebPreferencesKey *)WebCore::Settings::setDefaultFontSize(a2, v487);
  v489 = WebKit::WebPreferencesKey::defaultTextEncodingNameKey(v488);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v489, &v1930);
  WTF::String::operator=((uint64_t *)a2 + 43, &v1930);
  v491 = v1930;
  v1930 = 0;
  if (v491)
  {
    if (*(_DWORD *)v491 == 2) {
      v491 = (WTF::StringImpl *)WTF::StringImpl::destroy(v491, v490);
    }
    else {
      *(_DWORD *)v491 -= 2;
    }
  }
  v492 = WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(v491);
  v493 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v492);
  *((unsigned char *)a2 + 520) = (_BYTE)v493;
  v494 = WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(v493);
  v496 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v494, v495);
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFFFFELL | (v496 != 0);
  v497 = WebKit::WebPreferencesKey::pictographFontFamilyKey(v496);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v497, &v1930);
  WebCore::SettingsBase::setPictographFontFamily();
  v499 = v1930;
  v1930 = 0;
  if (v499)
  {
    if (*(_DWORD *)v499 == 2) {
      v499 = (WTF::StringImpl *)WTF::StringImpl::destroy(v499, v498);
    }
    else {
      *(_DWORD *)v499 -= 2;
    }
  }
  v500 = WebKit::WebPreferencesKey::developerExtrasEnabledKey(v499);
  v502 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v500, v501);
  uint64_t v503 = 0x1000000000000000;
  if (!v502) {
    uint64_t v503 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xEFFFFFFFFFFFFFFFLL | v503;
  v504 = WebKit::WebPreferencesKey::deviceHeightKey(v502);
  v505 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v504);
  *((_DWORD *)a2 + 90) = v505;
  v506 = WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(v505);
  v508 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v506, v507);
  uint64_t v509 = 256;
  if (!v508) {
    uint64_t v509 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFEFFLL | v509;
  v510 = WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(v508);
  v512 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v510, v511);
  uint64_t v513 = 512;
  if (!v512) {
    uint64_t v513 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFDFFLL | v513;
  v514 = WebKit::WebPreferencesKey::deviceWidthKey(v512);
  v515 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v514);
  *((_DWORD *)a2 + 9WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v515;
  v516 = WebKit::WebPreferencesKey::passwordEchoEnabledKey(v515);
  v518 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v516, v517);
  uint64_t v519 = 0x1000000000000;
  if (!v518) {
    uint64_t v519 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFEFFFFFFFFFFFFLL | v519;
  v520 = WebKit::WebPreferencesKey::passwordEchoDurationKey(v518);
  *((double *)a2 + 64) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v520);
  v522 = WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(v521);
  v524 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v522, v523);
  uint64_t v525 = 0x400000000000;
  if (!v524) {
    uint64_t v525 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFBFFFFFFFFFFFLL | v525;
  v526 = WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(v524);
  v528 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v526, v527);
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFFFELL | (v528 != 0);
  v529 = WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(v528);
  v531 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v529, v530);
  uint64_t v532 = 0x20000000000000;
  if (!v531) {
    uint64_t v532 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFDFFFFFFFFFFFFFLL | v532;
  v533 = WebKit::WebPreferencesKey::downloadAttributeEnabledKey(v531);
  v535 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v533, v534);
  uint64_t v536 = 128;
  if (!v535) {
    uint64_t v536 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFF7FLL | v536;
  v537 = WebKit::WebPreferencesKey::editableLinkBehaviorKey(v535);
  v538 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v537);
  *((unsigned char *)a2 + 369) = (_BYTE)v538;
  v539 = WebKit::WebPreferencesKey::pdfPluginEnabledKey(v538);
  v541 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v539, v540);
  uint64_t v542 = 0x10000000000000;
  if (!v541) {
    uint64_t v542 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFEFFFFFFFFFFFFFLL | v542;
  v543 = WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(v541);
  v545 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v543, v544);
  if (v545) {
    uint64_t v546 = 1024;
  }
  else {
    uint64_t v546 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFBFFLL | v546;
  v547 = WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(v545);
  v549 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v547, v548);
  uint64_t v550 = 4096;
  if (!v549) {
    uint64_t v550 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFEFFFLL | v550;
  v551 = WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(v549);
  v553 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v551, v552);
  uint64_t v554 = 0x4000000000;
  if (!v553) {
    uint64_t v554 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFBFFFFFFFFFLL | v554;
  v555 = WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(v553);
  v557 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v555, v556);
  uint64_t v558 = 0x40000000;
  if (!v557) {
    uint64_t v558 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFBFFFFFFFLL | v558;
  v559 = WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(v557);
  v561 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v559, v560);
  uint64_t v562 = 32;
  if (!v561) {
    uint64_t v562 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFFDFLL | v562;
  v563 = WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(v561);
  v565 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v563, v564);
  if (v565) {
    uint64_t v566 = 1024;
  }
  else {
    uint64_t v566 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFBFFLL | v566;
  v567 = WebKit::WebPreferencesKey::selectShowPickerEnabledKey(v565);
  v569 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v567, v568);
  uint64_t v570 = 0x400000;
  if (!v569) {
    uint64_t v570 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFBFFFFFLL | v570;
  v571 = WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(v569);
  v573 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v571, v572);
  uint64_t v574 = 0x200000000000;
  if (!v573) {
    uint64_t v574 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFDFFFFFFFFFFFLL | v574;
  v575 = WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(v573);
  v577 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v575, v576);
  uint64_t v578 = 4;
  if (!v577) {
    uint64_t v578 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFFFBLL | v578;
  v579 = WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(v577);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v579, v580);
  v581 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAcceleratedFiltersEnabled(a2);
  v582 = WebKit::WebPreferencesKey::accessHandleEnabledKey(v581);
  v584 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v582, v583);
  if (v584) {
    uint64_t v585 = 256;
  }
  else {
    uint64_t v585 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFEFFLL | v585;
  v586 = WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(v584);
  v588 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v586, v587);
  if (v588) {
    uint64_t v589 = 32;
  }
  else {
    uint64_t v589 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFFDFLL | v589;
  v590 = WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(v588);
  v592 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v590, v591);
  uint64_t v593 = 0x10000;
  if (!v592) {
    uint64_t v593 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFEFFFFLL | v593;
  v594 = WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(v592);
  v596 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v594, v595);
  uint64_t v597 = 0x40000;
  if (!v596) {
    uint64_t v597 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFBFFFFLL | v597;
  v598 = WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(v596);
  v600 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v598, v599);
  uint64_t v601 = 0x80000000000000;
  if (!v600) {
    uint64_t v601 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFF7FFFFFFFFFFFFFLL | v601;
  v602 = WebKit::WebPreferencesKey::allowWebGLInWorkersKey(v600);
  v604 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v602, v603);
  uint64_t v605 = 0x800000;
  if (!v604) {
    uint64_t v605 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFF7FFFFFLL | v605;
  v606 = WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(v604);
  v608 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v606, v607);
  if (v608) {
    uint64_t v609 = 0x10000000000000;
  }
  else {
    uint64_t v609 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFEFFFFFFFFFFFFFLL | v609;
  v610 = WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(v608);
  v612 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v610, v611);
  uint64_t v613 = 0x20000000000;
  if (!v612) {
    uint64_t v613 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFDFFFFFFFFFFLL | v613;
  v614 = WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(v612);
  v616 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v614, v615);
  uint64_t v617 = 0x200000;
  if (!v616) {
    uint64_t v617 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFDFFFFFLL | v617;
  v618 = WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(v616);
  v620 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v618, v619);
  if (v620) {
    uint64_t v621 = 0x400000;
  }
  else {
    uint64_t v621 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFBFFFFFLL | v621;
  v622 = WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(v620);
  v624 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v622, v623);
  unint64_t v625 = 0x8000000000000000;
  if (!v624) {
    unint64_t v625 = 0;
  }
  *((void *)a2 + 88) = v625 & 0x8000000000000000 | *((void *)a2 + 88) & 0x7FFFFFFFFFFFFFFFLL;
  v626 = WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(v624);
  v628 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v626, v627);
  uint64_t v629 = 0x1000000;
  if (!v628) {
    uint64_t v629 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFEFFFFFFLL | v629;
  v630 = WebKit::WebPreferencesKey::appBadgeEnabledKey(v628);
  v632 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v630, v631);
  uint64_t v633 = 0x20000000;
  if (!v632) {
    uint64_t v633 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFDFFFFFFFLL | v633;
  v634 = WebKit::WebPreferencesKey::appHighlightsEnabledKey(v632);
  v636 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v634, v635);
  if (v636) {
    uint64_t v637 = 4;
  }
  else {
    uint64_t v637 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFFBLL | v637;
  v638 = WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(v636);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v638, v639);
  v640 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAsyncFrameScrollingEnabled(a2);
  v641 = WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(v640);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v641, v642);
  v643 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAsyncOverflowScrollingEnabled(a2);
  v644 = WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(v643);
  v646 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v644, v645);
  uint64_t v647 = 0x400000000000000;
  if (!v646) {
    uint64_t v647 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFBFFFFFFFFFFFFFFLL | v647;
  v648 = WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(v646);
  v650 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v648, v649);
  uint64_t v651 = 0x80000000;
  if (!v650) {
    uint64_t v651 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFF7FFFFFFFLL | v651;
  v652 = WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(v650);
  v654 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v652, v653);
  uint64_t v655 = 8;
  if (!v654) {
    uint64_t v655 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFF7 | v655;
  v656 = WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(v654);
  v658 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v656, v657);
  uint64_t v659 = 0x2000;
  if (!v658) {
    uint64_t v659 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFDFFFLL | v659;
  v660 = WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(v658);
  v662 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v660, v661);
  if (v662) {
    uint64_t v663 = 4096;
  }
  else {
    uint64_t v663 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFEFFFLL | v663;
  v664 = WebKit::WebPreferencesKey::domAudioSessionEnabledKey(v662);
  v666 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v664, v665);
  if (v666) {
    uint64_t v667 = 1024;
  }
  else {
    uint64_t v667 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFBFFLL | v667;
  v668 = WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(v666);
  v670 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v668, v669);
  uint64_t v671 = 2048;
  if (!v670) {
    uint64_t v671 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFF7FFLL | v671;
  v672 = WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(v670);
  v674 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v672, v673);
  uint64_t v675 = 0x2000000000;
  if (!v674) {
    uint64_t v675 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFDFFFFFFFFFLL | v675;
  v676 = WebKit::WebPreferencesKey::beaconAPIEnabledKey(v674);
  v678 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v676, v677);
  uint64_t v679 = 0x100000000000;
  if (!v678) {
    uint64_t v679 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFEFFFFFFFFFFFLL | v679;
  v680 = WebKit::WebPreferencesKey::broadcastChannelEnabledKey(v678);
  v682 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v680, v681);
  uint64_t v683 = 0x800000000000;
  if (!v682) {
    uint64_t v683 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFF7FFFFFFFFFFFLL | v683;
  v684 = WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(v682);
  v686 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v684, v685);
  uint64_t v687 = 0x1000000000000;
  if (!v686) {
    uint64_t v687 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFEFFFFFFFFFFFFLL | v687;
  v688 = WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(v686);
  v690 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v688, v689);
  if (v690) {
    uint64_t v691 = 1024;
  }
  else {
    uint64_t v691 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFBFFLL | v691;
  v692 = WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(v690);
  v694 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v692, v693);
  if (v694) {
    uint64_t v695 = 0x10000;
  }
  else {
    uint64_t v695 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFEFFFFLL | v695;
  v696 = WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(v694);
  v698 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v696, v697);
  uint64_t v699 = 0x20000;
  if (!v698) {
    uint64_t v699 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFDFFFFLL | v699;
  v700 = WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(v698);
  v702 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v700, v701);
  uint64_t v703 = 0x100000;
  if (!v702) {
    uint64_t v703 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFEFFFFFLL | v703;
  v704 = WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(v702);
  v706 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v704, v705);
  uint64_t v707 = 0x8000000000;
  if (!v706) {
    uint64_t v707 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFF7FFFFFFFFFLL | v707;
  v708 = WebKit::WebPreferencesKey::accentColorEnabledKey(v706);
  v710 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v708, v709);
  uint64_t v711 = 128;
  if (!v710) {
    uint64_t v711 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFF7FLL | v711;
  v712 = WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(v710);
  v714 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v712, v713);
  if (v714) {
    uint64_t v715 = 2048;
  }
  else {
    uint64_t v715 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFF7FFLL | v715;
  v716 = WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(v714);
  v718 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v716, v717);
  uint64_t v719 = 0x8000;
  if (!v718) {
    uint64_t v719 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFF7FFFLL | v719;
  v720 = WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(v718);
  v722 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v720, v721);
  if (v722) {
    uint64_t v723 = 0x400000;
  }
  else {
    uint64_t v723 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFBFFFFFLL | v723;
  v724 = WebKit::WebPreferencesKey::masonryEnabledKey(v722);
  v726 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v724, v725);
  if (v726) {
    uint64_t v727 = 0x800000;
  }
  else {
    uint64_t v727 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFF7FFFFFLL | v727;
  v728 = WebKit::WebPreferencesKey::cssMotionPathEnabledKey(v726);
  v730 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v728, v729);
  uint64_t v731 = 0x8000000;
  if (!v730) {
    uint64_t v731 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFF7FFFFFFLL | v731;
  v732 = WebKit::WebPreferencesKey::cssNestingEnabledKey(v730);
  v734 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v732, v733);
  uint64_t v735 = 0x10000000;
  if (!v734) {
    uint64_t v735 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFEFFFFFFFLL | v735;
  v736 = WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(v734);
  v738 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v736, v737);
  if (v738) {
    uint64_t v739 = 0x100000000000;
  }
  else {
    uint64_t v739 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFEFFFFFFFFFFFLL | v739;
  v740 = WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(v738);
  v742 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v740, v741);
  if (v742) {
    uint64_t v743 = 0x20000000;
  }
  else {
    uint64_t v743 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFDFFFFFFFLL | v743;
  v744 = WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(v742);
  v746 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v744, v745);
  uint64_t v747 = 0x40000000;
  if (!v746) {
    uint64_t v747 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFBFFFFFFFLL | v747;
  v748 = WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(v746);
  v750 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v748, v749);
  uint64_t v751 = 0x200000000;
  if (!v750) {
    uint64_t v751 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFDFFFFFFFFLL | v751;
  v752 = WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(v750);
  v754 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v752, v753);
  uint64_t v755 = 0x400000000;
  if (!v754) {
    uint64_t v755 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFBFFFFFFFFLL | v755;
  v756 = WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(v754);
  v758 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v756, v757);
  uint64_t v759 = 0x4000000000000000;
  if (!v758) {
    uint64_t v759 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xBFFFFFFFFFFFFFFFLL | v759;
  v760 = WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(v758);
  v762 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v760, v761);
  uint64_t v763 = 0x2000000000000;
  if (!v762) {
    uint64_t v763 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFDFFFFFFFFFFFFLL | v763;
  v764 = WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(v762);
  v766 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v764, v765);
  uint64_t v767 = 0x4000000000000;
  if (!v766) {
    uint64_t v767 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFBFFFFFFFFFFFFLL | v767;
  v768 = WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(v766);
  v770 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v768, v769);
  if (v770) {
    uint64_t v771 = 4096;
  }
  else {
    uint64_t v771 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFEFFFLL | v771;
  v772 = WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(v770);
  v774 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v772, v773);
  uint64_t v775 = 0x2000;
  if (!v774) {
    uint64_t v775 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFDFFFLL | v775;
  v776 = WebKit::WebPreferencesKey::cssColorLayersEnabledKey(v774);
  v778 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v776, v777);
  uint64_t v779 = 0x4000;
  if (!v778) {
    uint64_t v779 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFBFFFLL | v779;
  v780 = WebKit::WebPreferencesKey::cssDPropertyEnabledKey(v778);
  v782 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v780, v781);
  uint64_t v783 = 0x40000;
  if (!v782) {
    uint64_t v783 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFBFFFFLL | v783;
  v784 = WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(v782);
  v786 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v784, v785);
  uint64_t v787 = 0x80000;
  if (!v786) {
    uint64_t v787 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFF7FFFFLL | v787;
  v788 = WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(v786);
  v790 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v788, v789);
  uint64_t v791 = 0x200000;
  if (!v790) {
    uint64_t v791 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFDFFFFFLL | v791;
  v792 = WebKit::WebPreferencesKey::cssLightDarkEnabledKey(v790);
  v794 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v792, v793);
  if (v794) {
    uint64_t v795 = 0x800000;
  }
  else {
    uint64_t v795 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFF7FFFFFLL | v795;
  v796 = WebKit::WebPreferencesKey::cssLineClampEnabledKey(v794);
  v798 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v796, v797);
  uint64_t v799 = 0x1000000;
  if (!v798) {
    uint64_t v799 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFEFFFFFFLL | v799;
  v800 = WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(v798);
  v802 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v800, v801);
  uint64_t v803 = 0x2000000;
  if (!v802) {
    uint64_t v803 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFDFFFFFFLL | v803;
  v804 = WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(v802);
  v806 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v804, v805);
  uint64_t v807 = 0x4000000;
  if (!v806) {
    uint64_t v807 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFBFFFFFFLL | v807;
  v808 = WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(v806);
  v810 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v808, v809);
  uint64_t v811 = 0x80000000;
  if (!v810) {
    uint64_t v811 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFF7FFFFFFFLL | v811;
  v812 = WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(v810);
  v814 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v812, v813);
  uint64_t v815 = 0x100000000;
  if (!v814) {
    uint64_t v815 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFEFFFFFFFFLL | v815;
  v816 = WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(v814);
  v818 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v816, v817);
  uint64_t v819 = 0x800000000;
  if (!v818) {
    uint64_t v819 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFF7FFFFFFFFLL | v819;
  v820 = WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(v818);
  v822 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v820, v821);
  uint64_t v823 = 0x1000000000;
  if (!v822) {
    uint64_t v823 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFEFFFFFFFFFLL | v823;
  v824 = WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(v822);
  v826 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v824, v825);
  uint64_t v827 = 0x2000000000;
  if (!v826) {
    uint64_t v827 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFDFFFFFFFFFLL | v827;
  v828 = WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(v826);
  v830 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v828, v829);
  uint64_t v831 = 0x4000000000;
  if (!v830) {
    uint64_t v831 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFBFFFFFFFFFLL | v831;
  v832 = WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(v830);
  v834 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v832, v833);
  uint64_t v835 = 0x10000000000;
  if (!v834) {
    uint64_t v835 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFEFFFFFFFFFFLL | v835;
  v836 = WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(v834);
  v838 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v836, v837);
  uint64_t v839 = 0x20000000000;
  if (!v838) {
    uint64_t v839 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFDFFFFFFFFFFLL | v839;
  v840 = WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(v838);
  v842 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v840, v841);
  uint64_t v843 = 0x40000000000;
  if (!v842) {
    uint64_t v843 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFBFFFFFFFFFFLL | v843;
  v844 = WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(v842);
  v846 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v844, v845);
  uint64_t v847 = 0x80000000000;
  if (!v846) {
    uint64_t v847 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFF7FFFFFFFFFFLL | v847;
  v848 = WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(v846);
  v850 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v848, v849);
  if (v850) {
    uint64_t v851 = 0x100000000000;
  }
  else {
    uint64_t v851 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFEFFFFFFFFFFFLL | v851;
  v852 = WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(v850);
  v854 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v852, v853);
  uint64_t v855 = 0x200000000000;
  if (!v854) {
    uint64_t v855 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFDFFFFFFFFFFFLL | v855;
  v856 = WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(v854);
  v858 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v856, v857);
  uint64_t v859 = 0x400000000000;
  if (!v858) {
    uint64_t v859 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFBFFFFFFFFFFFLL | v859;
  v860 = WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(v858);
  v862 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v860, v861);
  uint64_t v863 = 0x1000000000000;
  if (!v862) {
    uint64_t v863 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFEFFFFFFFFFFFFLL | v863;
  v864 = WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(v862);
  v866 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v864, v865);
  uint64_t v867 = 0x800000000000;
  if (!v866) {
    uint64_t v867 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFF7FFFFFFFFFFFLL | v867;
  v868 = WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(v866);
  v870 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v868, v869);
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFFFELL | v870;
  v871 = WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(v870);
  v873 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v871, v872);
  uint64_t v874 = 2;
  if (!v873) {
    uint64_t v874 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFFFDLL | v874;
  v875 = WebKit::WebPreferencesKey::cacheAPIEnabledKey(v873);
  v877 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v875, v876);
  if (v877) {
    uint64_t v878 = 0x2000000000000;
  }
  else {
    uint64_t v878 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFDFFFFFFFFFFFFLL | v878;
  v879 = WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(v877);
  v881 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v879, v880);
  if (v881) {
    uint64_t v882 = 0x4000000000000;
  }
  else {
    uint64_t v882 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFBFFFFFFFFFFFFLL | v882;
  v883 = WebKit::WebPreferencesKey::canvasFiltersEnabledKey(v881);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v883, v884);
  v885 = (WebKit::WebPreferencesKey *)WebCore::Settings::setCanvasFiltersEnabled(a2);
  v886 = WebKit::WebPreferencesKey::canvasLayersEnabledKey(v885);
  v888 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v886, v887);
  if (v888) {
    uint64_t v889 = 0x20000000000000;
  }
  else {
    uint64_t v889 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFDFFFFFFFFFFFFFLL | v889;
  v890 = WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(v888);
  v892 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v890, v891);
  uint64_t v893 = 0x40000000000000;
  if (!v892) {
    uint64_t v893 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFBFFFFFFFFFFFFFLL | v893;
  v894 = WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(v892);
  v896 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v894, v895);
  uint64_t v897 = 0x100000000000000;
  if (!v896) {
    uint64_t v897 = 0;
  }
  unint64_t *v20 = *v20 & 0xFEFFFFFFFFFFFFFFLL | v897;
  v898 = WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(v896);
  v900 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v898, v899);
  uint64_t v901 = 0x200000000000000;
  if (!v900) {
    uint64_t v901 = 0;
  }
  unint64_t *v20 = *v20 & 0xFDFFFFFFFFFFFFFFLL | v901;
  v902 = WebKit::WebPreferencesKey::clientBadgeEnabledKey(v900);
  v904 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v902, v903);
  if (v904) {
    uint64_t v905 = 0x400000000000000;
  }
  else {
    uint64_t v905 = 0;
  }
  unint64_t *v20 = *v20 & 0xFBFFFFFFFFFFFFFFLL | v905;
  v906 = WebKit::WebPreferencesKey::inputTypeColorEnabledKey(v904);
  v908 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v906, v907);
  if (v908) {
    uint64_t v909 = 0x4000000;
  }
  else {
    uint64_t v909 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFBFFFFFFLL | v909;
  v910 = WebKit::WebPreferencesKey::compositingBordersVisibleKey(v908);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v910, v911);
  v912 = (WebKit::WebPreferencesKey *)WebCore::Settings::setShowDebugBorders(a2);
  v913 = WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(v912);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v913, v914);
  v915 = (WebKit::WebPreferencesKey *)WebCore::Settings::setShowRepaintCounter(a2);
  v916 = WebKit::WebPreferencesKey::compressionStreamEnabledKey(v915);
  v918 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v916, v917);
  uint64_t v919 = 0x2000000000000000;
  if (!v918) {
    uint64_t v919 = 0;
  }
  unint64_t *v20 = *v20 & 0xDFFFFFFFFFFFFFFFLL | v919;
  v920 = WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(v918);
  v922 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v920, v921);
  if (v922) {
    uint64_t v923 = 0x4000000000000000;
  }
  else {
    uint64_t v923 = 0;
  }
  unint64_t *v20 = *v20 & 0xBFFFFFFFFFFFFFFFLL | v923;
  v924 = WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(v922);
  v926 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v924, v925);
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFFFELL | (v926 != 0);
  v927 = WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(v926);
  v929 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v927, v928);
  uint64_t v930 = 16;
  if (!v929) {
    uint64_t v930 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFFEFLL | v930;
  v931 = WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(v929);
  v933 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v931, v932);
  if (v933) {
    uint64_t v934 = 8;
  }
  else {
    uint64_t v934 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFFF7 | v934;
  v935 = WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(v933);
  v937 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v935, v936);
  uint64_t v938 = 4;
  if (!v937) {
    uint64_t v938 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFFFBLL | v938;
  v939 = WebKit::WebPreferencesKey::cookieEnabledKey(v937);
  v941 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v939, v940);
  if (v941) {
    uint64_t v942 = 2;
  }
  else {
    uint64_t v942 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFFFDLL | v942;
  v943 = WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(v941);
  v945 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v943, v944);
  uint64_t v946 = 64;
  if (!v945) {
    uint64_t v946 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFFBFLL | v946;
  v947 = WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(v945);
  v949 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v947, v948);
  uint64_t v950 = 256;
  if (!v949) {
    uint64_t v950 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFEFFLL | v950;
  v951 = WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(v949);
  v953 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v951, v952);
  if (v953) {
    uint64_t v954 = 512;
  }
  else {
    uint64_t v954 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFFFFFFFFFFFFDFFLL | v954;
  v955 = WebKit::WebPreferencesKey::customStateSetEnabledKey(v953);
  v957 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v955, v956);
  if (v957) {
    uint64_t v958 = 0x10000000000000;
  }
  else {
    uint64_t v958 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFEFFFFFFFFFFFFFLL | v958;
  v959 = WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(v957);
  v961 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v959, v960);
  if (v961) {
    uint64_t v962 = 8;
  }
  else {
    uint64_t v962 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFFF7 | v962;
  v963 = WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(v961);
  v965 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v963, v964);
  if (v965) {
    uint64_t v966 = 64;
  }
  else {
    uint64_t v966 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFFBFLL | v966;
  v967 = WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(v965);
  v969 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v967, v968);
  if (v969) {
    uint64_t v970 = 0x20000000000000;
  }
  else {
    uint64_t v970 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFDFFFFFFFFFFFFFLL | v970;
  v971 = WebKit::WebPreferencesKey::dataListElementEnabledKey(v969);
  v973 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v971, v972);
  uint64_t v974 = 32;
  if (!v973) {
    uint64_t v974 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFDFLL | v974;
  v975 = WebKit::WebPreferencesKey::inputTypeDateEnabledKey(v973);
  v977 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v975, v976);
  uint64_t v978 = 0x8000000;
  if (!v977) {
    uint64_t v978 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFF7FFFFFFLL | v978;
  v979 = WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(v977);
  v981 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v979, v980);
  if (v981) {
    uint64_t v982 = 64;
  }
  else {
    uint64_t v982 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFFBFLL | v982;
  v983 = WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(v981);
  v985 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v983, v984);
  uint64_t v986 = 0x40000000000000;
  if (!v985) {
    uint64_t v986 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFFBFFFFFFFFFFFFFLL | v986;
  v987 = WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(v985);
  v989 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v987, v988);
  if (v989) {
    uint64_t v990 = 0x80000000000000;
  }
  else {
    uint64_t v990 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFF7FFFFFFFFFFFFFLL | v990;
  v991 = WebKit::WebPreferencesKey::declarativeWebPushKey(v989);
  v993 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v991, v992);
  uint64_t v994 = 128;
  if (!v993) {
    uint64_t v994 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFFF7FLL | v994;
  PaintKey = WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(v993);
  v997 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PaintKey, v996);
  uint64_t v998 = 0x800000000;
  if (!v997) {
    uint64_t v998 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFF7FFFFFFFFLL | v998;
  v999 = WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(v997);
  v1001 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v999, v1000);
  uint64_t v1002 = 0x100000000000000;
  if (!v1001) {
    uint64_t v1002 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFEFFFFFFFFFFFFFFLL | v1002;
  v1003 = WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(v1001);
  v1005 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1003, v1004);
  uint64_t v1006 = 0x200000000000000;
  if (!v1005) {
    uint64_t v1006 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFDFFFFFFFFFFFFFFLL | v1006;
  v1007 = WebKit::WebPreferencesKey::deprecationReportingEnabledKey(v1005);
  v1009 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1007, v1008);
  if (v1009) {
    uint64_t v1010 = 0x400000000000000;
  }
  else {
    uint64_t v1010 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xFBFFFFFFFFFFFFFFLL | v1010;
  v1011 = WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(v1009);
  v1013 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1011, v1012);
  uint64_t v1014 = 0x8000;
  if (!v1013) {
    uint64_t v1014 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFF7FFFLL | v1014;
  v1015 = WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(v1013);
  v1017 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1015, v1016);
  uint64_t v1018 = 0x2000000000000000;
  if (!v1017) {
    uint64_t v1018 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xDFFFFFFFFFFFFFFFLL | v1018;
  v1019 = WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(v1017);
  v1021 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1019, v1020);
  if (v1021) {
    uint64_t v1022 = 0x4000000000000000;
  }
  else {
    uint64_t v1022 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xBFFFFFFFFFFFFFFFLL | v1022;
  v1023 = WebKit::WebPreferencesKey::directoryUploadEnabledKey(v1021);
  v1025 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1023, v1024);
  unint64_t v1026 = 0x8000000000000000;
  if (!v1025) {
    unint64_t v1026 = 0;
  }
  *((void *)a2 + 84) = v1026 & 0x8000000000000000 | *((void *)a2 + 84) & 0x7FFFFFFFFFFFFFFFLL;
  v1027 = WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(v1025);
  v1029 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1027, v1028);
  uint64_t v1030 = 0x800000000000000;
  if (!v1029) {
    uint64_t v1030 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xF7FFFFFFFFFFFFFFLL | v1030;
  PartyWebsiteDataRemovalDisabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(v1029);
  v1033 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PartyWebsiteDataRemovalDisabledKey, v1032);
  uint64_t v1034 = 0x4000000000000;
  if (!v1033) {
    uint64_t v1034 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFBFFFFFFFFFFFFLL | v1034;
  v1035 = WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(v1033);
  v1037 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1035, v1036);
  uint64_t v1038 = 2;
  if (!v1037) {
    uint64_t v1038 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFFFDLL | v1038;
  v1039 = WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(v1037);
  v1041 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1039, v1040);
  uint64_t v1042 = 0x4000000000;
  if (!v1041) {
    uint64_t v1042 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFBFFFFFFFFFLL | v1042;
  v1043 = WebKit::WebPreferencesKey::embedElementEnabledKey(v1041);
  v1045 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1043, v1044);
  if (v1045) {
    uint64_t v1046 = 512;
  }
  else {
    uint64_t v1046 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFDFFLL | v1046;
  v1047 = WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(v1045);
  v1049 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1047, v1048);
  if (v1049) {
    uint64_t v1050 = 0x10000000000000;
  }
  else {
    uint64_t v1050 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFEFFFFFFFFFFFFFLL | v1050;
  v1051 = WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(v1049);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1051, v1052);
  v1053 = (WebKit::WebPreferencesKey *)WebCore::Settings::setICECandidateFilteringEnabled(a2);
  v1054 = WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(v1053);
  v1056 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1054, v1055);
  uint64_t v1057 = 0x100000000;
  if (!v1056) {
    uint64_t v1057 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFEFFFFFFFFLL | v1057;
  v1058 = WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(v1056);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1058, v1059);
  v1060 = (WebKit::WebPreferencesKey *)WebCore::Settings::setMockCaptureDevicesEnabled(a2);
  v1061 = WebKit::WebPreferencesKey::auxclickEventEnabledKey(v1060);
  v1063 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1061, v1062);
  uint64_t v1064 = 0x8000000000;
  if (!v1063) {
    uint64_t v1064 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFF7FFFFFFFFFLL | v1064;
  APIEnabledKey = WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(v1063);
  v1067 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)APIEnabledKey, v1066);
  if (v1067) {
    uint64_t v1068 = 0x20000000000;
  }
  else {
    uint64_t v1068 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFDFFFFFFFFFFLL | v1068;
  v1069 = WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(v1067);
  v1071 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1069, v1070);
  uint64_t v1072 = 0x200000000000;
  if (!v1071) {
    uint64_t v1072 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFDFFFFFFFFFFFLL | v1072;
  v1073 = WebKit::WebPreferencesKey::enterKeyHintEnabledKey(v1071);
  v1075 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1073, v1074);
  uint64_t v1076 = 2048;
  if (!v1075) {
    uint64_t v1076 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFF7FFLL | v1076;
  v1077 = WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(v1075);
  v1079 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1077, v1078);
  uint64_t v1080 = 4096;
  if (!v1079) {
    uint64_t v1080 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFEFFFLL | v1080;
  v1081 = WebKit::WebPreferencesKey::ftpEnabledKey(v1079);
  v1083 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1081, v1082);
  uint64_t v1084 = 0x1000000;
  if (!v1083) {
    uint64_t v1084 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFEFFFFFFLL | v1084;
  PriorityEnabledKey = WebKit::WebPreferencesKey::fetchPriorityEnabledKey(v1083);
  v1087 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PriorityEnabledKey, v1086);
  uint64_t v1088 = 0x2000;
  if (!v1087) {
    uint64_t v1088 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFDFFFLL | v1088;
  v1089 = WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(v1087);
  v1091 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1089, v1090);
  if (v1091) {
    uint64_t v1092 = 0x8000;
  }
  else {
    uint64_t v1092 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFF7FFFLL | v1092;
  v1093 = WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(v1091);
  v1095 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1093, v1094);
  if (v1095) {
    uint64_t v1096 = 0x4000;
  }
  else {
    uint64_t v1096 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFBFFFLL | v1096;
  v1097 = WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(v1095);
  v1099 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1097, v1098);
  uint64_t v1100 = 0x10000;
  if (!v1099) {
    uint64_t v1100 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFEFFFFLL | v1100;
  v1101 = WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(v1099);
  v1103 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1101, v1102);
  if (v1103) {
    uint64_t v1104 = 0x8000;
  }
  else {
    uint64_t v1104 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFF7FFFLL | v1104;
  v1105 = WebKit::WebPreferencesKey::fullScreenEnabledKey(v1103);
  v1107 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1105, v1106);
  if (v1107) {
    uint64_t v1108 = 0x4000;
  }
  else {
    uint64_t v1108 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFBFFFLL | v1108;
  v1109 = WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(v1107);
  v1111 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1109, v1110);
  uint64_t v1112 = 0x100000;
  if (!v1111) {
    uint64_t v1112 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFEFFFFFLL | v1112;
  v1113 = WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(v1111);
  v1115 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1113, v1114);
  if (v1115) {
    uint64_t v1116 = 0x80000000000000;
  }
  else {
    uint64_t v1116 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFF7FFFFFFFFFFFFFLL | v1116;
  v1117 = WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(v1115);
  v1119 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1117, v1118);
  uint64_t v1120 = 0x200000;
  if (!v1119) {
    uint64_t v1120 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFDFFFFFLL | v1120;
  v1121 = WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(v1119);
  v1123 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1121, v1122);
  if (v1123) {
    uint64_t v1124 = 0x20000000000;
  }
  else {
    uint64_t v1124 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFDFFFFFFFFFFLL | v1124;
  v1125 = WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(v1123);
  v1127 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1125, v1126);
  uint64_t v1128 = 0x20000;
  if (!v1127) {
    uint64_t v1128 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFDFFFFLL | v1128;
  v1129 = WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(v1127);
  v1131 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1129, v1130);
  uint64_t v1132 = 0x40000;
  if (!v1131) {
    uint64_t v1132 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFBFFFFLL | v1132;
  v1133 = WebKit::WebPreferencesKey::gamepadsEnabledKey(v1131);
  v1135 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1133, v1134);
  uint64_t v1136 = 0x80000;
  if (!v1135) {
    uint64_t v1136 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFF7FFFFLL | v1136;
  v1137 = WebKit::WebPreferencesKey::genericCueAPIEnabledKey(v1135);
  v1139 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1137, v1138);
  if (v1139) {
    uint64_t v1140 = 0x4000;
  }
  else {
    uint64_t v1140 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFBFFFLL | v1140;
  v1141 = WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(v1139);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1141, v1142);
  v1143 = (WebKit::WebPreferencesKey *)WebCore::Settings::setGraphicsContextFiltersEnabled(a2);
  v1144 = WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(v1143);
  v1146 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1144, v1145);
  if (v1146) {
    uint64_t v1147 = 64;
  }
  else {
    uint64_t v1147 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFFBFLL | v1147;
  v1148 = WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(v1146);
  v1150 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1148, v1149);
  if (v1150) {
    uint64_t v1151 = 0x800000000000000;
  }
  else {
    uint64_t v1151 = 0;
  }
  *((void *)a2 + 84) = *((void *)a2 + 84) & 0xF7FFFFFFFFFFFFFFLL | v1151;
  v1152 = WebKit::WebPreferencesKey::modelElementEnabledKey(v1150);
  v1154 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1152, v1153);
  uint64_t v1155 = 0x100000000000000;
  if (!v1154) {
    uint64_t v1155 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFEFFFFFFFFFFFFFFLL | v1155;
  v1156 = WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(v1154);
  v1158 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1156, v1157);
  uint64_t v1159 = 0x800000000000;
  if (!v1158) {
    uint64_t v1159 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFF7FFFFFFFFFFFLL | v1159;
  v1160 = WebKit::WebPreferencesKey::invokerAttributesEnabledKey(v1158);
  v1162 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1160, v1161);
  uint64_t v1163 = 0x2000000000000;
  if (!v1162) {
    uint64_t v1163 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFDFFFFFFFFFFFFLL | v1163;
  v1164 = WebKit::WebPreferencesKey::popoverAttributeEnabledKey(v1162);
  v1166 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1164, v1165);
  if (v1166) {
    uint64_t v1167 = 0x4000000000000;
  }
  else {
    uint64_t v1167 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFBFFFFFFFFFFFFLL | v1167;
  v1168 = WebKit::WebPreferencesKey::switchControlEnabledKey(v1166);
  v1170 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1168, v1169);
  uint64_t v1171 = 16;
  if (!v1170) {
    uint64_t v1171 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFFEFLL | v1171;
  v1172 = WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(v1170);
  v1174 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1172, v1173);
  if (v1174) {
    uint64_t v1175 = 0x1000000000;
  }
  else {
    uint64_t v1175 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFEFFFFFFFFFLL | v1175;
  v1176 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(v1174);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1176, v1177);
  v1178 = (WebKit::WebPreferencesKey *)WebCore::Settings::setHiddenPageDOMTimerThrottlingAutoIncreases(a2);
  v1179 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(v1178);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1179, v1180);
  v1181 = (WebKit::WebPreferencesKey *)WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled(a2);
  v1182 = WebKit::WebPreferencesKey::highlightAPIEnabledKey(v1181);
  v1184 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1182, v1183);
  uint64_t v1185 = 0x400000000;
  if (!v1184) {
    uint64_t v1185 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFBFFFFFFFFLL | v1185;
  v1186 = WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(v1184);
  v1188 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1186, v1187);
  if (v1188) {
    uint64_t v1189 = 0x2000000000;
  }
  else {
    uint64_t v1189 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFDFFFFFFFFFLL | v1189;
  v1190 = WebKit::WebPreferencesKey::itpDebugModeEnabledKey(v1188);
  v1192 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1190, v1191);
  uint64_t v1193 = 0x1000000000000000;
  if (!v1192) {
    uint64_t v1193 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xEFFFFFFFFFFFFFFFLL | v1193;
  v1194 = WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(v1192);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1194, v1195);
  v1196 = (WebKit::WebPreferencesKey *)WebCore::Settings::setTextAutosizingUsesIdempotentMode(a2);
  v1197 = WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(v1196);
  v1199 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1197, v1198);
  uint64_t v1200 = 0x10000000000;
  if (!v1199) {
    uint64_t v1200 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFEFFFFFFFFFFLL | v1200;
  v1201 = WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(v1199);
  v1203 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1201, v1202);
  if (v1203) {
    uint64_t v1204 = 0x400000;
  }
  else {
    uint64_t v1204 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFBFFFFFLL | v1204;
  v1205 = WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(v1203);
  v1207 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1205, v1206);
  uint64_t v1208 = 0x4000000000000000;
  if (!v1207) {
    uint64_t v1208 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xBFFFFFFFFFFFFFFFLL | v1208;
  v1209 = WebKit::WebPreferencesKey::imageCaptureEnabledKey(v1207);
  v1211 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1209, v1210);
  if (v1211) {
    uint64_t v1212 = 0x80000000000;
  }
  else {
    uint64_t v1212 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFF7FFFFFFFFFFLL | v1212;
  v1213 = WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(v1211);
  v1215 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1213, v1214);
  if (v1215) {
    uint64_t v1216 = 0x80000000000;
  }
  else {
    uint64_t v1216 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFF7FFFFFFFFFFLL | v1216;
  v1217 = WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(v1215);
  v1219 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1217, v1218);
  uint64_t v1220 = 0x200000000000;
  if (!v1219) {
    uint64_t v1220 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFDFFFFFFFFFFFLL | v1220;
  v1221 = WebKit::WebPreferencesKey::javaScriptEnabledKey(v1219);
  v1223 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1221, v1222);
  if (v1223) {
    uint64_t v1224 = 512;
  }
  else {
    uint64_t v1224 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFDFFLL | v1224;
  v1225 = WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(v1223);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1225, v1226);
  v1227 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLayerBasedSVGEngineEnabled(a2);
  v1228 = WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(v1227);
  v1230 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1228, v1229);
  uint64_t v1231 = 4;
  if (!v1230) {
    uint64_t v1231 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFFFBLL | v1231;
  v1232 = WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(v1230);
  v1234 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1232, v1233);
  uint64_t v1235 = 8;
  if (!v1234) {
    uint64_t v1235 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFFF7 | v1235;
  v1236 = WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(v1234);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1236, v1237);
  v1238 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLegacyOverflowScrollingTouchEnabled(a2);
  v1239 = WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(v1238);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1239, v1240);
  v1241 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLegacyLineLayoutVisualCoverageEnabled(a2);
  v1242 = WebKit::WebPreferencesKey::showModalDialogEnabledKey(v1241);
  v1244 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1242, v1243);
  if (v1244) {
    uint64_t v1245 = 0x4000000000000;
  }
  else {
    uint64_t v1245 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFBFFFFFFFFFFFFLL | v1245;
  v1246 = WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(v1244);
  v1248 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1246, v1247);
  uint64_t v1249 = 0x400000000000;
  if (!v1248) {
    uint64_t v1249 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFBFFFFFFFFFFFLL | v1249;
  v1250 = WebKit::WebPreferencesKey::linkSanitizerEnabledKey(v1248);
  v1252 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1250, v1251);
  uint64_t v1253 = 4096;
  if (!v1252) {
    uint64_t v1253 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFEFFFLL | v1253;
  v1254 = WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(v1252);
  v1256 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1254, v1255);
  uint64_t v1257 = 2048;
  if (!v1256) {
    uint64_t v1257 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFF7FFLL | v1257;
  v1258 = WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(v1256);
  v1260 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1258, v1259);
  if (v1260) {
    uint64_t v1261 = 64;
  }
  else {
    uint64_t v1261 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFFBFLL | v1261;
  v1262 = WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(v1260);
  v1264 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1262, v1263);
  uint64_t v1265 = 128;
  if (!v1264) {
    uint64_t v1265 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFF7FLL | v1265;
  v1266 = WebKit::WebPreferencesKey::linkPrefetchEnabledKey(v1264);
  v1268 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1266, v1267);
  if (v1268) {
    uint64_t v1269 = 512;
  }
  else {
    uint64_t v1269 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFDFFLL | v1269;
  v1270 = WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(v1268);
  v1272 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1270, v1271);
  if (v1272) {
    uint64_t v1273 = 0x2000;
  }
  else {
    uint64_t v1273 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFDFFFLL | v1273;
  WebArchiveWithEphemeralStorageEnabledKey = WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(v1272);
  v1276 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)WebArchiveWithEphemeralStorageEnabledKey, v1275);
  if (v1276) {
    uint64_t v1277 = 0x2000000;
  }
  else {
    uint64_t v1277 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFDFFFFFFLL | v1277;
  v1278 = WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(v1276);
  v1280 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1278, v1279);
  uint64_t v1281 = 0x10000;
  if (!v1280) {
    uint64_t v1281 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFEFFFFLL | v1281;
  v1282 = WebKit::WebPreferencesKey::localStorageEnabledKey(v1280);
  v1284 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1282, v1283);
  uint64_t v1285 = 0x20000;
  if (!v1284) {
    uint64_t v1285 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFDFFFFLL | v1285;
  v1286 = WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(v1284);
  v1288 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1286, v1287);
  uint64_t v1289 = 0x40000;
  if (!v1288) {
    uint64_t v1289 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFBFFFFLL | v1289;
  v1290 = WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(v1288);
  v1292 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1290, v1291);
  uint64_t v1293 = 0x200000;
  if (!v1292) {
    uint64_t v1293 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFDFFFFFLL | v1293;
  v1294 = WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(v1292);
  v1296 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1294, v1295);
  if (v1296) {
    uint64_t v1297 = 0x80000;
  }
  else {
    uint64_t v1297 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFF7FFFFLL | v1297;
  v1298 = WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(v1296);
  v1300 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1298, v1299);
  if (v1300) {
    uint64_t v1301 = 0x400000;
  }
  else {
    uint64_t v1301 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFBFFFFFLL | v1301;
  v1302 = WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(v1300);
  v1304 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1302, v1303);
  if (v1304) {
    uint64_t v1305 = 0x2000000000;
  }
  else {
    uint64_t v1305 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFDFFFFFFFFFLL | v1305;
  v1306 = WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(v1304);
  v1308 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1306, v1307);
  if (v1308) {
    uint64_t v1309 = 0x8000000000;
  }
  else {
    uint64_t v1309 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFF7FFFFFFFFFLL | v1309;
  v1310 = WebKit::WebPreferencesKey::coreMathMLEnabledKey(v1308);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1310, v1311);
  v1312 = (WebKit::WebPreferencesKey *)WebCore::Settings::setCoreMathMLEnabled(a2);
  v1313 = WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(v1312);
  v1315 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1313, v1314);
  if (v1315) {
    uint64_t v1316 = 0x2000000;
  }
  else {
    uint64_t v1316 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFDFFFFFFLL | v1316;
  v1317 = WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(v1315);
  v1319 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1317, v1318);
  if (v1319) {
    uint64_t v1320 = 0x2000;
  }
  else {
    uint64_t v1320 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFFFFDFFFLL | v1320;
  v1321 = WebKit::WebPreferencesKey::mediaSessionEnabledKey(v1319);
  v1323 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1321, v1322);
  if (v1323) {
    uint64_t v1324 = 0x1000000000;
  }
  else {
    uint64_t v1324 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFEFFFFFFFFFLL | v1324;
  v1325 = WebKit::WebPreferencesKey::mediaSourceEnabledKey(v1323);
  v1327 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1325, v1326);
  uint64_t v1328 = 0x40000000;
  if (!v1327) {
    uint64_t v1328 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFBFFFFFFFLL | v1328;
  v1329 = WebKit::WebPreferencesKey::mediaDevicesEnabledKey(v1327);
  v1331 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1329, v1330);
  uint64_t v1332 = 0x800000000000;
  if (!v1331) {
    uint64_t v1332 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFF7FFFFFFFFFFFLL | v1332;
  v1333 = WebKit::WebPreferencesKey::mediaRecorderEnabledKey(v1331);
  v1335 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1333, v1334);
  uint64_t v1336 = 0x800000000;
  if (!v1335) {
    uint64_t v1336 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFF7FFFFFFFFLL | v1336;
  v1337 = WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(v1335);
  v1339 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1337, v1338);
  if (v1339) {
    uint64_t v1340 = 0x20000000;
  }
  else {
    uint64_t v1340 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFDFFFFFFFLL | v1340;
  v1341 = WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(v1339);
  v1343 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1341, v1342);
  if (v1343) {
    uint64_t v1344 = 0x10000000000;
  }
  else {
    uint64_t v1344 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFEFFFFFFFFFFLL | v1344;
  v1345 = WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(v1343);
  v1347 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1345, v1346);
  if (v1347) {
    uint64_t v1348 = 0x2000000000000;
  }
  else {
    uint64_t v1348 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFDFFFFFFFFFFFFLL | v1348;
  v1349 = WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(v1347);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1349, v1350);
  ShouldUseModernAVContentKeySession = (WebKit::WebPreferencesKey *)WebCore::Settings::setShouldUseModernAVContentKeySession(a2);
  v1352 = WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(ShouldUseModernAVContentKeySession);
  v1354 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1352, v1353);
  uint64_t v1355 = 0x200000000;
  if (!v1354) {
    uint64_t v1355 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFDFFFFFFFFLL | v1355;
  v1356 = WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(v1354);
  v1358 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1356, v1357);
  if (v1358) {
    uint64_t v1359 = 0x20000000;
  }
  else {
    uint64_t v1359 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFDFFFFFFFLL | v1359;
  v1360 = WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(v1358);
  v1362 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1360, v1361);
  uint64_t v1363 = 256;
  if (!v1362) {
    uint64_t v1363 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFFEFFLL | v1363;
  v1364 = WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(v1362);
  v1366 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1364, v1365);
  uint64_t v1367 = 0x8000000000000;
  if (!v1366) {
    uint64_t v1367 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFF7FFFFFFFFFFFFLL | v1367;
  v1368 = WebKit::WebPreferencesKey::navigationAPIEnabledKey(v1366);
  v1370 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1368, v1369);
  uint64_t v1371 = 0x400000000;
  if (!v1370) {
    uint64_t v1371 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFBFFFFFFFFLL | v1371;
  v1372 = WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(v1370);
  v1374 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1372, v1373);
  if (v1374) {
    uint64_t v1375 = 0x8000000000;
  }
  else {
    uint64_t v1375 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFF7FFFFFFFFFLL | v1375;
  v1376 = WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(v1374);
  v1378 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1376, v1377);
  if (v1378) {
    uint64_t v1379 = 0x10000000000;
  }
  else {
    uint64_t v1379 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFEFFFFFFFFFFLL | v1379;
  v1380 = WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(v1378);
  v1382 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1380, v1381);
  if (v1382) {
    uint64_t v1383 = 0x80000;
  }
  else {
    uint64_t v1383 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFF7FFFFLL | v1383;
  v1384 = WebKit::WebPreferencesKey::notificationEventEnabledKey(v1382);
  v1386 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1384, v1385);
  if (v1386) {
    uint64_t v1387 = 0x400000000000000;
  }
  else {
    uint64_t v1387 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFBFFFFFFFFFFFFFFLL | v1387;
  v1388 = WebKit::WebPreferencesKey::notificationsEnabledKey(v1386);
  v1390 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1388, v1389);
  if (v1390) {
    uint64_t v1391 = 0x200000000000000;
  }
  else {
    uint64_t v1391 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFDFFFFFFFFFFFFFFLL | v1391;
  v1392 = WebKit::WebPreferencesKey::observableEnabledKey(v1390);
  v1394 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1392, v1393);
  uint64_t v1395 = 0x20000000000;
  if (!v1394) {
    uint64_t v1395 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFDFFFFFFFFFFLL | v1395;
  v1396 = WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(v1394);
  v1398 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1396, v1397);
  uint64_t v1399 = 512;
  if (!v1398) {
    uint64_t v1399 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFFDFFLL | v1399;
  v1400 = WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(v1398);
  v1402 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1400, v1401);
  uint64_t v1403 = 0x2000000000000000;
  if (!v1402) {
    uint64_t v1403 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xDFFFFFFFFFFFFFFFLL | v1403;
  v1404 = WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(v1402);
  v1406 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1404, v1405);
  uint64_t v1407 = 0x1000000000000000;
  if (!v1406) {
    uint64_t v1407 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xEFFFFFFFFFFFFFFFLL | v1407;
  v1408 = WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(v1406);
  v1410 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1408, v1409);
  if (v1410) {
    uint64_t v1411 = 0x800000000000000;
  }
  else {
    uint64_t v1411 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xF7FFFFFFFFFFFFFFLL | v1411;
  v1412 = WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(v1410);
  v1414 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1412, v1413);
  if (v1414) {
    uint64_t v1415 = 0x40000000000;
  }
  else {
    uint64_t v1415 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFBFFFFFFFFFFLL | v1415;
  v1416 = WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(v1414);
  v1418 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1416, v1417);
  uint64_t v1419 = 0x80000000000;
  if (!v1418) {
    uint64_t v1419 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFF7FFFFFFFFFFLL | v1419;
  v1420 = WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(v1418);
  v1422 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1420, v1421);
  uint64_t v1423 = 0x400000000000;
  if (!v1422) {
    uint64_t v1423 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFBFFFFFFFFFFFLL | v1423;
  v1424 = WebKit::WebPreferencesKey::permissionsAPIEnabledKey(v1422);
  v1426 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1424, v1425);
  if (v1426) {
    uint64_t v1427 = 0x2000000000000;
  }
  else {
    uint64_t v1427 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFDFFFFFFFFFFFFLL | v1427;
  CoalescedEventsEnabledKey = WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(v1426);
  v1430 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)CoalescedEventsEnabledKey, v1429);
  uint64_t v1431 = 0x8000000;
  if (!v1430) {
    uint64_t v1431 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFF7FFFFFFLL | v1431;
  PredictedEventsEnabledKey = WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(v1430);
  v1434 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PredictedEventsEnabledKey, v1433);
  uint64_t v1435 = 0x10000000;
  if (!v1434) {
    uint64_t v1435 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFEFFFFFFFLL | v1435;
  v1436 = WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(v1434);
  v1438 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1436, v1437);
  uint64_t v1439 = 0x10000000000000;
  if (!v1438) {
    uint64_t v1439 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFEFFFFFFFFFFFFFLL | v1439;
  v1440 = WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(v1438);
  v1442 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1440, v1441);
  if (v1442) {
    uint64_t v1443 = 0x10000;
  }
  else {
    uint64_t v1443 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFEFFFFLL | v1443;
  v1444 = WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(v1442);
  v1446 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1444, v1445);
  if (v1446) {
    uint64_t v1447 = 0x40000000000000;
  }
  else {
    uint64_t v1447 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFBFFFFFFFFFFFFFLL | v1447;
  v1448 = WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(v1446);
  v1450 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1448, v1449);
  uint64_t v1451 = 0x100000000000000;
  if (!v1450) {
    uint64_t v1451 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFEFFFFFFFFFFFFFFLL | v1451;
  v1452 = WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(v1450);
  v1454 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1452, v1453);
  uint64_t v1455 = 0x80000000000000;
  if (!v1454) {
    uint64_t v1455 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFF7FFFFFFFFFFFFFLL | v1455;
  v1456 = WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(v1454);
  v1458 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1456, v1457);
  if (v1458) {
    uint64_t v1459 = 0x200000000000000;
  }
  else {
    uint64_t v1459 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFDFFFFFFFFFFFFFFLL | v1459;
  v1460 = WebKit::WebPreferencesKey::pushAPIEnabledKey(v1458);
  v1462 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1460, v1461);
  if (v1462) {
    uint64_t v1463 = 0x800000000000000;
  }
  else {
    uint64_t v1463 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xF7FFFFFFFFFFFFFFLL | v1463;
  v1464 = WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(v1462);
  v1466 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1464, v1465);
  if (v1466) {
    uint64_t v1467 = 32;
  }
  else {
    uint64_t v1467 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFFFFFDFLL | v1467;
  v1468 = WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(v1466);
  v1470 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1468, v1469);
  uint64_t v1471 = 0x20000000;
  if (!v1470) {
    uint64_t v1471 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFDFFFFFFFLL | v1471;
  v1472 = WebKit::WebPreferencesKey::remotePlaybackEnabledKey(v1470);
  v1474 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1472, v1473);
  uint64_t v1475 = 0x1000000000000;
  if (!v1474) {
    uint64_t v1475 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFEFFFFFFFFFFFFLL | v1475;
  v1476 = WebKit::WebPreferencesKey::removeBackgroundEnabledKey(v1474);
  v1478 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1476, v1477);
  if (v1478) {
    uint64_t v1479 = 0x2000000;
  }
  else {
    uint64_t v1479 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFDFFFFFFLL | v1479;
  v1480 = WebKit::WebPreferencesKey::reportingEnabledKey(v1478);
  v1482 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1480, v1481);
  if (v1482) {
    uint64_t v1483 = 0x1000000000000000;
  }
  else {
    uint64_t v1483 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xEFFFFFFFFFFFFFFFLL | v1483;
  v1484 = WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(v1482);
  v1486 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1484, v1485);
  unint64_t v1487 = 0x8000000000000000;
  if (!v1486) {
    unint64_t v1487 = 0;
  }
  *((void *)a2 + 86) = v1487 & 0x8000000000000000 | *((void *)a2 + 86) & 0x7FFFFFFFFFFFFFFFLL;
  v1488 = WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(v1486);
  v1490 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1488, v1489);
  uint64_t v1491 = 0x100000;
  if (!v1490) {
    uint64_t v1491 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFFFFFFFFEFFFFFLL | v1491;
  v1492 = WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(v1490);
  v1494 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1492, v1493);
  if (v1494) {
    uint64_t v1495 = 0x40000000000000;
  }
  else {
    uint64_t v1495 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFBFFFFFFFFFFFFFLL | v1495;
  v1496 = WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(v1494);
  v1498 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1496, v1497);
  if (v1498) {
    uint64_t v1499 = 0x2000000;
  }
  else {
    uint64_t v1499 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFDFFFFFFLL | v1499;
  UserMediaRequiresFocusKey = WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(v1498);
  v1502 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)UserMediaRequiresFocusKey, v1501);
  if (v1502) {
    uint64_t v1503 = 0x40000000000;
  }
  else {
    uint64_t v1503 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFBFFFFFFFFFFLL | v1503;
  SchedulingEnabledKey = WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(v1502);
  v1506 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)SchedulingEnabledKey, v1505);
  uint64_t v1507 = 16;
  if (!v1506) {
    uint64_t v1507 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFEFLL | v1507;
  v1508 = WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(v1506);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1508, v1509);
  v1510 = (WebKit::WebPreferencesKey *)WebCore::Settings::setResourceUsageOverlayVisible(a2);
  v1511 = WebKit::WebPreferencesKey::sKAttributionEnabledKey(v1510);
  v1513 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1511, v1512);
  if (v1513) {
    uint64_t v1514 = 32;
  }
  else {
    uint64_t v1514 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFDFLL | v1514;
  v1515 = WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(v1513);
  v1517 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1515, v1516);
  if (v1517) {
    uint64_t v1518 = 0x400000000000000;
  }
  else {
    uint64_t v1518 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFBFFFFFFFFFFFFFFLL | v1518;
  v1519 = WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(v1517);
  v1521 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1519, v1520);
  if (v1521) {
    uint64_t v1522 = 128;
  }
  else {
    uint64_t v1522 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFF7FLL | v1522;
  v1523 = WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(v1521);
  v1525 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1523, v1524);
  uint64_t v1526 = 64;
  if (!v1525) {
    uint64_t v1526 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFFBFLL | v1526;
  v1527 = WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(v1525);
  v1529 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1527, v1528);
  uint64_t v1530 = 256;
  if (!v1529) {
    uint64_t v1530 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFFEFFLL | v1530;
  v1531 = WebKit::WebPreferencesKey::screenCaptureEnabledKey(v1529);
  v1533 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1531, v1532);
  uint64_t v1534 = 0x20000000000000;
  if (!v1533) {
    uint64_t v1534 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFDFFFFFFFFFFFFFLL | v1534;
  v1535 = WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(v1533);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1535, v1536);
  v1537 = (WebKit::WebPreferencesKey *)WebCore::Settings::setScrollingPerformanceTestingEnabled(a2);
  v1538 = WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(v1537);
  v1540 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1538, v1539);
  if (v1540) {
    uint64_t v1541 = 0x4000;
  }
  else {
    uint64_t v1541 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFBFFFLL | v1541;
  v1542 = WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(v1540);
  v1544 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1542, v1543);
  uint64_t v1545 = 0x8000;
  if (!v1544) {
    uint64_t v1545 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFF7FFFLL | v1545;
  v1546 = WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(v1544);
  v1548 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1546, v1547);
  if (v1548) {
    uint64_t v1549 = 0x10000;
  }
  else {
    uint64_t v1549 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFEFFFFLL | v1549;
  v1550 = WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(v1548);
  v1552 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1550, v1551);
  uint64_t v1553 = 0x20000;
  if (!v1552) {
    uint64_t v1553 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFDFFFFLL | v1553;
  v1554 = WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(v1552);
  v1556 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1554, v1555);
  uint64_t v1557 = 0x2000;
  if (!v1556) {
    uint64_t v1557 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFDFFFLL | v1557;
  v1558 = WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(v1556);
  v1560 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1558, v1559);
  if (v1560) {
    uint64_t v1561 = 2048;
  }
  else {
    uint64_t v1561 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFF7FFLL | v1561;
  v1562 = WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(v1560);
  v1564 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1562, v1563);
  uint64_t v1565 = 4096;
  if (!v1564) {
    uint64_t v1565 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFFFEFFFLL | v1565;
  v1566 = WebKit::WebPreferencesKey::secureContextChecksEnabledKey(v1564);
  v1568 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1566, v1567);
  if (v1568) {
    uint64_t v1569 = 0x200000;
  }
  else {
    uint64_t v1569 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFFDFFFFFLL | v1569;
  v1570 = WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(v1568);
  v1572 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1570, v1571);
  if (v1572) {
    uint64_t v1573 = 0x1000000;
  }
  else {
    uint64_t v1573 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFEFFFFFFLL | v1573;
  v1574 = WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(v1572);
  v1576 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1574, v1575);
  if (v1576) {
    uint64_t v1577 = 0x2000000;
  }
  else {
    uint64_t v1577 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFDFFFFFFLL | v1577;
  v1578 = WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(v1576);
  v1580 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1578, v1579);
  uint64_t v1581 = 0x4000000;
  if (!v1580) {
    uint64_t v1581 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFFBFFFFFFLL | v1581;
  v1582 = WebKit::WebPreferencesKey::serviceWorkersEnabledKey(v1580);
  v1584 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1582, v1583);
  uint64_t v1585 = 0x8000000;
  if (!v1584) {
    uint64_t v1585 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFF7FFFFFFLL | v1585;
  v1586 = WebKit::WebPreferencesKey::shapeDetectionKey(v1584);
  v1588 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1586, v1587);
  uint64_t v1589 = 0x20000000;
  if (!v1588) {
    uint64_t v1589 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFDFFFFFFFLL | v1589;
  v1590 = WebKit::WebPreferencesKey::sharedWorkerEnabledKey(v1588);
  v1592 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1590, v1591);
  if (v1592) {
    uint64_t v1593 = 0x40000000;
  }
  else {
    uint64_t v1593 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFBFFFFFFFLL | v1593;
  v1594 = WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(v1592);
  v1596 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1594, v1595);
  uint64_t v1597 = 0x2000000000000;
  if (!v1596) {
    uint64_t v1597 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFDFFFFFFFFFFFFLL | v1597;
  v1598 = WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(v1596);
  v1600 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1598, v1599);
  uint64_t v1601 = 0x100000000000000;
  if (!v1600) {
    uint64_t v1601 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFEFFFFFFFFFFFFFFLL | v1601;
  v1602 = WebKit::WebPreferencesKey::siteIsolationEnabledKey(v1600);
  v1604 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1602, v1603);
  uint64_t v1605 = 0x200000000000000;
  if (!v1604) {
    uint64_t v1605 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFDFFFFFFFFFFFFFFLL | v1605;
  v1606 = WebKit::WebPreferencesKey::speechRecognitionEnabledKey(v1604);
  v1608 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1606, v1607);
  uint64_t v1609 = 0x1000000000000000;
  if (!v1608) {
    uint64_t v1609 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xEFFFFFFFFFFFFFFFLL | v1609;
  v1610 = WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(v1608);
  v1612 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1610, v1611);
  uint64_t v1613 = 0x2000000000000000;
  if (!v1612) {
    uint64_t v1613 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xDFFFFFFFFFFFFFFFLL | v1613;
  v1614 = WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(v1612);
  v1616 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1614, v1615);
  uint64_t v1617 = 2;
  if (!v1616) {
    uint64_t v1617 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFFFDLL | v1617;
  v1618 = WebKit::WebPreferencesKey::storageAPIEnabledKey(v1616);
  v1620 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1618, v1619);
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFFFFELL | (v1620 != 0);
  v1621 = WebKit::WebPreferencesKey::storageBlockingPolicyKey(v1620);
  WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v1621);
  v1622 = (WebKit::WebPreferencesKey *)WebCore::Settings::setStorageBlockingPolicy();
  v1623 = WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(v1622);
  v1625 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1623, v1624);
  uint64_t v1626 = 0x400000000000;
  if (!v1625) {
    uint64_t v1626 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFBFFFFFFFFFFFLL | v1626;
  v1627 = WebKit::WebPreferencesKey::textAnimationsEnabledKey(v1625);
  v1629 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1627, v1628);
  uint64_t v1630 = 0x4000000000000;
  if (!v1629) {
    uint64_t v1630 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFBFFFFFFFFFFFFLL | v1630;
  v1631 = WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(v1629);
  v1633 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1631, v1632);
  if (v1633) {
    uint64_t v1634 = 0x1000000;
  }
  else {
    uint64_t v1634 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFEFFFFFFLL | v1634;
  v1635 = WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(v1633);
  v1637 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1635, v1636);
  if (v1637) {
    uint64_t v1638 = 128;
  }
  else {
    uint64_t v1638 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFFF7FLL | v1638;
  v1639 = WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(v1637);
  v1641 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1639, v1640);
  uint64_t v1642 = 0x10000000000000;
  if (!v1641) {
    uint64_t v1642 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFEFFFFFFFFFFFFFLL | v1642;
  v1643 = WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(v1641);
  v1645 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1643, v1644);
  if (v1645) {
    uint64_t v1646 = 0x40000000;
  }
  else {
    uint64_t v1646 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFBFFFFFFFLL | v1646;
  v1647 = WebKit::WebPreferencesKey::trackConfigurationEnabledKey(v1645);
  v1649 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1647, v1648);
  if (v1649) {
    uint64_t v1650 = 2048;
  }
  else {
    uint64_t v1650 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFF7FFLL | v1650;
  v1651 = WebKit::WebPreferencesKey::trustedTypesEnabledKey(v1649);
  v1653 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1651, v1652);
  if (v1653) {
    uint64_t v1654 = 0x4000;
  }
  else {
    uint64_t v1654 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFFBFFFLL | v1654;
  v1655 = WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(v1653);
  v1657 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1655, v1656);
  uint64_t v1658 = 0x10000;
  if (!v1657) {
    uint64_t v1658 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFFEFFFFLL | v1658;
  v1659 = WebKit::WebPreferencesKey::unifiedPDFEnabledKey(v1657);
  v1661 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1659, v1660);
  if (v1661) {
    uint64_t v1662 = 2048;
  }
  else {
    uint64_t v1662 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFFFF7FFLL | v1662;
  v1663 = WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(v1661);
  v1665 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1663, v1664);
  if (v1665) {
    uint64_t v1666 = 0x4000000000;
  }
  else {
    uint64_t v1666 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFBFFFFFFFFFLL | v1666;
  v1667 = WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(v1665);
  v1669 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1667, v1668);
  uint64_t v1670 = 0x80000;
  if (!v1669) {
    uint64_t v1670 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFF7FFFFLL | v1670;
  v1671 = WebKit::WebPreferencesKey::useGiantTilesKey(v1669);
  v1673 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1671, v1672);
  if (v1673) {
    uint64_t v1674 = 0x200000;
  }
  else {
    uint64_t v1674 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFFDFFFFFLL | v1674;
  v1675 = WebKit::WebPreferencesKey::userActivationAPIEnabledKey(v1673);
  v1677 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1675, v1676);
  if (v1677) {
    uint64_t v1678 = 0x1000000;
  }
  else {
    uint64_t v1678 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFEFFFFFFLL | v1678;
  v1679 = WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(v1677);
  v1681 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1679, v1680);
  uint64_t v1682 = 0x2000000;
  if (!v1681) {
    uint64_t v1682 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFFDFFFFFFLL | v1682;
  v1683 = WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(v1681);
  v1685 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1683, v1684);
  if (v1685) {
    uint64_t v1686 = 0x10000000;
  }
  else {
    uint64_t v1686 = 0;
  }
  *((void *)a2 + 87) = *((void *)a2 + 87) & 0xFFFFFFFFEFFFFFFFLL | v1686;
  v1687 = WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(v1685);
  v1689 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1687, v1688);
  if (v1689) {
    uint64_t v1690 = 0x10000000;
  }
  else {
    uint64_t v1690 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFEFFFFFFFLL | v1690;
  v1691 = WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(v1689);
  v1693 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1691, v1692);
  if (v1693) {
    uint64_t v1694 = 0x20000000;
  }
  else {
    uint64_t v1694 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFFDFFFFFFFLL | v1694;
  v1695 = WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(v1693);
  v1697 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1695, v1696);
  if (v1697) {
    uint64_t v1698 = 0x80000000;
  }
  else {
    uint64_t v1698 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFF7FFFFFFFLL | v1698;
  v1699 = WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(v1697);
  v1701 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1699, v1700);
  if (v1701) {
    uint64_t v1702 = 0x100000000;
  }
  else {
    uint64_t v1702 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFEFFFFFFFFLL | v1702;
  v1703 = WebKit::WebPreferencesKey::viewTransitionsEnabledKey(v1701);
  v1705 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1703, v1704);
  if (v1705) {
    uint64_t v1706 = 0x200000000;
  }
  else {
    uint64_t v1706 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFDFFFFFFFFLL | v1706;
  v1707 = WebKit::WebPreferencesKey::visualTranslationEnabledKey(v1705);
  v1709 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1707, v1708);
  uint64_t v1710 = 0x800000;
  if (!v1709) {
    uint64_t v1710 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFFF7FFFFFLL | v1710;
  v1711 = WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(v1709);
  v1713 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1711, v1712);
  uint64_t v1714 = 0x400000000;
  if (!v1713) {
    uint64_t v1714 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFFBFFFFFFFFLL | v1714;
  v1715 = WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(v1713);
  v1717 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1715, v1716);
  if (v1717) {
    uint64_t v1718 = 0x2000000000;
  }
  else {
    uint64_t v1718 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFDFFFFFFFFFLL | v1718;
  v1719 = WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(v1717);
  v1721 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1719, v1720);
  if (v1721) {
    uint64_t v1722 = 0x4000000000;
  }
  else {
    uint64_t v1722 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFFBFFFFFFFFFLL | v1722;
  v1723 = WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(v1721);
  v1725 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1723, v1724);
  uint64_t v1726 = 0x8000000000;
  if (!v1725) {
    uint64_t v1726 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFF7FFFFFFFFFLL | v1726;
  v1727 = WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(v1725);
  v1729 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1727, v1728);
  uint64_t v1730 = 0x10000000000;
  if (!v1729) {
    uint64_t v1730 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFEFFFFFFFFFFLL | v1730;
  v1731 = WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(v1729);
  v1733 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1731, v1732);
  uint64_t v1734 = 0x4000000;
  if (!v1733) {
    uint64_t v1734 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFBFFFFFFLL | v1734;
  v1735 = WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(v1733);
  v1737 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1735, v1736);
  uint64_t v1738 = 0x8000000;
  if (!v1737) {
    uint64_t v1738 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFF7FFFFFFLL | v1738;
  v1739 = WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(v1737);
  v1741 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1739, v1740);
  if (v1741) {
    uint64_t v1742 = 0x8000000000000;
  }
  else {
    uint64_t v1742 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFF7FFFFFFFFFFFFLL | v1742;
  v1743 = WebKit::WebPreferencesKey::webAuthenticationEnabledKey(v1741);
  v1745 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1743, v1744);
  if (v1745) {
    uint64_t v1746 = 0x20000000;
  }
  else {
    uint64_t v1746 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFDFFFFFFFLL | v1746;
  v1747 = WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(v1745);
  v1749 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1747, v1748);
  uint64_t v1750 = 0x20000000000;
  if (!v1749) {
    uint64_t v1750 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFDFFFFFFFFFFLL | v1750;
  v1751 = WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(v1749);
  v1753 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1751, v1752);
  if (v1753) {
    uint64_t v1754 = 0x40000000000;
  }
  else {
    uint64_t v1754 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFFBFFFFFFFFFFLL | v1754;
  v1755 = WebKit::WebPreferencesKey::webLocksAPIEnabledKey(v1753);
  v1757 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1755, v1756);
  uint64_t v1758 = 0x2000000000000;
  if (!v1757) {
    uint64_t v1758 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFDFFFFFFFFFFFFLL | v1758;
  v1759 = WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(v1757);
  v1761 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1759, v1760);
  uint64_t v1762 = 0x40000000000000;
  if (!v1761) {
    uint64_t v1762 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFBFFFFFFFFFFFFFLL | v1762;
  v1763 = WebKit::WebPreferencesKey::webShareEnabledKey(v1761);
  v1765 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1763, v1764);
  uint64_t v1766 = 0x20000000000000;
  if (!v1765) {
    uint64_t v1766 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFDFFFFFFFFFFFFFLL | v1766;
  v1767 = WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(v1765);
  v1769 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1767, v1768);
  uint64_t v1770 = 0x400000;
  if (!v1769) {
    uint64_t v1770 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFFFBFFFFFLL | v1770;
  v1771 = WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(v1769);
  v1773 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1771, v1772);
  uint64_t v1774 = 0x40000000;
  if (!v1773) {
    uint64_t v1774 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFFBFFFFFFFLL | v1774;
  v1775 = WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(v1773);
  v1777 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1775, v1776);
  if (v1777) {
    uint64_t v1778 = 0x80000000;
  }
  else {
    uint64_t v1778 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFF7FFFFFFFLL | v1778;
  v1779 = WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(v1777);
  v1781 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1779, v1780);
  if (v1781) {
    uint64_t v1782 = 0x100000000;
  }
  else {
    uint64_t v1782 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFEFFFFFFFFLL | v1782;
  v1783 = WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(v1781);
  v1785 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1783, v1784);
  if (v1785) {
    uint64_t v1786 = 0x200000000;
  }
  else {
    uint64_t v1786 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFDFFFFFFFFLL | v1786;
  v1787 = WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(v1785);
  v1789 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1787, v1788);
  if (v1789) {
    uint64_t v1790 = 0x80000000000;
  }
  else {
    uint64_t v1790 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFF7FFFFFFFFFFLL | v1790;
  v1791 = WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(v1789);
  v1793 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1791, v1792);
  if (v1793) {
    uint64_t v1794 = 0x400000000000;
  }
  else {
    uint64_t v1794 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFBFFFFFFFFFFFLL | v1794;
  v1795 = WebKit::WebPreferencesKey::webGLEnabledKey(v1793);
  v1797 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1795, v1796);
  if (v1797) {
    uint64_t v1798 = 0x100000000000;
  }
  else {
    uint64_t v1798 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFFEFFFFFFFFFFFLL | v1798;
  v1799 = WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(v1797);
  v1801 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1799, v1800);
  uint64_t v1802 = 0x200000000000000;
  if (!v1801) {
    uint64_t v1802 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFDFFFFFFFFFFFFFFLL | v1802;
  v1803 = WebKit::WebPreferencesKey::webGPUEnabledKey(v1801);
  v1805 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1803, v1804);
  if (v1805) {
    uint64_t v1806 = 0x800000000000;
  }
  else {
    uint64_t v1806 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFF7FFFFFFFFFFFLL | v1806;
  v1807 = WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(v1805);
  v1809 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1807, v1808);
  uint64_t v1810 = 0x1000000000000;
  if (!v1809) {
    uint64_t v1810 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFFEFFFFFFFFFFFFLL | v1810;
  v1811 = WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(v1809);
  v1813 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1811, v1812);
  if (v1813) {
    uint64_t v1814 = 0x2000000000;
  }
  else {
    uint64_t v1814 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFDFFFFFFFFFLL | v1814;
  v1815 = WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(v1813);
  v1817 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1815, v1816);
  uint64_t v1818 = 0x4000000000;
  if (!v1817) {
    uint64_t v1818 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFBFFFFFFFFFLL | v1818;
  v1819 = WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(v1817);
  v1821 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1819, v1820);
  uint64_t v1822 = 0x8000000000;
  if (!v1821) {
    uint64_t v1822 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFF7FFFFFFFFFLL | v1822;
  v1823 = WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(v1821);
  v1825 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1823, v1824);
  uint64_t v1826 = 0x10000000000;
  if (!v1825) {
    uint64_t v1826 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFEFFFFFFFFFFLL | v1826;
  v1827 = WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(v1825);
  v1829 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1827, v1828);
  if (v1829) {
    uint64_t v1830 = 0x8000000000000;
  }
  else {
    uint64_t v1830 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFFF7FFFFFFFFFFFFLL | v1830;
  v1831 = WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(v1829);
  v1833 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1831, v1832);
  uint64_t v1834 = 0x400000000;
  if (!v1833) {
    uint64_t v1834 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFFBFFFFFFFFLL | v1834;
  v1835 = WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(v1833);
  v1837 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1835, v1836);
  uint64_t v1838 = 0x1000000000;
  if (!v1837) {
    uint64_t v1838 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFEFFFFFFFFFLL | v1838;
  v1839 = WebKit::WebPreferencesKey::peerConnectionEnabledKey(v1837);
  v1841 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1839, v1840);
  if (v1841) {
    uint64_t v1842 = 0x800000000;
  }
  else {
    uint64_t v1842 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFFF7FFFFFFFFLL | v1842;
  v1843 = WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(v1841);
  v1845 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1843, v1844);
  if (v1845) {
    uint64_t v1846 = 0x40000000000;
  }
  else {
    uint64_t v1846 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFFBFFFFFFFFFFLL | v1846;
  v1847 = WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(v1845);
  v1849 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1847, v1848);
  if (v1849) {
    uint64_t v1850 = 0x80000000000;
  }
  else {
    uint64_t v1850 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFF7FFFFFFFFFFLL | v1850;
  v1851 = WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(v1849);
  v1853 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1851, v1852);
  if (v1853) {
    uint64_t v1854 = 0x100000000000;
  }
  else {
    uint64_t v1854 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFEFFFFFFFFFFFLL | v1854;
  v1855 = WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(v1853);
  v1857 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1855, v1856);
  uint64_t v1858 = 0x200000000000;
  if (!v1857) {
    uint64_t v1858 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFDFFFFFFFFFFFLL | v1858;
  v1859 = WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(v1857);
  v1861 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1859, v1860);
  if (v1861) {
    uint64_t v1862 = 0x400000000000;
  }
  else {
    uint64_t v1862 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFFBFFFFFFFFFFFLL | v1862;
  v1863 = WebKit::WebPreferencesKey::webTransportEnabledKey(v1861);
  v1865 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1863, v1864);
  uint64_t v1866 = 0x100000000000000;
  if (!v1865) {
    uint64_t v1866 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xFEFFFFFFFFFFFFFFLL | v1866;
  v1867 = WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(v1865);
  v1869 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1867, v1868);
  uint64_t v1870 = 0x80000000;
  if (!v1869) {
    uint64_t v1870 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFF7FFFFFFFLL | v1870;
  v1871 = WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(v1869);
  v1873 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1871, v1872);
  uint64_t v1874 = 0x800000000000000;
  if (!v1873) {
    uint64_t v1874 = 0;
  }
  *((void *)a2 + 88) = *((void *)a2 + 88) & 0xF7FFFFFFFFFFFFFFLL | v1874;
  v1875 = WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(v1873);
  v1877 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1875, v1876);
  if (v1877) {
    uint64_t v1878 = 0x800000000000;
  }
  else {
    uint64_t v1878 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xFFFF7FFFFFFFFFFFLL | v1878;
  v1879 = WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(v1877);
  v1881 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1879, v1880);
  uint64_t v1882 = 0x40000000000000;
  if (!v1881) {
    uint64_t v1882 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFBFFFFFFFFFFFFFLL | v1882;
  v1883 = WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(v1881);
  v1885 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1883, v1884);
  uint64_t v1886 = 0x2000000000000;
  if (!v1885) {
    uint64_t v1886 = 0;
  }
  *((void *)a2 + 90) = *((void *)a2 + 90) & 0xFFFDFFFFFFFFFFFFLL | v1886;
  PartyWebsiteDataRemovalLiveOnTestingEnabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(v1885);
  v1889 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PartyWebsiteDataRemovalLiveOnTestingEnabledKey, v1888);
  if (v1889) {
    uint64_t v1890 = 0x8000000000000;
  }
  else {
    uint64_t v1890 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFF7FFFFFFFFFFFFLL | v1890;
  PartyWebsiteDataRemovalReproTestingEnabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(v1889);
  v1893 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PartyWebsiteDataRemovalReproTestingEnabledKey, v1892);
  uint64_t v1894 = 0x10000000000000;
  if (!v1893) {
    uint64_t v1894 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFEFFFFFFFFFFFFFLL | v1894;
  v1895 = WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(v1893);
  v1897 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1895, v1896);
  uint64_t v1898 = 2048;
  if (!v1897) {
    uint64_t v1898 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFFFFF7FFLL | v1898;
  v1899 = WebKit::WebPreferencesKey::altitudeAngleEnabledKey(v1897);
  v1901 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1899, v1900);
  uint64_t v1902 = 0x4000000;
  if (!v1901) {
    uint64_t v1902 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFFFFFBFFFFFFLL | v1902;
  v1903 = WebKit::WebPreferencesKey::azimuthAngleEnabledKey(v1901);
  v1905 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1903, v1904);
  uint64_t v1906 = 0x10000000000;
  if (!v1905) {
    uint64_t v1906 = 0;
  }
  unint64_t *v20 = *v20 & 0xFFFFFEFFFFFFFFFFLL | v1906;
  v1907 = WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(v1905);
  v1909 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1907, v1908);
  uint64_t v1910 = 0x10000000;
  if (!v1909) {
    uint64_t v1910 = 0;
  }
  *((void *)a2 + 89) = *((void *)a2 + 89) & 0xFFFFFFFFEFFFFFFFLL | v1910;
  v1911 = WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(v1909);
  v1913 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1911, v1912);
  uint64_t v1914 = 256;
  if (!v1913) {
    uint64_t v1914 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFFFFFFFFEFFLL | v1914;
  v1915 = WebKit::WebPreferencesKey::httpEquivEnabledKey(v1913);
  v1917 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1915, v1916);
  if (v1917) {
    uint64_t v1918 = 0x800000000;
  }
  else {
    uint64_t v1918 = 0;
  }
  *((void *)a2 + 85) = *((void *)a2 + 85) & 0xFFFFFFF7FFFFFFFFLL | v1918;
  v1919 = WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(v1917);
  v1921 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1919, v1920);
  uint64_t v1922 = 0x2000000000000000;
  if (!v1921) {
    uint64_t v1922 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xDFFFFFFFFFFFFFFFLL | v1922;
  v1923 = WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(v1921);
  v1925 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1923, v1924);
  uint64_t v1926 = 0x4000000000000000;
  if (!v1925) {
    uint64_t v1926 = 0;
  }
  *((void *)a2 + 86) = *((void *)a2 + 86) & 0xBFFFFFFFFFFFFFFFLL | v1926;
  v1927 = WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(v1925);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1927, v1928);
  return WebCore::Settings::setCSSWordBreakAutoPhraseEnabled(a2);
}

double WebKit::WebPreferencesStore::getDoubleValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2)
{
  return WebKit::valueForKey<double>((uint64_t)this, (uint64_t)this + 24, a2);
}

uint64_t WebKit::WebPreferencesStore::getUInt32ValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2)
{
  return WebKit::valueForKey<unsigned int>((uint64_t)this, (uint64_t)this + 24, a2);
}

uint64_t WebKit::WebPreferencesStore::getStringValueForKey@<X0>(WebKit::WebPreferencesStore *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  return WebKit::valueForKey<WTF::String>((uint64_t)this, (uint64_t)this + 24, a2, a3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::handleResolvedDirectoriesAsynchronously(WebKit::WebsiteDataStoreConfiguration::Directories const&,BOOL)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E5E38;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  unsigned __int16 v4 = (WTF::StringImpl *)*((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)a1 + 1);
  *((void *)a1 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#4},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF5F8;
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (void *)*((void *)this + 12);
  if (v4) {
    os_release(v4);
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WebKit::WebLocalFrameLoaderClient::createNetworkingContext@<X0>(WebKit::WebLocalFrameLoaderClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  unsigned int v5 = (void *)result;
  uint64_t v6 = *(void *)(v3 + 24);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    if (*(unsigned char *)(v7 + 144)) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9DC578;
  if (v8)
  {
    uint64_t result = (uint64_t)WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), v8);
    double v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    double v9 = 0;
  }
  void v5[2] = v9;
  *unsigned int v5 = &unk_1EE9DC518;
  *a2 = v5;
  return result;
}

uint64_t WebKit::NavigationState::setHistoryDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 40), a2);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a1 + 48) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a1 + 48) & 0xFD | v3;
  if (objc_opt_respondsToSelector()) {
    char v4 = 4;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a1 + 48) & 0xFB | v4;
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    char v6 = 8;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a1 + 48) & 0xF7 | v6;
  return result;
}

uint64_t WebKit::WebProcessCreationParameters::WebProcessCreationParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  a2[4] = 0;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a2[5];
  a2[5] = 0;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v10 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v10;
  uint64_t v11 = a2[8];
  if (v11) {
    CFRetain(*(CFTypeRef *)(v11 + 8));
  }
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v12 = a2[9];
  a2[9] = 0;
  *(void *)(a1 + 72) = v12;
  LODWORD(v++*(_DWORD *)(this + 12) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  *(_DWORD *)(a1 + 80) = v12;
  LODWORD(v++*(_DWORD *)(this + 12) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(a1 + 84) = v12;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v13 = a2[11];
  a2[11] = 0;
  *(void *)(a1 + 88) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = 0;
  *(_DWORD *)(a1 + 96) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = 0;
  *(_DWORD *)(a1 + 100) = v13;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 1++*(_DWORD *)(this + 12) = 0;
  uint64_t v14 = a2[13];
  a2[13] = 0;
  *(void *)(a1 + 104) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = 0;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(this + 12) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 116) = v14;
  *(void *)(a1 + 128) = 0;
  uint64_t v15 = a2[15];
  a2[15] = 0;
  *(void *)(a1 + 120) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = 0;
  *(_DWORD *)(a1 + 128) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = 0;
  *(_DWORD *)(a1 + 132) = v15;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v16 = a2[17];
  a2[17] = 0;
  *(void *)(a1 + 136) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v16;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v17 = a2[19];
  a2[19] = 0;
  *(void *)(a1 + 152) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(a1 + 160) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 4WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(a1 + 164) = v17;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v18 = a2[21];
  a2[21] = 0;
  *(void *)(a1 + 168) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = 0;
  *(_DWORD *)(a1 + 176) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = 0;
  *(_DWORD *)(a1 + 180) = v18;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v19 = a2[23];
  a2[23] = 0;
  *(void *)(a1 + 184) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = 0;
  *(_DWORD *)(a1 + 192) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = 0;
  *(_DWORD *)(a1 + 196) = v19;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v20 = a2[25];
  a2[25] = 0;
  *(void *)(a1 + 200) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = 0;
  *(_DWORD *)(a1 + 208) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 2++*(_DWORD *)(this + 12) = v20;
  *(void *)(a1 + 224) = 0;
  uint64_t v21 = a2[27];
  a2[27] = 0;
  *(void *)(a1 + 216) = v21;
  LODWORD(v2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 224) = v21;
  LODWORD(v2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(a1 + 228) = v21;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v22 = a2[29];
  a2[29] = 0;
  *(void *)(a1 + 232) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 6WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 244) = v22;
  *(void *)(a1 + 256) = 0;
  uint64_t v23 = a2[31];
  a2[31] = 0;
  *(void *)(a1 + 248) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = 0;
  *(_DWORD *)(a1 + 256) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = 0;
  *(_DWORD *)(a1 + 260) = v23;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  uint64_t v24 = a2[33];
  a2[33] = 0;
  *(void *)(a1 + 264) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 272) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = 0;
  *(_DWORD *)(a1 + 276) = v24;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v25 = a2[35];
  a2[35] = 0;
  *(void *)(a1 + 280) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = 0;
  *(_DWORD *)(a1 + 288) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = 0;
  *(_DWORD *)(a1 + 292) = v25;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  uint64_t v26 = a2[37];
  a2[37] = 0;
  *(void *)(a1 + 296) = v26;
  LODWORD(v26) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = 0;
  *(_DWORD *)(a1 + 304) = v26;
  LODWORD(v26) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = 0;
  *(_DWORD *)(a1 + 308) = v26;
  long long v27 = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 3++*(_DWORD *)(this + 12) = *(_OWORD *)(a2 + 39);
  *(_OWORD *)(a1 + 328) = v27;
  uint64_t v28 = a2[43];
  a2[43] = 0;
  *(void *)(a1 + 344) = v28;
  *(void *)(a1 + 352) = a2[44];
  uint64_t v29 = a2[45];
  a2[45] = 0;
  *(void *)(a1 + 360) = v29;
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 92);
  uint64_t v30 = a2[47];
  a2[47] = 0;
  *(void *)(a1 + 376) = v30;
  uint64_t v31 = a2[48];
  a2[48] = 0;
  *(void *)(a1 + 384) = v31;
  LOWORD(v3WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *((_WORD *)a2 + 196);
  *(unsigned char *)(a1 + 394) = *((unsigned char *)a2 + 394);
  *(_WORD *)(a1 + 392) = v31;
  uint64_t v32 = a2[50];
  a2[50] = 0;
  *(void *)(a1 + 400) = v32;
  *(void *)(a1 + 408) = 0;
  uint64_t v33 = a2[51];
  a2[51] = 0;
  *(void *)(a1 + 408) = v33;
  uint64_t v34 = a2[52];
  a2[52] = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = v34;
  uint64_t v35 = a2[53];
  a2[53] = 0;
  *(void *)(a1 + 424) = v35;
  LODWORD(v35) = *((_DWORD *)a2 + 108);
  *((_DWORD *)a2 + 108) = 0;
  *(_DWORD *)(a1 + 432) = v35;
  LODWORD(v35) = *((_DWORD *)a2 + 109);
  *((_DWORD *)a2 + 109) = 0;
  int v36 = *((_DWORD *)a2 + 110);
  *(_DWORD *)(a1 + 436) = v35;
  *(_DWORD *)(a1 + 440) = v36;
  *(void *)(a1 + 448) = 0;
  uint64_t v37 = a2[56];
  a2[56] = 0;
  *(void *)(a1 + 448) = v37;
  *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
  std::__optional_move_base<WebKit::WebProcessDataStoreParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 464), (uint64_t)(a2 + 58));
  *(_OWORD *)(a1 + 624) = 0u;
  uint64_t v38 = a2[78];
  a2[78] = 0;
  *(void *)(a1 + 624) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 158);
  *((_DWORD *)a2 + 158) = 0;
  *(_DWORD *)(a1 + 632) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 159);
  *((_DWORD *)a2 + 159) = 0;
  *(_DWORD *)(a1 + 636) = v38;
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  if (*((unsigned char *)a2 + 648))
  {
    uint64_t v50 = a2[80];
    a2[80] = 0;
    *(void *)(a1 + 640) = v50;
    *(unsigned char *)(a1 + 648) = 1;
  }
  *(unsigned char *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  if (*((unsigned char *)a2 + 664))
  {
    uint64_t v51 = a2[82];
    a2[82] = 0;
    *(void *)(a1 + 656) = v51;
    *(unsigned char *)(a1 + 664) = 1;
  }
  *(_WORD *)(a1 + 672) = *((_WORD *)a2 + 336);
  *(_OWORD *)(a1 + 680) = 0uLL;
  uint64_t v39 = a2[85];
  a2[85] = 0;
  *(void *)(a1 + 680) = v39;
  LODWORD(v39) = *((_DWORD *)a2 + 172);
  *((_DWORD *)a2 + 172) = 0;
  *(_DWORD *)(a1 + 688) = v39;
  LODWORD(v39) = *((_DWORD *)a2 + 173);
  *((_DWORD *)a2 + 173) = 0;
  *(_DWORD *)(a1 + 692) = v39;
  *(_DWORD *)(a1 + 696) = *((_DWORD *)a2 + 174);
  *(void *)(a1 + 704) = 0;
  uint64_t v40 = a2[88];
  a2[88] = 0;
  *(void *)(a1 + 704) = v40;
  WebCore::Color::Color();
  uint64_t v41 = a2[90];
  a2[90] = 0;
  *(void *)(a1 + 720) = v41;
  uint64_t v42 = a2[91];
  a2[91] = 0;
  *(void *)(a1 + 728) = v42;
  long long v43 = *((_OWORD *)a2 + 46);
  long long v44 = *((_OWORD *)a2 + 47);
  *(_OWORD *)(a1 + 76WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = *(_OWORD *)((char *)a2 + 761);
  *(_OWORD *)(a1 + 736) = v43;
  *(_OWORD *)(a1 + 752) = v44;
  uint64_t v45 = a2[98];
  a2[98] = 0;
  *(void *)(a1 + 784) = v45;
  *(void *)(a1 + 792) = 0;
  uint64_t v46 = a2[99];
  a2[99] = 0;
  *(void *)(a1 + 792) = v46;
  *(void *)(a1 + 800) = 0;
  uint64_t v47 = a2[100];
  a2[100] = 0;
  *(void *)(a1 + 800) = v47;
  *(void *)(a1 + 808) = a2[101];
  *(_OWORD *)(a1 + 816) = 0u;
  uint64_t v48 = a2[102];
  a2[102] = 0;
  *(void *)(a1 + 816) = v48;
  LODWORD(v48) = *((_DWORD *)a2 + 206);
  *((_DWORD *)a2 + 206) = 0;
  *(_DWORD *)(a1 + 824) = v48;
  LODWORD(v48) = *((_DWORD *)a2 + 207);
  *((_DWORD *)a2 + 207) = 0;
  *(_DWORD *)(a1 + 828) = v48;
  return a1;
}

void sub_19874658C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl ****a20)
{
  uint64_t v30 = *(void *)(v22 + 704);
  if (v30) {
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v30, a2);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21, a2);
  if (*(unsigned char *)(v22 + 664)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v24);
  }
  if (*(unsigned char *)(v22 + 648)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v23);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a9, v31);
  if (*(unsigned char *)(v22 + 616)) {
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v28);
  }
  uint64_t v33 = *(void *)(v22 + 448);
  if (v33) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v33, v32);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 176, v32);
  uint64_t v35 = *(const void **)(v22 + 416);
  *(void *)(v22 + 416) = 0;
  if (v35) {
    CFRelease(v35);
  }
  int v36 = *(WTF::StringImpl ***)(v22 + 408);
  if (v36) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v34);
  }
  uint64_t v37 = *(void *)(v22 + 400);
  *(void *)(v22 + 400) = 0;
  if (v37) {
    CFRelease(*(CFTypeRef *)(v37 + 8));
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v20 + 136));
  uint64_t v39 = *(WTF::StringImpl **)(v22 + 376);
  *(void *)(v22 + 376) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t v40 = *(WTF::StringImpl **)(v22 + 360);
  *(void *)(v22 + 360) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v38);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = *(WTF::StringImpl **)(v22 + 344);
  *(void *)(v22 + 344) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v38);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 48, v38);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 32, v42);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 16, v43);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20, v44);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v45);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v46);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, v47);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, v48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, v49);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a13, v50);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a14, v51);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, v52);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16, v53);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a17, v54);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a18, v55);
  uint64_t v57 = *(void *)(v22 + 64);
  *(void *)(v22 + 64) = 0;
  if (v57) {
    CFRelease(*(CFTypeRef *)(v57 + 8));
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a19, v56);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v27);
  int v59 = *(WTF::StringImpl **)(v22 + 32);
  *(void *)(v22 + 32) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, v58);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](a20, v58);
  long long v61 = *(WTF::StringImpl **)(v22 + 16);
  *(void *)(v22 + 16) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, v60);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  uint64_t v62 = *(WTF::StringImpl **)(v22 + 8);
  *(void *)(v22 + 8) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2) {
      WTF::StringImpl::destroy(v62, v60);
    }
    else {
      *(_DWORD *)v62 -= 2;
    }
  }
  unint64_t v63 = *(WTF::StringImpl **)v22;
  *(void *)uint64_t v22 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, v60);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<WebKit::WebProcessDataStoreParameters,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[152] = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters((uint64_t)a1, (uint64_t *)a2);
    a1[152] = 1;
  }
  return a1;
}

void sub_19874684C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 152)) {
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)v1);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessProxy &)::$_0::operator() const(void)::{lambda(void)#1},void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = *(IPC::Encoder **)(v1 + 8);
    if (result)
    {
      v3[0] = *((unsigned char *)v2 + 16);
      uint64_t v4 = (char *)v2 + 24;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaAccessibilityPreferences>((uint64_t)result, (uint64_t)v3);
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaAccessibilityPreferences>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2687;
  *((void *)v4 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v4, *(unsigned char *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, *(void *)(a2 + 8));
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_1987469B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::UserContentControllerParameters,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v6 = v5;
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, (uint64_t)&v27);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, (uint64_t)&v24);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, (uint64_t)&v21);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, (uint64_t)&v18);
  IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v15);
  if (*(void *)a2)
  {
    if (v6)
    {
      v14[0] = v4;
      if (v29)
      {
        v14[1] = v27;
        uint64_t v8 = v28;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        void v14[2] = v8;
        if (v26)
        {
          v14[3] = v24;
          uint64_t v9 = v25;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          v14[4] = v9;
          if (v23)
          {
            void v14[5] = v21;
            uint64_t v10 = v22;
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            v14[6] = v10;
            if (v20)
            {
              v14[7] = v18;
              uint64_t v11 = v19;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              v14[8] = v11;
              if (v17)
              {
                v14[9] = v15;
                uint64_t v12 = v16;
                uint64_t v15 = 0;
                uint64_t v16 = 0;
                v14[10] = v12;
                std::optional<WebKit::UserContentControllerParameters>::optional[abi:sn180100]<WebKit::UserContentControllerParameters,0>((uint64_t)a1, v14);
                WebKit::UserContentControllerParameters::~UserContentControllerParameters((WebKit::UserContentControllerParameters *)v14, v13);
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a1 = 0;
  a1[88] = 0;
LABEL_9:
  if (v17) {
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
  }
  if (v20) {
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
  }
  if (v23) {
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  }
  if (v26) {
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v24, v7);
  }
  if (v29) {
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v7);
  }
}

void sub_198746BB0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a25) {
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  }
  if (*(unsigned char *)(v25 - 104)) {
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25 - 120, a2);
  }
  if (*(unsigned char *)(v25 - 80)) {
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v25 - 96), a2);
  }
  if (*(unsigned char *)(v25 - 56)) {
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25 - 72, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198746C04()
{
}

void sub_198746C0C()
{
}

uint64_t std::optional<WebKit::UserContentControllerParameters>::optional[abi:sn180100]<WebKit::UserContentControllerParameters,0>(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  uint64_t v4 = a2[3];
  a2[3] = 0;
  *(void *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(result + 32) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(result + 36) = v4;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  uint64_t v5 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + ++*(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(result + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(result + 52) = v5;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  uint64_t v6 = a2[7];
  a2[7] = 0;
  *(void *)(result + 56) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(result + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(result + 68) = v6;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  uint64_t v7 = a2[9];
  a2[9] = 0;
  *(void *)(result + 72) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  *(_DWORD *)(result + 80) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(result + 84) = v7;
  *(unsigned char *)(result + 88) = 1;
  return result;
}

void WebKit::UserContentControllerParameters::~UserContentControllerParameters(WebKit::UserContentControllerParameters *this, WTF::StringImpl *a2)
{
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, v3);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v4);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)this + 6, v5);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, v6);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198746D78(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198746DD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198746E28(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198746E80(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198746ED8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (result >= 0x2222)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>(a1, v13);
      if (!v14) {
        break;
      }
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100](v15 + 120 * HIDWORD(v16), v13);
        ++HIDWORD(v16);
      }
      std::optional<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>::~optional((uint64_t)v13, v11);
      if (!--v6)
      {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v15, HIDWORD(v16));
        *(void *)a2 = v15;
        uint64_t v12 = v16;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)(a2 + 8) = v12;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
LABEL_11:
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v10;
LABEL_12:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 120 * (int)result / 0x78u;
    uint64_t v15 = WTF::fastMalloc((WTF *)(120 * result));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>(a1, v13);
      if (!v14) {
        break;
      }
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100](v15 + 120 * HIDWORD(v16), v13);
        ++HIDWORD(v16);
      }
      std::optional<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>::~optional((uint64_t)v13, v8);
      if (!--v6)
      {
        uint64_t v9 = v15;
        uint64_t v10 = v16;
        goto LABEL_11;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::optional<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>::~optional((uint64_t)v13, v7);
  return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void sub_1987470B4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::optional<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>::~optional((uint64_t)&a9, a2);
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 48, v11);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)a1 = v3;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  WTF::URL::URL(a1 + 80, a2 + 10);
  return a1;
}

void sub_1987471C0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebKit::WebCompiledContentRuleListData::~WebCompiledContentRuleListData(v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120]) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198747210(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (result >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>(a1, (uint64_t)&v15);
      if (!v17) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        uint64_t v12 = (void *)(v18 + 16 * HIDWORD(v19));
        void *v12 = v15;
        uint64_t v13 = v16;
        uint64_t v16 = 0;
        v12[1] = v13;
        ++HIDWORD(v19);
      }
      std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
      if (!--v6)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v18, HIDWORD(v19));
        *(void *)a2 = v18;
        uint64_t v14 = v19;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a2 + 8) = v14;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
    }
    LODWORD(v19) = result;
    uint64_t v18 = WTF::fastMalloc((WTF *)(16 * result));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>(a1, (uint64_t)&v15);
      if (!v17) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        uint64_t v10 = (void *)(v18 + 16 * HIDWORD(v19));
        void *v10 = v15;
        uint64_t v11 = v16;
        uint64_t v16 = 0;
        v10[1] = v11;
        ++HIDWORD(v19);
      }
      std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
      if (!--v6)
      {
        uint64_t v7 = v18;
        uint64_t v8 = v19;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
  return WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
}

void sub_1987473CC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (result >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebScriptMessageHandlerData>(a1, (uint64_t)&v15);
      if (!v17) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebScriptMessageHandlerData>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        uint64_t v12 = v18 + 24 * HIDWORD(v19);
        *(_OWORD *)uint64_t v12 = v15;
        uint64_t v13 = v16;
        uint64_t v16 = 0;
        *(void *)(v12 + 16) = v13;
        ++HIDWORD(v19);
      }
      std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>::~optional((uint64_t)&v15, v9);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v18, HIDWORD(v19));
        *(void *)a2 = v18;
        uint64_t v14 = v19;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a2 + 8) = v14;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
    }
    LODWORD(v19) = 24 * (int)result / 0x18u;
    uint64_t v18 = WTF::fastMalloc((WTF *)(24 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebScriptMessageHandlerData>(a1, (uint64_t)&v15);
      if (!v17) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebScriptMessageHandlerData>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        uint64_t v10 = v18 + 24 * HIDWORD(v19);
        *(_OWORD *)uint64_t v10 = v15;
        uint64_t v11 = v16;
        uint64_t v16 = 0;
        *(void *)(v10 + 16) = v11;
        ++HIDWORD(v19);
      }
      std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>::~optional((uint64_t)&v15, v9);
      if (!--v6)
      {
        uint64_t v7 = v18;
        uint64_t v8 = v19;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>::~optional((uint64_t)&v15, v9);
  return WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
}

void sub_1987475CC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>::~optional((uint64_t)&a9, a2);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (result >= 0x2222)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserStyleSheetData>(a1, (uint64_t)v13);
      if (!v14) {
        break;
      }
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserStyleSheetData>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebKit::WebUserStyleSheetData::WebUserStyleSheetData(v15 + 120 * HIDWORD(v16), (uint64_t)v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v11);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v15, HIDWORD(v16));
        *(void *)a2 = v15;
        uint64_t v12 = v16;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)(a2 + 8) = v12;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 120 * (int)result / 0x78u;
    uint64_t v15 = WTF::fastMalloc((WTF *)(120 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserStyleSheetData>(a1, (uint64_t)v13);
      if (!v14) {
        break;
      }
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserStyleSheetData>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebKit::WebUserStyleSheetData::WebUserStyleSheetData(v15 + 120 * HIDWORD(v16), (uint64_t)v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v10);
      if (!--v6)
      {
        uint64_t v7 = v15;
        uint64_t v8 = v16;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
  return WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void sub_1987477B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 48, v11);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (result >= 0x2762)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserScriptData>(a1, (uint64_t)&v13);
      if (!v15) {
        break;
      }
      if (HIDWORD(v17) == v17)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>((uint64_t)&v16, (unint64_t)&v13);
      }
      else
      {
        uint64_t v11 = (_OWORD *)(v16 + 104 * HIDWORD(v17));
        *uint64_t v11 = v13;
        WebCore::UserScript::UserScript((uint64_t)(v11 + 1), v14);
        ++HIDWORD(v17);
      }
      if (v15) {
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v14, v10);
      }
      if (!--v6)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v16, HIDWORD(v17));
        *(void *)a2 = v16;
        uint64_t v12 = v17;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        *(void *)(a2 + 8) = v12;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a2 + 16) = 1;
      return (unint64_t)WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v16, v5);
    }
    LODWORD(v17) = 104 * (int)result / 0x68u;
    uint64_t v16 = WTF::fastMalloc((WTF *)(104 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserScriptData>(a1, (uint64_t)&v13);
      if (!v15) {
        break;
      }
      if (HIDWORD(v17) == v17)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>((uint64_t)&v16, (unint64_t)&v13);
      }
      else
      {
        uint64_t v9 = (_OWORD *)(v16 + 104 * HIDWORD(v17));
        *uint64_t v9 = v13;
        WebCore::UserScript::UserScript((uint64_t)(v9 + 1), v14);
        ++HIDWORD(v17);
      }
      if (v15) {
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v14, v5);
      }
      if (!--v6)
      {
        uint64_t v7 = v16;
        uint64_t v8 = v17;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return (unint64_t)WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v16, v5);
}

void sub_1987479D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22) {
    WebCore::UserScript::~UserScript(v22, a2);
  }
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v23 - 64), a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::WebCompiledContentRuleListData>(a1, (uint64_t)v10);
  if (!v11)
  {
    *a2 = 0;
    a2[120] = 0;
    return (WTF::StringImpl *)std::optional<WebKit::WebCompiledContentRuleListData>::~optional((uint64_t)v10, v4);
  }
  unint64_t result = IPC::Decoder::decode<WTF::URL>(a1, v8);
  char v7 = v9;
  if (!v9)
  {
    *a2 = 0;
    goto LABEL_5;
  }
  if (v11)
  {
    std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100]<WebKit::WebCompiledContentRuleListData,WTF::URL,0>((uint64_t)a2, v10, v8);
    char v7 = 1;
LABEL_5:
    a2[120] = v7;
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
    return (WTF::StringImpl *)std::optional<WebKit::WebCompiledContentRuleListData>::~optional((uint64_t)v10, v4);
  }
  __break(1u);
  return result;
}

void sub_198747AA4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::optional<WebKit::WebCompiledContentRuleListData>::~optional((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebKit::WebCompiledContentRuleListData>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100]<WebKit::WebCompiledContentRuleListData,WTF::URL,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  long long v6 = *((_OWORD *)a2 + 1);
  long long v7 = *((_OWORD *)a2 + 2);
  long long v8 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  WTF::URL::URL(a1 + 80, a3);
  return a1;
}

void sub_198747B80(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebKit::WebCompiledContentRuleListData::~WebCompiledContentRuleListData(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::WebCompiledContentRuleListData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198747BD0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebKit::WebCompiledContentRuleListData>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v35);
  IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v33);
  uint64_t v31 = IPC::Decoder::decode<unsigned long long>(a1);
  char v5 = v4;
  uint64_t v30 = IPC::Decoder::decode<unsigned long long>(a1);
  char v7 = v6;
  uint64_t v29 = IPC::Decoder::decode<unsigned long long>(a1);
  char v9 = v8;
  uint64_t v28 = IPC::Decoder::decode<unsigned long long>(a1);
  char v11 = v10;
  uint64_t v27 = IPC::Decoder::decode<unsigned long long>(a1);
  char v13 = v12;
  uint64_t v26 = IPC::Decoder::decode<unsigned long long>(a1);
  char v15 = v14;
  uint64_t v16 = IPC::Decoder::decode<unsigned long long>(a1);
  char v18 = v17;
  uint64_t v19 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!*(void *)a1) {
    goto LABEL_18;
  }
  if (!v36 || !v34 || !v5 || !v7 || !v9 || !v11 || !v13 || !v15 || !v18 || !v20)
  {
    __break(1u);
LABEL_18:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    goto LABEL_13;
  }
  WebKit::WebCompiledContentRuleListData::WebCompiledContentRuleListData(v32, &v35, (uint64_t)v33, v31, v30, v29, v28, v27, v26, v16, v19);
  long long v21 = v32[0];
  long long v22 = v32[1];
  v32[0] = 0uLL;
  *(_OWORD *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v22;
  long long v23 = v32[3];
  *(_OWORD *)(a2 + 32) = v32[2];
  *(_OWORD *)(a2 + 48) = v23;
  *(_OWORD *)(a2 + 64) = v32[4];
  *(unsigned char *)(a2 + 80) = 1;
  WebKit::WebCompiledContentRuleListData::~WebCompiledContentRuleListData((WebKit::WebCompiledContentRuleListData *)v32, v24);
LABEL_13:
  if (v34 && v33[16]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v33);
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35);
}

void sub_198747D94(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 - 112))
  {
    if (*(unsigned char *)(v1 - 120)) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v1 - 136));
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v1 - 104);
  _Unwind_Resume(a1);
}

void sub_198747DE0()
{
}

void WebKit::WebCompiledContentRuleListData::~WebCompiledContentRuleListData(WebKit::WebCompiledContentRuleListData *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  char v4 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

void *WebKit::WebCompiledContentRuleListData::WebCompiledContentRuleListData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a2;
  *a2 = 0;
  *a1 = v17;
  char v18 = a1 + 1;
  if (*(unsigned char *)(a3 + 16))
  {
    WebCore::SharedMemory::map();
    uint64_t v19 = *v18;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t *v18 = 0;
  }
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
  a1[6] = a8;
  a1[7] = a9;
  a1[8] = a10;
  a1[9] = a11;
  if (v19)
  {
    unint64_t v20 = *(void *)(v19 + 8);
    if (v20 < a11 + a10 || v20 < a9 + a8 || v20 < a5 + a4 || v20 < a7 + a6)
    {
      uint64_t *v18 = 0;
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v19);
    }
  }
  return a1;
}

{
  return WebKit::WebCompiledContentRuleListData::WebCompiledContentRuleListData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 24)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198747F6C(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 24))
  {
    if (*((unsigned char *)v1 + 16)) {
      WTF::MachSendRight::~MachSendRight(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF558;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **___ZN6WebKit43StorageAccessUserAgentStringQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v58 = 0;
  if (a3)
  {
    char v4 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Failed to request storage access user agent string quirks from WebPrivacy.", buf, 2u);
    }
    goto LABEL_58;
  }
  char v5 = (void *)[a2 quirks];
  uint64_t v46 = v3;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v7 = [v5 countByEnumeratingWithState:&v54 objects:v59 count:16];
  if (v7)
  {
    obint j = v5;
    uint64_t v48 = *(void *)v55;
    do
    {
      uint64_t v8 = 0;
      uint64_t v49 = v7;
      do
      {
        if (*(void *)v55 != v48) {
          objc_enumerationMutation(obj);
        }
        char v9 = *(void **)(*((void *)&v54 + 1) + 8 * v8);
        MEMORY[0x19972EAD0](v50, [v9 domain]);
        char v10 = v50[0];
        if (v50[0] && *((_DWORD *)v50[0] + 1))
        {
          v50[0] = 0;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v10 = *(WTF::ASCIICaseInsensitiveHash **)buf;
        }
        uint64_t v12 = [v9 userAgentString];
        char v13 = v58;
        if (v58
          || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&v58, 0), (char v13 = v58) != 0))
        {
          int v14 = *((_DWORD *)v13 - 2);
        }
        else
        {
          int v14 = 0;
        }
        unsigned int v15 = WTF::ASCIICaseInsensitiveHash::hash(v10, v11) & v14;
        uint64_t v16 = &v13[2 * v15];
        if ((WTF::equal(*v16, 0, v17) & 1) == 0)
        {
          unint64_t v20 = 0;
          int v21 = 1;
          do
          {
            long long v22 = v16;
            if (*v16 != (WTF::StringImpl *)-1)
            {
              long long v22 = v20;
              if (WTF::equalIgnoringASCIICase(*v16, v10, v19))
              {
                if (*(_DWORD *)v10 == 2) {
                  WTF::StringImpl::destroy(v10, v23);
                }
                else {
                  *(_DWORD *)v10 -= 2;
                }
                uint64_t v25 = v49;
                goto LABEL_47;
              }
            }
            unsigned int v15 = (v15 + v21) & v14;
            uint64_t v16 = &v13[2 * v15];
            ++v21;
            unint64_t v20 = v22;
          }
          while (!WTF::equal(*v16, 0, v19));
          if (v22)
          {
            *long long v22 = 0;
            v22[1] = 0;
            --*((_DWORD *)v58 - 4);
            uint64_t v16 = v22;
          }
        }
        uint64_t v24 = *v16;
        os_unfair_lock_s *v16 = v10;
        uint64_t v25 = v49;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v18);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        MEMORY[0x19972EAD0](buf, v12);
        uint64_t v26 = *(WTF::ASCIICaseInsensitiveHash **)buf;
        *(void *)long long buf = 0;
        uint64_t v27 = v16[1];
        v16[1] = v26;
        if (v27)
        {
          int v28 = *(_DWORD *)v27 - 2;
          if (*(_DWORD *)v27 != 2) {
            goto LABEL_31;
          }
          WTF::StringImpl::destroy(v27, v23);
          uint64_t v27 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (!v27) {
            goto LABEL_32;
          }
          int v28 = *(_DWORD *)v27 - 2;
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v23);
          }
          else {
LABEL_31:
          }
            *(_DWORD *)uint64_t v27 = v28;
        }
LABEL_32:
        if (v58) {
          int v29 = *((_DWORD *)v58 - 3) + 1;
        }
        else {
          int v29 = 1;
        }
        *((_DWORD *)v58 - 3) = v29;
        if (v58) {
          int v30 = *((_DWORD *)v58 - 3);
        }
        else {
          int v30 = 0;
        }
        uint64_t v31 = (*((_DWORD *)v58 - 4) + v30);
        unint64_t v32 = *((unsigned int *)v58 - 1);
        if (v32 <= 0x400)
        {
          if (3 * v32 > 4 * v31) {
            goto LABEL_47;
          }
LABEL_40:
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&v58, v16);
          goto LABEL_47;
        }
        if (v32 <= 2 * v31) {
          goto LABEL_40;
        }
LABEL_47:
        uint64_t v33 = v50[0];
        v50[0] = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v23);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        ++v8;
      }
      while (v8 != v25);
      uint64_t v34 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
      uint64_t v7 = v34;
    }
    while (v34);
  }
  uint64_t v35 = v58;
  uint64_t v58 = 0;
  char v36 = *(WTF::StringImpl ***)(v46 + 8);
  *(void *)(v46 + 8) = v35;
  if (v36) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v6);
  }
LABEL_58:
  v50[0] = (WTF::StringImpl *)&v51;
  v50[1] = (WTF::StringImpl *)1;
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer((uint64_t)buf, (uint64_t)&qword_1EB358FB0);
  if (dword_1EB358FBC)
  {
    uint64_t v37 = (uint64_t *)qword_1EB358FB0;
    uint64_t v38 = 8 * dword_1EB358FBC;
    do
    {
      uint64_t v39 = *v37;
      *uint64_t v37 = 0;
      if (v39) {
        (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
      }
      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt((uint64_t)&qword_1EB358FB0, v50);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v40);
  if (v53)
  {
    uint64_t v42 = *(uint64_t **)buf;
    uint64_t v43 = 8 * v53;
    do
    {
      WTF::CompletionHandler<void ()(void)>::operator()(v42++);
      v43 -= 8;
    }
    while (v43);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v41);
  uint64_t result = v58;
  if (v58) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v58, v44);
  }
  return result;
}

void sub_1987484F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl **a30)
{
  if (a30) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a30, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v8;
  char v10 = (WTF **)(v7 + 16 * v9);
  if ((WTF::equal(*v10, 0, v11) & 1) == 0)
  {
    long long v22 = 0;
    int v23 = 1;
    do
    {
      if (*v10 == (WTF *)-1)
      {
        long long v22 = v10;
      }
      else
      {
        uint64_t result = WTF::equalIgnoringASCIICase(*v10, *a2, v12);
        if (result)
        {
          uint64_t v24 = *a1;
          if (*a1) {
            uint64_t v25 = *(unsigned int *)(v24 - 4);
          }
          else {
            uint64_t v25 = 0;
          }
          char v21 = 0;
          uint64_t v20 = v24 + 16 * v25;
          goto LABEL_12;
        }
      }
      unsigned int v9 = (v9 + v23) & v8;
      char v10 = (WTF **)(v7 + 16 * v9);
      ++v23;
    }
    while (!WTF::equal(*v10, 0, v12));
    if (v22)
    {
      *long long v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      char v10 = v22;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WTF::String,WTF::String>(WTF::String &&,WTF::String &&)::{lambda(void)#1}>((uint64_t *)v10, (uint64_t *)a2, &v26);
  uint64_t v14 = *a1;
  if (*a1) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15;
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_11;
    }
LABEL_25:
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v10);
    char v10 = (WTF **)result;
    uint64_t v16 = *a1;
    if (*a1) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v20 = v16 + 16 * v19;
  char v21 = 1;
LABEL_12:
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + 16) = v21;
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v12 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    int v15 = (WTF::StringImpl **)v6;
    do
    {
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (WTF::equal(*v15, 0, v11))
        {
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v15, v16);
        }
        else
        {
          uint64_t v17 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(a1, (uint64_t)v15);
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v15, v18);
          if (v15 == a3) {
            uint64_t v12 = v17;
          }
        }
      }
      v15 += 2;
      --v14;
    }
    while (v14);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WTF::String,WTF::String>(WTF::String &&,WTF::String &&)::{lambda(void)#1}>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v6 = **a3;
  **a3 = 0;
  uint64_t result = (WTF::StringImpl *)a1[1];
  a1[1] = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::WebExtensionControllerParameters>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
  }
  else if ((_BYTE)result)
  {
    unint64_t result = IPC::Decoder::decode<WebKit::WebExtensionControllerParameters>((uint64_t)&v8, a2);
    if (v12)
    {
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      uint64_t v6 = v11;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      *(void *)(a1 + 24) = v6;
      char v7 = 1;
      *(unsigned char *)(a1 + 32) = 1;
      unint64_t result = WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
    }
    else
    {
      char v7 = 0;
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::WebExtensionControllerParameters>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionControllerParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 32))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionControllerParameters,void>::decode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v6 = v5;
  unsigned __int16 v7 = IPC::Decoder::decode<BOOL>(a2);
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v13, a2);
  if (*a2)
  {
    if (v6 && v7 > 0xFFu && v15)
    {
      uint64_t v10 = v13;
      uint64_t v13 = 0;
      *(void *)a1 = v4;
      *(unsigned char *)(a1 + 8) = v7;
      v12[0] = 0;
      *(void *)(a1 + 16) = v10;
      v12[1] = 0;
      uint64_t v11 = v14;
      uint64_t v14 = 0;
      *(void *)(a1 + 24) = v11;
      *(unsigned char *)(a1 + 32) = 1;
      WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
      return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (v15) {
    return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (result >> 1 >= 0xD79)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebExtensionContextParameters>(a2, (uint64_t)v11);
      if (!v12) {
        break;
      }
      if (HIDWORD(v14) == v14)
      {
        WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionContextParameters>((uint64_t)&v13, (unint64_t)v11);
      }
      else
      {
        WebKit::WebExtensionContextParameters::WebExtensionContextParameters(v13 + 152 * HIDWORD(v14), (uint64_t)v11);
        ++HIDWORD(v14);
      }
      if (v12) {
        WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)v11, v9);
      }
      if (!--v6)
      {
        WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v13, HIDWORD(v14));
        *(void *)a1 = v13;
        uint64_t v10 = v14;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        *(void *)(a1 + 8) = v10;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a1 + 16) = 1;
      return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
    }
    LODWORD(v14) = 152 * (int)result / 0x98u;
    uint64_t v13 = WTF::fastMalloc((WTF *)(152 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebExtensionContextParameters>(a2, (uint64_t)v11);
      if (!v12) {
        break;
      }
      if (HIDWORD(v14) == v14)
      {
        WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionContextParameters>((uint64_t)&v13, (unint64_t)v11);
      }
      else
      {
        WebKit::WebExtensionContextParameters::WebExtensionContextParameters(v13 + 152 * HIDWORD(v14), (uint64_t)v11);
        ++HIDWORD(v14);
      }
      if (v12) {
        WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)v11, v5);
      }
      if (!--v6)
      {
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
}

void sub_198748D44(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a28) {
    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)&a9, a2);
  }
  WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28 - 48, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::createDocumentLoader(WebKit::WebPage *this@<X0>, WebCore::LocalFrame *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, const WebCore::SubstituteData *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0xDF0);
  uint64_t v11 = MEMORY[0x1997319E0](v10, a3, a4);
  *a5 = v11;
  *(unsigned char *)(v11 + 3535) = *((unsigned char *)this + 2251);
  if (*(WebCore::LocalFrame **)(*((void *)a2 + 16) + 8) == a2
    || (*(unsigned char *)(*(void *)(*((void *)this + 6) + 112) + 703) & 2) != 0)
  {
    if (*((void *)this + 236))
    {
      WebCore::DocumentLoader::setNavigationID();
      *((void *)this + 236) = 0;
    }
    if (*((unsigned char *)this + 2016) && *(WebCore::LocalFrame **)(*((void *)a2 + 16) + 8) == a2)
    {
      *((unsigned char *)this + 2248) = *((unsigned char *)this + 1998);
      WebKit::WebsitePoliciesData::applyToDocumentLoader((uint64_t)this + 1896, v10);
      if (*((unsigned char *)this + 2016))
      {
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebPage *)((char *)this + 1896), v12);
        *((unsigned char *)this + 2016) = 0;
      }
    }
  }
}

uint64_t WebKit::WebSWServerConnection::updateThrottleState(WebKit::WebSWServerConnection *this)
{
  uint64_t v22 = 0;
  uint64_t v2 = (void *)*((void *)this + 12);
  uint64_t v3 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(v2);
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  if (v2) {
    v2 += 12 * *((unsigned int *)v2 - 1);
  }
  if (v2 != v3)
  {
    do
    {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v22, (uint64_t)(v4 + 8), (uint64_t)v21);
      while (1)
      {
        v4 += 12;
        if (v4 == v6) {
          break;
        }
        uint64_t v7 = v4[2];
        if (*v4 | v4[1] | v7) {
          BOOL v8 = v7 == -1;
        }
        else {
          BOOL v8 = 1;
        }
        if (!v8) {
          goto LABEL_10;
        }
      }
      uint64_t v4 = v6;
LABEL_10:
      ;
    }
    while (v4 != v2);
  }
  uint64_t v10 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(&v22);
  uint64_t v11 = v9;
  uint64_t result = v22;
  if (v22) {
    uint64_t v13 = (WebCore::SecurityOriginData *)(v22 + 32 * *(unsigned int *)(v22 - 4));
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13 == v10)
  {
LABEL_29:
    if (result) {
      return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(result, v9);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v14 = *(_DWORD **)(*((void *)this + 3) + 8);
      ++*v14;
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v21, v10);
      uint64_t v15 = WebCore::SWServer::contextConnectionForRegistrableDomain();
      uint64_t v17 = v15;
      if (v15) {
        ++*(_DWORD *)(v15 + 16);
      }
      uint64_t v18 = v21[0];
      v21[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      WTF::RefCounted<WebCore::SWServer>::deref(v14);
      if (v17) {
        break;
      }
LABEL_22:
      while (1)
      {
        uint64_t v10 = (WebCore::SecurityOriginData *)((char *)v10 + 32);
        if (v10 == v11) {
          break;
        }
        if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v10)) {
          goto LABEL_24;
        }
      }
      uint64_t v10 = v11;
LABEL_24:
      if (v10 == v13)
      {
        uint64_t result = v22;
        goto LABEL_29;
      }
    }
    if (*((unsigned __int8 *)this + 112) != *(unsigned __int8 *)(v17 + 152))
    {
      int v19 = WebKit::WebSWServerConnection::computeThrottleState(*(WebKit::WebSWServerConnection **)(*((void *)this + 3) + 8), (const WebCore::RegistrableDomain *)(v17 + 40));
      if (v19 != (*(unsigned char *)(v17 + 152) != 0)) {
        WebKit::WebSWServerToContextConnection::setThrottleState((WebKit::WebSWServerToContextConnection *)v17, v19);
      }
    }
    int v20 = *(_DWORD *)(v17 + 16);
    if (v20)
    {
      *(_DWORD *)(v17 + 16) = v20 - 1;
      goto LABEL_22;
    }
    uint64_t result = 286;
    __break(0xC471u);
  }
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(uint64_t *a1)
{
  uint64_t v1 = (WebCore::SecurityOriginData *)*a1;
  if (!*a1) {
    return 0;
  }
  if (*((_DWORD *)v1 - 3)) {
    return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::makeConstIterator(a1, v1);
  }
  return (WebCore::SecurityOriginData *)((char *)v1 + 32 * *((unsigned int *)v1 - 1));
}

void *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  uint64_t v2 = &result[12 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[12 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 96 * v1;
    while (1)
    {
      uint64_t v4 = result[2];
      if (*result | result[1] | v4 && v4 != -1) {
        break;
      }
      result += 12;
      v3 -= 96;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(a2);
  char v9 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v11 = (uint64_t *)(v6 + 8 * (result & v7));
    char v12 = (void *)*v11;
    if (!*v11) {
      break;
    }
    if (v12 != (void *)-1)
    {
      uint64_t v11 = v9;
      if (*v12 == *a2)
      {
        char v22 = 0;
        goto LABEL_21;
      }
    }
    uint64_t result = i + (result & v7);
    char v9 = v11;
  }
  if (v9)
  {
    *char v9 = 0;
    --*(_DWORD *)(*a1 - 16);
    uint64_t v11 = v9;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  uint64_t v13 = *a2;
  *a2 = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = v13;
  *uint64_t v11 = result;
  uint64_t v14 = *a1;
  if (*a1) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15;
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_17;
    }
LABEL_26:
    uint64_t v11 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::expand(a1, (void **)v11);
    uint64_t result = *v11;
    goto LABEL_17;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_26;
  }
LABEL_17:
  uint64_t v20 = a1[2];
  *(void *)(result + 8) = v20;
  *(void *)(result + 16) = 0;
  if (v20) {
    char v21 = (uint64_t *)(v20 + 16);
  }
  else {
    char v21 = a1 + 1;
  }
  *char v21 = result;
  a1[2] = result;
  char v12 = (void *)*v11;
  char v22 = 1;
LABEL_21:
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v22;
  return result;
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v13 = (void **)v6;
    do
    {
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v14 = (void *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookupForReinsert(a1, v13);
        *uint64_t v14 = *v13;
        if (v13 == a3) {
          uint64_t v11 = v14;
        }
      }
      ++v13;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(a1, v4, a2);
}

void WebKit::WebLocalFrameLoaderClient::transitionToCommittedForNewPage(uint64_t a1, char a2)
{
  uint64_t v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && *(void *)(*(void *)(v7 + 128) + 8) == v7)
  {
    BOOL v9 = *(unsigned char *)(v5 + 188) == 0;
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    BOOL v9 = 0;
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v10 = *(void *)(*(void *)(a1 + 88) + 8);
  uint64_t v11 = *(unsigned __int8 **)(v10 + 288);
  if (v11)
  {
    int v13 = v11[1232];
    int v12 = v11[1252];
    int v14 = v11[1272];
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
  }
  int v28 = v12;
  int v29 = v14;
  int v27 = v13;
  if (v8 && (uint64_t v25 = *(void *)(*(void *)(v10 + 280) + 88)) != 0) {
    char shouldUseCustomContentProviderForResponse = WebKit::WebPage::shouldUseCustomContentProviderForResponse((WebKit::WebPage *)v5, (const WebCore::ResourceResponse *)(v25 + 1272));
  }
  else {
    char shouldUseCustomContentProviderForResponse = 0;
  }
  *(unsigned char *)(a1 + 50) = shouldUseCustomContentProviderForResponse;
  *(unsigned char *)(a1 + 5WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v16
    && (uint64_t v17 = *(void *)(v16 + 8)) != 0
    && (int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17), v11)
    && ((v8 | v18 ^ 1) & 1) == 0)
  {
    WebCore::Widget::frameRect((WebCore::Widget *)v11);
  }
  else
  {
    uint64_t v19 = *(void *)(v5 + 56);
  }
  uint64_t v32 = v19;
  IntSize v31 = (IntSize)WebKit::WebPage::fixedLayoutSize((WebKit::WebPage *)v5);
  WebCore::LocalFrame::createView();
  uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 288);
  if (v20) {
    ++*(_DWORD *)(v20 + 8);
  }
  if (v27) {
    WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits();
  }
  if (v28) {
    WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits();
  }
  if (v29) {
    WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits();
  }
  unint64_t v21 = *(void *)(v5 + 888);
  if (v21)
  {
    unint64_t v26 = HIDWORD(v21);
    if (SHIDWORD(v21) <= 1) {
      LODWORD(v26) = 1;
    }
    v31.m_width = *(void *)(v5 + 888);
    v31.m_height = v26;
    WebCore::LocalFrameView::enableFixedWidthAutoSizeMode((WebCore::LocalFrameView *)v20, 1, &v31);
    if (*(unsigned char *)(v5 + 904)) {
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight((WebCore::LocalFrameView *)v20);
    }
  }
  IntSize v22 = *(IntSize *)(v5 + 896);
  IntSize v31 = v22;
  if (v22.m_width && HIDWORD(*(unint64_t *)&v22))
  {
    if (v8) {
      WebCore::LocalFrameView::enableSizeToContentAutoSizeMode((WebCore::LocalFrameView *)v20, 1, &v31);
    }
    if (*(unsigned char *)(v5 + 904)) {
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight((WebCore::LocalFrameView *)v20);
    }
  }
  if (*(unsigned char *)(v5 + 916)) {
    WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits();
  }
  *(unsigned char *)(v20 + 315) = v9;
  WebCore::LocalFrameView::setVisualUpdatesAllowedByClient((WebCore::LocalFrameView *)v20);
  uint64_t v23 = *(void *)(v5 + 72);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v23 + 128))(&v30, v23);
  WebCore::LocalFrameView::setViewExposedRect();
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 200))(v23);
    WebCore::ScrollView::setDelegatedScrollingMode();
  }
  uint64_t v24 = *(WebCore::Page **)(v5 + 48);
  (*(void (**)(uint64_t))(*(void *)v23 + 192))(v23);
  WebCore::Page::setDelegatesScaling(v24);
  if (*(unsigned char *)(v5 + 1820)) {
    WebCore::LocalFrameView::setScrollPinningBehavior();
  }
  if ((a2 & 1) == 0) {
    WebKit::WebPage::scheduleFullEditorStateUpdate((unsigned char *)v5);
  }
  if (*(_DWORD *)(v20 + 8) == 1) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  else {
    --*(_DWORD *)(v20 + 8);
  }
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

unint64_t WebKit::WebPage::fixedLayoutSize(WebKit::WebPage *this)
{
  uint64_t v1 = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (v1)
  {
    uint64_t v2 = v1;
    ++v1[2];
    unint64_t v3 = WebCore::ScrollView::fixedLayoutSize((WebCore::ScrollView *)v1);
    unsigned int v4 = v3;
    unint64_t v5 = HIDWORD(v3);
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  else
  {
    unsigned int v4 = 0;
    LODWORD(v5) = 0;
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::usesDelegatedPageScaling(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return 1;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::delegatedScrollingMode(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return 1;
}

__n128 WebKit::RemoteLayerTreeDrawingArea::viewExposedRect@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[9];
  *a2 = result;
  a2[1].n128_u32[0] = this[10].n128_u32[0];
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  int v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  for (i = 0; ; int v5 = i + v7)
  {
    int v7 = v5 & v4;
    uint64_t result = *(void *)(v2 + 8 * (v5 & v4));
    if (!result) {
      break;
    }
    if (result != -1 && WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(result, (uint64_t)*a2)) {
      return 1;
    }
    ++i;
  }
  return result;
}

uint64_t WebKit::WebPage::shouldUseCustomContentProviderForResponse(WebKit::WebPage *this, const WebCore::ResourceResponse *a2)
{
  unint64_t v3 = (WTF::ASCIICaseInsensitiveHash **)WebCore::ResourceResponseBase::mimeType(a2);
  if (!*v3) {
    return 0;
  }

  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)this + 223, v3);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::ensure<WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v11 = result & v9;
  int v12 = (void *)(v8 + 16 * (result & v9));
  uint64_t v13 = *v12;
  uint64_t v14 = *a2;
  if (*v12)
  {
    uint64_t v23 = 0;
    int v24 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v25 = *a1;
        if (*a1) {
          uint64_t v26 = *(unsigned int *)(v25 - 4);
        }
        else {
          uint64_t v26 = 0;
        }
        char v22 = 0;
        uint64_t v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1) {
        uint64_t v23 = v12;
      }
      unsigned int v11 = (v11 + v24) & v9;
      int v12 = (void *)(v8 + 16 * v11);
      uint64_t v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      void *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v14 = *a2;
      int v12 = v23;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0>(v12, v14, a3);
  uint64_t v15 = *a1;
  if (*a1) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - ++*(_DWORD *)(this + 12) = v16;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, v12);
    int v12 = (void *)result;
    uint64_t v17 = *a1;
    if (*a1) {
      unint64_t v20 = *(unsigned int *)(v17 - 4);
    }
    else {
      unint64_t v20 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v21 = v17 + 16 * v20;
  char v22 = 1;
LABEL_12:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v21;
  *(unsigned char *)(a4 + 16) = v22;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  unsigned int v11 = 0;
  if (v7)
  {
    uint64_t v13 = (void *)v6;
    uint64_t v7 = v7;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(*a1, v13);
          int v16 = (unsigned int *)v13[1];
          v13[1] = 0;
          if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            uint64_t v17 = v15;
            WTF::fastFree((WTF *)v16, v10);
            uint64_t v15 = v17;
          }
          if (v13 == a3) {
            unsigned int v11 = v15;
          }
        }
        else
        {
          uint64_t v14 = (unsigned int *)v13[1];
          v13[1] = 0;
          if (v14)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v10);
            }
          }
        }
      }
      v13 += 2;
      --v7;
    }
    while (v7);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0>(void *a1, uint64_t a2, uint64_t **a3)
{
  *a1 = a2;
  WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0::operator()((atomic_uint **)&v7, a3);
  unsigned int v5 = v7;
  uint64_t v7 = 0;
  uint64_t result = (unsigned int *)a1[1];
  a1[1] = v5;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      WTF::fastFree((WTF *)result, v4);
    }
    uint64_t result = (unsigned int *)v7;
    uint64_t v7 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

unsigned int *WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0::operator()(atomic_uint **a1, uint64_t **a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v5 = *a2[1];
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_1EE9E76F0;
  uint64_t v6 = (_DWORD *)**a2;
  **a2 = v4;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t v7 = **a2;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
  uint64_t v9 = *(atomic_uint **)(v7 + 16);
  atomic_fetch_add(v9, 1u);
  *a1 = v9;
  return result;
}

void WebKit::WebUserContentController::addContentRuleLists(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)a2;
    uint64_t v4 = 120 * v2;
    do
    {
      uint64_t v5 = (WTF::StringImpl *)*v3;
      if (*v3) {
        *(_DWORD *)v5 += 2;
      }
      unsigned int v11 = v5;
      WebKit::WebCompiledContentRuleList::create(v3, (uint64_t *)&v10);
      if (v10)
      {
        uint64_t v9 = v10;
        uint64_t v10 = 0;
        WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension();
        if (atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
        }
        uint64_t v7 = v10;
        uint64_t v10 = 0;
        if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v7 + 2);
          (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
        }
      }
      int v8 = v11;
      unsigned int v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v6);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      v3 += 15;
      v4 -= 120;
    }
    while (v4);
  }
}

uint64_t WebKit::WebCompiledContentRuleList::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[1])
  {
    uint64_t result = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(result + 8) = 1;
    *(void *)uint64_t result = &unk_1EE9D1370;
    uint64_t v5 = *a1;
    *a1 = 0;
    *(void *)(result + 16) = v5;
    uint64_t v6 = a1[1];
    a1[1] = 0;
    *(void *)(result + 24) = v6;
    long long v7 = *((_OWORD *)a1 + 1);
    long long v8 = *((_OWORD *)a1 + 2);
    long long v9 = *((_OWORD *)a1 + 4);
    *(_OWORD *)(result + 64) = *((_OWORD *)a1 + 3);
    *(_OWORD *)(result + 80) = v9;
    *(_OWORD *)(result + 32) = v7;
    *(_OWORD *)(result + 48) = v8;
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = (WTF *)CFRetain(*(CFTypeRef *)(v2 - 8));
      int v5 = *(unsigned __int8 *)(a1 + 18);
      int v6 = *(unsigned __int16 *)(a1 + 16);
      if (WTF::isMainRunLoop(v4))
      {
        *(unsigned char *)(v2 + 93WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = (v6 | (v5 << 16)) >> 16;
        *(_WORD *)(v2 + 929) = v6;
        WebKit::WebProcessPool::hardwareKeyboardAvailabilityChanged(v2 - 16);
        long long v7 = *(const void **)(v2 - 8);
        CFRelease(v7);
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
}

void sub_19874A114(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebProcessPool::hardwareKeyboardAvailabilityChanged(uint64_t this)
{
  uint64_t v2 = *(unsigned int *)(this + 84);
  if (v2)
  {
    uint64_t v3 = *(WebKit::WebProcessProxy ***)(this + 72);
    uint64_t v4 = &v3[v2];
    int v5 = (unsigned __int16 *)(this + 945);
    while (1)
    {
      int v6 = *v3;
      long long v7 = (atomic_uint *)((char *)*v3 + 16);
      atomic_fetch_add(v7, 1u);
      long long v8 = (WTF *)WebKit::WebProcessProxy::pages(v6, (uint64_t)&v13);
      if (v14) {
        break;
      }
LABEL_7:
      this = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
      if (v6) {
        this = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7);
      }
      if (++v3 == v4) {
        return this;
      }
    }
    uint64_t v10 = v13;
    uint64_t v11 = 8 * v14;
    while (1)
    {
      int v12 = *v10;
      if ((WTF::isMainRunLoop(v8) & 1) == 0) {
        break;
      }
      unint64_t v1 = v1 & 0xFFFFFFFFFF000000 | *v5 | ((unint64_t)*((unsigned __int8 *)v5 + 2) << 16);
      long long v8 = (WTF *)WebKit::WebPageProxy::hardwareKeyboardAvailabilityChanged(v12, v1);
      ++v10;
      v11 -= 8;
      if (!v11) {
        goto LABEL_7;
      }
    }
    this = 1324;
    __break(0xC471u);
  }
  return this;
}

void sub_19874A224(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  _Unwind_Resume(a1);
}

void sub_19874A308(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::FullscreenClient::setDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 16), a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFD | v3;
  if (objc_opt_respondsToSelector()) {
    char v4 = 4;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFB | v4;
  if (objc_opt_respondsToSelector()) {
    char v5 = 8;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xF7 | v5;
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    char v7 = 16;
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xEF | v7;
  return result;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::collectAllRemoteRenderingBufferIdentifiersToMarkVolatile(uint64_t *a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  double v9 = v8;
  uint64_t v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1 + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v28, a1 + 3, v10, v11);
  int v12 = (void *)a1[3];
  if (v12)
  {
    uint64_t v13 = *((unsigned int *)v12 - 1);
    unsigned int v14 = &v12[v13];
  }
  else
  {
    unsigned int v14 = 0;
    uint64_t v13 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v26, a1 + 3, v14, &v12[v13]);
  uint64_t v15 = v29;
  if (v29 == v27)
  {
    int v16 = 1;
  }
  else
  {
    int v16 = 1;
    do
    {
      uint64_t v17 = *(void *)(*(void *)v15 + 8);
      if (v17 && (*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
        v16 &= WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile((uint64_t)a1, v17, a2, a4, v9);
      }
      WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v28);
      uint64_t v15 = v29;
    }
    while (v29 != v27);
  }
  int v18 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1 + 5);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v28, a1 + 5, v18, v19);
  unint64_t v20 = (void *)a1[5];
  if (v20)
  {
    uint64_t v21 = *((unsigned int *)v20 - 1);
    char v22 = &v20[v21];
  }
  else
  {
    char v22 = 0;
    uint64_t v21 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v26, a1 + 5, v22, &v20[v21]);
  for (uint64_t i = v29; v29 != v27; uint64_t i = v29)
  {
    uint64_t v24 = *(void *)(*(void *)i + 8);
    if (v24 && (*(unsigned int (**)(uint64_t))(*(void *)v24 + 16))(v24)) {
      v16 &= WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile((uint64_t)a1, v24, a3, a4, v9);
    }
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v28);
  }
  return v16 & 1;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, double a5)
{
  uint64_t v5 = *(void *)(a2 + 320);
  if (!v5) {
    return 1;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
  if ((a3 & 2) != 0 && (double v12 = a5 - *(double *)(a2 + 312), v12 < 1.0))
  {
    if (v12 < 0.2 || (*(unsigned char *)(v5 + 57) & 4) != 0)
    {
      uint64_t v13 = 0;
    }
    else
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      unint64_t v20 = *(unsigned int *)(a4 + 12);
      if (v20 == *(_DWORD *)(a4 + 8))
      {
        unint64_t v24 = v20 + (v20 >> 2);
        if (v24 >= 0x10) {
          unint64_t v25 = v24 + 1;
        }
        else {
          unint64_t v25 = 16;
        }
        if (v25 <= v20 + 1) {
          unint64_t v26 = v20 + 1;
        }
        else {
          unint64_t v26 = v25;
        }
        WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a4, v26);
        uint64_t v13 = 0;
        unint64_t v20 = *(unsigned int *)(a4 + 12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      int v21 = v20 + 1;
      uint64_t v22 = *(void *)a4 + 16 * v20;
      *(void *)uint64_t v22 = v5;
      *(unsigned char *)(v22 + 8) = 4;
      *(_DWORD *)(a4 + ++*(_DWORD *)(this + 12) = v21;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 8);
    ++*(_DWORD *)(a1 + 64);
    if (v15 && *(void *)(v15 + 8))
    {
      uint64_t v27 = v15;
      char v16 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)(a1 + 56), &v27) ^ 1;
    }
    else
    {
      char v16 = 1;
    }
    int v17 = (v16 | a3) & 1 | 6;
    if ((v17 & ~*(unsigned __int8 *)(v5 + 57)) != 0)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      uint64_t v27 = v5;
      char v28 = v17;
      uint64_t v18 = *(unsigned int *)(a4 + 12);
      if (v18 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>(a4, (unint64_t)&v27);
        uint64_t v23 = v27;
        uint64_t v27 = 0;
        if (v23) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 16), v11);
        }
      }
      else
      {
        uint64_t v19 = *(void *)a4 + 16 * v18;
        *(void *)uint64_t v19 = v5;
        *(unsigned char *)(v19 + 8) = v17;
        ++*(_DWORD *)(a4 + 12);
      }
    }
    uint64_t v13 = 1;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v11);
  return v13;
}

void sub_19874A7F4(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v2, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v2, v4);
  _Unwind_Resume(a1);
}

void sub_19874A910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *API::ContentRuleListStore::lookupContentRuleList(uint64_t a1, const WTF::String *a2, const WTF::String *a3)
{
  API::constructedPath((API *)(a1 + 16), a2, a3);
  uint64_t v6 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v9 = v6;
  API::ContentRuleListStore::lookupContentRuleListFile(a1, (uint64_t)&v10, (uint64_t)a2, &v9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *API::constructedPath(API *this, const WTF::String *a2, const WTF::String *a3)
{
  if (!*(void *)this || !*(_DWORD *)(*(void *)this + 4))
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  WTF::FileSystemImpl::encodeForFileName((uint64_t *)&v6, a2, a2);
  v8[0] = (uint64_t)"ContentRuleList-";
  v8[1] = 17;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v8, (uint64_t *)&v6, &v7);
  if (!v7)
  {
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x19874AAD0);
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  char v4 = v7;
  char v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v8 = *a1;
  if (v5 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v5;
    uint64_t v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v11 = v24;
        if (v24)
        {
          double v12 = v24 + 5;
          *unint64_t v24 = 2;
          v11[1] = v9;
          *((void *)v11 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v11 + 5;
          unsigned char v11[4] = 4;
          if (a4)
          {
            if (a4 == 1) {
              unsigned char *v12 = *(unsigned char *)a3;
            }
            else {
              memcpy(v11 + 5, a3, a4);
            }
          }
          unint64_t v24 = a5;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v24, &v12[a4]);
        }
        goto LABEL_21;
      }
LABEL_11:
      uint64_t v11 = 0;
      goto LABEL_21;
    }
LABEL_12:
    uint64_t v11 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_21;
  }
  if (!result) {
    goto LABEL_12;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_11;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v11 = v24;
  if (v24)
  {
    uint64_t v13 = (char *)(v24 + 5);
    *unint64_t v24 = 2;
    v11[1] = v9;
    *((void *)v11 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v11 + 5;
    unsigned char v11[4] = 0;
    unsigned int v14 = (char *)v11 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      uint64_t v15 = &v13[2 * (a4 & 0xFFFFFFC0)];
      long long v16 = 0uLL;
      do
      {
        v25.val[0] = (int8x16_t)*a3;
        int8x16_t v17 = *((int8x16_t *)a3 + 1);
        v26.val[0] = (int8x16_t)a3[2];
        long long v18 = a3[3];
        a3 += 4;
        long long v19 = v18;
        v26.val[1] = 0uLL;
        v27.val[0] = v17;
        v25.val[1] = 0uLL;
        unint64_t v20 = v13;
        vst2q_s8(v20, v25);
        v20 += 32;
        v27.val[1] = 0uLL;
        vst2q_s8(v20, v27);
        int v21 = v13 + 64;
        vst2q_s8(v21, v26);
        uint64_t v22 = v13 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
        v13 += 128;
      }
      while (v13 != v15);
      uint64_t v13 = v15;
    }
    while (v13 != v14)
    {
      __int16 v23 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)uint64_t v13 = v23;
      v13 += 2;
    }
    unint64_t v24 = a5;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v24, v14);
  }
LABEL_21:
  *a6 = v11;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v3 = *(_DWORD *)(result + 8);
  uint64_t v4 = *a2;
  if (*a2) {
    int v5 = *(_DWORD *)(v4 + 4);
  }
  else {
    int v5 = 0;
  }
  if ((v5 | v3) < 0 || (v6 = __OFADD__(v3, v5), uint64_t v7 = (v3 + v5), v6))
  {
    *a3 = 0;
  }
  else
  {
    if (v4) {
      int v8 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
    }
    else {
      int v8 = 1;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v7, v8, *(_OWORD **)result, *(void *)(result + 8), (_DWORD *)v4, a3);
  }
  return result;
}

void API::ContentRuleListStore::lookupContentRuleListFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  uint64_t v7 = *a4;
  *a4 = 0;
  uint64_t v12 = v7;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x28);
  *int v8 = &unk_1EE9DF558;
  v8[1] = a1;
  uint64_t v8[2] = v10;
  void v8[3] = v11;
  v8[4] = v12;
  uint64_t v13 = v8;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, &v13);
  int v9 = v13;
  uint64_t v13 = 0;
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
}

atomic_uchar *WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::{lambda(void *,BEWebContentProcess *,NSError *)#1}::__invoke(uint64_t *a1, const void *a2)
{
  uint64_t v4 = (atomic_uchar *)a1[5];
  if (v4) {
    int v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = a1[6];
  *(void *)&long long v11 = v5;
  *((void *)&v11 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v6;
  int v9 = a2;
  if (a2) {
    CFRetain(a2);
  }
  int v10 = 0;
  WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(a1[4], &v11);
  ((void (*)(char *, const void **))off_1EE9D1B98[v10])(&v12, &v9);
  uint64_t result = (atomic_uchar *)v11;
  if ((void)v11) {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v11, v7);
  }
  return result;
}

void sub_19874AFE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v11 = result & v9;
  char v12 = (void *)(v8 + 16 * (result & v9));
  uint64_t v13 = *v12;
  uint64_t v14 = *a3;
  if (*v12)
  {
    int8x16x2_t v25 = 0;
    int v26 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v27 = *a2;
        if (*a2) {
          uint64_t v28 = *(unsigned int *)(v27 - 4);
        }
        else {
          uint64_t v28 = 0;
        }
        char v24 = 0;
        uint64_t v23 = v27 + 16 * v28;
        goto LABEL_14;
      }
      if (v13 == -1) {
        int8x16x2_t v25 = v12;
      }
      unsigned int v11 = (v11 + v26) & v9;
      char v12 = (void *)(v8 + 16 * v11);
      uint64_t v13 = *v12;
      ++v26;
    }
    while (*v12);
    if (v25)
    {
      *int8x16x2_t v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v14 = *a3;
      char v12 = v25;
    }
  }
  void *v12 = v14;
  uint64_t v15 = *a4;
  *a4 = 0;
  uint64_t v16 = v12[1];
  v12[1] = v15;
  if (v16) {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v16 + 16));
  }
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - ++*(_DWORD *)(this + 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v12);
    char v12 = (void *)result;
    uint64_t v19 = *a2;
    if (*a2) {
      unint64_t v22 = *(unsigned int *)(v19 - 4);
    }
    else {
      unint64_t v22 = 0;
    }
    goto LABEL_13;
  }
  if (3 * v22 <= 4 * v21) {
    goto LABEL_26;
  }
LABEL_13:
  uint64_t v23 = v19 + 16 * v22;
  char v24 = 1;
LABEL_14:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  unsigned int v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, v14);
          uint64_t v17 = v14[1];
          v14[1] = 0;
          if (v17) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v17 + 16));
          }
          if (v14 == a3) {
            unsigned int v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = v14[1];
          v14[1] = 0;
          if (v15) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

_DWORD *WebKit::RemoteLayerTreeDrawingArea::addRootFrame(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  WebCore::GraphicsLayer::create();
  uint64_t v6 = v20;
  uint64_t v15 = "drawing area root ";
  LODWORD(v16) = 18;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>>(&v19, (uint64_t)&v15, a3, a2);
  if (v19)
  {
    (*(void (**)(const char *, WTF::StringImpl **))(*(void *)v6 + 40))(v6, &v19);
    uint64_t v9 = v19;
    uint64_t v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v10 = v20;
    int v20 = 0;
    uint64_t v15 = v10;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)&long long v18 = a2;
    *((void *)&v18 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = a3;
    unsigned int v11 = a1[25];
    if (v11 == a1[24])
    {
      WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>(a1 + 22, (unint64_t)&v15);
    }
    else
    {
      uint64_t v12 = *((void *)a1 + 11) + 40 * v11;
      uint64_t v15 = 0;
      *(void *)uint64_t v12 = v10;
      uint64_t v13 = v16;
      uint64_t v16 = 0;
      *(void *)(v12 + 8) = v13;
      uint64_t v14 = v17;
      uint64_t v17 = 0;
      *(void *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 24) = v18;
      ++a1[25];
    }
    WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo::~RootLayerInfo((WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo *)&v15);
    uint64_t result = v20;
    int v20 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
      }
      else {
        --result[2];
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19874B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo::~RootLayerInfo((WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo *)&a10);
  uint64_t v17 = *(_DWORD **)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17)
  {
    if (v17[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v17 + 16))(v17);
    }
    else {
      --v17[2];
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo::~RootLayerInfo(WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 16))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[2];
    }
  }
  int v4 = *(_DWORD **)this;
  *(void *)this = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
}

void *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = result;
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = 1;
  unint64_t v7 = a3;
  do
  {
    ++v6;
    BOOL v8 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v8);
  unint64_t v9 = a4;
  do
  {
    ++v6;
    BOOL v8 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v8);
  if ((v6 | v5) < 0 || (v10 = __OFADD__(v5, v6), unsigned int v11 = v5 + v6, v10))
  {
    _DWORD *result = 0;
  }
  else
  {
    uint64_t result = (void *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>>((uint64_t)&v12, v11, *(unsigned char **)a2, *(void *)(a2 + 8), a3, a4);
    void *v4 = v12;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>>(uint64_t result, unsigned int a2, unsigned char *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  int v6 = (void *)result;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      uint64_t v12 = v13;
      if (v13)
      {
        *(_DWORD *)uint64_t v13 = 2;
        *(_DWORD *)(v13 + 4) = a2;
        *(void *)(v13 + 8) = v13 + 20;
        *(_DWORD *)(v13 + 16) = 4;
        uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>>((unsigned char *)(v13 + 20), a3, a4, a5, a6);
      }
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
  }
  *int v6 = v12;
  return result;
}

void *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>>(unsigned char *__dst, unsigned char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a3 == 1) {
      *__dst = *a2;
    }
    else {
      memcpy(__dst, a2, a3);
    }
  }
  v10[0] = a4;
  v10[1] = a5;
  return WTF::ProcessQualifiedStringTypeAdapter::writeTo<unsigned char>(v10, &__dst[a3]);
}

void *WTF::ProcessQualifiedStringTypeAdapter::writeTo<unsigned char>(void *result, char *__dst)
{
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *result;
  unint64_t v6 = *result;
  do
  {
    ++v4;
    BOOL v7 = v6 > 9;
    v6 /= 0xAuLL;
  }
  while (v7);
  uint64_t v8 = 0;
  do
  {
    v12[v8-- + 24] = (v5 % 0xA) | 0x30;
    BOOL v7 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v7);
  if (v8 + 26 <= 25) {
    uint64_t result = memcpy(__dst, &v12[v8 + 25], -v8);
  }
  uint64_t v9 = 0;
  BOOL v10 = &__dst[v4];
  char *v10 = 45;
  unint64_t v11 = v3[1];
  do
  {
    v12[v9-- + 24] = (v11 % 0xA) | 0x30;
    BOOL v7 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v7);
  if (v9 + 26 <= 25) {
    return memcpy(v10 + 1, &v12[v9 + 25], -v9);
  }
  return result;
}

unsigned int *WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WebKit::WebPageInspectorTarget *>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    uint64_t v16 = (WTF *)*v15;
    if (!*v15)
    {
      if (v12)
      {
        uint64_t *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v15 = v12;
      }
      uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WTF::String,WebKit::WebPageInspectorTarget *>(WTF::String &&,WebKit::WebPageInspectorTarget * &&)::{lambda(void)#1}>(v15, (uint64_t *)a2, &v29);
      uint64_t v18 = *a1;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 12) + 1;
      }
      else {
        int v19 = 1;
      }
      *(_DWORD *)(v18 - ++*(_DWORD *)(this + 12) = v19;
      uint64_t v20 = *a1;
      if (*a1) {
        int v21 = *(_DWORD *)(v20 - 12);
      }
      else {
        int v21 = 0;
      }
      uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
      unint64_t v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22) {
          goto LABEL_16;
        }
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_16:
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v20 + 16 * v23;
        *(unsigned char *)(a4 + 16) = 1;
        return result;
      }
      uint64_t result = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
      uint64_t v15 = (uint64_t *)result;
      uint64_t v20 = *a1;
      if (*a1) {
        unint64_t v23 = *(unsigned int *)(v20 - 4);
      }
      else {
        unint64_t v23 = 0;
      }
      goto LABEL_16;
    }
    if (v16 == (WTF *)-1)
    {
      uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
      goto LABEL_25;
    }
    if (WTF::equal(v16, *a2, (const WTF::StringImpl *)a3)) {
      break;
    }
LABEL_25:
    unsigned int v11 = i + v14;
  }
  uint64_t v25 = *a1;
  if (*a1) {
    uint64_t v26 = *(unsigned int *)(v25 - 4);
  }
  else {
    uint64_t v26 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v25 + 16 * v26;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v27 = *a3;
  if (*a3)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v27 + 8), *a3);
    uint64_t v28 = *(atomic_uint **)(v27 + 8);
    if (v28)
    {
      atomic_fetch_add(v28, 1u);
      uint64_t v15 = *(uint64_t **)a4;
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t result = (unsigned int *)v15[1];
  v15[1] = (uint64_t)v28;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v24);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = (WTF::StringImpl **)v6;
    do
    {
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (*v16)
        {
          uint64_t v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v16);
          WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~KeyValuePair((uint64_t)v16, v18);
          if (v16 == a3) {
            uint64_t v13 = v17;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~KeyValuePair((uint64_t)v16, v10);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WTF::String,WebKit::WebPageInspectorTarget *>(WTF::String &&,WebKit::WebPageInspectorTarget * &&)::{lambda(void)#1}>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v6 = **a3;
  if (v6)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
    unsigned int v7 = *(atomic_uint **)(v6 + 8);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t result = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v7;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void WebKit::WebChromeClient::createScrollingCoordinator(WebKit::WebChromeClient *this@<X0>, WebKit::RemoteScrollingCoordinator **a2@<X8>)
{
  uint64_t v4 = *(void *)(*((void *)this + 2) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = 0;
  if (!*(unsigned char *)(*(void *)(v5 + 72) + 24))
  {
    unsigned int v7 = (WebKit::RemoteScrollingCoordinator *)WTF::fastMalloc((WTF *)0xE0);
    uint64_t v6 = WebKit::RemoteScrollingCoordinator::RemoteScrollingCoordinator(v7, (WebKit::WebPage *)v5);
  }
  *a2 = v6;
  if (v4)
  {
    int v8 = *(const void **)(v4 - 8);
    CFRelease(v8);
  }
}

WebKit::RemoteScrollingCoordinator *WebKit::RemoteScrollingCoordinator::RemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this, WebKit::WebPage *a2)
{
  uint64_t v4 = (void *)WebCore::AsyncScrollingCoordinator::AsyncScrollingCoordinator();
  uint64_t v5 = (uint64_t)(v4 + 17);
  v4[18] = 0;
  void *v4 = &unk_1EE9DF858;
  v4[17] = &unk_1EE9DFAC0;
  uint64_t v6 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  unsigned int v7 = (atomic_uint *)*((void *)a2 + 3);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *((void *)this + 20) = 0;
  *((void *)this + 19) = v7;
  *((unsigned char *)this + 200) = 0;
  *((_WORD *)this + 104) = 0;
  *((_WORD *)this + 108) = 0;
  *((unsigned char *)this + 218) = 0;
  *((void *)this + 2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 184) = 0;
  uint64_t v8 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v6);
  uint64_t v9 = *(void *)(*((void *)this + 19) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  WebKit::AuxiliaryProcess::addMessageReceiver(v8, 0x7Au, *(void *)(v10 + 40), v5);
  return this;
}

void sub_19874BF2C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v6 = *((void *)v2 + 22);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  uint64_t v7 = *((void *)v2 + 21);
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  if (*v4) {
    WTF::fastFree((WTF *)(*v4 - 16), a2);
  }
  uint64_t v8 = (unsigned int *)*((void *)v2 + 19);
  *((void *)v2 + 19) = 0;
  if (v8)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *((void *)v2 + 17) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WebCore::AsyncScrollingCoordinator::~AsyncScrollingCoordinator(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::add<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v12 = result & v9;
  uint64_t v13 = (uint64_t *)(v8 + 24 * (result & v9));
  uint64_t v14 = *v13;
  uint64_t v15 = *a2;
  if (*v13)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    do
    {
      if (v14 == v15)
      {
        uint64_t v28 = *a1;
        if (*a1) {
          unsigned int v29 = *(_DWORD *)(v28 - 4);
        }
        else {
          unsigned int v29 = 0;
        }
        char v25 = 0;
        uint64_t v24 = v28 + 24 * v29;
        goto LABEL_14;
      }
      if (v14 == -1) {
        uint64_t v26 = v13;
      }
      unsigned int v12 = (v12 + v27) & v9;
      uint64_t v13 = (uint64_t *)(v8 + 24 * v12);
      uint64_t v14 = *v13;
      ++v27;
    }
    while (*v13);
    if (v26)
    {
      *uint64_t v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = *a2;
      uint64_t v13 = v26;
    }
  }
  *uint64_t v13 = v15;
  int v16 = *a3;
  uint64_t v17 = *((void *)a3 + 1);
  *((void *)a3 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((_DWORD *)v13 + 2) = v16;
  uint64_t result = v13[2];
  void v13[2] = v17;
  if (result) {
    uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(result, v11);
  }
  uint64_t v18 = *a1;
  if (*a1) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - ++*(_DWORD *)(this + 12) = v19;
  uint64_t v20 = *a1;
  if (*a1) {
    int v21 = *(_DWORD *)(v20 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v13);
    uint64_t v13 = (uint64_t *)result;
    uint64_t v20 = *a1;
    if (*a1) {
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    }
    else {
      LODWORD(v23) = 0;
    }
    goto LABEL_13;
  }
  if (3 * v23 <= 4 * v22) {
    goto LABEL_26;
  }
LABEL_13:
  uint64_t v24 = v20 + 24 * v23;
  char v25 = 1;
LABEL_14:
  *(void *)a4 = v13;
  *(void *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 16) = v25;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 24 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    int v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          uint64_t v18 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, v16);
          uint64_t v19 = v16[2];
          if (v19) {
            WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v19, v10);
          }
          if (v16 == a3) {
            uint64_t v13 = v18;
          }
        }
        else
        {
          uint64_t v17 = v16[2];
          if (v17) {
            WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v17, v10);
          }
        }
      }
      v16 += 3;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void IPC::StreamConnectionWorkQueue::startProcessingThread(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 40);
  IPC::StreamConnectionWorkQueue::processStreams((IPC::StreamConnectionWorkQueue *)a1);
  unsigned __int8 v3 = atomic_load(v2);
  if ((v3 & 1) == 0)
  {
    do
    {
      MEMORY[0x1997420D0](*(unsigned int *)(a1 + 36));
      IPC::StreamConnectionWorkQueue::processStreams((IPC::StreamConnectionWorkQueue *)a1);
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 40));
    }
    while ((v4 & 1) == 0);
  }
  IPC::StreamConnectionWorkQueue::processStreams((IPC::StreamConnectionWorkQueue *)a1);
  char v5 = 0;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 41), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 41);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 41), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 41));
  }
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    int v8 = *(void (**)(uint64_t))(*(void *)v7 + 8);
    v8(v7);
  }
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::sendPrepareToSuspendIPC(WebKit::IsSuspensionImminent)::$_0,void>::call(unsigned int *result)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *((void *)result + 1);
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(v2 + 16) + 8) + 16), 1u);
      if (*(unsigned char *)(v3 + 176) && *(void *)(v3 + 168) == *((void *)result + 3))
      {
        unsigned __int8 v4 = qword_1EB358348;
        if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)(*(void *)(*(void *)(v3 + 16) + 8) + 136);
          if (v5) {
            LODWORD(v5) = *(_DWORD *)(v5 + 108);
          }
          int v8 = 134218240;
          uint64_t v9 = v3;
          __int16 v10 = 1024;
          int v11 = v5;
          _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::processReadyToSuspend: Updating process assertion to allow suspension", (uint8_t *)&v8, 0x12u);
          if (!*(unsigned char *)(v3 + 176))
          {
            __break(0xC471u);
            JUMPOUT(0x19874C61CLL);
          }
        }
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 40));
        if (*(unsigned char *)(v3 + 176)) {
          *(unsigned char *)(v3 + 176) = 0;
        }
        if (*(unsigned char *)(v3 + 184))
        {
          uint64_t v6 = WebKit::ProcessThrottler::expectedThrottleState((WebKit::ProcessThrottler *)v3);
          WebKit::ProcessThrottler::setThrottleState((unsigned int *)v3, v6);
        }
      }
      uint64_t v7 = (unsigned int *)(*(void *)(*(void *)(v2 + 16) + 8) + 16);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + ++*(_DWORD *)(this + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v3;
    while (1)
    {
      __int16 v10 = (void *)(v2 + 24 * v8);
      if (*v10)
      {
        if (*v10 == -1) {
          goto LABEL_18;
        }
        uint64_t v11 = *a1;
        if (*a1) {
          unsigned int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          unsigned int v12 = 0;
        }
        int v13 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)(v2 + 24 * v8), v7);
        int v14 = 0;
        do
        {
          unsigned int v15 = v13 & v12;
          int v16 = (void *)(v11 + 24 * (v13 & v12));
          int v13 = ++v14 + (v13 & v12);
        }
        while (*v16);
        uint64_t v17 = v11 + 24 * v15;
        uint64_t v20 = *(void *)(v17 + 16);
        uint64_t v19 = (void *)(v17 + 16);
        uint64_t v18 = v20;
        void *v19 = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        *(_OWORD *)int v16 = *(_OWORD *)v10;
        uint64_t v21 = v2 + 24 * v8;
        uint64_t v22 = *(void *)(v21 + 16);
        *(void *)(v21 + 16) = 0;
        void *v19 = v22;
        uint64_t v23 = *(void *)(v21 + 16);
        *(void *)(v21 + 16) = 0;
        if (!v23) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v24 = v2 + 24 * v8;
        uint64_t v23 = *(void *)(v24 + 16);
        *(void *)(v24 + 16) = 0;
        if (!v23) {
          goto LABEL_18;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
LABEL_18:
      if (++v8 == v9) {
        goto LABEL_23;
      }
    }
  }
  if (v2)
  {
LABEL_23:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#4},void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 128);
  API::createExtension(&v3, (uint64_t *)(a1 + 16), a1 + 24);
  std::system_category();
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(v1, &v3);
  if (v3)
  {
    uint64_t v2 = *(const void **)(v3 + 8);
    CFRelease(v2);
  }
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v6);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_19874CB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  _Unwind_Resume(exception_object);
}

unsigned int *API::createExtension(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  WebKit::NetworkCache::Data::tryCreateSharedMemory((WebKit::NetworkCache::Data *)(a3 + 72), &v19);
  if (v19)
  {
    uint64_t v18 = v19;
    uint64_t v6 = 64;
    if (*(_DWORD *)a3 < 0xCu) {
      uint64_t v6 = 48;
    }
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v8 = v6 + *(void *)(a3 + 8);
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v19 = 0;
    uint64_t v17 = *(void *)(a3 + 40);
    uint64_t v11 = *a2;
    *a2 = 0;
    uint64_t v12 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v12 + 8) = 1;
    *(void *)uint64_t v12 = &unk_1EE9D1370;
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v18;
    *(void *)(v12 + 32) = v8;
    *(void *)(v12 + 40) = v7;
    *(void *)(v12 + 48) = v8 + v7;
    *(void *)(v12 + 56) = v9;
    *(void *)(v12 + 64) = v8 + v7 + v9;
    *(void *)(v12 + 72) = v10;
    *(void *)(v12 + 80) = v8 + v7 + v9 + v10;
    *(void *)(v12 + 88) = v17;
    uint64_t v13 = API::Object::newObject(0x38uLL, 47);
    *(void *)uint64_t v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *(void *)uint64_t v13 = &unk_1EE9DF298;
    int v14 = *(void **)(a3 + 72);
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v14;
    if (v14) {
      os_retain(v14);
    }
    long long v15 = *(_OWORD *)(a3 + 80);
    *(unsigned char *)(v13 + 48) = *(unsigned char *)(a3 + 96);
    *(_OWORD *)(v13 + 32) = v15;
    uint64_t result = v19;
    *a1 = v13;
    uint64_t v19 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  else
  {
    uint64_t result = (unsigned int *)417;
    __break(0xC471u);
  }
  return result;
}

WebKit::NetworkCache::Data *WebKit::NetworkCache::Data::tryCreateSharedMemory@<X0>(WebKit::NetworkCache::Data *this@<X0>, void *a2@<X8>)
{
  if (*(void *)this && *((unsigned char *)this + 24))
  {
    uint64_t v2 = WebKit::NetworkCache::Data::span(this);
    return (WebKit::NetworkCache::Data *)MEMORY[0x1F416D190](v2);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::call(void *a1)
{
  API::openAndMapContentRuleList((API *)v34, (const WTF::String *)(a1 + 2));
  if (v39)
  {
    if (LODWORD(v34[0]) == 17)
    {
      WTF::RunLoop::main(v2);
      uint64_t v3 = a1[1];
      a1[1] = 0;
      uint64_t v17 = v3;
      WTF::String::isolatedCopy();
      long long v25 = v34[2];
      long long v26 = v34[3];
      *(_OWORD *)uint64_t v22 = v34[0];
      long long v24 = v34[1];
      uint64_t v27 = v35;
      object = v36;
      if (v36) {
        os_retain(v36);
      }
      long long v29 = v37;
      char v30 = v38;
      uint64_t v4 = a1[4];
      a1[4] = 0;
      uint64_t v31 = v4;
      uint64_t v5 = WTF::fastMalloc((WTF *)0x88);
      *(void *)uint64_t v5 = &unk_1EE9DF5F8;
      *(void *)(v5 + 8) = v17;
      *(void *)(v5 + 16) = v20;
      *(_OWORD *)(v5 + 56) = v25;
      *(_OWORD *)(v5 + 72) = v26;
      *(_OWORD *)(v5 + 40) = v24;
      *(void *)(v5 + 88) = v27;
      *(_OWORD *)(v5 + 24) = *(_OWORD *)v22;
      *(void *)(v5 + 96) = object;
      if (object) {
        os_retain(object);
      }
      *(unsigned char *)(v5 + 120) = v30;
      *(_OWORD *)(v5 + 104) = v29;
      *(void *)(v5 + 128) = v31;
      WTF::RunLoop::dispatch();
      uint64_t v33 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      if (object) {
        os_release(object);
      }
      goto LABEL_28;
    }
    API::getContentRuleListSourceFromMappedFile(&v33, (uint64_t)v34);
    uint64_t v11 = v33;
    if (v33)
    {
      if (*((_DWORD *)v33 + 1))
      {
        WTF::RunLoop::main(v33);
        uint64_t v12 = a1[1];
        a1[1] = 0;
        uint64_t v18 = v12;
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        uint64_t v13 = a1[4];
        a1[4] = 0;
        uint64_t v23 = v13;
        int v14 = (void *)WTF::fastMalloc((WTF *)0x28);
        *int v14 = &unk_1EE9DF5A8;
        v14[1] = v18;
        void v14[2] = v20;
        v14[3] = v21;
        v14[4] = v23;
        uint64_t v32 = v14;
        WTF::RunLoop::dispatch();
        if (v32) {
          (*(void (**)(void *))(*v32 + 8))(v32);
        }
        uint64_t v16 = v33;
        uint64_t v33 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v15);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        goto LABEL_28;
      }
      uint64_t v33 = 0;
      if (*(_DWORD *)v11 == 2) {
        uint64_t v11 = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    WTF::RunLoop::main(v11);
    uint64_t v6 = a1[1];
    a1[1] = 0;
    uint64_t v7 = a1[4];
    a1[4] = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    uint64_t v9 = &unk_1EE9DF5D0;
  }
  else
  {
    WTF::RunLoop::main(v2);
    uint64_t v6 = a1[1];
    a1[1] = 0;
    uint64_t v7 = a1[4];
    a1[4] = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    uint64_t v9 = &unk_1EE9DF580;
  }
  *uint64_t v8 = v9;
  v8[1] = v6;
  uint64_t v8[2] = v7;
  uint64_t v19 = v8;
  WTF::RunLoop::dispatch();
  if (v19) {
    (*(void (**)(void *))(*v19 + 8))(v19);
  }
LABEL_28:
  if (v39)
  {
    if (v36) {
      os_release(v36);
    }
  }
}

void API::openAndMapContentRuleList(API *this, const WTF::String *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if ((WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath(a2, a2) & 1) == 0
    || (WebKit::NetworkCache::mapFile((uint64_t)&object), !object))
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 104) = 0;
    return;
  }
  WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)&object);
  WTF::Persistence::Decoder::Decoder();
  LOBYTE(v3WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  char v32 = 0;
  WTF::Persistence::Decoder::operator>>();
  if (v32)
  {
    unsigned int v3 = v31;
    LOBYTE(v29) = 0;
    char v30 = 0;
    WTF::Persistence::Decoder::operator>>();
    if (v30)
    {
      uint64_t v4 = v29;
      LOBYTE(v27) = 0;
      char v28 = 0;
      WTF::Persistence::Decoder::operator>>();
      if (v28)
      {
        uint64_t v5 = v27;
        LOBYTE(v25) = 0;
        char v26 = 0;
        WTF::Persistence::Decoder::operator>>();
        if (v26)
        {
          uint64_t v6 = v25;
          LOBYTE(v23) = 0;
          char v24 = 0;
          WTF::Persistence::Decoder::operator>>();
          if (v24)
          {
            uint64_t v7 = v23;
            LOBYTE(v2WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
            char v22 = 0;
            WTF::Persistence::Decoder::operator>>();
            if (v22)
            {
              uint64_t v8 = v21;
              char v19 = 0;
              char v20 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (v20)
              {
                if (v3 <= 0xB)
                {
                  *(void *)&v35[12] = 0;
                  *(void *)&v35[4] = 0;
                  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v33);
                  unsigned int v9 = 0;
LABEL_16:
                  int v10 = v9 | v3;
                  uint64_t v11 = object;
                  if (object) {
                    os_retain(object);
                  }
                  long long v33 = v13;
                  char v34 = v14;
                  *(_DWORD *)this = v10;
                  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v4;
                  *((void *)this + 2) = v5;
                  *((void *)this + 3) = v6;
                  *((void *)this + 4) = v7;
                  *((void *)this + 5) = v8;
                  *((_DWORD *)this + ++*(_DWORD *)(this + 12) = 0;
                  *(_OWORD *)((char *)this + 52) = *(_OWORD *)v35;
                  *((_DWORD *)this + 17) = *(_DWORD *)&v35[16];
                  *((void *)this + 9) = v11;
                  if (v11)
                  {
                    os_retain(v11);
                    *((_OWORD *)this + 5) = v33;
                    *((unsigned char *)this + 96) = v34;
                    os_release(v11);
                  }
                  else
                  {
                    *((_OWORD *)this + 5) = v13;
                    *((unsigned char *)this + 96) = v14;
                  }
                  *((unsigned char *)this + 104) = 1;
                  goto LABEL_22;
                }
                char v17 = 0;
                char v18 = 0;
                WTF::Persistence::Decoder::operator>>();
                if (v18)
                {
                  char v15 = 0;
                  char v16 = 0;
                  WTF::Persistence::Decoder::operator>>();
                  if (v16)
                  {
                    unsigned int v9 = v3 & 0xFFFFFF00;
                    *(void *)&v35[12] = 0;
                    *(void *)&v35[4] = 0;
                    WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v33);
                    goto LABEL_16;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v33);
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 104) = 0;
LABEL_22:
  if (object) {
    os_release(object);
  }
}

NSObject *WebKit::NetworkCache::Data::span(WebKit::NetworkCache::Data *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    uint64_t result = *(NSObject **)this;
    if (*(void *)this)
    {
      size_t v6 = 0;
      buffer_ptr = 0;
      dispatch_data_t v3 = dispatch_data_create_map(result, (const void **)&buffer_ptr, &v6);
      uint64_t v4 = *(void **)this;
      *(void *)this = v3;
      if (v4) {

      }
      size_t v5 = v6;
      uint64_t result = buffer_ptr;
      *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = buffer_ptr;
      *((void *)this + 2) = v5;
    }
  }
  return result;
}

void WebKit::NetworkCache::mapFile(uint64_t a1@<X8>)
{
  uint64_t v4 = (WTF::FileSystemImpl *)WTF::FileSystemImpl::openFile();
  int v8 = (int)v4;
  if (v4 == -1) {
    goto LABEL_7;
  }
  size_t v5 = v4;
  uint64_t v6 = WTF::FileSystemImpl::fileSize(v4);
  if (!(_BYTE)v7)
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, v7);
LABEL_7:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 16) = 0;
    return;
  }

  WebKit::NetworkCache::adoptAndMapFile(v5, v7, v6, a1);
}

void WebKit::NetworkCache::adoptAndMapFile(WebKit::NetworkCache *this@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = this;
  if (a3)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    if (WTF::FileSystemImpl::MappedFileData::mapFileHandle())
    {
      WebKit::NetworkCache::Data::adoptMap((uint64_t)&v6, (int *)v8, a4);
    }
    else
    {
      WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, v5);
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 24) = 0;
      *(void *)(a4 + 16) = 0;
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v6);
  }
  else
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, a2);
    WebKit::NetworkCache::Data::empty(a4);
  }
}

size_t WebKit::NetworkCache::Data::adoptMap@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v10 = (int)a2;
  size_t v4 = *(unsigned int *)(a1 + 8);
  size_t v5 = *(const void **)a1;
  *(void *)a1 = 0;
  WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v10, a2);
  global_queue = dispatch_get_global_queue(0, 0);
  destructor[0] = MEMORY[0x1E4F143A8];
  destructor[1] = 3321888768;
  destructor[2] = ___ZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEi_block_invoke;
  destructor[3] = &__block_descriptor_48_e8_32c88_ZTSKZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEiE3__0_e5_v8__0l;
  destructor[4] = v5;
  destructor[5] = v4;
  int v7 = dispatch_data_create(v5, v4, global_queue, destructor);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = v7;
  size_t result = dispatch_data_get_size(v7);
  *(unsigned char *)(a3 + 24) = result != 0;
  return result;
}

uint64_t WebKit::DiagnosticLoggingClient::setDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 16), a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFD | v3;
  if (objc_opt_respondsToSelector()) {
    char v4 = 4;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFB | v4;
  if (objc_opt_respondsToSelector()) {
    char v5 = 8;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xF7 | v5;
  if (objc_opt_respondsToSelector()) {
    char v6 = 16;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xEF | v6;
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    char v8 = 32;
  }
  else {
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xDF | v8;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<float,float>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    char v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v13 = *v5 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<float,float>,void>::decode<IPC::Decoder,float>(a1, (unsigned int *)&v13);
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v11 + 16))(v11, v9, v8, 0);
    }
    return 0;
  }
  return v6;
}

unint64_t IPC::ArgumentCoder<std::tuple<float,float>,void>::decode<IPC::Decoder,float>(void *a1, unsigned int *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    uint64_t v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (!v3)
    {
      unint64_t v9 = v2;
      uint64_t v10 = 0;
      goto LABEL_11;
    }
    uint64_t v3 = *((unsigned __int8 *)a2 + 4);
    if (*((unsigned char *)a2 + 4)) {
      return *a2 | ((unint64_t)*v6 << 32);
    }
    __break(1u);
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = (unsigned int *)a1[3];
    if (!v6) {
      goto LABEL_11;
    }
  }
  uint64_t v12 = a1;
  if (v2)
  {
    (*(void (**)(unsigned int *, uint64_t, unint64_t))(*(void *)v6 + 16))(v6, v3, v2);
    a1 = v12;
    uint64_t v10 = *v12;
    unint64_t v9 = v12[1];
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
  }
LABEL_11:
  uint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v10);
    }
    return 0;
  }
  return v7;
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CFDictionary const*>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCCFDictionary>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCFDictionary::createCFDictionary(&v9, &v8);
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v10)
  {
    char v5 = v9;
    unint64_t v9 = 0;
    if (v5)
    {
      uint64_t v6 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
      WTF::fastFree(v6, v7);
    }
  }
}

void sub_19874DB00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (a11)
    {
      uint64_t v13 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, a2);
      WTF::fastFree(v13, v14);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCFDictionary::createCFDictionary(WebKit::CoreIPCCFType ***this@<X0>, void *a2@<X8>)
{
  if (*this)
  {
    unint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:*((unsigned int *)*this + 3)];
    char v5 = *this;
    uint64_t v6 = *((unsigned int *)*this + 3);
    if (v6)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = (uint64_t)*v5 + 16 * v6;
      do
      {
        WebKit::CoreIPCCFType::toID(v7, &v14);
        unint64_t v9 = (WebKit::CoreIPCCFType *)((char *)v7 + 8);
        WebKit::CoreIPCCFType::toID(v9, &v13);
        CFTypeRef v11 = v13;
        CFTypeRef v10 = v14;
        if (v14)
        {
          if (v13)
          {
            [v4 setObject:v13 forKey:v14];
            CFRelease(v11);
          }
          CFTypeRef v12 = v10;
        }
        else
        {
          if (!v13) {
            goto LABEL_9;
          }
          CFTypeRef v12 = v13;
        }
        CFRelease(v12);
LABEL_9:
        uint64_t v7 = (WebKit::CoreIPCCFType *)((char *)v9 + 8);
      }
      while (v7 != (WebKit::CoreIPCCFType *)v8);
    }
    *a2 = v4;
    if (v4)
    {
      CFRetain(v4);
      CFRelease(v4);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_19874DC40(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19874DC70()
{
}

void sub_19874DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x19874DC5CLL);
  }
  JUMPOUT(0x19874DC54);
}

uint64_t *IPC::Decoder::decode<WebKit::CoreIPCCFDictionary>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCCFDictionary,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8)) {
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_19874DCC4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)v1, 0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebKit::CoreIPCCFDictionary,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v8);
  if (*a1)
  {
    if (v9)
    {
      *(void *)a2 = v8;
      *(unsigned char *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    if (v9)
    {
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result)
      {
        uint64_t v6 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, v5);
        return (uint64_t *)WTF::fastFree(v6, v7);
      }
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 8)) {
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_19874DDA0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)v1, 0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = this;
  unint64_t v4 = this[1];
  char v5 = (char *)*this;
  unint64_t v6 = this[2] - *this;
  if (v4 <= v6)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *this = 0;
    this[1] = 0;
    uint64_t v25 = (char *)this[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(char *))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *v2;
        uint64_t v23 = v2[1];
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_24;
  }
  uint64_t v7 = &v5[v6];
  uint64_t v8 = (uint64_t)&v5[v6 + 1];
  this[2] = v8;
  if (!v5)
  {
    uint64_t v23 = v4;
    uint64_t v24 = 0;
LABEL_24:
    unint64_t v4 = 0;
    char v5 = 0;
    uint64_t *v2 = 0;
    v2[1] = 0;
    uint64_t v26 = v2[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24, v23);
        char v5 = (char *)*v2;
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_25;
  }
  unsigned int v9 = *v7;
  if (v9 >= 2)
  {
LABEL_25:
    uint64_t *v2 = 0;
    v2[1] = 0;
    this = (uint64_t *)v2[3];
    if (this && v4) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *, char *))(*this + 16))(this, v5);
    }
    goto LABEL_41;
  }
  if (!v9)
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
    return this;
  }
  unint64_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
  if (v4 < v10 || v4 - v10 <= 7)
  {
    *this = 0;
    this[1] = 0;
    uint64_t v27 = (char *)this[3];
    if (v27)
    {
      (*(void (**)(char *))(*(void *)v27 + 16))(v27);
      uint64_t v28 = *v2;
      uint64_t v29 = v2[1];
      uint64_t v30 = v2[3];
      uint64_t *v2 = 0;
      v2[1] = 0;
      if (v30)
      {
        if (v29) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
        }
      }
    }
    goto LABEL_48;
  }
  CFTypeRef v12 = (unint64_t *)&v5[v10];
  unint64_t v13 = *v12;
  this[2] = (uint64_t)(v12 + 1);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (v13 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v41, v2);
      if (!v43) {
        goto LABEL_47;
      }
      int v31 = HIDWORD(v45);
      if (HIDWORD(v45) == v45)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v44, (unint64_t)&v41);
      }
      else
      {
        char v32 = (void *)(v44 + 16 * HIDWORD(v45));
        uint64_t v33 = v41;
        uint64_t v41 = 0;
        void *v32 = v33;
        uint64_t v34 = v42;
        uint64_t v42 = 0;
        v32[1] = v34;
        HIDWORD(v45) = v31 + 1;
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
      if (!--v13)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v44, HIDWORD(v45));
        uint64_t v35 = v44;
        uint64_t v44 = 0;
        uint64_t v37 = v35;
        int v20 = v45;
        int v19 = HIDWORD(v45);
        goto LABEL_19;
      }
    }
  }
  if (v13)
  {
    LODWORD(v45) = v13;
    uint64_t v44 = WTF::fastMalloc((WTF *)(16 * v13));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v41, v2);
      if (!v43) {
        break;
      }
      int v14 = HIDWORD(v45);
      if (HIDWORD(v45) == v45)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v44, (unint64_t)&v41);
      }
      else
      {
        char v15 = (void *)(v44 + 16 * HIDWORD(v45));
        uint64_t v16 = v41;
        uint64_t v41 = 0;
        void *v15 = v16;
        uint64_t v17 = v42;
        uint64_t v42 = 0;
        v15[1] = v17;
        HIDWORD(v45) = v14 + 1;
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
      if (!--v13)
      {
        uint64_t v18 = v44;
        int v20 = v45;
        int v19 = HIDWORD(v45);
        goto LABEL_18;
      }
    }
LABEL_47:
    std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v36);
LABEL_48:
    this = (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)v2);
LABEL_41:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    return this;
  }
  int v19 = 0;
  int v20 = 0;
  uint64_t v18 = 0;
LABEL_18:
  uint64_t v44 = 0;
  uint64_t v37 = v18;
LABEL_19:
  uint64_t v45 = 0;
  int v38 = v20;
  int v39 = v19;
  char v40 = 1;
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v5);
  this = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *this = 0;
  this[1] = 0;
  char v22 = (char *)v37;
  uint64_t v37 = 0;
  *this = (uint64_t)v22;
  LODWORD(v22) = v38;
  int v38 = 0;
  *((_DWORD *)this + 2) = v22;
  LODWORD(v22) = v39;
  int v39 = 0;
  *((_DWORD *)this + 3) = v22;
  *(void *)a2 = this;
  *(unsigned char *)(a2 + 8) = 1;
  if (v40) {
    return (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v21);
  }
  return this;
}

uint64_t WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::AuthenticationManager>>(uint64_t a1, uint64_t *a2, WTF::ASCIILiteralHash *this, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ASCIILiteralHash::hash(this, (const WTF::ASCIILiteral *)a2) & v9;
  CFTypeRef v11 = (void *)(v8 + 24 * v10);
  uint64_t result = *v11;
  if (*v11)
  {
    char v22 = 0;
    int v23 = 1;
    do
    {
      if (result == -1)
      {
        char v22 = v11;
      }
      else if (*(void *)this)
      {
        uint64_t v26 = v22;
        uint64_t result = strcmp((const char *)result, *(const char **)this);
        char v22 = v26;
        if (!result)
        {
LABEL_24:
          uint64_t v24 = *a2;
          if (*a2) {
            unsigned int v25 = *(_DWORD *)(v24 - 4);
          }
          else {
            unsigned int v25 = 0;
          }
          char v21 = 0;
          uint64_t v20 = v24 + 24 * v25;
          goto LABEL_14;
        }
      }
      else if (!result)
      {
        goto LABEL_24;
      }
      unsigned int v10 = (v10 + v23) & v9;
      CFTypeRef v11 = (void *)(v8 + 24 * v10);
      uint64_t result = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *char v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      CFTypeRef v11 = v22;
    }
  }
  *(_OWORD *)CFTypeRef v11 = *(_OWORD *)this;
  uint64_t v13 = *a4;
  *a4 = 0;
  uint64_t result = v11[2];
  void v11[2] = v13;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - ++*(_DWORD *)(this + 12) = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_13;
    }
LABEL_32:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, (WTF::ASCIILiteralHash *)v11);
    CFTypeRef v11 = (void *)result;
    uint64_t v16 = *a2;
    if (*a2) {
      LODWORD(v19) = *(_DWORD *)(v16 - 4);
    }
    else {
      LODWORD(v19) = 0;
    }
    goto LABEL_13;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_32;
  }
LABEL_13:
  uint64_t v20 = v16 + 24 * v19;
  char v21 = 1;
LABEL_14:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

void *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIILiteralHash *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  CFTypeRef v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (WTF::ASCIILiteralHash *)v6;
    do
    {
      if (*(void *)v14 != -1)
      {
        if (*(void *)v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(*a1, v14);
          uint64_t v17 = *((void *)v14 + 2);
          *((void *)v14 + 2) = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          if (v14 == a3) {
            CFTypeRef v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = *((void *)v14 + 2);
          *((void *)v14 + 2) = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
      }
      uint64_t v14 = (WTF::ASCIILiteralHash *)((char *)v14 + 24);
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1, WTF::ASCIILiteralHash *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, v5, a2);
}

void WebKit::WebProcessProxy::sendProcessDidResume(WebKit::WebProcessProxy *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)a1 + 17);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v14 = 1024;
    int v15 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::sendProcessDidResume:", buf, 0x12u);
  }
  uint64_t v4 = *((void *)a1 + 17);
  if (v4 && *(unsigned char *)(v4 + 104) || *((void *)a1 + 18))
  {
    unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v5 = 2650;
    *((void *)v5 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    CFTypeRef v12 = v5;
    buf[0] = 0;
    BYTE2(v15) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a1, &v12, 0, (uint64_t)buf, 1);
    if (BYTE2(v15))
    {
      uint64_t v7 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    int v8 = v12;
    *(double *)&CFTypeRef v12 = 0.0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v10, v11);
    }
    uint64_t v9 = WebKit::WebProcessProxy::processPoolIfExists(a1);
    if (v9)
    {
      *(double *)&CFTypeRef v12 = (double)(20000 * *(_DWORD *)(*(void *)(v9 + 568) + 8)) / 1000.0;
      *(void *)long long buf = &v12;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHiddenPageDOMTimerThrottlingIncreaseLimit>((uint64_t)a1, (double **)buf);
    }
  }
}

uint64_t WebKit::WebProcessProxy::processPoolIfExists(WebKit::WebProcessProxy *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 778) || *((unsigned char *)this + 712))
  {
    unint64_t v2 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *((void *)this + 17);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      int v7 = 134218240;
      int v8 = this;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::processPoolIfExists: trying to get WebProcessPool from an inactive WebProcessProxy", (uint8_t *)&v7, 0x12u);
    }
  }
  uint64_t v3 = *((void *)this + 64);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    return v4 - 16;
  }
  else {
    return 0;
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHiddenPageDOMTimerThrottlingIncreaseLimit>(uint64_t a1, double **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2681;
  *((void *)v4 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  CFTypeRef v12 = v4;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v4, **a2);
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  CFTypeRef v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t ___ZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyE_block_invoke_2(WebCore::CaptionUserPreferencesMediaAF *a1)
{
  unint64_t v2 = (WebCore::CaptionUserPreferencesMediaAF *)WebCore::CaptionUserPreferencesMediaAF::platformCaptionDisplayMode(a1);
  char v3 = (char)v2;
  WebCore::CaptionUserPreferencesMediaAF::platformPreferredLanguages(v15, v2);
  uint64_t v4 = (atomic_uint *)*((void *)a1 + 4);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  char v11 = (WTF *)v4;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)v15, (uint64_t)&v12);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v5 = &unk_1EE9D0808;
  *(void *)(v5 + 8) = v11;
  *(unsigned char *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v12;
  uint64_t v6 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  *(void *)(v5 + 32) = v6;
  uint64_t v14 = v5;
  WTF::callOnMainRunLoop();
  uint64_t v8 = v14;
  uint64_t v14 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v7);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v9);
}

void sub_19874EA1C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, v17);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15 - 32, v17);
  _Unwind_Resume(a1);
}

unsigned int *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result;
  uint64_t v4 = *(unsigned int ***)result;
  uint64_t v5 = result[3];
  if (v5)
  {
    uint64_t v6 = &v4[v5];
    do
    {
      WTF::String::isolatedCopy();
      uint64_t v8 = (unsigned int *)v10;
      uint64_t v10 = 0;
      uint64_t result = *v4;
      atomic_uint *v4 = v8;
      if (result)
      {
        if (*result == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
          uint64_t result = 0;
          uint64_t v10 = 0;
        }
        else
        {
          *result -= 2;
        }
      }
      ++v4;
    }
    while (v4 < v6);
    uint64_t v4 = *(unsigned int ***)v2;
    LODWORD(v5) = v2[3];
  }
  *(void *)a2 = v4;
  unsigned int v9 = v2[2];
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 12) = v5;
  return result;
}

uint64_t *WTF::HashMap<PAL::SessionID,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t v21 = v16[1];
  uint64_t *v16 = v11;
  v16[1] = v20;
  if (v21) {
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - ++*(_DWORD *)(this + 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          unint64_t v28 = (void *)(v19 + 16 * v26);
          uint64_t v30 = v28 + 1;
          uint64_t v29 = v28[1];
          if (v29)
          {
            WTF::fastFree((WTF *)(v29 - 16), v10);
            uint64_t v17 = *v16;
          }
          void *v28 = v17;
          uint64_t v31 = v6 + 16 * v13;
          void *v30 = 0;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          void *v30 = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          if (v33) {
            WTF::fastFree((WTF *)(v33 - 16), v10);
          }
          if (v16 == a3) {
            unint64_t v14 = v28;
          }
        }
        else
        {
          uint64_t v18 = *(void *)(v6 + 16 * v13 + 8);
          if (v18) {
            WTF::fastFree((WTF *)(v18 - 16), v10);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void WebKit::WebSWClientConnection::didReceiveMessage(WebKit::WebSWClientConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAA0:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebCore::SWClientConnection::fireUpdateFoundEvent();
      }
      break;
    case 0xAA1:
      IPC::handleMessageAsync<Messages::WebSWClientConnection::FocusServiceWorkerClient,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)>(a2, a3, this);
      break;
    case 0xAA2:
      IPC::handleMessage<Messages::WebSWClientConnection::JobRejectedInServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ExceptionData &&)>((uint64_t *)a3);
      break;
    case 0xAA3:
      IPC::handleMessage<Messages::WebSWClientConnection::NotifyClientsOfControllerChange,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::HashSet<WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits> const&,std::optional<WebCore::ServiceWorkerData> &&)>(a3);
      break;
    case 0xAA4:
      IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyChunk,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::SharedBufferReference &&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAA5:
      IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyEnd,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError &&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAA6:
      IPC::handleMessage<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts &&,WebCore::ServiceWorkerData &&,WTF::String &&)>(a3);
      break;
    case 0xAA7:
      IPC::handleMessage<Messages::WebSWClientConnection::RegistrationJobResolvedInServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationData &&,WebCore::ShouldNotifyWhenResolved)>((uint64_t *)a3);
      break;
    case 0xAA8:
      IPC::handleMessage<Messages::WebSWClientConnection::SetRegistrationLastUpdateTime,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime)>((uint64_t *)a3);
      break;
    case 0xAA9:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerUpdateViaCache>>((uint64_t *)a3, (uint64_t)&v4);
      if (v5) {
        WebCore::SWClientConnection::setRegistrationUpdateViaCache();
      }
      break;
    case 0xAAA:
      WebKit::WebSWClientConnection::setSWOriginTableIsImported(this);
      break;
    case 0xAAB:
      IPC::handleMessage<Messages::WebSWClientConnection::SetSWOriginTableSharedMemory,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::SharedMemoryHandle &&)>(a3, (uint64_t)this);
      break;
    case 0xAAC:
      IPC::handleMessageAsync<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::ServiceWorkerRegistrationData &&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0xAAD:
      IPC::handleMessage<Messages::WebSWClientConnection::StartScriptFetchForServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationKey &&,WebCore::FetchOptionsCache)>((uint64_t *)a3);
      break;
    case 0xAAE:
      IPC::handleMessage<Messages::WebSWClientConnection::UpdateBackgroundFetchRegistration,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WebCore::BackgroundFetchInformation const&)>((uint64_t *)a3);
      break;
    case 0xAAF:
      IPC::handleMessage<Messages::WebSWClientConnection::UpdateRegistrationState,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&)>((uint64_t *)a3);
      break;
    case 0xAB0:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ServiceWorkerState>>((uint64_t *)a3, (uint64_t)&v4);
      if (v5) {
        WebCore::SWClientConnection::updateWorkerState();
      }
      break;
    default:
      break;
  }
  if (*((_DWORD *)this + 2) == 1) {
    (*(void (**)(WebKit::WebSWClientConnection *, atomic_uchar *volatile *))(*(void *)this + 8))(this, a2);
  }
  else {
    --*((_DWORD *)this + 2);
  }
}

void *WebKit::WebSWClientConnection::setSWOriginTableIsImported(void *this)
{
  unint64_t v2 = this + 8;
  uint64_t v1 = this[8];
  *(unsigned char *)(this[7] + 24) = 1;
  if (v1 != this[9])
  {
    uint64_t v3 = this;
    do
    {
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::takeFirst(&v5, v2);
      uint64_t v4 = v5;
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    while (v3[8] != v3[9]);
  }
  return this;
}

void sub_19874F280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::setUIClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t v4 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v3;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
    {
      char v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 232))(*(void *)(a1 + 104));
      uint64_t v5 = *(void *)(a1 + 256);
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 1928);
      unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v7 = 2415;
      *((void *)v7 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v36 = v7;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v7, &v33);
      LOBYTE(v34[0]) = 0;
      char v35 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v36, 0, (uint64_t)v34, 1);
      if (v35)
      {
        uint64_t v9 = v34[0];
        v34[0] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      int v10 = v36;
      uint64_t v36 = 0;
      if (v10)
      {
        IPC::Encoder::~Encoder(v10, v8);
        WTF::fastFree(v29, v30);
      }
    }
    char v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 392))(*(void *)(a1 + 104));
    char v12 = v11 & (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 392))();
    *(unsigned char *)(a1 + 802) = v12;
    if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
    {
      char v33 = v12;
      uint64_t v13 = *(void *)(a1 + 256);
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 1928);
      uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v15 = 2416;
      *((void *)v15 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v14;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 70) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      uint64_t v36 = v15;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v15, &v33);
      LOBYTE(v34[0]) = 0;
      char v35 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v36, 0, (uint64_t)v34, 1);
      if (v35)
      {
        uint64_t v17 = v34[0];
        v34[0] = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      uint64_t v18 = v36;
      uint64_t v36 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v16);
        WTF::fastFree(v31, v32);
      }
    }
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(void))(**(void **)(a1 + 104) + 280))(*(void *)(a1 + 104));
    if (*(unsigned __int8 *)(a1 + 1188) != result)
    {
      *(unsigned char *)(a1 + 1188) = (_BYTE)result;
      if (!*(unsigned char *)(a1 + 801))
      {
        if (*(unsigned char *)(a1 + 800))
        {
          char v33 = (char)result;
          uint64_t v20 = *(void *)(a1 + 256);
          uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 1928);
          unint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v22 = 2454;
          *((void *)v22 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v21;
          *((void *)v22 + 66) = (char *)v22 + 16;
          *((void *)v22 + 67) = 512;
          *((void *)v22 + 68) = 0;
          *((void *)v22 + 70) = 0;
          *((void *)v22 + 69) = 0;
          IPC::Encoder::encodeHeader(v22);
          uint64_t v36 = v22;
          IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v22, &v33);
          LOBYTE(v34[0]) = 0;
          char v35 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v36, 0, (uint64_t)v34, 1);
          if (v35)
          {
            uint64_t v24 = v34[0];
            v34[0] = 0;
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
          }
          uint64_t result = v36;
          uint64_t v36 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v23);
            return (IPC::Encoder *)WTF::fastFree(v25, v26);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v27 = (void *)WTF::fastMalloc((WTF *)8);
    void *v27 = &unk_1EE9E0798;
    uint64_t result = *(IPC::Encoder **)(a1 + 104);
    *(void *)(a1 + 104) = v27;
    if (result)
    {
      unint64_t v28 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (IPC::Encoder *)v28();
    }
  }
  return result;
}

uint64_t API::UIClient::canRunModal(API::UIClient *this)
{
  return 0;
}

unint64_t WebKit::UIDelegate::UIClient::canRunBeforeUnloadConfirmPanel(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return ((unint64_t)*(unsigned int *)(v2 + 24) >> 7) & 1;
  }
  else {
    return 0;
  }
}

unint64_t WebKit::UIDelegate::UIClient::needsFontAttributes(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return ((unint64_t)*(unsigned int *)(v2 + 24) >> 30) & 1;
  }
  else {
    return 0;
  }
}

WebKit::UIDelegate::UIClient *WebKit::UIDelegate::createUIClient@<X0>(WebKit::UIDelegate *this@<X0>, WebKit::UIDelegate::UIClient **a2@<X8>)
{
  uint64_t v4 = (WebKit::UIDelegate::UIClient *)WTF::fastMalloc((WTF *)0x18);
  uint64_t result = WebKit::UIDelegate::UIClient::UIClient(v4, this);
  *a2 = v4;
  return result;
}

void sub_19874F7A8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::UIDelegate::UIClient *WebKit::UIDelegate::UIClient::UIClient(WebKit::UIDelegate::UIClient *this, WebKit::UIDelegate *a2)
{
  *((void *)this + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9CF898;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  uint64_t v4 = *(atomic_uint **)a2;
  if (*(void *)a2) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 2) = v4;
  return this;
}

void sub_19874F82C(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::setDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 16), a2);
  char v3 = objc_opt_respondsToSelector();
  int v5 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = (unsigned int *)(a1 + 24);
  unsigned int v7 = (__int16 *)(v4 + 1);
  __int16 v6 = *((_WORD *)v4 + 2);
  char v8 = *((unsigned char *)v4 + 6);
  unsigned int *v4 = v5 & 0xFFFFFFFE | v3 & 1;
  *((_WORD *)v4 + 2) = v6;
  *((unsigned char *)v4 + 6) = v8;
  char v9 = objc_opt_respondsToSelector();
  __int16 v10 = *((_WORD *)v4 + 2);
  unsigned int v11 = *v4;
  int v12 = 2;
  if ((v9 & 1) == 0) {
    int v12 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v10;
  unsigned int *v4 = v11 & 0xFFFFFFFD | v12;
  char v13 = objc_opt_respondsToSelector();
  __int16 v14 = *v7;
  unsigned int v15 = *v4;
  int v16 = 4;
  if ((v13 & 1) == 0) {
    int v16 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v14;
  unsigned int *v4 = v15 & 0xFFFFFFFB | v16;
  char v17 = objc_opt_respondsToSelector();
  __int16 v18 = *v7;
  unsigned int v19 = *v4;
  int v20 = 8;
  if ((v17 & 1) == 0) {
    int v20 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v18;
  unsigned int *v4 = v19 & 0xFFFFFFF7 | v20;
  char v21 = objc_opt_respondsToSelector();
  __int16 v22 = *v7;
  unsigned int v23 = *v4;
  int v24 = 16;
  if ((v21 & 1) == 0) {
    int v24 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v22;
  unsigned int *v4 = v23 & 0xFFFFFFEF | v24;
  char v25 = objc_opt_respondsToSelector();
  __int16 v26 = *v7;
  unsigned int v27 = *v4;
  int v28 = 32;
  if ((v25 & 1) == 0) {
    int v28 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v26;
  unsigned int *v4 = v27 & 0xFFFFFFDF | v28;
  char v29 = objc_opt_respondsToSelector();
  __int16 v30 = *v7;
  unsigned int v31 = *v4;
  int v32 = 64;
  if ((v29 & 1) == 0) {
    int v32 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v30;
  unsigned int *v4 = v31 & 0xFFFFFFBF | v32;
  char v33 = objc_opt_respondsToSelector();
  __int16 v34 = *v7;
  unsigned int v35 = *v4;
  int v36 = 128;
  if ((v33 & 1) == 0) {
    int v36 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v34;
  unsigned int *v4 = v35 & 0xFFFFFF7F | v36;
  char v37 = objc_opt_respondsToSelector();
  __int16 v38 = *v7;
  unsigned int v39 = *v4;
  int v40 = 512;
  if ((v37 & 1) == 0) {
    int v40 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v38;
  unsigned int *v4 = v39 & 0xFFFFFDFF | v40;
  char v41 = objc_opt_respondsToSelector();
  __int16 v42 = *v7;
  unsigned int v43 = *v4;
  int v44 = 256;
  if ((v41 & 1) == 0) {
    int v44 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v42;
  unsigned int *v4 = v43 & 0xFFFFFEFF | v44;
  char v45 = objc_opt_respondsToSelector();
  __int16 v46 = *v7;
  unsigned int v47 = *v4;
  int v48 = 1024;
  if ((v45 & 1) == 0) {
    int v48 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v46;
  unsigned int *v4 = v47 & 0xFFFFFBFF | v48;
  char v49 = objc_opt_respondsToSelector();
  __int16 v50 = *v7;
  unsigned int v51 = *v4;
  int v52 = 2048;
  if ((v49 & 1) == 0) {
    int v52 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v50;
  unsigned int *v4 = v51 & 0xFFFFF7FF | v52;
  char v53 = objc_opt_respondsToSelector();
  __int16 v54 = *v7;
  unsigned int v55 = *v4;
  int v56 = 4096;
  if ((v53 & 1) == 0) {
    int v56 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v54;
  unsigned int *v4 = v55 & 0xFFFFEFFF | v56;
  char v57 = objc_opt_respondsToSelector();
  __int16 v58 = *v7;
  unsigned int v59 = *v4;
  int v60 = 0x2000;
  if ((v57 & 1) == 0) {
    int v60 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v58;
  unsigned int *v4 = v59 & 0xFFFFDFFF | v60;
  char v61 = objc_opt_respondsToSelector();
  __int16 v62 = *v7;
  unsigned int v63 = *v4;
  int v64 = 0x4000;
  if ((v61 & 1) == 0) {
    int v64 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v62;
  unsigned int *v4 = v63 & 0xFFFFBFFF | v64;
  char v65 = objc_opt_respondsToSelector();
  __int16 v66 = *v7;
  unsigned int v67 = *v4;
  int v68 = 0x8000;
  if ((v65 & 1) == 0) {
    int v68 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v66;
  unsigned int *v4 = v67 & 0xFFFF7FFF | v68;
  char v69 = objc_opt_respondsToSelector();
  __int16 v70 = *v7;
  unsigned int v71 = *v4;
  int v72 = 0x10000;
  if ((v69 & 1) == 0) {
    int v72 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v70;
  unsigned int *v4 = v71 & 0xFFFEFFFF | v72;
  char v73 = objc_opt_respondsToSelector();
  __int16 v74 = *v7;
  unsigned int v75 = *v4;
  int v76 = 0x20000;
  if ((v73 & 1) == 0) {
    int v76 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v74;
  unsigned int *v4 = v75 & 0xFFFDFFFF | v76;
  char v77 = objc_opt_respondsToSelector();
  __int16 v78 = *v7;
  unsigned int v79 = *v4;
  int v80 = 0x100000;
  if ((v77 & 1) == 0) {
    int v80 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v78;
  unsigned int *v4 = v79 & 0xFFEFFFFF | v80;
  char v81 = objc_opt_respondsToSelector();
  __int16 v82 = *v7;
  unsigned int v83 = *v4;
  int v84 = 0x200000;
  if ((v81 & 1) == 0) {
    int v84 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v82;
  unsigned int *v4 = v83 & 0xFFDFFFFF | v84;
  char v85 = objc_opt_respondsToSelector();
  __int16 v86 = *v7;
  unsigned int v87 = *v4;
  int v88 = 0x400000;
  if ((v85 & 1) == 0) {
    int v88 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v86;
  unsigned int *v4 = v87 & 0xFFBFFFFF | v88;
  char v89 = objc_opt_respondsToSelector();
  __int16 v90 = *v7;
  unsigned int v91 = *v4;
  int v92 = 0x800000;
  if ((v89 & 1) == 0) {
    int v92 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v90;
  unsigned int *v4 = v91 & 0xFF7FFFFF | v92;
  char v93 = objc_opt_respondsToSelector();
  __int16 v94 = *v7;
  unsigned int v95 = *v4;
  int v96 = 0x1000000;
  if ((v93 & 1) == 0) {
    int v96 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v94;
  unsigned int *v4 = v95 & 0xFEFFFFFF | v96;
  char v97 = objc_opt_respondsToSelector();
  __int16 v98 = *v7;
  unsigned int v99 = *v4;
  int v100 = 0x2000000;
  if ((v97 & 1) == 0) {
    int v100 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v98;
  unsigned int *v4 = v99 & 0xFDFFFFFF | v100;
  char v101 = objc_opt_respondsToSelector();
  __int16 v102 = *v7;
  unsigned int v103 = *v4;
  int v104 = 0x4000000;
  if ((v101 & 1) == 0) {
    int v104 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v102;
  unsigned int *v4 = v103 & 0xFBFFFFFF | v104;
  char v105 = objc_opt_respondsToSelector();
  __int16 v106 = *v7;
  unsigned int v107 = *v4;
  int v108 = 0x8000000;
  if ((v105 & 1) == 0) {
    int v108 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v106;
  unsigned int *v4 = v107 & 0xF7FFFFFF | v108;
  char v109 = objc_opt_respondsToSelector();
  __int16 v110 = *v7;
  unsigned int v111 = *v4;
  unsigned int v112 = 0x80000000;
  if ((v109 & 1) == 0) {
    unsigned int v112 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v110;
  unsigned int *v4 = v111 & 0x7FFFFFFF | v112;
  char v113 = objc_opt_respondsToSelector();
  int v114 = *((unsigned __int8 *)v4 + 6);
  uint64_t v115 = 0x100000000;
  if ((v113 & 1) == 0) {
    uint64_t v115 = 0;
  }
  unint64_t v116 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v114 << 16)) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v114;
  unsigned int *v4 = v116;
  *unsigned int v7 = (v116 | v115) >> 32;
  char v117 = objc_opt_respondsToSelector();
  int v118 = *((unsigned __int8 *)v4 + 6);
  uint64_t v119 = 0x200000000;
  if ((v117 & 1) == 0) {
    uint64_t v119 = 0;
  }
  unint64_t v120 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v118 << 16)) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v118;
  unsigned int *v4 = v120;
  *unsigned int v7 = (v120 | v119) >> 32;
  char v121 = objc_opt_respondsToSelector();
  int v122 = *((unsigned __int8 *)v4 + 6);
  uint64_t v123 = 0x400000000;
  if ((v121 & 1) == 0) {
    uint64_t v123 = 0;
  }
  unint64_t v124 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v122 << 16)) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v122;
  unsigned int *v4 = v124;
  *unsigned int v7 = (v124 | v123) >> 32;
  char v125 = objc_opt_respondsToSelector();
  int v126 = *((unsigned __int8 *)v4 + 6);
  uint64_t v127 = 0x800000000;
  if ((v125 & 1) == 0) {
    uint64_t v127 = 0;
  }
  unint64_t v128 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v126 << 16)) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v126;
  unsigned int *v4 = v128;
  *unsigned int v7 = (v128 | v127) >> 32;
  char v129 = objc_opt_respondsToSelector();
  __int16 v130 = *v7;
  unsigned int v131 = *v4;
  int v132 = 0x40000;
  if ((v129 & 1) == 0) {
    int v132 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v130;
  unsigned int *v4 = v131 & 0xFFFBFFFF | v132;
  char v133 = objc_opt_respondsToSelector();
  __int16 v134 = *v7;
  unsigned int v135 = *v4;
  int v136 = 0x80000;
  if ((v133 & 1) == 0) {
    int v136 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *unsigned int v7 = v134;
  unsigned int *v4 = v135 & 0xFFF7FFFF | v136;
  char v137 = objc_opt_respondsToSelector();
  int v138 = *((unsigned __int8 *)v4 + 6);
  uint64_t v139 = 0x1000000000;
  if ((v137 & 1) == 0) {
    uint64_t v139 = 0;
  }
  unint64_t v140 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v138 << 16)) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v138;
  unsigned int *v4 = v140;
  *unsigned int v7 = (v140 | v139) >> 32;
  if (objc_opt_respondsToSelector())
  {
    int v141 = 0x10000000;
  }
  else
  {
    char v142 = objc_opt_respondsToSelector();
    int v141 = 0x10000000;
    if ((v142 & 1) == 0) {
      int v141 = 0;
    }
  }
  uint64_t v143 = (__int16 *)(v4 + 1);
  __int16 v144 = *((_WORD *)v4 + 2);
  unsigned int v145 = *v4 & 0xEFFFFFFF | v141;
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *((_WORD *)v4 + 2) = v144;
  unsigned int *v4 = v145;
  char v146 = objc_opt_respondsToSelector();
  __int16 v147 = *((_WORD *)v4 + 2);
  unsigned int v148 = *v4;
  int v149 = 0x20000000;
  if ((v146 & 1) == 0) {
    int v149 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *uint64_t v143 = v147;
  unsigned int *v4 = v148 & 0xDFFFFFFF | v149;
  char v150 = objc_opt_respondsToSelector();
  __int16 v151 = *v143;
  unsigned int v152 = *v4;
  int v153 = 0x40000000;
  if ((v150 & 1) == 0) {
    int v153 = 0;
  }
  *((unsigned char *)v4 + 6) = *((unsigned char *)v4 + 6);
  *uint64_t v143 = v151;
  unsigned int *v4 = v152 & 0xBFFFFFFF | v153;
  char v154 = objc_opt_respondsToSelector();
  int v155 = *((unsigned __int8 *)v4 + 6);
  uint64_t v156 = 0x2000000000;
  if ((v154 & 1) == 0) {
    uint64_t v156 = 0;
  }
  unint64_t v157 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v155 << 16)) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v155;
  unsigned int *v4 = v157;
  *uint64_t v143 = (v157 | v156) >> 32;
  char v158 = objc_opt_respondsToSelector();
  int v159 = *((unsigned __int8 *)v4 + 6);
  uint64_t v160 = 0x4000000000;
  if ((v158 & 1) == 0) {
    uint64_t v160 = 0;
  }
  unint64_t v161 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v159 << 16)) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v159;
  unsigned int *v4 = v161;
  *uint64_t v143 = (v161 | v160) >> 32;
  char v162 = objc_opt_respondsToSelector();
  int v163 = *((unsigned __int8 *)v4 + 6);
  uint64_t v164 = 0x8000000000;
  if ((v162 & 1) == 0) {
    uint64_t v164 = 0;
  }
  unint64_t v165 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v163 << 16)) << 32)) & 0xFFFFFF7FFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v163;
  unsigned int *v4 = v165;
  *uint64_t v143 = (v165 | v164) >> 32;
  char v166 = objc_opt_respondsToSelector();
  int v167 = *((unsigned __int8 *)v4 + 6);
  uint64_t v168 = 0x10000000000;
  if ((v166 & 1) == 0) {
    uint64_t v168 = 0;
  }
  unint64_t v169 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v167 << 16)) << 32)) & 0xFFFFFEFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v167;
  unsigned int *v4 = v169;
  *uint64_t v143 = (v169 | v168) >> 32;
  char v170 = objc_opt_respondsToSelector();
  int v171 = *((unsigned __int8 *)v4 + 6);
  uint64_t v172 = 0x20000000000;
  if ((v170 & 1) == 0) {
    uint64_t v172 = 0;
  }
  unint64_t v173 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v171 << 16)) << 32)) & 0xFFFFFDFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v171;
  unsigned int *v4 = v173;
  *uint64_t v143 = (v173 | v172) >> 32;
  char v174 = objc_opt_respondsToSelector();
  int v175 = *((unsigned __int8 *)v4 + 6);
  uint64_t v176 = 0x40000000000;
  if ((v174 & 1) == 0) {
    uint64_t v176 = 0;
  }
  unint64_t v177 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v175 << 16)) << 32)) & 0xFFFFFBFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v175;
  unsigned int *v4 = v177;
  *uint64_t v143 = (v177 | v176) >> 32;
  char v178 = objc_opt_respondsToSelector();
  int v179 = *((unsigned __int8 *)v4 + 6);
  uint64_t v180 = 0x80000000000;
  if ((v178 & 1) == 0) {
    uint64_t v180 = 0;
  }
  unint64_t v181 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v179 << 16)) << 32)) & 0xFFFFF7FFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v179;
  unsigned int *v4 = v181;
  *uint64_t v143 = (v181 | v180) >> 32;
  char v182 = objc_opt_respondsToSelector();
  int v183 = *((unsigned __int8 *)v4 + 6);
  uint64_t v184 = 0x100000000000;
  if ((v182 & 1) == 0) {
    uint64_t v184 = 0;
  }
  unint64_t v185 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v183 << 16)) << 32)) & 0xFFFFEFFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v183;
  unsigned int *v4 = v185;
  *uint64_t v143 = (v185 | v184) >> 32;
  char v186 = objc_opt_respondsToSelector();
  int v187 = *((unsigned __int8 *)v4 + 6);
  uint64_t v188 = 0x200000000000;
  if ((v186 & 1) == 0) {
    uint64_t v188 = 0;
  }
  unint64_t v189 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v187 << 16)) << 32)) & 0xFFFFDFFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v187;
  unsigned int *v4 = v189;
  *uint64_t v143 = (v189 | v188) >> 32;
  char v190 = objc_opt_respondsToSelector();
  int v191 = *((unsigned __int8 *)v4 + 6);
  uint64_t v192 = 0x400000000000;
  if ((v190 & 1) == 0) {
    uint64_t v192 = 0;
  }
  unint64_t v193 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v191 << 16)) << 32)) & 0xFFFFBFFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v191;
  unsigned int *v4 = v193;
  *uint64_t v143 = (v193 | v192) >> 32;
  char v194 = objc_opt_respondsToSelector();
  int v195 = *((unsigned __int8 *)v4 + 6);
  uint64_t v196 = 0x800000000000;
  if ((v194 & 1) == 0) {
    uint64_t v196 = 0;
  }
  unint64_t v197 = (*v4 | ((unint64_t)((unsigned __int16)*v143 | (v195 << 16)) << 32)) & 0xFFFF7FFFFFFFFFFFLL;
  *((unsigned char *)v4 + 6) = v195;
  unsigned int *v4 = v197;
  *uint64_t v143 = (v197 | v196) >> 32;
  char v198 = objc_opt_respondsToSelector();
  uint64_t v199 = 0x1000000000000;
  if ((v198 & 1) == 0) {
    uint64_t v199 = 0;
  }
  unint64_t v200 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFFEFFFFFFFFFFFFLL;
  *uint64_t v143 = *v143;
  unsigned int *v4 = v200;
  *((unsigned char *)v4 + 6) = (v200 | v199) >> 48;
  char v201 = objc_opt_respondsToSelector();
  uint64_t v202 = 0x2000000000000;
  if ((v201 & 1) == 0) {
    uint64_t v202 = 0;
  }
  unint64_t v203 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFFDFFFFFFFFFFFFLL;
  *uint64_t v143 = *v143;
  unsigned int *v4 = v203;
  *((unsigned char *)v4 + 6) = (v203 | v202) >> 48;
  char v204 = objc_opt_respondsToSelector();
  uint64_t v205 = 0x4000000000000;
  if ((v204 & 1) == 0) {
    uint64_t v205 = 0;
  }
  unint64_t v206 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFFBFFFFFFFFFFFFLL;
  *uint64_t v143 = *v143;
  unsigned int *v4 = v206;
  *((unsigned char *)v4 + 6) = (v206 | v205) >> 48;
  char v207 = objc_opt_respondsToSelector();
  uint64_t v208 = 0x8000000000000;
  if ((v207 & 1) == 0) {
    uint64_t v208 = 0;
  }
  unint64_t v209 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFF7FFFFFFFFFFFFLL;
  *uint64_t v143 = *v143;
  unsigned int *v4 = v209;
  *((unsigned char *)v4 + 6) = (v209 | v208) >> 48;
  uint64_t result = objc_opt_respondsToSelector();
  char v211 = 16;
  if ((result & 1) == 0) {
    char v211 = 0;
  }
  unint64_t v212 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFEFFFFFFFFFFFFFLL;
  *uint64_t v143 = *v143;
  unsigned int *v4 = v212;
  *((unsigned char *)v4 + 6) = BYTE6(v212) | v211;
  return result;
}

WebKit::WebFrame *WebKit::WebLocalFrameLoaderClient::finishedLoading(WebKit::WebFrame **this, WebCore::DocumentLoader *a2)
{
  if (*((unsigned char *)this + 50))
  {
    uint64_t result = (WebKit::WebFrame *)WebKit::WebFrame::page(this[2]);
    if (!result) {
      return result;
    }
    uint64_t v5 = (uint64_t)result;
    CFRetain(*((CFTypeRef *)result + 1));
    WebCore::DocumentLoader::mainResourceData((uint64_t *)&v15, a2);
    if (!v15) {
      goto LABEL_15;
    }
    WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)v14, v15);
    unsigned int v7 = v14[0];
    char v8 = (unsigned int *)v15;
    unsigned int v15 = 0;
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v6);
    }
    if (v7)
    {
      char v9 = (WebCore::FragmentedSharedBuffer *)WebCore::SharedBuffer::data(v7);
      uint64_t v10 = *((void *)v7 + 6);
      unsigned int v15 = v9;
      uint64_t v16 = v10;
    }
    else
    {
LABEL_15:
      unsigned int v7 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
    }
    WebCore::ResourceResponseBase::suggestedFilename((uint64_t *)&v13, (WebCore::DocumentLoader *)((char *)a2 + 1272));
    v14[0] = (WebCore::SharedBuffer *)&v13;
    v14[1] = (WebCore::SharedBuffer *)&v15;
    IPC::MessageSender::send<Messages::WebPageProxy::DidFinishLoadingDataForCustomContentProvider>(v5 + 32, (uint64_t)v14);
    int v12 = v13;
    char v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (v7) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t result = this[5];
  if (result)
  {
    if (*((unsigned char *)this + 48)
      || (WebKit::PluginView::manualLoadDidReceiveResponse(result, (CFTypeRef *)a2 + 159), (uint64_t result = this[5]) != 0))
    {
      WebKit::PluginView::manualLoadDidFinishLoading((unsigned __int8 *)result);
      uint64_t result = this[5];
      this[5] = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1) {
          uint64_t result = (WebKit::WebFrame *)(*(uint64_t (**)(WebKit::WebFrame *))(*(void *)result + 8))(result);
        }
        else {
          --*((_DWORD *)result + 2);
        }
      }
      *((unsigned char *)this + 48) = 0;
    }
  }
  return result;
}

unsigned int *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebFrame*&>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v30 = -1640531527;
  __int16 v31 = 0;
  char v32 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v30, a2);
  unsigned int v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30) & v9;
  int v12 = (unsigned int *)(v8 + 24 * v11);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  if (*(_OWORD *)v12 == 0)
  {
LABEL_4:
    *(_OWORD *)int v12 = *(_OWORD *)a2;
    uint64_t v15 = *a3;
    if (v15)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v15 + 16), v15);
      uint64_t v16 = *(atomic_uint **)(v15 + 16);
      if (v16) {
        atomic_fetch_add(v16, 1u);
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t result = (unsigned int *)*((void *)v12 + 2);
    *((void *)v12 + 2) = v16;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - ++*(_DWORD *)(this + 12) = v19;
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_15;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
LABEL_15:
      *(void *)a4 = v12;
      *(void *)(a4 + 8) = v20 + 24 * v23;
      *(unsigned char *)(a4 + 16) = 1;
      return result;
    }
    uint64_t result = (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, (uint64_t)v12);
    int v12 = result;
    uint64_t v20 = *a1;
    if (*a1) {
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    }
    else {
      LODWORD(v23) = 0;
    }
    goto LABEL_15;
  }
  int v24 = 0;
  int v25 = 1;
  while (v14 != *a2 || v13 != a2[1])
  {
    if (v13 == -1) {
      int v24 = v12;
    }
    unsigned int v11 = (v11 + v25) & v9;
    int v12 = (unsigned int *)(v8 + 24 * v11);
    uint64_t v14 = *(void *)v12;
    uint64_t v13 = *((void *)v12 + 1);
    ++v25;
    if (*(_OWORD *)v12 == 0)
    {
      if (v24)
      {
        *(void *)int v24 = 0;
        *((void *)v24 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
        *((void *)v24 + 2) = 0;
        --*(_DWORD *)(*a1 - 16);
        int v12 = v24;
      }
      goto LABEL_4;
    }
  }
  uint64_t v26 = *a1;
  if (*a1) {
    unsigned int v27 = *(_DWORD *)(v26 - 4);
  }
  else {
    unsigned int v27 = 0;
  }
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v26 + 24 * v27;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v28 = *a3;
  if (*a3)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v28 + 16), *a3);
    char v29 = *(atomic_uint **)(v28 + 16);
    if (v29)
    {
      atomic_fetch_add(v29, 1u);
      int v12 = *(unsigned int **)a4;
    }
  }
  else
  {
    char v29 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)v12 + 2);
  *((void *)v12 + 2) = v29;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v10);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 24 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + ++*(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v6;
    do
    {
      uint64_t v15 = v5 + 24 * v12;
      if (*(void *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          uint64_t v16 = v5 + 24 * v12;
          char v17 = *(unsigned int **)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v9);
            }
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          unsigned int v33 = -1640531527;
          __int16 v34 = 0;
          char v35 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v33, (void *)(v5 + 24 * v12));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v33);
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v19;
            unint64_t v23 = (_OWORD *)(v18 + 24 * (v20 & v19));
            int v20 = ++v21 + (v20 & v19);
          }
          while (*v23 != 0);
          uint64_t v24 = v18 + 24 * v22;
          unsigned int v27 = *(unsigned int **)(v24 + 16);
          uint64_t v26 = (void *)(v24 + 16);
          int v25 = v27;
          *uint64_t v26 = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v9);
          }
          _OWORD *v23 = *(_OWORD *)v15;
          uint64_t v28 = v5 + 24 * v12;
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 16) = 0;
          *uint64_t v26 = v29;
          unsigned int v30 = *(unsigned int **)(v28 + 16);
          *(void *)(v28 + 16) = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v9);
          }
          if (v15 == a3) {
            uint64_t v13 = v23;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

void sub_198750EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Unwind_Resume(a1);
}

void WebKit::RemoteImageBufferSet::~RemoteImageBufferSet(WebKit::RemoteImageBufferSet *this, void *a2)
{
  WebKit::RemoteImageBufferSet::~RemoteImageBufferSet(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WebCore::ImageBuffer *v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;

  *(void *)this = &unk_1EE9BF208;
  uint64_t v3 = (WebCore::ImageBuffer *)*((void *)this + 5);
  if (v3)
  {
    if (WebCore::ImageBuffer::volatilityState(v3) != 1)
    {
      int v4 = (void *)*((void *)this + 5);
      if (v4[14])
      {
        unsigned int v5 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
        if (*(_DWORD *)(v5 + 364))
        {
          int v44 = (_DWORD *)v5;
          do
            (*(void (**)(_DWORD *, uint64_t))(*(void *)v44 + 104))(v44, 1);
          while (v44[91]);
        }
      }
    }
  }
  unsigned int v6 = (const void *)*((void *)this + 11);
  *((void *)this + 1WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7)
  {
    uint64_t v8 = 0;
    int v9 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v11 = 1;
    uint64_t v12 = v10 - 1;
    *(void *)(v9 + 8) = v10 - 1;
    if (v10 == 1)
    {
      int v40 = *(void *)(v9 + 16);
      uint64_t v13 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = 0;
      uint64_t v14 = v40 != 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
    }
    if (!v12)
    {
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      if (!v14) {
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  uint64_t v15 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v15)
  {
    uint64_t v16 = 0;
    char v17 = *(void *)(v15 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16) {
      MEMORY[0x19972E8D0](v17);
    }
    uint64_t v18 = *(void *)(v17 + 8);
    unsigned int v19 = 1;
    int v20 = v18 - 1;
    *(void *)(v17 + 8) = v18 - 1;
    if (v18 == 1)
    {
      char v41 = *(void *)(v17 + 16);
      int v21 = *(void *)(v17 + 24);
      *(void *)(v17 + 24) = 0;
      unsigned int v22 = v41 != 0;
    }
    else
    {
      int v21 = 0;
      unsigned int v22 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
    if (v19 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
    }
    if (!v20)
    {
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      if (!v22) {
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  unint64_t v23 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v23)
  {
    uint64_t v24 = 0;
    int v25 = *(void *)(v23 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
    if (v24) {
      MEMORY[0x19972E8D0](v25);
    }
    uint64_t v26 = *(void *)(v25 + 8);
    unsigned int v27 = 1;
    uint64_t v28 = v26 - 1;
    *(void *)(v25 + 8) = v26 - 1;
    if (v26 == 1)
    {
      __int16 v42 = *(void *)(v25 + 16);
      uint64_t v29 = *(void *)(v25 + 24);
      *(void *)(v25 + 24) = 0;
      unsigned int v30 = v42 != 0;
    }
    else
    {
      uint64_t v29 = 0;
      unsigned int v30 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
    }
    if (!v28)
    {
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      if (!v30) {
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  __int16 v31 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v31)
  {
    char v32 = 0;
    unsigned int v33 = *(void *)(v31 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](v33);
    }
    __int16 v34 = *(void *)(v33 + 8);
    char v35 = 1;
    int v36 = v34 - 1;
    *(void *)(v33 + 8) = v34 - 1;
    if (v34 == 1)
    {
      unsigned int v43 = *(void *)(v33 + 16);
      char v37 = *(void *)(v33 + 24);
      *(void *)(v33 + 24) = 0;
      __int16 v38 = v43 != 0;
    }
    else
    {
      char v37 = 0;
      __int16 v38 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
    if (v35 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
    }
    if (!v36)
    {
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if (!v38) {
        WTF::fastFree((WTF *)v33, a2);
      }
    }
  }
  unsigned int v39 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v39)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v39 + 16), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v39 + 16));
      (*(void (**)(void))(*(void *)(v39 + 8) + 8))();
    }
  }
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2,void,NSObject  {objcproto13OS_xpc_object}*>::call(WTF::RunLoop *a1, id a2)
{
  if (!a2)
  {
    WTF::RunLoop::main(a1);
    uint64_t v8 = *((void *)a1 + 1);
    *((void *)a1 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
LABEL_9:
    uint64_t v10 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v10 = &unk_1EE9D1D28;
    *((void *)v10 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v8;
    *((void *)v10 + 2) = a2;
    uint64_t v11 = v10;
    WTF::RunLoop::dispatch();
    goto LABEL_10;
  }
  uint64_t result = object_getClass(a2);
  if (result == (WTF::RunLoop *)MEMORY[0x1E4F145A8])
  {
    WTF::RunLoop::main(result);
    uint64_t v8 = *((void *)a1 + 1);
    *((void *)a1 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    id v9 = a2;
    goto LABEL_9;
  }
  if (!*((void *)a1 + 2)) {
    return result;
  }
  WTF::RunLoop::main(result);
  uint64_t v5 = *((void *)a1 + 2);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  id v6 = a2;
  int v7 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(void *)int v7 = &unk_1EE9D1D50;
  *((void *)v7 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v5;
  *((void *)v7 + 2) = a2;
  uint64_t v11 = v7;
  WTF::RunLoop::dispatch();
LABEL_10:
  uint64_t result = v11;
  if (v11) {
    return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v11 + 8))(v11);
  }
  return result;
}

void sub_1987514D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::call(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2 = result;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = atomic_load(WebKit::hasInitializedManagedDomains);
  if (v3)
  {
    if (!*((unsigned char *)result + 8)) {
      return result;
    }
    goto LABEL_5;
  }
  if (*((unsigned char *)result + 8))
  {
LABEL_5:
    {
      int v4 = (WTF::StringImpl **)WebKit::managedDomains(void)::managedDomains;
      if (WebKit::managedDomains(void)::managedDomains)
      {
        WebKit::managedDomains(void)::managedDomains = 0;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
      }
    }
    else
    {
      WebKit::managedDomains(void)::managedDomains = 0;
    }
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v5 = (void *)*((void *)v2 + 2);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v22;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v21 + 1) + 8 * v8);
        {
          if (WebKit::managedDomains(void)::managedDomains
            && *(_DWORD *)(WebKit::managedDomains(void)::managedDomains - 12) > 9u)
          {
            goto LABEL_41;
          }
        }
        else
        {
          WebKit::managedDomains(void)::managedDomains = 0;
        }
        MEMORY[0x19972EAD0](v17, v9);
        MEMORY[0x19972E890](&v19, v17, 0);
        uint64_t v11 = v17[0];
        v17[0] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        WTF::URL::protocol((WTF::URL *)&v19);
        if (!v12) {
          WTF::URL::setProtocol();
        }
        if (v20)
        {
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v18, (const WTF::URL *)&v19);
          if (v18)
          {
            if (*((_DWORD *)v18 + 1) && (MEMORY[0x19972E990]() & 1) == 0)
            {
              {
                WebKit::managedDomains(void)::managedDomains = 0;
              }
              WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&WebKit::managedDomains(void)::managedDomains, &v18, (uint64_t)v17);
            }
            uint64_t v13 = v18;
            uint64_t v18 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v12);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
        }
        uint64_t v14 = v19;
        unsigned int v19 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v12);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v15 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
      uint64_t v6 = v15;
    }
    while (v15);
  }
LABEL_41:
  atomic_store(1u, WebKit::hasInitializedManagedDomains);
  uint64_t v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v16 = &unk_1EE9D31F0;
  unsigned int v19 = v16;
  WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized((uint64_t *)&v19);
  uint64_t result = v19;
  if (v19) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v19 + 8))(v19);
  }
  return result;
}

void sub_1987518B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(uint64_t *a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
  unsigned __int8 v3 = (unsigned int *)v2;
  *(_DWORD *)uint64_t v2 = 1;
  uint64_t v4 = *a1;
  *a1 = 0;
  *(void *)(v2 + 8) = v4;
  LOBYTE(v4) = atomic_load(WebKit::hasInitializedManagedDomains);
  if (v4)
  {
    {
      if (WebKit::managedDomains(void)::managedDomains
        && *(_DWORD *)(WebKit::managedDomains(void)::managedDomains - 12))
      {
        atomic_fetch_add((atomic_uint *volatile)v2, 1u);
        uint64_t v14 = (atomic_uint *)v2;
        {
          if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore) {
            uint64_t v5 = *(WebKit::WebsiteDataStore **)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8);
          }
          else {
            uint64_t v5 = 0;
          }
        }
        else
        {
          uint64_t v5 = 0;
          WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
        }
        uint64_t v6 = (WebKit *)WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v14, v5, &WebKit::managedDomains(void)::managedDomains);
        WebKit::allDataStores(v6);
        uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::allDataStores(void)::map);
        uint64_t v8 = v7;
        uint64_t v10 = v9;
        if (WebKit::allDataStores(void)::map) {
          uint64_t v11 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
        }
        else {
          uint64_t v11 = 0;
        }
        if ((void *)v11 != v7)
        {
          do
          {
            uint64_t v12 = *(CFTypeRef **)(v8[1] + 8);
            CFRetain(v12[1]);
            WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v14, (WebKit::WebsiteDataStore *)v12, &WebKit::managedDomains(void)::managedDomains);
            CFRelease(v12[1]);
            while (1)
            {
              v8 += 2;
              if (v8 == v10) {
                break;
              }
              if ((unint64_t)(*v8 + 1) > 1) {
                goto LABEL_18;
              }
            }
            uint64_t v8 = v10;
LABEL_18:
            ;
          }
          while (v8 != (void *)v11);
        }
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
      }
    }
    else
    {
      WebKit::managedDomains(void)::managedDomains = 0;
    }
  }

  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
}

void IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::decode(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = (const char ***)a1;
  uint64_t v791 = IPC::Decoder::decode<WebCore::IntSize>(a1);
  uint64_t v792 = v3;
  if (!v3 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 0;
  }
  int v790 = IPC::Decoder::decode<WTF::OptionSet<WebCore::ActivityState>>((IPC::Decoder *)v2);
  if ((v790 & 0xFF0000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 1;
  }
  IPC::Decoder::decode<WebKit::WebPreferencesStore>((IPC::Decoder *)v2, (uint64_t)&v1053);
  if (!v1061 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 2;
  }
  unsigned __int16 v4 = IPC::Decoder::decode<WebKit::DrawingAreaType>((IPC::Decoder *)v2);
  if (v4 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 3;
  }
  uint64_t v788 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v2);
  uint64_t v789 = v5;
  if (!v5 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 4;
  }
  uint64_t v786 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v2);
  uint64_t v787 = v6;
  if (!v6 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 5;
  }
  IPC::Decoder::decode<WebKit::WebPageGroupData>((uint64_t)v1051, (IPC::Decoder *)v2);
  if (!v1052 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 6;
  }
  uint64_t v7 = v2[1];
  uint64_t v8 = *v2;
  unint64_t v9 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v7 <= v9)
  {
    v366 = 0;
    v367 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v368 = v2[3];
    if (v368)
    {
      if (v7)
      {
        (*((void (**)(const char **))*v368 + 2))(v368);
        v367 = *v2;
        v366 = v2[1];
      }
      else
      {
        v366 = 0;
        v367 = 0;
      }
    }
    goto LABEL_527;
  }
  uint64_t v10 = (unsigned __int8 *)v8 + v9;
  v2[2] = (const char **)(v10 + 1);
  if (!v8)
  {
    v366 = v7;
    v367 = 0;
LABEL_527:
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v369 = v2[3];
    if (v369)
    {
      if (v366)
      {
        (*((void (**)(const char **, const char **, const char **))*v369 + 2))(v369, v367, v366);
        uint64_t v8 = *v2;
        uint64_t v7 = v2[1];
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_528;
  }
  unsigned int v11 = *v10;
  if (v11 < 2)
  {
    int v785 = 0;
    BOOL v784 = v11 != 0;
    goto LABEL_12;
  }
LABEL_528:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v370 = v2[3];
  if (v370 && v7) {
    (*((void (**)(const char **, const char **))*v370 + 2))(v370, v8);
  }
  BOOL v784 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 7;
  }
  int v785 = 1;
LABEL_12:
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v2, &v1049);
  if (!v1050)
  {
    v371 = *v2;
    v372 = v2[1];
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v373 = v2[3];
    if (!v373 || !v372 || ((*((void (**)(const char **, const char **))*v373 + 2))(v373, v371), !v1050))
    {
      if (*((_DWORD *)v2 + 18) == -1) {
        *((_DWORD *)v2 + 18) = 8;
      }
    }
  }
  uint64_t v12 = v2[1];
  uint64_t v13 = *v2;
  unint64_t v14 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v12 <= v14)
  {
    v374 = 0;
    v375 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v376 = v2[3];
    if (v376)
    {
      if (v12)
      {
        (*((void (**)(const char **))*v376 + 2))(v376);
        v375 = *v2;
        v374 = v2[1];
      }
      else
      {
        v374 = 0;
        v375 = 0;
      }
    }
    goto LABEL_535;
  }
  uint64_t v15 = (unsigned __int8 *)v13 + v14;
  v2[2] = (const char **)(v15 + 1);
  if (!v13)
  {
    v374 = v12;
    v375 = 0;
LABEL_535:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v377 = v2[3];
    if (v377)
    {
      if (v374)
      {
        (*((void (**)(const char **, const char **, const char **))*v377 + 2))(v377, v375, v374);
        uint64_t v13 = *v2;
        uint64_t v12 = v2[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_536;
  }
  unsigned int v16 = *v15;
  if (v16 < 2)
  {
    int v783 = 0;
    BOOL v782 = v16 != 0;
    goto LABEL_17;
  }
LABEL_536:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v378 = v2[3];
  if (v378 && v12) {
    (*((void (**)(const char **, const char **))*v378 + 2))(v378, v13);
  }
  BOOL v782 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 9;
  }
  int v783 = 1;
LABEL_17:
  v780 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)v2);
  uint64_t v781 = v17;
  if (!v17 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 10;
  }
  v778 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v779 = v18;
  if (!v18 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 11;
  }
  v776 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v777 = v19;
  if (!v19 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 12;
  }
  v774 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v775 = v20;
  if (!v20 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 13;
  }
  IPC::Decoder::decode<std::optional<WebCore::FloatRect>>((unint64_t *)v2, &v1046);
  if (!v1048 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 14;
  }
  long long v21 = (long long *)IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)v2);
  uint64_t v773 = v22;
  if (!v22 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 15;
  }
  uint64_t v23 = IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)v2);
  uint64_t v772 = v24;
  if (!v24 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 16;
  }
  int v25 = v2[1];
  uint64_t v26 = *v2;
  unint64_t v27 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v25 <= v27)
  {
    v379 = 0;
    v380 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v381 = v2[3];
    if (v381)
    {
      if (v25)
      {
        (*((void (**)(const char **))*v381 + 2))(v381);
        v380 = *v2;
        v379 = v2[1];
      }
      else
      {
        v379 = 0;
        v380 = 0;
      }
    }
    goto LABEL_554;
  }
  uint64_t v28 = (unsigned __int8 *)v26 + v27;
  v2[2] = (const char **)(v28 + 1);
  if (!v26)
  {
    v379 = v25;
    v380 = 0;
LABEL_554:
    int v25 = 0;
    uint64_t v26 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v382 = v2[3];
    if (v382)
    {
      if (v379)
      {
        (*((void (**)(const char **, const char **, const char **))*v382 + 2))(v382, v380, v379);
        uint64_t v26 = *v2;
        int v25 = v2[1];
      }
      else
      {
        int v25 = 0;
        uint64_t v26 = 0;
      }
    }
    goto LABEL_555;
  }
  unsigned int v29 = *v28;
  if (v29 < 2)
  {
    int v771 = 0;
    BOOL v770 = v29 != 0;
    goto LABEL_28;
  }
LABEL_555:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v383 = v2[3];
  if (v383 && v25) {
    (*((void (**)(const char **, const char **))*v383 + 2))(v383, v26);
  }
  BOOL v770 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 17;
  }
  int v771 = 1;
LABEL_28:
  unsigned int v30 = v2[1];
  __int16 v31 = *v2;
  unint64_t v32 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v30 <= v32)
  {
    v384 = 0;
    uint64_t v385 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v386 = v2[3];
    if (v386)
    {
      if (v30)
      {
        (*((void (**)(const char **))*v386 + 2))(v386);
        uint64_t v385 = *v2;
        v384 = v2[1];
      }
      else
      {
        v384 = 0;
        uint64_t v385 = 0;
      }
    }
    goto LABEL_559;
  }
  unsigned int v33 = (unsigned __int8 *)v31 + v32;
  v2[2] = (const char **)(v33 + 1);
  if (!v31)
  {
    v384 = v30;
    uint64_t v385 = 0;
LABEL_559:
    unsigned int v30 = 0;
    __int16 v31 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v387 = v2[3];
    if (v387)
    {
      if (v384)
      {
        (*((void (**)(const char **, const char **, const char **))*v387 + 2))(v387, v385, v384);
        __int16 v31 = *v2;
        unsigned int v30 = v2[1];
      }
      else
      {
        unsigned int v30 = 0;
        __int16 v31 = 0;
      }
    }
    goto LABEL_560;
  }
  unsigned int v34 = *v33;
  if (v34 < 2)
  {
    int v769 = 0;
    BOOL v768 = v34 != 0;
    goto LABEL_32;
  }
LABEL_560:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v388 = v2[3];
  if (v388 && v30) {
    (*((void (**)(const char **, const char **))*v388 + 2))(v388, v31);
  }
  BOOL v768 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 18;
  }
  int v769 = 1;
LABEL_32:
  char v35 = v2[1];
  int v36 = *v2;
  unint64_t v37 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v35 <= v37)
  {
    uint64_t v389 = 0;
    v390 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v391 = v2[3];
    if (v391)
    {
      if (v35)
      {
        (*((void (**)(const char **))*v391 + 2))(v391);
        v390 = *v2;
        uint64_t v389 = v2[1];
      }
      else
      {
        uint64_t v389 = 0;
        v390 = 0;
      }
    }
    goto LABEL_564;
  }
  __int16 v38 = (unsigned __int8 *)v36 + v37;
  v2[2] = (const char **)(v38 + 1);
  if (!v36)
  {
    uint64_t v389 = v35;
    v390 = 0;
LABEL_564:
    char v35 = 0;
    int v36 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v392 = v2[3];
    if (v392)
    {
      if (v389)
      {
        (*((void (**)(const char **, const char **, const char **))*v392 + 2))(v392, v390, v389);
        int v36 = *v2;
        char v35 = v2[1];
      }
      else
      {
        char v35 = 0;
        int v36 = 0;
      }
    }
    goto LABEL_565;
  }
  unsigned int v39 = *v38;
  if (v39 < 2)
  {
    int v767 = 0;
    BOOL v766 = v39 != 0;
    goto LABEL_36;
  }
LABEL_565:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v393 = v2[3];
  if (v393 && v35) {
    (*((void (**)(const char **, const char **))*v393 + 2))(v393, v36);
  }
  BOOL v766 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 19;
  }
  int v767 = 1;
LABEL_36:
  unsigned __int16 v765 = IPC::Decoder::decode<WebCore::ResourceErrorBaseType>((IPC::Decoder *)v2);
  if (v765 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 20;
  }
  int v40 = v2[1];
  char v41 = *v2;
  unint64_t v42 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v40 <= v42)
  {
    v394 = 0;
    v395 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v396 = v2[3];
    if (v396)
    {
      if (v40)
      {
        (*((void (**)(const char **))*v396 + 2))(v396);
        v395 = *v2;
        v394 = v2[1];
      }
      else
      {
        v394 = 0;
        v395 = 0;
      }
    }
    goto LABEL_571;
  }
  unsigned int v43 = (unsigned __int8 *)v41 + v42;
  v2[2] = (const char **)(v43 + 1);
  if (!v41)
  {
    v394 = v40;
    v395 = 0;
LABEL_571:
    int v40 = 0;
    char v41 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v397 = v2[3];
    if (v397)
    {
      if (v394)
      {
        (*((void (**)(const char **, const char **, const char **))*v397 + 2))(v397, v395, v394);
        char v41 = *v2;
        int v40 = v2[1];
      }
      else
      {
        int v40 = 0;
        char v41 = 0;
      }
    }
    goto LABEL_572;
  }
  unsigned int v44 = *v43;
  if (v44 < 2)
  {
    int v764 = 0;
    BOOL v763 = v44 != 0;
    goto LABEL_41;
  }
LABEL_572:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v398 = v2[3];
  if (v398 && v40) {
    (*((void (**)(const char **, const char **))*v398 + 2))(v398, v41);
  }
  BOOL v763 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 21;
  }
  int v764 = 1;
LABEL_41:
  char v45 = v2[1];
  __int16 v46 = *v2;
  unint64_t v47 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
  if ((unint64_t)v45 < v47 || (unint64_t)v45 - v47 <= 7)
  {
    v404 = 0;
    v405 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v406 = v2[3];
    if (v406)
    {
      if (v45)
      {
        (*((void (**)(const char **))*v406 + 2))(v406);
        v405 = *v2;
        v404 = v2[1];
      }
      else
      {
        v404 = 0;
        v405 = 0;
      }
    }
  }
  else
  {
    int v48 = (const char **)((char *)v46 + v47);
    v2[2] = (const char **)(v48 + 1);
    if (v46)
    {
      int v762 = 0;
      uint64_t v49 = *v48;
      goto LABEL_45;
    }
    v404 = v45;
    v405 = 0;
  }
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v407 = v2[3];
  if (v407 && v404) {
    (*((void (**)(const char **, const char **))*v407 + 2))(v407, v405);
  }
  uint64_t v49 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 22;
  }
  int v762 = 1;
LABEL_45:
  __int16 v50 = v2[1];
  unsigned int v51 = *v2;
  unint64_t v52 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
  if ((unint64_t)v50 < v52 || (unint64_t)v50 - v52 <= 7)
  {
    v408 = 0;
    v409 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v410 = v2[3];
    if (v410)
    {
      if (v50)
      {
        (*((void (**)(const char **))*v410 + 2))(v410);
        v409 = *v2;
        v408 = v2[1];
      }
      else
      {
        v408 = 0;
        v409 = 0;
      }
    }
  }
  else
  {
    char v53 = (const char **)((char *)v51 + v52);
    v2[2] = (const char **)(v53 + 1);
    if (v51)
    {
      int v761 = 0;
      uint64_t v54 = *v53;
      goto LABEL_49;
    }
    v408 = v50;
    v409 = 0;
  }
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v411 = v2[3];
  if (v411 && v408) {
    (*((void (**)(const char **, const char **))*v411 + 2))(v411, v409);
  }
  uint64_t v54 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 23;
  }
  int v761 = 1;
LABEL_49:
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v1044);
  if (!v1045 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 24;
  }
  unsigned int v55 = v2[1];
  int v56 = *v2;
  unint64_t v57 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v55 <= v57)
  {
    v399 = 0;
    v400 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v401 = v2[3];
    if (v401)
    {
      if (v55)
      {
        (*((void (**)(const char **))*v401 + 2))(v401);
        v400 = *v2;
        v399 = v2[1];
      }
      else
      {
        v399 = 0;
        v400 = 0;
      }
    }
    goto LABEL_578;
  }
  __int16 v58 = (unsigned __int8 *)v56 + v57;
  v2[2] = (const char **)(v58 + 1);
  if (!v56)
  {
    v399 = v55;
    v400 = 0;
LABEL_578:
    unsigned int v55 = 0;
    int v56 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v402 = v2[3];
    if (v402)
    {
      if (v399)
      {
        (*((void (**)(const char **, const char **, const char **))*v402 + 2))(v402, v400, v399);
        int v56 = *v2;
        unsigned int v55 = v2[1];
      }
      else
      {
        unsigned int v55 = 0;
        int v56 = 0;
      }
    }
    goto LABEL_579;
  }
  unsigned int v59 = *v58;
  if (v59 < 2)
  {
    int v760 = 0;
    BOOL v759 = v59 != 0;
    goto LABEL_54;
  }
LABEL_579:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v403 = v2[3];
  if (v403 && v55) {
    (*((void (**)(const char **, const char **))*v403 + 2))(v403, v56);
  }
  BOOL v759 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 25;
  }
  int v760 = 1;
LABEL_54:
  IPC::Decoder::decode<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, (uint64_t)&v1041);
  if (!v1043 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 26;
  }
  uint64_t v757 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v2);
  uint64_t v758 = v60;
  if (!v60 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 27;
  }
  char v61 = v2[1];
  __int16 v62 = *v2;
  unint64_t v63 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v61 <= v63)
  {
    v412 = 0;
    v413 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v414 = v2[3];
    if (v414)
    {
      if (v61)
      {
        (*((void (**)(const char **))*v414 + 2))(v414);
        v413 = *v2;
        v412 = v2[1];
      }
      else
      {
        v412 = 0;
        v413 = 0;
      }
    }
    goto LABEL_597;
  }
  int v64 = (unsigned __int8 *)v62 + v63;
  v2[2] = (const char **)(v64 + 1);
  if (!v62)
  {
    v412 = v61;
    v413 = 0;
LABEL_597:
    char v61 = 0;
    __int16 v62 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v415 = v2[3];
    if (v415)
    {
      if (v412)
      {
        (*((void (**)(const char **, const char **, const char **))*v415 + 2))(v415, v413, v412);
        __int16 v62 = *v2;
        char v61 = v2[1];
      }
      else
      {
        char v61 = 0;
        __int16 v62 = 0;
      }
    }
    goto LABEL_598;
  }
  unsigned int v65 = *v64;
  if (v65 < 2)
  {
    int v756 = 0;
    BOOL v755 = v65 != 0;
    goto LABEL_60;
  }
LABEL_598:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v416 = v2[3];
  if (v416 && v61) {
    (*((void (**)(const char **, const char **))*v416 + 2))(v416, v62);
  }
  BOOL v755 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 28;
  }
  int v756 = 1;
LABEL_60:
  __int16 v66 = v2[1];
  unsigned int v67 = *v2;
  unint64_t v68 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v66 <= v68)
  {
    v417 = 0;
    v418 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v419 = v2[3];
    if (v419)
    {
      if (v66)
      {
        (*((void (**)(const char **))*v419 + 2))(v419);
        v418 = *v2;
        v417 = v2[1];
      }
      else
      {
        v417 = 0;
        v418 = 0;
      }
    }
    goto LABEL_602;
  }
  char v69 = (unsigned __int8 *)v67 + v68;
  v2[2] = (const char **)(v69 + 1);
  if (!v67)
  {
    v417 = v66;
    v418 = 0;
LABEL_602:
    __int16 v66 = 0;
    unsigned int v67 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v420 = v2[3];
    if (v420)
    {
      if (v417)
      {
        (*((void (**)(const char **, const char **, const char **))*v420 + 2))(v420, v418, v417);
        unsigned int v67 = *v2;
        __int16 v66 = v2[1];
      }
      else
      {
        __int16 v66 = 0;
        unsigned int v67 = 0;
      }
    }
    goto LABEL_603;
  }
  unsigned int v70 = *v69;
  if (v70 < 2)
  {
    int v754 = 0;
    BOOL v753 = v70 != 0;
    goto LABEL_64;
  }
LABEL_603:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v421 = v2[3];
  if (v421 && v66) {
    (*((void (**)(const char **, const char **))*v421 + 2))(v421, v67);
  }
  BOOL v753 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 29;
  }
  int v754 = 1;
LABEL_64:
  uint64_t v752 = IPC::Decoder::decode<float>(v2);
  if ((v752 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 30;
  }
  uint64_t v751 = IPC::Decoder::decode<float>(v2);
  if ((v751 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 31;
  }
  unsigned int v71 = v2[1];
  int v72 = *v2;
  unint64_t v73 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
  if ((unint64_t)v71 < v73 || (unint64_t)v71 - v73 <= 7)
  {
    v422 = 0;
    uint64_t v423 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v424 = v2[3];
    if (v424)
    {
      if (v71)
      {
        (*((void (**)(const char **))*v424 + 2))(v424);
        uint64_t v423 = *v2;
        v422 = v2[1];
      }
      else
      {
        v422 = 0;
        uint64_t v423 = 0;
      }
    }
  }
  else
  {
    __int16 v74 = (const char **)((char *)v72 + v73);
    v2[2] = (const char **)(v74 + 1);
    if (v72)
    {
      int v750 = 0;
      uint64_t v75 = *v74;
      goto LABEL_70;
    }
    v422 = v71;
    uint64_t v423 = 0;
  }
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v425 = v2[3];
  if (v425 && v422) {
    (*((void (**)(const char **, const char **))*v425 + 2))(v425, v423);
  }
  uint64_t v75 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 32;
  }
  int v750 = 1;
LABEL_70:
  int v76 = v2[1];
  char v77 = *v2;
  unint64_t v78 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
  if ((unint64_t)v76 < v78 || (unint64_t)v76 - v78 <= 7)
  {
    v426 = 0;
    unint64_t v427 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v428 = v2[3];
    if (v428)
    {
      if (v76)
      {
        (*((void (**)(const char **))*v428 + 2))(v428);
        unint64_t v427 = *v2;
        v426 = v2[1];
      }
      else
      {
        v426 = 0;
        unint64_t v427 = 0;
      }
    }
  }
  else
  {
    unsigned int v79 = (const char **)((char *)v77 + v78);
    v2[2] = (const char **)(v79 + 1);
    if (v77)
    {
      int v749 = 0;
      uint64_t v80 = *v79;
      goto LABEL_74;
    }
    v426 = v76;
    unint64_t v427 = 0;
  }
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v429 = v2[3];
  if (v429 && v426) {
    (*((void (**)(const char **, const char **))*v429 + 2))(v429, v427);
  }
  uint64_t v80 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 33;
  }
  int v749 = 1;
LABEL_74:
  uint64_t v748 = IPC::Decoder::decode<float>(v2);
  if ((v748 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 34;
  }
  uint64_t v747 = IPC::Decoder::decode<float>(v2);
  if ((v747 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 35;
  }
  unsigned __int16 v746 = IPC::Decoder::decode<WTF::OptionSet<WebCore::MediaProducerMutedState>>((IPC::Decoder *)v2);
  if (v746 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 36;
  }
  char v81 = v2[1];
  __int16 v82 = *v2;
  unint64_t v83 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v81 <= v83)
  {
    v430 = 0;
    uint64_t v431 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v432 = v2[3];
    if (v432)
    {
      if (v81)
      {
        (*((void (**)(const char **))*v432 + 2))(v432);
        uint64_t v431 = *v2;
        v430 = v2[1];
      }
      else
      {
        v430 = 0;
        uint64_t v431 = 0;
      }
    }
    goto LABEL_627;
  }
  int v84 = (unsigned __int8 *)v82 + v83;
  v2[2] = (const char **)(v84 + 1);
  if (!v82)
  {
    v430 = v81;
    uint64_t v431 = 0;
LABEL_627:
    char v81 = 0;
    __int16 v82 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v433 = v2[3];
    if (v433)
    {
      if (v430)
      {
        (*((void (**)(const char **, const char **, const char **))*v433 + 2))(v433, v431, v430);
        __int16 v82 = *v2;
        char v81 = v2[1];
      }
      else
      {
        char v81 = 0;
        __int16 v82 = 0;
      }
    }
    goto LABEL_628;
  }
  unsigned int v85 = *v84;
  if (v85 < 2)
  {
    int v745 = 0;
    BOOL v744 = v85 != 0;
    goto LABEL_81;
  }
LABEL_628:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v434 = v2[3];
  if (v434 && v81) {
    (*((void (**)(const char **, const char **))*v434 + 2))(v434, v82);
  }
  BOOL v744 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 37;
  }
  int v745 = 1;
LABEL_81:
  __int16 v86 = v2[1];
  unsigned int v87 = *v2;
  unint64_t v88 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v86 <= v88)
  {
    uint64_t v435 = 0;
    v436 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v437 = v2[3];
    if (v437)
    {
      if (v86)
      {
        (*((void (**)(const char **))*v437 + 2))(v437);
        v436 = *v2;
        uint64_t v435 = v2[1];
      }
      else
      {
        uint64_t v435 = 0;
        v436 = 0;
      }
    }
    goto LABEL_632;
  }
  char v89 = (unsigned __int8 *)v87 + v88;
  v2[2] = (const char **)(v89 + 1);
  if (!v87)
  {
    uint64_t v435 = v86;
    v436 = 0;
LABEL_632:
    __int16 v86 = 0;
    unsigned int v87 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v438 = v2[3];
    if (v438)
    {
      if (v435)
      {
        (*((void (**)(const char **, const char **, const char **))*v438 + 2))(v438, v436, v435);
        unsigned int v87 = *v2;
        __int16 v86 = v2[1];
      }
      else
      {
        __int16 v86 = 0;
        unsigned int v87 = 0;
      }
    }
    goto LABEL_633;
  }
  unsigned int v90 = *v89;
  if (v90 < 2)
  {
    int v743 = 0;
    BOOL v742 = v90 != 0;
    goto LABEL_85;
  }
LABEL_633:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v439 = v2[3];
  if (v439 && v86) {
    (*((void (**)(const char **, const char **))*v439 + 2))(v439, v87);
  }
  BOOL v742 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 38;
  }
  int v743 = 1;
LABEL_85:
  unsigned int v91 = v2[1];
  int v92 = *v2;
  unint64_t v93 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v91 <= v93)
  {
    v440 = 0;
    v441 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v442 = v2[3];
    if (v442)
    {
      if (v91)
      {
        (*((void (**)(const char **))*v442 + 2))(v442);
        v441 = *v2;
        v440 = v2[1];
      }
      else
      {
        v440 = 0;
        v441 = 0;
      }
    }
    goto LABEL_637;
  }
  __int16 v94 = (unsigned __int8 *)v92 + v93;
  v2[2] = (const char **)(v94 + 1);
  if (!v92)
  {
    v440 = v91;
    v441 = 0;
LABEL_637:
    unsigned int v91 = 0;
    int v92 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v443 = v2[3];
    if (v443)
    {
      if (v440)
      {
        (*((void (**)(const char **, const char **, const char **))*v443 + 2))(v443, v441, v440);
        int v92 = *v2;
        unsigned int v91 = v2[1];
      }
      else
      {
        unsigned int v91 = 0;
        int v92 = 0;
      }
    }
    goto LABEL_638;
  }
  unsigned int v95 = *v94;
  if (v95 < 2)
  {
    int v741 = 0;
    BOOL v740 = v95 != 0;
    goto LABEL_89;
  }
LABEL_638:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v444 = v2[3];
  if (v444 && v91) {
    (*((void (**)(const char **, const char **))*v444 + 2))(v444, v92);
  }
  BOOL v740 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 39;
  }
  int v741 = 1;
LABEL_89:
  v738 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)v2);
  uint64_t v739 = v96;
  if (!v96 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 40;
  }
  v736 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)v2);
  uint64_t v737 = v97;
  if (!v97 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 41;
  }
  __int16 v98 = v2[1];
  unsigned int v99 = *v2;
  unint64_t v100 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v98 <= v100)
  {
    uint64_t v445 = 0;
    v446 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v447 = v2[3];
    if (v447)
    {
      if (v98)
      {
        (*((void (**)(const char **))*v447 + 2))(v447);
        v446 = *v2;
        uint64_t v445 = v2[1];
      }
      else
      {
        uint64_t v445 = 0;
        v446 = 0;
      }
    }
    goto LABEL_646;
  }
  char v101 = (unsigned __int8 *)v99 + v100;
  v2[2] = (const char **)(v101 + 1);
  if (!v99)
  {
    uint64_t v445 = v98;
    v446 = 0;
LABEL_646:
    __int16 v98 = 0;
    unsigned int v99 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v448 = v2[3];
    if (v448)
    {
      if (v445)
      {
        (*((void (**)(const char **, const char **, const char **))*v448 + 2))(v448, v446, v445);
        unsigned int v99 = *v2;
        __int16 v98 = v2[1];
      }
      else
      {
        __int16 v98 = 0;
        unsigned int v99 = 0;
      }
    }
    goto LABEL_647;
  }
  unsigned int v102 = *v101;
  if (v102 < 2)
  {
    int v735 = 0;
    BOOL v734 = v102 != 0;
    goto LABEL_95;
  }
LABEL_647:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v449 = v2[3];
  if (v449 && v98) {
    (*((void (**)(const char **, const char **))*v449 + 2))(v449, v99);
  }
  BOOL v734 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 42;
  }
  int v735 = 1;
LABEL_95:
  unint64_t v732 = IPC::Decoder::decode<std::optional<WebCore::FloatSize>>((unint64_t *)v2);
  char v731 = v103;
  uint64_t v733 = v103 & 0xFF00000000;
  if ((v103 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 43;
  }
  unsigned __int16 v730 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>((IPC::Decoder *)v2);
  if (v730 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 44;
  }
  uint64_t v728 = IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)v2);
  uint64_t v729 = v104;
  if (!v104 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 45;
  }
  char v105 = v2[1];
  __int16 v106 = *v2;
  unint64_t v107 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v105 <= v107)
  {
    v450 = 0;
    v451 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v452 = v2[3];
    if (v452)
    {
      if (v105)
      {
        (*((void (**)(const char **))*v452 + 2))(v452);
        v451 = *v2;
        v450 = v2[1];
      }
      else
      {
        v450 = 0;
        v451 = 0;
      }
    }
    goto LABEL_657;
  }
  int v108 = (unsigned __int8 *)v106 + v107;
  v2[2] = (const char **)(v108 + 1);
  if (!v106)
  {
    v450 = v105;
    v451 = 0;
LABEL_657:
    char v105 = 0;
    __int16 v106 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v453 = v2[3];
    if (v453)
    {
      if (v450)
      {
        (*((void (**)(const char **, const char **, const char **))*v453 + 2))(v453, v451, v450);
        __int16 v106 = *v2;
        char v105 = v2[1];
      }
      else
      {
        char v105 = 0;
        __int16 v106 = 0;
      }
    }
    goto LABEL_658;
  }
  unsigned int v109 = *v108;
  if (v109 < 2)
  {
    int v727 = 0;
    BOOL v726 = v109 != 0;
    goto LABEL_102;
  }
LABEL_658:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v454 = v2[3];
  if (v454 && v105) {
    (*((void (**)(const char **, const char **))*v454 + 2))(v454, v106);
  }
  BOOL v726 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 46;
  }
  int v727 = 1;
LABEL_102:
  unsigned __int16 v725 = IPC::Decoder::decode<WebKit::LayerHostingMode>((IPC::Decoder *)v2);
  if (v725 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 47;
  }
  __int16 v110 = v2[1];
  unsigned int v111 = *v2;
  unint64_t v112 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v110 <= v112)
  {
    v455 = 0;
    v456 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v457 = v2[3];
    if (v457)
    {
      if (v110)
      {
        (*((void (**)(const char **))*v457 + 2))(v457);
        v456 = *v2;
        v455 = v2[1];
      }
      else
      {
        v455 = 0;
        v456 = 0;
      }
    }
    goto LABEL_664;
  }
  char v113 = (unsigned __int8 *)v111 + v112;
  v2[2] = (const char **)(v113 + 1);
  if (!v111)
  {
    v455 = v110;
    v456 = 0;
LABEL_664:
    __int16 v110 = 0;
    unsigned int v111 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v458 = v2[3];
    if (v458)
    {
      if (v455)
      {
        (*((void (**)(const char **, const char **, const char **))*v458 + 2))(v458, v456, v455);
        unsigned int v111 = *v2;
        __int16 v110 = v2[1];
      }
      else
      {
        __int16 v110 = 0;
        unsigned int v111 = 0;
      }
    }
    goto LABEL_665;
  }
  unsigned int v114 = *v113;
  if (v114 < 2)
  {
    int v724 = 0;
    BOOL v723 = v114 != 0;
    goto LABEL_107;
  }
LABEL_665:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v459 = v2[3];
  if (v459 && v110) {
    (*((void (**)(const char **, const char **))*v459 + 2))(v459, v111);
  }
  BOOL v723 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 48;
  }
  int v724 = 1;
LABEL_107:
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v111, (uint64_t)&v1038);
  if (!v1040 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 49;
  }
  uint64_t v115 = v2[1];
  unint64_t v116 = *v2;
  unint64_t v117 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v115 <= v117)
  {
    v460 = 0;
    v461 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v462 = v2[3];
    if (v462)
    {
      if (v115)
      {
        (*((void (**)(const char **))*v462 + 2))(v462);
        v461 = *v2;
        v460 = v2[1];
      }
      else
      {
        v460 = 0;
        v461 = 0;
      }
    }
    goto LABEL_671;
  }
  int v118 = (unsigned __int8 *)v116 + v117;
  v2[2] = (const char **)(v118 + 1);
  if (!v116)
  {
    v460 = v115;
    v461 = 0;
LABEL_671:
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v463 = v2[3];
    if (v463)
    {
      if (v460)
      {
        (*((void (**)(const char **, const char **, const char **))*v463 + 2))(v463, v461, v460);
        unint64_t v116 = *v2;
        uint64_t v115 = v2[1];
      }
      else
      {
        uint64_t v115 = 0;
        unint64_t v116 = 0;
      }
    }
    goto LABEL_672;
  }
  unsigned int v119 = *v118;
  if (v119 < 2)
  {
    int v722 = 0;
    BOOL v721 = v119 != 0;
    goto LABEL_112;
  }
LABEL_672:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v464 = v2[3];
  if (v464 && v115) {
    (*((void (**)(const char **, const char **))*v464 + 2))(v464, v116);
  }
  BOOL v721 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 50;
  }
  int v722 = 1;
LABEL_112:
  unint64_t v120 = v2[1];
  char v121 = *v2;
  unint64_t v122 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v120 <= v122)
  {
    v465 = 0;
    v466 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v467 = v2[3];
    if (v467)
    {
      if (v120)
      {
        (*((void (**)(const char **))*v467 + 2))(v467);
        v466 = *v2;
        v465 = v2[1];
      }
      else
      {
        v465 = 0;
        v466 = 0;
      }
    }
    goto LABEL_676;
  }
  uint64_t v123 = (unsigned __int8 *)v121 + v122;
  v2[2] = (const char **)(v123 + 1);
  if (!v121)
  {
    v465 = v120;
    v466 = 0;
LABEL_676:
    unint64_t v120 = 0;
    char v121 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v468 = v2[3];
    if (v468)
    {
      if (v465)
      {
        (*((void (**)(const char **, const char **, const char **))*v468 + 2))(v468, v466, v465);
        char v121 = *v2;
        unint64_t v120 = v2[1];
      }
      else
      {
        unint64_t v120 = 0;
        char v121 = 0;
      }
    }
    goto LABEL_677;
  }
  unsigned int v124 = *v123;
  if (v124 < 2)
  {
    int v720 = 0;
    BOOL v719 = v124 != 0;
    goto LABEL_116;
  }
LABEL_677:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v469 = v2[3];
  if (v469 && v120) {
    (*((void (**)(const char **, const char **))*v469 + 2))(v469, v121);
  }
  BOOL v719 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 51;
  }
  int v720 = 1;
LABEL_116:
  char v125 = v2[1];
  int v126 = *v2;
  unint64_t v127 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v125 <= v127)
  {
    v470 = 0;
    v471 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v472 = v2[3];
    if (v472)
    {
      if (v125)
      {
        (*((void (**)(const char **))*v472 + 2))(v472);
        v471 = *v2;
        v470 = v2[1];
      }
      else
      {
        v470 = 0;
        v471 = 0;
      }
    }
    goto LABEL_681;
  }
  unint64_t v128 = (unsigned __int8 *)v126 + v127;
  v2[2] = (const char **)(v128 + 1);
  if (!v126)
  {
    v470 = v125;
    v471 = 0;
LABEL_681:
    char v125 = 0;
    int v126 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v473 = v2[3];
    if (v473)
    {
      if (v470)
      {
        (*((void (**)(const char **, const char **, const char **))*v473 + 2))(v473, v471, v470);
        int v126 = *v2;
        char v125 = v2[1];
      }
      else
      {
        char v125 = 0;
        int v126 = 0;
      }
    }
    goto LABEL_682;
  }
  unsigned int v129 = *v128;
  if (v129 < 2)
  {
    int v718 = 0;
    BOOL v717 = v129 != 0;
    goto LABEL_120;
  }
LABEL_682:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v474 = v2[3];
  if (v474 && v125) {
    (*((void (**)(const char **, const char **))*v474 + 2))(v474, v126);
  }
  BOOL v717 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 52;
  }
  int v718 = 1;
LABEL_120:
  __int16 v130 = v2[1];
  unsigned int v131 = *v2;
  unint64_t v132 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v130 <= v132)
  {
    v475 = 0;
    uint64_t v476 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v477 = v2[3];
    if (v477)
    {
      if (v130)
      {
        (*((void (**)(const char **))*v477 + 2))(v477);
        uint64_t v476 = *v2;
        v475 = v2[1];
      }
      else
      {
        v475 = 0;
        uint64_t v476 = 0;
      }
    }
    goto LABEL_686;
  }
  char v133 = (unsigned __int8 *)v131 + v132;
  v2[2] = (const char **)(v133 + 1);
  if (!v131)
  {
    v475 = v130;
    uint64_t v476 = 0;
LABEL_686:
    __int16 v130 = 0;
    unsigned int v131 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v478 = v2[3];
    if (v478)
    {
      if (v475)
      {
        (*((void (**)(const char **, const char **, const char **))*v478 + 2))(v478, v476, v475);
        unsigned int v131 = *v2;
        __int16 v130 = v2[1];
      }
      else
      {
        __int16 v130 = 0;
        unsigned int v131 = 0;
      }
    }
    goto LABEL_687;
  }
  unsigned int v134 = *v133;
  if (v134 < 2)
  {
    int v716 = 0;
    BOOL v715 = v134 != 0;
    goto LABEL_124;
  }
LABEL_687:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v479 = v2[3];
  if (v479 && v130) {
    (*((void (**)(const char **, const char **))*v479 + 2))(v479, v131);
  }
  BOOL v715 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 53;
  }
  int v716 = 1;
LABEL_124:
  unsigned int v135 = v2[1];
  int v136 = *v2;
  unint64_t v137 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v135 <= v137)
  {
    v480 = 0;
    v481 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v482 = v2[3];
    if (v482)
    {
      if (v135)
      {
        (*((void (**)(const char **))*v482 + 2))(v482);
        v481 = *v2;
        v480 = v2[1];
      }
      else
      {
        v480 = 0;
        v481 = 0;
      }
    }
    goto LABEL_691;
  }
  int v138 = (unsigned __int8 *)v136 + v137;
  v2[2] = (const char **)(v138 + 1);
  if (!v136)
  {
    v480 = v135;
    v481 = 0;
LABEL_691:
    unsigned int v135 = 0;
    int v136 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v483 = v2[3];
    if (v483)
    {
      if (v480)
      {
        (*((void (**)(const char **, const char **, const char **))*v483 + 2))(v483, v481, v480);
        int v136 = *v2;
        unsigned int v135 = v2[1];
      }
      else
      {
        unsigned int v135 = 0;
        int v136 = 0;
      }
    }
    goto LABEL_692;
  }
  unsigned int v139 = *v138;
  if (v139 < 2)
  {
    int v714 = 0;
    BOOL v713 = v139 != 0;
    goto LABEL_128;
  }
LABEL_692:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  double v484 = v2[3];
  if (v484 && v135) {
    (*((void (**)(const char **, const char **))*v484 + 2))(v484, v136);
  }
  BOOL v713 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 60;
  }
  int v714 = 1;
LABEL_128:
  uint64_t v711 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v712 = v140;
  if (!v140 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 61;
  }
  int v141 = v2[1];
  char v142 = *v2;
  unint64_t v143 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
  if ((unint64_t)v141 < v143 || (unint64_t)v141 - v143 <= 7)
  {
    v485 = 0;
    v486 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    double v487 = v2[3];
    if (v487)
    {
      if (v141)
      {
        (*((void (**)(const char **))*v487 + 2))(v487);
        v486 = *v2;
        v485 = v2[1];
      }
      else
      {
        v485 = 0;
        v486 = 0;
      }
    }
  }
  else
  {
    __int16 v144 = (const char **)((char *)v142 + v143);
    v2[2] = (const char **)(v144 + 1);
    if (v142)
    {
      int v710 = 0;
      uint64_t v145 = *v144;
      goto LABEL_133;
    }
    v485 = v141;
    v486 = 0;
  }
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v488 = v2[3];
  if (v488 && v485) {
    (*((void (**)(const char **, const char **))*v488 + 2))(v488, v486);
  }
  uint64_t v145 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 62;
  }
  int v710 = 1;
LABEL_133:
  char v146 = v2[1];
  __int16 v147 = *v2;
  unint64_t v148 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
  if ((unint64_t)v146 < v148 || (unint64_t)v146 - v148 <= 7)
  {
    v489 = 0;
    v490 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v491 = v2[3];
    if (v491)
    {
      if (v146)
      {
        (*((void (**)(const char **))*v491 + 2))(v491);
        v490 = *v2;
        v489 = v2[1];
      }
      else
      {
        v489 = 0;
        v490 = 0;
      }
    }
  }
  else
  {
    int v149 = (const char **)((char *)v147 + v148);
    v2[2] = (const char **)(v149 + 1);
    if (v147)
    {
      int v709 = 0;
      uint64_t v150 = *v149;
      goto LABEL_137;
    }
    v489 = v146;
    v490 = 0;
  }
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v492 = v2[3];
  if (v492 && v489) {
    (*((void (**)(const char **, const char **))*v492 + 2))(v492, v490);
  }
  uint64_t v150 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 63;
  }
  int v709 = 1;
LABEL_137:
  uint64_t v707 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v708 = v151;
  if (!v151 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 64;
  }
  IPC::Decoder::decode<std::optional<WebCore::ViewportArguments>>((uint64_t *)v2, (uint64_t)&v1035);
  if (!v1037 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 65;
  }
  v705 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v706 = v152;
  if (!v152 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 66;
  }
  uint64_t v703 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v704 = v153;
  if (!v153 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 67;
  }
  v701 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v702 = v154;
  if (!v154 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 68;
  }
  uint64_t v699 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
  uint64_t v700 = v155;
  if (!v155 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 69;
  }
  uint64_t v698 = IPC::Decoder::decode<float>(v2);
  if ((v698 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 70;
  }
  uint64_t v697 = IPC::Decoder::decode<unsigned int>(v2);
  if ((v697 & 0xFF00000000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 71;
  }
  unsigned int v696 = IPC::Decoder::decode<WebKit::HardwareKeyboardState>((uint64_t *)v2);
  if (!HIBYTE(v696) && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 72;
  }
  uint64_t v156 = v2[1];
  unint64_t v157 = *v2;
  unint64_t v158 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v156 <= v158)
  {
    v493 = 0;
    v494 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v495 = v2[3];
    if (v495)
    {
      if (v156)
      {
        (*((void (**)(const char **))*v495 + 2))(v495);
        v494 = *v2;
        v493 = v2[1];
      }
      else
      {
        v493 = 0;
        v494 = 0;
      }
    }
    goto LABEL_726;
  }
  int v159 = (unsigned __int8 *)v157 + v158;
  v2[2] = (const char **)(v159 + 1);
  if (!v157)
  {
    v493 = v156;
    v494 = 0;
LABEL_726:
    uint64_t v156 = 0;
    unint64_t v157 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v496 = v2[3];
    if (v496)
    {
      if (v493)
      {
        (*((void (**)(const char **, const char **, const char **))*v496 + 2))(v496, v494, v493);
        unint64_t v157 = *v2;
        uint64_t v156 = v2[1];
      }
      else
      {
        uint64_t v156 = 0;
        unint64_t v157 = 0;
      }
    }
    goto LABEL_727;
  }
  unsigned int v160 = *v159;
  if (v160 < 2)
  {
    BOOL v694 = v160 != 0;
    int v695 = 0;
    goto LABEL_150;
  }
LABEL_727:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v497 = v2[3];
  if (v497 && v156) {
    (*((void (**)(const char **, const char **))*v497 + 2))(v497, v157);
  }
  BOOL v694 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 73;
  }
  int v695 = 1;
LABEL_150:
  unint64_t v161 = v2[1];
  char v162 = *v2;
  unint64_t v163 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v161 <= v163)
  {
    v498 = 0;
    v499 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v500 = v2[3];
    if (v500)
    {
      if (v161)
      {
        (*((void (**)(const char **))*v500 + 2))(v500);
        v499 = *v2;
        v498 = v2[1];
      }
      else
      {
        v498 = 0;
        v499 = 0;
      }
    }
    goto LABEL_731;
  }
  uint64_t v164 = (unsigned __int8 *)v162 + v163;
  v2[2] = (const char **)(v164 + 1);
  if (!v162)
  {
    v498 = v161;
    v499 = 0;
LABEL_731:
    unint64_t v161 = 0;
    char v162 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v501 = v2[3];
    if (v501)
    {
      if (v498)
      {
        (*((void (**)(const char **, const char **, const char **))*v501 + 2))(v501, v499, v498);
        char v162 = *v2;
        unint64_t v161 = v2[1];
      }
      else
      {
        unint64_t v161 = 0;
        char v162 = 0;
      }
    }
    goto LABEL_732;
  }
  unsigned int v165 = *v164;
  if (v165 < 2)
  {
    BOOL v692 = v165 != 0;
    int v693 = 0;
    goto LABEL_154;
  }
LABEL_732:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v502 = v2[3];
  if (v502 && v161) {
    (*((void (**)(const char **, const char **))*v502 + 2))(v502, v162);
  }
  BOOL v692 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 74;
  }
  int v693 = 1;
LABEL_154:
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v2, &v1033);
  if (!v1034)
  {
    uint64_t v503 = *v2;
    v504 = v2[1];
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v505 = v2[3];
    if (!v505 || !v504 || ((*((void (**)(const char **, const char **))*v505 + 2))(v505, v503), !v1034))
    {
      if (*((_DWORD *)v2 + 18) == -1) {
        *((_DWORD *)v2 + 18) = 75;
      }
    }
  }
  char v166 = v2[1];
  int v167 = *v2;
  unint64_t v168 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v166 <= v168)
  {
    v506 = 0;
    v507 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v508 = v2[3];
    if (v508)
    {
      if (v166)
      {
        (*((void (**)(const char **))*v508 + 2))(v508);
        v507 = *v2;
        v506 = v2[1];
      }
      else
      {
        v506 = 0;
        v507 = 0;
      }
    }
    goto LABEL_739;
  }
  unint64_t v169 = (unsigned __int8 *)v167 + v168;
  v2[2] = (const char **)(v169 + 1);
  if (!v167)
  {
    v506 = v166;
    v507 = 0;
LABEL_739:
    char v166 = 0;
    int v167 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v509 = v2[3];
    if (v509)
    {
      if (v506)
      {
        (*((void (**)(const char **, const char **, const char **))*v509 + 2))(v509, v507, v506);
        int v167 = *v2;
        char v166 = v2[1];
      }
      else
      {
        char v166 = 0;
        int v167 = 0;
      }
    }
    goto LABEL_740;
  }
  unsigned int v170 = *v169;
  if (v170 < 2)
  {
    BOOL v690 = v170 != 0;
    int v691 = 0;
    goto LABEL_159;
  }
LABEL_740:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v510 = v2[3];
  if (v510 && v166) {
    (*((void (**)(const char **, const char **))*v510 + 2))(v510, v167);
  }
  BOOL v690 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 76;
  }
  int v691 = 1;
LABEL_159:
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v167, (uint64_t)&v1030);
  if (!v1032 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 77;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v171, (uint64_t)&v1027);
  if (!v1029 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 78;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v172, (uint64_t)&v1024);
  if (!v1026 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 79;
  }
  unint64_t v173 = v2[1];
  char v174 = *v2;
  unint64_t v175 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v173 <= v175)
  {
    v511 = 0;
    v512 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v513 = v2[3];
    if (v513)
    {
      if (v173)
      {
        (*((void (**)(const char **))*v513 + 2))(v513);
        v512 = *v2;
        v511 = v2[1];
      }
      else
      {
        v511 = 0;
        v512 = 0;
      }
    }
    goto LABEL_750;
  }
  uint64_t v176 = (unsigned __int8 *)v174 + v175;
  v2[2] = (const char **)(v176 + 1);
  if (!v174)
  {
    v511 = v173;
    v512 = 0;
LABEL_750:
    unint64_t v173 = 0;
    char v174 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v514 = v2[3];
    if (v514)
    {
      if (v511)
      {
        (*((void (**)(const char **, const char **, const char **))*v514 + 2))(v514, v512, v511);
        char v174 = *v2;
        unint64_t v173 = v2[1];
      }
      else
      {
        unint64_t v173 = 0;
        char v174 = 0;
      }
    }
    goto LABEL_751;
  }
  unsigned int v177 = *v176;
  if (v177 < 2)
  {
    BOOL v688 = v177 != 0;
    int v689 = 0;
    goto LABEL_166;
  }
LABEL_751:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v515 = v2[3];
  if (v515 && v173) {
    (*((void (**)(const char **, const char **))*v515 + 2))(v515, v174);
  }
  BOOL v688 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 88;
  }
  int v689 = 1;
LABEL_166:
  unsigned __int16 v178 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>((IPC::Decoder *)v2);
  if (v178 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 89;
  }
  int v687 = IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>((IPC::Decoder *)v2);
  if ((v687 & 0xFF0000) == 0 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 90;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v1022);
  if (!v1023 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 91;
  }
  IPC::Decoder::decode<std::optional<double>>((IPC::Decoder *)v2, &v1019);
  if (!v1021 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 92;
  }
  IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>>(&v1017, (IPC::Decoder *)v2);
  if (!v1018 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 93;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v179, (uint64_t)&v1014);
  if (!v1016 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 94;
  }
  IPC::Decoder::decode<std::optional<WebCore::ApplicationManifest>>((IPC::Decoder *)v2, v1012);
  if (!v1013 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 95;
  }
  uint64_t v180 = v2[1];
  unint64_t v181 = *v2;
  unint64_t v182 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v180 <= v182)
  {
    v516 = 0;
    v517 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v518 = v2[3];
    if (v518)
    {
      if (v180)
      {
        (*((void (**)(const char **))*v518 + 2))(v518);
        v517 = *v2;
        v516 = v2[1];
      }
      else
      {
        v516 = 0;
        v517 = 0;
      }
    }
    goto LABEL_769;
  }
  int v183 = (unsigned __int8 *)v181 + v182;
  v2[2] = (const char **)(v183 + 1);
  if (!v181)
  {
    v516 = v180;
    v517 = 0;
LABEL_769:
    uint64_t v180 = 0;
    unint64_t v181 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v519 = v2[3];
    if (v519)
    {
      if (v516)
      {
        (*((void (**)(const char **, const char **, const char **))*v519 + 2))(v519, v517, v516);
        unint64_t v181 = *v2;
        uint64_t v180 = v2[1];
      }
      else
      {
        uint64_t v180 = 0;
        unint64_t v181 = 0;
      }
    }
    goto LABEL_770;
  }
  unsigned int v184 = *v183;
  if (v184 < 2)
  {
    BOOL v685 = v184 != 0;
    int v686 = 0;
    goto LABEL_177;
  }
LABEL_770:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v520 = v2[3];
  if (v520 && v180) {
    (*((void (**)(const char **, const char **))*v520 + 2))(v520, v181);
  }
  BOOL v685 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 96;
  }
  int v686 = 1;
LABEL_177:
  unint64_t v185 = v2[1];
  char v186 = *v2;
  unint64_t v187 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v185 <= v187)
  {
    v521 = 0;
    v522 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v523 = v2[3];
    if (v523)
    {
      if (v185)
      {
        (*((void (**)(const char **))*v523 + 2))(v523);
        v522 = *v2;
        v521 = v2[1];
      }
      else
      {
        v521 = 0;
        v522 = 0;
      }
    }
    goto LABEL_774;
  }
  uint64_t v188 = (unsigned __int8 *)v186 + v187;
  v2[2] = (const char **)(v188 + 1);
  if (!v186)
  {
    v521 = v185;
    v522 = 0;
LABEL_774:
    unint64_t v185 = 0;
    char v186 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v524 = v2[3];
    if (v524)
    {
      if (v521)
      {
        (*((void (**)(const char **, const char **, const char **))*v524 + 2))(v524, v522, v521);
        char v186 = *v2;
        unint64_t v185 = v2[1];
      }
      else
      {
        unint64_t v185 = 0;
        char v186 = 0;
      }
    }
    goto LABEL_775;
  }
  unsigned int v189 = *v188;
  if (v189 < 2)
  {
    BOOL v683 = v189 != 0;
    int v684 = 0;
    goto LABEL_181;
  }
LABEL_775:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v525 = v2[3];
  if (v525 && v185) {
    (*((void (**)(const char **, const char **))*v525 + 2))(v525, v186);
  }
  BOOL v683 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 97;
  }
  int v684 = 1;
LABEL_181:
  char v190 = v2[1];
  int v191 = *v2;
  unint64_t v192 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v190 <= v192)
  {
    v526 = 0;
    v527 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v528 = v2[3];
    if (v528)
    {
      if (v190)
      {
        (*((void (**)(const char **))*v528 + 2))(v528);
        v527 = *v2;
        v526 = v2[1];
      }
      else
      {
        v526 = 0;
        v527 = 0;
      }
    }
    goto LABEL_779;
  }
  unint64_t v193 = (unsigned __int8 *)v191 + v192;
  v2[2] = (const char **)(v193 + 1);
  if (!v191)
  {
    v526 = v190;
    v527 = 0;
LABEL_779:
    char v190 = 0;
    int v191 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v529 = v2[3];
    if (v529)
    {
      if (v526)
      {
        (*((void (**)(const char **, const char **, const char **))*v529 + 2))(v529, v527, v526);
        int v191 = *v2;
        char v190 = v2[1];
      }
      else
      {
        char v190 = 0;
        int v191 = 0;
      }
    }
    goto LABEL_780;
  }
  unsigned int v194 = *v193;
  if (v194 < 2)
  {
    BOOL v681 = v194 != 0;
    int v682 = 0;
    goto LABEL_185;
  }
LABEL_780:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v530 = v2[3];
  if (v530 && v190) {
    (*((void (**)(const char **, const char **))*v530 + 2))(v530, v191);
  }
  BOOL v681 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 98;
  }
  int v682 = 1;
LABEL_185:
  IPC::Decoder::decode<WebKit::UserContentControllerParameters>(&v1000, (IPC::Decoder *)v2);
  if (!v1011 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 99;
  }
  IPC::Decoder::decode<std::optional<WebKit::WebExtensionControllerParameters>>((uint64_t)&v994, (uint64_t *)v2);
  if (!v999 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 100;
  }
  IPC::Decoder::decode<std::optional<WebCore::Color>>((uint64_t *)v2, &v991);
  if (!v993 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 101;
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v2, &v988);
  if (!v990 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 102;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v986);
  if (!v987 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 103;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v195, (uint64_t)&v983);
  if (!v985 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 104;
  }
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)v2, &v981);
  if (!v982 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 105;
  }
  uint64_t v196 = v2[1];
  unint64_t v197 = *v2;
  unint64_t v198 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v196 <= v198)
  {
    v531 = 0;
    uint64_t v532 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v533 = v2[3];
    if (v533)
    {
      if (v196)
      {
        (*((void (**)(const char **))*v533 + 2))(v533);
        uint64_t v532 = *v2;
        v531 = v2[1];
      }
      else
      {
        v531 = 0;
        uint64_t v532 = 0;
      }
    }
    goto LABEL_798;
  }
  uint64_t v199 = (unsigned __int8 *)v197 + v198;
  v2[2] = (const char **)(v199 + 1);
  if (!v197)
  {
    v531 = v196;
    uint64_t v532 = 0;
LABEL_798:
    uint64_t v196 = 0;
    unint64_t v197 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v534 = v2[3];
    if (v534)
    {
      if (v531)
      {
        (*((void (**)(const char **, const char **, const char **))*v534 + 2))(v534, v532, v531);
        unint64_t v197 = *v2;
        uint64_t v196 = v2[1];
      }
      else
      {
        uint64_t v196 = 0;
        unint64_t v197 = 0;
      }
    }
    goto LABEL_799;
  }
  unsigned int v200 = *v199;
  if (v200 < 2)
  {
    BOOL v679 = v200 != 0;
    int v680 = 0;
    goto LABEL_196;
  }
LABEL_799:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v535 = v2[3];
  if (v535 && v196) {
    (*((void (**)(const char **, const char **))*v535 + 2))(v535, v197);
  }
  BOOL v679 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 106;
  }
  int v680 = 1;
LABEL_196:
  char v201 = v2[1];
  uint64_t v202 = *v2;
  unint64_t v203 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v201 <= v203)
  {
    uint64_t v536 = 0;
    v537 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v538 = v2[3];
    if (v538)
    {
      if (v201)
      {
        (*((void (**)(const char **))*v538 + 2))(v538);
        v537 = *v2;
        uint64_t v536 = v2[1];
      }
      else
      {
        uint64_t v536 = 0;
        v537 = 0;
      }
    }
    goto LABEL_803;
  }
  char v204 = (unsigned __int8 *)v202 + v203;
  v2[2] = (const char **)(v204 + 1);
  if (!v202)
  {
    uint64_t v536 = v201;
    v537 = 0;
LABEL_803:
    char v201 = 0;
    uint64_t v202 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v539 = v2[3];
    if (v539)
    {
      if (v536)
      {
        (*((void (**)(const char **, const char **, const char **))*v539 + 2))(v539, v537, v536);
        uint64_t v202 = *v2;
        char v201 = v2[1];
      }
      else
      {
        char v201 = 0;
        uint64_t v202 = 0;
      }
    }
    goto LABEL_804;
  }
  unsigned int v205 = *v204;
  if (v205 < 2)
  {
    BOOL v677 = v205 != 0;
    int v678 = 0;
    goto LABEL_200;
  }
LABEL_804:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v540 = v2[3];
  if (v540 && v201) {
    (*((void (**)(const char **, const char **))*v540 + 2))(v540, v202);
  }
  BOOL v677 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 107;
  }
  int v678 = 1;
LABEL_200:
  IPC::Decoder::decode<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>((uint64_t)&v975, (IPC::Decoder *)v2);
  if (!v980 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 108;
  }
  unint64_t v676 = IPC::Decoder::decode<std::optional<std::pair<unsigned short,unsigned short>>>((uint64_t *)v2);
  if (!HIWORD(v676) && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 109;
  }
  unint64_t v206 = v2[1];
  char v207 = *v2;
  unint64_t v208 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v206 <= v208)
  {
    v541 = 0;
    uint64_t v542 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v543 = v2[3];
    if (v543)
    {
      if (v206)
      {
        (*((void (**)(const char **))*v543 + 2))(v543);
        uint64_t v542 = *v2;
        v541 = v2[1];
      }
      else
      {
        v541 = 0;
        uint64_t v542 = 0;
      }
    }
    goto LABEL_812;
  }
  unint64_t v209 = (unsigned __int8 *)v207 + v208;
  v2[2] = (const char **)(v209 + 1);
  if (!v207)
  {
    v541 = v206;
    uint64_t v542 = 0;
LABEL_812:
    unint64_t v206 = 0;
    char v207 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v544 = v2[3];
    if (v544)
    {
      if (v541)
      {
        (*((void (**)(const char **, const char **, const char **))*v544 + 2))(v544, v542, v541);
        char v207 = *v2;
        unint64_t v206 = v2[1];
      }
      else
      {
        unint64_t v206 = 0;
        char v207 = 0;
      }
    }
    goto LABEL_813;
  }
  unsigned int v210 = *v209;
  if (v210 < 2)
  {
    BOOL v674 = v210 != 0;
    int v675 = 0;
    goto LABEL_206;
  }
LABEL_813:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v545 = v2[3];
  if (v545 && v206) {
    (*((void (**)(const char **, const char **))*v545 + 2))(v545, v207);
  }
  BOOL v674 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 110;
  }
  int v675 = 1;
LABEL_206:
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v973);
  if (!v974 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 111;
  }
  char v211 = v2[1];
  unint64_t v212 = *v2;
  unint64_t v213 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v211 <= v213)
  {
    uint64_t v546 = 0;
    v547 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v548 = v2[3];
    if (v548)
    {
      if (v211)
      {
        (*((void (**)(const char **))*v548 + 2))(v548);
        v547 = *v2;
        uint64_t v546 = v2[1];
      }
      else
      {
        uint64_t v546 = 0;
        v547 = 0;
      }
    }
    goto LABEL_819;
  }
  uint64_t v214 = (unsigned __int8 *)v212 + v213;
  v2[2] = (const char **)(v214 + 1);
  if (!v212)
  {
    uint64_t v546 = v211;
    v547 = 0;
LABEL_819:
    char v211 = 0;
    unint64_t v212 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v549 = v2[3];
    if (v549)
    {
      if (v546)
      {
        (*((void (**)(const char **, const char **, const char **))*v549 + 2))(v549, v547, v546);
        unint64_t v212 = *v2;
        char v211 = v2[1];
      }
      else
      {
        char v211 = 0;
        unint64_t v212 = 0;
      }
    }
    goto LABEL_820;
  }
  unsigned int v215 = *v214;
  if (v215 < 2)
  {
    BOOL v672 = v215 != 0;
    int v673 = 0;
    goto LABEL_211;
  }
LABEL_820:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v550 = v2[3];
  if (v550 && v211) {
    (*((void (**)(const char **, const char **))*v550 + 2))(v550, v212);
  }
  BOOL v672 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 112;
  }
  int v673 = 1;
LABEL_211:
  uint64_t v216 = v2[1];
  uint64_t v217 = *v2;
  unint64_t v218 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v216 <= v218)
  {
    v551 = 0;
    v552 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v553 = v2[3];
    if (v553)
    {
      if (v216)
      {
        (*((void (**)(const char **))*v553 + 2))(v553);
        v552 = *v2;
        v551 = v2[1];
      }
      else
      {
        v551 = 0;
        v552 = 0;
      }
    }
    goto LABEL_824;
  }
  uint64_t v219 = (unsigned __int8 *)v217 + v218;
  v2[2] = (const char **)(v219 + 1);
  if (!v217)
  {
    v551 = v216;
    v552 = 0;
LABEL_824:
    uint64_t v216 = 0;
    uint64_t v217 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v554 = v2[3];
    if (v554)
    {
      if (v551)
      {
        (*((void (**)(const char **, const char **, const char **))*v554 + 2))(v554, v552, v551);
        uint64_t v217 = *v2;
        uint64_t v216 = v2[1];
      }
      else
      {
        uint64_t v216 = 0;
        uint64_t v217 = 0;
      }
    }
    goto LABEL_825;
  }
  unsigned int v220 = *v219;
  if (v220 < 2)
  {
    BOOL v670 = v220 != 0;
    int v671 = 0;
    goto LABEL_215;
  }
LABEL_825:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v555 = v2[3];
  if (v555 && v216) {
    (*((void (**)(const char **, const char **))*v555 + 2))(v555, v217);
  }
  BOOL v670 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 113;
  }
  int v671 = 1;
LABEL_215:
  uint64_t v221 = v2[1];
  uint64_t v222 = *v2;
  unint64_t v223 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v221 <= v223)
  {
    v556 = 0;
    v557 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v558 = v2[3];
    if (v558)
    {
      if (v221)
      {
        (*((void (**)(const char **))*v558 + 2))(v558);
        v557 = *v2;
        v556 = v2[1];
      }
      else
      {
        v556 = 0;
        v557 = 0;
      }
    }
    goto LABEL_829;
  }
  uint64_t v224 = (unsigned __int8 *)v222 + v223;
  v2[2] = (const char **)(v224 + 1);
  if (!v222)
  {
    v556 = v221;
    v557 = 0;
LABEL_829:
    uint64_t v221 = 0;
    uint64_t v222 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v559 = v2[3];
    if (v559)
    {
      if (v556)
      {
        (*((void (**)(const char **, const char **, const char **))*v559 + 2))(v559, v557, v556);
        uint64_t v222 = *v2;
        uint64_t v221 = v2[1];
      }
      else
      {
        uint64_t v221 = 0;
        uint64_t v222 = 0;
      }
    }
    goto LABEL_830;
  }
  unsigned int v225 = *v224;
  if (v225 < 2)
  {
    BOOL v668 = v225 != 0;
    int v669 = 0;
    goto LABEL_219;
  }
LABEL_830:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v560 = v2[3];
  if (v560 && v221) {
    (*((void (**)(const char **, const char **))*v560 + 2))(v560, v222);
  }
  BOOL v668 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 114;
  }
  int v669 = 1;
LABEL_219:
  uint64_t v226 = v2[1];
  uint64_t v227 = *v2;
  unint64_t v228 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v226 <= v228)
  {
    v561 = 0;
    uint64_t v562 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v563 = v2[3];
    if (v563)
    {
      if (v226)
      {
        (*((void (**)(const char **))*v563 + 2))(v563);
        uint64_t v562 = *v2;
        v561 = v2[1];
      }
      else
      {
        v561 = 0;
        uint64_t v562 = 0;
      }
    }
    goto LABEL_834;
  }
  unint64_t v229 = (unsigned __int8 *)v227 + v228;
  v2[2] = (const char **)(v229 + 1);
  if (!v227)
  {
    v561 = v226;
    uint64_t v562 = 0;
LABEL_834:
    uint64_t v226 = 0;
    uint64_t v227 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v564 = v2[3];
    if (v564)
    {
      if (v561)
      {
        (*((void (**)(const char **, const char **, const char **))*v564 + 2))(v564, v562, v561);
        uint64_t v227 = *v2;
        uint64_t v226 = v2[1];
      }
      else
      {
        uint64_t v226 = 0;
        uint64_t v227 = 0;
      }
    }
    goto LABEL_835;
  }
  unsigned int v230 = *v229;
  if (v230 < 2)
  {
    BOOL v666 = v230 != 0;
    int v667 = 0;
    goto LABEL_223;
  }
LABEL_835:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v565 = v2[3];
  if (v565 && v226) {
    (*((void (**)(const char **, const char **))*v565 + 2))(v565, v227);
  }
  BOOL v666 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 115;
  }
  int v667 = 1;
LABEL_223:
  uint64_t v231 = v2[1];
  uint64_t v232 = *v2;
  unint64_t v233 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v231 <= v233)
  {
    uint64_t v566 = 0;
    v567 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v568 = v2[3];
    if (v568)
    {
      if (v231)
      {
        (*((void (**)(const char **))*v568 + 2))(v568);
        v567 = *v2;
        uint64_t v566 = v2[1];
      }
      else
      {
        uint64_t v566 = 0;
        v567 = 0;
      }
    }
    goto LABEL_839;
  }
  uint64_t v234 = (unsigned __int8 *)v232 + v233;
  v2[2] = (const char **)(v234 + 1);
  if (!v232)
  {
    uint64_t v566 = v231;
    v567 = 0;
LABEL_839:
    uint64_t v231 = 0;
    uint64_t v232 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v569 = v2[3];
    if (v569)
    {
      if (v566)
      {
        (*((void (**)(const char **, const char **, const char **))*v569 + 2))(v569, v567, v566);
        uint64_t v232 = *v2;
        uint64_t v231 = v2[1];
      }
      else
      {
        uint64_t v231 = 0;
        uint64_t v232 = 0;
      }
    }
    goto LABEL_840;
  }
  unsigned int v235 = *v234;
  if (v235 < 2)
  {
    BOOL v664 = v235 != 0;
    int v665 = 0;
    goto LABEL_227;
  }
LABEL_840:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v570 = v2[3];
  if (v570 && v231) {
    (*((void (**)(const char **, const char **))*v570 + 2))(v570, v232);
  }
  BOOL v664 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 116;
  }
  int v665 = 1;
LABEL_227:
  uint64_t v236 = v2[1];
  uint64_t v237 = *v2;
  unint64_t v238 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v236 <= v238)
  {
    v571 = 0;
    v572 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v573 = v2[3];
    if (v573)
    {
      if (v236)
      {
        (*((void (**)(const char **))*v573 + 2))(v573);
        v572 = *v2;
        v571 = v2[1];
      }
      else
      {
        v571 = 0;
        v572 = 0;
      }
    }
    goto LABEL_844;
  }
  unint64_t v239 = (unsigned __int8 *)v237 + v238;
  v2[2] = (const char **)(v239 + 1);
  if (!v237)
  {
    v571 = v236;
    v572 = 0;
LABEL_844:
    uint64_t v236 = 0;
    uint64_t v237 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v574 = v2[3];
    if (v574)
    {
      if (v571)
      {
        (*((void (**)(const char **, const char **, const char **))*v574 + 2))(v574, v572, v571);
        uint64_t v237 = *v2;
        uint64_t v236 = v2[1];
      }
      else
      {
        uint64_t v236 = 0;
        uint64_t v237 = 0;
      }
    }
    goto LABEL_845;
  }
  unsigned int v240 = *v239;
  if (v240 < 2)
  {
    BOOL v662 = v240 != 0;
    int v663 = 0;
    goto LABEL_231;
  }
LABEL_845:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v575 = v2[3];
  if (v575 && v236) {
    (*((void (**)(const char **, const char **))*v575 + 2))(v575, v237);
  }
  BOOL v662 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 117;
  }
  int v663 = 1;
LABEL_231:
  long long v241 = v2[1];
  long long v242 = *v2;
  unint64_t v243 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v241 <= v243)
  {
    v576 = 0;
    v577 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v578 = v2[3];
    if (v578)
    {
      if (v241)
      {
        (*((void (**)(const char **))*v578 + 2))(v578);
        v577 = *v2;
        v576 = v2[1];
      }
      else
      {
        v576 = 0;
        v577 = 0;
      }
    }
    goto LABEL_849;
  }
  char v244 = (unsigned __int8 *)v242 + v243;
  v2[2] = (const char **)(v244 + 1);
  if (!v242)
  {
    v576 = v241;
    v577 = 0;
LABEL_849:
    long long v241 = 0;
    long long v242 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v579 = v2[3];
    if (v579)
    {
      if (v576)
      {
        (*((void (**)(const char **, const char **, const char **))*v579 + 2))(v579, v577, v576);
        long long v242 = *v2;
        long long v241 = v2[1];
      }
      else
      {
        long long v241 = 0;
        long long v242 = 0;
      }
    }
    goto LABEL_850;
  }
  unsigned int v245 = *v244;
  if (v245 < 2)
  {
    BOOL v660 = v245 != 0;
    int v661 = 0;
    goto LABEL_235;
  }
LABEL_850:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v580 = v2[3];
  if (v580 && v241) {
    (*((void (**)(const char **, const char **))*v580 + 2))(v580, v242);
  }
  BOOL v660 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 118;
  }
  int v661 = 1;
LABEL_235:
  long long v246 = v2[1];
  uint64_t v247 = *v2;
  unint64_t v248 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v246 <= v248)
  {
    v581 = 0;
    v582 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v583 = v2[3];
    if (v583)
    {
      if (v246)
      {
        (*((void (**)(const char **))*v583 + 2))(v583);
        v582 = *v2;
        v581 = v2[1];
      }
      else
      {
        v581 = 0;
        v582 = 0;
      }
    }
    goto LABEL_854;
  }
  uint64_t v249 = (unsigned __int8 *)v247 + v248;
  v2[2] = (const char **)(v249 + 1);
  if (!v247)
  {
    v581 = v246;
    v582 = 0;
LABEL_854:
    long long v246 = 0;
    uint64_t v247 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v584 = v2[3];
    if (v584)
    {
      if (v581)
      {
        (*((void (**)(const char **, const char **, const char **))*v584 + 2))(v584, v582, v581);
        uint64_t v247 = *v2;
        long long v246 = v2[1];
      }
      else
      {
        long long v246 = 0;
        uint64_t v247 = 0;
      }
    }
    goto LABEL_855;
  }
  unsigned int v250 = *v249;
  if (v250 < 2)
  {
    BOOL v658 = v250 != 0;
    int v659 = 0;
    goto LABEL_239;
  }
LABEL_855:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v585 = v2[3];
  if (v585 && v246) {
    (*((void (**)(const char **, const char **))*v585 + 2))(v585, v247);
  }
  BOOL v658 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 119;
  }
  int v659 = 1;
LABEL_239:
  char v251 = v2[1];
  v252 = *v2;
  unint64_t v253 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v251 <= v253)
  {
    v586 = 0;
    v587 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v588 = v2[3];
    if (v588)
    {
      if (v251)
      {
        (*((void (**)(const char **))*v588 + 2))(v588);
        v587 = *v2;
        v586 = v2[1];
      }
      else
      {
        v586 = 0;
        v587 = 0;
      }
    }
    goto LABEL_859;
  }
  int v254 = (unsigned __int8 *)v252 + v253;
  v2[2] = (const char **)(v254 + 1);
  if (!v252)
  {
    v586 = v251;
    v587 = 0;
LABEL_859:
    char v251 = 0;
    v252 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v589 = v2[3];
    if (v589)
    {
      if (v586)
      {
        (*((void (**)(const char **, const char **, const char **))*v589 + 2))(v589, v587, v586);
        v252 = *v2;
        char v251 = v2[1];
      }
      else
      {
        char v251 = 0;
        v252 = 0;
      }
    }
    goto LABEL_860;
  }
  unsigned int v255 = *v254;
  if (v255 < 2)
  {
    BOOL v656 = v255 != 0;
    int v657 = 0;
    goto LABEL_243;
  }
LABEL_860:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v590 = v2[3];
  if (v590 && v251) {
    (*((void (**)(const char **, const char **))*v590 + 2))(v590, v252);
  }
  BOOL v656 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 120;
  }
  int v657 = 1;
LABEL_243:
  uint64_t v256 = v2[1];
  long long v257 = *v2;
  unint64_t v258 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v256 <= v258)
  {
    v591 = 0;
    v592 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v593 = v2[3];
    if (v593)
    {
      if (v256)
      {
        (*((void (**)(const char **))*v593 + 2))(v593);
        v592 = *v2;
        v591 = v2[1];
      }
      else
      {
        v591 = 0;
        v592 = 0;
      }
    }
    goto LABEL_864;
  }
  char v259 = (unsigned __int8 *)v257 + v258;
  v2[2] = (const char **)(v259 + 1);
  if (!v257)
  {
    v591 = v256;
    v592 = 0;
LABEL_864:
    uint64_t v256 = 0;
    long long v257 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v594 = v2[3];
    if (v594)
    {
      if (v591)
      {
        (*((void (**)(const char **, const char **, const char **))*v594 + 2))(v594, v592, v591);
        long long v257 = *v2;
        uint64_t v256 = v2[1];
      }
      else
      {
        uint64_t v256 = 0;
        long long v257 = 0;
      }
    }
    goto LABEL_865;
  }
  unsigned int v260 = *v259;
  if (v260 < 2)
  {
    BOOL v654 = v260 != 0;
    int v655 = 0;
    goto LABEL_247;
  }
LABEL_865:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v595 = v2[3];
  if (v595 && v256) {
    (*((void (**)(const char **, const char **))*v595 + 2))(v595, v257);
  }
  BOOL v654 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 121;
  }
  int v655 = 1;
LABEL_247:
  v261 = v2[1];
  v262 = *v2;
  unint64_t v263 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v261 <= v263)
  {
    v596 = 0;
    uint64_t v597 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v598 = v2[3];
    if (v598)
    {
      if (v261)
      {
        (*((void (**)(const char **))*v598 + 2))(v598);
        uint64_t v597 = *v2;
        v596 = v2[1];
      }
      else
      {
        v596 = 0;
        uint64_t v597 = 0;
      }
    }
    goto LABEL_869;
  }
  uint64_t v264 = (unsigned __int8 *)v262 + v263;
  v2[2] = (const char **)(v264 + 1);
  if (!v262)
  {
    v596 = v261;
    uint64_t v597 = 0;
LABEL_869:
    v261 = 0;
    v262 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v599 = v2[3];
    if (v599)
    {
      if (v596)
      {
        (*((void (**)(const char **, const char **, const char **))*v599 + 2))(v599, v597, v596);
        v262 = *v2;
        v261 = v2[1];
      }
      else
      {
        v261 = 0;
        v262 = 0;
      }
    }
    goto LABEL_870;
  }
  unsigned int v265 = *v264;
  if (v265 < 2)
  {
    BOOL v652 = v265 != 0;
    int v653 = 0;
    goto LABEL_251;
  }
LABEL_870:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v600 = v2[3];
  if (v600 && v261) {
    (*((void (**)(const char **, const char **))*v600 + 2))(v600, v262);
  }
  BOOL v652 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 122;
  }
  int v653 = 1;
LABEL_251:
  v266 = v2[1];
  v267 = *v2;
  unint64_t v268 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v266 <= v268)
  {
    uint64_t v601 = 0;
    v602 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v603 = v2[3];
    if (v603)
    {
      if (v266)
      {
        (*((void (**)(const char **))*v603 + 2))(v603);
        v602 = *v2;
        uint64_t v601 = v2[1];
      }
      else
      {
        uint64_t v601 = 0;
        v602 = 0;
      }
    }
    goto LABEL_874;
  }
  v269 = (unsigned __int8 *)v267 + v268;
  v2[2] = (const char **)(v269 + 1);
  if (!v267)
  {
    uint64_t v601 = v266;
    v602 = 0;
LABEL_874:
    v266 = 0;
    v267 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v604 = v2[3];
    if (v604)
    {
      if (v601)
      {
        (*((void (**)(const char **, const char **, const char **))*v604 + 2))(v604, v602, v601);
        v267 = *v2;
        v266 = v2[1];
      }
      else
      {
        v266 = 0;
        v267 = 0;
      }
    }
    goto LABEL_875;
  }
  unsigned int v270 = *v269;
  if (v270 < 2)
  {
    BOOL v650 = v270 != 0;
    int v651 = 0;
    goto LABEL_255;
  }
LABEL_875:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v605 = v2[3];
  if (v605 && v266) {
    (*((void (**)(const char **, const char **))*v605 + 2))(v605, v267);
  }
  BOOL v650 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 123;
  }
  int v651 = 1;
LABEL_255:
  v271 = v2[1];
  v272 = *v2;
  unint64_t v273 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v271 <= v273)
  {
    v606 = 0;
    v607 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v608 = v2[3];
    if (v608)
    {
      if (v271)
      {
        (*((void (**)(const char **))*v608 + 2))(v608);
        v607 = *v2;
        v606 = v2[1];
      }
      else
      {
        v606 = 0;
        v607 = 0;
      }
    }
    goto LABEL_879;
  }
  v274 = (unsigned __int8 *)v272 + v273;
  v2[2] = (const char **)(v274 + 1);
  if (!v272)
  {
    v606 = v271;
    v607 = 0;
LABEL_879:
    v271 = 0;
    v272 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v609 = v2[3];
    if (v609)
    {
      if (v606)
      {
        (*((void (**)(const char **, const char **, const char **))*v609 + 2))(v609, v607, v606);
        v272 = *v2;
        v271 = v2[1];
      }
      else
      {
        v271 = 0;
        v272 = 0;
      }
    }
    goto LABEL_880;
  }
  unsigned int v275 = *v274;
  if (v275 < 2)
  {
    BOOL v648 = v275 != 0;
    int v649 = 0;
    goto LABEL_259;
  }
LABEL_880:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v610 = v2[3];
  if (v610 && v271) {
    (*((void (**)(const char **, const char **))*v610 + 2))(v610, v272);
  }
  BOOL v648 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 124;
  }
  int v649 = 1;
LABEL_259:
  v276 = v2[1];
  uint64_t v277 = *v2;
  unint64_t v278 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v276 <= v278)
  {
    v611 = 0;
    v612 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v613 = v2[3];
    if (v613)
    {
      if (v276)
      {
        (*((void (**)(const char **))*v613 + 2))(v613);
        v612 = *v2;
        v611 = v2[1];
      }
      else
      {
        v611 = 0;
        v612 = 0;
      }
    }
    goto LABEL_884;
  }
  v279 = (unsigned __int8 *)v277 + v278;
  v2[2] = (const char **)(v279 + 1);
  if (!v277)
  {
    v611 = v276;
    v612 = 0;
LABEL_884:
    v276 = 0;
    uint64_t v277 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v614 = v2[3];
    if (v614)
    {
      if (v611)
      {
        (*((void (**)(const char **, const char **, const char **))*v614 + 2))(v614, v612, v611);
        uint64_t v277 = *v2;
        v276 = v2[1];
      }
      else
      {
        v276 = 0;
        uint64_t v277 = 0;
      }
    }
    goto LABEL_885;
  }
  unsigned int v280 = *v279;
  if (v280 < 2)
  {
    BOOL v646 = v280 != 0;
    int v647 = 0;
    goto LABEL_263;
  }
LABEL_885:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v615 = v2[3];
  if (v615 && v276) {
    (*((void (**)(const char **, const char **))*v615 + 2))(v615, v277);
  }
  BOOL v646 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 125;
  }
  int v647 = 1;
LABEL_263:
  uint64_t v281 = v2[1];
  v282 = *v2;
  unint64_t v283 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v281 <= v283)
  {
    v616 = 0;
    uint64_t v617 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v618 = v2[3];
    if (v618)
    {
      if (v281)
      {
        (*((void (**)(const char **))*v618 + 2))(v618);
        uint64_t v617 = *v2;
        v616 = v2[1];
      }
      else
      {
        v616 = 0;
        uint64_t v617 = 0;
      }
    }
    goto LABEL_889;
  }
  v284 = (unsigned __int8 *)v282 + v283;
  v2[2] = (const char **)(v284 + 1);
  if (!v282)
  {
    v616 = v281;
    uint64_t v617 = 0;
LABEL_889:
    uint64_t v281 = 0;
    v282 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v619 = v2[3];
    if (v619)
    {
      if (v616)
      {
        (*((void (**)(const char **, const char **, const char **))*v619 + 2))(v619, v617, v616);
        v282 = *v2;
        uint64_t v281 = v2[1];
      }
      else
      {
        uint64_t v281 = 0;
        v282 = 0;
      }
    }
    goto LABEL_890;
  }
  unsigned int v285 = *v284;
  if (v285 < 2)
  {
    BOOL v644 = v285 != 0;
    int v645 = 0;
    goto LABEL_267;
  }
LABEL_890:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v620 = v2[3];
  if (v620 && v281) {
    (*((void (**)(const char **, const char **))*v620 + 2))(v620, v282);
  }
  BOOL v644 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 126;
  }
  int v645 = 1;
LABEL_267:
  unsigned __int16 v286 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v2);
  if (v286 <= 0xFFu)
  {
    uint64_t v621 = *v2;
    v622 = v2[1];
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v623 = v2[3];
    if (v623 && v622) {
      (*((void (**)(const char **, const char **))*v623 + 2))(v623, v621);
    }
    if (*((_DWORD *)v2 + 18) == -1) {
      *((_DWORD *)v2 + 18) = 127;
    }
  }
  v287 = v2[1];
  v288 = *v2;
  unint64_t v289 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v287 <= v289)
  {
    v624 = 0;
    unint64_t v625 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v626 = v2[3];
    if (v626)
    {
      if (v287)
      {
        (*((void (**)(const char **))*v626 + 2))(v626);
        unint64_t v625 = *v2;
        v624 = v2[1];
      }
      else
      {
        v624 = 0;
        unint64_t v625 = 0;
      }
    }
    goto LABEL_897;
  }
  v290 = (unsigned __int8 *)v288 + v289;
  v2[2] = (const char **)(v290 + 1);
  if (!v288)
  {
    v624 = v287;
    unint64_t v625 = 0;
LABEL_897:
    v287 = 0;
    v288 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v627 = v2[3];
    if (v627)
    {
      if (v624)
      {
        (*((void (**)(const char **, const char **, const char **))*v627 + 2))(v627, v625, v624);
        v288 = *v2;
        v287 = v2[1];
      }
      else
      {
        v287 = 0;
        v288 = 0;
      }
    }
    goto LABEL_898;
  }
  unsigned int v291 = *v290;
  if (v291 < 2)
  {
    BOOL v642 = v291 != 0;
    int v643 = 0;
    goto LABEL_272;
  }
LABEL_898:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v628 = v2[3];
  if (v628 && v287) {
    (*((void (**)(const char **, const char **))*v628 + 2))(v628, v288);
  }
  BOOL v642 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 128;
  }
  int v643 = 1;
LABEL_272:
  v292 = v2[1];
  uint64_t v293 = *v2;
  unint64_t v294 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v292 <= v294)
  {
    uint64_t v629 = 0;
    v630 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v631 = v2[3];
    if (v631)
    {
      if (v292)
      {
        (*((void (**)(const char **))*v631 + 2))(v631);
        v630 = *v2;
        uint64_t v629 = v2[1];
      }
      else
      {
        uint64_t v629 = 0;
        v630 = 0;
      }
    }
    goto LABEL_902;
  }
  v295 = (unsigned __int8 *)v293 + v294;
  v2[2] = (const char **)(v295 + 1);
  if (!v293)
  {
    uint64_t v629 = v292;
    v630 = 0;
LABEL_902:
    v292 = 0;
    uint64_t v293 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v632 = v2[3];
    if (v632)
    {
      if (v629)
      {
        (*((void (**)(const char **, const char **, const char **))*v632 + 2))(v632, v630, v629);
        uint64_t v293 = *v2;
        v292 = v2[1];
      }
      else
      {
        v292 = 0;
        uint64_t v293 = 0;
      }
    }
    goto LABEL_903;
  }
  unsigned int v296 = *v295;
  if (v296 < 2)
  {
    BOOL v640 = v296 != 0;
    int v641 = 0;
    goto LABEL_276;
  }
LABEL_903:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  uint64_t v633 = v2[3];
  if (v633 && v292) {
    (*((void (**)(const char **, const char **))*v633 + 2))(v633, v293);
  }
  BOOL v640 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 129;
  }
  int v641 = 1;
LABEL_276:
  unsigned __int16 v297 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>((IPC::Decoder *)v2);
  if (v297 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 130;
  }
  v298 = v2[1];
  v299 = *v2;
  unint64_t v300 = (char *)v2[2] - (char *)*v2;
  if ((unint64_t)v298 <= v300)
  {
    v634 = 0;
    v635 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    v636 = v2[3];
    if (v636)
    {
      if (v298)
      {
        (*((void (**)(const char **))*v636 + 2))(v636);
        v635 = *v2;
        v634 = v2[1];
      }
      else
      {
        v634 = 0;
        v635 = 0;
      }
    }
    goto LABEL_909;
  }
  v301 = (unsigned __int8 *)v299 + v300;
  v2[2] = (const char **)(v301 + 1);
  if (!v299)
  {
    v634 = v298;
    v635 = 0;
LABEL_909:
    v298 = 0;
    v299 = 0;
    WTF::StringImpl *v2 = 0;
    v2[1] = 0;
    uint64_t v637 = v2[3];
    if (v637)
    {
      if (v634)
      {
        (*((void (**)(const char **, const char **, const char **))*v637 + 2))(v637, v635, v634);
        v299 = *v2;
        v298 = v2[1];
      }
      else
      {
        v298 = 0;
        v299 = 0;
      }
    }
    goto LABEL_910;
  }
  unsigned int v302 = *v301;
  if (v302 < 2)
  {
    int v303 = 0;
    BOOL v304 = v302 != 0;
    goto LABEL_281;
  }
LABEL_910:
  WTF::StringImpl *v2 = 0;
  v2[1] = 0;
  v638 = v2[3];
  if (v638 && v298) {
    (*((void (**)(const char **, const char **))*v638 + 2))(v638, v299);
  }
  BOOL v304 = 0;
  if (*((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 132;
  }
  int v303 = 1;
LABEL_281:
  unsigned __int16 v305 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>((IPC::Decoder *)v2);
  if (v305 <= 0xFFu && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 133;
  }
  IPC::Decoder::decode<std::optional<WebKit::RemotePageParameters>>(v968, (IPC::Decoder *)v2);
  if (!v972 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 134;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v2, (uint64_t)&v965);
  if (!v967 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 135;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v2, (uint64_t)v963);
  if (!v964 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 136;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, (uint64_t)&v960);
  if (!v962 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 137;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, (uint64_t)&v957);
  if (!v959 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 138;
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((IPC::Decoder *)v2, (uint64_t)&v955);
  int v307 = v956;
  if (!v956 && *((_DWORD *)v2 + 18) == -1) {
    *((_DWORD *)v2 + 18) = 139;
  }
  if (!*v2)
  {
    *a2 = 0;
    a2[1480] = 0;
    if (!v307) {
      goto LABEL_418;
    }
    goto LABEL_928;
  }
  if (!v792) {
    goto LABEL_492;
  }
  v793 = (const char **)v791;
  if ((v790 & 0xFF0000) == 0) {
    goto LABEL_492;
  }
  __int16 v794 = v790;
  if (!v1061) {
    goto LABEL_492;
  }
  v308 = v1053;
  v1053 = 0;
  uint64_t v795 = v308;
  uint64_t v309 = v1054;
  uint64_t v1054 = 0;
  uint64_t v796 = v309;
  LODWORD(v308) = v1055;
  int v1055 = 0;
  int v797 = (int)v308;
  LOBYTE(v308) = v1056;
  char v1056 = 0;
  char v798 = (char)v308;
  uint64_t v310 = v1057;
  uint64_t v1057 = 0;
  uint64_t v799 = v310;
  uint64_t v311 = v1058;
  uint64_t v1058 = 0;
  uint64_t v800 = v311;
  LODWORD(v310) = v1059;
  int v1059 = 0;
  int v801 = (int)v310;
  LOBYTE(v310) = v1060;
  char v1060 = 0;
  char v802 = (char)v310;
  if (v4 <= 0xFFu) {
    goto LABEL_492;
  }
  char v803 = v4;
  if (!v789) {
    goto LABEL_492;
  }
  uint64_t v804 = v788;
  if (!v787) {
    goto LABEL_492;
  }
  uint64_t v805 = v786;
  if (!v1052) {
    goto LABEL_492;
  }
  uint64_t v312 = v1051[0];
  v1051[0] = 0;
  uint64_t v806 = v312;
  uint64_t v807 = v1051[1];
  if (v785) {
    goto LABEL_492;
  }
  BOOL v808 = v784;
  if (!v1050) {
    goto LABEL_492;
  }
  WebCore::Color::Color();
  if (v783) {
    goto LABEL_492;
  }
  BOOL v809 = v782;
  if (!v781) {
    goto LABEL_492;
  }
  v810 = v780;
  if (!v779) {
    goto LABEL_492;
  }
  uint64_t v2 = &v793;
  uint64_t v811 = v778;
  if (!v777) {
    goto LABEL_492;
  }
  v812 = v776;
  if (!v775) {
    goto LABEL_492;
  }
  v813 = v774;
  if (!v1048) {
    goto LABEL_492;
  }
  long long v814 = v1046;
  char v815 = v1047;
  if (!v773) {
    goto LABEL_492;
  }
  int v816 = (int)v21;
  char v817 = BYTE4(v21);
  if (!v772) {
    goto LABEL_492;
  }
  int v818 = v23;
  char v819 = BYTE4(v23);
  if (v771) {
    goto LABEL_492;
  }
  BOOL v820 = v770;
  if (v769) {
    goto LABEL_492;
  }
  BOOL v821 = v768;
  if (v767) {
    goto LABEL_492;
  }
  BOOL v822 = v766;
  if (v765 <= 0xFFu) {
    goto LABEL_492;
  }
  char v823 = v765;
  if (v764) {
    goto LABEL_492;
  }
  BOOL v824 = v763;
  if (v762) {
    goto LABEL_492;
  }
  uint64_t v825 = v49;
  if (v761) {
    goto LABEL_492;
  }
  uint64_t v826 = v54;
  if (!v1045) {
    goto LABEL_492;
  }
  v313 = v1044;
  v1044 = 0;
  uint64_t v827 = v313;
  if (v760) {
    goto LABEL_492;
  }
  BOOL v828 = v759;
  if (!v1043) {
    goto LABEL_492;
  }
  uint64_t v314 = v1041;
  uint64_t v1041 = 0;
  uint64_t v829 = v314;
  uint64_t v315 = v1042;
  uint64_t v1042 = 0;
  uint64_t v830 = v315;
  if (!v758) {
    goto LABEL_492;
  }
  uint64_t v831 = v757;
  if (v756) {
    goto LABEL_492;
  }
  BOOL v832 = v755;
  if (v754) {
    goto LABEL_492;
  }
  BOOL v833 = v753;
  if ((v752 & 0xFF00000000) == 0) {
    goto LABEL_492;
  }
  int v834 = v752;
  if ((v751 & 0xFF00000000) == 0) {
    goto LABEL_492;
  }
  int v835 = v751;
  if (v750) {
    goto LABEL_492;
  }
  uint64_t v836 = v75;
  if (v749) {
    goto LABEL_492;
  }
  uint64_t v837 = v80;
  if ((v748 & 0xFF00000000) == 0) {
    goto LABEL_492;
  }
  int v838 = v748;
  if ((v747 & 0xFF00000000) == 0) {
    goto LABEL_492;
  }
  int v839 = v747;
  if (v746 <= 0xFFu) {
    goto LABEL_492;
  }
  char v840 = v746;
  if (v745) {
    goto LABEL_492;
  }
  BOOL v841 = v744;
  if (v743) {
    goto LABEL_492;
  }
  BOOL v842 = v742;
  if (v741) {
    goto LABEL_492;
  }
  BOOL v843 = v740;
  if (!v739) {
    goto LABEL_492;
  }
  v844 = v738;
  if (!v737) {
    goto LABEL_492;
  }
  v845 = v736;
  if (v735) {
    goto LABEL_492;
  }
  BOOL v846 = v734;
  if (!v733) {
    goto LABEL_492;
  }
  unint64_t v847 = v732;
  char v848 = v731;
  if (v730 <= 0xFFu) {
    goto LABEL_492;
  }
  char v849 = v730;
  if (!v729) {
    goto LABEL_492;
  }
  int v850 = v728;
  char v851 = BYTE4(v728);
  if (v727) {
    goto LABEL_492;
  }
  BOOL v852 = v726;
  if (v725 <= 0xFFu) {
    goto LABEL_492;
  }
  char v853 = v725;
  if (v724) {
    goto LABEL_492;
  }
  BOOL v854 = v723;
  if (!v1040) {
    goto LABEL_492;
  }
  uint64_t v316 = v1038;
  uint64_t v1038 = 0;
  uint64_t v855 = v316;
  uint64_t v317 = v1039;
  uint64_t v1039 = 0;
  uint64_t v856 = v317;
  if (v722) {
    goto LABEL_492;
  }
  BOOL v857 = v721;
  if (v720) {
    goto LABEL_492;
  }
  BOOL v858 = v719;
  if (v718) {
    goto LABEL_492;
  }
  BOOL v859 = v717;
  if (v716) {
    goto LABEL_492;
  }
  BOOL v860 = v715;
  if (v714) {
    goto LABEL_492;
  }
  BOOL v861 = v713;
  if (!v712) {
    goto LABEL_492;
  }
  v862 = v711;
  if (v710) {
    goto LABEL_492;
  }
  uint64_t v863 = v145;
  if (v709) {
    goto LABEL_492;
  }
  uint64_t v864 = v150;
  if (!v708) {
    goto LABEL_492;
  }
  v865 = v707;
  if (!v1037) {
    goto LABEL_492;
  }
  long long v21 = (long long *)v963;
  long long v866 = v1035;
  *(_OWORD *)uint64_t v867 = *(_OWORD *)v1036;
  *(_OWORD *)&v867[9] = *(_OWORD *)&v1036[9];
  if (!v706) {
    goto LABEL_492;
  }
  v868 = v705;
  if (!v704) {
    goto LABEL_492;
  }
  v869 = v703;
  if (!v702) {
    goto LABEL_492;
  }
  v870 = v701;
  if (!v700) {
    goto LABEL_492;
  }
  v871 = v699;
  if ((v698 & 0xFF00000000) == 0) {
    goto LABEL_492;
  }
  int v872 = v698;
  if ((v697 & 0xFF00000000) == 0) {
    goto LABEL_492;
  }
  int v873 = v697;
  if (!HIBYTE(v696)) {
    goto LABEL_492;
  }
  __int16 v874 = v696;
  char v875 = BYTE2(v696);
  if (v695) {
    goto LABEL_492;
  }
  BOOL v876 = v694;
  if (v693) {
    goto LABEL_492;
  }
  BOOL v877 = v692;
  if (!v1034) {
    goto LABEL_492;
  }
  WebCore::Color::Color();
  if (v691) {
    goto LABEL_492;
  }
  BOOL v878 = v690;
  if (!v1032) {
    goto LABEL_492;
  }
  uint64_t v318 = v1030;
  uint64_t v1030 = 0;
  uint64_t v879 = v318;
  uint64_t v319 = v1031;
  uint64_t v1031 = 0;
  uint64_t v880 = v319;
  if (!v1029) {
    goto LABEL_492;
  }
  uint64_t v320 = v1027;
  uint64_t v1027 = 0;
  uint64_t v881 = v320;
  uint64_t v321 = v1028;
  uint64_t v1028 = 0;
  uint64_t v882 = v321;
  if (!v1026) {
    goto LABEL_492;
  }
  uint64_t v322 = v1024;
  uint64_t v1024 = 0;
  uint64_t v883 = v322;
  uint64_t v323 = v1025;
  uint64_t v1025 = 0;
  uint64_t v884 = v323;
  if (v689) {
    goto LABEL_492;
  }
  BOOL v885 = v688;
  if (v178 <= 0xFFu) {
    goto LABEL_492;
  }
  char v886 = v178;
  if ((v687 & 0xFF0000) == 0) {
    goto LABEL_492;
  }
  __int16 v887 = v687;
  if (!v1023) {
    goto LABEL_492;
  }
  uint64_t v324 = v1022;
  uint64_t v1022 = 0;
  v888 = v324;
  if (!v1021) {
    goto LABEL_492;
  }
  uint64_t v889 = v1019;
  char v890 = v1020;
  if (!v1018) {
    goto LABEL_492;
  }
  v325 = v1017;
  v1017 = 0;
  v891 = v325;
  if (!v1016) {
    goto LABEL_492;
  }
  uint64_t v326 = v1014;
  uint64_t v1014 = 0;
  uint64_t v892 = v326;
  uint64_t v327 = v1015;
  uint64_t v1015 = 0;
  uint64_t v893 = v327;
  if (!v1013) {
    goto LABEL_492;
  }
  std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100](v894, (uint64_t)v1012);
  if (v686) {
    goto LABEL_492;
  }
  v894[280] = v685;
  if (v684) {
    goto LABEL_492;
  }
  v894[281] = v683;
  if (v682) {
    goto LABEL_492;
  }
  v894[282] = v681;
  if (!v1011) {
    goto LABEL_492;
  }
  uint64_t v328 = v1001;
  uint64_t v895 = v1000;
  uint64_t v1001 = 0;
  uint64_t v896 = v328;
  uint64_t v329 = v1002;
  uint64_t v1002 = 0;
  uint64_t v897 = v329;
  uint64_t v330 = v1003;
  uint64_t v1003 = 0;
  uint64_t v898 = v330;
  uint64_t v331 = v1004;
  uint64_t v1004 = 0;
  uint64_t v899 = v331;
  uint64_t v332 = v1005;
  uint64_t v1005 = 0;
  uint64_t v900 = v332;
  uint64_t v333 = v1006;
  uint64_t v1006 = 0;
  uint64_t v901 = v333;
  uint64_t v334 = v1007;
  uint64_t v1007 = 0;
  uint64_t v902 = v334;
  uint64_t v335 = v1008;
  uint64_t v1008 = 0;
  uint64_t v903 = v335;
  uint64_t v336 = v1009;
  uint64_t v1009 = 0;
  uint64_t v904 = v336;
  uint64_t v337 = v1010;
  uint64_t v1010 = 0;
  uint64_t v905 = v337;
  if (!v999) {
    goto LABEL_492;
  }
  LOBYTE(v906) = 0;
  char v910 = 0;
  if (v998)
  {
    uint64_t v906 = v994;
    char v907 = v995;
    uint64_t v338 = v996;
    uint64_t v996 = 0;
    uint64_t v908 = v338;
    uint64_t v339 = v997;
    uint64_t v997 = 0;
    uint64_t v909 = v339;
    char v910 = 1;
  }
  if (!v993) {
    goto LABEL_492;
  }
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v911, (uint64_t)&v991);
  if (!v990) {
    goto LABEL_492;
  }
  uint64_t v912 = v988;
  char v913 = v989;
  if (!v987) {
    goto LABEL_492;
  }
  v340 = v986;
  uint64_t v986 = 0;
  v914 = v340;
  if (!v985) {
    goto LABEL_492;
  }
  uint64_t v341 = v983;
  uint64_t v983 = 0;
  v915[0] = v341;
  uint64_t v342 = v984;
  uint64_t v984 = 0;
  v915[1] = v342;
  if (!v982) {
    goto LABEL_492;
  }
  v343 = v981;
  v981 = 0;
  v915[2] = v343;
  if (v680) {
    goto LABEL_492;
  }
  BOOL v916 = v679;
  if (v678) {
    goto LABEL_492;
  }
  BOOL v917 = v677;
  if (!v980) {
    goto LABEL_492;
  }
  LOBYTE(v918) = 0;
  char v922 = 0;
  if (v979) {
    goto LABEL_493;
  }
  while (1)
  {
    if (HIWORD(v676))
    {
      *((_DWORD *)v2 + 286) = v676;
      *((unsigned char *)v2 + 1148) = BYTE4(v676);
      if (!v675)
      {
        BOOL v923 = v674;
        if (v974)
        {
          v344 = v973;
          v973 = 0;
          v924 = v344;
          if (!v673)
          {
            BOOL v925 = v672;
            if (!v671)
            {
              BOOL v926 = v670;
              if (!v669)
              {
                BOOL v927 = v668;
                if (!v667)
                {
                  BOOL v928 = v666;
                  if (!v665)
                  {
                    BOOL v929 = v664;
                    if (!v663)
                    {
                      BOOL v930 = v662;
                      if (!v661)
                      {
                        BOOL v931 = v660;
                        if (!v659)
                        {
                          BOOL v932 = v658;
                          if (!v657)
                          {
                            BOOL v933 = v656;
                            if (!v655)
                            {
                              BOOL v934 = v654;
                              if (!v653)
                              {
                                BOOL v935 = v652;
                                if (!v651)
                                {
                                  BOOL v936 = v650;
                                  if (!v649)
                                  {
                                    BOOL v937 = v648;
                                    if (!v647)
                                    {
                                      BOOL v938 = v646;
                                      if (!v645)
                                      {
                                        BOOL v939 = v644;
                                        if (v286 > 0xFFu)
                                        {
                                          char v940 = v286;
                                          if (!v643)
                                          {
                                            BOOL v941 = v642;
                                            if (!v641)
                                            {
                                              BOOL v942 = v640;
                                              if (v297 > 0xFFu)
                                              {
                                                char v943 = v297;
                                                if (!v303)
                                                {
                                                  BOOL v944 = v304;
                                                  if (v305 > 0xFFu)
                                                  {
                                                    char v945 = v305;
                                                    if (v972)
                                                    {
                                                      uint64_t v2 = (const char ***)v915;
                                                      std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100](v946, (uint64_t)v968);
                                                      if (v967)
                                                      {
                                                        long long v947 = v965;
                                                        char v948 = v966;
                                                        if (v964)
                                                        {
                                                          long long v949 = *v21;
                                                          if (v962)
                                                          {
                                                            uint64_t v345 = v960;
                                                            uint64_t v960 = 0;
                                                            uint64_t v950 = v345;
                                                            uint64_t v346 = v961;
                                                            uint64_t v961 = 0;
                                                            uint64_t v951 = v346;
                                                            if (v959)
                                                            {
                                                              uint64_t v347 = v957;
                                                              uint64_t v957 = 0;
                                                              uint64_t v952 = v347;
                                                              uint64_t v348 = v958;
                                                              uint64_t v958 = 0;
                                                              uint64_t v953 = v348;
                                                              if (v956) {
                                                                break;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_492:
    __break(1u);
LABEL_493:
    v359 = v975;
    v975 = 0;
    v918 = v359;
    uint64_t v360 = v976;
    uint64_t v976 = 0;
    uint64_t v919 = v360;
    LODWORD(v359) = v977;
    int v977 = 0;
    int v920 = (int)v359;
    LOBYTE(v359) = v978;
    char v978 = 0;
    char v921 = (char)v359;
    char v922 = 1;
  }
  uint64_t v349 = v955;
  v955 = 0;
  uint64_t v954 = v349;
  *(unsigned char *)(WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)a2, (uint64_t *)&v793) + 1480) = 1;
  WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v793);
  if (v956) {
LABEL_928:
  }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v955);
LABEL_418:
  if (v959) {
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v957, v306);
  }
  if (v962) {
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v960, v306);
  }
  if (v972 && v971[128])
  {
    if (v971[120]) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v971, (WTF::StringImpl *)v306);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v970, v306);
    uint64_t v361 = v969;
    v969 = 0;
    if (v361)
    {
      if (*(_DWORD *)v361 == 2) {
        WTF::StringImpl::destroy(v361, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v361 -= 2;
      }
    }
    v362 = v968[0];
    v968[0] = 0;
    if (v362)
    {
      if (*(_DWORD *)v362 == 2) {
        WTF::StringImpl::destroy(v362, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v362 -= 2;
      }
    }
  }
  if (v974)
  {
    v350 = v973;
    v973 = 0;
    if (v350)
    {
      if (*(_DWORD *)v350 == 2) {
        WTF::StringImpl::destroy(v350, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v350 -= 2;
      }
    }
  }
  if (v980 && v979 && v975) {
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)v975, (WTF::StringImpl *)v976);
  }
  if (v982 && v981) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v981, (WTF::StringImpl *)v306);
  }
  if (v985) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v983, v306);
  }
  if (v987)
  {
    v351 = v986;
    uint64_t v986 = 0;
    if (v351)
    {
      if (*(_DWORD *)v351 == 2) {
        WTF::StringImpl::destroy(v351, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v351 -= 2;
      }
    }
  }
  if (v993)
  {
    if (v992)
    {
      if ((v991 & 0x8000000000000) != 0)
      {
        uint64_t v365 = (unsigned int *)(v991 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v991 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v365);
          WTF::fastFree((WTF *)v365, v306);
        }
      }
    }
  }
  if (v999 && v998) {
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v996, v306);
  }
  if (v1011)
  {
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1009, (WTF::StringImpl *)v306);
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1007, v352);
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1005, v353);
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v1003, v354);
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1001, v355);
  }
  if (v1013 && v1012[272]) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v1012, v306);
  }
  if (v1016) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1014, v306);
  }
  if (v1018 && v1017) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v1017, (WTF::StringImpl *)v306);
  }
  if (v1023)
  {
    v356 = v1022;
    uint64_t v1022 = 0;
    if (v356)
    {
      if (*(_DWORD *)v356 == 2) {
        WTF::StringImpl::destroy(v356, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v356 -= 2;
      }
    }
  }
  if (v1026) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1024, v306);
  }
  if (v1029) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1027, v306);
  }
  if (v1032) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1030, v306);
  }
  if (v1034)
  {
    if ((v1033 & 0x8000000000000) != 0)
    {
      v363 = (unsigned int *)(v1033 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v1033 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v363);
        WTF::fastFree((WTF *)v363, v306);
      }
    }
  }
  if (v1040) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1038, v306);
  }
  if (v1043) {
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1041, v306);
  }
  if (v1045)
  {
    uint64_t v357 = v1044;
    v1044 = 0;
    if (v357)
    {
      if (*(_DWORD *)v357 == 2) {
        WTF::StringImpl::destroy(v357, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v357 -= 2;
      }
    }
  }
  if (v1050)
  {
    if ((v1049 & 0x8000000000000) != 0)
    {
      v364 = (unsigned int *)(v1049 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v1049 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v364);
        WTF::fastFree((WTF *)v364, v306);
      }
    }
  }
  if (v1052)
  {
    v358 = (WTF::StringImpl *)v1051[0];
    v1051[0] = 0;
    if (v358)
    {
      if (*(_DWORD *)v358 == 2) {
        WTF::StringImpl::destroy(v358, (WTF::StringImpl *)v306);
      }
      else {
        *(_DWORD *)v358 -= 2;
      }
    }
  }
  if (v1061)
  {
    if (v1057) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v1057, (WTF::StringImpl *)v1058);
    }
    if (v1053) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v1053, (WTF::StringImpl *)v1054);
    }
  }
}

void sub_198757D04(_Unwind_Exception *a1, void *a2)
{
  if (LOBYTE(STACK[0xD98]))
  {
    unint64_t v3 = STACK[0xD90];
    if ((STACK[0xD90] & 0x8000000000000) != 0)
    {
      unsigned __int16 v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  if (LOBYTE(STACK[0xDE0])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xDD0], a2);
  }
  if (LOBYTE(STACK[0xDF8])) {
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xDE8], a2);
  }
  if (LOBYTE(STACK[0xE08]))
  {
    unsigned __int8 v6 = (WTF::StringImpl *)STACK[0xE00];
    STACK[0xE00] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 - 224))
  {
    uint64_t v7 = *(void *)(v2 - 232);
    if ((v7 & 0x8000000000000) != 0)
    {
      unsigned int v11 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  if (*(unsigned char *)(v2 - 200))
  {
    uint64_t v8 = *(WTF::StringImpl **)(v2 - 216);
    *(void *)(v2 - 216) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 - 144))
  {
    unint64_t v9 = *(WTF **)(v2 - 168);
    if (v9) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v9, (WTF::StringImpl *)*(unsigned int *)(v2 - 160));
    }
    uint64_t v10 = *(WTF **)(v2 - 192);
    if (v10) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v10, (WTF::StringImpl *)*(unsigned int *)(v2 - 184));
    }
  }
  _Unwind_Resume(a1);
}

void sub_198758548()
{
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198758598(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (result >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::LinkDecorationFilteringData>(a1, (uint64_t)&v21);
      if (!v24) {
        break;
      }
      if (HIDWORD(v26) == v26)
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        int v15 = HIDWORD(v26) + 1;
        unsigned int v16 = (void *)(v25 + 24 * HIDWORD(v26));
        uint64_t v17 = v21;
        uint64_t v21 = 0;
        void *v16 = v17;
        uint64_t v18 = v22;
        uint64_t v22 = 0;
        v16[1] = v18;
        uint64_t v19 = v23;
        uint64_t v23 = 0;
        void v16[2] = v19;
        HIDWORD(v26) = v15;
      }
      std::__optional_destruct_base<WebCore::LinkDecorationFilteringData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
      if (!--v6)
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v25, HIDWORD(v26));
        *(void *)a2 = v25;
        unsigned __int8 v20 = v26;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        *(void *)(a2 + 8) = v20;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
    }
    LODWORD(v26) = 24 * (int)result / 0x18u;
    uint64_t v25 = WTF::fastMalloc((WTF *)(24 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::LinkDecorationFilteringData>(a1, (uint64_t)&v21);
      if (!v24) {
        break;
      }
      if (HIDWORD(v26) == v26)
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        int v10 = HIDWORD(v26) + 1;
        unsigned int v11 = (void *)(v25 + 24 * HIDWORD(v26));
        uint64_t v12 = v21;
        uint64_t v21 = 0;
        *unsigned int v11 = v12;
        uint64_t v13 = v22;
        uint64_t v22 = 0;
        v11[1] = v13;
        uint64_t v14 = v23;
        uint64_t v23 = 0;
        void v11[2] = v14;
        HIDWORD(v26) = v10;
      }
      std::__optional_destruct_base<WebCore::LinkDecorationFilteringData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
      if (!--v6)
      {
        uint64_t v7 = v25;
        uint64_t v8 = v26;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebCore::LinkDecorationFilteringData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
  return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
}

void sub_19875879C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__optional_destruct_base<WebCore::LinkDecorationFilteringData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<std::optional<std::pair<unsigned short,unsigned short>>>(uint64_t *a1)
{
  unint64_t v2 = IPC::ArgumentCoder<std::optional<std::pair<unsigned short,unsigned short>>,void>::decode<IPC::Decoder>(a1);
  if (!HIWORD(v2)) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return v2;
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::FloatSize>>(unint64_t *a1)
{
  unint64_t v2 = IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::FloatRect>>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[20])
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::Color>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16]) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_1987588E8(_Unwind_Exception *a1, void *a2)
{
  std::optional<std::optional<WebCore::Color>>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplicationManifest>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[280]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198758938(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 280))
  {
    if (*((unsigned char *)v2 + 272)) {
      WebCore::ApplicationManifest::~ApplicationManifest(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ViewportArguments>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ViewportArguments>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 44))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

void *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::optional<WebKit::WebExtensionControllerParameters>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebExtensionControllerParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 40))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::RemotePageParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::RemotePageParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[216]) {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198758AC0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<std::optional<WebKit::RemotePageParameters>>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 32)) {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198758B10(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

IPC::Decoder *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    return (IPC::Decoder *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void IPC::Decoder::decode<WebKit::UserContentControllerParameters>(unsigned char *a1, IPC::Decoder *a2)
{
  if (!a1[88]) {
    IPC::Decoder::markInvalid(a2);
  }
}

void sub_198758BB0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebKit::UserContentControllerParameters>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<WebKit::HardwareKeyboardState>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::decode(a1);
  if (!(result >> 24))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WebKit::WebPreferencesStore>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebPreferencesStore,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48)) {
    return (WTF *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198758C78(_Unwind_Exception *a1)
{
  std::optional<WebKit::WebPreferencesStore>::~optional(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::WebPageGroupData>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebPageGroupData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 16)) {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198758CC8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebKit::WebPageGroupData>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::LayerHostingMode>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::LayerHostingMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WebKit::DrawingAreaType>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::DrawingAreaType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::MediaProducerMutedState>>(IPC::Decoder *a1)
{
  unsigned __int16 v2 = IPC::Decoder::decode<unsigned char>(a1);
  unsigned __int8 v3 = v2;
  BOOL v5 = (v2 & 0xE0) != 0 || v2 < 0x100u;
  if (v5) {
    IPC::Decoder::markInvalid(a1);
  }
  if (v5) {
    return 0;
  }
  else {
    return v3 | 0x100u;
  }
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[8])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198758E54(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (result >= 0xD20)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v10);
      if (!v11) {
        break;
      }
      if (HIDWORD(v13) == v13)
      {
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>((uint64_t)&v12, (unint64_t)v10);
      }
      else
      {
        WebKit::BackForwardListItemState::BackForwardListItemState(v12 + 312 * HIDWORD(v13), (uint64_t)v10);
        ++HIDWORD(v13);
      }
      std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
      if (!--v6)
      {
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v12, HIDWORD(v13));
        *(void *)a2 = v12;
        uint64_t v9 = v13;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        *(void *)(a2 + 8) = v9;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
    }
    LODWORD(v13) = 312 * (int)result / 0x138u;
    uint64_t v12 = WTF::fastMalloc((WTF *)(312 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v10);
      if (!v11) {
        break;
      }
      if (HIDWORD(v13) == v13)
      {
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>((uint64_t)&v12, (unint64_t)v10);
      }
      else
      {
        WebKit::BackForwardListItemState::BackForwardListItemState(v12 + 312 * HIDWORD(v13), (uint64_t)v10);
        ++HIDWORD(v13);
      }
      std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
      if (!--v6)
      {
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
}

void sub_19875902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<std::optional<std::pair<unsigned short,unsigned short>>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unsigned __int16 v2 = IPC::Decoder::decode<BOOL>(a1);
  if (v2 < 0x100u)
  {
    uint64_t v3 = 0;
    uint64_t v6 = 0;
    unsigned int v4 = 0;
    int v5 = 0;
  }
  else if ((_BYTE)v2)
  {
    uint64_t v8 = IPC::Decoder::decode<std::pair<unsigned short,unsigned short>>(a1);
    int v5 = v8 & 0xFFFFFF00;
    unsigned int v4 = v8;
    uint64_t v3 = 0x100000000;
    if (WORD2(v8)) {
      uint64_t v6 = 0x1000000000000;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!WORD2(v8))
    {
      unsigned int v4 = 0;
      int v5 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    int v5 = 0;
    uint64_t v6 = 0x1000000000000;
  }
  return v6 | v3 | v5 | v4;
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  unsigned __int16 v2 = IPC::Decoder::decode<BOOL>(a1);
  if (v2 < 0x100u)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  else if ((_BYTE)v2)
  {
    uint64_t v6 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    unint64_t v4 = (unint64_t)v6 & 0xFFFFFFFFFFFFFF00;
    uint64_t v3 = v6;
    if (!v7)
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  return v4 | v3;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a2 = 0;
    a2[20] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v6);
      char v5 = v7;
      if (v7)
      {
        *(_OWORD *)a2 = v6;
        char v5 = 1;
        a2[16] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      *a2 = 0;
      a2[16] = 0;
      char v5 = 1;
    }
    a2[20] = v5;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a2 = 0;
    a2[16] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      IPC::Decoder::decode<WebCore::Color>(a1, v7);
      char v6 = v8;
      if (v8)
      {
        WebCore::Color::Color();
        char v6 = 1;
        a2[8] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      v7[0] = 0;
      char v8 = 0;
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v7);
      char v6 = 1;
    }
    a2[16] = v6;
    return std::optional<WebCore::Color>::~optional((uint64_t)v7, v5);
  }
  return result;
}

void sub_1987592CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IPC::ArgumentCoder<std::optional<WebCore::ApplicationManifest>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<BOOL>(a1);
  if (v4 <= 0xFFu) {
    goto LABEL_9;
  }
  if (!(_BYTE)v4)
  {
    LOBYTE(v6[0]) = 0;
    char v7 = 0;
    std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v6);
    goto LABEL_4;
  }
  IPC::Decoder::decode<WebCore::ApplicationManifest>(a1, v6);
  if (!v7)
  {
LABEL_9:
    *a2 = 0;
    a2[280] = 0;
    return;
  }
  WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a2, v6);
  a2[272] = 1;
LABEL_4:
  a2[280] = 1;
  if (v7) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v6, v5);
  }
}

void sub_198759398(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a44) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ViewportArguments>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    WTF *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      int v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    WTF *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::ViewportArguments>(result, (uint64_t)v16);
      char v8 = v18;
      if (v18)
      {
        long long v9 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v9;
        *(void *)(a2 + 32) = v17;
        char v8 = 1;
        *(unsigned char *)(a2 + 40) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 40) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 44) = v8;
    return result;
  }
LABEL_13:
  WTF *result = 0;
  result[1] = 0;
  uint64_t result = (uint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 44) = 0;
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    WTF *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_11;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_11:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    WTF *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (void *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 24) = v8;
    return result;
  }
LABEL_12:
  WTF *result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v3) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>((WTF::StringImpl *)v6, a2);
      char v5 = v9;
      if (v9)
      {
        *(void *)a1 = v6[0];
        *(void *)(a1 + 8) = v6[1];
        *(_DWORD *)(a1 + 16) = v7;
        *(unsigned char *)(a1 + 20) = v8;
        char v5 = 1;
        *(unsigned char *)(a1 + 24) = 1;
      }
      else
      {
        *(unsigned char *)a1 = 0;
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      char v5 = 1;
    }
    *(unsigned char *)(a1 + 32) = v5;
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = *((void *)result + 1);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *((void *)result + 2) - *(void *)result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    uint64_t v12 = *((void *)result + 3);
    if (v12)
    {
      long long v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *(void *)v15;
        unint64_t v10 = *((void *)v15 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  *((void *)result + 2) = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    uint64_t v13 = *((void *)result + 3);
    if (v13)
    {
      uint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *(void *)v14;
        unint64_t v3 = *((void *)v14 + 1);
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_11:
    *(void *)uint64_t result = 0;
    *((void *)result + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)result + 3);
    if (result && v3) {
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v4);
    }
    goto LABEL_12;
  }
  if (!v7)
  {
    *a2 = 0;
    a2[8] = 0;
    char v9 = 1;
    goto LABEL_7;
  }
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(result);
  if (!v8)
  {
LABEL_12:
    char v9 = 0;
    *a2 = 0;
    goto LABEL_7;
  }
  *(void *)a2 = result;
  char v9 = 1;
  a2[8] = 1;
LABEL_7:
  a2[16] = v9;
  return result;
}

void *IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::decode(void *result)
{
  uint64_t v1 = (unsigned __int8 *)result[1];
  uint64_t v2 = *result;
  unint64_t v3 = result[2] - *result;
  if ((unint64_t)v1 <= v3)
  {
    char v18 = 0;
    uint64_t v19 = 0;
    WTF *result = 0;
    result[1] = 0;
    uint64_t v20 = result[3];
    if (v20)
    {
      __int16 v38 = result;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        uint64_t result = v38;
        uint64_t v19 = *v38;
        char v18 = (unsigned __int8 *)v38[1];
      }
      else
      {
        char v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_18;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    char v18 = v1;
    uint64_t v19 = 0;
LABEL_18:
    WTF *result = 0;
    result[1] = 0;
    uint64_t v21 = result[3];
    if (v21)
    {
      unint64_t v37 = result;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v21 + 16))(v21, v19, v18);
        unsigned int v6 = 0;
        uint64_t result = v37;
        uint64_t v2 = *v37;
        uint64_t v1 = (unsigned __int8 *)v37[1];
      }
      else
      {
        uint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      uint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_20;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    char v7 = 0;
    int v8 = 1;
    goto LABEL_5;
  }
LABEL_20:
  WTF *result = 0;
  result[1] = 0;
  char v16 = (unsigned __int8 *)result[3];
  if (!v16)
  {
    int v9 = 0;
    uint64_t v2 = 0;
    char v7 = 1;
    goto LABEL_22;
  }
  unsigned int v31 = v6;
  int v36 = result;
  if (!v1)
  {
    int v9 = 0;
    char v16 = 0;
    uint64_t v2 = 0;
    char v7 = 1;
    goto LABEL_22;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)v16 + 16))(v16, v2);
  int v8 = 0;
  uint64_t result = v36;
  uint64_t v2 = *v36;
  uint64_t v1 = (unsigned __int8 *)v36[1];
  char v7 = 1;
  uint64_t v5 = v36[2];
  unsigned int v6 = v31;
LABEL_5:
  if (v6) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = v5 - v2;
  if ((unint64_t)v1 <= v10)
  {
    int v25 = v9;
    char v29 = v7;
    char v16 = 0;
    uint64_t v23 = result[3];
    WTF *result = 0;
    result[1] = 0;
    unint64_t v32 = result;
    if (v23 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      uint64_t result = v32;
      uint64_t v2 = *v32;
      char v16 = (unsigned __int8 *)v32[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    char v7 = v29;
    int v9 = v25;
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)(v2 + v10);
    uint64_t v12 = v2 + v10 + 1;
    result[2] = v12;
    if (v2)
    {
      int v13 = 0;
      int v14 = *v11 << 8;
      goto LABEL_11;
    }
    char v16 = v1;
  }
LABEL_22:
  WTF *result = 0;
  result[1] = 0;
  uint64_t v22 = result[3];
  if (!v22)
  {
    int v14 = 0;
    char v16 = 0;
    uint64_t v2 = 0;
    goto LABEL_24;
  }
  int v28 = v9;
  char v30 = v7;
  char v35 = result;
  if (!v16)
  {
    int v14 = 0;
    uint64_t v2 = 0;
    goto LABEL_24;
  }
  (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v22 + 16))(v22, v2, v16);
  int v14 = 0;
  uint64_t result = v35;
  uint64_t v2 = *v35;
  uint64_t v1 = (unsigned __int8 *)v35[1];
  int v13 = 1;
  uint64_t v12 = v35[2];
  char v7 = v30;
  int v9 = v28;
LABEL_11:
  unint64_t v15 = v12 - v2;
  if ((unint64_t)v1 <= v15)
  {
    int v26 = v14;
    char v16 = 0;
    uint64_t v24 = result[3];
    WTF *result = 0;
    result[1] = 0;
    unsigned int v33 = result;
    if (v24 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      uint64_t result = v33;
      uint64_t v2 = *v33;
      char v16 = (unsigned __int8 *)v33[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    int v14 = v26;
  }
  else
  {
    char v16 = (unsigned __int8 *)(v2 + v15);
    result[2] = v16 + 1;
    if (v2)
    {
      if ((v7 & 1) == 0 && !v13)
      {
        LODWORD(v16) = *v16 << 16;
        LODWORD(v17) = 0x1000000;
        return (void *)(v14 | v16 | v9 | v17);
      }
      goto LABEL_54;
    }
    char v16 = v1;
  }
LABEL_24:
  WTF *result = 0;
  result[1] = 0;
  uint64_t v17 = result[3];
  if (!v17)
  {
    LODWORD(v16) = 0;
    int v9 = 0;
    return (void *)(v14 | v16 | v9 | v17);
  }
  int v27 = v14;
  unsigned int v34 = (unsigned __int8 **)result;
  if (!v16
    || (uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v17 + 16))(v17, v2, v16), (v16 = *v34) == 0))
  {
    int v9 = 0;
    LODWORD(v17) = 0;
    int v14 = v27;
    return (void *)(v14 | v16 | v9 | v17);
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::LayerHostingMode,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 2u || HIBYTE(v3) == 0) {
    return 0;
  }
  else {
    return v3 | 0x100u;
  }
}

uint64_t IPC::ArgumentCoder<WebKit::DrawingAreaType,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if ((_BYTE)v3) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = HIBYTE(v3) == 0;
  }
  if (v1) {
    return 0;
  }
  else {
    return 256;
  }
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
  if ((result & 0xFF00000000) != 0)
  {
    int v5 = result;
    unsigned int v6 = 0;
    int v13 = 0;
    if (result)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
        if (!v12) {
          break;
        }
        uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
        v10[0] = result;
        v10[1] = v7;
        if (!(_BYTE)v7) {
          break;
        }
        if (!v12)
        {
          __break(1u);
          return result;
        }
        if ((unint64_t)v11 + 1 < 2) {
          break;
        }
        WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t)v9, (uint64_t *)&v13, &v11, v10);
        if (!v9[16]) {
          break;
        }
        uint64_t result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
        if (!--v5)
        {
          unsigned int v6 = v13;
          goto LABEL_3;
        }
      }
      *a1 = 0;
      a1[8] = 0;
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
      uint64_t result = (uint64_t)v13;
      if (v13) {
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v8);
      }
    }
    else
    {
LABEL_3:
      *(void *)a1 = v6;
      a1[8] = 1;
    }
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
  return result;
}

void sub_198759F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  int v9 = *(WTF::StringImpl ***)(v6 - 40);
  if (v9) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
  }
  _Unwind_Resume(a1);
}

void sub_198759F2C()
{
}

uint64_t WebKit::WebsiteDataStore::setTrackingPreventionEnabled(uint64_t this, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  int v3 = *(unsigned __int8 *)(this + 265);
  if (v3 != v2)
  {
    uint64_t v5 = this;
    if (*(unsigned char *)(this + 265)) {
      this = v3 == 2;
    }
    else {
      this = *(unsigned __int16 *)(*(void *)(this + 208) + 528) >= 0x100u
    }
           ? *(_WORD *)(*(void *)(this + 208) + 528) != 0
           : WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)this);
    *(unsigned char *)(v5 + 265) = v2;
    if (this != a2)
    {
      uint64_t v6 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(v5 + 24);
        *(_DWORD *)long long buf = 134218496;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v24 = 2048;
        uint64_t v25 = v7;
        __int16 v26 = 1024;
        int v27 = a2;
        _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - WebsiteDataStore::setTrackingPreventionEnabled: sessionID=%llu, enabled=%d", buf, 0x1Cu);
      }
      uint64_t v8 = *(void *)(v5 + 400);
      if (v8)
      {
        atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
        uint64_t v20 = v5 + 24;
        char v21 = a2;
        int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v9 = 505;
        *((void *)v9 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
        *((void *)v9 + 66) = (char *)v9 + 16;
        *((void *)v9 + 67) = 512;
        *((void *)v9 + 68) = 0;
        *((void *)v9 + 70) = 0;
        *((void *)v9 + 69) = 0;
        IPC::Encoder::encodeHeader(v9);
        uint64_t v22 = v9;
        IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v20);
        buf[0] = 0;
        BYTE2(v25) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v22, 0, (uint64_t)buf, 1);
        if (BYTE2(v25))
        {
          uint64_t v11 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
        }
        char v12 = v22;
        uint64_t v22 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v10);
          WTF::fastFree(v18, v19);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
      }
      WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)v5, -1, (uint64_t *)buf);
      int v14 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)buf);
      unint64_t v15 = v13;
      this = *(void *)buf;
      if (*(void *)buf) {
        uint64_t v16 = *(void *)buf + 8 * *(unsigned int *)(*(void *)buf - 4);
      }
      else {
        uint64_t v16 = 0;
      }
      if ((uint64_t *)v16 != v14)
      {
        do
        {
          uint64_t v17 = *v14;
          if (*v14)
          {
            CFRetain(*(CFTypeRef *)(v17 + 8));
            LOBYTE(v20) = a2;
            WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>((unsigned int *)v17, (uint64_t)&v20, *(void *)(v5 + 24));
            CFRelease(*(CFTypeRef *)(v17 + 8));
          }
          else
          {
            LOBYTE(v20) = a2;
            WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>(0, (uint64_t)&v20, *(void *)(v5 + 24));
          }
          while (++v14 != v15)
          {
            if ((unint64_t)(*v14 + 1) > 1) {
              goto LABEL_30;
            }
          }
          int v14 = v15;
LABEL_30:
          ;
        }
        while (v14 != (uint64_t *)v16);
        this = *(void *)buf;
      }
      if (this) {
        return WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)this, v13);
      }
    }
  }
  return this;
}

WTF *WebKit::EventDispatcher::didReceiveMessage(WTF *this, atomic_uchar *volatile *a2, WTF **a3)
{
  uint64_t v4 = this;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 34)
  {
    return (WTF *)IPC::handleMessage<Messages::EventDispatcher::PageScreenDidChange,WebKit::EventDispatcher,WebKit::EventDispatcher,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>)>((IPC::Decoder *)a3, this);
  }
  if (v5 != 35)
  {
    if (v5 != 36) {
      return this;
    }
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
    if (v7)
    {
      uint64_t v8 = v6;
      IPC::Decoder::decode<WebKit::WebWheelEvent>((uint64_t *)a3, (uint64_t)v37);
      if (v43)
      {
        unint64_t v9 = IPC::Decoder::decode<WebCore::RectEdges<BOOL>>((uint64_t *)a3);
        if (BYTE4(v9))
        {
          if (v43)
          {
            uint64_t v29 = v8;
            *(_DWORD *)&v30[8] = 0;
            *(_OWORD *)&v30[12] = *(_OWORD *)&v37[4];
            *(_OWORD *)unsigned int v31 = v39;
            long long v32 = v40;
            long long v33 = v41;
            long long v34 = v42;
            *(_OWORD *)&unsigned char v30[24] = *(_OWORD *)&v37[16];
            *(_OWORD *)&v30[40] = v38;
            int v35 = v9;
            char v36 = 1;
            return (WTF *)WebKit::EventDispatcher::internalWheelEvent(v4, v8, &v30[8], v10, 0);
          }
LABEL_28:
          __break(1u);
        }
      }
    }
    goto LABEL_24;
  }
  uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
  if (!v13
    || (uint64_t v14 = v12,
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a3, (uint64_t)&v27), !v28))
  {
LABEL_24:
    uint64_t v25 = *a3;
    __int16 v26 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    this = a3[3];
    if (this)
    {
      if (v26) {
        return (WTF *)(*(uint64_t (**)(WTF *, WTF *))(*(void *)this + 16))(this, v25);
      }
    }
    return this;
  }
  IPC::Decoder::decode<WebKit::WebTouchEvent>((uint64_t *)a3, (uint64_t)v37);
  if (!v43)
  {
    std::__optional_destruct_base<WebKit::WebTouchEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v15);
    goto LABEL_24;
  }
  if (!v28) {
    goto LABEL_28;
  }
  uint64_t v29 = v14;
  *(_OWORD *)char v30 = v27;
  *(_DWORD *)&unsigned char v30[24] = 0;
  *(_OWORD *)&v30[28] = *(_OWORD *)&v37[4];
  *(_OWORD *)&v30[40] = *(_OWORD *)&v37[16];
  uint64_t v16 = (WTF *)*((void *)&v38 + 1);
  v31[0] = (WTF *)v38;
  long long v38 = 0uLL;
  v31[1] = v16;
  uint64_t v17 = *((void *)&v39 + 1);
  *(void *)&long long v32 = v39;
  long long v39 = 0uLL;
  *((void *)&v32 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v17;
  uint64_t v18 = *((void *)&v40 + 1);
  *(void *)&long long v33 = v40;
  long long v40 = 0uLL;
  *((void *)&v33 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v18;
  int v35 = v42;
  long long v34 = v41;
  char v36 = 1;
  std::__optional_destruct_base<WebKit::WebTouchEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v15);
  uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
  if (!(_BYTE)v20) {
    goto LABEL_21;
  }
  *(void *)unint64_t v37 = v19;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v37[8], a2);
  char v21 = (void *)WTF::fastMalloc((WTF *)0x18);
  *char v21 = &unk_1EE9B3D50;
  v21[1] = *(void *)v37;
  uint64_t v22 = *(void *)&v37[8];
  *(void *)&v37[8] = 0;
  void v21[2] = v22;
  *(void *)&long long v27 = v21;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v37[8]);
  if (!v36) {
    goto LABEL_28;
  }
  WebKit::EventDispatcher::touchEvent((uint64_t)v4, v29, *(uint64_t *)v30, *(uint64_t *)&v30[8], (uint64_t)&v30[24], (uint64_t *)&v27);
  this = (WTF *)v27;
  *(void *)&long long v27 = 0;
  if (this) {
    this = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 8))(this);
  }
  if (v36)
  {
LABEL_21:
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v20);
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v23);
    this = v31[0];
    if (v31[0])
    {
      v31[0] = 0;
      LODWORD(v31[1]) = 0;
      return (WTF *)WTF::fastFree(this, v24);
    }
  }
  return this;
}

void sub_19875B76C(_Unwind_Exception *a1)
{
  if (v4) {
    CFRelease(v4);
  }
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  WTF::fastFree(v1, v6);
  _Unwind_Resume(a1);
}

void sub_19875B80C()
{
}

void sub_19875B814()
{
}

void WebKit::RemoteDisplayListRecorderProxy::recordTranslate(WebKit::RemoteDisplayListRecorderProxy *this, float a2, float a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  v48[0] = a2;
  v48[1] = a3;
  uint64_t v3 = *((void *)this + 481);
  if (v3)
  {
    int v5 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
    if (v5)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v5, &v50);
      uint64_t v6 = v50;
      if (v50)
      {
        char v7 = (WebKit::RemoteImageBufferProxy *)*((void *)this + 479);
        if (v7)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v7, *((void *)this + 480), &v49);
          char v7 = v49;
          if (v49 && !*((unsigned char *)v49 + 4016))
          {
            *((unsigned char *)v49 + 4016) = 1;
            char v7 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v7);
          }
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v8 = *((void *)this + 478);
        double v9 = *((double *)v6 + 15);
        double v10 = INFINITY;
        if (fabs(v9) != INFINITY)
        {
          WTF::ApproximateTime::now(v7);
          double v10 = v9 + v11;
        }
        if (*((void *)v6 + 7) == v8)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), &v51, v10);
            if (!v53) {
              break;
            }
            *(void *)long long buf = v51;
            *(void *)&buf[8] = v52;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v12 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v13 = v12 >= v51;
            unint64_t v14 = v12 - v51;
            if (v13)
            {
              if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v52)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v51 + v14) = 892;
                *(void *)&uint8_t buf[16] = v14 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, v48);
            if (*(void *)&buf[8])
            {
              uint64_t v17 = *(void *)&buf[16];
              unint64_t v18 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v19 = *((void *)v6 + 8);
              if (v18 + 16 >= v19) {
                unint64_t v18 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v17 = 16;
              }
              unint64_t v20 = v18 + v17;
              if (v19 <= v20) {
                unint64_t v20 = 0;
              }
              *((void *)v6 + 10) = v20;
              unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20);
              atomic_uint v22 = v6[29];
              if (v21 == 0x80000000 || v22 != 0)
              {
                unsigned int v25 = v22 + 1;
                v6[29] = v25;
                if (v25 >= v6[28])
                {
                  if (*((unsigned char *)v6 + 104)) {
                    MEMORY[0x1997420B0](v6[23]);
                  }
                  v6[29] = 0;
                }
              }
              goto LABEL_27;
            }
            uint64_t v26 = v53;
            if (v53)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v51, v52);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
              int v43 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Translate>(*(uint64_t *)buf, v48, v8);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v43) {
                goto LABEL_27;
              }
              break;
            }
            __break(1u);
LABEL_78:
            unint64_t v30 = 0;
            unint64_t v29 = v16;
LABEL_41:
            unint64_t v31 = (v26 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v31 >= v26 + v30)
            {
              unint64_t v32 = v31 - v26;
              if (v32 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v30 = v32 + 8;
              if (v32 + 8 > v29) {
                break;
              }
              *(void *)(v26 + v32) = v8;
            }
            if (!v29) {
              break;
            }
            unint64_t v33 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v34 = *((void *)v6 + 8);
            if (v33 + 16 >= v34) {
              unint64_t v33 = 0;
            }
            if (v30 <= 0x10) {
              unint64_t v30 = 16;
            }
            unint64_t v35 = v33 + v30;
            if (v34 <= v35) {
              unint64_t v36 = 0;
            }
            else {
              unint64_t v36 = v35;
            }
            *((void *)v6 + 10) = v36;
            unint64_t v37 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v36);
            atomic_uint v38 = v6[29];
            if (v37 == 0x80000000 || v38 != 0)
            {
              unsigned int v40 = v38 + 1;
              v6[29] = v40;
              if (v40 >= v6[28])
              {
                if (*((unsigned char *)v6 + 104)) {
                  MEMORY[0x1997420B0](v6[23]);
                }
                v6[29] = 0;
              }
            }
            *((void *)v6 + 7) = v8;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v10);
          if (buf[16])
          {
            uint64_t v26 = *(void *)buf;
            unint64_t v16 = *(void *)&buf[8];
            unint64_t v27 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v28 = v27 - *(void *)buf;
            if (v27 < *(void *)buf) {
              goto LABEL_78;
            }
            unint64_t v29 = 0;
            if (v28 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v30 = 0;
            }
            else
            {
              unint64_t v30 = 0;
              if (v28 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v28) = 2871;
                unint64_t v29 = v16;
                unint64_t v30 = v28 + 2;
              }
            }
            goto LABEL_41;
          }
        }
        uint64_t v44 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          char v45 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_Translate";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v45;
          _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v46 = *((void *)this + 481);
        if (v46)
        {
          unint64_t v47 = *(unsigned char **)(v46 + 8);
          if (v47) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v47);
          }
        }
LABEL_27:
        __int16 v24 = v49;
        uint64_t v49 = 0;
        if (v24) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v24 + 1, v15);
        }
        __int16 v50 = 0;
        if (atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v6);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6, v15);
          WTF::fastFree(v41, v42);
        }
      }
    }
  }
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 8)) {
      return;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 8))
  {
LABEL_5:
    {
      uint64_t v4 = (WTF::StringImpl **)WebKit::appBoundDomains(void)::appBoundDomains;
      if (WebKit::appBoundDomains(void)::appBoundDomains)
      {
        WebKit::appBoundDomains(void)::appBoundDomains = 0;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
      }
    }
    else
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v5 = *(void **)(a1 + 16);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v29;
LABEL_10:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v29 != v7) {
        objc_enumerationMutation(v5);
      }
      double v9 = *(void **)(*((void *)&v28 + 1) + 8 * v8);
      {
        int v10 = WebKit::appBoundDomains(void)::appBoundDomains;
        if (WebKit::appBoundDomains(void)::appBoundDomains) {
          int v10 = *(_DWORD *)(WebKit::appBoundDomains(void)::appBoundDomains - 12);
        }
      }
      else
      {
        int v10 = 0;
        WebKit::appBoundDomains(void)::appBoundDomains = 0;
      }
      if (byte_1EB359B5D)
      {
        int v11 = qword_1EB359BB0;
        if (qword_1EB359BB0) {
          int v11 = *(_DWORD *)(qword_1EB359BB0 - 12);
        }
      }
      else
      {
        int v11 = 0;
        qword_1EB359BB0 = 0;
        byte_1EB359B5D = 1;
      }
      if ((v11 + v10) > 9) {
        goto LABEL_58;
      }
      if (![v9 hasSuffix:@":"]) {
        break;
      }
      MEMORY[0x19972EAD0](v24, objc_msgSend(v9, "substringToIndex:", objc_msgSend(v9, "length") - 1));
      unint64_t v14 = v24[0];
      if (!v24[0]) {
        break;
      }
      int v15 = *((_DWORD *)v24[0] + 1);
      if (v15)
      {
        if ((byte_1EB359B5D & 1) == 0)
        {
          qword_1EB359BB0 = 0;
          byte_1EB359B5D = 1;
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1EB359BB0, v24, v13, (uint64_t)&v26);
        unint64_t v14 = v24[0];
        v24[0] = 0;
        if (!v14) {
          goto LABEL_53;
        }
      }
      else
      {
        v24[0] = 0;
      }
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v15) {
          break;
        }
      }
      else
      {
        *(_DWORD *)v14 -= 2;
        if (!v15) {
          break;
        }
      }
LABEL_53:
      if (v6 == ++v8)
      {
        uint64_t v21 = [v5 countByEnumeratingWithState:&v28 objects:v32 count:16];
        uint64_t v6 = v21;
        if (v21) {
          goto LABEL_10;
        }
        goto LABEL_58;
      }
    }
    MEMORY[0x19972EAD0](v24, v9);
    MEMORY[0x19972E890](&v26, v24, 0);
    uint64_t v17 = v24[0];
    v24[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    WTF::URL::protocol((WTF::URL *)&v26);
    if (!v18) {
      WTF::URL::setProtocol();
    }
    if (v27)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v25, (const WTF::URL *)&v26);
      if (v25)
      {
        if (*((_DWORD *)v25 + 1) && (MEMORY[0x19972E990]() & 1) == 0)
        {
          {
            WebKit::appBoundDomains(void)::appBoundDomains = 0;
          }
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&WebKit::appBoundDomains(void)::appBoundDomains, &v25, (uint64_t)v24);
        }
        unint64_t v19 = v25;
        unsigned int v25 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
    }
    unint64_t v20 = v26;
    uint64_t v26 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    goto LABEL_53;
  }
LABEL_58:
  atomic_store(1u, WebKit::hasInitializedAppBoundDomains);
  unsigned __int8 v22 = atomic_load(WebKit::WebsiteDataStore::isAppBoundITPRelaxationEnabled);
  if (v22)
  {
    uint64_t v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v23 = &unk_1EE9D30B0;
    uint64_t v26 = v23;
    WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized((uint64_t *)&v26);
    if (v26) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
    }
  }
}

void sub_19875C068(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::handleResolvedDirectoriesAsynchronously(WebKit::WebsiteDataStoreConfiguration::Directories const&,BOOL)::$_0,void>::call(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = this;
  uint64_t v4 = (WTF::FileSystemImpl *)(this + 8);
  uint64_t v3 = *(void *)(this + 8);
  if (!v3 || !*(_DWORD *)(v3 + 4)) {
    goto LABEL_67;
  }
  WebCore::DatabaseTracker::trackerWithDatabasePath((uint64_t *)&v51, (WebCore::DatabaseTracker *)(this + 8), a2);
  WebCore::DatabaseTracker::deleteAllDatabasesImmediately(v51);
  uint64_t v6 = v51;
  unint64_t v51 = 0;
  if (!v6) {
    goto LABEL_66;
  }
  uint64_t v7 = *((void *)v6 + 16);
  if (v7) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v7, v5);
  }
  uint64_t v8 = *((void *)v6 + 15);
  if (!v8) {
    goto LABEL_20;
  }
  uint64_t v9 = *(unsigned int *)(v8 - 4);
  if (!v9)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v8 - 16), v5);
LABEL_20:
    uint64_t v13 = *((void *)v6 + 14);
    if (v13)
    {
      uint64_t v9 = *(unsigned int *)(v13 - 4);
      if (v9)
      {
        int v10 = (uint64_t *)*((void *)v6 + 14);
        while (1)
        {
          uint64_t v14 = *((unsigned int *)v10 + 6);
          if (v14) {
            break;
          }
          if (*v10 != -1) {
            goto LABEL_25;
          }
LABEL_29:
          v10 += 5;
          if (!--v9) {
            goto LABEL_33;
          }
        }
        if (v14 != 1) {
          goto LABEL_62;
        }
LABEL_25:
        int v15 = (WTF::StringImpl **)v10[4];
        if (!v15
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, (WTF::StringImpl *)v5), uint64_t v14 = *((unsigned int *)v10 + 6), v14 != -1))
        {
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v14])(&v52, v10);
        }
        *((_DWORD *)v10 + 6) = -1;
        goto LABEL_29;
      }
LABEL_33:
      WTF::fastFree((WTF *)(v13 - 16), v5);
    }
    unint64_t v16 = (WTF::StringImpl *)*((void *)v6 + 12);
    *((void *)v6 + ++*(_DWORD *)(this + 12) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = *((void *)v6 + 11);
    if (v17)
    {
      uint64_t v18 = *(unsigned int *)(v17 - 4);
      if (v18)
      {
        uint64_t v19 = *((void *)v6 + 11);
        do
        {
          unint64_t v20 = *(WTF::StringImpl **)v19;
          if (*(void *)v19 != -1)
          {
            uint64_t v21 = *(unsigned int **)(v19 + 8);
            *(void *)(v19 + 8) = 0;
            if (v21)
            {
              if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v21);
                WebCore::OriginLock::~OriginLock((WebCore::OriginLock *)v21);
                WTF::fastFree(v22, v23);
              }
              unint64_t v20 = *(WTF::StringImpl **)v19;
            }
            *(void *)uint64_t v19 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2) {
                WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v5);
              }
              else {
                *(_DWORD *)v20 -= 2;
              }
            }
          }
          v19 += 16;
          --v18;
        }
        while (v18);
      }
      WTF::fastFree((WTF *)(v17 - 16), v5);
    }
    WebCore::SQLiteDatabase::~SQLiteDatabase((WTF::StringImpl *)((char *)v6 + 24));
    int v10 = (uint64_t *)*((void *)v6 + 1);
    *((void *)v6 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
    if (!v10) {
      goto LABEL_65;
    }
    uint64_t v9 = *v10;
    if (!*v10) {
      goto LABEL_64;
    }
    uint64_t v25 = *(unsigned int *)(v9 - 4);
    if (!v25) {
      goto LABEL_63;
    }
    uint64_t v26 = *v10;
    while (1)
    {
      uint64_t v27 = *(unsigned int *)(v26 + 24);
      if (v27) {
        break;
      }
      if (*(void *)v26 != -1) {
        goto LABEL_58;
      }
LABEL_59:
      v26 += 40;
      if (!--v25) {
        goto LABEL_63;
      }
    }
    if (v27 != 1) {
      goto LABEL_62;
    }
LABEL_58:
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v27])(&v52, v26);
    *(_DWORD *)(v26 + 24) = -1;
    goto LABEL_59;
  }
  int v10 = (uint64_t *)*((void *)v6 + 15);
  while (1)
  {
    uint64_t v11 = *((unsigned int *)v10 + 6);
    if (v11) {
      break;
    }
    if (*v10 != -1) {
      goto LABEL_11;
    }
LABEL_15:
    v10 += 7;
    if (!--v9) {
      goto LABEL_19;
    }
  }
  if (v11 == 1)
  {
LABEL_11:
    unint64_t v12 = (WTF::StringImpl **)v10[4];
    if (!v12
      || (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v12, (WTF::StringImpl *)*((unsigned int *)v10 + 10)), uint64_t v11 = *((unsigned int *)v10 + 6), v11 != -1))
    {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v11])(&v52, v10);
    }
    *((_DWORD *)v10 + 6) = -1;
    goto LABEL_15;
  }
LABEL_62:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
  WTF::fastFree((WTF *)(v9 - 16), v24);
LABEL_64:
  WTF::fastFree((WTF *)v10, v24);
LABEL_65:
  WTF::fastFree(v6, v24);
LABEL_66:
  this = WTF::FileSystemImpl::deleteEmptyDirectory(v4, (const WTF::String *)v5);
LABEL_67:
  uint64_t v28 = *(void *)(v2 + 16);
  if (v28 && *(_DWORD *)(v28 + 4))
  {
    uint64_t v29 = v2 + 24;
    long long v30 = (void *)WTF::fastMalloc((WTF *)0x88);
    long long v31 = (WebCore::ApplicationCacheStorage *)MEMORY[0x199737830](v30, v2 + 16, v2 + 24);
    WebCore::ApplicationCacheStorage::deleteAllCaches(v31);
    if (*(_DWORD *)v30 == 1)
    {
      uint64_t v33 = v30[16];
      if (v33)
      {
        uint64_t v34 = *(unsigned int *)(v33 - 4);
        if (v34)
        {
          unint64_t v35 = (WTF::StringImpl **)v30[16];
          do
          {
            unint64_t v36 = *v35;
            if (*v35 != (WTF::StringImpl *)-1)
            {
              *unint64_t v35 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2) {
                  WTF::StringImpl::destroy(v36, v32);
                }
                else {
                  *(_DWORD *)v36 -= 2;
                }
              }
            }
            v35 += 2;
            --v34;
          }
          while (v34);
        }
        WTF::fastFree((WTF *)(v33 - 16), v32);
      }
      uint64_t v37 = v30[15];
      if (v37) {
        WTF::fastFree((WTF *)(v37 - 16), v32);
      }
      WebCore::SQLiteDatabase::~SQLiteDatabase((WebCore::SQLiteDatabase *)(v30 + 7));
      long long v39 = (WTF::StringImpl *)v30[3];
      v30[3] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v38);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
      unsigned int v40 = (WTF::StringImpl *)v30[2];
      v30[2] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v38);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      long long v41 = (WTF::StringImpl *)v30[1];
      v30[1] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v38);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      WTF::fastFree((WTF *)v30, v38);
    }
    else
    {
      --*(_DWORD *)v30;
    }
    if (*(void *)v29)
    {
      if (*(_DWORD *)(*(void *)v29 + 4))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v51, v42);
        uint64_t v44 = v51;
        unint64_t v51 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v43);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebCore::SQLiteFileSystem::deleteDatabaseFile((WebCore::SQLiteFileSystem *)&v51, v45);
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v2 + 16), v46);
    this = (uint64_t)v51;
    unint64_t v51 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v47);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  uint64_t v48 = *(unsigned int *)(v2 + 44);
  if (v48)
  {
    uint64_t v49 = *(WTF::FileSystemImpl **)(v2 + 32);
    uint64_t v50 = 8 * v48;
    do
    {
      this = WTF::FileSystemImpl::setExcludedFromBackup(v49, (const WTF::String *)1);
      uint64_t v49 = (WTF::FileSystemImpl *)((char *)v49 + 8);
      v50 -= 8;
    }
    while (v50);
  }
  return this;
}

uint64_t IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v736 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>((uint64_t)&v622, a1);
  if (!v624 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 0;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v620);
  if (!v621 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 1;
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((IPC::Decoder *)v3, (uint64_t)&v618);
  if (!v619 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 2;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v4, (uint64_t)&v615);
  if (!v617 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 3;
  }
  IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v3, (uint64_t)&v613);
  if (!v614 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 4;
  }
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v5, (uint64_t)&v610);
  if (!v612 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 5;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v6, (uint64_t)&v607);
  if (!v609 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 6;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v7, (uint64_t)&v604);
  if (!v606 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 7;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v8, (uint64_t)&v601);
  if (!v603 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 8;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v9, (uint64_t)&v598);
  if (!v600 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 9;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v10, (uint64_t)&v595);
  if (!v597 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 10;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v11, (uint64_t)&v592);
  if (!v594 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 11;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v12, (uint64_t)&v589);
  if (!v591 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 12;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v13, (uint64_t)&v586);
  if (!v588 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 13;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v14, (uint64_t)&v583);
  if (!v585 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 14;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v15, (uint64_t)&v580);
  if (!v582 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 15;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v16, (uint64_t)&v577);
  if (!v579 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 16;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v17, (uint64_t)&v574);
  if (!v576 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 17;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v18, (uint64_t)&v571);
  if (!v573 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 18;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v19, (uint64_t)&v568);
  if (!v570 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 19;
  }
  unsigned __int16 v518 = IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>((void *)v3);
  if (v518 <= 0xFFu)
  {
    unint64_t v311 = *(void *)v3;
    uint64_t v312 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v313 = *(void *)(v3 + 24);
    if (v313 && v312) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v313 + 16))(v313, v311);
    }
    if (*(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 21;
    }
  }
  unint64_t v20 = *(void *)(v3 + 8);
  unint64_t v21 = *(void *)v3;
  unint64_t v22 = ((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3;
  if (v20 < v22 || v20 - v22 <= 7)
  {
    unint64_t v367 = 0;
    uint64_t v368 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v369 = *(void *)(v3 + 24);
    if (v369)
    {
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v369 + 16))(v369);
        uint64_t v368 = *(void *)v3;
        unint64_t v367 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v367 = 0;
        uint64_t v368 = 0;
      }
    }
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v21 + v22);
    *(void *)(v3 + 16) = v23 + 1;
    if (v21)
    {
      unsigned int v517 = 0;
      uint64_t v24 = *v23;
      goto LABEL_26;
    }
    unint64_t v367 = v20;
    uint64_t v368 = 0;
  }
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v370 = *(void *)(v3 + 24);
  if (v370 && v367) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v370 + 16))(v370, v368);
  }
  uint64_t v24 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 22;
  }
  unsigned int v517 = 1;
LABEL_26:
  unint64_t v25 = *(void *)(v3 + 8);
  unint64_t v26 = *(void *)v3;
  unint64_t v27 = ((*(void *)(v3 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v3;
  if (v25 < v27 || v25 - v27 <= 3)
  {
    unint64_t v371 = 0;
    uint64_t v372 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v373 = *(void *)(v3 + 24);
    if (v373)
    {
      if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v373 + 16))(v373);
        uint64_t v372 = *(void *)v3;
        unint64_t v371 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v371 = 0;
        uint64_t v372 = 0;
      }
    }
  }
  else
  {
    uint64_t v28 = (int *)(v26 + v27);
    *(void *)(v3 + 16) = v28 + 1;
    if (v26)
    {
      unsigned int v516 = 0;
      int v515 = *v28;
      goto LABEL_30;
    }
    unint64_t v371 = v25;
    uint64_t v372 = 0;
  }
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v374 = *(void *)(v3 + 24);
  if (v374 && v371) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v374 + 16))(v374, v372);
  }
  int v515 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 23;
  }
  unsigned int v516 = 1;
LABEL_30:
  unint64_t v29 = *(void *)(v3 + 8);
  uint64_t v30 = *(void *)v3;
  unint64_t v31 = *(void *)(v3 + 16) - *(void *)v3;
  if (v29 <= v31)
  {
    unint64_t v314 = 0;
    uint64_t v315 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v316 = *(void *)(v3 + 24);
    if (v316)
    {
      if (v29)
      {
        (*(void (**)(uint64_t))(*(void *)v316 + 16))(v316);
        uint64_t v315 = *(void *)v3;
        unint64_t v314 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v314 = 0;
        uint64_t v315 = 0;
      }
    }
    goto LABEL_570;
  }
  unint64_t v32 = (unsigned __int8 *)(v30 + v31);
  *(void *)(v3 + 16) = v32 + 1;
  if (!v30)
  {
    unint64_t v314 = v29;
    uint64_t v315 = 0;
LABEL_570:
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v317 = *(void *)(v3 + 24);
    if (v317)
    {
      if (v314)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v317 + 16))(v317, v315, v314);
        uint64_t v30 = *(void *)v3;
        unint64_t v29 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v29 = 0;
        uint64_t v30 = 0;
      }
    }
    goto LABEL_571;
  }
  unsigned int v33 = *v32;
  if (v33 < 2)
  {
    BOOL v513 = v33 != 0;
    unsigned int v514 = 0;
    goto LABEL_34;
  }
LABEL_571:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v318 = *(void *)(v3 + 24);
  if (v318 && v29) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v318 + 16))(v318, v30);
  }
  BOOL v513 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 24;
  }
  unsigned int v514 = 1;
LABEL_34:
  unint64_t v34 = *(void *)(v3 + 8);
  uint64_t v35 = *(void *)v3;
  unint64_t v36 = *(void *)(v3 + 16) - *(void *)v3;
  if (v34 <= v36)
  {
    unint64_t v319 = 0;
    uint64_t v320 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v321 = *(void *)(v3 + 24);
    if (v321)
    {
      if (v34)
      {
        (*(void (**)(uint64_t))(*(void *)v321 + 16))(v321);
        uint64_t v320 = *(void *)v3;
        unint64_t v319 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v319 = 0;
        uint64_t v320 = 0;
      }
    }
    goto LABEL_575;
  }
  uint64_t v37 = (unsigned __int8 *)(v35 + v36);
  *(void *)(v3 + 16) = v37 + 1;
  if (!v35)
  {
    unint64_t v319 = v34;
    uint64_t v320 = 0;
LABEL_575:
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v322 = *(void *)(v3 + 24);
    if (v322)
    {
      if (v319)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v322 + 16))(v322, v320, v319);
        uint64_t v35 = *(void *)v3;
        unint64_t v34 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
    goto LABEL_576;
  }
  unsigned int v38 = *v37;
  if (v38 < 2)
  {
    BOOL v511 = v38 != 0;
    unsigned int v512 = 0;
    goto LABEL_38;
  }
LABEL_576:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v323 = *(void *)(v3 + 24);
  if (v323 && v34) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v323 + 16))(v323, v35);
  }
  BOOL v511 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 25;
  }
  unsigned int v512 = 1;
LABEL_38:
  unint64_t v39 = *(void *)(v3 + 8);
  uint64_t v40 = *(void *)v3;
  unint64_t v41 = *(void *)(v3 + 16) - *(void *)v3;
  if (v39 <= v41)
  {
    unint64_t v324 = 0;
    uint64_t v325 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v326 = *(void *)(v3 + 24);
    if (v326)
    {
      if (v39)
      {
        (*(void (**)(uint64_t))(*(void *)v326 + 16))(v326);
        uint64_t v325 = *(void *)v3;
        unint64_t v324 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v324 = 0;
        uint64_t v325 = 0;
      }
    }
    goto LABEL_580;
  }
  long long v42 = (unsigned __int8 *)(v40 + v41);
  *(void *)(v3 + 16) = v42 + 1;
  if (!v40)
  {
    unint64_t v324 = v39;
    uint64_t v325 = 0;
LABEL_580:
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v327 = *(void *)(v3 + 24);
    if (v327)
    {
      if (v324)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v327 + 16))(v327, v325, v324);
        uint64_t v40 = *(void *)v3;
        unint64_t v39 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v39 = 0;
        uint64_t v40 = 0;
      }
    }
    goto LABEL_581;
  }
  unsigned int v43 = *v42;
  if (v43 < 2)
  {
    BOOL v509 = v43 != 0;
    unsigned int v510 = 0;
    goto LABEL_42;
  }
LABEL_581:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v328 = *(void *)(v3 + 24);
  if (v328 && v39) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v328 + 16))(v328, v40);
  }
  BOOL v509 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 26;
  }
  unsigned int v510 = 1;
LABEL_42:
  unint64_t v44 = *(void *)(v3 + 8);
  uint64_t v45 = *(void *)v3;
  unint64_t v46 = *(void *)(v3 + 16) - *(void *)v3;
  if (v44 <= v46)
  {
    unint64_t v329 = 0;
    uint64_t v330 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v331 = *(void *)(v3 + 24);
    if (v331)
    {
      if (v44)
      {
        (*(void (**)(uint64_t))(*(void *)v331 + 16))(v331);
        uint64_t v330 = *(void *)v3;
        unint64_t v329 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v329 = 0;
        uint64_t v330 = 0;
      }
    }
    goto LABEL_585;
  }
  unint64_t v47 = (unsigned __int8 *)(v45 + v46);
  *(void *)(v3 + 16) = v47 + 1;
  if (!v45)
  {
    unint64_t v329 = v44;
    uint64_t v330 = 0;
LABEL_585:
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v332 = *(void *)(v3 + 24);
    if (v332)
    {
      if (v329)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v332 + 16))(v332, v330, v329);
        uint64_t v45 = *(void *)v3;
        unint64_t v44 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v44 = 0;
        uint64_t v45 = 0;
      }
    }
    goto LABEL_586;
  }
  unsigned int v48 = *v47;
  if (v48 < 2)
  {
    BOOL v507 = v48 != 0;
    unsigned int v508 = 0;
    goto LABEL_46;
  }
LABEL_586:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v333 = *(void *)(v3 + 24);
  if (v333 && v44) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v333 + 16))(v333, v45);
  }
  BOOL v507 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 27;
  }
  unsigned int v508 = 1;
LABEL_46:
  unint64_t v49 = *(void *)(v3 + 8);
  uint64_t v50 = *(void *)v3;
  unint64_t v51 = *(void *)(v3 + 16) - *(void *)v3;
  if (v49 <= v51)
  {
    unint64_t v334 = 0;
    uint64_t v335 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v336 = *(void *)(v3 + 24);
    if (v336)
    {
      if (v49)
      {
        (*(void (**)(uint64_t))(*(void *)v336 + 16))(v336);
        uint64_t v335 = *(void *)v3;
        unint64_t v334 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v334 = 0;
        uint64_t v335 = 0;
      }
    }
    goto LABEL_590;
  }
  char v52 = (unsigned __int8 *)(v50 + v51);
  *(void *)(v3 + 16) = v52 + 1;
  if (!v50)
  {
    unint64_t v334 = v49;
    uint64_t v335 = 0;
LABEL_590:
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v337 = *(void *)(v3 + 24);
    if (v337)
    {
      if (v334)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v337 + 16))(v337, v335, v334);
        uint64_t v50 = *(void *)v3;
        unint64_t v49 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v49 = 0;
        uint64_t v50 = 0;
      }
    }
    goto LABEL_591;
  }
  unsigned int v53 = *v52;
  if (v53 < 2)
  {
    BOOL v505 = v53 != 0;
    unsigned int v506 = 0;
    goto LABEL_50;
  }
LABEL_591:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v338 = *(void *)(v3 + 24);
  if (v338 && v49) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v338 + 16))(v338, v50);
  }
  BOOL v505 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 28;
  }
  unsigned int v506 = 1;
LABEL_50:
  unint64_t v54 = *(void *)(v3 + 8);
  uint64_t v55 = *(void *)v3;
  unint64_t v56 = *(void *)(v3 + 16) - *(void *)v3;
  if (v54 <= v56)
  {
    unint64_t v339 = 0;
    uint64_t v340 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v341 = *(void *)(v3 + 24);
    if (v341)
    {
      if (v54)
      {
        (*(void (**)(uint64_t))(*(void *)v341 + 16))(v341);
        uint64_t v340 = *(void *)v3;
        unint64_t v339 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v339 = 0;
        uint64_t v340 = 0;
      }
    }
    goto LABEL_595;
  }
  unint64_t v57 = (unsigned __int8 *)(v55 + v56);
  *(void *)(v3 + 16) = v57 + 1;
  if (!v55)
  {
    unint64_t v339 = v54;
    uint64_t v340 = 0;
LABEL_595:
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v342 = *(void *)(v3 + 24);
    if (v342)
    {
      if (v339)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v342 + 16))(v342, v340, v339);
        uint64_t v55 = *(void *)v3;
        unint64_t v54 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v54 = 0;
        uint64_t v55 = 0;
      }
    }
    goto LABEL_596;
  }
  unsigned int v58 = *v57;
  if (v58 < 2)
  {
    BOOL v503 = v58 != 0;
    unsigned int v504 = 0;
    goto LABEL_54;
  }
LABEL_596:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v343 = *(void *)(v3 + 24);
  if (v343 && v54) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v343 + 16))(v343, v55);
  }
  BOOL v503 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 29;
  }
  unsigned int v504 = 1;
LABEL_54:
  unint64_t v59 = *(void *)(v3 + 8);
  uint64_t v60 = *(void *)v3;
  unint64_t v61 = *(void *)(v3 + 16) - *(void *)v3;
  if (v59 <= v61)
  {
    unint64_t v344 = 0;
    uint64_t v345 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v346 = *(void *)(v3 + 24);
    if (v346)
    {
      if (v59)
      {
        (*(void (**)(uint64_t))(*(void *)v346 + 16))(v346);
        uint64_t v345 = *(void *)v3;
        unint64_t v344 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v344 = 0;
        uint64_t v345 = 0;
      }
    }
    goto LABEL_600;
  }
  __int16 v62 = (unsigned __int8 *)(v60 + v61);
  *(void *)(v3 + 16) = v62 + 1;
  if (!v60)
  {
    unint64_t v344 = v59;
    uint64_t v345 = 0;
LABEL_600:
    unint64_t v59 = 0;
    uint64_t v60 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v347 = *(void *)(v3 + 24);
    if (v347)
    {
      if (v344)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v347 + 16))(v347, v345, v344);
        uint64_t v60 = *(void *)v3;
        unint64_t v59 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v59 = 0;
        uint64_t v60 = 0;
      }
    }
    goto LABEL_601;
  }
  unsigned int v63 = *v62;
  if (v63 < 2)
  {
    BOOL v501 = v63 != 0;
    unsigned int v502 = 0;
    goto LABEL_58;
  }
LABEL_601:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v348 = *(void *)(v3 + 24);
  if (v348 && v59) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v348 + 16))(v348, v60);
  }
  BOOL v501 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 30;
  }
  unsigned int v502 = 1;
LABEL_58:
  unint64_t v64 = *(void *)(v3 + 8);
  uint64_t v65 = *(void *)v3;
  unint64_t v66 = *(void *)(v3 + 16) - *(void *)v3;
  if (v64 <= v66)
  {
    unint64_t v349 = 0;
    uint64_t v350 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v351 = *(void *)(v3 + 24);
    if (v351)
    {
      if (v64)
      {
        (*(void (**)(uint64_t))(*(void *)v351 + 16))(v351);
        uint64_t v350 = *(void *)v3;
        unint64_t v349 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v349 = 0;
        uint64_t v350 = 0;
      }
    }
    goto LABEL_605;
  }
  unsigned int v67 = (unsigned __int8 *)(v65 + v66);
  *(void *)(v3 + 16) = v67 + 1;
  if (!v65)
  {
    unint64_t v349 = v64;
    uint64_t v350 = 0;
LABEL_605:
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v352 = *(void *)(v3 + 24);
    if (v352)
    {
      if (v349)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v352 + 16))(v352, v350, v349);
        uint64_t v65 = *(void *)v3;
        unint64_t v64 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v64 = 0;
        uint64_t v65 = 0;
      }
    }
    goto LABEL_606;
  }
  unsigned int v68 = *v67;
  if (v68 < 2)
  {
    BOOL v499 = v68 != 0;
    unsigned int v500 = 0;
    goto LABEL_62;
  }
LABEL_606:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v353 = *(void *)(v3 + 24);
  if (v353 && v64) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v353 + 16))(v353, v65);
  }
  BOOL v499 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 31;
  }
  unsigned int v500 = 1;
LABEL_62:
  unint64_t v69 = *(void *)(v3 + 8);
  uint64_t v70 = *(void *)v3;
  unint64_t v71 = *(void *)(v3 + 16) - *(void *)v3;
  if (v69 <= v71)
  {
    unint64_t v354 = 0;
    uint64_t v355 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v356 = *(void *)(v3 + 24);
    if (v356)
    {
      if (v69)
      {
        (*(void (**)(uint64_t))(*(void *)v356 + 16))(v356);
        uint64_t v355 = *(void *)v3;
        unint64_t v354 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v354 = 0;
        uint64_t v355 = 0;
      }
    }
    goto LABEL_610;
  }
  int v72 = (unsigned __int8 *)(v70 + v71);
  *(void *)(v3 + 16) = v72 + 1;
  if (!v70)
  {
    unint64_t v354 = v69;
    uint64_t v355 = 0;
LABEL_610:
    unint64_t v69 = 0;
    uint64_t v70 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v357 = *(void *)(v3 + 24);
    if (v357)
    {
      if (v354)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v357 + 16))(v357, v355, v354);
        uint64_t v70 = *(void *)v3;
        unint64_t v69 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v69 = 0;
        uint64_t v70 = 0;
      }
    }
    goto LABEL_611;
  }
  unsigned int v73 = *v72;
  if (v73 < 2)
  {
    BOOL v497 = v73 != 0;
    unsigned int v498 = 0;
    goto LABEL_66;
  }
LABEL_611:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v358 = *(void *)(v3 + 24);
  if (v358 && v69) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v358 + 16))(v358, v70);
  }
  BOOL v497 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 32;
  }
  unsigned int v498 = 1;
LABEL_66:
  unint64_t v74 = *(void *)(v3 + 8);
  uint64_t v75 = *(void *)v3;
  unint64_t v76 = *(void *)(v3 + 16) - *(void *)v3;
  if (v74 <= v76)
  {
    unint64_t v359 = 0;
    uint64_t v360 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v361 = *(void *)(v3 + 24);
    if (v361)
    {
      if (v74)
      {
        (*(void (**)(uint64_t))(*(void *)v361 + 16))(v361);
        uint64_t v360 = *(void *)v3;
        unint64_t v359 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v359 = 0;
        uint64_t v360 = 0;
      }
    }
    goto LABEL_615;
  }
  char v77 = (unsigned __int8 *)(v75 + v76);
  *(void *)(v3 + 16) = v77 + 1;
  if (!v75)
  {
    unint64_t v359 = v74;
    uint64_t v360 = 0;
LABEL_615:
    unint64_t v74 = 0;
    uint64_t v75 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v362 = *(void *)(v3 + 24);
    if (v362)
    {
      if (v359)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v362 + 16))(v362, v360, v359);
        uint64_t v75 = *(void *)v3;
        unint64_t v74 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v74 = 0;
        uint64_t v75 = 0;
      }
    }
    goto LABEL_616;
  }
  unsigned int v78 = *v77;
  if (v78 < 2)
  {
    BOOL v495 = v78 != 0;
    unsigned int v496 = 0;
    goto LABEL_70;
  }
LABEL_616:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v363 = *(void *)(v3 + 24);
  if (v363 && v74) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v363 + 16))(v363, v75);
  }
  BOOL v495 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 33;
  }
  unsigned int v496 = 1;
LABEL_70:
  *(_WORD *)unint64_t v625 = 0;
  IPC::Decoder::operator>><BOOL>((void *)v3, v625);
  unsigned int v494 = v625[1];
  if (v625[1])
  {
    char v493 = v625[0];
  }
  else
  {
    uint64_t v364 = *(void *)v3;
    uint64_t v365 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v366 = *(void *)(v3 + 24);
    if (v366 && v365) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v366 + 16))(v366, v364);
    }
    char v493 = 0;
    if (*(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 34;
    }
  }
  unsigned __int16 v492 = IPC::ArgumentCoder<WebKit::WebExtensionContentWorldType,void>::decode<IPC::Decoder>((void *)v3);
  if (v492 <= 0xFFu)
  {
    uint64_t v375 = *(void *)v3;
    uint64_t v376 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v377 = *(void *)(v3 + 24);
    if (v377 && v376) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v377 + 16))(v377, v375);
    }
    if (*(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 38;
    }
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v566);
  if (!v567 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 39;
  }
  uint64_t v79 = IPC::Decoder::decode<unsigned int>((void *)v3);
  uint64_t v491 = v79 & 0xFF00000000;
  if ((v79 & 0xFF00000000) == 0 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 40;
  }
  uint64_t v80 = IPC::Decoder::decode<unsigned int>((void *)v3);
  uint64_t v490 = v80 & 0xFF00000000;
  if ((v80 & 0xFF00000000) == 0 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 41;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v564);
  if (!v565 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 42;
  }
  uint64_t v81 = IPC::Decoder::decode<unsigned int>((void *)v3);
  uint64_t v487 = v81 & 0xFF00000000;
  if ((v81 & 0xFF00000000) == 0 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 43;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v562);
  if (!v563 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 44;
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((IPC::Decoder *)v3, (uint64_t)&v560);
  if (!v561 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 45;
  }
  unint64_t v82 = *(void *)(v3 + 8);
  uint64_t v83 = *(void *)v3;
  unint64_t v84 = *(void *)(v3 + 16) - *(void *)v3;
  int v488 = v80;
  int v489 = v79;
  int v486 = v81;
  if (v82 <= v84)
  {
    unint64_t v378 = 0;
    uint64_t v379 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v380 = *(void *)(v3 + 24);
    if (v380)
    {
      if (v82)
      {
        (*(void (**)(uint64_t))(*(void *)v380 + 16))(v380);
        uint64_t v379 = *(void *)v3;
        unint64_t v378 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v378 = 0;
        uint64_t v379 = 0;
      }
    }
    goto LABEL_649;
  }
  unsigned int v85 = (unsigned __int8 *)(v83 + v84);
  *(void *)(v3 + 16) = v85 + 1;
  if (!v83)
  {
    unint64_t v378 = v82;
    uint64_t v379 = 0;
LABEL_649:
    unint64_t v82 = 0;
    uint64_t v83 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v381 = *(void *)(v3 + 24);
    if (v381)
    {
      if (v378)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v381 + 16))(v381, v379, v378);
        uint64_t v83 = *(void *)v3;
        unint64_t v82 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v82 = 0;
        uint64_t v83 = 0;
      }
    }
    goto LABEL_650;
  }
  unsigned int v86 = *v85;
  if (v86 < 2)
  {
    BOOL v484 = v86 != 0;
    unsigned int v485 = 0;
    goto LABEL_84;
  }
LABEL_650:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v382 = *(void *)(v3 + 24);
  if (v382 && v82) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v382 + 16))(v382, v83);
  }
  BOOL v484 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 46;
  }
  unsigned int v485 = 1;
LABEL_84:
  unint64_t v87 = *(void *)(v3 + 8);
  uint64_t v88 = *(void *)v3;
  unint64_t v89 = *(void *)(v3 + 16) - *(void *)v3;
  if (v87 <= v89)
  {
    unint64_t v383 = 0;
    uint64_t v384 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v385 = *(void *)(v3 + 24);
    if (v385)
    {
      if (v87)
      {
        (*(void (**)(uint64_t))(*(void *)v385 + 16))(v385);
        uint64_t v384 = *(void *)v3;
        unint64_t v383 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v383 = 0;
        uint64_t v384 = 0;
      }
    }
    goto LABEL_654;
  }
  unsigned int v90 = (unsigned __int8 *)(v88 + v89);
  *(void *)(v3 + 16) = v90 + 1;
  if (!v88)
  {
    unint64_t v383 = v87;
    uint64_t v384 = 0;
LABEL_654:
    unint64_t v87 = 0;
    uint64_t v88 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v386 = *(void *)(v3 + 24);
    if (v386)
    {
      if (v383)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v386 + 16))(v386, v384, v383);
        uint64_t v88 = *(void *)v3;
        unint64_t v87 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v87 = 0;
        uint64_t v88 = 0;
      }
    }
    goto LABEL_655;
  }
  unsigned int v91 = *v90;
  if (v91 < 2)
  {
    BOOL v482 = v91 != 0;
    unsigned int v483 = 0;
    goto LABEL_88;
  }
LABEL_655:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v387 = *(void *)(v3 + 24);
  if (v387 && v87) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v387 + 16))(v387, v88);
  }
  BOOL v482 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 47;
  }
  unsigned int v483 = 1;
LABEL_88:
  unint64_t v92 = *(void *)(v3 + 8);
  uint64_t v93 = *(void *)v3;
  unint64_t v94 = *(void *)(v3 + 16) - *(void *)v3;
  if (v92 <= v94)
  {
    unint64_t v388 = 0;
    uint64_t v389 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v390 = *(void *)(v3 + 24);
    if (v390)
    {
      if (v92)
      {
        (*(void (**)(uint64_t))(*(void *)v390 + 16))(v390);
        uint64_t v389 = *(void *)v3;
        unint64_t v388 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v388 = 0;
        uint64_t v389 = 0;
      }
    }
    goto LABEL_659;
  }
  unsigned int v95 = (unsigned __int8 *)(v93 + v94);
  *(void *)(v3 + 16) = v95 + 1;
  if (!v93)
  {
    unint64_t v388 = v92;
    uint64_t v389 = 0;
LABEL_659:
    unint64_t v92 = 0;
    uint64_t v93 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v391 = *(void *)(v3 + 24);
    if (v391)
    {
      if (v388)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v391 + 16))(v391, v389, v388);
        uint64_t v93 = *(void *)v3;
        unint64_t v92 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v92 = 0;
        uint64_t v93 = 0;
      }
    }
    goto LABEL_660;
  }
  unsigned int v96 = *v95;
  if (v96 < 2)
  {
    unsigned int v481 = 0;
    BOOL v479 = v96 != 0;
    goto LABEL_92;
  }
LABEL_660:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v392 = *(void *)(v3 + 24);
  if (v392 && v92) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v392 + 16))(v392, v93);
  }
  BOOL v479 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 48;
  }
  unsigned int v481 = 1;
LABEL_92:
  unint64_t v97 = *(void *)(v3 + 8);
  uint64_t v98 = *(void *)v3;
  unint64_t v99 = *(void *)(v3 + 16) - *(void *)v3;
  if (v97 <= v99)
  {
    unint64_t v393 = 0;
    uint64_t v394 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v395 = *(void *)(v3 + 24);
    if (v395)
    {
      if (v97)
      {
        (*(void (**)(uint64_t))(*(void *)v395 + 16))(v395);
        uint64_t v394 = *(void *)v3;
        unint64_t v393 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v393 = 0;
        uint64_t v394 = 0;
      }
    }
    goto LABEL_664;
  }
  unint64_t v100 = (unsigned __int8 *)(v98 + v99);
  *(void *)(v3 + 16) = v100 + 1;
  if (!v98)
  {
    unint64_t v393 = v97;
    uint64_t v394 = 0;
LABEL_664:
    unint64_t v97 = 0;
    uint64_t v98 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v396 = *(void *)(v3 + 24);
    if (v396)
    {
      if (v393)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v396 + 16))(v396, v394, v393);
        uint64_t v98 = *(void *)v3;
        unint64_t v97 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
      }
    }
    goto LABEL_665;
  }
  unsigned int v101 = *v100;
  if (v101 >= 2)
  {
LABEL_665:
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v397 = *(void *)(v3 + 24);
    if (v397 && v97) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v397 + 16))(v397, v98);
    }
    goto LABEL_666;
  }
  if (!v101)
  {
    unsigned int v521 = 0;
    uint64_t v480 = 0;
    goto LABEL_98;
  }
  IPC::ArgumentCoder<API::Data,void>::decode((uint64_t)v625, (void *)v3);
  if (v625[8])
  {
    unsigned int v521 = 0;
    uint64_t v480 = *(void *)v625;
    goto LABEL_98;
  }
LABEL_666:
  uint64_t v398 = *(void *)v3;
  uint64_t v399 = *(void *)(v3 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v400 = *(void *)(v3 + 24);
  if (v400 && v399) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v400 + 16))(v400, v398);
  }
  uint64_t v480 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 49;
  }
  unsigned int v521 = 1;
LABEL_98:
  unint64_t v102 = *(void *)(v3 + 8);
  unint64_t v103 = *(void *)v3;
  unint64_t v104 = ((*(void *)(v3 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v3;
  if (v102 < v104 || v102 - v104 <= 3)
  {
    unint64_t v401 = 0;
    uint64_t v402 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v403 = *(void *)(v3 + 24);
    if (v403)
    {
      if (v102)
      {
        (*(void (**)(uint64_t))(*(void *)v403 + 16))(v403);
        uint64_t v402 = *(void *)v3;
        unint64_t v401 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v401 = 0;
        uint64_t v402 = 0;
      }
    }
    goto LABEL_671;
  }
  char v105 = (int *)(v103 + v104);
  *(void *)(v3 + 16) = v105 + 1;
  if (!v103)
  {
    unint64_t v401 = v102;
    uint64_t v402 = 0;
LABEL_671:
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v404 = *(void *)(v3 + 24);
    if (v404 && v401) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v404 + 16))(v404, v402);
    }
LABEL_772:
    uint64_t v454 = *(void *)v3;
    uint64_t v455 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v456 = *(void *)(v3 + 24);
    if (v456 && v455) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v456 + 16))(v456, v454);
    }
    uint64_t v519 = 0;
    if (*(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 50;
    }
    unsigned int v520 = 1;
LABEL_145:
    IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>((IPC::Decoder *)v3, (uint64_t)&cf);
    if (!v559 && *(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 51;
    }
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v132, (uint64_t)&v555);
    if (!v557 && *(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 53;
    }
    IPC::Decoder::decode<WebCore::ScreenProperties>((IPC::Decoder *)v3, &v552);
    if (!v554 && *(_DWORD *)(v3 + 72) == -1) {
      *(_DWORD *)(v3 + 72) = 54;
    }
    unint64_t v133 = *(void *)(v3 + 8);
    uint64_t v134 = *(void *)v3;
    unint64_t v135 = *(void *)(v3 + 16) - *(void *)v3;
    if (v133 <= v135)
    {
      unint64_t v405 = 0;
      uint64_t v406 = 0;
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v407 = *(void *)(v3 + 24);
      if (v407)
      {
        if (v133)
        {
          (*(void (**)(uint64_t))(*(void *)v407 + 16))(v407);
          uint64_t v406 = *(void *)v3;
          unint64_t v405 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v405 = 0;
          uint64_t v406 = 0;
        }
      }
    }
    else
    {
      int v136 = (unsigned __int8 *)(v134 + v135);
      *(void *)(v3 + 16) = v136 + 1;
      if (v134)
      {
        unsigned int v137 = *v136;
        if (v137 < 2)
        {
          BOOL v477 = v137 != 0;
          unsigned int v478 = 0;
          goto LABEL_152;
        }
LABEL_682:
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        uint64_t v409 = *(void *)(v3 + 24);
        if (v409 && v133) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v409 + 16))(v409, v134);
        }
        BOOL v477 = 0;
        if (*(_DWORD *)(v3 + 72) == -1) {
          *(_DWORD *)(v3 + 72) = 55;
        }
        unsigned int v478 = 1;
LABEL_152:
        unint64_t v138 = *(void *)(v3 + 8);
        unsigned int v139 = *(char **)v3;
        unint64_t v140 = *(void *)(v3 + 16) - *(void *)v3;
        if (v138 <= v140)
        {
          unint64_t v410 = 0;
          uint64_t v411 = 0;
          *(void *)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
          uint64_t v412 = *(void *)(v3 + 24);
          if (v412)
          {
            if (v138)
            {
              (*(void (**)(uint64_t))(*(void *)v412 + 16))(v412);
              uint64_t v411 = *(void *)v3;
              unint64_t v410 = *(void *)(v3 + 8);
            }
            else
            {
              unint64_t v410 = 0;
              uint64_t v411 = 0;
            }
          }
        }
        else
        {
          int v141 = &v139[v140];
          *(void *)(v3 + 16) = v141 + 1;
          if (v139)
          {
            unsigned int v142 = *v141;
            if (v142 < 2)
            {
              if (!v142)
              {
                v625[0] = 0;
                LOBYTE(v638) = 0;
                std::__optional_move_base<WebKit::WebProcessDataStoreParameters,false>::__optional_move_base[abi:sn180100](&v719, (uint64_t)v625);
                unsigned __int8 v735 = 1;
                if (!(_BYTE)v638) {
                  goto LABEL_157;
                }
                goto LABEL_293;
              }
              IPC::Decoder::decode<WebKit::WebProcessDataStoreParameters>((IPC::Decoder *)v3, v625);
              if ((_BYTE)v638)
              {
                long long v215 = *(_OWORD *)&v625[8];
                memset(&v625[8], 0, 24);
                long long v720 = v215;
                long long v216 = v627;
                long long v627 = 0u;
                long long v723 = v216;
                long long v217 = v629;
                long long v218 = v630;
                long long v629 = 0u;
                long long v630 = 0u;
                BOOL v719 = *(WTF::StringImpl ***)v625;
                uint64_t v721 = *(void *)&v625[24];
                int v722 = v626;
                char v724 = v628;
                long long v725 = v217;
                long long v726 = v218;
                LOBYTE(v727) = 0;
                char v728 = 0;
                if ((_BYTE)v632)
                {
                  uint64_t v457 = v631;
                  uint64_t v631 = 0;
                  uint64_t v727 = v457;
                  char v728 = 1;
                }
                LOBYTE(v729) = 0;
                char v730 = 0;
                if ((_BYTE)v634)
                {
                  uint64_t v458 = v633;
                  uint64_t v633 = 0;
                  uint64_t v729 = v458;
                  char v730 = 1;
                }
                LOBYTE(v73WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = 0;
                char v732 = 0;
                if ((_BYTE)v636)
                {
                  uint64_t v459 = v635;
                  uint64_t v635 = 0;
                  uint64_t v731 = v459;
                  char v732 = 1;
                }
                char v733 = v637;
                char v734 = 1;
                unsigned __int8 v735 = 1;
LABEL_293:
                WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)v625);
                goto LABEL_157;
              }
LABEL_688:
              LOBYTE(v719) = 0;
              unsigned __int8 v735 = 0;
LABEL_157:
              if (!v735)
              {
                unsigned int v139 = *(char **)v3;
                uint64_t v415 = *(void *)(v3 + 8);
                *(void *)uint64_t v3 = 0;
                *(void *)(v3 + 8) = 0;
                uint64_t v416 = *(void *)(v3 + 24);
                if (!v416
                  || !v415
                  || ((*(void (**)(uint64_t, char *))(*(void *)v416 + 16))(v416, v139), !v735))
                {
                  if (*(_DWORD *)(v3 + 72) == -1) {
                    *(_DWORD *)(v3 + 72) = 60;
                  }
                }
              }
              IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v139, (uint64_t)&v549);
              if (!v551 && *(_DWORD *)(v3 + 72) == -1) {
                *(_DWORD *)(v3 + 72) = 61;
              }
              IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>((IPC::Decoder *)v3, (uint64_t)&v546);
              if (!v548 && *(_DWORD *)(v3 + 72) == -1) {
                *(_DWORD *)(v3 + 72) = 62;
              }
              IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>((IPC::Decoder *)v3, (uint64_t)&v543);
              if (!v545 && *(_DWORD *)(v3 + 72) == -1) {
                *(_DWORD *)(v3 + 72) = 63;
              }
              unint64_t v143 = *(void *)(v3 + 8);
              uint64_t v144 = *(void *)v3;
              unint64_t v145 = *(void *)(v3 + 16) - *(void *)v3;
              if (v143 <= v145)
              {
                unint64_t v417 = 0;
                uint64_t v418 = 0;
                *(void *)uint64_t v3 = 0;
                *(void *)(v3 + 8) = 0;
                uint64_t v419 = *(void *)(v3 + 24);
                if (v419)
                {
                  if (v143)
                  {
                    (*(void (**)(uint64_t))(*(void *)v419 + 16))(v419);
                    uint64_t v418 = *(void *)v3;
                    unint64_t v417 = *(void *)(v3 + 8);
                  }
                  else
                  {
                    unint64_t v417 = 0;
                    uint64_t v418 = 0;
                  }
                }
              }
              else
              {
                char v146 = (unsigned __int8 *)(v144 + v145);
                *(void *)(v3 + 16) = v146 + 1;
                if (v144)
                {
                  unsigned int v147 = *v146;
                  if (v147 < 2)
                  {
                    BOOL v474 = v147 != 0;
                    unsigned int v475 = 0;
                    goto LABEL_165;
                  }
LABEL_700:
                  *(void *)uint64_t v3 = 0;
                  *(void *)(v3 + 8) = 0;
                  uint64_t v421 = *(void *)(v3 + 24);
                  if (v421 && v143) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v421 + 16))(v421, v144);
                  }
                  BOOL v474 = 0;
                  if (*(_DWORD *)(v3 + 72) == -1) {
                    *(_DWORD *)(v3 + 72) = 65;
                  }
                  unsigned int v475 = 1;
LABEL_165:
                  unint64_t v148 = *(void *)(v3 + 8);
                  int v149 = *(char **)v3;
                  unint64_t v150 = *(void *)(v3 + 16) - *(void *)v3;
                  if (v148 <= v150)
                  {
                    unint64_t v422 = 0;
                    uint64_t v423 = 0;
                    *(void *)uint64_t v3 = 0;
                    *(void *)(v3 + 8) = 0;
                    uint64_t v424 = *(void *)(v3 + 24);
                    if (v424)
                    {
                      if (v148)
                      {
                        (*(void (**)(uint64_t))(*(void *)v424 + 16))(v424);
                        uint64_t v423 = *(void *)v3;
                        unint64_t v422 = *(void *)(v3 + 8);
                      }
                      else
                      {
                        unint64_t v422 = 0;
                        uint64_t v423 = 0;
                      }
                    }
                  }
                  else
                  {
                    unsigned __int8 v151 = &v149[v150];
                    *(void *)(v3 + 16) = v151 + 1;
                    if (v149)
                    {
                      unsigned int v152 = *v151;
                      if (v152 < 2)
                      {
                        BOOL v472 = v152 != 0;
                        unsigned int v473 = 0;
                        goto LABEL_169;
                      }
LABEL_705:
                      *(void *)uint64_t v3 = 0;
                      *(void *)(v3 + 8) = 0;
                      uint64_t v426 = *(void *)(v3 + 24);
                      if (v426 && v148) {
                        (*(void (**)(uint64_t, char *))(*(void *)v426 + 16))(v426, v149);
                      }
                      BOOL v472 = 0;
                      if (*(_DWORD *)(v3 + 72) == -1) {
                        *(_DWORD *)(v3 + 72) = 66;
                      }
                      unsigned int v473 = 1;
LABEL_169:
                      IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v3, v149, (uint64_t)&v540);
                      if (!v542 && *(_DWORD *)(v3 + 72) == -1) {
                        *(_DWORD *)(v3 + 72) = 67;
                      }
                      unint64_t v153 = *(void *)(v3 + 8);
                      uint64_t v154 = *(void *)v3;
                      unint64_t v155 = *(void *)(v3 + 16) - *(void *)v3;
                      if (v153 <= v155)
                      {
                        unint64_t v427 = 0;
                        uint64_t v428 = 0;
                        *(void *)uint64_t v3 = 0;
                        *(void *)(v3 + 8) = 0;
                        uint64_t v429 = *(void *)(v3 + 24);
                        if (v429)
                        {
                          if (v153)
                          {
                            (*(void (**)(uint64_t))(*(void *)v429 + 16))(v429);
                            uint64_t v428 = *(void *)v3;
                            unint64_t v427 = *(void *)(v3 + 8);
                          }
                          else
                          {
                            unint64_t v427 = 0;
                            uint64_t v428 = 0;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v156 = (unsigned __int8 *)(v154 + v155);
                        *(void *)(v3 + 16) = v156 + 1;
                        if (v154)
                        {
                          unsigned int v157 = *v156;
                          if (v157 < 2)
                          {
                            BOOL v470 = v157 != 0;
                            unsigned int v471 = 0;
                            goto LABEL_174;
                          }
LABEL_712:
                          *(void *)uint64_t v3 = 0;
                          *(void *)(v3 + 8) = 0;
                          uint64_t v431 = *(void *)(v3 + 24);
                          if (v431 && v153) {
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v431 + 16))(v431, v154);
                          }
                          BOOL v470 = 0;
                          if (*(_DWORD *)(v3 + 72) == -1) {
                            *(_DWORD *)(v3 + 72) = 69;
                          }
                          unsigned int v471 = 1;
LABEL_174:
                          unint64_t v158 = *(void *)(v3 + 8);
                          uint64_t v159 = *(void *)v3;
                          unint64_t v160 = *(void *)(v3 + 16) - *(void *)v3;
                          if (v158 <= v160)
                          {
                            unint64_t v432 = 0;
                            uint64_t v433 = 0;
                            *(void *)uint64_t v3 = 0;
                            *(void *)(v3 + 8) = 0;
                            uint64_t v434 = *(void *)(v3 + 24);
                            if (v434)
                            {
                              if (v158)
                              {
                                (*(void (**)(uint64_t))(*(void *)v434 + 16))(v434);
                                uint64_t v433 = *(void *)v3;
                                unint64_t v432 = *(void *)(v3 + 8);
                              }
                              else
                              {
                                unint64_t v432 = 0;
                                uint64_t v433 = 0;
                              }
                            }
                          }
                          else
                          {
                            unint64_t v161 = (unsigned __int8 *)(v159 + v160);
                            *(void *)(v3 + 16) = v161 + 1;
                            if (v159)
                            {
                              unsigned int v162 = *v161;
                              if (v162 < 2)
                              {
                                BOOL v468 = v162 != 0;
                                unsigned int v469 = 0;
                                goto LABEL_178;
                              }
LABEL_717:
                              *(void *)uint64_t v3 = 0;
                              *(void *)(v3 + 8) = 0;
                              uint64_t v436 = *(void *)(v3 + 24);
                              if (v436 && v158) {
                                (*(void (**)(uint64_t, uint64_t))(*(void *)v436 + 16))(v436, v159);
                              }
                              BOOL v468 = 0;
                              if (*(_DWORD *)(v3 + 72) == -1) {
                                *(_DWORD *)(v3 + 72) = 70;
                              }
                              unsigned int v469 = 1;
LABEL_178:
                              uint64_t v108 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)v3);
                              unsigned __int16 v476 = v108;
                              if ((unsigned __int16)v108 <= 0xFFu && *(_DWORD *)(v3 + 72) == -1) {
                                *(_DWORD *)(v3 + 72) = 71;
                              }
                              unint64_t v163 = *(void *)(v3 + 8);
                              uint64_t v164 = *(void *)v3;
                              unint64_t v165 = *(void *)(v3 + 16) - *(void *)v3;
                              if (v163 <= v165)
                              {
                                unint64_t v437 = 0;
                                uint64_t v438 = 0;
                                *(void *)uint64_t v3 = 0;
                                *(void *)(v3 + 8) = 0;
                                uint64_t v439 = *(void *)(v3 + 24);
                                if (v439)
                                {
                                  if (v163)
                                  {
                                    (*(void (**)(uint64_t))(*(void *)v439 + 16))(v439);
                                    uint64_t v438 = *(void *)v3;
                                    unint64_t v437 = *(void *)(v3 + 8);
                                  }
                                  else
                                  {
                                    unint64_t v437 = 0;
                                    uint64_t v438 = 0;
                                  }
                                }
                              }
                              else
                              {
                                char v166 = (unsigned __int8 *)(v164 + v165);
                                *(void *)(v3 + 16) = v166 + 1;
                                if (v164)
                                {
                                  unsigned int v167 = *v166;
                                  if (v167 < 2)
                                  {
                                    BOOL v466 = v167 != 0;
                                    unsigned int v467 = 0;
                                    goto LABEL_183;
                                  }
LABEL_724:
                                  *(void *)uint64_t v3 = 0;
                                  *(void *)(v3 + 8) = 0;
                                  uint64_t v108 = *(void *)(v3 + 24);
                                  if (v108 && v163) {
                                    uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v108 + 16))(v108, v164);
                                  }
                                  BOOL v466 = 0;
                                  if (*(_DWORD *)(v3 + 72) == -1) {
                                    *(_DWORD *)(v3 + 72) = 72;
                                  }
                                  unsigned int v467 = 1;
LABEL_183:
                                  unint64_t v168 = *(void *)(v3 + 8);
                                  uint64_t v169 = *(void *)v3;
                                  unint64_t v170 = ((*(void *)(v3 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v3;
                                  if (v168 < v170 || v168 - v170 <= 3)
                                  {
                                    unint64_t v441 = 0;
                                    uint64_t v442 = 0;
                                    *(void *)uint64_t v3 = 0;
                                    *(void *)(v3 + 8) = 0;
                                    uint64_t v443 = *(void *)(v3 + 24);
                                    if (v443)
                                    {
                                      if (v168)
                                      {
                                        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v443 + 16))(v443, v169, v168);
                                        uint64_t v442 = *(void *)v3;
                                        unint64_t v441 = *(void *)(v3 + 8);
                                      }
                                      else
                                      {
                                        unint64_t v441 = 0;
                                        uint64_t v442 = 0;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    int v171 = (int *)(v169 + v170);
                                    *(void *)(v3 + 16) = v171 + 1;
                                    if (v169)
                                    {
                                      int v172 = *v171;
                                      v523 = 0;
                                      if (!v172)
                                      {
                                        uint64_t v2 = 0;
LABEL_283:
                                        int v214 = 0;
                                        goto LABEL_305;
                                      }
                                      int v173 = 0;
                                      while (1)
                                      {
                                        char v174 = *(WTF::StringImpl **)(v3 + 8);
                                        unsigned int v109 = *(char **)v3;
                                        unint64_t v175 = ((*(void *)(v3 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v3;
                                        if ((unint64_t)v174 >= v175 && (unint64_t)v174 - v175 > 3)
                                        {
                                          unsigned int v177 = (unsigned int *)&v109[v175];
                                          uint64_t v178 = (uint64_t)&v109[v175 + 4];
                                          *(void *)(v3 + 16) = v178;
                                          if (v109)
                                          {
                                            char v179 = 0;
                                            unsigned int v180 = *v177;
                                            goto LABEL_195;
                                          }
                                        }
                                        else
                                        {
                                          *(void *)uint64_t v3 = 0;
                                          *(void *)(v3 + 8) = 0;
                                          uint64_t v206 = *(void *)(v3 + 24);
                                          if (!v206 || !v174) {
                                            goto LABEL_248;
                                          }
                                          (*(void (**)(uint64_t))(*(void *)v206 + 16))(v206);
                                          unsigned int v109 = *(char **)v3;
                                          char v174 = *(WTF::StringImpl **)(v3 + 8);
                                        }
                                        uint64_t v212 = *(void *)(v3 + 24);
                                        *(void *)uint64_t v3 = 0;
                                        *(void *)(v3 + 8) = 0;
                                        if (v212) {
                                          BOOL v213 = v174 == 0;
                                        }
                                        else {
                                          BOOL v213 = 1;
                                        }
                                        if (v213)
                                        {
LABEL_248:
                                          unsigned int v180 = 0;
                                          char v207 = 0;
                                          unsigned int v109 = 0;
                                          char v179 = 1;
LABEL_249:
                                          *(void *)uint64_t v3 = 0;
                                          *(void *)(v3 + 8) = 0;
                                          uint64_t v208 = *(void *)(v3 + 24);
                                          if (v208 && v207)
                                          {
                                            (*(void (**)(uint64_t, char *, WTF::StringImpl *))(*(void *)v208 + 16))(v208, v109, v207);
                                            unsigned int v184 = 0;
                                            unsigned int v109 = *(char **)v3;
                                            char v174 = *(WTF::StringImpl **)(v3 + 8);
                                          }
                                          else
                                          {
                                            char v174 = 0;
                                            unsigned int v109 = 0;
                                            unsigned int v184 = 0;
                                          }
                                          goto LABEL_251;
                                        }
                                        uint64_t v108 = (*(uint64_t (**)(uint64_t, char *, WTF::StringImpl *))(*(void *)v212 + 16))(v212, v109, v174);
                                        unsigned int v180 = 0;
                                        unsigned int v109 = *(char **)v3;
                                        char v174 = *(WTF::StringImpl **)(v3 + 8);
                                        char v179 = 1;
                                        uint64_t v178 = *(void *)(v3 + 16);
LABEL_195:
                                        unint64_t v181 = v178 - (void)v109;
                                        if ((unint64_t)v174 <= v181)
                                        {
                                          char v207 = 0;
                                          uint64_t v211 = *(void *)(v3 + 24);
                                          *(void *)uint64_t v3 = 0;
                                          *(void *)(v3 + 8) = 0;
                                          if (v174 && v211)
                                          {
                                            (*(void (**)(uint64_t))(*(void *)v211 + 16))(v211);
                                            unsigned int v109 = *(char **)v3;
                                            char v207 = *(WTF::StringImpl **)(v3 + 8);
                                          }
                                          else
                                          {
                                            unsigned int v109 = 0;
                                          }
                                          goto LABEL_249;
                                        }
                                        unint64_t v182 = &v109[v181];
                                        uint64_t v183 = (uint64_t)&v109[v181 + 1];
                                        *(void *)(v3 + 16) = v183;
                                        if (!v109)
                                        {
                                          char v207 = v174;
                                          goto LABEL_249;
                                        }
                                        unsigned int v184 = *v182;
                                        if (v184 < 2)
                                        {
                                          int v185 = 0;
                                          int v186 = 1;
                                          goto LABEL_199;
                                        }
LABEL_251:
                                        *(void *)uint64_t v3 = 0;
                                        *(void *)(v3 + 8) = 0;
                                        uint64_t v209 = *(void *)(v3 + 24);
                                        if (!v209 || !v174)
                                        {
                                          unint64_t v115 = 0;
                                          unsigned int v109 = 0;
                                          goto LABEL_295;
                                        }
                                        uint64_t v108 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v209 + 16))(v209, v109);
                                        int v186 = 0;
                                        unsigned int v109 = *(char **)v3;
                                        char v174 = *(WTF::StringImpl **)(v3 + 8);
                                        int v185 = 1;
                                        uint64_t v183 = *(void *)(v3 + 16);
LABEL_199:
                                        if (!v184) {
                                          int v186 = 0;
                                        }
                                        unint64_t v187 = v183 - (void)v109;
                                        if ((unint64_t)v174 <= v187)
                                        {
                                          unint64_t v115 = 0;
                                          uint64_t v460 = *(void *)(v3 + 24);
                                          *(void *)uint64_t v3 = 0;
                                          *(void *)(v3 + 8) = 0;
                                          if (v174 && v460)
                                          {
                                            (*(void (**)(uint64_t))(*(void *)v460 + 16))(v460);
                                            unsigned int v109 = *(char **)v3;
                                            unint64_t v115 = *(void *)(v3 + 8);
                                          }
                                          else
                                          {
                                            unsigned int v109 = 0;
                                          }
LABEL_295:
                                          *(void *)uint64_t v3 = 0;
                                          *(void *)(v3 + 8) = 0;
                                          uint64_t v108 = *(void *)(v3 + 24);
                                          if (v108) {
                                            goto LABEL_832;
                                          }
                                          goto LABEL_296;
                                        }
                                        unint64_t v115 = (unint64_t)&v109[v187];
                                        *(void *)(v3 + 16) = v115 + 1;
                                        if (!v109)
                                        {
                                          unint64_t v115 = (unint64_t)v174;
                                          goto LABEL_295;
                                        }
                                        unsigned int v188 = *(unsigned __int8 *)v115;
                                        if (v188 > 1) {
                                          goto LABEL_297;
                                        }
                                        if ((v179 & 1) != 0 || v185) {
                                          goto LABEL_831;
                                        }
                                        if (v186) {
                                          uint64_t v189 = 0x100000000;
                                        }
                                        else {
                                          uint64_t v189 = 0;
                                        }
                                        uint64_t v108 = (uint64_t)IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v3, v625);
                                        if (v625[8]
                                          || (unsigned int v109 = *(char **)v3,
                                              uint64_t v210 = *(void *)(v3 + 8),
                                              *(void *)uint64_t v3 = 0,
                                              *(void *)(v3 + 8) = 0,
                                              (uint64_t v108 = *(void *)(v3 + 24)) != 0)
                                          && v210
                                          && (uint64_t v108 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v108 + 16))(v108, v109), v625[8]))
                                        {
                                          if (v180 || !HIDWORD(v189))
                                          {
                                            if (v180 | v188 | HIDWORD(v189))
                                            {
LABEL_215:
                                              char v190 = v523;
                                              if (v523
                                                || (WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::expand((uint64_t *)&v523),
                                                    (char v190 = v523) != 0))
                                              {
                                                int v191 = *((_DWORD *)v190 - 2);
                                              }
                                              else
                                              {
                                                int v191 = 0;
                                              }
                                              unint64_t v192 = 0;
                                              int v193 = 1;
                                              unsigned int v194 = v180;
                                              while (1)
                                              {
                                                unsigned int v195 = v194 & v191;
                                                uint64_t v196 = (char *)v190 + 16 * v195;
                                                int v197 = *(_DWORD *)v196;
                                                int v198 = v196[4];
                                                if (!(*(_DWORD *)v196 | v198) && !v196[5]) {
                                                  break;
                                                }
                                                if (v197 == v180 && v198 == HIDWORD(v189))
                                                {
                                                  uint64_t v108 = v196[5];
                                                  if (v108 == (v188 != 0)) {
                                                    goto LABEL_255;
                                                  }
                                                }
                                                if (v197) {
                                                  BOOL v200 = 1;
                                                }
                                                else {
                                                  BOOL v200 = v198 == 0;
                                                }
                                                if (!v200 && v196[5]) {
                                                  unint64_t v192 = (char *)v190 + 16 * v195;
                                                }
                                                unsigned int v194 = v193 + v195;
                                                ++v193;
                                              }
                                              if (v192)
                                              {
                                                *(_OWORD *)unint64_t v192 = xmmword_1994F5DD0;
                                                --*((_DWORD *)v523 - 4);
                                                uint64_t v196 = v192;
                                              }
                                              *(void *)uint64_t v196 = (v189 | v180) & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)(v188 != 0) << 40);
                                              WebCore::Color::Color();
                                              uint64_t v108 = WebCore::Color::operator=();
                                              if ((*(void *)v532 & 0x8000000000000) != 0)
                                              {
                                                uint64_t v108 = *(void *)v532 & 0xFFFFFFFFFFFFLL;
                                                if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v532 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                                                {
                                                  atomic_store(1u, (unsigned int *)v108);
                                                  uint64_t v108 = WTF::fastFree((WTF *)v108, v109);
                                                }
                                              }
                                              char v201 = v523;
                                              if (v523) {
                                                int v202 = *((_DWORD *)v523 - 3) + 1;
                                              }
                                              else {
                                                int v202 = 1;
                                              }
                                              *((_DWORD *)v523 - 3) = v202;
                                              uint64_t v203 = (*((_DWORD *)v201 - 4) + v202);
                                              unint64_t v204 = *((unsigned int *)v201 - 1);
                                              if (v204 > 0x400)
                                              {
                                                if (v204 <= 2 * v203) {
LABEL_242:
                                                }
                                                  uint64_t v108 = WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::expand((uint64_t *)&v523);
                                              }
                                              else if (3 * v204 <= 4 * v203)
                                              {
                                                goto LABEL_242;
                                              }
                                              char v205 = 1;
                                              goto LABEL_256;
                                            }
                                          }
                                          else if (!v188)
                                          {
                                            goto LABEL_215;
                                          }
                                        }
LABEL_255:
                                        char v205 = 0;
                                        v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_256:
                                        if (v625[8])
                                        {
                                          if ((*(void *)v625 & 0x8000000000000) != 0)
                                          {
                                            uint64_t v108 = *(void *)v625 & 0xFFFFFFFFFFFFLL;
                                            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v625 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                                            {
                                              atomic_store(1u, (unsigned int *)v108);
                                              uint64_t v108 = WTF::fastFree((WTF *)v108, v109);
                                            }
                                          }
                                        }
                                        if ((v205 & 1) == 0) {
                                          goto LABEL_299;
                                        }
                                        if (++v173 == v172)
                                        {
                                          uint64_t v2 = (uint64_t)v523;
                                          goto LABEL_283;
                                        }
                                      }
                                    }
                                    unint64_t v441 = v168;
                                    uint64_t v442 = 0;
                                  }
                                  uint64_t v2 = 0;
                                  *(void *)uint64_t v3 = 0;
                                  *(void *)(v3 + 8) = 0;
                                  uint64_t v444 = *(void *)(v3 + 24);
                                  if (v444)
                                  {
                                    if (v441) {
                                      (*(void (**)(uint64_t, uint64_t))(*(void *)v444 + 16))(v444, v442);
                                    }
                                    uint64_t v2 = 0;
                                  }
                                  goto LABEL_301;
                                }
                                unint64_t v437 = v163;
                                uint64_t v438 = 0;
                              }
                              unint64_t v163 = 0;
                              uint64_t v164 = 0;
                              *(void *)uint64_t v3 = 0;
                              *(void *)(v3 + 8) = 0;
                              uint64_t v440 = *(void *)(v3 + 24);
                              if (v440)
                              {
                                if (v437)
                                {
                                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v440 + 16))(v440, v438, v437);
                                  uint64_t v164 = *(void *)v3;
                                  unint64_t v163 = *(void *)(v3 + 8);
                                }
                                else
                                {
                                  unint64_t v163 = 0;
                                  uint64_t v164 = 0;
                                }
                              }
                              goto LABEL_724;
                            }
                            unint64_t v432 = v158;
                            uint64_t v433 = 0;
                          }
                          unint64_t v158 = 0;
                          uint64_t v159 = 0;
                          *(void *)uint64_t v3 = 0;
                          *(void *)(v3 + 8) = 0;
                          uint64_t v435 = *(void *)(v3 + 24);
                          if (v435)
                          {
                            if (v432)
                            {
                              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v435 + 16))(v435, v433, v432);
                              uint64_t v159 = *(void *)v3;
                              unint64_t v158 = *(void *)(v3 + 8);
                            }
                            else
                            {
                              unint64_t v158 = 0;
                              uint64_t v159 = 0;
                            }
                          }
                          goto LABEL_717;
                        }
                        unint64_t v427 = v153;
                        uint64_t v428 = 0;
                      }
                      unint64_t v153 = 0;
                      uint64_t v154 = 0;
                      *(void *)uint64_t v3 = 0;
                      *(void *)(v3 + 8) = 0;
                      uint64_t v430 = *(void *)(v3 + 24);
                      if (v430)
                      {
                        if (v427)
                        {
                          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v430 + 16))(v430, v428, v427);
                          uint64_t v154 = *(void *)v3;
                          unint64_t v153 = *(void *)(v3 + 8);
                        }
                        else
                        {
                          unint64_t v153 = 0;
                          uint64_t v154 = 0;
                        }
                      }
                      goto LABEL_712;
                    }
                    unint64_t v422 = v148;
                    uint64_t v423 = 0;
                  }
                  unint64_t v148 = 0;
                  int v149 = 0;
                  *(void *)uint64_t v3 = 0;
                  *(void *)(v3 + 8) = 0;
                  uint64_t v425 = *(void *)(v3 + 24);
                  if (v425)
                  {
                    if (v422)
                    {
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v425 + 16))(v425, v423, v422);
                      int v149 = *(char **)v3;
                      unint64_t v148 = *(void *)(v3 + 8);
                    }
                    else
                    {
                      unint64_t v148 = 0;
                      int v149 = 0;
                    }
                  }
                  goto LABEL_705;
                }
                unint64_t v417 = v143;
                uint64_t v418 = 0;
              }
              unint64_t v143 = 0;
              uint64_t v144 = 0;
              *(void *)uint64_t v3 = 0;
              *(void *)(v3 + 8) = 0;
              uint64_t v420 = *(void *)(v3 + 24);
              if (v420)
              {
                if (v417)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v420 + 16))(v420, v418, v417);
                  uint64_t v144 = *(void *)v3;
                  unint64_t v143 = *(void *)(v3 + 8);
                }
                else
                {
                  unint64_t v143 = 0;
                  uint64_t v144 = 0;
                }
              }
              goto LABEL_700;
            }
LABEL_687:
            *(void *)uint64_t v3 = 0;
            *(void *)(v3 + 8) = 0;
            uint64_t v414 = *(void *)(v3 + 24);
            if (v414 && v138) {
              (*(void (**)(uint64_t, char *))(*(void *)v414 + 16))(v414, v139);
            }
            goto LABEL_688;
          }
          unint64_t v410 = v138;
          uint64_t v411 = 0;
        }
        unint64_t v138 = 0;
        unsigned int v139 = 0;
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        uint64_t v413 = *(void *)(v3 + 24);
        if (v413)
        {
          if (v410)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v413 + 16))(v413, v411, v410);
            unsigned int v139 = *(char **)v3;
            unint64_t v138 = *(void *)(v3 + 8);
          }
          else
          {
            unint64_t v138 = 0;
            unsigned int v139 = 0;
          }
        }
        goto LABEL_687;
      }
      unint64_t v405 = v133;
      uint64_t v406 = 0;
    }
    unint64_t v133 = 0;
    uint64_t v134 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v408 = *(void *)(v3 + 24);
    if (v408)
    {
      if (v405)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v408 + 16))(v408, v406, v405);
        uint64_t v134 = *(void *)v3;
        unint64_t v133 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v133 = 0;
        uint64_t v134 = 0;
      }
    }
    goto LABEL_682;
  }
  uint64_t v519 = 0;
  int v106 = *v105;
  BOOL v719 = 0;
  if (!v106)
  {
LABEL_144:
    unsigned int v520 = 0;
    goto LABEL_145;
  }
  int v107 = 0;
  while (1)
  {
    uint64_t v108 = (uint64_t)IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)v625);
    if (!v625[8]) {
      goto LABEL_770;
    }
    __int16 v110 = *(const WTF::StringImpl **)(v3 + 8);
    unsigned int v109 = *(char **)v3;
    unint64_t v111 = *(void *)(v3 + 16) - *(void *)v3;
    if ((unint64_t)v110 <= v111)
    {
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v453 = *(void *)(v3 + 24);
      if (!v453)
      {
LABEL_763:
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
LABEL_764:
        if (v625[8])
        {
          unint64_t v116 = *(WTF::StringImpl **)v625;
LABEL_766:
          *(void *)unint64_t v625 = 0;
          if (v116)
          {
            if (*(_DWORD *)v116 == 2) {
              WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v109);
            }
            else {
              *(_DWORD *)v116 -= 2;
            }
          }
        }
LABEL_770:
        if (v719) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v719, (WTF::StringImpl *)v109);
        }
        goto LABEL_772;
      }
      if (!v110) {
        goto LABEL_1074;
      }
      (*(void (**)(uint64_t))(*(void *)v453 + 16))(v453);
      unsigned int v109 = *(char **)v3;
      __int16 v110 = *(const WTF::StringImpl **)(v3 + 8);
LABEL_992:
      uint64_t v463 = *(void *)(v3 + 24);
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (!v463) {
        goto LABEL_763;
      }
      if (v110)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v463 + 16))(v463, v109);
        unsigned int v109 = *(char **)v3;
        __int16 v110 = *(const WTF::StringImpl **)(v3 + 8);
      }
      else
      {
LABEL_1074:
        unsigned int v109 = 0;
      }
LABEL_995:
      uint64_t v464 = *(void *)(v3 + 24);
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v464 && v110) {
        (*(void (**)(uint64_t, char *))(*(void *)v464 + 16))(v464, v109);
      }
      goto LABEL_764;
    }
    unint64_t v112 = &v109[v111];
    *(void *)(v3 + 16) = v112 + 1;
    if (!v109) {
      goto LABEL_992;
    }
    unsigned int v113 = *v112;
    if (v113 >= 2) {
      goto LABEL_995;
    }
    BOOL v114 = v113 != 0;
    unint64_t v115 = v625[8];
    if (!v625[8]) {
      break;
    }
    unint64_t v116 = *(WTF::StringImpl **)v625;
    if ((unint64_t)(*(void *)v625 + 1) < 2) {
      goto LABEL_766;
    }
    unint64_t v117 = v719;
    if (v719
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v719, 0), (unint64_t v117 = v719) != 0))
    {
      int v118 = *((_DWORD *)v117 - 2);
    }
    else
    {
      int v118 = 0;
    }
    unsigned int v119 = *(_DWORD *)(*(void *)v625 + 16);
    if (v119 >= 0x100) {
      unsigned int v120 = v119 >> 8;
    }
    else {
      unsigned int v120 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v625);
    }
    char v121 = 0;
    uint64_t v2 = 1;
    while (1)
    {
      int v122 = v120 & v118;
      uint64_t v123 = &v117[2 * (v120 & v118)];
      unsigned int v124 = *v123;
      if (!*v123) {
        break;
      }
      if (v124 != (WTF *)-1)
      {
        uint64_t v123 = v121;
        if (WTF::equal(v124, *(const WTF::StringImpl **)v625, v110)) {
          goto LABEL_764;
        }
      }
      unsigned int v120 = v2 + v122;
      uint64_t v2 = (v2 + 1);
      char v121 = v123;
    }
    if (v121)
    {
      *char v121 = 0;
      v121[1] = 0;
      --*((_DWORD *)v719 - 4);
      uint64_t v123 = v121;
    }
    char v125 = *(WTF::StringImpl **)v625;
    *(void *)unint64_t v625 = 0;
    int v126 = *v123;
    unsigned __int8 *v123 = v125;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2) {
        WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v126 -= 2;
      }
    }
    *((unsigned char *)v123 + 8) = v114;
    if (v719) {
      int v127 = *((_DWORD *)v719 - 3) + 1;
    }
    else {
      int v127 = 1;
    }
    *((_DWORD *)v719 - 3) = v127;
    if (v719) {
      int v128 = *((_DWORD *)v719 - 3);
    }
    else {
      int v128 = 0;
    }
    uint64_t v129 = (*((_DWORD *)v719 - 4) + v128);
    unint64_t v130 = *((unsigned int *)v719 - 1);
    if (v130 > 0x400)
    {
      if (v130 > 2 * v129) {
        goto LABEL_134;
      }
    }
    else if (3 * v130 > 4 * v129)
    {
      goto LABEL_134;
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v719, v123);
LABEL_134:
    if (v625[8])
    {
      unsigned int v131 = *(WTF::StringImpl **)v625;
      *(void *)unint64_t v625 = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2) {
          WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v109);
        }
        else {
          *(_DWORD *)v131 -= 2;
        }
      }
    }
    if (++v107 == v106)
    {
      uint64_t v519 = v719;
      goto LABEL_144;
    }
  }
  while (1)
  {
LABEL_831:
    __break(1u);
LABEL_832:
    if (v115)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v108 + 16))(v108, v109, v115);
      unsigned int v109 = *(char **)v3;
      char v174 = *(WTF::StringImpl **)(v3 + 8);
    }
    else
    {
LABEL_296:
      char v174 = 0;
      unsigned int v109 = 0;
    }
LABEL_297:
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v219 = *(void *)(v3 + 24);
    if (!v219 || !v174) {
      break;
    }
    uint64_t v108 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v219 + 16))(v219, v109);
    unint64_t v115 = *(void *)v3;
    if (!*(void *)v3)
    {
      uint64_t v461 = *(void *)(v3 + 8);
      uint64_t v462 = *(void *)(v3 + 24);
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v462 && v461) {
        (*(void (**)(uint64_t, void))(*(void *)v462 + 16))(v462, 0);
      }
      break;
    }
  }
  v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_299:
  if (v523) {
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable((uint64_t)v523, v109);
  }
LABEL_301:
  unint64_t v220 = *(void *)v3;
  uint64_t v221 = *(void *)(v3 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v222 = *(void *)(v3 + 24);
  if (v222 && v221) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v222 + 16))(v222, v220);
  }
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 73;
  }
  int v214 = 1;
LABEL_305:
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v3, &v538);
  if (!v539)
  {
    unint64_t v445 = *(void *)v3;
    uint64_t v446 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v447 = *(void *)(v3 + 24);
    if (!v447
      || !v446
      || ((*(void (**)(uint64_t, unint64_t))(*(void *)v447 + 16))(v447, v445), !v539))
    {
      if (*(_DWORD *)(v3 + 72) == -1) {
        *(_DWORD *)(v3 + 72) = 74;
      }
    }
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v536);
  if (!v537 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 75;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v534);
  if (!v535 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 76;
  }
  unint64_t v223 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)v3);
  uint64_t v225 = v224;
  if (!v224 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 82;
  }
  uint64_t v226 = IPC::Decoder::decode<unsigned long long>((void *)v3);
  uint64_t v228 = v227;
  if (!v227 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 83;
  }
  IPC::Decoder::decode<WebKit::AccessibilityPreferences>((uint64_t *)v3, (uint64_t)v532);
  if (!v533 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 84;
  }
  unint64_t v229 = *(void *)(v3 + 8);
  unint64_t v230 = *(void *)v3;
  unint64_t v231 = *(void *)(v3 + 16) - *(void *)v3;
  if (v229 <= v231)
  {
    unint64_t v448 = 0;
    unint64_t v449 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v450 = *(void *)(v3 + 24);
    if (v450)
    {
      if (v229)
      {
        (*(void (**)(uint64_t))(*(void *)v450 + 16))(v450);
        unint64_t v449 = *(void *)v3;
        unint64_t v448 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v448 = 0;
        unint64_t v449 = 0;
      }
    }
    goto LABEL_746;
  }
  uint64_t v232 = (unsigned __int8 *)(v230 + v231);
  *(void *)(v3 + 16) = v232 + 1;
  if (!v230)
  {
    unint64_t v448 = v229;
    unint64_t v449 = 0;
LABEL_746:
    unint64_t v229 = 0;
    unint64_t v230 = 0;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v451 = *(void *)(v3 + 24);
    if (v451)
    {
      if (v448)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v451 + 16))(v451, v449, v448);
        unint64_t v230 = *(void *)v3;
        unint64_t v229 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v229 = 0;
        unint64_t v230 = 0;
      }
    }
    goto LABEL_747;
  }
  unsigned int v233 = *v232;
  if (v233 < 2)
  {
    uint64_t v234 = 0;
    BOOL v235 = v233 != 0;
    goto LABEL_315;
  }
LABEL_747:
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v452 = *(void *)(v3 + 24);
  if (v452 && v229) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v452 + 16))(v452, v230);
  }
  BOOL v235 = 0;
  if (*(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 85;
  }
  uint64_t v234 = 1;
LABEL_315:
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v530);
  if (!v531 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 92;
  }
  IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((IPC::Decoder *)v3, &v528);
  if (!v529 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 93;
  }
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((IPC::Decoder *)v3, &v526);
  if (!v527 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 94;
  }
  uint64_t v236 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)v3);
  unint64_t v522 = v237;
  if (!v237 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 95;
  }
  uint64_t v108 = IPC::Decoder::decode<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v523, (IPC::Decoder *)v3);
  int v238 = v525;
  if (!v525 && *(_DWORD *)(v3 + 72) == -1) {
    *(_DWORD *)(v3 + 72) = 96;
  }
  if (*(void *)v3)
  {
    unint64_t v115 = v624;
    if (!v624) {
      goto LABEL_831;
    }
    long long v239 = v622;
    long long v240 = v623;
    long long v622 = 0u;
    long long v623 = 0u;
    *(_OWORD *)unint64_t v625 = v239;
    *(_OWORD *)&v625[16] = v240;
    unint64_t v115 = v621;
    if (!v621) {
      goto LABEL_831;
    }
    long long v241 = v620;
    v620 = 0;
    v626 = v241;
    unint64_t v115 = v619;
    if (!v619) {
      goto LABEL_831;
    }
    long long v242 = v618;
    v618 = 0;
    *(void *)&long long v627 = v242;
    unint64_t v115 = v617;
    if (!v617) {
      goto LABEL_831;
    }
    uint64_t v243 = v615;
    uint64_t v615 = 0;
    *((void *)&v627 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v243;
    uint64_t v244 = v616;
    uint64_t v616 = 0;
    uint64_t v628 = v244;
    unint64_t v115 = v614;
    if (!v614) {
      goto LABEL_831;
    }
    uint64_t v3 = v613;
    if (v613) {
      uint64_t v108 = (uint64_t)CFRetain(*(CFTypeRef *)(v613 + 8));
    }
    *(void *)&long long v629 = v3;
    unint64_t v115 = v612;
    if (!v612) {
      goto LABEL_831;
    }
    uint64_t v245 = v610;
    uint64_t v610 = 0;
    *((void *)&v629 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v245;
    uint64_t v246 = v611;
    uint64_t v611 = 0;
    *(void *)&long long v630 = v246;
    unint64_t v115 = v609;
    if (!v609) {
      goto LABEL_831;
    }
    uint64_t v247 = v607;
    uint64_t v607 = 0;
    *((void *)&v630 + WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)this + 1) = v247;
    uint64_t v248 = v608;
    uint64_t v608 = 0;
    uint64_t v631 = v248;
    unint64_t v115 = v606;
    if (!v606) {
      goto LABEL_831;
    }
    uint64_t v249 = v604;
    uint64_t v604 = 0;
    uint64_t v632 = v249;
    uint64_t v250 = v605;
    uint64_t v605 = 0;
    uint64_t v633 = v250;
    unint64_t v115 = v603;
    if (!v603) {
      goto LABEL_831;
    }
    uint64_t v251 = v601;
    uint64_t v601 = 0;
    uint64_t v634 = v251;
    uint64_t v252 = v602;
    uint64_t v602 = 0;
    uint64_t v635 = v252;
    unint64_t v115 = v600;
    if (!v600) {
      goto LABEL_831;
    }
    uint64_t v253 = v598;
    uint64_t v598 = 0;
    uint64_t v636 = v253;
    uint64_t v254 = v599;
    uint64_t v599 = 0;
    uint64_t v637 = v254;
    unint64_t v115 = v597;
    if (!v597) {
      goto LABEL_831;
    }
    uint64_t v255 = v595;
    uint64_t v595 = 0;
    uint64_t v638 = v255;
    uint64_t v256 = v596;
    uint64_t v596 = 0;
    uint64_t v639 = v256;
    unint64_t v115 = v594;
    if (!v594) {
      goto LABEL_831;
    }
    uint64_t v257 = v592;
    uint64_t v592 = 0;
    uint64_t v640 = v257;
    uint64_t v258 = v593;
    uint64_t v593 = 0;
    uint64_t v641 = v258;
    unint64_t v115 = v591;
    if (!v591) {
      goto LABEL_831;
    }
    uint64_t v259 = v589;
    uint64_t v589 = 0;
    uint64_t v642 = v259;
    uint64_t v260 = v590;
    uint64_t v590 = 0;
    uint64_t v643 = v260;
    unint64_t v115 = v588;
    if (!v588) {
      goto LABEL_831;
    }
    uint64_t v261 = v586;
    uint64_t v586 = 0;
    uint64_t v644 = v261;
    uint64_t v262 = v587;
    uint64_t v587 = 0;
    uint64_t v645 = v262;
    unint64_t v115 = v585;
    if (!v585) {
      goto LABEL_831;
    }
    uint64_t v263 = v583;
    uint64_t v583 = 0;
    uint64_t v646 = v263;
    uint64_t v264 = v584;
    uint64_t v584 = 0;
    uint64_t v647 = v264;
    unint64_t v115 = v582;
    if (!v582) {
      goto LABEL_831;
    }
    uint64_t v265 = v580;
    uint64_t v580 = 0;
    uint64_t v648 = v265;
    uint64_t v266 = v581;
    uint64_t v581 = 0;
    uint64_t v649 = v266;
    unint64_t v115 = v579;
    if (!v579) {
      goto LABEL_831;
    }
    uint64_t v267 = v577;
    uint64_t v577 = 0;
    uint64_t v650 = v267;
    uint64_t v268 = v578;
    uint64_t v578 = 0;
    uint64_t v651 = v268;
    unint64_t v115 = v576;
    if (!v576) {
      goto LABEL_831;
    }
    uint64_t v269 = v574;
    uint64_t v574 = 0;
    uint64_t v652 = v269;
    uint64_t v270 = v575;
    uint64_t v575 = 0;
    uint64_t v653 = v270;
    unint64_t v115 = v573;
    if (!v573) {
      goto LABEL_831;
    }
    uint64_t v271 = v571;
    uint64_t v571 = 0;
    uint64_t v654 = v271;
    uint64_t v272 = v572;
    uint64_t v572 = 0;
    uint64_t v655 = v272;
    unint64_t v115 = v570;
    if (!v570) {
      goto LABEL_831;
    }
    unint64_t v115 = v518;
    uint64_t v273 = v568;
    uint64_t v568 = 0;
    uint64_t v656 = v273;
    uint64_t v274 = v569;
    uint64_t v569 = 0;
    uint64_t v657 = v274;
    if (v518 <= 0xFFu) {
      goto LABEL_831;
    }
    char v658 = v518;
    unint64_t v115 = v517;
    if (v517) {
      goto LABEL_831;
    }
    uint64_t v659 = v24;
    unint64_t v115 = v516;
    if (v516) {
      goto LABEL_831;
    }
    int v660 = v515;
    unint64_t v115 = v514;
    if (v514) {
      goto LABEL_831;
    }
    BOOL v661 = v513;
    unint64_t v115 = v512;
    if (v512) {
      goto LABEL_831;
    }
    BOOL v662 = v511;
    unint64_t v115 = v510;
    if (v510) {
      goto LABEL_831;
    }
    BOOL v663 = v509;
    unint64_t v115 = v508;
    if (v508) {
      goto LABEL_831;
    }
    BOOL v664 = v507;
    unint64_t v115 = v506;
    if (v506) {
      goto LABEL_831;
    }
    BOOL v665 = v505;
    unint64_t v115 = v504;
    if (v504) {
      goto LABEL_831;
    }
    BOOL v666 = v503;
    unint64_t v115 = v502;
    if (v502) {
      goto LABEL_831;
    }
    BOOL v667 = v501;
    unint64_t v115 = v500;
    if (v500) {
      goto LABEL_831;
    }
    BOOL v668 = v499;
    unint64_t v115 = v498;
    if (v498) {
      goto LABEL_831;
    }
    BOOL v669 = v497;
    unint64_t v115 = v496;
    if (v496) {
      goto LABEL_831;
    }
    BOOL v670 = v495;
    unint64_t v115 = v494;
    if (!v494) {
      goto LABEL_831;
    }
    unint64_t v115 = v492;
    char v671 = v493;
    if (v492 <= 0xFFu) {
      goto LABEL_831;
    }
    char v672 = v492;
    unint64_t v115 = v567;
    if (!v567) {
      goto LABEL_831;
    }
    unsigned int v275 = v566;
    uint64_t v566 = 0;
    int v673 = v275;
    unint64_t v115 = v491;
    if (!v491) {
      goto LABEL_831;
    }
    int v674 = v489;
    unint64_t v115 = v490;
    if (!v490) {
      goto LABEL_831;
    }
    int v675 = v488;
    unint64_t v115 = v565;
    if (!v565) {
      goto LABEL_831;
    }
    v276 = v564;
    v564 = 0;
    unint64_t v676 = v276;
    unint64_t v115 = v487;
    if (!v487) {
      goto LABEL_831;
    }
    int v677 = v486;
    unint64_t v115 = v563;
    if (!v563) {
      goto LABEL_831;
    }
    uint64_t v277 = v562;
    uint64_t v562 = 0;
    int v678 = v277;
    unint64_t v115 = v561;
    if (!v561) {
      goto LABEL_831;
    }
    unint64_t v278 = v560;
    v560 = 0;
    BOOL v679 = v278;
    unint64_t v115 = v485;
    if (v485) {
      goto LABEL_831;
    }
    BOOL v680 = v484;
    unint64_t v115 = v483;
    if (v483) {
      goto LABEL_831;
    }
    BOOL v681 = v482;
    unint64_t v115 = v481;
    if (v481) {
      goto LABEL_831;
    }
    BOOL v682 = v479;
    unint64_t v115 = v521;
    if (v521) {
      goto LABEL_831;
    }
    uint64_t v683 = v480;
    unint64_t v115 = v520;
    if (v520) {
      goto LABEL_831;
    }
    int v684 = v519;
    unint64_t v115 = v559;
    if (!v559) {
      goto LABEL_831;
    }
    CFTypeRef v279 = cf;
    CFTypeRef cf = 0;
    CFTypeRef v685 = v279;
    unint64_t v115 = v557;
    if (!v557) {
      goto LABEL_831;
    }
    uint64_t v280 = v555;
    uint64_t v555 = 0;
    uint64_t v686 = v280;
    uint64_t v281 = v556;
    uint64_t v556 = 0;
    uint64_t v687 = v281;
    unint64_t v115 = v554;
    if (!v554) {
      goto LABEL_831;
    }
    int v688 = v552;
    uint64_t v282 = v553;
    uint64_t v553 = 0;
    uint64_t v689 = v282;
    unint64_t v115 = v478;
    if (v478) {
      goto LABEL_831;
    }
    BOOL v690 = v477;
    unint64_t v115 = v735;
    if (!v735) {
      goto LABEL_831;
    }
    uint64_t v108 = (uint64_t)std::__optional_move_base<WebKit::WebProcessDataStoreParameters,false>::__optional_move_base[abi:sn180100](v691, (uint64_t)&v719);
    unint64_t v115 = v551;
    if (!v551) {
      goto LABEL_831;
    }
    uint64_t v283 = v549;
    uint64_t v549 = 0;
    uint64_t v692 = v283;
    uint64_t v284 = v550;
    uint64_t v550 = 0;
    uint64_t v693 = v284;
    unint64_t v115 = v548;
    if (!v548) {
      goto LABEL_831;
    }
    LOBYTE(v694) = 0;
    char v695 = 0;
    if (v547)
    {
      v308 = v546;
      uint64_t v546 = 0;
      BOOL v694 = v308;
      char v695 = 1;
    }
    unint64_t v115 = v545;
    if (!v545) {
      goto LABEL_831;
    }
    LOBYTE(v696) = 0;
    char v697 = 0;
    if (v544)
    {
      uint64_t v309 = v543;
      v543 = 0;
      unsigned int v696 = v309;
      char v697 = 1;
    }
    unint64_t v115 = v475;
    if (v475) {
      goto LABEL_831;
    }
    BOOL v698 = v474;
    unint64_t v115 = v473;
    if (v473) {
      goto LABEL_831;
    }
    BOOL v699 = v472;
    unint64_t v115 = v542;
    if (!v542) {
      goto LABEL_831;
    }
    uint64_t v700 = v540;
    uint64_t v285 = v541;
    uint64_t v540 = 0;
    uint64_t v541 = 0;
    uint64_t v701 = v285;
    unint64_t v115 = v471;
    if (v471) {
      goto LABEL_831;
    }
    BOOL v702 = v470;
    unint64_t v115 = v469;
    if (v469) {
      goto LABEL_831;
    }
    unint64_t v115 = v476;
    BOOL v703 = v468;
    if (v476 <= 0xFFu) {
      goto LABEL_831;
    }
    char v704 = v476;
    unint64_t v115 = v467;
    if (v467) {
      goto LABEL_831;
    }
    unint64_t v115 = v466;
    BOOL v705 = v466;
    if (v214) {
      goto LABEL_831;
    }
    uint64_t v706 = v2;
    unint64_t v115 = v539;
    if (!v539) {
      goto LABEL_831;
    }
    unsigned __int16 v518 = v108;
    uint64_t v519 = (WTF::StringImpl **)v236;
    uint64_t v2 = (uint64_t)v223;
    uint64_t v3 = v234;
    uint64_t v108 = WebCore::Color::Color();
    unint64_t v115 = v537;
    if (!v537) {
      goto LABEL_831;
    }
    unsigned __int16 v286 = v536;
    uint64_t v536 = 0;
    uint64_t v707 = v286;
    unint64_t v115 = v535;
    if (!v535) {
      goto LABEL_831;
    }
    unint64_t v115 = (unint64_t)v534;
    v534 = 0;
    unint64_t v708 = v115;
    if (!v225) {
      goto LABEL_831;
    }
    int v709 = v223;
    if (!v228) {
      goto LABEL_831;
    }
    uint64_t v710 = v226;
    unint64_t v115 = v533;
    if (!v533) {
      goto LABEL_831;
    }
    *(void *)&v711[15] = *(void *)&v532[15];
    unint64_t v115 = (unint64_t)&v622;
    *(_OWORD *)uint64_t v711 = *(_OWORD *)v532;
    if (v234) {
      goto LABEL_831;
    }
    BOOL v712 = v235;
    unint64_t v115 = v531;
    if (!v531) {
      goto LABEL_831;
    }
    v287 = v530;
    v530 = 0;
    BOOL v713 = v287;
    unint64_t v115 = v529;
    if (!v529) {
      goto LABEL_831;
    }
    v288 = v528;
    v528 = 0;
    int v714 = v288;
    unint64_t v115 = v527;
    if (!v527) {
      goto LABEL_831;
    }
    unint64_t v289 = v526;
    v526 = 0;
    BOOL v715 = v289;
    unint64_t v115 = v522;
    if (!v522) {
      goto LABEL_831;
    }
    uint64_t v716 = v236;
    unint64_t v115 = v525;
    if (!v525) {
      goto LABEL_831;
    }
    BOOL v717 = v523;
    uint64_t v290 = v524;
    v523 = 0;
    uint64_t v524 = 0;
    uint64_t v718 = v290;
    *(unsigned char *)(WebKit::WebProcessCreationParameters::WebProcessCreationParameters((uint64_t)a2, (uint64_t *)v625) + 832) = 1;
    WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v625, v291);
    uint64_t v292 = 0;
    uint64_t v293 = 0;
    uint64_t v2 = 0;
    if (v525)
    {
LABEL_403:
      unint64_t v294 = v523;
      if (v523)
      {
        v523 = 0;
        LODWORD(v524) = 0;
        WTF::fastFree(v294, v109);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[832] = 0;
    uint64_t v292 = v480;
    uint64_t v293 = v519;
    if (v238) {
      goto LABEL_403;
    }
  }
  if (v527 && v526) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v526, (WTF::StringImpl *)v109);
  }
  if (v529 && v528) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v528, (WTF::StringImpl *)v109);
  }
  if (v531)
  {
    v295 = v530;
    v530 = 0;
    if (v295)
    {
      if (*(_DWORD *)v295 == 2) {
        WTF::StringImpl::destroy(v295, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v295 -= 2;
      }
    }
  }
  if (v535)
  {
    unsigned int v296 = v534;
    v534 = 0;
    if (v296)
    {
      if (*(_DWORD *)v296 == 2) {
        WTF::StringImpl::destroy(v296, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v296 -= 2;
      }
    }
  }
  if (v537)
  {
    unsigned __int16 v297 = v536;
    uint64_t v536 = 0;
    if (v297)
    {
      if (*(_DWORD *)v297 == 2) {
        WTF::StringImpl::destroy(v297, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v297 -= 2;
      }
    }
  }
  if (v539)
  {
    if ((v538 & 0x8000000000000) != 0)
    {
      uint64_t v310 = (unsigned int *)(v538 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v538 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v310);
        WTF::fastFree((WTF *)v310, v109);
      }
    }
  }
  if (v2) {
    char v298 = v214;
  }
  else {
    char v298 = 1;
  }
  if ((v298 & 1) == 0) {
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v2, v109);
  }
  if (v542) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v540, v109);
  }
  if (v545 && v544) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v543);
  }
  if (v548 && v547) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v546);
  }
  if (v551) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v549, v109);
  }
  if (v735 && v734) {
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)&v719);
  }
  if (v554 && v553) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v553, v109);
  }
  if (v557) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v555, v109);
  }
  if (v559)
  {
    CFTypeRef v307 = cf;
    CFTypeRef cf = 0;
    if (v307) {
      CFRelease(v307);
    }
  }
  char v299 = v520;
  if (!v293) {
    char v299 = 1;
  }
  if ((v299 & 1) == 0) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v293, (WTF::StringImpl *)v109);
  }
  char v300 = v521;
  if (!v292) {
    char v300 = 1;
  }
  if ((v300 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v292 + 8));
  }
  if (v561) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v560);
  }
  if (v563)
  {
    v301 = v562;
    uint64_t v562 = 0;
    if (v301)
    {
      if (*(_DWORD *)v301 == 2) {
        WTF::StringImpl::destroy(v301, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v301 -= 2;
      }
    }
  }
  if (v565)
  {
    unsigned int v302 = v564;
    v564 = 0;
    if (v302)
    {
      if (*(_DWORD *)v302 == 2) {
        WTF::StringImpl::destroy(v302, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v302 -= 2;
      }
    }
  }
  if (v567)
  {
    int v303 = v566;
    uint64_t v566 = 0;
    if (v303)
    {
      if (*(_DWORD *)v303 == 2) {
        WTF::StringImpl::destroy(v303, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v303 -= 2;
      }
    }
  }
  if (v570) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v568, v109);
  }
  if (v573) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v571, v109);
  }
  if (v576) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v574, v109);
  }
  if (v579) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v577, v109);
  }
  if (v582) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v580, v109);
  }
  if (v585) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v583, v109);
  }
  if (v588) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v586, v109);
  }
  if (v591) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v589, v109);
  }
  if (v594) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v592, v109);
  }
  if (v597) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v595, v109);
  }
  if (v600) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v598, v109);
  }
  if (v603) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v601, v109);
  }
  if (v606) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v604, v109);
  }
  if (v609) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v607, v109);
  }
  if (v612) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v610, v109);
  }
  if (v614)
  {
    uint64_t v304 = v613;
    uint64_t v613 = 0;
    if (v304) {
      CFRelease(*(CFTypeRef *)(v304 + 8));
    }
  }
  if (v617) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v615, v109);
  }
  if (v619) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v618);
  }
  if (v621)
  {
    unsigned __int16 v305 = v620;
    v620 = 0;
    if (v305)
    {
      if (*(_DWORD *)v305 == 2) {
        WTF::StringImpl::destroy(v305, (WTF::StringImpl *)v109);
      }
      else {
        *(_DWORD *)v305 -= 2;
      }
    }
  }
  return std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v622, (WTF::StringImpl *)v109);
}