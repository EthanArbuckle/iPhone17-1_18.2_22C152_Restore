void sub_198817878(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,char a21)
{
  if (a21)
  {
    if (a18) {
      WTF::fastFree(a18, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawEllipse,void>::encode(uint64_t *a1, long long *a2)
{
  long long v3 = *a2;
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v3);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v7 != 0) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  if (*a1)
  {
    if (!v16) {
      __break(1u);
    }
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
    }
  }
  return result;
}

void sub_198817A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
  {
    uint64_t v35 = *(unsigned int *)(v33 + 64);
    if (v35 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[18]);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 20));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode(uint64_t *a1, _DWORD *a2)
{
  IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)a2);
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = a2[18];
      a1[2] = v10;
    }
  }

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 20));
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v22);
  if (!v25)
  {
    unint64_t v9 = *a1;
    unint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v11 = a1[3];
    if (v11 && v10 != 0) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  uint64_t v5 = IPC::Decoder::decode<float>(a1);
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v14);
  if (!v15)
  {
    BOOL v7 = (void *)*a1;
    unint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result)
    {
      if (v13) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v7);
      }
    }
  }
  if (!*a1)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 88) = 0;
    goto LABEL_10;
  }
  unint64_t m_colorAndFlags = v25;
  if (v25)
  {
    if ((v5 & 0xFF00000000) != 0)
    {
      unint64_t m_colorAndFlags = v15;
      if (v15)
      {
        std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v18, (uint64_t)v23);
        int v20 = v5;
        WebCore::Color::Color((WebCore::Color *)&v21, &v14);
        std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](a3 + 8, (uint64_t)v18);
        *(_DWORD *)(a3 + 72) = v20;
        uint64_t result = (unsigned int *)WebCore::Color::Color();
        *(unsigned char *)(a3 + 88) = 1;
        if ((v21 & 0x8000000000000) != 0)
        {
          uint64_t result = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
          }
        }
        if (v19 != -1) {
          uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v19])(&v16, v18);
        }
LABEL_10:
        if (!v15) {
          goto LABEL_12;
        }
        unint64_t m_colorAndFlags = v14.m_colorAndFlags;
        if ((v14.m_colorAndFlags & 0x8000000000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_17;
      }
    }
  }
  __break(1u);
LABEL_17:
  uint64_t result = (unsigned int *)(m_colorAndFlags & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
  }
LABEL_12:
  if (v25)
  {
    if (v24 != -1) {
      return (unsigned int *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v24])(v17, v23);
    }
  }
  return result;
}

void sub_198817DF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37,char a38)
{
  if (a11)
  {
    if ((a10 & 0x8000000000000) != 0)
    {
      v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, a2);
      }
    }
  }
  if (a38)
  {
    if (a36 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a36])(&a17, &a29);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[5]);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode(uint64_t *a1, _DWORD *a2)
{
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = a2[4];
      a1[2] = v11;
      uint64_t v4 = *a1;
      unint64_t v5 = v11;
    }
  }
  unint64_t v13 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v13 >= v4 + v5)
  {
    unint64_t v14 = (unint64_t)v13 - v4 + 4;
    if ((unint64_t)v13 - v4 > 0xFFFFFFFFFFFFFFFBLL || v14 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *unint64_t v13 = a2[5];
      a1[2] = v14;
    }
  }

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
}

WTF *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v21);
  uint64_t v5 = IPC::Decoder::decode<float>(a1);
  uint64_t v6 = IPC::Decoder::decode<float>(a1);
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v19);
  if (!v20)
  {
    BOOL v8 = (void *)*a1;
    unint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result)
    {
      if (v13) {
        uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(void *)result + 16))(result, v8);
      }
    }
  }
  if (!*a1)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    goto LABEL_11;
  }
  uint64_t v9 = v23;
  if (v23)
  {
    if ((v5 & 0xFF00000000) != 0 && (v6 & 0xFF00000000) != 0)
    {
      uint64_t v9 = v20;
      if (v20)
      {
        WebCore::Color::Color();
        unsigned __int8 v15 = v21;
        uint64_t v10 = v22;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v16 = v10;
        unint64_t v17 = __PAIR64__(v6, v5);
        WebCore::Color::Color((WebCore::Color *)&v18, &v14);
        *(void *)a3 = v15;
        uint64_t v11 = v16;
        unsigned __int8 v15 = 0;
        uint64_t v16 = 0;
        *(void *)(a3 + 8) = v11;
        *(void *)(a3 + 16) = v17;
        WebCore::Color::Color();
        *(unsigned char *)(a3 + 32) = 1;
        if ((v18 & 0x8000000000000) != 0)
        {
          int v12 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v8);
          }
        }
        uint64_t result = v15;
        if (v15)
        {
          unsigned __int8 v15 = 0;
          LODWORD(v16) = 0;
          uint64_t result = (WTF *)WTF::fastFree(result, v8);
        }
        if ((v14.m_colorAndFlags & 0x8000000000000) != 0)
        {
          uint64_t result = (WTF *)(v14.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v14.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            uint64_t result = (WTF *)WTF::fastFree(result, v8);
          }
        }
LABEL_11:
        if (!v20) {
          goto LABEL_13;
        }
        uint64_t v9 = v19;
        if ((v19 & 0x8000000000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }
  }
  __break(1u);
LABEL_18:
  uint64_t result = (WTF *)(v9 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (WTF *)WTF::fastFree(result, v8);
  }
LABEL_13:
  if (v23)
  {
    uint64_t result = v21;
    if (v21)
    {
      uint64_t v21 = 0;
      LODWORD(v22) = 0;
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

void sub_198818228(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19)
{
  if (a15)
  {
    if ((a14 & 0x8000000000000) != 0)
    {
      unsigned __int8 v20 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
  }
  if (a19)
  {
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return (WTF *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198818350(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRect,void>::encode(uint64_t *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *result;
  unint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v8 + v4 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v9) = *(_DWORD *)a2;
      result[2] = v10;
      uint64_t v3 = *result;
      unint64_t v4 = v10;
    }
  }
  unint64_t v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = v12 - (v3 + v4);
  if (v12 >= v3 + v4)
  {
    unint64_t v14 = v12 - v3;
    unint64_t v15 = v13 + v4 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v14) = v2;
      result[2] = v15;
      uint64_t v3 = *result;
      unint64_t v4 = v15;
    }
  }
  int v17 = *(_DWORD *)(a2 + 12);
  unint64_t v18 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v3 + v4);
  if (v18 >= v3 + v4)
  {
    unint64_t v20 = v18 - v3;
    unint64_t v21 = v19 + v4 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v20) = *(_DWORD *)(a2 + 8);
      result[2] = v21;
      uint64_t v3 = *result;
      unint64_t v4 = v21;
    }
  }
  unint64_t v23 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = v23 - (v3 + v4);
  if (v23 >= v3 + v4)
  {
    unint64_t v25 = v23 - v3;
    unint64_t v26 = v24 + v4 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v25) = v17;
      result[2] = v26;
      unint64_t v4 = v26;
    }
  }
  if (v4 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v4) = *(unsigned char *)(a2 + 16);
    result[2] = v4 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRect,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v6);
  uint64_t result = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a1);
  unint64_t v5 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  LOBYTE(v5) = v7;
  if (!v7 || (LOBYTE(v5) = result, (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
LABEL_7:
    *a2 = 0;
    goto LABEL_5;
  }
  *(_OWORD *)a2 = v6;
  a2[16] = result != 0;
  LOBYTE(v5) = 1;
LABEL_5:
  a2[20] = v5;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithColor,void>::encode(IPC::Encoder *a1, long long *a2)
{
  uint64_t v3 = (WebCore::Color *)(a2 + 1);
  long long v5 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v5);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v3);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithColor,void>::encode(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (WebCore::Color *)(a2 + 1);
  long long v5 = *a2;
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v5);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v3);
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithColor,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v13);
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v11);
  if (!v12)
  {
    long long v5 = (void *)*a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result && v7 != 0) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v5);
    }
  }
  if (*a1)
  {
    unint64_t m_colorAndFlags = v14;
    if (!v14 || (unint64_t m_colorAndFlags = v12) == 0)
    {
      __break(1u);
LABEL_10:
      uint64_t result = (unsigned int *)(m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v5);
      }
      return result;
    }
    long long v9 = v13;
    WebCore::Color::Color((WebCore::Color *)&v10, &v11);
    *(_OWORD *)a2 = v9;
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    *(unsigned char *)(a2 + 24) = 1;
    if ((v10 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  if (v12)
  {
    unint64_t m_colorAndFlags = v11.m_colorAndFlags;
    if ((v11.m_colorAndFlags & 0x8000000000000) != 0) {
      goto LABEL_10;
    }
  }
  return result;
}

void sub_1988187AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 && (a12 & 0x8000000000000) != 0)
  {
    unsigned __int8 v14 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v11 = v6 >= v5;
  unint64_t v7 = v6 - v5;
  if (v11)
  {
    unint64_t v8 = v7 + v4;
    unint64_t v9 = v7 + v4 + 4;
    unint64_t v10 = a1[1];
    if (v8 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v11 = v9 >= v10;
      BOOL v12 = v9 == v10;
    }
    else
    {
      BOOL v11 = 1;
      BOOL v12 = 0;
    }
    if (!v12 && v11)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v8) = *(_DWORD *)a2;
      a1[2] = v9;
      uint64_t v3 = *a1;
      unint64_t v4 = v9;
    }
  }
  unint64_t v13 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = v13 - (v3 + v4);
  if (v13 >= v3 + v4)
  {
    unint64_t v15 = v13 - v3;
    unint64_t v16 = v14 + v4 + 4;
    unint64_t v17 = a1[1];
    if (v15 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v18 = v16 >= v17;
      BOOL v19 = v16 == v17;
    }
    else
    {
      BOOL v18 = 1;
      BOOL v19 = 0;
    }
    if (!v19 && v18)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v15) = v2;
      a1[2] = v16;
      uint64_t v3 = *a1;
      unint64_t v4 = v16;
    }
  }
  int v20 = *(_DWORD *)(a2 + 12);
  unint64_t v21 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v3 + v4);
  if (v21 >= v3 + v4)
  {
    unint64_t v23 = v21 - v3;
    unint64_t v24 = v22 + v4 + 4;
    unint64_t v25 = a1[1];
    if (v23 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v26 = v24 >= v25;
      BOOL v27 = v24 == v25;
    }
    else
    {
      BOOL v26 = 1;
      BOOL v27 = 0;
    }
    if (!v27 && v26)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v23) = *(_DWORD *)(a2 + 8);
      a1[2] = v24;
      uint64_t v3 = *a1;
      unint64_t v4 = v24;
    }
  }
  unint64_t v28 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v28 >= v3 + v4)
  {
    unint64_t v29 = v28 - v3;
    unint64_t v30 = v28 - v3 + 4;
    unint64_t v31 = a1[1];
    if (v29 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v32 = v30 >= v31;
      BOOL v33 = v30 == v31;
    }
    else
    {
      BOOL v32 = 1;
      BOOL v33 = 0;
    }
    if (!v33 && v32)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v29) = v20;
      a1[2] = v30;
    }
  }
  return IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, *(void *)(a2 + 16));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)v12);
  uint64_t result = IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(a1, (uint64_t)&v10);
  if (*a1)
  {
    if (v12[16] && v11)
    {
      WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient();
      *(_OWORD *)a2 = v8;
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      *(void *)(a2 + 16) = v6;
      *(unsigned char *)(a2 + 24) = 1;
      uint64_t result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v9, v7);
      goto LABEL_5;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_5:
  if (v11) {
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v10, v5);
  }
  return result;
}

void sub_1988189F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13) {
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Gradient,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, *(void *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (double *)(a2 + 24));
  char v5 = *(unsigned char *)(a2 + 72);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2];
  unint64_t v7 = *a1 + v6;
  unint64_t v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v8 >= v7;
  unint64_t v10 = v8 - v7;
  if (v9)
  {
    unint64_t v11 = v10 + v6;
    unint64_t v12 = v10 + v6 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v11) = *(_DWORD *)a2;
      a1[2] = v12;
      uint64_t v5 = *a1;
      unint64_t v6 = v12;
    }
  }
  unint64_t v14 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = v14 - (v5 + v6);
  if (v14 >= v5 + v6)
  {
    unint64_t v16 = v14 - v5;
    unint64_t v17 = v15 + v6 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v16) = v4;
      a1[2] = v17;
      uint64_t v5 = *a1;
      unint64_t v6 = v17;
    }
  }
  int v19 = *(_DWORD *)(a2 + 12);
  unint64_t v20 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v5 + v6);
  if (v20 >= v5 + v6)
  {
    unint64_t v22 = v20 - v5;
    unint64_t v23 = v21 + v6 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v22) = *(_DWORD *)(a2 + 8);
      a1[2] = v23;
      uint64_t v5 = *a1;
      unint64_t v6 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v5 + v6)
  {
    unint64_t v26 = (unint64_t)v25 - v5 + 4;
    if ((unint64_t)v25 - v5 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *unint64_t v25 = v19;
      a1[2] = v26;
    }
  }
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, *(void *)(a2 + 16));
  uint64_t result = IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (void *)(a2 + 24));
  unint64_t v29 = a1[2];
  if (v29 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v29) = *(unsigned char *)(a2 + 72);
    a1[2] = v29 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)v22);
  IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(a1, (uint64_t)&v20);
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a1, (uint64_t)v18);
  int v4 = v19;
  if (!v19) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a1);
    if (!*a1) {
      break;
    }
    if (v22[16] && v21 && v4 && (unsigned __int16)result > 0xFFu)
    {
      WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::FillRectWithGradientAndSpaceTransform();
      *(_OWORD *)a2 = v12;
      uint64_t v7 = v13;
      uint64_t v13 = 0;
      *(void *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 24) = v14;
      *(_OWORD *)(a2 + 40) = v15;
      *(_OWORD *)(a2 + 56) = v16;
      *(unsigned char *)(a2 + 72) = v17;
      *(unsigned char *)(a2 + 80) = 1;
      uint64_t result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v13, v8);
      goto LABEL_8;
    }
    __break(1u);
LABEL_12:
    unint64_t v9 = *a1;
    unint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v11 = a1[3];
    if (v11 && v10) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
LABEL_8:
  if (v21) {
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v20, v6);
  }
  return result;
}

void sub_198818DBC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 64)) {
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)(v2 - 72), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillCompositedRect,void>::encode(IPC::Encoder *a1, long long *a2)
{
  long long v5 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v5);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 1));
  LOBYTE(v5) = *((unsigned char *)a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  LOBYTE(v5) = *((unsigned char *)a2 + 25);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillCompositedRect,void>::encode(uint64_t *a1, long long *a2)
{
  int v4 = (WebCore::Color *)(a2 + 1);
  long long v7 = *a2;
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v7);
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v4);
  unint64_t v6 = a1[2];
  if (v6 >= a1[1] || (*(unsigned char *)(*a1 + v6) = *((unsigned char *)a2 + 24), a1[2] = v6 + 1, v6 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v6 + 1) = *((unsigned char *)a2 + 25);
    a1[2] = v6 + 2;
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::FillCompositedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v25);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v23);
  if (!v24)
  {
    unint64_t v12 = *a1;
    unint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v14 = a1[3];
    if (v14 && v13 != 0) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12);
    }
  }
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::CompositeOperator>(a1);
  unint64_t v5 = a1[1];
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v18 = a1[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v17 = *a1;
        unint64_t v16 = a1[1];
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
      }
    }
    goto LABEL_25;
  }
  unint64_t v8 = &v6[v7];
  a1[2] = (unint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v16 = v5;
    unint64_t v17 = 0;
LABEL_25:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        unint64_t v6 = (char *)*a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
    goto LABEL_26;
  }
  int v9 = *v8;
  if ((v9 - 1) < 0x12)
  {
    unint64_t m_colorAndFlags = 0;
    goto LABEL_6;
  }
LABEL_26:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unsigned int *)a1[3];
  if (!result
    || !v5
    || (uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, char *))(*(void *)result + 16))(result, v6), !*a1))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    goto LABEL_11;
  }
  LOBYTE(v9) = 0;
  unint64_t m_colorAndFlags = 1;
LABEL_6:
  if (!v26 || !v24 || v4 <= 0xFFu || m_colorAndFlags)
  {
    __break(1u);
LABEL_15:
    uint64_t result = (unsigned int *)(m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
    return result;
  }
  long long v20 = v25;
  WebCore::Color::Color((WebCore::Color *)&v21, &v23);
  LOBYTE(v22) = v4;
  HIBYTE(v22) = v9;
  *(_OWORD *)a2 = v20;
  uint64_t result = (unsigned int *)WebCore::Color::Color();
  *(_WORD *)(a2 + 24) = v22;
  *(unsigned char *)(a2 + 32) = 1;
  if ((v21 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
LABEL_11:
  if (v24)
  {
    unint64_t m_colorAndFlags = v23.m_colorAndFlags;
    if ((v23.m_colorAndFlags & 0x8000000000000) != 0) {
      goto LABEL_15;
    }
  }
  return result;
}

void sub_19881918C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15 && (a14 & 0x8000000000000) != 0)
  {
    unint64_t v16 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::CompositeOperator>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  unsigned __int16 v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      unint64_t v13 = a1;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
        a1 = v13;
        uint64_t v2 = *v13;
        unint64_t v1 = v13[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 0xE)
  {
    int v6 = 256;
    return v6 | v5;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v2);
  }
  unsigned int v5 = 0;
  int v6 = 0;
  return v6 | v5;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRoundedRect,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 48));
  char v5 = *(unsigned char *)(a2 + 56);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRoundedRect,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (_DWORD *)a2);
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 48));
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 56);
    a1[2] = v5 + 1;
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::FillRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v27);
  int v4 = v28;
  if (!v28)
  {
    unint64_t v13 = *a1;
    unint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (v15 && v14 != 0) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13);
    }
  }
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v25);
  if (!v26)
  {
    unint64_t v17 = *a1;
    unint64_t v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result)
    {
      if (v18) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(void *)result + 16))(result, v17);
      }
    }
  }
  unint64_t v6 = a1[1];
  unint64_t v7 = (char *)*a1;
  unint64_t v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    uint64_t v12 = 0;
    unint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v19 = a1[3];
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v19 + 16))(v19);
        unint64_t v10 = *a1;
        uint64_t v12 = a1[1];
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v10 = 0;
      }
    }
LABEL_26:
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  uint64_t v9 = &v7[v8];
  unint64_t v10 = (unint64_t)(v9 + 1);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v7)
  {
    uint64_t v12 = v6;
    unint64_t v10 = 0;
    goto LABEL_26;
  }
  int v11 = *v9;
  if ((v11 - 1) >= 0x12) {
    goto LABEL_27;
  }
  uint64_t v12 = 0;
  if (!v4) {
    goto LABEL_32;
  }
LABEL_7:
  unint64_t v10 = v26;
  if (!v26 || v12)
  {
LABEL_32:
    while (1)
    {
      __break(1u);
LABEL_33:
      if (v12)
      {
        (*(void (**)(unsigned int *, unint64_t, uint64_t))(*(void *)result + 16))(result, v10, v12);
        unint64_t v7 = (char *)*a1;
        unint64_t v6 = a1[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v7 = 0;
      }
LABEL_27:
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = (unsigned int *)a1[3];
      if (!result) {
        break;
      }
      if (!v6) {
        break;
      }
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, char *))(*(void *)result + 16))(result, v7);
      if (!*a1) {
        break;
      }
      LOBYTE(v11) = 0;
      uint64_t v12 = 1;
      if (v4) {
        goto LABEL_7;
      }
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
  }
  else
  {
    long long v20 = v27[0];
    long long v21 = v27[1];
    long long v22 = v27[2];
    WebCore::Color::Color((WebCore::Color *)&v23, &v25);
    char v24 = v11;
    *(_OWORD *)a2 = v20;
    *(_OWORD *)(a2 + 16) = v21;
    *(_OWORD *)(a2 + 32) = v22;
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    *(unsigned char *)(a2 + 56) = v24;
    *(unsigned char *)(a2 + 64) = 1;
    if ((v23 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
  }
  if (v26 && (v25.m_colorAndFlags & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v25.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v25.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void sub_1988196F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && (a18 & 0x8000000000000) != 0)
  {
    long long v20 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithRoundedHole,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, a2 + 4);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithRoundedHole,void>::encode(uint64_t *a1, _DWORD *a2)
{
  int v4 = a2[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2];
  unint64_t v7 = *a1 + v6;
  unint64_t v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v8 >= v7;
  unint64_t v10 = v8 - v7;
  if (v9)
  {
    unint64_t v11 = v10 + v6;
    unint64_t v12 = v10 + v6 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v11) = *a2;
      a1[2] = v12;
      uint64_t v5 = *a1;
      unint64_t v6 = v12;
    }
  }
  unint64_t v14 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = v14 - (v5 + v6);
  if (v14 >= v5 + v6)
  {
    unint64_t v16 = v14 - v5;
    unint64_t v17 = v15 + v6 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v16) = v4;
      a1[2] = v17;
      uint64_t v5 = *a1;
      unint64_t v6 = v17;
    }
  }
  int v19 = a2[3];
  unint64_t v20 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v5 + v6);
  if (v20 >= v5 + v6)
  {
    unint64_t v22 = v20 - v5;
    unint64_t v23 = v21 + v6 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v22) = a2[2];
      a1[2] = v23;
      uint64_t v5 = *a1;
      unint64_t v6 = v23;
    }
  }
  Color v25 = (_DWORD *)((v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v5 + v6)
  {
    unint64_t v26 = (unint64_t)v25 - v5 + 4;
    if ((unint64_t)v25 - v5 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *Color v25 = v19;
      a1[2] = v26;
    }
  }
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, a2 + 4);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithRoundedHole,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v22);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v20);
  int v4 = v21;
  if (!v21)
  {
    unint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v10 = a1[3];
    if (v10 && v9 != 0) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8);
    }
  }
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v18);
  if (!v19)
  {
    unint64_t v6 = (void *)*a1;
    unint64_t v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result)
    {
      if (v12) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v6);
      }
    }
  }
  if (*a1)
  {
    unint64_t m_colorAndFlags = v23;
    if (!v23 || !v4 || (unint64_t m_colorAndFlags = v19) == 0)
    {
      __break(1u);
LABEL_12:
      uint64_t result = (unsigned int *)(m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v6);
      }
      return result;
    }
    long long v13 = v22;
    long long v14 = v20[0];
    long long v15 = v20[1];
    long long v16 = v20[2];
    WebCore::Color::Color((WebCore::Color *)&v17, &v18);
    *(_OWORD *)a2 = v13;
    *(_OWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)(a2 + 48) = v16;
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    *(unsigned char *)(a2 + 72) = 1;
    if ((v17 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 72) = 0;
  }
  if (v19)
  {
    unint64_t m_colorAndFlags = v18.m_colorAndFlags;
    if ((v18.m_colorAndFlags & 0x8000000000000) != 0) {
      goto LABEL_12;
    }
  }
  return result;
}

void sub_198819AC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && (a18 & 0x8000000000000) != 0)
  {
    unint64_t v20 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillLine,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::PathDataLine>(a1, (uint64_t)&v6);
  unint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::PathDataLine>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  while (1)
  {
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v14 = *a1;
      unint64_t v15 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v16 = a1[3];
      if (v16)
      {
        if (v15)
        {
          unsigned __int8 v19 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14);
          uint64_t v9 = 0;
          uint64_t result = v19;
        }
      }
    }
    if (!*a1) {
      break;
    }
    if (v6 && v9)
    {
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = result;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
LABEL_9:
    unint64_t v10 = *a1;
    unint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v12 = a1[3];
    if (v12) {
      BOOL v13 = v11 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  unint64_t v17 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unint64_t *)a1[3];
  if (result && v17)
  {
    Color v18 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v18();
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)&v9);
  if (v11)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = v9;
      *(void *)(a2 + 16) = v10;
      char v5 = 1;
LABEL_4:
      *(unsigned char *)(a2 + 24) = v5;
      return result;
    }
LABEL_10:
    char v5 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_10;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
  if (!*a1) {
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillClosedArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)&v11);
  if (v14)
  {
    if (!*a1) {
      goto LABEL_6;
    }
    LOBYTE(v5) = v11;
    *(_OWORD *)(a2 + 1) = v12;
    *(_DWORD *)(a2 + 17) = v13;
    char v6 = 1;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v9 = a1[3];
    if (v9)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v9 + 16))(v9, v8);
        if (*a1) {
          goto LABEL_14;
        }
      }
    }
LABEL_6:
    while (1)
    {
      unint64_t v10 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = a1[3];
      if (!result || !v10) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      unint64_t v5 = *a1;
      if (!*a1) {
        goto LABEL_8;
      }
LABEL_14:
      __break(1u);
    }
    LOBYTE(v5) = 0;
LABEL_8:
    char v6 = 0;
  }
  *(unsigned char *)a2 = v5;
  *(unsigned char *)(a2 + 24) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PathClosedArc>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = *(_OWORD *)v10;
      *(void *)(a2 + 13) = *(void *)&v10[13];
      *(unsigned char *)(a2 + 24) = 1;
      return result;
    }
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v7 = a1[3];
    if (v7)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v6);
        if (*a1) {
          __break(1u);
        }
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  unint64_t v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result && v8)
  {
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v9();
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillQuadCurve,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode(a1, (uint64_t)&v9);
  if (v11)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = v9;
      *(void *)(a2 + 16) = v10;
      char v5 = 1;
LABEL_4:
      *(unsigned char *)(a2 + 24) = v5;
      return result;
    }
LABEL_10:
    char v5 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unint64_t *)a1[3];
  if (result) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_10;
  }
  uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v6);
  if (!*a1) {
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillBezierCurve,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      long long v5 = v10[1];
      *(_OWORD *)a2 = v10[0];
      *(_OWORD *)(a2 + 16) = v5;
      char v6 = 1;
LABEL_4:
      *(unsigned char *)(a2 + 32) = v6;
      return result;
    }
LABEL_10:
    char v6 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  unint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unint64_t *)a1[3];
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_10;
  }
  uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
  if (!*a1) {
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillPathSegment,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder>(a1, (uint64_t)v17);
  if (!v18)
  {
    unint64_t v7 = *a1;
    unint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v9 = a1[3];
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v9 + 16))(v9, v7);
    }
  }
  if (!*a1)
  {
    unint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v11)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
      unint64_t v5 = *a1;
      if (*a1) {
LABEL_18:
      }
        __break(1u);
    }
    else
    {
      LOBYTE(v5) = 0;
    }
    LOBYTE(v6) = 0;
    goto LABEL_6;
  }
  if (!v18) {
    goto LABEL_18;
  }
  uint64_t result = WebCore::PathSegment::PathSegment();
  LOBYTE(v5) = v13;
  long long v12 = *(_OWORD *)v16;
  HIBYTE(v12) = v16[15];
  unint64_t v6 = *a1;
  if (*a1)
  {
    *(_OWORD *)(a2 + 1) = v14;
    *(_OWORD *)(a2 + 17) = v15;
    *(_OWORD *)(a2 + 33) = v12;
    *(void *)(a2 + 48) = *(void *)&v16[15];
    LOBYTE(v6) = 1;
  }
  else
  {
    LOBYTE(v5) = 0;
  }
LABEL_6:
  *(unsigned char *)a2 = v5;
  *(unsigned char *)(a2 + 56) = v6;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v7 != 0) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  if (*a1)
  {
    if (!v16) {
      __break(1u);
    }
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
    }
  }
  return result;
}

void sub_19881A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
  {
    uint64_t v35 = *(unsigned int *)(v33 + 64);
    if (v35 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::StrokeRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v6);
  uint64_t result = IPC::Decoder::decode<float>(a1);
  unint64_t v5 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  LOBYTE(v5) = v7;
  if (!v7 || (result & 0xFF00000000) == 0)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(_OWORD *)a2 = v6;
  *(_DWORD *)(a2 + 16) = result;
  LOBYTE(v5) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 20) = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::StrokePath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v7 != 0) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  if (*a1)
  {
    if (!v16) {
      __break(1u);
    }
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
    }
  }
  return result;
}

void sub_19881A648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
  {
    uint64_t v35 = *(unsigned int *)(v33 + 64);
    if (v35 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD **)a2;
  v4[2] = *(_DWORD *)(*(void *)a2 + 8) + 1;
  IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(a1, (uint64_t)v4);
  if (v4[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[2];
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  v7[0] = *(_OWORD *)(a2 + 8);
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (float *)v7);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 56));

  return IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(a1, a2 + 64);
}

void sub_19881A7B4(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD **)a2;
  v4[2] = *(_DWORD *)(*(void *)a2 + 8) + 1;
  IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(a1, (uint64_t)v4);
  if (v4[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[2];
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  v15[0] = *(_OWORD *)(a2 + 8);
  v15[1] = v5;
  v15[2] = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, v15);
  uint64_t v6 = a1[2];
  unint64_t v7 = *a1 + v6;
  unint64_t v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v8 >= v7;
  unint64_t v10 = v8 - v7;
  if (v9)
  {
    unint64_t v11 = v10 + v6;
    unint64_t v12 = v11 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v11) = *(_DWORD *)(a2 + 56);
      a1[2] = v12;
    }
  }

  return IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(a1, (_DWORD *)(a2 + 64));
}

void sub_19881A904(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::decode@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  IPC::Decoder::decode<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>(a1, (uint64_t)&v31, a3, a4, a5);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode((unint64_t *)a1, (uint64_t)v29);
  if (!v30)
  {
    uint64_t v14 = *(void *)a1;
    uint64_t v15 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
      }
    }
  }
  uint64_t v7 = IPC::Decoder::decode<float>(a1);
  IPC::Decoder::decode<WebCore::ControlStyle>(a1, (uint64_t)v27);
  if (!*(void *)a1)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 112) = 0;
    goto LABEL_13;
  }
  uint64_t v9 = v32;
  if (!v32 || (uint64_t v9 = v30) == 0 || (v7 & 0xFF00000000) == 0 || (uint64_t v9 = v28) == 0)
  {
    __break(1u);
LABEL_20:
    unint64_t v12 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v8);
    }
    goto LABEL_8;
  }
  WebCore::DisplayList::DrawControlPart::DrawControlPart();
  unint64_t v10 = v17;
  uint64_t v17 = 0;
  *(void *)a2 = v10;
  *(_OWORD *)(a2 + 8) = v18;
  *(_OWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 56) = v21;
  *(void *)(a2 + 64) = v22;
  *(_DWORD *)(a2 + 72) = v23;
  *(_OWORD *)(a2 + 40) = v20;
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_OWORD *)(a2 + 96) = v26;
  *(unsigned char *)(a2 + 112) = 1;
  uint64_t v9 = v25;
  if ((v25 & 0x8000000000000) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((*(void *)v24 & 0x8000000000000) != 0)
  {
    char v13 = (unsigned int *)(*(void *)v24 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v8);
    }
  }
  if (v17)
  {
    if (v17[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
    }
    else {
      --v17[2];
    }
  }
LABEL_13:
  uint64_t result = (_DWORD *)std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v8);
  if (v32)
  {
    uint64_t result = v31;
    unint64_t v31 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  return result;
}

void sub_19881AB98(_Unwind_Exception *a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v20 = *v17;
  if ((*v17 & 0x8000000000000) != 0)
  {
    int v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  uint64_t v22 = *v16;
  *uint64_t v16 = 0;
  if (v22)
  {
    if (v22[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
    }
    else {
      --v22[2];
    }
  }
  if ((a14 & 0x8000000000000) != 0)
  {
    int v23 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  if ((a13 & 0x8000000000000) != 0)
  {
    char v24 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  if (a3)
  {
    if (a3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a3 + 8))(a3);
    }
    else {
      --a3[2];
    }
  }
  std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (*(unsigned char *)(v18 - 40))
  {
    uint64_t v25 = *(_DWORD **)(v18 - 48);
    *(void *)(v18 - 48) = 0;
    if (v25)
    {
      if (v25[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
      }
      else {
        --v25[2];
      }
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ControlPart,void>::decode(a1, a2, a3, a4, a5);
  if (!*(unsigned char *)(a2 + 8)) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19881AD50(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

unsigned int *IPC::Decoder::decode<WebCore::ControlStyle>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ControlStyle,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48)) {
    return (unsigned int *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19881ADA0(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::DocumentEditingContext::TextRectAndRange,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 24));
}

uint64_t IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      BOOL v27 = a2;
      uint64_t v23 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v3);
        a2 = v27;
        uint64_t v14 = *v27;
        unint64_t v13 = v27[1];
        uint64_t result = v23;
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_19;
  }
  uint64_t v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v3 = a2[3];
    if (v3)
    {
      uint64_t v25 = a2;
      uint64_t v21 = result;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v14, v13);
        uint64_t v8 = 0;
        a2 = v25;
        unint64_t v2 = v25[1];
        int v7 = 1;
        uint64_t v3 = *v25;
        uint64_t result = v21;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v8 = 0;
        int v7 = 1;
      }
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v8 = 0;
      int v7 = 1;
    }
    goto LABEL_8;
  }
  int v7 = 0;
  uint64_t v8 = *v6;
LABEL_8:
  unint64_t v9 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v9 || v2 - v9 <= 7)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18)
    {
      unsigned __int8 v28 = a2;
      uint64_t v24 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v3);
        a2 = v28;
        uint64_t v17 = *v28;
        unint64_t v16 = v28[1];
        uint64_t result = v24;
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_22;
  }
  unint64_t v11 = (void *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  a2[2] = v11 + 1;
  if (!v3)
  {
    unint64_t v16 = v2;
    uint64_t v17 = 0;
LABEL_22:
    unint64_t v2 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (!v19) {
      goto LABEL_23;
    }
    long long v26 = a2;
    uint64_t v22 = result;
    if (!v16)
    {
      unint64_t v2 = 0;
      goto LABEL_23;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
    if (!*v26)
    {
      a2 = v26;
      unint64_t v2 = v26[1];
      uint64_t result = v22;
      goto LABEL_23;
    }
LABEL_43:
    __break(1u);
    return result;
  }
  if (v7) {
    goto LABEL_43;
  }
  uint64_t v12 = *v11;
  if (!__CFADD__(v8, *v11))
  {
    *(void *)uint64_t result = v8;
    *(void *)(result + 8) = v12;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
LABEL_23:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v2)
  {
    uint64_t v20 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v20();
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebKit::DocumentEditingContextRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 32);
}

unint64_t *IPC::ArgumentCoder<WebKit::DocumentEditingContextRequest,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = IPC::Decoder::decode<WTF::OptionSet<WebKit::DocumentEditingContextRequest::Options>>(a1);
  unsigned __int16 v5 = IPC::Decoder::decode<WebCore::TextGranularity>(a1);
  unint64_t v6 = IPC::Decoder::decode<long long>((IPC::Decoder *)a1);
  char v8 = v7;
  IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a1, (uint64_t)&v14);
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ElementContext>>((unint64_t *)a1, (uint64_t)v16);
  uint64_t v10 = *a1;
  if (!*a1) {
    goto LABEL_10;
  }
  LOBYTE(v10) = v4;
  if (v4 <= 0xFFu || (LOBYTE(v10) = v5, v5 <= 0xFFu) || !v8 || (LOBYTE(v10) = v15) == 0 || (LOBYTE(v10) = v18) == 0)
  {
    __break(1u);
LABEL_10:
    *(unsigned char *)a2 = 0;
    goto LABEL_8;
  }
  long long v11 = v16[2];
  long long v12 = v16[4];
  *(_OWORD *)(a2 + 80) = v16[3];
  *(_OWORD *)(a2 + 96) = v12;
  *(unsigned char *)(a2 + 112) = v17;
  long long v13 = v16[0];
  *(_OWORD *)(a2 + 48) = v16[1];
  *(_OWORD *)(a2 + 64) = v11;
  *(unsigned char *)a2 = v4;
  *(unsigned char *)(a2 + 1) = v5;
  *(void *)(a2 + 8) = v6;
  LOBYTE(v10) = 1;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = v13;
LABEL_8:
  *(unsigned char *)(a2 + 128) = v10;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::DocumentEditingContextRequest::Options>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::OptionSet<WebKit::DocumentEditingContextRequest::Options>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextGranularity>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TextGranularity,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::optional<WebCore::ElementContext>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 96))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 5);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 10);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 15);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 20);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 25);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 26);
  IPC::VectorArgumentCoder<false,WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 27));

  return IPC::VectorArgumentCoder<false,WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 29));
}

unint64_t IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v5 = a1;
  IPC::Decoder::decode<WebCore::AttributedString>(a1, v72);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v70);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v68);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v66);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v64);
  IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>((uint64_t)&v62, v5);
  unint64_t v7 = IPC::Decoder::decode<unsigned long long>(v5);
  if (!v9) {
    goto LABEL_20;
  }
  unint64_t v10 = v7;
  v74 = 0;
  uint64_t v75 = 0;
  if (v7 >= 0x8000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::DocumentEditingContext::TextRectAndRange>((uint64_t)&v49, (unint64_t *)v5);
      int v8 = v51;
      if (!v51) {
        break;
      }
      int v19 = HIDWORD(v75);
      if (HIDWORD(v75) == v75)
      {
        uint64_t v20 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, HIDWORD(v75) + 1, (unint64_t)&v49);
        int v19 = HIDWORD(v75);
        uint64_t v21 = v74;
        uint64_t v22 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        long long v23 = v20[1];
        *uint64_t v22 = *v20;
      }
      else
      {
        uint64_t v21 = v74;
        uint64_t v22 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        long long v23 = v50;
        *uint64_t v22 = v49;
      }
      v22[1] = v23;
      uint64_t v24 = (v19 + 1);
      HIDWORD(v75) = v19 + 1;
      if (!--v10)
      {
        if (v75 <= v24)
        {
          int v48 = v75;
          char v15 = v21;
          goto LABEL_102;
        }
        if (v19 == -1) {
          goto LABEL_100;
        }
        int v48 = v19 + 1;
        if (v24 >> 27) {
          goto LABEL_106;
        }
        int v2 = (int)a2;
        uint64_t v41 = 32 * v24;
        uint64_t v42 = WTF::fastMalloc((WTF *)(32 * v24));
        char v15 = (WTF *)v42;
        LODWORD(v75) = v48;
        v74 = (WTF *)v42;
        if ((WTF *)v42 == v21)
        {
LABEL_100:
          v74 = 0;
          LODWORD(v75) = 0;
        }
        else
        {
          uint64_t v43 = 0;
          do
          {
            v44 = (_OWORD *)(v42 + v43);
            long long v45 = *(_OWORD *)((char *)v21 + v43 + 16);
            _OWORD *v44 = *(_OWORD *)((char *)v21 + v43);
            v44[1] = v45;
            v43 += 32;
          }
          while (v41 != v43);
          if (!v21)
          {
LABEL_102:
            int v4 = HIDWORD(v75);
            goto LABEL_12;
          }
        }
        WTF::fastFree(v21, v12);
        char v15 = v74;
        int v48 = v75;
        goto LABEL_102;
      }
    }
LABEL_18:
    uint64_t v25 = v74;
    if (v74)
    {
      v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v25, v12);
    }
LABEL_20:
    long long v26 = *(void **)v5;
    uint64_t v27 = *((void *)v5 + 1);
    *(void *)unint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    unint64_t result = *((void *)v5 + 3);
    if (result) {
      goto LABEL_50;
    }
    goto LABEL_21;
  }
  if (v7)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)(32 * v7));
    LODWORD(v75) = v10;
    v74 = (WTF *)v11;
    do
    {
      IPC::Decoder::decode<WebKit::DocumentEditingContext::TextRectAndRange>((uint64_t)&v49, (unint64_t *)v5);
      int v8 = v51;
      if (!v51) {
        goto LABEL_18;
      }
      int v13 = HIDWORD(v75);
      if (HIDWORD(v75) == v75)
      {
        long long v14 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, HIDWORD(v75) + 1, (unint64_t)&v49);
        int v13 = HIDWORD(v75);
        char v15 = v74;
        unint64_t v16 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        long long v17 = v14[1];
        *unint64_t v16 = *v14;
      }
      else
      {
        char v15 = v74;
        unint64_t v16 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        long long v17 = v50;
        *unint64_t v16 = v49;
      }
      v16[1] = v17;
      int v4 = v13 + 1;
      HIDWORD(v75) = v13 + 1;
      --v10;
    }
    while (v10);
    int v48 = v75;
  }
  else
  {
    int v4 = 0;
    int v48 = 0;
    char v15 = 0;
  }
LABEL_12:
  for (int i = 0; ; int i = 1)
  {
    unint64_t result = IPC::Decoder::decode<unsigned long long>(v5);
    if ((_BYTE)v26) {
      break;
    }
LABEL_68:
    long long v26 = *(void **)v5;
    uint64_t v39 = *((void *)v5 + 1);
    *(void *)unint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    unint64_t result = *((void *)v5 + 3);
    if (!result
      || !v39
      || (unint64_t result = (*(uint64_t (**)(unint64_t, void *))(*(void *)result + 16))(result, v26),
          !*(void *)v5))
    {
LABEL_69:
      *a2 = 0;
      a2[248] = 0;
      goto LABEL_70;
    }
    int v47 = i;
    uint64_t v32 = (uint64_t)a2;
    unsigned __int8 v30 = 0;
    int v46 = 1;
LABEL_36:
    int v8 = v73;
    if (v73)
    {
      unint64_t v5 = (IPC::Decoder *)&v49;
      unint64_t result = WebCore::AttributedString::AttributedString();
      int v8 = v71;
      if (v71)
      {
        unint64_t v5 = (IPC::Decoder *)v52;
        unint64_t result = WebCore::AttributedString::AttributedString();
        int v8 = v69;
        if (v69)
        {
          unint64_t result = WebCore::AttributedString::AttributedString();
          int v8 = v67;
          if (v67)
          {
            a2 = v54;
            unint64_t result = WebCore::AttributedString::AttributedString();
            int v8 = v65;
            if (v65)
            {
              unint64_t result = WebCore::AttributedString::AttributedString();
              int v8 = v63;
              if (v63)
              {
                *(_OWORD *)&v55[40] = v62;
                int v8 = v47;
                if (!v47)
                {
                  v56 = v15;
                  int v57 = v48;
                  int v58 = v4;
                  int v8 = v46;
                  if (!v46)
                  {
                    v59 = v30;
                    int v60 = v2;
                    int v61 = v3;
                    WebKit::DocumentEditingContext::DocumentEditingContext(v32, (uint64_t)&v49);
                    *(unsigned char *)(v32 + 248) = 1;
                    v34 = v59;
                    if (v59)
                    {
                      v59 = 0;
                      int v60 = 0;
                      WTF::fastFree(v34, v33);
                    }
                    uint64_t v35 = v56;
                    if (v56)
                    {
                      v56 = 0;
                      int v57 = 0;
                      WTF::fastFree(v35, v33);
                    }
                    MEMORY[0x199732DE0](v55);
                    MEMORY[0x199732DE0](v54);
                    MEMORY[0x199732DE0](&v53);
                    MEMORY[0x199732DE0](v52);
                    unint64_t result = MEMORY[0x199732DE0](&v49);
                    goto LABEL_75;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_50:
    if (v27) {
      (*(void (**)(unint64_t, void *))(*(void *)result + 16))(result, v26);
    }
LABEL_21:
    char v15 = 0;
    int v48 = v8;
  }
  unint64_t v29 = result;
  v74 = 0;
  uint64_t v75 = 0;
  if (result >= 0x10000)
  {
    v36 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      unint64_t result = IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>((uint64_t)&v49, v5);
      if (!(_BYTE)v50) {
        break;
      }
      if (v3 == v75)
      {
        unint64_t result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v3 + 1, (unint64_t)&v49);
        int v37 = HIDWORD(v75);
        v36 = v74;
        *((_OWORD *)v74 + HIDWORD(v75)) = *(_OWORD *)result;
      }
      else
      {
        *((_OWORD *)v36 + v3) = v49;
        int v37 = HIDWORD(v75);
      }
      uint64_t v3 = (v37 + 1);
      HIDWORD(v75) = v37 + 1;
      if (!--v29)
      {
        int v2 = v75;
        if (v75 <= v3) {
          goto LABEL_105;
        }
        if (v37 == -1) {
          goto LABEL_103;
        }
        if (!(v3 >> 28))
        {
          unint64_t result = WTF::fastMalloc((WTF *)(16 * v3));
          LODWORD(v75) = v3;
          v74 = (WTF *)result;
          if ((WTF *)result != v36)
          {
            uint64_t v38 = 0;
            do
            {
              *(_OWORD *)(result + v38) = *(_OWORD *)((char *)v36 + v38);
              v38 += 16;
            }
            while (16 * v3 != v38);
            int v2 = v3;
            if (!v36)
            {
LABEL_105:
              unsigned __int8 v30 = v74;
              goto LABEL_32;
            }
LABEL_104:
            unint64_t result = WTF::fastFree(v36, v26);
            int v2 = v75;
            LODWORD(v3) = HIDWORD(v75);
            goto LABEL_105;
          }
LABEL_103:
          v74 = 0;
          LODWORD(v75) = 0;
          goto LABEL_104;
        }
LABEL_106:
        __break(0xC471u);
        JUMPOUT(0x19881BB6CLL);
      }
    }
    unsigned __int8 v30 = v74;
    if (v74)
    {
LABEL_67:
      v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v30, v26);
    }
    goto LABEL_68;
  }
  if (!result)
  {
    if (!*(void *)v5) {
      goto LABEL_69;
    }
    int v46 = 0;
    int v47 = i;
    uint64_t v32 = (uint64_t)a2;
    unsigned __int8 v30 = 0;
    int v2 = 0;
    LODWORD(v3) = 0;
    goto LABEL_36;
  }
  unsigned __int8 v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * result));
  LODWORD(v3) = 0;
  LODWORD(v75) = v29;
  v74 = v30;
  do
  {
    unint64_t result = IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>((uint64_t)&v49, v5);
    if (!(_BYTE)v50) {
      goto LABEL_67;
    }
    if (v3 == v75)
    {
      unint64_t result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v3 + 1, (unint64_t)&v49);
      int v31 = HIDWORD(v75);
      unsigned __int8 v30 = v74;
      *((_OWORD *)v74 + HIDWORD(v75)) = *(_OWORD *)result;
    }
    else
    {
      *((_OWORD *)v30 + v3) = v49;
      int v31 = HIDWORD(v75);
    }
    LODWORD(v3) = v31 + 1;
    HIDWORD(v75) = v31 + 1;
    --v29;
  }
  while (v29);
  int v2 = v75;
LABEL_32:
  if (*(void *)v5)
  {
    int v46 = 0;
    int v47 = i;
    uint64_t v32 = (uint64_t)a2;
    goto LABEL_36;
  }
  *a2 = 0;
  a2[248] = 0;
  if (v30) {
    unint64_t result = WTF::fastFree(v30, v26);
  }
LABEL_70:
  if (v15) {
    char v40 = i;
  }
  else {
    char v40 = 1;
  }
  if ((v40 & 1) == 0) {
    unint64_t result = WTF::fastFree(v15, v26);
  }
LABEL_75:
  if (v65) {
    unint64_t result = MEMORY[0x199732DE0](v64);
  }
  if (v67) {
    unint64_t result = MEMORY[0x199732DE0](v66);
  }
  if (v69) {
    unint64_t result = MEMORY[0x199732DE0](v68);
  }
  if (v71) {
    unint64_t result = MEMORY[0x199732DE0](v70);
  }
  if (v73) {
    return MEMORY[0x199732DE0](v72);
  }
  return result;
}

void sub_19881BB78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF *a40,int a41,WTF *a42,int a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  unsigned __int8 v65 = *(WTF **)(v63 - 104);
  if (v65) {
    WTF::fastFree(v65, a2);
  }
  char v66 = v62;
  if (!v61) {
    char v66 = 1;
  }
  if ((v66 & 1) == 0) {
    WTF::fastFree(v61, a2);
  }
  if (a52) {
    MEMORY[0x199732DE0](&a47);
  }
  if (a61) {
    MEMORY[0x199732DE0](&a54);
  }
  if (*(unsigned char *)(v63 - 208)) {
    MEMORY[0x199732DE0](v63 - 248);
  }
  if (*(unsigned char *)(v63 - 160)) {
    MEMORY[0x199732DE0](v63 - 200);
  }
  if (*(unsigned char *)(v63 - 112)) {
    MEMORY[0x199732DE0](v63 - 152);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebKit::EditingRange,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    BOOL v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      unint64_t v8 = *v6;
      goto LABEL_8;
    }
    unint64_t v8 = v2;
    uint64_t v15 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v15 = 0;
    *unint64_t result = 0;
    result[1] = 0;
    long long v12 = (void *)result[3];
    if (v12) {
      goto LABEL_30;
    }
  }
  while (1)
  {
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (!v16)
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      unint64_t v8 = 0;
LABEL_21:
      int v7 = 1;
      goto LABEL_8;
    }
    uint64_t v22 = result;
    uint64_t v25 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v15, v8);
      unint64_t v8 = 0;
      unint64_t result = v22;
      a2 = v25;
      uint64_t v3 = *v22;
      unint64_t v2 = v22[1];
      goto LABEL_21;
    }
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    int v7 = 1;
LABEL_8:
    unint64_t v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7) {
      break;
    }
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v19 = result[3];
    if (v19)
    {
      uint64_t v24 = result;
      uint64_t v28 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        unint64_t result = v24;
        a2 = v28;
        uint64_t v18 = *v24;
        unint64_t v17 = v24[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
LABEL_23:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v20 = result[3];
    if (!v20
      || !v17
      || (uint64_t v21 = result,
          uint64_t v26 = a2,
          unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)v20 + 16))(result[3], v18, v17), a2 = v26, !*v21))
    {
      char v14 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_17;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    long long v23 = result;
    uint64_t v27 = a2;
    if (v2)
    {
      (*(void (**)(void *))(*v12 + 16))(v12);
      unint64_t result = v23;
      a2 = v27;
      uint64_t v15 = *v23;
      unint64_t v8 = v23[1];
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v15 = 0;
    }
  }
  uint64_t v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = v11 + 1;
  result[2] = v11 + 1;
  if (!v3)
  {
    unint64_t v17 = v2;
    uint64_t v18 = 0;
    goto LABEL_23;
  }
  if (v7) {
    goto LABEL_29;
  }
  uint64_t v13 = *v11;
  if (__CFADD__(v8, v13))
  {
    __break(0xC471u);
    JUMPOUT(0x19881BF4CLL);
  }
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v13;
  char v14 = 1;
LABEL_17:
  *(unsigned char *)(a2 + 16) = v14;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebKit::EditorState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 9));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 10));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 11));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 12));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 13));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 14));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 15));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 17));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 18));
  IPC::ArgumentCoder<std::optional<WebKit::EditorState::PostLayoutData>,void>::encode<IPC::Encoder,std::optional<WebKit::EditorState::PostLayoutData> const&>(a1, a2 + 32);

  return IPC::ArgumentCoder<std::optional<WebKit::EditorState::VisualData>,void>::encode<IPC::Encoder,std::optional<WebKit::EditorState::VisualData> const&>(a1, a2 + 352);
}

void IPC::ArgumentCoder<WebKit::EditorState,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1;
  uint64_t v479 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    int v7 = (uint64_t *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      uint64_t v413 = *v7;
      if (*v7 == -1) {
        goto LABEL_255;
      }
      char v412 = 1;
      goto LABEL_9;
    }
    unint64_t v176 = v3;
    uint64_t v177 = 0;
  }
  else
  {
    unint64_t v176 = 0;
    uint64_t v177 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v148 = a1[3];
    if (v148) {
      goto LABEL_523;
    }
  }
  while (1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v178 = v2[3];
    if (v178)
    {
      if (v176)
      {
        uint64_t v148 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v178 + 16))(v178, v177, v176);
        if (*v2) {
          goto LABEL_522;
        }
        uint64_t v4 = 0;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
LABEL_255:
    uint64_t v179 = 0;
    char v412 = 0;
    uint64_t v413 = 0;
    unint64_t v180 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v181 = v2[3];
    if (!v181) {
      goto LABEL_256;
    }
    if (!v3)
    {
      uint64_t v179 = 0;
      char v412 = 0;
      uint64_t v413 = 0;
      unint64_t v180 = 0;
LABEL_256:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v182 = v2[3];
      if (v182 && v180)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v182 + 16))(v182, v179, v180);
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
      goto LABEL_258;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v181 + 16))(v181, v4, v3, 0);
    char v412 = 0;
    uint64_t v413 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
LABEL_9:
    if (v3 <= v2[2] - v4)
    {
      uint64_t v179 = v4;
      unint64_t v180 = v3;
      goto LABEL_256;
    }
    unint64_t v8 = (unsigned __int8 *)v2[2];
    unint64_t v9 = v8 + 1;
    v2[2] = (uint64_t)(v8 + 1);
    if (v4)
    {
      unsigned int v10 = *v8;
      if (v10 < 2)
      {
        int v401 = 0;
        char v11 = 1;
        goto LABEL_13;
      }
      goto LABEL_261;
    }
LABEL_258:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v183 = v2[3];
    if (!v183)
    {
      unint64_t v3 = 0;
LABEL_260:
      uint64_t v4 = 0;
      unsigned int v10 = 0;
      goto LABEL_261;
    }
    if (!v3) {
      goto LABEL_260;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v183 + 16))(v183, v4);
    unsigned int v10 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
LABEL_261:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v184 = v2[3];
    if (!v184 || !v3)
    {
      char v411 = 0;
      unint64_t v185 = 0;
      uint64_t v4 = 0;
      int v401 = 1;
LABEL_263:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v186 = v2[3];
      if (v186 && v185)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v186 + 16))(v186, v4, v185);
        unsigned int v15 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v15 = 0;
      }
      goto LABEL_265;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v184 + 16))(v184, v4);
    char v11 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v401 = 1;
    unint64_t v9 = (unsigned __int8 *)v2[2];
LABEL_13:
    if (!v10) {
      char v11 = 0;
    }
    char v411 = v11;
    unint64_t v12 = (unint64_t)&v9[-v4];
    if (v3 <= v12)
    {
      unint64_t v185 = 0;
      uint64_t v340 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v340 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v340 + 16))(v340);
        uint64_t v4 = *v2;
        unint64_t v185 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_263;
    }
    uint64_t v13 = (unsigned __int8 *)(v4 + v12);
    uint64_t v14 = v4 + v12 + 1;
    v2[2] = v14;
    if (!v4)
    {
      unint64_t v185 = v3;
      goto LABEL_263;
    }
    unsigned int v15 = *v13;
    if (v15 < 2)
    {
      int v410 = 0;
      char v16 = 1;
      goto LABEL_19;
    }
LABEL_265:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v187 = v2[3];
    if (!v187 || !v3)
    {
      char v400 = 0;
      unint64_t v188 = 0;
      uint64_t v4 = 0;
      int v410 = 1;
LABEL_267:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v189 = v2[3];
      if (v189 && v188)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v189 + 16))(v189, v4, v188);
        unsigned int v20 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v20 = 0;
      }
      goto LABEL_269;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v187 + 16))(v187, v4);
    char v16 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v410 = 1;
    uint64_t v14 = v2[2];
LABEL_19:
    if (!v15) {
      char v16 = 0;
    }
    char v400 = v16;
    unint64_t v17 = v14 - v4;
    if (v3 <= v17)
    {
      unint64_t v188 = 0;
      uint64_t v339 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v339 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v339 + 16))(v339);
        uint64_t v4 = *v2;
        unint64_t v188 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_267;
    }
    uint64_t v18 = (unsigned __int8 *)(v4 + v17);
    uint64_t v19 = v4 + v17 + 1;
    v2[2] = v19;
    if (!v4)
    {
      unint64_t v188 = v3;
      goto LABEL_267;
    }
    unsigned int v20 = *v18;
    if (v20 < 2)
    {
      int v399 = 0;
      char v21 = 1;
      goto LABEL_25;
    }
LABEL_269:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v190 = v2[3];
    if (!v190 || !v3)
    {
      char v409 = 0;
      unint64_t v191 = 0;
      uint64_t v4 = 0;
      int v399 = 1;
LABEL_271:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v192 = v2[3];
      if (v192 && v191)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v192 + 16))(v192, v4, v191);
        unsigned int v25 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v25 = 0;
      }
      goto LABEL_273;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v190 + 16))(v190, v4);
    char v21 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v399 = 1;
    uint64_t v19 = v2[2];
LABEL_25:
    if (!v20) {
      char v21 = 0;
    }
    char v409 = v21;
    unint64_t v22 = v19 - v4;
    if (v3 <= v22)
    {
      unint64_t v191 = 0;
      uint64_t v338 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v338 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v338 + 16))(v338);
        uint64_t v4 = *v2;
        unint64_t v191 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_271;
    }
    long long v23 = (unsigned __int8 *)(v4 + v22);
    uint64_t v24 = v4 + v22 + 1;
    v2[2] = v24;
    if (!v4)
    {
      unint64_t v191 = v3;
      goto LABEL_271;
    }
    unsigned int v25 = *v23;
    if (v25 < 2)
    {
      int v408 = 0;
      char v26 = 1;
      goto LABEL_31;
    }
LABEL_273:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v193 = v2[3];
    if (!v193 || !v3)
    {
      char v398 = 0;
      unint64_t v194 = 0;
      uint64_t v4 = 0;
      int v408 = 1;
LABEL_275:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v195 = v2[3];
      if (v195 && v194)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v195 + 16))(v195, v4, v194);
        unsigned int v30 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v30 = 0;
      }
      goto LABEL_277;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v193 + 16))(v193, v4);
    char v26 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v408 = 1;
    uint64_t v24 = v2[2];
LABEL_31:
    if (!v25) {
      char v26 = 0;
    }
    char v398 = v26;
    unint64_t v27 = v24 - v4;
    if (v3 <= v27)
    {
      unint64_t v194 = 0;
      uint64_t v337 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v337 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v337 + 16))(v337);
        uint64_t v4 = *v2;
        unint64_t v194 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_275;
    }
    uint64_t v28 = (unsigned __int8 *)(v4 + v27);
    uint64_t v29 = v4 + v27 + 1;
    v2[2] = v29;
    if (!v4)
    {
      unint64_t v194 = v3;
      goto LABEL_275;
    }
    unsigned int v30 = *v28;
    if (v30 < 2)
    {
      int v397 = 0;
      char v31 = 1;
      goto LABEL_37;
    }
LABEL_277:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v196 = v2[3];
    if (!v196 || !v3)
    {
      char v407 = 0;
      unint64_t v197 = 0;
      uint64_t v4 = 0;
      int v397 = 1;
LABEL_279:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v198 = v2[3];
      if (v198 && v197)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v198 + 16))(v198, v4, v197);
        unsigned int v35 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v35 = 0;
      }
      goto LABEL_281;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v196 + 16))(v196, v4);
    char v31 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v397 = 1;
    uint64_t v29 = v2[2];
LABEL_37:
    if (!v30) {
      char v31 = 0;
    }
    char v407 = v31;
    unint64_t v32 = v29 - v4;
    if (v3 <= v32)
    {
      unint64_t v197 = 0;
      uint64_t v336 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v336 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v336 + 16))(v336);
        uint64_t v4 = *v2;
        unint64_t v197 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_279;
    }
    uint64_t v33 = (unsigned __int8 *)(v4 + v32);
    uint64_t v34 = v4 + v32 + 1;
    v2[2] = v34;
    if (!v4)
    {
      unint64_t v197 = v3;
      goto LABEL_279;
    }
    unsigned int v35 = *v33;
    if (v35 < 2)
    {
      int v396 = 0;
      char v36 = 1;
      goto LABEL_43;
    }
LABEL_281:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v199 = v2[3];
    if (!v199 || !v3)
    {
      char v406 = 0;
      unint64_t v200 = 0;
      uint64_t v4 = 0;
      int v396 = 1;
LABEL_283:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v201 = v2[3];
      if (v201 && v200)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v201 + 16))(v201, v4, v200);
        unsigned int v40 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v40 = 0;
      }
      goto LABEL_285;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v199 + 16))(v199, v4);
    char v36 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v396 = 1;
    uint64_t v34 = v2[2];
LABEL_43:
    if (!v35) {
      char v36 = 0;
    }
    char v406 = v36;
    unint64_t v37 = v34 - v4;
    if (v3 <= v37)
    {
      unint64_t v200 = 0;
      uint64_t v335 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v335 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v335 + 16))(v335);
        uint64_t v4 = *v2;
        unint64_t v200 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_283;
    }
    uint64_t v38 = (unsigned __int8 *)(v4 + v37);
    uint64_t v39 = v4 + v37 + 1;
    v2[2] = v39;
    if (!v4)
    {
      unint64_t v200 = v3;
      goto LABEL_283;
    }
    unsigned int v40 = *v38;
    if (v40 < 2)
    {
      int v405 = 0;
      char v41 = 1;
      goto LABEL_49;
    }
LABEL_285:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v202 = v2[3];
    if (!v202 || !v3)
    {
      char v395 = 0;
      unint64_t v203 = 0;
      uint64_t v4 = 0;
      int v405 = 1;
LABEL_287:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v204 = v2[3];
      if (v204 && v203)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v204 + 16))(v204, v4, v203);
        unsigned int v45 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v45 = 0;
      }
      goto LABEL_289;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v202 + 16))(v202, v4);
    char v41 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v405 = 1;
    uint64_t v39 = v2[2];
LABEL_49:
    if (!v40) {
      char v41 = 0;
    }
    char v395 = v41;
    unint64_t v42 = v39 - v4;
    if (v3 <= v42)
    {
      unint64_t v203 = 0;
      uint64_t v334 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v334 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v334 + 16))(v334);
        uint64_t v4 = *v2;
        unint64_t v203 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_287;
    }
    uint64_t v43 = (unsigned __int8 *)(v4 + v42);
    uint64_t v44 = v4 + v42 + 1;
    v2[2] = v44;
    if (!v4)
    {
      unint64_t v203 = v3;
      goto LABEL_287;
    }
    unsigned int v45 = *v43;
    if (v45 < 2)
    {
      int v394 = 0;
      char v46 = 1;
      goto LABEL_55;
    }
LABEL_289:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v205 = v2[3];
    if (!v205 || !v3)
    {
      unint64_t v206 = 0;
      uint64_t v4 = 0;
      char v393 = 0;
      int v394 = 1;
LABEL_291:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v207 = v2[3];
      if (v207 && v206)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v207 + 16))(v207, v4, v206);
        unsigned int v50 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v50 = 0;
      }
      goto LABEL_293;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v205 + 16))(v205, v4);
    char v46 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v394 = 1;
    uint64_t v44 = v2[2];
LABEL_55:
    if (!v45) {
      char v46 = 0;
    }
    char v393 = v46;
    unint64_t v47 = v44 - v4;
    if (v3 <= v47)
    {
      unint64_t v206 = 0;
      uint64_t v333 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v333 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v333 + 16))(v333);
        uint64_t v4 = *v2;
        unint64_t v206 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_291;
    }
    int v48 = (unsigned __int8 *)(v4 + v47);
    uint64_t v49 = v4 + v47 + 1;
    v2[2] = v49;
    if (!v4)
    {
      unint64_t v206 = v3;
      goto LABEL_291;
    }
    unsigned int v50 = *v48;
    if (v50 < 2)
    {
      int v392 = 0;
      char v51 = 1;
      goto LABEL_61;
    }
LABEL_293:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v208 = v2[3];
    if (!v208 || !v3)
    {
      unint64_t v209 = 0;
      uint64_t v4 = 0;
      char v391 = 0;
      int v392 = 1;
LABEL_295:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v210 = v2[3];
      if (v210 && v209)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v210 + 16))(v210, v4, v209);
        unsigned int v55 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v55 = 0;
      }
      goto LABEL_297;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v208 + 16))(v208, v4);
    char v51 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v392 = 1;
    uint64_t v49 = v2[2];
LABEL_61:
    if (!v50) {
      char v51 = 0;
    }
    char v391 = v51;
    unint64_t v52 = v49 - v4;
    if (v3 <= v52)
    {
      unint64_t v209 = 0;
      uint64_t v332 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v332 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v332 + 16))(v332);
        uint64_t v4 = *v2;
        unint64_t v209 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_295;
    }
    uint64_t v53 = (unsigned __int8 *)(v4 + v52);
    uint64_t v54 = v4 + v52 + 1;
    v2[2] = v54;
    if (!v4)
    {
      unint64_t v209 = v3;
      goto LABEL_295;
    }
    unsigned int v55 = *v53;
    if (v55 < 2)
    {
      int v404 = 0;
      char v56 = 1;
      goto LABEL_67;
    }
LABEL_297:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v211 = v2[3];
    if (!v211 || !v3)
    {
      unint64_t v212 = 0;
      uint64_t v4 = 0;
      char v403 = 0;
      int v404 = 1;
LABEL_299:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v213 = v2[3];
      if (v213 && v212)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v213 + 16))(v213, v4, v212);
        unsigned int v59 = 0;
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        unsigned int v59 = 0;
      }
      goto LABEL_301;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v211 + 16))(v211, v4);
    char v56 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v404 = 1;
    uint64_t v54 = v2[2];
LABEL_67:
    if (!v55) {
      char v56 = 0;
    }
    char v403 = v56;
    unint64_t v57 = v54 - v4;
    if (v3 <= v57)
    {
      unint64_t v212 = 0;
      uint64_t v331 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v331 && v3)
      {
        (*(void (**)(uint64_t))(*(void *)v331 + 16))(v331);
        uint64_t v4 = *v2;
        unint64_t v212 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_299;
    }
    int v58 = (unsigned __int8 *)(v4 + v57);
    v2[2] = (uint64_t)(v58 + 1);
    if (!v4)
    {
      unint64_t v212 = v3;
      goto LABEL_299;
    }
    unsigned int v59 = *v58;
    if (v59 < 2)
    {
      int v402 = 0;
      char v60 = 1;
      goto LABEL_73;
    }
LABEL_301:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v214 = v2[3];
    if (!v214 || !v3)
    {
      uint64_t v4 = 0;
      char v390 = 0;
      unint64_t v3 = 0;
      int v402 = 1;
LABEL_303:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v215 = v2[3];
      if (v215)
      {
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v215 + 16))(v215, v4);
          uint64_t v216 = *v2;
          unint64_t v3 = v2[1];
        }
        else
        {
          uint64_t v216 = 0;
        }
      }
      else
      {
        uint64_t v216 = 0;
        unint64_t v3 = 0;
      }
LABEL_305:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v217 = v2[3];
      if (v217)
      {
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v217 + 16))(v217, v216);
          uint64_t v4 = *v2;
          unint64_t v3 = v2[1];
        }
        else
        {
          uint64_t v4 = 0;
        }
      }
      else
      {
        uint64_t v4 = 0;
        unint64_t v3 = 0;
      }
LABEL_307:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v218 = v2[3];
      if (v218 && v3) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v218 + 16))(v218, v4);
      }
LABEL_308:
      v453[0] = 0;
      char v455 = 0;
      goto LABEL_309;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v214 + 16))(v214, v4);
    char v60 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v402 = 1;
LABEL_73:
    if (!v59) {
      char v60 = 0;
    }
    char v390 = v60;
    if (v3 <= v2[2] - v4) {
      goto LABEL_303;
    }
    int v61 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v61 + 1);
    if (!v4)
    {
      uint64_t v216 = 0;
      goto LABEL_305;
    }
    if (*v61 >= 2u) {
      goto LABEL_307;
    }
    if (!*v61)
    {
      LOBYTE(v433) = 0;
      char v443 = 0;
      std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100](v453, (uint64_t)&v433);
      goto LABEL_251;
    }
    if (v3 <= (unint64_t)&v61[-v4 + 1])
    {
      unint64_t v253 = 0;
      uint64_t v254 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v255 = v2[3];
      if (v255)
      {
        (*(void (**)(uint64_t))(*(void *)v255 + 16))(v255);
        unint64_t v253 = 0;
        uint64_t v341 = *v2;
        uint64_t v342 = v2[1];
        uint64_t v343 = v2[3];
        *unint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v254 = 0;
        if (v343)
        {
          if (v342)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v343 + 16))(v343, v341);
            uint64_t v254 = *v2;
            unint64_t v253 = v2[1];
          }
        }
      }
    }
    else
    {
      v2[2] = (uint64_t)(v61 + 2);
      unsigned int v62 = v61[1];
      if (v62 < 0x10)
      {
        unsigned int v388 = v62 | 0x100;
        goto LABEL_82;
      }
      unint64_t v253 = v3;
      uint64_t v254 = v4;
    }
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v256 = v2[3];
    if (v256 && v253)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v256 + 16))(v256, v254, v253);
      unsigned int v388 = 0;
      uint64_t v4 = *v2;
      unint64_t v3 = v2[1];
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      unsigned int v388 = 0;
    }
LABEL_82:
    unint64_t v63 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v63 || v3 - v63 <= 7)
    {
      unint64_t v263 = 0;
      uint64_t v264 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v265 = v2[3];
      if (v265)
      {
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v265 + 16))(v265);
          uint64_t v264 = *v2;
          unint64_t v263 = v2[1];
        }
        else
        {
          unint64_t v263 = 0;
          uint64_t v264 = 0;
        }
      }
    }
    else
    {
      v64 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      unsigned __int8 v65 = v64 + 1;
      v2[2] = (uint64_t)(v64 + 1);
      if (v4)
      {
        int v387 = 0;
        uint64_t v386 = *v64;
        goto LABEL_86;
      }
      unint64_t v263 = v3;
      uint64_t v264 = 0;
    }
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v266 = v2[3];
    if (!v266)
    {
      uint64_t v386 = 0;
      unint64_t v263 = 0;
LABEL_442:
      uint64_t v4 = 0;
      int v387 = 1;
LABEL_443:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v267 = v2[3];
      if (v267 && v263)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v267 + 16))(v267, v4, v263);
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
      goto LABEL_445;
    }
    if (!v263)
    {
      uint64_t v386 = 0;
      goto LABEL_442;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v266 + 16))(v266, v264, v263);
    uint64_t v386 = 0;
    uint64_t v4 = *v2;
    unint64_t v3 = v2[1];
    int v387 = 1;
    unsigned __int8 v65 = (void *)v2[2];
LABEL_86:
    unint64_t v66 = (unint64_t)v65 - v4;
    if (v3 <= v66)
    {
      unint64_t v263 = 0;
      uint64_t v347 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v3 && v347)
      {
        (*(void (**)(uint64_t))(*(void *)v347 + 16))(v347);
        uint64_t v4 = *v2;
        unint64_t v263 = v2[1];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_443;
    }
    unsigned __int8 v67 = (unsigned __int8 *)(v4 + v66);
    v2[2] = (uint64_t)(v67 + 1);
    if (!v4)
    {
      unint64_t v263 = v3;
      goto LABEL_443;
    }
    unsigned int v68 = *v67;
    if (v68 < 5)
    {
      unsigned int v385 = v68 | 0x100;
      goto LABEL_90;
    }
LABEL_445:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v268 = v2[3];
    if (v268 && v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v268 + 16))(v268, v4);
    }
    unsigned int v385 = 0;
LABEL_90:
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v421);
    unint64_t v69 = v2[1];
    if (!(_BYTE)v422)
    {
      uint64_t v257 = 0;
      uint64_t v258 = 0;
      uint64_t v259 = *v2;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v260 = v2[3];
      if (!v260) {
        goto LABEL_436;
      }
      if (!v69)
      {
        uint64_t v257 = 0;
        uint64_t v258 = 0;
LABEL_436:
        unint64_t v69 = 0;
        uint64_t v70 = 0;
        *unint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v261 = v2[3];
        if (v261)
        {
          if (v257)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v261 + 16))(v261, v258, v257);
            uint64_t v70 = *v2;
            unint64_t v69 = v2[1];
          }
          else
          {
            unint64_t v69 = 0;
            uint64_t v70 = 0;
          }
        }
        goto LABEL_437;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v260 + 16))(v260, v259);
      unint64_t v69 = v2[1];
    }
    uint64_t v70 = *v2;
    unint64_t v71 = v2[2] - *v2;
    if (v69 <= v71)
    {
      uint64_t v257 = 0;
      uint64_t v344 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v258 = 0;
      if (v69 && v344)
      {
        (*(void (**)(uint64_t))(*(void *)v344 + 16))(v344);
        uint64_t v258 = *v2;
        uint64_t v257 = v2[1];
      }
      goto LABEL_436;
    }
    v72 = (unsigned __int8 *)(v70 + v71);
    v2[2] = (uint64_t)(v72 + 1);
    if (!v70)
    {
      uint64_t v257 = v69;
      uint64_t v258 = 0;
      goto LABEL_436;
    }
    unsigned int v73 = *v72;
    if (v73 < 3)
    {
      unsigned int v384 = v73 | 0x100;
      goto LABEL_95;
    }
LABEL_437:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v262 = v2[3];
    if (v262 && v69) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v262 + 16))(v262, v70);
    }
    unsigned int v384 = 0;
LABEL_95:
    unsigned __int16 v383 = IPC::Decoder::decode<WebCore::WritingDirection>(v2);
    unint64_t v74 = v2[1];
    uint64_t v75 = *v2;
    unint64_t v76 = v2[2] - *v2;
    if (v74 <= v76)
    {
      uint64_t v269 = 0;
      uint64_t v270 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v271 = v2[3];
      if (v271)
      {
        if (v74)
        {
          (*(void (**)(uint64_t))(*(void *)v271 + 16))(v271);
          uint64_t v270 = *v2;
          uint64_t v269 = v2[1];
        }
        else
        {
          uint64_t v269 = 0;
          uint64_t v270 = 0;
        }
      }
      goto LABEL_448;
    }
    v77 = (unsigned __int8 *)(v75 + v76);
    uint64_t v78 = v75 + v76 + 1;
    v2[2] = v78;
    if (!v75)
    {
      uint64_t v269 = v74;
      uint64_t v270 = 0;
LABEL_448:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v272 = v2[3];
      if (v272 && v269)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v272 + 16))(v272, v270, v269);
        unsigned int v79 = 0;
        uint64_t v75 = *v2;
        unint64_t v74 = v2[1];
      }
      else
      {
        unint64_t v74 = 0;
        uint64_t v75 = 0;
        unsigned int v79 = 0;
      }
      goto LABEL_450;
    }
    unsigned int v79 = *v77;
    if (v79 < 2)
    {
      int v382 = 0;
      char v80 = 1;
      goto LABEL_99;
    }
LABEL_450:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v273 = v2[3];
    if (!v273 || !v74)
    {
      uint64_t v274 = 0;
      uint64_t v75 = 0;
      char v381 = 0;
      int v382 = 1;
LABEL_452:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v275 = v2[3];
      if (v275 && v274)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v275 + 16))(v275, v75, v274);
        unsigned int v83 = 0;
        uint64_t v75 = *v2;
        unint64_t v74 = v2[1];
      }
      else
      {
        unint64_t v74 = 0;
        uint64_t v75 = 0;
        unsigned int v83 = 0;
      }
      goto LABEL_454;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v273 + 16))(v273, v75);
    char v80 = 0;
    uint64_t v75 = *v2;
    unint64_t v74 = v2[1];
    int v382 = 1;
    uint64_t v78 = v2[2];
LABEL_99:
    if (!v79) {
      char v80 = 0;
    }
    char v381 = v80;
    unint64_t v81 = v78 - v75;
    if (v74 <= v81)
    {
      uint64_t v274 = 0;
      uint64_t v348 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v74 && v348)
      {
        (*(void (**)(uint64_t))(*(void *)v348 + 16))(v348);
        uint64_t v75 = *v2;
        uint64_t v274 = v2[1];
      }
      else
      {
        uint64_t v75 = 0;
      }
      goto LABEL_452;
    }
    v82 = (unsigned __int8 *)(v75 + v81);
    v2[2] = (uint64_t)(v82 + 1);
    if (!v75)
    {
      uint64_t v274 = v74;
      goto LABEL_452;
    }
    unsigned int v83 = *v82;
    if (v83 < 2)
    {
      int v380 = 0;
      char v84 = 1;
      goto LABEL_105;
    }
LABEL_454:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v276 = v2[3];
    if (v276 && v74) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v276 + 16))(v276, v75);
    }
    char v84 = 0;
    int v380 = 1;
LABEL_105:
    if (!v83) {
      char v84 = 0;
    }
    char v379 = v84;
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v431);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)v429);
    unint64_t v378 = IPC::Decoder::decode<char32_t>(v2);
    unint64_t v377 = IPC::Decoder::decode<char32_t>(v2);
    unint64_t v376 = IPC::Decoder::decode<char32_t>(v2);
    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, (uint64_t)&v424);
    unint64_t v85 = v2[1];
    uint64_t v86 = *v2;
    unint64_t v87 = v2[2] - *v2;
    if (v85 <= v87)
    {
      uint64_t v277 = 0;
      uint64_t v278 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v279 = v2[3];
      if (v279)
      {
        if (v85)
        {
          (*(void (**)(uint64_t))(*(void *)v279 + 16))(v279);
          uint64_t v278 = *v2;
          uint64_t v277 = v2[1];
        }
        else
        {
          uint64_t v277 = 0;
          uint64_t v278 = 0;
        }
      }
      goto LABEL_457;
    }
    v88 = (unsigned __int8 *)(v86 + v87);
    uint64_t v89 = v86 + v87 + 1;
    v2[2] = v89;
    if (!v86)
    {
      uint64_t v277 = v85;
      uint64_t v278 = 0;
LABEL_457:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v280 = v2[3];
      if (v280 && v277)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v280 + 16))(v280, v278, v277);
        unsigned int v90 = 0;
        uint64_t v86 = *v2;
        unint64_t v85 = v2[1];
      }
      else
      {
        unint64_t v85 = 0;
        uint64_t v86 = 0;
        unsigned int v90 = 0;
      }
      goto LABEL_459;
    }
    unsigned int v90 = *v88;
    if (v90 < 2)
    {
      int v375 = 0;
      char v91 = 1;
      goto LABEL_111;
    }
LABEL_459:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v281 = v2[3];
    if (!v281 || !v85)
    {
      uint64_t v282 = 0;
      uint64_t v86 = 0;
      char v374 = 0;
      int v375 = 1;
LABEL_461:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v283 = v2[3];
      if (v283 && v282)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v283 + 16))(v283, v86, v282);
        unsigned int v95 = 0;
        uint64_t v86 = *v2;
        unint64_t v85 = v2[1];
      }
      else
      {
        unint64_t v85 = 0;
        uint64_t v86 = 0;
        unsigned int v95 = 0;
      }
      goto LABEL_463;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v281 + 16))(v281, v86);
    char v91 = 0;
    uint64_t v86 = *v2;
    unint64_t v85 = v2[1];
    int v375 = 1;
    uint64_t v89 = v2[2];
LABEL_111:
    if (!v90) {
      char v91 = 0;
    }
    char v374 = v91;
    unint64_t v92 = v89 - v86;
    if (v85 <= v92)
    {
      uint64_t v282 = 0;
      uint64_t v352 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v85 && v352)
      {
        (*(void (**)(uint64_t))(*(void *)v352 + 16))(v352);
        uint64_t v86 = *v2;
        uint64_t v282 = v2[1];
      }
      else
      {
        uint64_t v86 = 0;
      }
      goto LABEL_461;
    }
    v93 = (unsigned __int8 *)(v86 + v92);
    uint64_t v94 = v86 + v92 + 1;
    v2[2] = v94;
    if (!v86)
    {
      uint64_t v282 = v85;
      goto LABEL_461;
    }
    unsigned int v95 = *v93;
    if (v95 < 2)
    {
      int v373 = 0;
      char v96 = 1;
      goto LABEL_117;
    }
LABEL_463:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v284 = v2[3];
    if (!v284 || !v85)
    {
      uint64_t v285 = 0;
      uint64_t v86 = 0;
      char v372 = 0;
      int v373 = 1;
LABEL_465:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v286 = v2[3];
      if (v286 && v285)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v286 + 16))(v286, v86, v285);
        unsigned int v100 = 0;
        uint64_t v86 = *v2;
        unint64_t v85 = v2[1];
      }
      else
      {
        unint64_t v85 = 0;
        uint64_t v86 = 0;
        unsigned int v100 = 0;
      }
      goto LABEL_467;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v284 + 16))(v284, v86);
    char v96 = 0;
    uint64_t v86 = *v2;
    unint64_t v85 = v2[1];
    int v373 = 1;
    uint64_t v94 = v2[2];
LABEL_117:
    if (!v95) {
      char v96 = 0;
    }
    char v372 = v96;
    unint64_t v97 = v94 - v86;
    if (v85 <= v97)
    {
      uint64_t v285 = 0;
      uint64_t v351 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v85 && v351)
      {
        (*(void (**)(uint64_t))(*(void *)v351 + 16))(v351);
        uint64_t v86 = *v2;
        uint64_t v285 = v2[1];
      }
      else
      {
        uint64_t v86 = 0;
      }
      goto LABEL_465;
    }
    v98 = (unsigned __int8 *)(v86 + v97);
    uint64_t v99 = v86 + v97 + 1;
    v2[2] = v99;
    if (!v86)
    {
      uint64_t v285 = v85;
      goto LABEL_465;
    }
    unsigned int v100 = *v98;
    if (v100 < 2)
    {
      int v371 = 0;
      char v101 = 1;
      goto LABEL_123;
    }
LABEL_467:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v287 = v2[3];
    if (!v287 || !v85)
    {
      uint64_t v288 = 0;
      uint64_t v86 = 0;
      char v370 = 0;
      int v371 = 1;
LABEL_469:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v289 = v2[3];
      if (v289 && v288)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v289 + 16))(v289, v86, v288);
        unsigned int v105 = 0;
        uint64_t v86 = *v2;
        unint64_t v85 = v2[1];
      }
      else
      {
        unint64_t v85 = 0;
        uint64_t v86 = 0;
        unsigned int v105 = 0;
      }
      goto LABEL_471;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v287 + 16))(v287, v86);
    char v101 = 0;
    uint64_t v86 = *v2;
    unint64_t v85 = v2[1];
    int v371 = 1;
    uint64_t v99 = v2[2];
LABEL_123:
    if (!v100) {
      char v101 = 0;
    }
    char v370 = v101;
    unint64_t v102 = v99 - v86;
    if (v85 <= v102)
    {
      uint64_t v288 = 0;
      uint64_t v350 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v85 && v350)
      {
        (*(void (**)(uint64_t))(*(void *)v350 + 16))(v350);
        uint64_t v86 = *v2;
        uint64_t v288 = v2[1];
      }
      else
      {
        uint64_t v86 = 0;
      }
      goto LABEL_469;
    }
    v103 = (unsigned __int8 *)(v86 + v102);
    uint64_t v104 = v86 + v102 + 1;
    v2[2] = v104;
    if (!v86)
    {
      uint64_t v288 = v85;
      goto LABEL_469;
    }
    unsigned int v105 = *v103;
    if (v105 < 2)
    {
      int v369 = 0;
      char v106 = 1;
      goto LABEL_129;
    }
LABEL_471:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v290 = v2[3];
    if (!v290 || !v85)
    {
      uint64_t v291 = 0;
      uint64_t v86 = 0;
      char v368 = 0;
      int v369 = 1;
LABEL_473:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v292 = v2[3];
      if (v292 && v291)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v292 + 16))(v292, v86, v291);
        unsigned int v109 = 0;
        uint64_t v86 = *v2;
        unint64_t v85 = v2[1];
      }
      else
      {
        unint64_t v85 = 0;
        uint64_t v86 = 0;
        unsigned int v109 = 0;
      }
      goto LABEL_475;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v290 + 16))(v290, v86);
    char v106 = 0;
    uint64_t v86 = *v2;
    unint64_t v85 = v2[1];
    int v369 = 1;
    uint64_t v104 = v2[2];
LABEL_129:
    if (!v105) {
      char v106 = 0;
    }
    char v368 = v106;
    unint64_t v107 = v104 - v86;
    if (v85 <= v107)
    {
      uint64_t v291 = 0;
      uint64_t v349 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v85 && v349)
      {
        (*(void (**)(uint64_t))(*(void *)v349 + 16))(v349);
        uint64_t v86 = *v2;
        uint64_t v291 = v2[1];
      }
      else
      {
        uint64_t v86 = 0;
      }
      goto LABEL_473;
    }
    v108 = (unsigned __int8 *)(v86 + v107);
    v2[2] = (uint64_t)(v108 + 1);
    if (!v86)
    {
      uint64_t v291 = v85;
      goto LABEL_473;
    }
    unsigned int v109 = *v108;
    if (v109 < 2)
    {
      int v367 = 0;
      char v110 = 1;
      goto LABEL_135;
    }
LABEL_475:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v293 = v2[3];
    if (v293 && v85) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v293 + 16))(v293, v86);
    }
    char v110 = 0;
    int v367 = 1;
LABEL_135:
    if (!v109) {
      char v110 = 0;
    }
    char v366 = v110;
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v427);
    unint64_t v111 = v2[1];
    if (!BYTE8(v427))
    {
      uint64_t v294 = 0;
      uint64_t v295 = 0;
      uint64_t v296 = *v2;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v297 = v2[3];
      if (!v297) {
        goto LABEL_478;
      }
      if (!v111)
      {
        uint64_t v294 = 0;
        uint64_t v295 = 0;
        goto LABEL_478;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v297 + 16))(v297, v296);
      unint64_t v111 = v2[1];
    }
    uint64_t v112 = *v2;
    unint64_t v113 = v2[2] - *v2;
    if (v111 <= v113)
    {
      uint64_t v294 = 0;
      uint64_t v345 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v295 = 0;
      if (v111 && v345)
      {
        (*(void (**)(uint64_t))(*(void *)v345 + 16))(v345);
        uint64_t v295 = *v2;
        uint64_t v294 = v2[1];
      }
      goto LABEL_478;
    }
    v114 = (unsigned __int8 *)(v112 + v113);
    uint64_t v115 = v112 + v113 + 1;
    v2[2] = v115;
    if (!v112)
    {
      uint64_t v294 = v111;
      uint64_t v295 = 0;
LABEL_478:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v298 = v2[3];
      if (v298 && v294)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v298 + 16))(v298, v295, v294);
        unsigned int v116 = 0;
        uint64_t v112 = *v2;
        unint64_t v111 = v2[1];
      }
      else
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        unsigned int v116 = 0;
      }
      goto LABEL_480;
    }
    unsigned int v116 = *v114;
    if (v116 < 2)
    {
      int v365 = 0;
      char v117 = 1;
      goto LABEL_142;
    }
LABEL_480:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v299 = v2[3];
    if (!v299 || !v111)
    {
      uint64_t v300 = 0;
      uint64_t v112 = 0;
      char v364 = 0;
      int v365 = 1;
LABEL_482:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v301 = v2[3];
      if (v301 && v300)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v301 + 16))(v301, v112, v300);
        unsigned int v121 = 0;
        uint64_t v112 = *v2;
        unint64_t v111 = v2[1];
      }
      else
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        unsigned int v121 = 0;
      }
      goto LABEL_484;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v299 + 16))(v299, v112);
    char v117 = 0;
    uint64_t v112 = *v2;
    unint64_t v111 = v2[1];
    int v365 = 1;
    uint64_t v115 = v2[2];
LABEL_142:
    if (!v116) {
      char v117 = 0;
    }
    char v364 = v117;
    unint64_t v118 = v115 - v112;
    if (v111 <= v118)
    {
      uint64_t v300 = 0;
      uint64_t v356 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v111 && v356)
      {
        (*(void (**)(uint64_t))(*(void *)v356 + 16))(v356);
        uint64_t v112 = *v2;
        uint64_t v300 = v2[1];
      }
      else
      {
        uint64_t v112 = 0;
      }
      goto LABEL_482;
    }
    v119 = (unsigned __int8 *)(v112 + v118);
    uint64_t v120 = v112 + v118 + 1;
    v2[2] = v120;
    if (!v112)
    {
      uint64_t v300 = v111;
      goto LABEL_482;
    }
    unsigned int v121 = *v119;
    if (v121 < 2)
    {
      int v363 = 0;
      char v122 = 1;
      goto LABEL_148;
    }
LABEL_484:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v302 = v2[3];
    if (!v302 || !v111)
    {
      uint64_t v303 = 0;
      uint64_t v112 = 0;
      char v362 = 0;
      int v363 = 1;
LABEL_486:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v304 = v2[3];
      if (v304 && v303)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v304 + 16))(v304, v112, v303);
        unsigned int v126 = 0;
        uint64_t v112 = *v2;
        unint64_t v111 = v2[1];
      }
      else
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        unsigned int v126 = 0;
      }
      goto LABEL_488;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v302 + 16))(v302, v112);
    char v122 = 0;
    uint64_t v112 = *v2;
    unint64_t v111 = v2[1];
    int v363 = 1;
    uint64_t v120 = v2[2];
LABEL_148:
    if (!v121) {
      char v122 = 0;
    }
    char v362 = v122;
    unint64_t v123 = v120 - v112;
    if (v111 <= v123)
    {
      uint64_t v303 = 0;
      uint64_t v355 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v111 && v355)
      {
        (*(void (**)(uint64_t))(*(void *)v355 + 16))(v355);
        uint64_t v112 = *v2;
        uint64_t v303 = v2[1];
      }
      else
      {
        uint64_t v112 = 0;
      }
      goto LABEL_486;
    }
    v124 = (unsigned __int8 *)(v112 + v123);
    uint64_t v125 = v112 + v123 + 1;
    v2[2] = v125;
    if (!v112)
    {
      uint64_t v303 = v111;
      goto LABEL_486;
    }
    unsigned int v126 = *v124;
    if (v126 < 2)
    {
      int v361 = 0;
      char v127 = 1;
      goto LABEL_154;
    }
LABEL_488:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v305 = v2[3];
    if (!v305 || !v111)
    {
      uint64_t v306 = 0;
      uint64_t v112 = 0;
      char v360 = 0;
      int v361 = 1;
LABEL_490:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v307 = v2[3];
      if (v307 && v306)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v307 + 16))(v307, v112, v306);
        unsigned int v131 = 0;
        uint64_t v112 = *v2;
        unint64_t v111 = v2[1];
      }
      else
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        unsigned int v131 = 0;
      }
      goto LABEL_492;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v305 + 16))(v305, v112);
    char v127 = 0;
    uint64_t v112 = *v2;
    unint64_t v111 = v2[1];
    int v361 = 1;
    uint64_t v125 = v2[2];
LABEL_154:
    if (!v126) {
      char v127 = 0;
    }
    char v360 = v127;
    unint64_t v128 = v125 - v112;
    if (v111 <= v128)
    {
      uint64_t v306 = 0;
      uint64_t v354 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v111 && v354)
      {
        (*(void (**)(uint64_t))(*(void *)v354 + 16))(v354);
        uint64_t v112 = *v2;
        uint64_t v306 = v2[1];
      }
      else
      {
        uint64_t v112 = 0;
      }
      goto LABEL_490;
    }
    v129 = (unsigned __int8 *)(v112 + v128);
    uint64_t v130 = v112 + v128 + 1;
    v2[2] = v130;
    if (!v112)
    {
      uint64_t v306 = v111;
      goto LABEL_490;
    }
    unsigned int v131 = *v129;
    if (v131 < 2)
    {
      int v359 = 0;
      char v132 = 1;
      goto LABEL_160;
    }
LABEL_492:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v308 = v2[3];
    if (!v308 || !v111)
    {
      char v133 = 0;
      uint64_t v309 = 0;
      uint64_t v112 = 0;
      int v359 = 1;
LABEL_494:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v310 = v2[3];
      if (v310 && v309)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v310 + 16))(v310, v112, v309);
        unsigned int v136 = 0;
        uint64_t v112 = *v2;
        unint64_t v111 = v2[1];
      }
      else
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        unsigned int v136 = 0;
      }
      goto LABEL_496;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v308 + 16))(v308, v112);
    char v132 = 0;
    uint64_t v112 = *v2;
    unint64_t v111 = v2[1];
    int v359 = 1;
    uint64_t v130 = v2[2];
LABEL_160:
    if (v131) {
      char v133 = v132;
    }
    else {
      char v133 = 0;
    }
    unint64_t v134 = v130 - v112;
    if (v111 <= v134)
    {
      uint64_t v309 = 0;
      uint64_t v353 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v111 && v353)
      {
        (*(void (**)(uint64_t))(*(void *)v353 + 16))(v353);
        uint64_t v112 = *v2;
        uint64_t v309 = v2[1];
      }
      else
      {
        uint64_t v112 = 0;
      }
      goto LABEL_494;
    }
    v135 = (unsigned __int8 *)(v112 + v134);
    v2[2] = (uint64_t)(v135 + 1);
    if (!v112)
    {
      uint64_t v309 = v111;
      goto LABEL_494;
    }
    unsigned int v136 = *v135;
    if (v136 < 2)
    {
      int v137 = 0;
      char v138 = 1;
      goto LABEL_167;
    }
LABEL_496:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v311 = v2[3];
    if (v311 && v111) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v311 + 16))(v311, v112);
    }
    char v138 = 0;
    int v137 = 1;
LABEL_167:
    if (v136) {
      char v139 = v138;
    }
    else {
      char v139 = 0;
    }
    IPC::Decoder::decode<std::optional<WebCore::ElementContext>>((unint64_t *)v2, (uint64_t)&v472);
    unint64_t v140 = v2[1];
    uint64_t v141 = *v2;
    unint64_t v142 = v2[2] - *v2;
    if (v140 <= v142)
    {
      uint64_t v312 = 0;
      uint64_t v313 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v314 = v2[3];
      if (v314)
      {
        if (v140)
        {
          (*(void (**)(uint64_t))(*(void *)v314 + 16))(v314);
          uint64_t v313 = *v2;
          uint64_t v312 = v2[1];
        }
        else
        {
          uint64_t v312 = 0;
          uint64_t v313 = 0;
        }
      }
      goto LABEL_499;
    }
    v143 = (unsigned __int8 *)(v141 + v142);
    v2[2] = (uint64_t)(v143 + 1);
    if (!v141)
    {
      uint64_t v312 = v140;
      uint64_t v313 = 0;
LABEL_499:
      unint64_t v140 = 0;
      uint64_t v141 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v315 = v2[3];
      if (v315)
      {
        if (v312)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v315 + 16))(v315, v313, v312);
          uint64_t v141 = *v2;
          unint64_t v140 = v2[1];
        }
        else
        {
          unint64_t v140 = 0;
          uint64_t v141 = 0;
        }
      }
      goto LABEL_500;
    }
    unsigned int v144 = *v143;
    if (v144 < 2)
    {
      if (v144)
      {
        IPC::Decoder::decode<WebCore::FontAttributes>(v2, &v456);
        char v146 = v463;
        if ((_BYTE)v463)
        {
          WebCore::FontAttributes::FontAttributes((uint64_t)v414, (uint64_t *)&v456);
          char v146 = 1;
          char v415 = 1;
        }
        else
        {
          LOBYTE(v414[0]) = 0;
        }
      }
      else
      {
        LOBYTE(v456) = 0;
        LOBYTE(v463) = 0;
        std::__optional_move_base<WebCore::FontAttributes,false>::__optional_move_base[abi:sn180100](v414, (uint64_t)&v456);
        char v146 = 1;
      }
      char v416 = v146;
      uint64_t v148 = std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v456, v145);
      goto LABEL_180;
    }
LABEL_500:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v148 = v2[3];
    if (v148 && v140) {
      uint64_t v148 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v148 + 16))(v148, v141);
    }
    LOBYTE(v414[0]) = 0;
    char v416 = 0;
LABEL_180:
    unint64_t v3 = v2[1];
    if (!v416)
    {
      unint64_t v316 = 0;
      uint64_t v317 = 0;
      uint64_t v318 = *v2;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v319 = v2[3];
      if (!v319) {
        goto LABEL_503;
      }
      if (!v3)
      {
        unint64_t v316 = 0;
        uint64_t v317 = 0;
        goto LABEL_503;
      }
      uint64_t v148 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v319 + 16))(v319, v318);
      unint64_t v3 = v2[1];
    }
    v149 = (char *)*v2;
    unint64_t v150 = v2[2] - *v2;
    if (v3 <= v150)
    {
      unint64_t v316 = 0;
      uint64_t v346 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v317 = 0;
      if (v3 && v346)
      {
        (*(void (**)(uint64_t))(*(void *)v346 + 16))(v346);
        uint64_t v317 = *v2;
        unint64_t v316 = v2[1];
      }
      goto LABEL_503;
    }
    v151 = &v149[v150];
    uint64_t v152 = (uint64_t)&v149[v150 + 1];
    v2[2] = v152;
    if (!v149)
    {
      unint64_t v316 = v3;
      uint64_t v317 = 0;
LABEL_503:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v320 = v2[3];
      if (v320 && v316)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v320 + 16))(v320, v317, v316);
        unsigned int v153 = 0;
        v149 = (char *)*v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        v149 = 0;
        unsigned int v153 = 0;
      }
      goto LABEL_505;
    }
    unsigned int v153 = *v151;
    if (v153 < 2)
    {
      int v154 = 0;
      char v155 = 1;
      goto LABEL_185;
    }
LABEL_505:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v321 = v2[3];
    if (!v321 || !v3)
    {
      char v156 = 0;
      unint64_t v322 = 0;
      v149 = 0;
      int v154 = 1;
LABEL_507:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v323 = v2[3];
      if (v323 && v322)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v323 + 16))(v323, v149, v322);
        unsigned int v160 = 0;
        v149 = (char *)*v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        v149 = 0;
        unsigned int v160 = 0;
      }
      goto LABEL_509;
    }
    uint64_t v148 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v321 + 16))(v321, v149);
    char v155 = 0;
    v149 = (char *)*v2;
    unint64_t v3 = v2[1];
    int v154 = 1;
    uint64_t v152 = v2[2];
LABEL_185:
    if (v153) {
      char v156 = v155;
    }
    else {
      char v156 = 0;
    }
    unint64_t v157 = v152 - (void)v149;
    if (v3 <= v157)
    {
      unint64_t v322 = 0;
      uint64_t v358 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v3 && v358)
      {
        (*(void (**)(uint64_t))(*(void *)v358 + 16))(v358);
        v149 = (char *)*v2;
        unint64_t v322 = v2[1];
      }
      else
      {
        v149 = 0;
      }
      goto LABEL_507;
    }
    v158 = &v149[v157];
    uint64_t v159 = (uint64_t)&v149[v157 + 1];
    v2[2] = v159;
    if (!v149)
    {
      unint64_t v322 = v3;
      goto LABEL_507;
    }
    unsigned int v160 = *v158;
    if (v160 < 2)
    {
      int v161 = 0;
      char v162 = 1;
      goto LABEL_192;
    }
LABEL_509:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v324 = v2[3];
    if (!v324 || !v3)
    {
      char v163 = 0;
      unint64_t v325 = 0;
      v149 = 0;
      int v161 = 1;
LABEL_511:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v326 = v2[3];
      if (v326 && v325)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v326 + 16))(v326, v149, v325);
        v149 = (char *)*v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        v149 = 0;
      }
      goto LABEL_513;
    }
    uint64_t v148 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v324 + 16))(v324, v149);
    char v162 = 0;
    v149 = (char *)*v2;
    unint64_t v3 = v2[1];
    int v161 = 1;
    uint64_t v159 = v2[2];
LABEL_192:
    if (v160) {
      char v163 = v162;
    }
    else {
      char v163 = 0;
    }
    unint64_t v164 = v159 - (void)v149;
    if (v3 <= v164)
    {
      unint64_t v325 = 0;
      uint64_t v357 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v3 && v357)
      {
        (*(void (**)(uint64_t))(*(void *)v357 + 16))(v357);
        v149 = (char *)*v2;
        unint64_t v325 = v2[1];
      }
      else
      {
        v149 = 0;
      }
      goto LABEL_511;
    }
    v165 = &v149[v164];
    v2[2] = (uint64_t)(v165 + 1);
    if (!v149)
    {
      unint64_t v325 = v3;
      goto LABEL_511;
    }
    unsigned int v166 = *v165;
    if (v166 <= 1)
    {
      int v167 = 0;
      BOOL v168 = v166 != 0;
      goto LABEL_199;
    }
LABEL_513:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v327 = v2[3];
    if (v327)
    {
      if (v3)
      {
        uint64_t v148 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v327 + 16))(v327, v149);
        if (*v2)
        {
          BOOL v168 = 0;
          int v167 = 1;
LABEL_199:
          if (v388 <= 0xFF) {
            goto LABEL_522;
          }
          LOBYTE(v456) = v388;
          if (v387) {
            goto LABEL_522;
          }
          *((void *)&v456 + 1) = v386;
          if (v385 <= 0xFF) {
            goto LABEL_522;
          }
          LOBYTE(v457) = v385;
          if (!(_BYTE)v422) {
            goto LABEL_522;
          }
          uint64_t v148 = WebCore::Color::Color();
          if (v384 <= 0xFF) {
            goto LABEL_522;
          }
          LOBYTE(v458) = v384;
          if (v383 <= 0xFFu) {
            goto LABEL_522;
          }
          BYTE1(v458) = v383;
          if (v382) {
            goto LABEL_522;
          }
          BYTE2(v458) = v381;
          if (v380) {
            goto LABEL_522;
          }
          BYTE3(v458) = v379;
          if (!BYTE8(v431)) {
            goto LABEL_522;
          }
          uint64_t v169 = v431;
          *(void *)&long long v431 = 0;
          *((void *)&v458 + 1) = v169;
          if (!LOBYTE(v429[1])) {
            goto LABEL_522;
          }
          v170 = v429[0];
          v429[0] = 0;
          v459 = v170;
          if (!HIDWORD(v378)) {
            goto LABEL_522;
          }
          LODWORD(v460) = v378;
          if (!HIDWORD(v377)) {
            goto LABEL_522;
          }
          HIDWORD(v460) = v377;
          if (!HIDWORD(v376)) {
            goto LABEL_522;
          }
          LODWORD(v461) = v376;
          if (!v426) {
            goto LABEL_522;
          }
          v462 = v424;
          uint64_t v171 = v425;
          v424 = 0;
          uint64_t v425 = 0;
          *(void *)&long long v463 = v171;
          if (v375) {
            goto LABEL_522;
          }
          BYTE8(v463) = v374;
          if (v373) {
            goto LABEL_522;
          }
          BYTE9(v463) = v372;
          if (v371) {
            goto LABEL_522;
          }
          BYTE10(v463) = v370;
          if (v369) {
            goto LABEL_522;
          }
          BYTE11(v463) = v368;
          if (v367) {
            goto LABEL_522;
          }
          BYTE12(v463) = v366;
          if (!BYTE8(v427)) {
            goto LABEL_522;
          }
          uint64_t v148 = WebCore::Color::Color();
          if (v365) {
            goto LABEL_522;
          }
          BYTE8(v464) = v364;
          if (v363) {
            goto LABEL_522;
          }
          BYTE9(v464) = v362;
          if (v361) {
            goto LABEL_522;
          }
          BYTE10(v464) = v360;
          if (v359) {
            goto LABEL_522;
          }
          BYTE11(v464) = v133;
          if (v137) {
            goto LABEL_522;
          }
          BYTE12(v464) = v139;
          if (!v478) {
            goto LABEL_522;
          }
          long long v467 = v474;
          long long v468 = v475;
          long long v469 = v476;
          char v470 = v477;
          long long v465 = v472;
          long long v466 = v473;
          if (!v416) {
            goto LABEL_522;
          }
          uint64_t v148 = (uint64_t)std::__optional_move_base<WebCore::FontAttributes,false>::__optional_move_base[abi:sn180100](v471, (uint64_t)v414);
          if (v154) {
            goto LABEL_522;
          }
          v471[88] = v156;
          if (v161) {
            goto LABEL_522;
          }
          v471[89] = v163;
          if (v167) {
            goto LABEL_522;
          }
          v471[90] = v168;
          WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)&v433, &v456);
          char v443 = 1;
          WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v456, v172);
          goto LABEL_230;
        }
      }
    }
    LOBYTE(v433) = 0;
    char v443 = 0;
LABEL_230:
    if (v416) {
      std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v414, v149);
    }
    if (BYTE8(v427))
    {
      if ((v427 & 0x8000000000000) != 0)
      {
        v248 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v427 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v248);
          WTF::fastFree((WTF *)v248, v149);
        }
      }
    }
    if (v426)
    {
      v173 = v424;
      if (v424)
      {
        v424 = 0;
        LODWORD(v425) = 0;
        WTF::fastFree(v173, v149);
      }
    }
    if (LOBYTE(v429[1]))
    {
      v174 = v429[0];
      v429[0] = 0;
      if (v174)
      {
        if (*(_DWORD *)v174 == 2) {
          WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v149);
        }
        else {
          *(_DWORD *)v174 -= 2;
        }
      }
    }
    if (BYTE8(v431))
    {
      v175 = (WTF::StringImpl *)v431;
      *(void *)&long long v431 = 0;
      if (v175)
      {
        if (*(_DWORD *)v175 == 2) {
          WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v149);
        }
        else {
          *(_DWORD *)v175 -= 2;
        }
      }
    }
    if ((_BYTE)v422)
    {
      if (((unint64_t)v421 & 0x8000000000000) != 0)
      {
        v249 = (unsigned int *)((unint64_t)v421 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v421 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v249);
          WTF::fastFree((WTF *)v249, v149);
        }
      }
    }
    if (!v443)
    {
      uint64_t v328 = *v2;
      uint64_t v329 = v2[1];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v330 = v2[3];
      if (!v330) {
        goto LABEL_308;
      }
      if (!v329) {
        goto LABEL_308;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v330 + 16))(v330, v328);
      if (!v443) {
        goto LABEL_308;
      }
    }
    WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)v453, &v433);
    char v454 = 1;
LABEL_251:
    char v455 = 1;
    if (v443) {
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v433, v147);
    }
LABEL_309:
    unint64_t v219 = v2[1];
    if (!v455)
    {
      uint64_t v241 = *v2;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v242 = v2[3];
      if (!v242 || !v219)
      {
        unint64_t v219 = 0;
        v220 = (char *)*v2;
LABEL_416:
        uint64_t v243 = 0;
        uint64_t v244 = 0;
        *unint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v245 = v2[3];
        if (v245)
        {
          if (v219)
          {
            (*(void (**)(uint64_t, char *))(*(void *)v245 + 16))(v245, v220);
            uint64_t v244 = *v2;
            uint64_t v243 = v2[1];
          }
          else
          {
            uint64_t v243 = 0;
            uint64_t v244 = 0;
          }
        }
        goto LABEL_417;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v242 + 16))(v242, v241);
      unint64_t v219 = v2[1];
    }
    v220 = (char *)*v2;
    unint64_t v221 = v2[2] - *v2;
    if (v219 <= v221) {
      goto LABEL_416;
    }
    v222 = &v220[v221];
    v2[2] = (uint64_t)(v222 + 1);
    if (!v220)
    {
      uint64_t v243 = v219;
      uint64_t v244 = 0;
LABEL_417:
      unint64_t v219 = 0;
      v220 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v246 = v2[3];
      if (v246)
      {
        if (v243)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v246 + 16))(v246, v244, v243);
          v220 = (char *)*v2;
          unint64_t v219 = v2[1];
        }
        else
        {
          unint64_t v219 = 0;
          v220 = 0;
        }
      }
LABEL_418:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v247 = v2[3];
      if (v247 && v219) {
        (*(void (**)(uint64_t, char *))(*(void *)v247 + 16))(v247, v220);
      }
      LOBYTE(v456) = 0;
      BYTE8(v465) = 0;
      goto LABEL_332;
    }
    unsigned int v223 = *v222;
    if (v223 >= 2) {
      goto LABEL_418;
    }
    if (!v223)
    {
      LOBYTE(v433) = 0;
      unsigned __int8 v442 = 0;
      LOBYTE(v456) = 0;
      LOBYTE(v465) = 0;
      goto LABEL_330;
    }
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v431);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)v429);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v427);
    IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v2, (uint64_t)&v424);
    IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v2, (uint64_t)&v421);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v419);
    uint64_t v148 = IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v417);
    uint64_t v224 = *v2;
    if (*v2)
    {
      if (!v432) {
        goto LABEL_522;
      }
      long long v472 = v431;
      if (!v430) {
        goto LABEL_522;
      }
      long long v473 = *(_OWORD *)v429;
      if (!v428) {
        goto LABEL_522;
      }
      long long v474 = v427;
      if (!v426) {
        goto LABEL_522;
      }
      v225 = v424;
      uint64_t v226 = v425;
      v424 = 0;
      uint64_t v425 = 0;
      if (!v423) {
        goto LABEL_522;
      }
      v227 = v421;
      v228 = v422;
      v421 = 0;
      v422 = 0;
      if (!v420) {
        goto LABEL_522;
      }
      v414[0] = v419;
      if (!v418) {
        goto LABEL_522;
      }
      long long v433 = v472;
      long long v434 = v473;
      long long v435 = v474;
      v436 = v225;
      uint64_t v437 = v226;
      v438 = v227;
      v439 = v228;
      long long v440 = v414[0];
      long long v441 = v417;
      int v229 = 1;
      unsigned __int8 v442 = 1;
    }
    else
    {
      LOBYTE(v433) = 0;
      unsigned __int8 v442 = 0;
      if (v423)
      {
        v250 = v421;
        if (v421)
        {
          v421 = 0;
          LODWORD(v422) = 0;
          WTF::fastFree(v250, v220);
        }
      }
      int v229 = 0;
    }
    if (v426)
    {
      v230 = v424;
      if (v424)
      {
        v424 = 0;
        LODWORD(v425) = 0;
        WTF::fastFree(v230, v220);
      }
    }
    if (!v224)
    {
      v220 = (char *)*v2;
      uint64_t v251 = v2[1];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v252 = v2[3];
      if (v252)
      {
        if (v251)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v252 + 16))(v252, v220);
          int v229 = v442;
        }
      }
    }
    if (v229)
    {
      long long v456 = v433;
      long long v457 = v434;
      long long v458 = v435;
      v231 = v436;
      v436 = 0;
      v459 = v231;
      uint64_t v232 = v437;
      uint64_t v437 = 0;
      uint64_t v460 = v232;
      v233 = v438;
      v438 = 0;
      v461 = v233;
      v234 = v439;
      v439 = 0;
      v462 = v234;
      long long v464 = v441;
      long long v463 = v440;
      LOBYTE(v465) = 1;
LABEL_330:
      BYTE8(v465) = 1;
      uint64_t v148 = std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v433, v220);
      goto LABEL_333;
    }
    LOBYTE(v456) = 0;
    BYTE8(v465) = 0;
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v433, v220);
LABEL_332:
    v235 = (void *)*v2;
    unint64_t v3 = v2[1];
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v148 = v2[3];
    if (v148 && v3) {
      uint64_t v148 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v148 + 16))(v148, v235);
    }
LABEL_333:
    if (!*v2)
    {
      *a2 = 0;
      a2[480] = 0;
      goto LABEL_352;
    }
    if (v412)
    {
      *(void *)&long long v433 = v413;
      if (!v401)
      {
        BYTE8(v433) = v411;
        if (!v410)
        {
          BYTE9(v433) = v400;
          if (!v399)
          {
            BYTE10(v433) = v409;
            if (!v408)
            {
              BYTE11(v433) = v398;
              if (!v397)
              {
                BYTE12(v433) = v407;
                if (!v396)
                {
                  BYTE13(v433) = v406;
                  if (!v405)
                  {
                    BYTE14(v433) = v395;
                    if (!v394)
                    {
                      HIBYTE(v433) = v393;
                      if (!v392)
                      {
                        LOBYTE(v434) = v391;
                        if (!v404)
                        {
                          BYTE1(v434) = v403;
                          if (!v402)
                          {
                            BYTE2(v434) = v390;
                            if (v455)
                            {
                              unint64_t v2 = (uint64_t *)&v435;
                              uint64_t v148 = (uint64_t)std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100](&v435, (uint64_t)v453);
                              if (BYTE8(v465)) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_522:
    __break(1u);
LABEL_523:
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v148 + 16))(v148);
      uint64_t v177 = *v2;
      unint64_t v176 = v2[1];
    }
    else
    {
      unint64_t v176 = 0;
      uint64_t v177 = 0;
    }
  }
  LOBYTE(v445[0]) = 0;
  char v452 = 0;
  if ((_BYTE)v465)
  {
    v445[0] = v456;
    v445[1] = v457;
    v445[2] = v458;
    v236 = v459;
    v459 = 0;
    v446 = v236;
    uint64_t v237 = v460;
    uint64_t v460 = 0;
    uint64_t v447 = v237;
    v238 = v461;
    v461 = 0;
    v448 = v238;
    v239 = v462;
    v462 = 0;
    v449 = v239;
    long long v450 = v463;
    long long v451 = v464;
    char v452 = 1;
  }
  std::__optional_destruct_base<WebKit::EditorState,false>::__optional_destruct_base[abi:sn180100]<WebKit::EditorState>((uint64_t)a2, &v433);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v445, v240);
  if (v444) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v435, v235);
  }
LABEL_352:
  if (BYTE8(v465)) {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v456, v235);
  }
  if (v455)
  {
    if (v454) {
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v453, v235);
    }
  }
}

void sub_19881F3A0(_Unwind_Exception *a1, void *a2)
{
  if (LOBYTE(STACK[0x330])) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&STACK[0x200], a2);
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebKit::EditorState::PostLayoutData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v9 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v9);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 8));
  char v10 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v10);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 24));
  char v11 = *(unsigned char *)(a2 + 32);
  IPC::Encoder::operator<<<BOOL>(a1, &v11);
  char v12 = *(unsigned char *)(a2 + 33);
  IPC::Encoder::operator<<<BOOL>(a1, &v12);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 34));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 35));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 56));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 60));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 64));
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 72);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 88));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 89));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 90));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 91));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 92));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 96));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 104));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 105));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 106));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 107));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 108));
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 112);
  int v4 = *(unsigned __int8 *)(a2 + 288);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19881F8F0);
    }
    *unint64_t v5 = 0;
    goto LABEL_7;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19881F8D0);
  }
  *unint64_t v5 = 1;
  if (*(unsigned char *)(a2 + 288))
  {
    IPC::ArgumentCoder<WebCore::FontAttributes,void>::encode(a1, a2 + 208);
LABEL_7:
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 296));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 297));
    return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 298));
  }
  unint64_t v8 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::Decoder::decode<char32_t>(v8);
}

unint64_t IPC::Decoder::decode<char32_t>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = v2 + v3;
    a1[2] = v5 + 4;
    if (!v2)
    {
      unint64_t v7 = 0;
      LODWORD(v5) = 0;
LABEL_9:
      int v6 = 0;
      goto LABEL_10;
    }
    LODWORD(v5) = *(_DWORD *)v5;
    int v6 = v5 & 0xFFFFFF00;
    LODWORD(v5) = v5;
    unint64_t v7 = 0x100000000;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (!v5)
    {
      unint64_t v7 = 0;
      goto LABEL_9;
    }
    uint64_t v14 = a1;
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    unint64_t v7 = 0;
    LODWORD(v5) = 0;
    int v6 = 0;
    a1 = v14;
  }
LABEL_10:
  unint64_t v8 = v7 | v6 | v5;
  if (!HIDWORD(v7))
  {
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v11)
      {
        unint64_t v13 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
        return v13;
      }
    }
  }
  return v8;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19881FA84(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    int v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::EditorState::VisualData,void>::encode(IPC::Encoder *a1, void *a2)
{
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 4);
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 10);

  return IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 12);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19881FB98(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    int v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  double v4 = *(double *)(a2 + 24);

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  uint64_t v4 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a1);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a1);
  char v9 = v8;
  unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  if (*(void *)a1)
  {
    if (v14)
    {
      uint64_t v12 = v13;
      unint64_t v13 = 0;
      if (v6)
      {
        if (v9 && (_BYTE)v11)
        {
          *(void *)a2 = v12;
          *(void *)(a2 + 8) = v4;
          *(void *)(a2 + 16) = v7;
          *(void *)(a2 + 24) = result;
          *(unsigned char *)(a2 + 32) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v14)
  {
    unint64_t result = v13;
    unint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19881FD00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
  if (*(void *)a1)
  {
    if (v14)
    {
      char v6 = v13;
      unint64_t v13 = 0;
      if (v12)
      {
        uint64_t v7 = v11;
        uint64_t v11 = 0;
        if (v10)
        {
          char v8 = v9;
          *(void *)a2 = v6;
          *(void *)(a2 + 8) = v7;
          *(void *)(a2 + 16) = v8;
          *(unsigned char *)(a2 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v10)
  {
    unint64_t result = v9;
    char v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_6:
  if (v12)
  {
    unint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v14)
  {
    unint64_t result = v13;
    unint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19881FEB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 56));
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits> const&>(a1, (void **)(a2 + 64));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(*(void *)(a2 + 72) + 16), *(void *)(*(void *)(a2 + 72) + 24));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(*(void *)(a2 + 80) + 16), *(void *)(*(void *)(a2 + 80) + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 88));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 96));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, a2 + 104);
  IPC::VectorArgumentCoder<false,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 120);

  return IPC::VectorArgumentCoder<false,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 136);
}

void IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v75);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v73);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v71);
  IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v69);
  IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)&v67, a1);
  IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)&v65, a1);
  uint64_t v7 = (unsigned __int8 *)a1[1];
  uint64_t v8 = *a1;
  unint64_t v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if ((unint64_t)v7 >= v9 && (unint64_t)&v7[-v9] > 7)
  {
    uint64_t v11 = (uint64_t *)(v8 + v9);
    uint64_t v12 = v8 + v9 + 8;
    a1[2] = v12;
    if (v8)
    {
      int v13 = 0;
      uint64_t v14 = *v11;
      goto LABEL_8;
    }
    char v16 = v7;
    uint64_t v38 = 0;
  }
  else
  {
    char v16 = 0;
    uint64_t v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v39 = a1[3];
    if (v39)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
        uint64_t v38 = *a1;
        char v16 = (unsigned __int8 *)a1[1];
      }
      else
      {
        char v16 = 0;
        uint64_t v38 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v40 = a1[3];
  if (!v40)
  {
    uint64_t v14 = 0;
    char v16 = 0;
LABEL_61:
    uint64_t v8 = 0;
    int v13 = 1;
    goto LABEL_62;
  }
  if (!v16)
  {
    uint64_t v14 = 0;
    goto LABEL_61;
  }
  (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v40 + 16))(v40, v38, v16);
  uint64_t v14 = 0;
  uint64_t v8 = *a1;
  uint64_t v7 = (unsigned __int8 *)a1[1];
  int v13 = 1;
  uint64_t v12 = a1[2];
LABEL_8:
  unint64_t v15 = v12 - v8;
  if ((unint64_t)v7 <= v15)
  {
    char v16 = 0;
    uint64_t v44 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v44 && v7)
    {
      (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
      uint64_t v8 = *a1;
      char v16 = (unsigned __int8 *)a1[1];
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_62;
  }
  char v16 = (unsigned __int8 *)(v8 + v15);
  a1[2] = (uint64_t)(v16 + 1);
  if (!v8)
  {
    char v16 = v7;
LABEL_62:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v41 = a1[3];
    if (v41)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v41 + 16))(v41, v8, v16);
        LODWORD(v16) = 0;
        uint64_t v8 = *a1;
        uint64_t v7 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      LODWORD(v16) = 0;
    }
    goto LABEL_64;
  }
  LODWORD(v16) = *v16;
  if (v16 < 2)
  {
    int v17 = 0;
    char v18 = 1;
    goto LABEL_12;
  }
LABEL_64:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v42 = a1[3];
  if (v42)
  {
    int v43 = (int)v16;
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v8);
    }
    char v18 = 0;
    int v17 = 1;
    LODWORD(v16) = v43;
  }
  else
  {
    char v18 = 0;
    int v17 = 1;
  }
LABEL_12:
  if (v16) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a1, &v62);
  IPC::Decoder::decode<WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v59, (IPC::Decoder *)a1);
  IPC::Decoder::decode<WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v57, (IPC::Decoder *)a1);
  uint64_t v21 = *a1;
  if (*a1)
  {
    if (!v6) {
      goto LABEL_56;
    }
    uint64_t v45 = v4;
    uint64_t v21 = v78;
    if (!v78) {
      goto LABEL_56;
    }
    uint64_t v22 = (uint64_t)v75;
    uint64_t v75 = 0;
    uint64_t v46 = v22;
    long long v47 = v76;
    long long v48 = v77;
    LODWORD(v76) = v76 & 0xFFFFFFFE;
    uint64_t v21 = v74;
    if (!v74) {
      goto LABEL_56;
    }
    long long v23 = v73;
    unsigned int v73 = 0;
    *(void *)&long long v49 = v23;
    uint64_t v21 = v72;
    if (!v72) {
      goto LABEL_56;
    }
    uint64_t v24 = v71;
    unint64_t v71 = 0;
    *((void *)&v49 + 1) = v24;
    uint64_t v21 = v70;
    if (!v70) {
      goto LABEL_56;
    }
    unsigned int v25 = v69;
    unint64_t v69 = 0;
    *(void *)&long long v50 = v25;
    uint64_t v21 = v68;
    if (!v68) {
      goto LABEL_56;
    }
    uint64_t v26 = v67;
    uint64_t v67 = 0;
    *((void *)&v50 + 1) = v26;
    uint64_t v21 = v66;
    if (!v66) {
      goto LABEL_56;
    }
    uint64_t v21 = v65;
    uint64_t v65 = 0;
    uint64_t v51 = v21;
    if (v13) {
      goto LABEL_56;
    }
    *(void *)unint64_t v52 = v14;
    if (v17) {
      goto LABEL_56;
    }
    v52[8] = v19;
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_56;
    }
    *(void *)&v52[16] = v62;
    v52[24] = v63;
    uint64_t v21 = v61;
    if (!v61 || (v53 = v59, v27 = v60, v59 = 0, v60 = 0, v54 = v27, (uint64_t v21 = v58) == 0))
    {
LABEL_56:
      __break(1u);
LABEL_57:
      CFRelease(*(CFTypeRef *)(v21 + 8));
      goto LABEL_36;
    }
    uint64_t v28 = v57[0];
    v57[0] = 0;
    unsigned int v55 = v28;
    char v56 = v57[1];
    *(void *)a2 = v4;
    WTF::URL::URL(a2 + 8, &v46);
    long long v29 = v49;
    long long v30 = v50;
    long long v49 = 0u;
    long long v50 = 0u;
    char v31 = v53;
    *(void *)(a2 + 80) = v51;
    *(_OWORD *)(a2 + 48) = v29;
    *(_OWORD *)(a2 + 64) = v30;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)v52;
    *(_OWORD *)(a2 + 97) = *(_OWORD *)&v52[9];
    uint64_t v51 = 0;
    uint64_t v53 = 0;
    *(void *)(a2 + 120) = v31;
    uint64_t v32 = v54;
    uint64_t v54 = 0;
    *(void *)(a2 + 128) = v32;
    uint64_t v33 = v55;
    unsigned int v55 = 0;
    *(void *)(a2 + 136) = v33;
    uint64_t v34 = v56;
    char v56 = 0;
    *(void *)(a2 + 144) = v34;
    *(unsigned char *)(a2 + 152) = 1;
    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)&v45, v35);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 152) = 0;
    if (!v58) {
      goto LABEL_31;
    }
  }
  if (v57[0]) {
    WTF::fastFree(v57[0], v20);
  }
LABEL_31:
  if (v61 && v59) {
    WTF::fastFree(v59, v20);
  }
  if (v66)
  {
    uint64_t v21 = v65;
    if (v65) {
      goto LABEL_57;
    }
  }
LABEL_36:
  if (v68 && v67) {
    CFRelease(*(CFTypeRef *)(v67 + 8));
  }
  if (v70 && v69) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v69, (WTF::StringImpl *)v20);
  }
  if (v72 && v71) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v71, (WTF::StringImpl *)v20);
  }
  if (v74)
  {
    char v36 = v73;
    unsigned int v73 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  if (v78)
  {
    unint64_t v37 = v75;
    uint64_t v75 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
}

void sub_198820558(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,uint64_t a32,char a33)
{
  if (*(unsigned char *)(v33 - 200))
  {
    uint64_t v35 = *(void *)(v33 - 208);
    if (v35) {
      CFRelease(*(CFTypeRef *)(v35 + 8));
    }
  }
  if (*(unsigned char *)(v33 - 184))
  {
    uint64_t v36 = *(void *)(v33 - 192);
    if (v36) {
      CFRelease(*(CFTypeRef *)(v36 + 8));
    }
  }
  if (*(unsigned char *)(v33 - 168))
  {
    unint64_t v37 = *(WTF::StringImpl ***)(v33 - 176);
    if (v37) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v37, a2);
    }
  }
  if (*(unsigned char *)(v33 - 152))
  {
    uint64_t v38 = *(WTF::StringImpl ***)(v33 - 160);
    if (v38) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, a2);
    }
  }
  if (*(unsigned char *)(v33 - 136))
  {
    uint64_t v39 = *(WTF::StringImpl **)(v33 - 144);
    *(void *)(v33 - 144) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, a2);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v33 - 88))
  {
    uint64_t v40 = *(WTF::StringImpl **)(v33 - 128);
    *(void *)(v33 - 128) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, a2);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>@<X0>(WTF::StringImpl *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988206EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_12:
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF *)*((void *)a2 + 3);
    if (result) {
      BOOL v18 = v16 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v15);
    }
    return result;
  }
  unint64_t v6 = v4;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (v4 >= 0x6666)
  {
    do
    {
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, &v40);
      if (!v43) {
        goto LABEL_33;
      }
      int v20 = HIDWORD(v45);
      if (HIDWORD(v45) == v45)
      {
        unint64_t v21 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, HIDWORD(v45) + 1, (unint64_t)&v40);
        int v22 = HIDWORD(v45);
        unint64_t result = (WTF *)v44;
        uint64_t v23 = v44 + 40 * HIDWORD(v45);
        long long v24 = *(_OWORD *)v21;
        long long v25 = *(_OWORD *)(v21 + 16);
        *(void *)(v23 + 32) = *(void *)(v21 + 32);
        *(_OWORD *)uint64_t v23 = v24;
        *(_OWORD *)(v23 + 16) = v25;
        int v20 = v22;
      }
      else
      {
        unint64_t result = (WTF *)v44;
        uint64_t v26 = v44 + 40 * HIDWORD(v45);
        long long v27 = v40;
        long long v28 = v41;
        *(void *)(v26 + 32) = v42;
        *(_OWORD *)uint64_t v26 = v27;
        *(_OWORD *)(v26 + 16) = v28;
      }
      uint64_t v29 = (v20 + 1);
      HIDWORD(v45) = v29;
      --v6;
    }
    while (v6);
    unsigned int v30 = v45;
    if (v45 <= v29)
    {
      uint64_t v33 = (uint64_t)result;
    }
    else
    {
      if (!v29) {
        goto LABEL_39;
      }
      uint64_t v39 = result;
      if (v29 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v31 = v29;
      unsigned int v32 = 40 * v29;
      uint64_t v33 = WTF::fastMalloc((WTF *)(40 * v29));
      unsigned int v30 = v32 / 0x28;
      LODWORD(v45) = v32 / 0x28;
      uint64_t v44 = v33;
      unint64_t result = v39;
      if ((WTF *)v33 == v39)
      {
LABEL_39:
        uint64_t v44 = 0;
        LODWORD(v45) = 0;
      }
      else
      {
        uint64_t v34 = 0;
        do
        {
          uint64_t v35 = v33 + v34;
          long long v36 = *(_OWORD *)((char *)v39 + v34);
          long long v37 = *(_OWORD *)((char *)v39 + v34 + 16);
          *(void *)(v35 + 32) = *(void *)((char *)v39 + v34 + 32);
          *(_OWORD *)uint64_t v35 = v36;
          *(_OWORD *)(v35 + 16) = v37;
          v34 += 40;
        }
        while (40 * v31 != v34);
        if (!v39) {
          goto LABEL_41;
        }
      }
      WTF::fastFree(result, v5);
      uint64_t v33 = v44;
      unsigned int v30 = v45;
    }
LABEL_41:
    int v19 = 0;
    *(void *)a1 = v33;
    int v38 = HIDWORD(v45);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    *(_DWORD *)(a1 + 8) = v30;
    *(_DWORD *)(a1 + 12) = v38;
    goto LABEL_19;
  }
  if (v4)
  {
    LODWORD(v45) = 40 * (int)v4 / 0x28u;
    uint64_t v44 = WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, &v40);
      if (!v43) {
        break;
      }
      int v7 = HIDWORD(v45);
      if (HIDWORD(v45) == v45)
      {
        unint64_t v8 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, HIDWORD(v45) + 1, (unint64_t)&v40);
        int v7 = HIDWORD(v45);
        uint64_t v9 = v44;
        uint64_t v10 = v44 + 40 * HIDWORD(v45);
        long long v11 = *(_OWORD *)v8;
        long long v12 = *(_OWORD *)(v8 + 16);
        *(void *)(v10 + 32) = *(void *)(v8 + 32);
      }
      else
      {
        uint64_t v9 = v44;
        uint64_t v10 = v44 + 40 * HIDWORD(v45);
        long long v11 = v40;
        long long v12 = v41;
        *(void *)(v10 + 32) = v42;
      }
      *(_OWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      int v13 = v7 + 1;
      HIDWORD(v45) = v13;
      if (!--v6)
      {
        int v14 = v45;
        goto LABEL_18;
      }
    }
LABEL_33:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    int v19 = 1;
  }
  else
  {
    int v13 = 0;
    int v14 = 0;
    uint64_t v9 = 0;
LABEL_18:
    int v19 = 0;
    uint64_t v44 = 0;
    *(void *)a1 = v9;
    HIDWORD(v45) = 0;
    *(_DWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 12) = v13;
LABEL_19:
    *(unsigned char *)(a1 + 16) = 1;
  }
  unint64_t result = (WTF *)v44;
  if (v44)
  {
    uint64_t v44 = 0;
    LODWORD(v45) = 0;
    unint64_t result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v19) {
    goto LABEL_12;
  }
  return result;
}

void sub_198820A0C(_Unwind_Exception *exception_object, void *a2)
{
  unint64_t v4 = *(WTF **)(v2 - 48);
  if (v4)
  {
    *(void *)(v2 - 48) = 0;
    *(_DWORD *)(v2 - 40) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a1);
  if (!v3) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return v2;
}

void IPC::ArgumentCoder<WebKit::WebExtensionCookieParameters,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<PAL::SessionID>>(a1, &v10);
  IPC::Decoder::decode<WebCore::Cookie>(a1, v8);
  if (*(void *)a1)
  {
    if (v12)
    {
      *(void *)&long long v6 = v10;
      BYTE8(v6) = v11;
      if (v9)
      {
        WebCore::Cookie::Cookie((uint64_t)v7, v8);
        *(_OWORD *)a2 = v6;
        WebCore::Cookie::Cookie(a2 + 16, v7);
        *(unsigned char *)(a2 + 152) = 1;
        WebCore::Cookie::~Cookie((WebCore::Cookie *)v7, v5);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 152) = 0;
LABEL_5:
  if (v9) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v8, v4);
  }
}

void sub_198820B4C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  WebCore::Cookie::~Cookie(v45, a2);
  if (a45) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)&a28, v47);
  }
  _Unwind_Resume(a1);
}

IPC::Decoder *IPC::Decoder::decode<std::optional<PAL::SessionID>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::Cookie>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::Cookie,void>::decode(a1, a2);
  if (!a2[136])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198820C6C(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 136)) {
    WebCore::Cookie::~Cookie(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 48));

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 50));
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v20);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v17);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v14);
  int v4 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*(void *)a1) {
    goto LABEL_53;
  }
  if (!v22) {
    goto LABEL_52;
  }
  int v7 = v21;
  if (v21)
  {
    unint64_t v8 = v20;
    int v20 = 0;
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (!v19
    || ((int v9 = v18) != 0 ? (v10 = v17, v17 = 0) : (v10 = 0),
        !v16
     || ((v11 = v15) != 0 ? (char v12 = v14, v14 = 0) : (char v12 = 0), (v4 & 0xFF0000) == 0 || (result & 0xFF0000) == 0)))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    goto LABEL_33;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v7)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
    unint64_t v8 = 0;
  }
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v9)
  {
    *(void *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 24) = 1;
    uint64_t v10 = 0;
  }
  int v13 = (unsigned __int16)v4 | ((unsigned __int16)result << 16);
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v11)
  {
    *(void *)(a2 + 32) = v12;
    *(unsigned char *)(a2 + 40) = 1;
  }
  *(_DWORD *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 56) = 1;
  if (v9 && v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      uint64_t result = WTF::StringImpl::destroy(v10, v6);
      if (!v7) {
        goto LABEL_33;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v7) {
    goto LABEL_33;
  }
LABEL_29:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
LABEL_33:
  if (v16)
  {
    if (v15)
    {
      uint64_t result = (uint64_t)v14;
      int v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (v19)
  {
    if (v18)
    {
      uint64_t result = (uint64_t)v17;
      int v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (v22)
  {
    if (v21)
    {
      uint64_t result = (uint64_t)v20;
      int v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198820F24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, WTF::StringImpl *a16, char a17, int a18, __int16 a19, char a20,char a21,WTF::StringImpl *a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if ((_BYTE)a19 && a17 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if ((_BYTE)a25) {
    BOOL v28 = a23 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(IPC::Encoder *a1, unsigned char *a2)
{
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)a2);
  IPC::ArgumentCoder<std::optional<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>,void>::encode<IPC::Encoder,std::optional<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(a2 + 56));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 80));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 96));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 112));
  char v5 = a2[128];
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, a2[129]);
}

void IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v106);
  unint64_t v8 = a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *a1;
        uint64_t v14 = a1[1];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_9;
  }
  int v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    uint64_t v14 = v8;
    uint64_t v15 = 0;
LABEL_9:
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v9 = *a1;
        unint64_t v8 = a1[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v12 = *v11;
  if (v12 >= 2)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v9);
    }
    goto LABEL_11;
  }
  if (!v12)
  {
    int v13 = 0;
    int v76 = 0;
    int v3 = 1;
    goto LABEL_13;
  }
  IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)v77, a1);
  if (LOBYTE(v77[1]))
  {
    int v3 = 0;
    int v76 = 0;
    int v13 = v77[0];
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v21 = a1[3];
  if (v21 && v20) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
  }
  int v13 = 0;
  int v76 = 1;
LABEL_13:
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v102, (IPC::Decoder *)a1);
  unint64_t v22 = a1[1];
  uint64_t v23 = *a1;
  unint64_t v24 = a1[2] - *a1;
  if (v22 <= v24)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v69 = a1[3];
    if (v69)
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(void *)v69 + 16))(v69);
        uint64_t v68 = *a1;
        uint64_t v67 = a1[1];
      }
      else
      {
        uint64_t v67 = 0;
        uint64_t v68 = 0;
      }
    }
LABEL_130:
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v70 = a1[3];
    if (v70)
    {
      if (v67)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70 + 16))(v70, v68, v67);
LABEL_37:
        uint64_t v23 = *a1;
        unint64_t v22 = a1[1];
        goto LABEL_38;
      }
      unint64_t v22 = 0;
      uint64_t v23 = 0;
    }
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v38 = a1[3];
    if (v38 && v22) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v23);
    }
    uint64_t v39 = *a1;
    uint64_t v40 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v41 = a1[3];
    if (v41 && v40) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39);
    }
    uint64_t v29 = 0;
    int v34 = 1;
    goto LABEL_41;
  }
  long long v25 = (unsigned __int8 *)(v23 + v24);
  a1[2] = (uint64_t)(v25 + 1);
  if (!v23)
  {
    uint64_t v67 = v22;
    uint64_t v68 = 0;
    goto LABEL_130;
  }
  unsigned int v26 = *v25;
  if (v26 >= 2) {
    goto LABEL_38;
  }
  if (!v26)
  {
    int v34 = 0;
    uint64_t v29 = 0;
    int v4 = 1;
    goto LABEL_41;
  }
  unint64_t v27 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v28) {
    goto LABEL_37;
  }
  uint64_t v29 = (WTF *)v27;
  v77[0] = 0;
  v77[1] = 0;
  if (v27 >= 0x20000)
  {
    do
    {
      uint64_t v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      uint64_t v99 = (WTF::StringImpl *)v36;
      unsigned int v100 = v32;
      if (!(_BYTE)v32) {
        goto LABEL_35;
      }
      if (HIDWORD(v77[1]) == LODWORD(v77[1]))
      {
        uint64_t v35 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, HIDWORD(v77[1]) + 1, (unint64_t)&v99);
        *((void *)v77[0] + HIDWORD(v77[1])) = *v35;
      }
      else
      {
        *((void *)v77[0] + HIDWORD(v77[1])) = v36;
      }
      uint64_t v2 = ++HIDWORD(v77[1]);
      uint64_t v29 = (WTF *)((char *)v29 - 1);
    }
    while (v29);
    uint64_t v29 = v77[0];
    if (LODWORD(v77[1]) > v2)
    {
      unint64_t v71 = v77[0];
      if (v2)
      {
        if (v2 >> 29)
        {
          __break(0xC471u);
          goto LABEL_162;
        }
        uint64_t v72 = 8 * v2;
        unsigned int v73 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
        LODWORD(v77[1]) = v2;
        v77[0] = v73;
        unint64_t v71 = v29;
        if (v73 != v29)
        {
          unsigned __int8 v74 = v29;
          do
          {
            uint64_t v75 = *(void *)v74;
            unsigned __int8 v74 = (WTF *)((char *)v74 + 8);
            *(void *)unsigned int v73 = v75;
            unsigned int v73 = (WTF *)((char *)v73 + 8);
            v72 -= 8;
          }
          while (v72);
          unint64_t v71 = v77[0];
        }
      }
      if (v29)
      {
        if (v71 == v29)
        {
          v77[0] = 0;
          LODWORD(v77[1]) = 0;
        }
        WTF::fastFree(v29, v32);
        uint64_t v29 = v77[0];
      }
      else
      {
        uint64_t v29 = v71;
      }
    }
    LODWORD(v2) = v77[1];
    unsigned int v5 = HIDWORD(v77[1]);
    goto LABEL_29;
  }
  if (v27)
  {
    unsigned int v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v27));
    LODWORD(v77[1]) = v29;
    v77[0] = v30;
    while (1)
    {
      uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      uint64_t v99 = (WTF::StringImpl *)v31;
      unsigned int v100 = v32;
      if (!(_BYTE)v32) {
        break;
      }
      if (HIDWORD(v77[1]) == LODWORD(v77[1]))
      {
        uint64_t v33 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, HIDWORD(v77[1]) + 1, (unint64_t)&v99);
        *((void *)v77[0] + HIDWORD(v77[1])) = *v33;
      }
      else
      {
        *((void *)v77[0] + HIDWORD(v77[1])) = v31;
      }
      unsigned int v5 = ++HIDWORD(v77[1]);
      uint64_t v29 = (WTF *)((char *)v29 - 1);
      if (!v29)
      {
        uint64_t v29 = v77[0];
        LODWORD(v2) = v77[1];
        goto LABEL_29;
      }
    }
LABEL_35:
    long long v37 = v77[0];
    if (v77[0])
    {
      v77[0] = 0;
      LODWORD(v77[1]) = 0;
      WTF::fastFree(v37, v32);
    }
    goto LABEL_37;
  }
  unsigned int v5 = 0;
  LODWORD(v2) = 0;
LABEL_29:
  int v34 = 0;
  int v4 = 0;
LABEL_41:
  IPC::Decoder::decode<std::optional<WTF::String>>((IPC::Decoder *)a1, (uint64_t)&v99);
  IPC::Decoder::decode<std::optional<WTF::String>>((IPC::Decoder *)a1, (uint64_t)&v96);
  IPC::Decoder::decode<std::optional<WTF::String>>((IPC::Decoder *)a1, (uint64_t)&v93);
  unsigned __int16 v42 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  unsigned __int16 v43 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a1);
  if (*a1)
  {
    int v45 = v76;
    if (v108)
    {
      v77[0] = v106;
      LOBYTE(v77[1]) = v107;
      if (!v76)
      {
        LOBYTE(v78) = 0;
        char v79 = 0;
        if ((v3 & 1) == 0)
        {
          unsigned __int8 v78 = v13;
          char v79 = 1;
          int v13 = 0;
        }
        if (v105)
        {
          LOBYTE(v80) = 0;
          char v82 = 0;
          int v46 = v104;
          if (v104)
          {
            uint64_t v80 = v102;
            uint64_t v47 = v103;
            uint64_t v102 = 0;
            uint64_t v103 = 0;
            uint64_t v81 = v47;
            char v82 = 1;
          }
          if (!v34)
          {
            LOBYTE(v83) = 0;
            char v85 = 0;
            if ((v4 & 1) == 0)
            {
              unsigned int v83 = v29;
              unint64_t v84 = __PAIR64__(v5, v2);
              char v85 = 1;
              uint64_t v29 = 0;
            }
            if (v101)
            {
              int v48 = 0;
              LOBYTE(v86) = 0;
              char v87 = 0;
              int v49 = v100;
              if ((_BYTE)v100)
              {
                long long v50 = v99;
                uint64_t v99 = 0;
                uint64_t v86 = v50;
                int v48 = 1;
                char v87 = 1;
              }
              if (v98)
              {
                LOBYTE(v88) = 0;
                char v89 = 0;
                int v51 = v97;
                if (v97)
                {
                  unint64_t v52 = v96;
                  char v96 = 0;
                  v88 = v52;
                  char v89 = 1;
                }
                if (v95)
                {
                  LOBYTE(v90) = 0;
                  char v91 = 0;
                  int v53 = v94;
                  if (v94)
                  {
                    uint64_t v54 = v93;
                    v93 = 0;
                    unsigned int v90 = v54;
                    char v91 = 1;
                  }
                  if (v42 > 0xFFu)
                  {
                    LOBYTE(v92) = v42;
                    if (v43 > 0xFFu)
                    {
                      HIBYTE(v92) = v43;
                      *(_OWORD *)a2 = *(_OWORD *)v77;
                      *(unsigned char *)(a2 + 16) = 0;
                      *(unsigned char *)(a2 + 24) = 0;
                      if ((v3 & 1) == 0)
                      {
                        unsigned int v55 = v78;
                        unsigned __int8 v78 = 0;
                        *(void *)(a2 + 16) = v55;
                        *(unsigned char *)(a2 + 24) = 1;
                      }
                      *(unsigned char *)(a2 + 32) = 0;
                      *(unsigned char *)(a2 + 48) = 0;
                      if (v46)
                      {
                        *(void *)(a2 + 32) = v80;
                        uint64_t v56 = v81;
                        uint64_t v80 = 0;
                        uint64_t v81 = 0;
                        *(void *)(a2 + 40) = v56;
                        *(unsigned char *)(a2 + 48) = 1;
                      }
                      *(unsigned char *)(a2 + 56) = 0;
                      *(unsigned char *)(a2 + 72) = 0;
                      if ((v4 & 1) == 0)
                      {
                        *(void *)(a2 + 56) = v83;
                        unint64_t v57 = v84;
                        unsigned int v83 = 0;
                        unint64_t v84 = 0;
                        *(void *)(a2 + 64) = v57;
                        *(unsigned char *)(a2 + 72) = 1;
                      }
                      *(unsigned char *)(a2 + 80) = 0;
                      *(unsigned char *)(a2 + 88) = 0;
                      if (v49)
                      {
                        unsigned __int8 v58 = v86;
                        uint64_t v86 = 0;
                        *(void *)(a2 + 80) = v58;
                        *(unsigned char *)(a2 + 88) = 1;
                      }
                      *(unsigned char *)(a2 + 96) = 0;
                      *(unsigned char *)(a2 + 104) = 0;
                      if (v51)
                      {
                        unsigned int v59 = v88;
                        v88 = 0;
                        *(void *)(a2 + 96) = v59;
                        *(unsigned char *)(a2 + 104) = 1;
                      }
                      *(unsigned char *)(a2 + 112) = 0;
                      *(unsigned char *)(a2 + 120) = 0;
                      if (v53)
                      {
                        *(void *)(a2 + 112) = v90;
                        *(unsigned char *)(a2 + 120) = 1;
                        *(_WORD *)(a2 + 128) = v92;
                        *(unsigned char *)(a2 + 136) = 1;
                        unsigned int v90 = 0;
                        if (!v51) {
                          goto LABEL_80;
                        }
                      }
                      else
                      {
                        *(_WORD *)(a2 + 128) = v92;
                        *(unsigned char *)(a2 + 136) = 1;
                        if (!v51) {
                          goto LABEL_80;
                        }
                      }
                      uint64_t v60 = v88;
                      v88 = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                        {
                          WTF::StringImpl::destroy(v60, v44);
                          if (!v87) {
                            goto LABEL_87;
                          }
                          goto LABEL_83;
                        }
                        *(_DWORD *)v60 -= 2;
                      }
LABEL_80:
                      if (!v48)
                      {
LABEL_87:
                        if (v85)
                        {
                          uint64_t v62 = v83;
                          if (v83)
                          {
                            unsigned int v83 = 0;
                            LODWORD(v84) = 0;
                            WTF::fastFree(v62, v44);
                          }
                        }
                        if (v82) {
                          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v44);
                        }
                        if (v79)
                        {
                          char v63 = v78;
                          unsigned __int8 v78 = 0;
                          if (v63) {
                            CFRelease(*((CFTypeRef *)v63 + 1));
                          }
                        }
                        goto LABEL_95;
                      }
LABEL_83:
                      unsigned __int8 v61 = v86;
                      uint64_t v86 = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2) {
                          WTF::StringImpl::destroy(v61, v44);
                        }
                        else {
                          *(_DWORD *)v61 -= 2;
                        }
                      }
                      goto LABEL_87;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_162:
    __break(1u);
    return;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 136) = 0;
  int v45 = v76;
LABEL_95:
  if (v95)
  {
    if (v94)
    {
      unsigned __int8 v64 = v93;
      v93 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2) {
          WTF::StringImpl::destroy(v64, v44);
        }
        else {
          *(_DWORD *)v64 -= 2;
        }
      }
    }
  }
  if (v98)
  {
    if (v97)
    {
      uint64_t v65 = v96;
      char v96 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2) {
          WTF::StringImpl::destroy(v65, v44);
        }
        else {
          *(_DWORD *)v65 -= 2;
        }
      }
    }
  }
  if (v101)
  {
    if ((_BYTE)v100)
    {
      unsigned __int8 v66 = v99;
      uint64_t v99 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2) {
          WTF::StringImpl::destroy(v66, v44);
        }
        else {
          *(_DWORD *)v66 -= 2;
        }
      }
    }
  }
  if (((v34 | v4) & 1) == 0 && v29) {
    WTF::fastFree(v29, v44);
  }
  if (v105 && v104) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v102, v44);
  }
  if (((v3 | v45) & 1) == 0)
  {
    if (v13) {
      CFRelease(*((CFTypeRef *)v13 + 1));
    }
  }
}

void sub_1988219B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, WTF *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,char a30,int a31,__int16 a32,char a33,char a34,WTF::StringImpl *a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  if (a12) {
    WTF::fastFree(a12, a2);
  }
  if (*(unsigned char *)(v42 - 120) && *(unsigned char *)(v42 - 128)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v42 - 144, a2);
  }
  if (((v41 | a11) & 1) == 0)
  {
    if (v40) {
      CFRelease(*(CFTypeRef *)(v40 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionContentWorldType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::UserStyleLevel>(uint64_t *a1)
{
  __int16 v9 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v9);
  int v2 = HIBYTE(v9);
  if (HIBYTE(v9))
  {
    int v3 = v9;
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      int v8 = v2;
      if (v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      }
      int v3 = 0;
      int v2 = v8;
    }
    else
    {
      int v3 = 0;
    }
  }
  return v3 | (v2 << 8);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2 + 16);

  return IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 32);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v12);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, &v9);
  if (!*(void *)a1) {
    goto LABEL_34;
  }
  if (!v17
    || ((v6 = v16) != 0 ? (uint64_t result = v15, v15 = 0) : (uint64_t result = 0),
        !v14 || ((int v7 = v13) != 0 ? (v8 = v12, v12 = 0) : (v8 = 0), !v11)))
  {
    __break(1u);
LABEL_34:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_20;
  }
  *(void *)&long long v18 = v9;
  BYTE8(v18) = v10;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v6)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = 1;
    uint64_t result = 0;
  }
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v7)
  {
    *(void *)(a2 + 16) = v8;
    *(unsigned char *)(a2 + 24) = 1;
  }
  *(_OWORD *)(a2 + 32) = v18;
  *(unsigned char *)(a2 + 48) = 1;
  if (v6 && result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_20:
  if (v14)
  {
    if (v13)
    {
      uint64_t result = v12;
      unsigned int v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (v17)
  {
    if (v16)
    {
      uint64_t result = v15;
      uint64_t v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198821E8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, int a15, __int16 a16, char a17, char a18, WTF::StringImpl *a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if ((_BYTE)a16 && a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if ((_BYTE)a22 && a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 56);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 64);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 88);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 112));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 114));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 116);

  return IPC::ArgumentCoder<std::optional<WebCore::UserStyleLevel>,void>::encode<IPC::Encoder,std::optional<WebCore::UserStyleLevel> const&>(a1, a2 + 118);
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)a1;
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v105, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v101, (IPC::Decoder *)v2);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v99);
  unint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(WTF::StringImpl **)v2;
  unint64_t v6 = *(void *)(v2 + 16) - *(void *)v2;
  if (v4 <= v6) {
    goto LABEL_90;
  }
  int v7 = (unsigned __int8 *)v5 + v6;
  *(void *)(v2 + 16) = v7 + 1;
  if (!v5)
  {
    unint64_t v50 = v4;
    int v51 = 0;
    goto LABEL_91;
  }
  if (*v7 >= 2u) {
    goto LABEL_92;
  }
  if (!*v7)
  {
    int v11 = 0;
    int i = 0;
    unsigned int v10 = 0x10000;
    goto LABEL_13;
  }
  if (v4 <= v7 + 1 - (unsigned __int8 *)v5)
  {
    unint64_t v9 = 0;
    uint64_t v67 = 0;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v68 = *(void *)(v2 + 24);
    if (v68)
    {
      (*(void (**)(uint64_t))(*(void *)v68 + 16))(v68);
      unint64_t v9 = 0;
      uint64_t v70 = *(WTF::StringImpl **)v2;
      uint64_t v71 = *(void *)(v2 + 8);
      uint64_t v72 = *(void *)(v2 + 24);
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v67 = 0;
      if (v72)
      {
        if (v71)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v72 + 16))(v72, v70);
          uint64_t v67 = *(WTF::StringImpl **)v2;
          unint64_t v9 = *(void *)(v2 + 8);
        }
      }
    }
  }
  else
  {
    *(void *)(v2 + 16) = v7 + 2;
    unsigned int v8 = v7[1];
    if (v8 < 3)
    {
      LODWORD(v9) = v8 | 0x100;
      goto LABEL_8;
    }
    unint64_t v9 = v4;
    uint64_t v67 = v5;
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v69 = *(void *)(v2 + 24);
  if (v69)
  {
    if (!v9) {
      goto LABEL_8;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v69 + 16))(v69, v67, v9);
  }
  LODWORD(v9) = 0;
LABEL_8:
  unsigned int v10 = (v9 > 0xFF) << 16;
  if (v9 >= 0x100) {
    int v11 = v9;
  }
  else {
    int v11 = 0;
  }
  for (int i = 256; ; int i = 0)
  {
LABEL_13:
    if (!HIWORD(v10))
    {
      unsigned int v55 = *(WTF::StringImpl **)v2;
      uint64_t v56 = *(void *)(v2 + 8);
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v57 = *(void *)(v2 + 24);
      if (v57)
      {
        if (v56) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v55);
        }
      }
    }
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v95, (IPC::Decoder *)v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v91, (IPC::Decoder *)v2);
    int v13 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v2);
    uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v2);
    int v19 = result;
    unint64_t v20 = *(void *)(v2 + 8);
    uint64_t v21 = *(WTF::StringImpl **)v2;
    unint64_t v22 = *(void *)(v2 + 16) - *(void *)v2;
    if (v20 <= v22)
    {
      unint64_t v58 = 0;
      unsigned int v59 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v60 = *(void *)(v2 + 24);
      if (v60)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v60 + 16))(v60);
          unsigned int v59 = *(WTF::StringImpl **)v2;
          unint64_t v58 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v58 = 0;
          unsigned int v59 = 0;
        }
      }
      goto LABEL_98;
    }
    uint64_t v23 = (unsigned __int8 *)v21 + v22;
    *(void *)(v2 + 16) = v23 + 1;
    if (!v21)
    {
      unint64_t v58 = v20;
      unsigned int v59 = 0;
LABEL_98:
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v61 = *(void *)(v2 + 24);
      if (v61)
      {
        if (v58)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v61 + 16))(v61, v59, v58);
          uint64_t v21 = *(WTF::StringImpl **)v2;
          unint64_t v20 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v20 = 0;
          uint64_t v21 = 0;
        }
      }
      goto LABEL_99;
    }
    unsigned int v24 = *v23;
    if (v24 < 2)
    {
      if (v24)
      {
        uint64_t result = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)v2);
        int v25 = result;
        unsigned int v26 = ((unsigned __int16)result > 0xFFu) << 16;
        if ((result & 0xFF00) == 0) {
          int v25 = 0;
        }
        int v27 = 256;
      }
      else
      {
        int v25 = 0;
        int v27 = 0;
        unsigned int v26 = 0x10000;
      }
      goto LABEL_22;
    }
LABEL_99:
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t result = *(void *)(v2 + 24);
    if (result && v20) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v21);
    }
    unsigned int v26 = 0;
    int v25 = 0;
    int v27 = 0;
LABEL_22:
    unsigned int v28 = v25 | v26 | v27;
    unint64_t v4 = *(void *)(v2 + 8);
    if (!HIWORD(v26))
    {
      uint64_t v62 = *(WTF::StringImpl **)v2;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v63 = *(void *)(v2 + 24);
      if (!v63 || !v4)
      {
        unint64_t v4 = 0;
        uint64_t v5 = *(WTF::StringImpl **)v2;
LABEL_103:
        *(void *)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        uint64_t v64 = *(void *)(v2 + 24);
        if (v64)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v64 + 16))(v64, v5);
            uint64_t v65 = *(WTF::StringImpl **)v2;
            unint64_t v4 = *(void *)(v2 + 8);
          }
          else
          {
            uint64_t v65 = 0;
          }
        }
        else
        {
          uint64_t v65 = 0;
          unint64_t v4 = 0;
        }
LABEL_105:
        *(void *)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        uint64_t v66 = *(void *)(v2 + 24);
        if (v66)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v66 + 16))(v66, v65);
            uint64_t v5 = *(WTF::StringImpl **)v2;
            unint64_t v4 = *(void *)(v2 + 8);
          }
          else
          {
            uint64_t v5 = 0;
          }
        }
        else
        {
          uint64_t v5 = 0;
          unint64_t v4 = 0;
        }
        goto LABEL_107;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v63 + 16))(v63, v62);
      unint64_t v4 = *(void *)(v2 + 8);
    }
    uint64_t v5 = *(WTF::StringImpl **)v2;
    unint64_t v29 = *(void *)(v2 + 16) - *(void *)v2;
    if (v4 <= v29) {
      goto LABEL_103;
    }
    unsigned int v30 = (unsigned __int8 *)v5 + v29;
    *(void *)(v2 + 16) = v30 + 1;
    if (!v5)
    {
      uint64_t v65 = 0;
      goto LABEL_105;
    }
    unsigned int v31 = *v30;
    if (v31 < 2)
    {
      if (v31)
      {
        uint64_t result = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)v2);
        int v32 = result;
        unsigned int v33 = ((unsigned __int16)result > 0xFFu) << 16;
        if ((result & 0xFF00) == 0) {
          int v32 = 0;
        }
        int v34 = 256;
      }
      else
      {
        int v32 = 0;
        int v34 = 0;
        unsigned int v33 = 0x10000;
      }
      goto LABEL_31;
    }
LABEL_107:
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t result = *(void *)(v2 + 24);
    if (result && v4) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
    }
    unsigned int v33 = 0;
    int v32 = 0;
    int v34 = 0;
LABEL_31:
    if (!HIWORD(v33))
    {
      uint64_t v5 = *(WTF::StringImpl **)v2;
      unint64_t v4 = *(void *)(v2 + 8);
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t result = *(void *)(v2 + 24);
      if (result)
      {
        if (v4)
        {
          int v74 = v34;
          unsigned int v75 = v33;
          int v73 = v32;
          uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
          int v32 = v73;
          int v34 = v74;
          unsigned int v33 = v75;
        }
      }
    }
    if (!*(void *)v2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 120) = 0;
      goto LABEL_71;
    }
    unsigned int v35 = v108;
    if (v108)
    {
      LOBYTE(v76) = 0;
      char v78 = 0;
      int v36 = v107;
      if (v107)
      {
        uint64_t v76 = v105;
        unsigned int v35 = v106;
        unsigned int v17 = HIDWORD(v106);
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        unint64_t v77 = __PAIR64__(v17, v35);
        char v78 = 1;
      }
      unsigned int v37 = v104;
      if (v104)
      {
        LOBYTE(v79) = 0;
        char v81 = 0;
        int v38 = v103;
        if (v103)
        {
          uint64_t v79 = v101;
          unsigned int v37 = v102;
          unsigned int v18 = HIDWORD(v102);
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          unint64_t v80 = __PAIR64__(v18, v37);
          char v81 = 1;
        }
        if (v100)
        {
          unsigned int v39 = v11 | v10 | i;
          uint64_t v5 = v99;
          uint64_t v99 = 0;
          char v82 = v5;
          if (HIWORD(v39))
          {
            __int16 v83 = v11 | v10 | i;
            if (v98)
            {
              LOBYTE(v84) = 0;
              unsigned __int8 v86 = 0;
              int v40 = v97;
              if (v97)
              {
                uint64_t v84 = v95;
                unint64_t v4 = v96;
                unsigned int v15 = HIDWORD(v96);
                uint64_t v95 = 0;
                uint64_t v96 = 0;
                unint64_t v85 = __PAIR64__(v15, v4);
                int v41 = 1;
                unsigned __int8 v86 = 1;
              }
              else
              {
                int v41 = 0;
              }
              unsigned int v42 = v94;
              if (v94)
              {
                LOBYTE(v87) = 0;
                char v89 = 0;
                int v43 = v93;
                if (v93)
                {
                  uint64_t v87 = v91;
                  unsigned int v42 = v92;
                  unsigned int v16 = HIDWORD(v92);
                  uint64_t v91 = 0;
                  uint64_t v92 = 0;
                  unint64_t v88 = __PAIR64__(v16, v42);
                  uint64_t v2 = 1;
                  char v89 = 1;
                }
                if ((v13 & 0xFF0000) != 0)
                {
                  LOWORD(v90) = v13;
                  if ((v19 & 0xFF0000) != 0)
                  {
                    WORD1(v90) = v19;
                    uint64_t v2 = HIWORD(v28);
                    if (v2)
                    {
                      unsigned int v44 = v32 | v33 | v34;
                      WORD2(v90) = v28;
                      if (HIWORD(v44)) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_90:
    unint64_t v50 = 0;
    int v51 = 0;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v52 = *(void *)(v2 + 24);
    if (v52)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v5);
        int v51 = *(WTF::StringImpl **)v2;
        unint64_t v50 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v50 = 0;
        int v51 = 0;
      }
    }
LABEL_91:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v53 = *(void *)(v2 + 24);
    if (v53)
    {
      if (v50)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v53 + 16))(v53, v51, v50);
        uint64_t v5 = *(WTF::StringImpl **)v2;
        unint64_t v4 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_92:
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v54 = *(void *)(v2 + 24);
    if (v54 && v4) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v54 + 16))(v54, v5);
    }
    unsigned int v10 = 0;
    int v11 = 0;
  }
  HIWORD(v90) = v44;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v36)
  {
    uint64_t v45 = v76;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    *(void *)a2 = v45;
    *(_DWORD *)(a2 + 8) = v35;
    *(_DWORD *)(a2 + 12) = v17;
    *(unsigned char *)(a2 + 16) = 1;
  }
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v38)
  {
    uint64_t v46 = v79;
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    *(void *)(a2 + 24) = v46;
    *(_DWORD *)(a2 + 32) = v37;
    *(_DWORD *)(a2 + 36) = v18;
    *(unsigned char *)(a2 + 40) = 1;
  }
  char v82 = 0;
  *(void *)(a2 + 48) = v5;
  *(_WORD *)(a2 + 56) = v39;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  if (v40)
  {
    uint64_t v47 = v84;
    uint64_t v84 = 0;
    unint64_t v85 = 0;
    *(void *)(a2 + 64) = v47;
    *(_DWORD *)(a2 + 72) = v4;
    *(_DWORD *)(a2 + 76) = v15;
    *(unsigned char *)(a2 + 80) = 1;
  }
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  if (v43)
  {
    uint64_t v48 = v87;
    uint64_t v49 = v90;
    uint64_t v87 = 0;
    unint64_t v88 = 0;
    *(void *)(a2 + 88) = v48;
    *(_DWORD *)(a2 + 96) = v42;
    *(_DWORD *)(a2 + 100) = v16;
    *(unsigned char *)(a2 + 104) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v5);
    int v41 = v86;
  }
  else
  {
    uint64_t v49 = v90;
  }
  *(void *)(a2 + 112) = v49;
  *(unsigned char *)(a2 + 120) = 1;
  if (v41) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v5);
  }
  uint64_t result = (uint64_t)v82;
  char v82 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v81) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v5);
  }
  if (v78) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v5);
  }
LABEL_71:
  if (v94 && v93) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v5);
  }
  if (v98 && v97) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v5);
  }
  if (v100)
  {
    uint64_t result = (uint64_t)v99;
    uint64_t v99 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v104 && v103) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v5);
  }
  if (v108)
  {
    if (v107) {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v5);
    }
  }
  return result;
}

void sub_19882295C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(unsigned char *)(v43 - 152))
  {
    uint64_t v45 = *(WTF::StringImpl **)(v43 - 160);
    *(void *)(v43 - 160) = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, a2);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v43 - 120) && *(unsigned char *)(v43 - 128)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v43 - 144, a2);
  }
  if (*(unsigned char *)(v43 - 88)) {
    BOOL v46 = *(unsigned char *)(v43 - 96) == 0;
  }
  else {
    BOOL v46 = 1;
  }
  if (!v46) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v43 - 112, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, (char *)a2);
  IPC::ArgumentCoder<std::optional<WTF::URL>,void>::encode<IPC::Encoder,std::optional<WTF::URL> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 56));

  return IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 64);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  int v3 = a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if ((unint64_t)v5 <= v7) {
    goto LABEL_26;
  }
  unsigned int v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (WTF::StringImpl *)(v8 + 1);
  if (!v6)
  {
    unsigned int v18 = v5;
    int v19 = 0;
    goto LABEL_27;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_29;
  }
  int v10 = 0;
  for (char i = 1; ; char i = 0)
  {
    if (v9) {
      char v12 = i;
    }
    else {
      char v12 = 0;
    }
    IPC::Decoder::decode<std::optional<WTF::URL>>(v30, (IPC::Decoder *)v3, a3);
    uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
    char v15 = v14;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v3, &v27);
    if (!*v3)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      goto LABEL_18;
    }
    if (!v10)
    {
      if (v32)
      {
        int v3 = v23;
        std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v23, (uint64_t)v30);
        if (v15)
        {
          *(void *)&long long v25 = v13;
          if (v29) {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_26:
    unsigned int v18 = 0;
    int v19 = 0;
    *int v3 = 0;
    v3[1] = 0;
    unint64_t v20 = v3[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v20 + 16))(v20);
        int v19 = *v3;
        unsigned int v18 = v3[1];
      }
      else
      {
        unsigned int v18 = 0;
        int v19 = 0;
      }
    }
LABEL_27:
    *int v3 = 0;
    v3[1] = 0;
    uint64_t v21 = v3[3];
    if (v21 && v18)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v19, v18);
      unsigned int v9 = 0;
      unint64_t v6 = *v3;
      uint64_t v5 = v3[1];
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      unsigned int v9 = 0;
    }
LABEL_29:
    *int v3 = 0;
    v3[1] = 0;
    unint64_t v22 = v3[3];
    if (v22 && v5) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v22 + 16))(v22, v6);
    }
    int v10 = 1;
  }
  *((void *)&v25 + 1) = v27;
  char v26 = v28;
  *(unsigned char *)a2 = v12;
  uint64_t result = (WTF::StringImpl *)std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 8), (uint64_t)v23);
  *(_OWORD *)(a2 + 56) = v25;
  *(unsigned char *)(a2 + 72) = v26;
  *(unsigned char *)(a2 + 80) = 1;
  if (v24)
  {
    uint64_t result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_18:
  if (v32)
  {
    if (v31)
    {
      uint64_t result = v30[0];
      v30[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198822D08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if ((_BYTE)a29 && a27 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WTF::URL>>(unsigned char *a1, IPC::Decoder *a2, __n128 a3)
{
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *((void *)a2 + 1);
  unint64_t v8 = v5 - v6;
  if (v7 <= v8)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a2;
        unint64_t v13 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v9 = (unsigned __int8 *)(v6 + v8);
  *((void *)a2 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v13 = v7;
    uint64_t v14 = 0;
LABEL_16:
    unint64_t v7 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v6 = *(void *)a2;
        unint64_t v7 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v6 = 0;
      }
    }
    goto LABEL_17;
  }
  unsigned int v10 = *v9;
  if (v10 >= 2)
  {
LABEL_17:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v6);
    }
    goto LABEL_18;
  }
  if (!v10)
  {
    LOBYTE(v21[0]) = 0;
    char v22 = 0;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v21);
    goto LABEL_8;
  }
  IPC::Decoder::decode<WTF::URL>(a2, v21);
  if (!v22)
  {
LABEL_18:
    *a1 = 0;
    a1[48] = 0;
    goto LABEL_13;
  }
  a3.n128_f64[0] = WTF::URL::URL((uint64_t)a1, (uint64_t *)v21);
  a1[40] = 1;
LABEL_8:
  a1[48] = 1;
  if (v22)
  {
    char v12 = v21[0];
    v21[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
LABEL_13:
  if (!a1[48])
  {
    uint64_t v18 = *(void *)a2;
    uint64_t v19 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v19) {
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v20 + 16))(v20, v18, a3);
      }
    }
  }
}

void sub_198822F98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(unsigned char *)(v14 + 48)) {
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v14, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 40));

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 48));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, &v14);
  uint64_t v4 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  char v6 = v5;
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  if (!*(void *)a1) {
    goto LABEL_16;
  }
  if (!v17
    || (unsigned int v9 = v14, v14 = 0, v10 = v9, v11 = v15, v12 = v16, LODWORD(v15) = v15 & 0xFFFFFFFE, !v6)
    || (*(void *)&long long v13 = v4, !(_BYTE)v8))
  {
    __break(1u);
LABEL_16:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    goto LABEL_9;
  }
  *((void *)&v13 + 1) = result;
  WTF::URL::URL(a2, (uint64_t *)&v10);
  *(_OWORD *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 56) = 1;
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_9:
  if (v17)
  {
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198823158(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a22 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 56));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 58));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 60));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 64);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 88);

  return IPC::ArgumentCoder<std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>,void>::encode<IPC::Encoder,std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>> const&>(a1, a2 + 112);
}

void IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v95);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v92);
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        uint64_t v42 = *(void *)a1;
        unint64_t v41 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = 0;
      }
    }
    goto LABEL_82;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v41 = v4;
    uint64_t v42 = 0;
LABEL_82:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44)
    {
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
        unint64_t v5 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_83;
  }
  if (*v7 < 2u)
  {
    if (!*v7)
    {
      int v11 = 0;
      int v12 = 0;
      unsigned int v10 = 0x10000;
      goto LABEL_13;
    }
    if (v4 <= (unint64_t)&v7[-v5 + 1])
    {
      unint64_t v9 = 0;
      unint64_t v55 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v56 = *((void *)a1 + 3);
      if (v56)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        unint64_t v9 = 0;
        uint64_t v58 = *(void *)a1;
        uint64_t v59 = *((void *)a1 + 1);
        uint64_t v60 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        unint64_t v55 = 0;
        if (v60)
        {
          if (v59)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
            unint64_t v55 = *(void *)a1;
            unint64_t v9 = *((void *)a1 + 1);
          }
        }
      }
    }
    else
    {
      *((void *)a1 + 2) = v7 + 2;
      unsigned int v8 = v7[1];
      if (v8 < 4)
      {
        LODWORD(v9) = v8 | 0x100;
        goto LABEL_8;
      }
      unint64_t v9 = v4;
      unint64_t v55 = v5;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v57 = *((void *)a1 + 3);
    if (v57)
    {
      if (!v9) {
        goto LABEL_8;
      }
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v57 + 16))(v57, v55, v9);
    }
    LODWORD(v9) = 0;
LABEL_8:
    unsigned int v10 = (v9 > 0xFF) << 16;
    if (v9 >= 0x100) {
      int v11 = v9;
    }
    else {
      int v11 = 0;
    }
    int v12 = 256;
    goto LABEL_13;
  }
LABEL_83:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (v45 && v4) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v45 + 16))(v45, v5);
  }
  unsigned int v10 = 0;
  int v11 = 0;
  int v12 = 0;
LABEL_13:
  if (!HIWORD(v10))
  {
    uint64_t v46 = *(void *)a1;
    uint64_t v47 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v48 = *((void *)a1 + 3);
    if (v48)
    {
      if (v47) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46);
      }
    }
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v90);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v88);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v86);
  int v13 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v14 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v15 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v82, a1);
  uint64_t v16 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v78, a1);
  unint64_t v18 = *((void *)a1 + 1);
  unint64_t v19 = *(void *)a1;
  unint64_t v20 = *((void *)a1 + 2) - *(void *)a1;
  if (v18 <= v20)
  {
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v51 = *((void *)a1 + 3);
    if (v51)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
        unint64_t v50 = *(void *)a1;
        unint64_t v49 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v49 = 0;
        unint64_t v50 = 0;
      }
    }
    goto LABEL_89;
  }
  uint64_t v21 = (unsigned __int8 *)(v19 + v20);
  *((void *)a1 + 2) = v21 + 1;
  if (!v19)
  {
    unint64_t v49 = v18;
    unint64_t v50 = 0;
LABEL_89:
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (v52)
    {
      if (v49)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v52 + 16))(v52, v50, v49);
        unint64_t v19 = *(void *)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
      }
    }
    goto LABEL_90;
  }
  unsigned int v22 = *v21;
  if (v22 >= 2)
  {
LABEL_90:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v53 = *((void *)a1 + 3);
    if (v53 && v18) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v53 + 16))(v53, v19);
    }
    unsigned int v22 = 0;
    goto LABEL_92;
  }
  if (!v22)
  {
    int v23 = 0;
    goto LABEL_21;
  }
  uint64_t v16 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>((uint64_t *)a1);
  unsigned int v22 = 0x10000;
  if (v16 >= 0x10000)
  {
    int v23 = 0;
    unsigned int v22 = (unsigned __int16)v16 | 0x10000;
    goto LABEL_21;
  }
LABEL_92:
  unint64_t v19 = *(void *)a1;
  uint64_t v54 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v16 = *((void *)a1 + 3);
  if (v16)
  {
    unsigned int v61 = v22;
    if (v54) {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v19);
    }
    int v23 = 1;
    unsigned int v22 = v61;
  }
  else
  {
    int v23 = 1;
  }
LABEL_21:
  if (!*(void *)a1)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 120) = 0;
    goto LABEL_46;
  }
  if (!v96) {
    goto LABEL_57;
  }
  char v24 = v95;
  uint64_t v95 = 0;
  uint64_t v62 = v24;
  if (!v94) {
    goto LABEL_57;
  }
  unsigned int v25 = v11 | v10 | v12;
  LOBYTE(v63) = 0;
  char v64 = 0;
  int v26 = v93;
  if (v93)
  {
    uint64_t v27 = v92;
    uint64_t v92 = 0;
    uint64_t v63 = v27;
    char v64 = 1;
  }
  if (!HIWORD(v25)) {
    goto LABEL_57;
  }
  __int16 v65 = v11 | v10 | v12;
  if (!v91) {
    goto LABEL_57;
  }
  char v28 = v90;
  uint64_t v90 = 0;
  uint64_t v66 = v28;
  if (!v89) {
    goto LABEL_57;
  }
  char v29 = v88;
  unint64_t v88 = 0;
  uint64_t v67 = v29;
  if (!v87) {
    goto LABEL_57;
  }
  uint64_t v30 = v86;
  uint64_t v86 = 0;
  uint64_t v68 = v30;
  if ((v13 & 0xFF0000) == 0) {
    goto LABEL_57;
  }
  LOWORD(v69) = v13;
  if ((v14 & 0xFF0000) == 0) {
    goto LABEL_57;
  }
  HIWORD(v69) = v14;
  if ((v15 & 0xFF0000) == 0) {
    goto LABEL_57;
  }
  __int16 v70 = v15;
  unsigned int v31 = v85;
  if (!v85) {
    goto LABEL_57;
  }
  LOBYTE(v71) = 0;
  char v73 = 0;
  int v32 = v84;
  if (v84)
  {
    uint64_t v71 = v82;
    unsigned int v31 = v83;
    uint64_t v16 = HIDWORD(v83);
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    unint64_t v72 = __PAIR64__(v16, v31);
    char v73 = 1;
  }
  unint64_t v19 = v81;
  if (!v81) {
    goto LABEL_57;
  }
  LOBYTE(v74) = 0;
  char v76 = 0;
  int v33 = v80;
  if (!v80)
  {
    if (!v23) {
      goto LABEL_39;
    }
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v74 = v78;
  unint64_t v19 = v79;
  unsigned int v17 = HIDWORD(v79);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v75 = __PAIR64__(v17, v19);
  char v76 = 1;
  if (v23) {
    goto LABEL_57;
  }
LABEL_39:
  LOWORD(v77) = v22;
  BYTE2(v77) = BYTE2(v22);
  uint64_t v62 = 0;
  *(void *)a2 = v24;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v26)
  {
    int v34 = v63;
    uint64_t v63 = 0;
    *(void *)(a2 + 8) = v34;
    *(unsigned char *)(a2 + 16) = 1;
  }
  *(_WORD *)(a2 + 24) = v25;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  *(void *)(a2 + 32) = v28;
  *(void *)(a2 + 40) = v29;
  uint64_t v68 = 0;
  *(void *)(a2 + 48) = v30;
  *(_DWORD *)(a2 + 56) = v69;
  *(_WORD *)(a2 + 60) = v70;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  if (v32)
  {
    uint64_t v35 = v71;
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    *(void *)(a2 + 64) = v35;
    *(_DWORD *)(a2 + 72) = v31;
    *(_DWORD *)(a2 + 76) = v16;
    *(unsigned char *)(a2 + 80) = 1;
  }
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  if (v33)
  {
    uint64_t v36 = v74;
    uint64_t v74 = 0;
    unint64_t v75 = 0;
    *(void *)(a2 + 88) = v36;
    *(_DWORD *)(a2 + 96) = v19;
    *(_DWORD *)(a2 + 100) = v17;
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(_DWORD *)(a2 + 112) = v77;
  *(unsigned char *)(a2 + 120) = 1;
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v62, (void *)v19);
LABEL_46:
  if (v81 && v80) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, (void *)v19);
  }
  if (v85 && v84) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, (void *)v19);
  }
  if (v87)
  {
    uint64_t v16 = v86;
    uint64_t v86 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        goto LABEL_59;
      }
LABEL_58:
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, (WTF::StringImpl *)v19);
    }
  }
LABEL_59:
  if (v89)
  {
    unsigned int v37 = v88;
    unint64_t v88 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  if (v91)
  {
    int v38 = v90;
    uint64_t v90 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  if (v94)
  {
    if (v93)
    {
      unsigned int v39 = v92;
      uint64_t v92 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
  }
  if (v96)
  {
    int v40 = v95;
    uint64_t v95 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
}

void sub_198823A7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(unsigned char *)(v42 - 104))
  {
    if (*(unsigned char *)(v42 - 112))
    {
      uint64_t v44 = *(WTF::StringImpl **)(v42 - 120);
      *(void *)(v42 - 120) = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, a2);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
    }
  }
  if (*(unsigned char *)(v42 - 88))
  {
    uint64_t v45 = *(WTF::StringImpl **)(v42 - 96);
    *(void *)(v42 - 96) = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, a2);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t v4 = (char *)(a2 + 176);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)a2);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 128));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 168));

  return IPC::Encoder::operator<<<BOOL>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>(a1);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v60);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v57);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v53);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v51);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v47);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v43);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v41);
  unint64_t v5 = a1[1];
  unint64_t v6 = (WTF::StringImpl *)*a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7) {
    goto LABEL_57;
  }
  unsigned int v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    uint64_t v22 = v5;
    uint64_t v23 = 0;
    goto LABEL_58;
  }
  unsigned int v9 = *v8;
  if (v9 > 1) {
    goto LABEL_59;
  }
  int v10 = 0;
  for (BOOL i = v9 != 0; ; BOOL i = 0)
  {
    if (HIWORD(v4))
    {
      LOWORD(v26) = v4;
      if (v62)
      {
        *((void *)&v26 + 1) = v60;
        LOBYTE(v27) = v61;
        if (v59)
        {
          *((void *)&v27 + 1) = v57;
          char v28 = v58;
          if (v56)
          {
            int v12 = v53;
            uint64_t v53 = 0;
            char v29 = v12;
            long long v30 = v54;
            long long v31 = v55;
            LODWORD(v54) = v54 & 0xFFFFFFFE;
            if (v52)
            {
              int v13 = v51;
              uint64_t v51 = 0;
              int v32 = v13;
              if (v50)
              {
                int v14 = v47;
                uint64_t v47 = 0;
                int v33 = v14;
                long long v34 = v48;
                long long v35 = v49;
                LODWORD(v48) = v48 & 0xFFFFFFFE;
                if (v46)
                {
                  int v15 = v43;
                  uint64_t v43 = 0;
                  uint64_t v36 = v15;
                  long long v37 = v44;
                  long long v38 = v45;
                  LODWORD(v44) = v44 & 0xFFFFFFFE;
                  if (v42)
                  {
                    uint64_t v16 = v41;
                    unint64_t v41 = 0;
                    unsigned int v39 = v16;
                    if (!v10) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_57:
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *a1;
        uint64_t v22 = a1[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
LABEL_58:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        unint64_t v6 = (WTF::StringImpl *)*a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
LABEL_59:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (!result
      || !v5
      || (uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v6), !*a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 184) = 0;
      goto LABEL_30;
    }
    int v10 = 1;
  }
  BOOL v40 = i;
  *(_OWORD *)a2 = v26;
  *(_OWORD *)(a2 + 16) = v27;
  *(unsigned char *)(a2 + 32) = v28;
  WTF::URL::URL(a2 + 40, (uint64_t *)&v29);
  unsigned int v17 = v32;
  int v32 = 0;
  *(void *)(a2 + 80) = v17;
  WTF::URL::URL(a2 + 88, (uint64_t *)&v33);
  WTF::URL::URL(a2 + 128, (uint64_t *)&v36);
  unint64_t v18 = v36;
  *(void *)(a2 + 168) = v39;
  *(unsigned char *)(a2 + 176) = v40;
  *(unsigned char *)(a2 + 184) = 1;
  unsigned int v39 = 0;
  uint64_t v36 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v6);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  unint64_t v19 = v33;
  int v33 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v6);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  unint64_t v20 = v32;
  int v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v6);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v29;
  char v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_30:
  if (v42)
  {
    uint64_t result = v41;
    unint64_t v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t result = v43;
    uint64_t v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v50)
  {
    uint64_t result = v47;
    uint64_t v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v52)
  {
    uint64_t result = v51;
    uint64_t v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v56)
  {
    uint64_t result = v53;
    uint64_t v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19882413C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,char a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a34 && a33)
  {
    if (*(_DWORD *)a33 == 2) {
      WTF::StringImpl::destroy(a33, a2);
    }
    else {
      *(_DWORD *)a33 -= 2;
    }
  }
  if (a40 && a35)
  {
    if (*(_DWORD *)a35 == 2) {
      WTF::StringImpl::destroy(a35, a2);
    }
    else {
      *(_DWORD *)a35 -= 2;
    }
  }
  if (*(unsigned char *)(v40 - 168))
  {
    char v42 = *(WTF::StringImpl **)(v40 - 208);
    *(void *)(v40 - 208) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, a2);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v40 - 152))
  {
    uint64_t v43 = *(WTF::StringImpl **)(v40 - 160);
    *(void *)(v40 - 160) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, a2);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v40 - 104))
  {
    long long v44 = *(WTF::StringImpl **)(v40 - 144);
    *(void *)(v40 - 144) = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, a2);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>(uint64_t *a1)
{
  int v2 = IPC::Decoder::decode<unsigned short>(a1);
  BOOL v3 = (v2 & 0xFC00) != 0 || (v2 & 0xFF0000) == 0;
  if (v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      __int16 v10 = v2;
      BOOL v9 = v3;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      BOOL v3 = v9;
      LOWORD(v2) = v10;
    }
  }
  if (v3) {
    return 0;
  }
  else {
    return (unsigned __int16)v2 | 0x10000u;
  }
}

_DWORD *IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 200);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 216));
  char v5 = *(unsigned char *)(a2 + 224);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 232));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v31);
  IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>((uint64_t *)a1, v29);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, &v26);
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  unsigned __int16 v7 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a1);
  uint64_t result = IPC::Decoder::decode<WTF::URL>(a1, &v22);
  if (!*(void *)a1) {
    goto LABEL_36;
  }
  if (!v33) {
    goto LABEL_35;
  }
  LOBYTE(v15) = 0;
  char v16 = 0;
  if (v32)
  {
    __int16 v10 = v31;
    long long v31 = 0;
    int v15 = v10;
    char v16 = 1;
  }
  if (!v30
    || (uint64_t result = (WTF::StringImpl *)std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v17, (uint64_t)v29), !v28)|| (*(void *)v18 = v26, v18[8] = v27, !v6)|| (*(void *)&v18[16] = v4, v7 <= 0xFFu)|| (v18[24] = v7, !v25))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 272) = 0;
    goto LABEL_21;
  }
  int v11 = v22;
  uint64_t v22 = 0;
  unint64_t v19 = v11;
  long long v20 = v23;
  long long v21 = v24;
  LODWORD(v23) = v23 & 0xFFFFFFFE;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v16)
  {
    int v12 = v15;
    int v15 = 0;
    *(void *)a2 = v12;
    *(unsigned char *)(a2 + 8) = 1;
  }
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 16), (uint64_t)v17);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 209) = *(_OWORD *)&v18[9];
  WTF::URL::URL(a2 + 232, (uint64_t *)&v19);
  *(unsigned char *)(a2 + 272) = 1;
  int v14 = v19;
  unint64_t v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17);
  if (v16)
  {
    uint64_t result = v15;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
LABEL_21:
  if (v25)
  {
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v30) {
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29);
  }
  if (v33)
  {
    if (v32)
    {
      uint64_t result = v31;
      long long v31 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198824710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v54);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v52);
  if (a38)
  {
    if (*(_DWORD *)a38 == 2) {
      WTF::StringImpl::destroy(a38, v57);
    }
    else {
      *(_DWORD *)a38 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v53);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v58);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a48 && a43)
  {
    if (*(_DWORD *)a43 == 2) {
      WTF::StringImpl::destroy(a43, v58);
    }
    else {
      *(_DWORD *)a43 -= 2;
    }
  }
  if (LOBYTE(STACK[0x210])) {
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a52);
  }
  if (*(unsigned char *)(v55 - 56)) {
    BOOL v59 = *(unsigned char *)(v55 - 64) == 0;
  }
  else {
    BOOL v59 = 1;
  }
  if (!v59)
  {
    uint64_t v60 = *(WTF::StringImpl **)(v55 - 72);
    *(void *)(v55 - 72) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, v58);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[184])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198824894(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 184)) {
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)a2);
  IPC::ArgumentCoder<std::optional<WTF::URL>,void>::encode<IPC::Encoder,std::optional<WTF::URL> const&>(a1, (uint64_t)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 64));
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)(a2 + 80));
  IPC::ArgumentCoder<std::optional<unsigned long>,void>::encode<IPC::Encoder,std::optional<unsigned long> const&>(a1, (uint64_t)(a2 + 96));
  IPC::ArgumentCoder<std::optional<CGSize>,void>::encode<IPC::Encoder,std::optional<CGSize> const&>(a1, (uint64_t)(a2 + 112));
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)(a2 + 136));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 152);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 154);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 156);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 158);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 160);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 162);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 164);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 166);

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 168);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  v72[2] = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v69);
  IPC::Decoder::decode<std::optional<WTF::URL>>(v66, (IPC::Decoder *)a1, v3);
  IPC::Decoder::decode<std::optional<WTF::String>>((IPC::Decoder *)a1, (uint64_t)&v63);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v60);
  IPC::Decoder::decode<std::optional<unsigned long>>(a1, &v57);
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *a1;
        uint64_t v10 = a1[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned int v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    uint64_t v10 = v5;
    uint64_t v11 = 0;
LABEL_9:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v6 = *a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14 && v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v6);
    }
    goto LABEL_11;
  }
  if (v9)
  {
    IPC::Decoder::decode<CGSize>((uint64_t)&v31, a1, v4);
    if ((_BYTE)v32)
    {
      uint64_t v30 = v31;
      v72[0] = *(void *)((char *)&v31 + 1);
      *(void *)((char *)v72 + 7) = *((void *)&v31 + 1);
      char v28 = 1;
      goto LABEL_13;
    }
LABEL_11:
    int v15 = (WTF::StringImpl *)*a1;
    uint64_t v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      goto LABEL_56;
    }
    goto LABEL_12;
  }
  uint64_t v30 = 0;
  char v28 = 0;
  while (1)
  {
LABEL_13:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v54);
    int v18 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v19 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v20 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v21 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v22 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v23 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v24 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v25 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    if (!*a1)
    {
      *a2 = 0;
      a2[176] = 0;
      goto LABEL_42;
    }
    if (v71)
    {
      *(void *)&long long v31 = v69;
      BYTE8(v31) = v70;
      if (v68)
      {
        int v26 = (int)result;
        uint64_t result = (WTF::StringImpl *)std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](&v32, (uint64_t)v66);
        if (v65)
        {
          LOBYTE(v34) = 0;
          char v35 = 0;
          if (v64)
          {
            char v27 = v63;
            uint64_t v63 = 0;
            long long v34 = v27;
            char v35 = 1;
          }
          if (v62)
          {
            uint64_t v36 = v60;
            char v37 = v61;
            if (v59)
            {
              uint64_t v38 = v57;
              char v39 = v58;
              if (!HIDWORD(v30))
              {
                char v40 = v30;
                *(void *)unint64_t v41 = v72[0];
                *(void *)&v41[7] = *(void *)((char *)v72 + 7);
                char v42 = v28;
                if (v56)
                {
                  uint64_t v43 = v54;
                  char v44 = v55;
                  if ((v18 & 0xFF0000) != 0)
                  {
                    __int16 v45 = v18;
                    if ((v19 & 0xFF0000) != 0)
                    {
                      __int16 v46 = v19;
                      if ((v20 & 0xFF0000) != 0)
                      {
                        __int16 v47 = v20;
                        if ((v21 & 0xFF0000) != 0)
                        {
                          __int16 v48 = v21;
                          if ((v22 & 0xFF0000) != 0)
                          {
                            __int16 v49 = v22;
                            if ((v23 & 0xFF0000) != 0)
                            {
                              __int16 v50 = v23;
                              if ((v24 & 0xFF0000) != 0)
                              {
                                __int16 v51 = v24;
                                if ((v25 & 0xFF0000) != 0)
                                {
                                  __int16 v52 = v25;
                                  if ((v26 & 0xFF0000) != 0) {
                                    break;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_56:
    if (v16) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v15);
    }
LABEL_12:
    uint64_t v30 = 0x100000000;
  }
  __int16 v53 = v26;
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)a2, (uint64_t)&v31);
  if (v35)
  {
    uint64_t result = v34;
    long long v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v33)
  {
    uint64_t result = v32;
    char v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_42:
  if (v65)
  {
    if (v64)
    {
      uint64_t result = v63;
      uint64_t v63 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (v68)
  {
    if (v67)
    {
      uint64_t result = (WTF::StringImpl *)v66[0];
      v66[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198824E90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22)
{
  if (*(unsigned char *)(v22 - 200))
  {
    if (*(unsigned char *)(v22 - 208))
    {
      int v24 = *(WTF::StringImpl **)(v22 - 216);
      *(void *)(v22 - 216) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, a2);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
  }
  if (*(unsigned char *)(v22 - 144))
  {
    if (*(unsigned char *)(v22 - 152))
    {
      int v25 = *(WTF::StringImpl **)(v22 - 192);
      *(void *)(v22 - 192) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, a2);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<std::optional<unsigned long>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<unsigned long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 24));
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)(a2 + 40));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, (uint64_t)(a2 + 56));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 58);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 60);
  IPC::ArgumentCoder<std::optional<unsigned long>,void>::encode<IPC::Encoder,std::optional<unsigned long> const&>(a1, (uint64_t)(a2 + 64));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 82);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 84);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 86);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 88);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 90);

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 92);
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v58, a1);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v55);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, &v52);
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_47;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v30 = v4;
    uint64_t v31 = 0;
    goto LABEL_48;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_49;
  }
  if (v8)
  {
    unsigned __int16 v9 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a1);
    unsigned int v10 = (v9 > 0xFFu) << 16;
    if ((v9 & 0xFF00) != 0) {
      int v11 = v9;
    }
    else {
      int v11 = 0;
    }
    int v38 = 256;
    int v39 = v11;
  }
  else
  {
    int v38 = 0;
    int v39 = 0;
    unsigned int v10 = 0x10000;
  }
  while (1)
  {
    unsigned int v40 = v10;
    if (!HIWORD(v10))
    {
      uint64_t v35 = *(void *)a1;
      uint64_t v36 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (v37)
      {
        if (v36) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
        }
      }
    }
    int v12 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    int v13 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    IPC::Decoder::decode<std::optional<unsigned long>>(a1, &v49);
    int v14 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    int v15 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    int v16 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    int v17 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    int v18 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    int v19 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 96) = 0;
      goto LABEL_36;
    }
    if (v61)
    {
      LOBYTE(v41) = 0;
      char v43 = 0;
      int v24 = v60;
      if (v60)
      {
        uint64_t v41 = v58;
        unsigned int v22 = v59;
        unsigned int v23 = HIDWORD(v59);
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v42 = __PAIR64__(v23, v22);
        char v43 = 1;
      }
      if (v57)
      {
        LOBYTE(v44) = 0;
        char v45 = 0;
        int v25 = v56;
        if (v56)
        {
          uint64_t v26 = v55;
          uint64_t v55 = 0;
          uint64_t v44 = v26;
          char v45 = 1;
        }
        if (v54)
        {
          *(void *)&long long v46 = v52;
          BYTE8(v46) = v53;
          if ((v39 | v40 | v38) >> 16)
          {
            LOWORD(v47) = v39 | v40 | v38;
            if ((v12 & 0xFF0000) != 0)
            {
              WORD1(v47) = v12;
              if ((v13 & 0xFF0000) != 0)
              {
                WORD2(v47) = v13;
                if (v51)
                {
                  *((void *)&v47 + 1) = v49;
                  v48[0] = v50;
                  if ((v14 & 0xFF0000) != 0)
                  {
                    *(_WORD *)&v48[8] = v14;
                    if ((v15 & 0xFF0000) != 0)
                    {
                      *(_WORD *)&v48[10] = v15;
                      if ((v16 & 0xFF0000) != 0)
                      {
                        *(_WORD *)&v48[12] = v16;
                        if ((v17 & 0xFF0000) != 0)
                        {
                          *(_WORD *)&v48[14] = v17;
                          if ((v18 & 0xFF0000) != 0)
                          {
                            *(_WORD *)&v48[16] = v18;
                            if ((v19 & 0xFF0000) != 0)
                            {
                              *(_WORD *)&v48[18] = v19;
                              if ((result & 0xFF0000) != 0) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_47:
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v32 = *((void *)a1 + 3);
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *(void *)a1;
        unint64_t v30 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
LABEL_48:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31, v30);
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_49:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v34 = *((void *)a1 + 3);
    if (v34 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v5);
    }
    unsigned int v10 = 0;
    int v38 = 0;
    int v39 = 0;
  }
  *(_WORD *)&v48[20] = result;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v24)
  {
    uint64_t v27 = v41;
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    *(void *)a2 = v27;
    *(_DWORD *)(a2 + 8) = v22;
    *(_DWORD *)(a2 + 12) = v23;
    *(unsigned char *)(a2 + 16) = 1;
  }
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v25)
  {
    uint64_t v28 = v44;
    uint64_t v44 = 0;
    *(void *)(a2 + 24) = v28;
    *(unsigned char *)(a2 + 32) = 1;
  }
  long long v29 = v47;
  *(_OWORD *)(a2 + 40) = v46;
  *(_OWORD *)(a2 + 56) = v29;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v48;
  *(void *)(a2 + 86) = *(void *)&v48[14];
  *(unsigned char *)(a2 + 96) = 1;
  if (v24) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v21);
  }
LABEL_36:
  if (v57)
  {
    if (v56)
    {
      uint64_t result = v55;
      uint64_t v55 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (v61)
  {
    if (v60) {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v21);
    }
  }
  return result;
}

void sub_198825588(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 128))
  {
    if (*(unsigned char *)(v2 - 136))
    {
      unint64_t v4 = *(WTF::StringImpl **)(v2 - 144);
      *(void *)(v2 - 144) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  if (*(unsigned char *)(v2 - 96)) {
    BOOL v5 = *(unsigned char *)(v2 - 104) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 120, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 18);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<std::optional<CGRect>,void>::encode<IPC::Encoder,std::optional<CGRect> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 88));

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 90));
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v96);
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
        uint64_t v32 = *a1;
        unint64_t v31 = a1[1];
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_35;
  }
  unsigned __int16 v9 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    unint64_t v31 = v6;
    uint64_t v32 = 0;
LABEL_35:
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v34 = a1[3];
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
        uint64_t v7 = *a1;
        unint64_t v6 = a1[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
    goto LABEL_36;
  }
  unsigned int v10 = *v9;
  if (v10 < 2)
  {
    if (!*v9)
    {
      unsigned int v12 = 0;
      unsigned int v13 = 0x10000;
      goto LABEL_13;
    }
    if (v6 <= (unint64_t)&v9[-v7 + 1])
    {
      unint64_t v70 = 0;
      uint64_t v71 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v72 = a1[3];
      if (v72)
      {
        (*(void (**)(uint64_t))(*(void *)v72 + 16))(v72);
        unint64_t v70 = 0;
        uint64_t v82 = *a1;
        uint64_t v83 = a1[1];
        uint64_t v84 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v71 = 0;
        if (v84)
        {
          if (v83)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 16))(v84, v82);
            uint64_t v71 = *a1;
            unint64_t v70 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v9 + 2);
      unsigned int v11 = v9[1];
      if (v11 < 4)
      {
        unsigned int v12 = v11 | 0x100;
LABEL_8:
        unsigned int v13 = (v12 > 0xFF) << 16;
        if (v12 >= 0x100) {
          unsigned int v12 = v12;
        }
        else {
          unsigned int v12 = 0;
        }
        unsigned int v10 = 256;
        goto LABEL_13;
      }
      unint64_t v70 = v6;
      uint64_t v71 = v7;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v73 = a1[3];
    if (v73 && v70) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v73 + 16))(v73, v71, v70);
    }
    unsigned int v12 = 0;
    goto LABEL_8;
  }
LABEL_36:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v35 = a1[3];
  if (v35 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v7);
  }
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  unsigned int v10 = 0;
LABEL_13:
  unsigned int v14 = v12 | v13 | v10;
  unint64_t v15 = a1[1];
  if (!HIWORD(v13))
  {
    uint64_t v36 = *a1;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v37 = a1[3];
    if (!v37 || !v15)
    {
      unint64_t v15 = 0;
      uint64_t v16 = *a1;
LABEL_40:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v38 = a1[3];
      if (v38)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v16);
          uint64_t v39 = *a1;
          unint64_t v15 = a1[1];
        }
        else
        {
          uint64_t v39 = 0;
        }
      }
      else
      {
        uint64_t v39 = 0;
        unint64_t v15 = 0;
      }
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v36);
    unint64_t v15 = a1[1];
  }
  uint64_t v16 = *a1;
  unint64_t v17 = a1[2] - *a1;
  if (v15 <= v17) {
    goto LABEL_40;
  }
  int v18 = (unsigned __int8 *)(v16 + v17);
  a1[2] = (uint64_t)(v18 + 1);
  if (!v16)
  {
    uint64_t v39 = 0;
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v40 = a1[3];
    if (v40)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v39);
        uint64_t v16 = *a1;
        unint64_t v15 = a1[1];
      }
      else
      {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v15 = 0;
    }
    goto LABEL_44;
  }
  unsigned int v19 = *v18;
  if (v19 < 2)
  {
    if (!*v18)
    {
      unsigned int v21 = 0;
      unsigned int v22 = 0x10000;
      goto LABEL_26;
    }
    if (v15 <= (unint64_t)&v18[-v16 + 1])
    {
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v76 = a1[3];
      if (v76)
      {
        (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
        unint64_t v74 = 0;
        uint64_t v85 = *a1;
        uint64_t v86 = a1[1];
        uint64_t v87 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v75 = 0;
        if (v87)
        {
          if (v86)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v85);
            uint64_t v75 = *a1;
            unint64_t v74 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v18 + 2);
      unsigned int v20 = v18[1];
      if (v20 < 2)
      {
        unsigned int v21 = v20 | 0x100;
LABEL_21:
        unsigned int v22 = (v21 > 0xFF) << 16;
        if (v21 >= 0x100) {
          unsigned int v21 = v21;
        }
        else {
          unsigned int v21 = 0;
        }
        unsigned int v19 = 256;
        goto LABEL_26;
      }
      unint64_t v74 = v15;
      uint64_t v75 = v16;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v77 = a1[3];
    if (v77 && v74) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v77 + 16))(v77, v75, v74);
    }
    unsigned int v21 = 0;
    goto LABEL_21;
  }
LABEL_44:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v41 = a1[3];
  if (v41 && v15) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v16);
  }
  unsigned int v22 = 0;
  unsigned int v21 = 0;
  unsigned int v19 = 0;
LABEL_26:
  unsigned int v23 = v21 | v22 | v19;
  unint64_t v24 = a1[1];
  if (!HIWORD(v22))
  {
    uint64_t v42 = *a1;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v43 = a1[3];
    if (!v43 || !v24)
    {
      unint64_t v24 = 0;
      uint64_t v25 = *a1;
LABEL_48:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v44 = a1[3];
      if (v44)
      {
        if (v24)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v25);
          uint64_t v45 = *a1;
          unint64_t v24 = a1[1];
        }
        else
        {
          uint64_t v45 = 0;
        }
      }
      else
      {
        uint64_t v45 = 0;
        unint64_t v24 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v42);
    unint64_t v24 = a1[1];
  }
  uint64_t v25 = *a1;
  unint64_t v26 = a1[2] - *a1;
  if (v24 <= v26) {
    goto LABEL_48;
  }
  uint64_t v27 = (unsigned __int8 *)(v25 + v26);
  a1[2] = (uint64_t)(v27 + 1);
  if (!v25)
  {
    uint64_t v45 = 0;
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v46 = a1[3];
    if (v46)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v45);
        uint64_t v25 = *a1;
        unint64_t v24 = a1[1];
      }
      else
      {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v24 = 0;
    }
    goto LABEL_52;
  }
  unsigned int v28 = *v27;
  if (v28 < 2)
  {
    if (!v28)
    {
      LOBYTE(v92) = 0;
      unsigned __int8 v94 = 0;
      unsigned __int8 v95 = 1;
      goto LABEL_54;
    }
    IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v88);
    if (v88[16])
    {
      uint64_t v30 = *(void *)&v88[8];
      uint64_t v92 = *(void *)v88;
      *(_OWORD *)unint64_t v88 = 0uLL;
      uint64_t v93 = v30;
      unsigned __int8 v94 = 1;
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v29);
      unsigned __int8 v95 = 1;
      goto LABEL_54;
    }
    goto LABEL_53;
  }
LABEL_52:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v47 = a1[3];
  if (v47 && v24) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v25);
  }
LABEL_53:
  LOBYTE(v92) = 0;
  unsigned __int8 v95 = 0;
  __int16 v48 = (void *)*a1;
  uint64_t v49 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result) {
    goto LABEL_81;
  }
  while (1)
  {
LABEL_54:
    unint64_t v51 = a1[1];
    uint64_t v52 = *a1;
    unint64_t v53 = a1[2] - *a1;
    if (v51 <= v53)
    {
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v67 = a1[3];
      if (v67)
      {
        if (v51)
        {
          (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
          uint64_t v66 = *a1;
          uint64_t v65 = a1[1];
        }
        else
        {
          uint64_t v65 = 0;
          uint64_t v66 = 0;
        }
      }
LABEL_84:
      unint64_t v51 = 0;
      uint64_t v52 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v68 = a1[3];
      if (v68)
      {
        if (v65)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68 + 16))(v68, v66, v65);
          uint64_t v52 = *a1;
          unint64_t v51 = a1[1];
        }
        else
        {
          unint64_t v51 = 0;
          uint64_t v52 = 0;
        }
      }
LABEL_85:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v69 = a1[3];
      if (!v69 || !v51) {
        goto LABEL_96;
      }
LABEL_87:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v52);
      goto LABEL_96;
    }
    char v54 = (unsigned __int8 *)(v52 + v53);
    a1[2] = (uint64_t)(v54 + 1);
    if (!v52)
    {
      uint64_t v65 = v51;
      uint64_t v66 = 0;
      goto LABEL_84;
    }
    unsigned int v55 = *v54;
    if (v55 >= 2) {
      goto LABEL_85;
    }
    if (!v55)
    {
      int v56 = 0;
      char v2 = 0;
      char v57 = 0;
      goto LABEL_61;
    }
    IPC::ArgumentCoder<CGRect,void>::decode(a1, (uint64_t)v88, v5);
    if ((_BYTE)v89)
    {
      int v56 = 0;
      char v57 = v88[0];
      v99[0] = *(_OWORD *)&v88[1];
      *(_OWORD *)((char *)v99 + 15) = *(_OWORD *)&v88[16];
      char v2 = 1;
      goto LABEL_61;
    }
    uint64_t v52 = *a1;
    uint64_t v78 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v69 = a1[3];
    if (v69 && v78) {
      goto LABEL_87;
    }
LABEL_96:
    uint64_t v79 = *a1;
    uint64_t v80 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v81 = a1[3];
    if (v81 && v80) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 16))(v81, v79);
    }
    char v57 = 0;
    int v56 = 1;
LABEL_61:
    int v58 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 96) = 0;
      goto LABEL_76;
    }
    if (!v98) {
      goto LABEL_80;
    }
    *(void *)unint64_t v88 = v96;
    v88[8] = v97;
    if (!HIWORD(v14)) {
      goto LABEL_80;
    }
    *(_WORD *)&v88[16] = v14;
    if (!HIWORD(v23)) {
      goto LABEL_80;
    }
    *(_WORD *)&v88[18] = v23;
    unsigned int v60 = v95;
    if (!v95) {
      goto LABEL_80;
    }
    v88[24] = 0;
    char v90 = 0;
    int v61 = v94;
    if (!v94) {
      break;
    }
    *(void *)&v88[24] = v92;
    unsigned int v60 = v93;
    unsigned int v59 = HIDWORD(v93);
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    unint64_t v89 = __PAIR64__(v59, v60);
    char v90 = 1;
    if (!v56) {
      goto LABEL_70;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    if (v49) {
      (*(void (**)(uint64_t, void *))(*(void *)result + 16))(result, v48);
    }
  }
  if (v56) {
    goto LABEL_80;
  }
LABEL_70:
  v91[0] = v57;
  *(_OWORD *)&v91[1] = v99[0];
  __n128 v5 = *(__n128 *)((char *)v99 + 15);
  *(_OWORD *)&v91[16] = *(_OWORD *)((char *)v99 + 15);
  v91[32] = v2;
  if ((v58 & 0xFF0000) == 0) {
    goto LABEL_80;
  }
  *(_WORD *)&v91[40] = v58;
  if ((result & 0xFF0000) == 0) {
    goto LABEL_80;
  }
  *(_WORD *)&v91[42] = result;
  *(_OWORD *)a2 = *(_OWORD *)v88;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)&v88[16];
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v61)
  {
    uint64_t v62 = *(void *)&v88[24];
    *(void *)&v88[24] = 0;
    unint64_t v89 = 0;
    *(void *)(a2 + 24) = v62;
    *(_DWORD *)(a2 + 32) = v60;
    *(_DWORD *)(a2 + 36) = v59;
    *(unsigned char *)(a2 + 40) = 1;
    long long v63 = *(_OWORD *)&v91[16];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v91;
    *(_OWORD *)(a2 + 64) = v63;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v91[28];
    uint64_t result = WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88[24], v48);
  }
  else
  {
    long long v64 = *(_OWORD *)&v91[16];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v91;
    *(_OWORD *)(a2 + 64) = v64;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v91[28];
  }
  *(unsigned char *)(a2 + 96) = 1;
LABEL_76:
  if (v95 && v94) {
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v92, v48);
  }
  return result;
}

void sub_198826144(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if ((_BYTE)a26)
  {
    if (a24) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2);
  IPC::ArgumentCoder<IPC::SharedFileHandle,void>::encode((uint64_t)a1, (IPC::SharedFileHandle *)(a2 + 1));

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 4);
}

uint64_t IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = a1;
  unint64_t v4 = (unsigned char *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  IPC::Decoder::takeLastAttachment((IPC::Decoder *)v2, v25);
  if (!*v2) {
    goto LABEL_22;
  }
  if (!v26) {
    goto LABEL_21;
  }
  IPC::SharedFileHandle::SharedFileHandle((uint64_t)&v20);
  WebCore::FileHandle::FileHandle();
  char v24 = 1;
  MEMORY[0x19972F510](&v20);
  while (1)
  {
    if (v26) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v25);
    }
    if (!v24)
    {
      uint64_t v14 = *v2;
      uint64_t v15 = v2[1];
      *char v2 = 0;
      v2[1] = 0;
      uint64_t v16 = v2[3];
      if (v16)
      {
        if (v15) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
        }
      }
    }
    unint64_t v7 = v2[1];
    uint64_t v8 = *v2;
    unint64_t v9 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v7 < v9 || v7 - v9 <= 7) {
      break;
    }
    unsigned int v11 = (uint64_t **)(v8 + v9);
    v2[2] = (uint64_t)(v11 + 1);
    if (!v8)
    {
      unint64_t v17 = v7;
      uint64_t v18 = 0;
      goto LABEL_27;
    }
    int v12 = 0;
    char v2 = *v11;
LABEL_14:
    if (v6)
    {
      unsigned int v20 = v4;
      if (v24)
      {
        unint64_t v4 = v21;
        WebCore::FileHandle::FileHandle();
        if (!v12)
        {
          unsigned int v22 = v2;
          *(void *)a2 = v20;
          WebCore::FileHandle::FileHandle();
          *(void *)(a2 + 32) = v22;
          *(unsigned char *)(a2 + 40) = 1;
          uint64_t result = MEMORY[0x19972F510](v21);
          goto LABEL_18;
        }
      }
    }
LABEL_21:
    __break(1u);
LABEL_22:
    v23[0] = 0;
    char v24 = 0;
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  *char v2 = 0;
  v2[1] = 0;
  uint64_t v19 = v2[3];
  if (v19)
  {
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v8, v7);
      uint64_t v18 = *v2;
      unint64_t v17 = v2[1];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
    }
  }
LABEL_27:
  *char v2 = 0;
  v2[1] = 0;
  uint64_t result = v2[3];
  if (result)
  {
    if (v17)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v18);
      if (*v2)
      {
        char v2 = 0;
        int v12 = 1;
        goto LABEL_14;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_18:
  if (v24) {
    return MEMORY[0x19972F510](v23);
  }
  return result;
}

void sub_198826410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    MEMORY[0x19972F510](&a14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)a2);
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, a2 + 16);
  LODWORD(v14) = *(_DWORD *)(a2 + 96);
  IPC::Encoder::operator<<<int>(a1, (int *)&v14);
  LODWORD(v14) = *(_DWORD *)(a2 + 100);
  IPC::Encoder::operator<<<int>(a1, (int *)&v14);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 104));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 112));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 120));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 128));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 136));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 140));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 156));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 160));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 176));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 177));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 178));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 179));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 180));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 181));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 182));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 183));
  LOBYTE(v14) = *(unsigned char *)(a2 + 184);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  LOBYTE(v14) = *(unsigned char *)(a2 + 185);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  LOBYTE(v14) = *(unsigned char *)(a2 + 186);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  LOBYTE(v14) = *(unsigned char *)(a2 + 187);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 192));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 212));
  uint64_t v4 = *(unsigned int *)(a2 + 212);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 200);
    uint64_t v6 = v5 + 16 * v4;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v5);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(v5 + 8));
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(v5 + 9));
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(v5 + 10));
      IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(v5 + 12));
      v5 += 16;
    }
    while (v5 != v6);
  }
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 216));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 224));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 232));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 240));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 248));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 249));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 256));
  LOBYTE(v14) = *(unsigned char *)(a2 + 296);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  char v7 = *(unsigned char *)(a2 + 297);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9) {
    goto LABEL_7;
  }
  *uint64_t v8 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 304));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 312));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 320));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 328));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 329));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 336));
  IPC::VectorArgumentCoder<false,WebCore::Color,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 344);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 360));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 361));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 362));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 363));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 364));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 365));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 366));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 367));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 368));
  uint64_t v10 = *(void *)(a2 + 376);
  unsigned int v11 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v12 <= 7)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x1988267FCLL);
  }
  *unsigned int v11 = v10;
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 384));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 400));
  uint64_t v14 = *(void *)(a2 + 408);
  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v14);
}

void IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::decode(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v500 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v436);
  IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)v497);
  int v402 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  uint64_t v403 = v3;
  if (!v3)
  {
    unint64_t v180 = *a1;
    unint64_t v181 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v182 = a1[3];
    if (v182)
    {
      if (v181) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v182 + 16))(v182, v180);
      }
    }
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      int v401 = 0;
      uint64_t v400 = *v8;
      unint64_t v9 = v5;
      goto LABEL_9;
    }
    unint64_t v9 = v4;
    unint64_t v183 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v183 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v184 = a1[3];
    if (v184)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v184 + 16))(v184);
        unint64_t v183 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v183 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v185 = a1[3];
  if (v185)
  {
    if (v9)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v185 + 16))(v185, v183, v9);
      uint64_t v400 = 0;
      unint64_t v9 = *a1;
      unint64_t v4 = a1[1];
      int v401 = 1;
      unint64_t v5 = *a1;
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v400 = 0;
  int v401 = 1;
LABEL_9:
  unint64_t v10 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v10 || v4 - v10 <= 7)
  {
    unint64_t v9 = 0;
    unint64_t v191 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v192 = a1[3];
    if (v192)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v192 + 16))(v192);
        unint64_t v191 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v191 = 0;
      }
    }
  }
  else
  {
    unsigned int v11 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v11 + 1);
    if (v5)
    {
      int v399 = 0;
      uint64_t v398 = *v11;
      goto LABEL_13;
    }
    unint64_t v9 = v4;
    unint64_t v191 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v193 = a1[3];
  if (v193)
  {
    if (v9)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v193 + 16))(v193, v191, v9);
      uint64_t v398 = 0;
      unint64_t v9 = *a1;
      unint64_t v4 = a1[1];
      int v399 = 1;
      unint64_t v5 = *a1;
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v398 = 0;
  int v399 = 1;
LABEL_13:
  unint64_t v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v12 || v4 - v12 <= 7)
  {
    unint64_t v9 = 0;
    unint64_t v194 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v195 = a1[3];
    if (v195)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v195 + 16))(v195);
        unint64_t v194 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v194 = 0;
      }
    }
  }
  else
  {
    unsigned int v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v13 + 1);
    if (v5)
    {
      int v397 = 0;
      uint64_t v396 = *v13;
      goto LABEL_17;
    }
    unint64_t v9 = v4;
    unint64_t v194 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v196 = a1[3];
  if (v196)
  {
    if (v9)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v196 + 16))(v196, v194, v9);
      uint64_t v396 = 0;
      unint64_t v9 = *a1;
      unint64_t v4 = a1[1];
      int v397 = 1;
      unint64_t v5 = *a1;
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v396 = 0;
  int v397 = 1;
LABEL_17:
  unint64_t v14 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v14 || v4 - v14 <= 7)
  {
    unint64_t v9 = 0;
    unint64_t v197 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v198 = a1[3];
    if (v198)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v198 + 16))(v198);
        unint64_t v197 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v197 = 0;
      }
    }
  }
  else
  {
    uint64_t v15 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = v15 + 1;
    a1[2] = (unint64_t)(v15 + 1);
    if (v5)
    {
      int v395 = 0;
      uint64_t v394 = *v15;
      goto LABEL_21;
    }
    unint64_t v9 = v4;
    unint64_t v197 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v199 = a1[3];
  if (!v199)
  {
    uint64_t v394 = 0;
    unint64_t v9 = 0;
LABEL_246:
    unint64_t v5 = 0;
    int v395 = 1;
    goto LABEL_247;
  }
  if (!v9)
  {
    uint64_t v394 = 0;
    goto LABEL_246;
  }
  (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v199 + 16))(v199, v197, v9);
  uint64_t v394 = 0;
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v16 = (void *)a1[2];
  int v395 = 1;
  unint64_t v9 = *a1;
LABEL_21:
  unint64_t v17 = (char *)v16 - v5;
  if (v4 <= (unint64_t)v17)
  {
    unint64_t v9 = 0;
    unint64_t v326 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v326 && v4)
    {
      (*(void (**)(unint64_t))(*(void *)v326 + 16))(v326);
      unint64_t v5 = *a1;
      unint64_t v9 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
    }
LABEL_247:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v200 = a1[3];
    if (v200)
    {
      if (v9)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v200 + 16))(v200, v5, v9);
        unsigned int v19 = 0;
        unint64_t v9 = *a1;
        unint64_t v4 = a1[1];
        goto LABEL_250;
      }
      unint64_t v4 = 0;
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v9 = 0;
    }
    unsigned int v19 = 0;
    goto LABEL_250;
  }
  uint64_t v18 = &v17[v5];
  a1[2] = (unint64_t)(v18 + 1);
  if (!v5)
  {
    unint64_t v9 = v4;
    goto LABEL_247;
  }
  unsigned int v19 = *v18;
  if (v19 < 2)
  {
    int v393 = 0;
    char v20 = 1;
    goto LABEL_25;
  }
LABEL_250:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v201 = a1[3];
  if (v201 && v4) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v201 + 16))(v201, v9);
  }
  char v20 = 0;
  int v393 = 1;
LABEL_25:
  if (!v19) {
    char v20 = 0;
  }
  char v392 = v20;
  IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v434);
  unint64_t v21 = a1[1];
  unint64_t v22 = *a1;
  unint64_t v23 = a1[2] - *a1;
  if (v21 <= v23)
  {
    unint64_t v186 = 0;
    unint64_t v187 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v188 = a1[3];
    if (v188)
    {
      if (v21)
      {
        (*(void (**)(unint64_t))(*(void *)v188 + 16))(v188);
        unint64_t v187 = *a1;
        unint64_t v186 = a1[1];
      }
      else
      {
        unint64_t v186 = 0;
        unint64_t v187 = 0;
      }
    }
    goto LABEL_231;
  }
  char v24 = (unsigned __int8 *)(v22 + v23);
  a1[2] = (unint64_t)(v24 + 1);
  if (!v22)
  {
    unint64_t v186 = v21;
    unint64_t v187 = 0;
LABEL_231:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v189 = a1[3];
    if (v189 && v186)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v189 + 16))(v189, v187, v186);
      unsigned int v25 = 0;
      unint64_t v22 = *a1;
      unint64_t v21 = a1[1];
    }
    else
    {
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v25 = 0;
    }
    goto LABEL_233;
  }
  unsigned int v25 = *v24;
  if (v25 < 2)
  {
    int v391 = 0;
    char v26 = 1;
    goto LABEL_31;
  }
LABEL_233:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v190 = a1[3];
  if (v190 && v21) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v190 + 16))(v190, v22);
  }
  char v26 = 0;
  int v391 = 1;
LABEL_31:
  if (!v25) {
    char v26 = 0;
  }
  char v390 = v26;
  IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v432);
  unint64_t v27 = a1[1];
  unint64_t v28 = *a1;
  unint64_t v29 = a1[2] - *a1;
  if (v27 <= v29)
  {
    unint64_t v202 = 0;
    unint64_t v203 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v204 = a1[3];
    if (v204)
    {
      if (v27)
      {
        (*(void (**)(unint64_t))(*(void *)v204 + 16))(v204);
        unint64_t v203 = *a1;
        unint64_t v202 = a1[1];
      }
      else
      {
        unint64_t v202 = 0;
        unint64_t v203 = 0;
      }
    }
    goto LABEL_253;
  }
  uint64_t v30 = (unsigned __int8 *)(v28 + v29);
  uint64_t v31 = v28 + v29 + 1;
  a1[2] = v31;
  if (!v28)
  {
    unint64_t v202 = v27;
    unint64_t v203 = 0;
LABEL_253:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v205 = a1[3];
    if (v205 && v202)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v205 + 16))(v205, v203, v202);
      unsigned int v32 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v32 = 0;
    }
    goto LABEL_255;
  }
  unsigned int v32 = *v30;
  if (v32 < 2)
  {
    int v389 = 0;
    char v33 = 1;
    goto LABEL_37;
  }
LABEL_255:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v206 = a1[3];
  if (!v206 || !v27)
  {
    char v387 = 0;
    unint64_t v207 = 0;
    unint64_t v28 = 0;
    int v389 = 1;
LABEL_257:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v208 = a1[3];
    if (v208 && v207)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v208 + 16))(v208, v28, v207);
      unsigned int v37 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v37 = 0;
    }
    goto LABEL_259;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v206 + 16))(v206, v28);
  char v33 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v389 = 1;
  uint64_t v31 = a1[2];
LABEL_37:
  if (!v32) {
    char v33 = 0;
  }
  char v387 = v33;
  unint64_t v34 = v31 - v28;
  if (v27 <= v34)
  {
    unint64_t v207 = 0;
    unint64_t v333 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v333 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v333 + 16))(v333);
      unint64_t v28 = *a1;
      unint64_t v207 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_257;
  }
  uint64_t v35 = (unsigned __int8 *)(v28 + v34);
  uint64_t v36 = v28 + v34 + 1;
  a1[2] = v36;
  if (!v28)
  {
    unint64_t v207 = v27;
    goto LABEL_257;
  }
  unsigned int v37 = *v35;
  if (v37 < 2)
  {
    int v388 = 0;
    char v38 = 1;
    goto LABEL_43;
  }
LABEL_259:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v209 = a1[3];
  if (!v209 || !v27)
  {
    char v386 = 0;
    unint64_t v210 = 0;
    unint64_t v28 = 0;
    int v388 = 1;
LABEL_261:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v211 = a1[3];
    if (v211 && v210)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v211 + 16))(v211, v28, v210);
      unsigned int v42 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v42 = 0;
    }
    goto LABEL_263;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v209 + 16))(v209, v28);
  char v38 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v388 = 1;
  uint64_t v36 = a1[2];
LABEL_43:
  if (!v37) {
    char v38 = 0;
  }
  char v386 = v38;
  unint64_t v39 = v36 - v28;
  if (v27 <= v39)
  {
    unint64_t v210 = 0;
    unint64_t v332 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v332 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v332 + 16))(v332);
      unint64_t v28 = *a1;
      unint64_t v210 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_261;
  }
  uint64_t v40 = (unsigned __int8 *)(v28 + v39);
  uint64_t v41 = v28 + v39 + 1;
  a1[2] = v41;
  if (!v28)
  {
    unint64_t v210 = v27;
    goto LABEL_261;
  }
  unsigned int v42 = *v40;
  if (v42 < 2)
  {
    int v385 = 0;
    char v43 = 1;
    goto LABEL_49;
  }
LABEL_263:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v212 = a1[3];
  if (!v212 || !v27)
  {
    unint64_t v213 = 0;
    unint64_t v28 = 0;
    char v384 = 0;
    int v385 = 1;
LABEL_265:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v214 = a1[3];
    if (v214 && v213)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v214 + 16))(v214, v28, v213);
      unsigned int v47 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v47 = 0;
    }
    goto LABEL_267;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v212 + 16))(v212, v28);
  char v43 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v385 = 1;
  uint64_t v41 = a1[2];
LABEL_49:
  if (!v42) {
    char v43 = 0;
  }
  char v384 = v43;
  unint64_t v44 = v41 - v28;
  if (v27 <= v44)
  {
    unint64_t v213 = 0;
    unint64_t v331 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v331 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v331 + 16))(v331);
      unint64_t v28 = *a1;
      unint64_t v213 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_265;
  }
  uint64_t v45 = (unsigned __int8 *)(v28 + v44);
  uint64_t v46 = v28 + v44 + 1;
  a1[2] = v46;
  if (!v28)
  {
    unint64_t v213 = v27;
    goto LABEL_265;
  }
  unsigned int v47 = *v45;
  if (v47 < 2)
  {
    int v383 = 0;
    char v48 = 1;
    goto LABEL_55;
  }
LABEL_267:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v215 = a1[3];
  if (!v215 || !v27)
  {
    char v381 = 0;
    unint64_t v216 = 0;
    unint64_t v28 = 0;
    int v383 = 1;
LABEL_269:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v217 = a1[3];
    if (v217 && v216)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v217 + 16))(v217, v28, v216);
      unsigned int v52 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v52 = 0;
    }
    goto LABEL_271;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v215 + 16))(v215, v28);
  char v48 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v383 = 1;
  uint64_t v46 = a1[2];
LABEL_55:
  if (!v47) {
    char v48 = 0;
  }
  char v381 = v48;
  unint64_t v49 = v46 - v28;
  if (v27 <= v49)
  {
    unint64_t v216 = 0;
    unint64_t v330 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v330 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v330 + 16))(v330);
      unint64_t v28 = *a1;
      unint64_t v216 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_269;
  }
  char v50 = (unsigned __int8 *)(v28 + v49);
  uint64_t v51 = v28 + v49 + 1;
  a1[2] = v51;
  if (!v28)
  {
    unint64_t v216 = v27;
    goto LABEL_269;
  }
  unsigned int v52 = *v50;
  if (v52 < 2)
  {
    int v382 = 0;
    char v53 = 1;
    goto LABEL_61;
  }
LABEL_271:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v218 = a1[3];
  if (!v218 || !v27)
  {
    char v380 = 0;
    unint64_t v219 = 0;
    unint64_t v28 = 0;
    int v382 = 1;
LABEL_273:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v220 = a1[3];
    if (v220 && v219)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v220 + 16))(v220, v28, v219);
      unsigned int v57 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v57 = 0;
    }
    goto LABEL_275;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v218 + 16))(v218, v28);
  char v53 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v382 = 1;
  uint64_t v51 = a1[2];
LABEL_61:
  if (!v52) {
    char v53 = 0;
  }
  char v380 = v53;
  unint64_t v54 = v51 - v28;
  if (v27 <= v54)
  {
    unint64_t v219 = 0;
    unint64_t v329 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v329 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v329 + 16))(v329);
      unint64_t v28 = *a1;
      unint64_t v219 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_273;
  }
  unsigned int v55 = (unsigned __int8 *)(v28 + v54);
  uint64_t v56 = v28 + v54 + 1;
  a1[2] = v56;
  if (!v28)
  {
    unint64_t v219 = v27;
    goto LABEL_273;
  }
  unsigned int v57 = *v55;
  if (v57 < 2)
  {
    int v379 = 0;
    char v58 = 1;
    goto LABEL_67;
  }
LABEL_275:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v221 = a1[3];
  if (!v221 || !v27)
  {
    unint64_t v222 = 0;
    unint64_t v28 = 0;
    char v378 = 0;
    int v379 = 1;
LABEL_277:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v223 = a1[3];
    if (v223 && v222)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v223 + 16))(v223, v28, v222);
      unsigned int v62 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v62 = 0;
    }
    goto LABEL_279;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v221 + 16))(v221, v28);
  char v58 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v379 = 1;
  uint64_t v56 = a1[2];
LABEL_67:
  if (!v57) {
    char v58 = 0;
  }
  char v378 = v58;
  unint64_t v59 = v56 - v28;
  if (v27 <= v59)
  {
    unint64_t v222 = 0;
    unint64_t v328 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v328 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v328 + 16))(v328);
      unint64_t v28 = *a1;
      unint64_t v222 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_277;
  }
  unsigned int v60 = (unsigned __int8 *)(v28 + v59);
  uint64_t v61 = v28 + v59 + 1;
  a1[2] = v61;
  if (!v28)
  {
    unint64_t v222 = v27;
    goto LABEL_277;
  }
  unsigned int v62 = *v60;
  if (v62 < 2)
  {
    int v377 = 0;
    char v63 = 1;
    goto LABEL_73;
  }
LABEL_279:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v224 = a1[3];
  if (!v224 || !v27)
  {
    unint64_t v225 = 0;
    unint64_t v28 = 0;
    char v376 = 0;
    int v377 = 1;
LABEL_281:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v226 = a1[3];
    if (v226 && v225)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v226 + 16))(v226, v28, v225);
      unsigned int v66 = 0;
      unint64_t v28 = *a1;
      unint64_t v27 = a1[1];
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v66 = 0;
    }
    goto LABEL_283;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v224 + 16))(v224, v28);
  char v63 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v377 = 1;
  uint64_t v61 = a1[2];
LABEL_73:
  if (!v62) {
    char v63 = 0;
  }
  char v376 = v63;
  unint64_t v64 = v61 - v28;
  if (v27 <= v64)
  {
    unint64_t v225 = 0;
    unint64_t v327 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v327 && v27)
    {
      (*(void (**)(unint64_t))(*(void *)v327 + 16))(v327);
      unint64_t v28 = *a1;
      unint64_t v225 = a1[1];
    }
    else
    {
      unint64_t v28 = 0;
    }
    goto LABEL_281;
  }
  uint64_t v65 = (unsigned __int8 *)(v28 + v64);
  a1[2] = (unint64_t)(v65 + 1);
  if (!v28)
  {
    unint64_t v225 = v27;
    goto LABEL_281;
  }
  unsigned int v66 = *v65;
  if (v66 < 2)
  {
    int v375 = 0;
    char v67 = 1;
    goto LABEL_79;
  }
LABEL_283:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v227 = a1[3];
  if (!v227)
  {
    unint64_t v28 = 0;
    char v374 = 0;
    unint64_t v27 = 0;
LABEL_285:
    int v375 = 1;
LABEL_286:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v228 = a1[3];
    if (v228)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v228 + 16))(v228, v28);
        unint64_t v229 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v229 = 0;
      }
    }
    else
    {
      unint64_t v229 = 0;
      unint64_t v27 = 0;
    }
    goto LABEL_288;
  }
  if (!v27)
  {
    unint64_t v28 = 0;
    char v374 = 0;
    goto LABEL_285;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v227 + 16))(v227, v28);
  char v67 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
  int v375 = 1;
LABEL_79:
  if (!v66) {
    char v67 = 0;
  }
  char v374 = v67;
  if (v27 <= a1[2] - v28) {
    goto LABEL_286;
  }
  uint64_t v68 = (unsigned __int8 *)a1[2];
  a1[2] = (unint64_t)(v68 + 1);
  if (!v28)
  {
    unint64_t v229 = 0;
LABEL_288:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v230 = a1[3];
    if (v230)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v230 + 16))(v230, v229);
        unint64_t v28 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v28 = 0;
      }
    }
    else
    {
      unint64_t v28 = 0;
      unint64_t v27 = 0;
    }
    goto LABEL_290;
  }
  unsigned int v69 = *v68;
  if (v69 < 5)
  {
    unsigned int v373 = v69 | 0x100;
    goto LABEL_85;
  }
LABEL_290:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v231 = a1[3];
  if (!v231)
  {
    unint64_t v28 = 0;
    unsigned int v373 = 0;
    unint64_t v27 = 0;
    goto LABEL_292;
  }
  if (!v27)
  {
    unint64_t v28 = 0;
    unsigned int v373 = 0;
LABEL_292:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v232 = a1[3];
    if (v232)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v232 + 16))(v232, v28);
        unint64_t v233 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v233 = 0;
      }
    }
    else
    {
      unint64_t v233 = 0;
      unint64_t v27 = 0;
    }
    goto LABEL_294;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v231 + 16))(v231, v28);
  unsigned int v373 = 0;
  unint64_t v28 = *a1;
  unint64_t v27 = a1[1];
LABEL_85:
  if (v27 <= a1[2] - v28) {
    goto LABEL_292;
  }
  unint64_t v70 = (unsigned __int8 *)a1[2];
  a1[2] = (unint64_t)(v70 + 1);
  if (!v28)
  {
    unint64_t v233 = 0;
LABEL_294:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v234 = a1[3];
    if (v234)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v234 + 16))(v234, v233);
        unint64_t v28 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v28 = 0;
      }
    }
    else
    {
      unint64_t v28 = 0;
      unint64_t v27 = 0;
    }
    goto LABEL_296;
  }
  unsigned int v71 = *v70;
  if (v71 < 0x13)
  {
    unsigned int v372 = v71 | 0x100;
    goto LABEL_89;
  }
LABEL_296:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v235 = a1[3];
  if (v235 && v27) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v235 + 16))(v235, v28);
  }
  unsigned int v372 = 0;
LABEL_89:
  unsigned __int16 v371 = IPC::Decoder::decode<WebCore::InputMode>((uint64_t *)a1);
  unint64_t v72 = a1[1];
  unint64_t v73 = *a1;
  unint64_t v74 = a1[2] - *a1;
  if (v72 <= v74)
  {
    unint64_t v236 = 0;
    unint64_t v237 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v238 = a1[3];
    if (v238)
    {
      if (v72)
      {
        (*(void (**)(unint64_t))(*(void *)v238 + 16))(v238);
        unint64_t v237 = *a1;
        unint64_t v236 = a1[1];
      }
      else
      {
        unint64_t v236 = 0;
        unint64_t v237 = 0;
      }
    }
    goto LABEL_299;
  }
  uint64_t v75 = (unsigned __int8 *)(v73 + v74);
  a1[2] = (unint64_t)(v75 + 1);
  if (!v73)
  {
    unint64_t v236 = v72;
    unint64_t v237 = 0;
LABEL_299:
    unint64_t v72 = 0;
    unint64_t v73 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v239 = a1[3];
    if (v239)
    {
      if (v236)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v239 + 16))(v239, v237, v236);
        unint64_t v73 = *a1;
        unint64_t v72 = a1[1];
      }
      else
      {
        unint64_t v72 = 0;
        unint64_t v73 = 0;
      }
    }
    goto LABEL_300;
  }
  unsigned int v76 = *v75;
  if (v76 < 8)
  {
    unsigned int v370 = v76 | 0x100;
    goto LABEL_93;
  }
LABEL_300:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v240 = a1[3];
  if (v240 && v72) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v240 + 16))(v240, v73);
  }
  unsigned int v370 = 0;
LABEL_93:
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v430);
  unint64_t v77 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v78)
  {
    LOBYTE(v427) = 0;
    char v429 = 0;
LABEL_123:
    unint64_t v88 = *a1;
    unint64_t v89 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v90 = a1[3];
    if (v90 && v89) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v90 + 16))(v90, v88);
    }
    goto LABEL_124;
  }
  unint64_t v79 = v77;
  long long v419 = 0;
  *(void *)&long long v420 = 0;
  if (v77 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::OptionItem>((uint64_t)v438, (IPC::Decoder *)a1);
      if (!(_BYTE)v439) {
        goto LABEL_122;
      }
      if (DWORD1(v420) == v420)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v419, (unint64_t)v438);
      }
      else
      {
        uint64_t v85 = (WTF::StringImpl **)((char *)v419 + 16 * DWORD1(v420));
        uint64_t v86 = v438[0];
        v438[0] = 0;
        *uint64_t v85 = v86;
        v85[1] = v438[1];
        ++DWORD1(v420);
      }
      if ((_BYTE)v439)
      {
        uint64_t v87 = v438[0];
        v438[0] = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2) {
            WTF::StringImpl::destroy(v87, v78);
          }
          else {
            *(_DWORD *)v87 -= 2;
          }
        }
      }
      if (!--v79)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v419, DWORD1(v420));
        long long v427 = v419;
        uint64_t v325 = v420;
        long long v419 = 0;
        *(void *)&long long v420 = 0;
        uint64_t v428 = v325;
        goto LABEL_111;
      }
    }
  }
  if (v77)
  {
    LODWORD(v420) = v77;
    long long v419 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v77));
    while (1)
    {
      IPC::Decoder::decode<WebKit::OptionItem>((uint64_t)v438, (IPC::Decoder *)a1);
      if (!(_BYTE)v439) {
        break;
      }
      if (DWORD1(v420) == v420)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v419, (unint64_t)v438);
      }
      else
      {
        uint64_t v80 = (WTF::StringImpl **)((char *)v419 + 16 * DWORD1(v420));
        uint64_t v81 = v438[0];
        v438[0] = 0;
        *uint64_t v80 = v81;
        v80[1] = v438[1];
        ++DWORD1(v420);
      }
      if ((_BYTE)v439)
      {
        uint64_t v82 = v438[0];
        v438[0] = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2) {
            WTF::StringImpl::destroy(v82, v78);
          }
          else {
            *(_DWORD *)v82 -= 2;
          }
        }
      }
      if (!--v79)
      {
        uint64_t v83 = v419;
        uint64_t v84 = v420;
        goto LABEL_110;
      }
    }
LABEL_122:
    LOBYTE(v427) = 0;
    char v429 = 0;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v419, v78);
    goto LABEL_123;
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
LABEL_110:
  long long v419 = 0;
  *(void *)&long long v420 = 0;
  long long v427 = v83;
  uint64_t v428 = v84;
LABEL_111:
  char v429 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v419, v78);
LABEL_124:
  uint64_t v369 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v425);
  unint64_t v91 = *a1;
  unint64_t v92 = a1[1];
  unint64_t v93 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v92 < v93 || v92 - v93 <= 7)
  {
    unint64_t v249 = 0;
    unint64_t v250 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v251 = a1[3];
    if (v251)
    {
      if (v92)
      {
        (*(void (**)(unint64_t))(*(void *)v251 + 16))(v251);
        unint64_t v250 = *a1;
        unint64_t v249 = a1[1];
      }
      else
      {
        unint64_t v249 = 0;
        unint64_t v250 = 0;
      }
    }
  }
  else
  {
    unsigned __int8 v94 = (uint64_t *)(v91 + v93);
    a1[2] = (unint64_t)(v94 + 1);
    if (v91)
    {
      int v368 = 0;
      uint64_t v367 = *v94;
      goto LABEL_128;
    }
    unint64_t v249 = v92;
    unint64_t v250 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v252 = a1[3];
  if (v252 && v249) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v252 + 16))(v252, v250);
  }
  uint64_t v367 = 0;
  int v368 = 1;
LABEL_128:
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v423);
  unint64_t v95 = a1[1];
  unint64_t v96 = *a1;
  unint64_t v97 = a1[2] - *a1;
  if (v95 <= v97)
  {
    unint64_t v241 = 0;
    unint64_t v242 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v243 = a1[3];
    if (v243)
    {
      if (v95)
      {
        (*(void (**)(unint64_t))(*(void *)v243 + 16))(v243);
        unint64_t v242 = *a1;
        unint64_t v241 = a1[1];
      }
      else
      {
        unint64_t v241 = 0;
        unint64_t v242 = 0;
      }
    }
    goto LABEL_303;
  }
  char v98 = (unsigned __int8 *)(v96 + v97);
  uint64_t v99 = v96 + v97 + 1;
  a1[2] = v99;
  if (!v96)
  {
    unint64_t v241 = v95;
    unint64_t v242 = 0;
LABEL_303:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v244 = a1[3];
    if (v244 && v241)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v244 + 16))(v244, v242, v241);
      unsigned int v100 = 0;
      unint64_t v96 = *a1;
      unint64_t v95 = a1[1];
    }
    else
    {
      unint64_t v95 = 0;
      unint64_t v96 = 0;
      unsigned int v100 = 0;
    }
    goto LABEL_305;
  }
  unsigned int v100 = *v98;
  if (v100 < 2)
  {
    int v366 = 0;
    char v101 = 1;
    goto LABEL_132;
  }
LABEL_305:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v245 = a1[3];
  if (!v245 || !v95)
  {
    unint64_t v246 = 0;
    unint64_t v96 = 0;
    char v365 = 0;
    int v366 = 1;
LABEL_307:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v247 = a1[3];
    if (v247 && v246)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v247 + 16))(v247, v96, v246);
      unsigned int v104 = 0;
      unint64_t v96 = *a1;
      unint64_t v95 = a1[1];
    }
    else
    {
      unint64_t v95 = 0;
      unint64_t v96 = 0;
      unsigned int v104 = 0;
    }
    goto LABEL_309;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v245 + 16))(v245, v96);
  char v101 = 0;
  unint64_t v96 = *a1;
  unint64_t v95 = a1[1];
  int v366 = 1;
  uint64_t v99 = a1[2];
LABEL_132:
  if (!v100) {
    char v101 = 0;
  }
  char v365 = v101;
  unint64_t v102 = v99 - v96;
  if (v95 <= v102)
  {
    unint64_t v246 = 0;
    unint64_t v334 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v334 && v95)
    {
      (*(void (**)(unint64_t))(*(void *)v334 + 16))(v334);
      unint64_t v96 = *a1;
      unint64_t v246 = a1[1];
    }
    else
    {
      unint64_t v96 = 0;
    }
    goto LABEL_307;
  }
  unsigned __int8 v103 = (unsigned __int8 *)(v96 + v102);
  a1[2] = (unint64_t)(v103 + 1);
  if (!v96)
  {
    unint64_t v246 = v95;
    goto LABEL_307;
  }
  unsigned int v104 = *v103;
  if (v104 < 2)
  {
    int v364 = 0;
    char v105 = 1;
    goto LABEL_138;
  }
LABEL_309:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v248 = a1[3];
  if (v248 && v95) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v248 + 16))(v248, v96);
  }
  char v105 = 0;
  int v364 = 1;
LABEL_138:
  if (!v104) {
    char v105 = 0;
  }
  char v363 = v105;
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v419);
  unint64_t v106 = a1[1];
  unint64_t v107 = *a1;
  unint64_t v108 = a1[2] - *a1;
  if (v106 <= v108)
  {
    unint64_t v253 = 0;
    unint64_t v254 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v255 = a1[3];
    if (v255)
    {
      if (v106)
      {
        (*(void (**)(unint64_t))(*(void *)v255 + 16))(v255);
        unint64_t v254 = *a1;
        unint64_t v253 = a1[1];
      }
      else
      {
        unint64_t v253 = 0;
        unint64_t v254 = 0;
      }
    }
    goto LABEL_315;
  }
  unsigned int v109 = (unsigned __int8 *)(v107 + v108);
  a1[2] = (unint64_t)(v109 + 1);
  if (!v107)
  {
    unint64_t v253 = v106;
    unint64_t v254 = 0;
LABEL_315:
    unint64_t v106 = 0;
    unint64_t v107 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v256 = a1[3];
    if (v256)
    {
      if (v253)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v256 + 16))(v256, v254, v253);
        unint64_t v107 = *a1;
        unint64_t v106 = a1[1];
      }
      else
      {
        unint64_t v106 = 0;
        unint64_t v107 = 0;
      }
    }
    goto LABEL_316;
  }
  unsigned int v110 = *v109;
  if (v110 < 0x3A)
  {
    unsigned int v362 = v110 | 0x100;
    goto LABEL_144;
  }
LABEL_316:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v257 = a1[3];
  if (v257 && v106) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v257 + 16))(v257, v107);
  }
  unsigned int v362 = 0;
LABEL_144:
  LOWORD(v438[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v438);
  LODWORD(v111) = BYTE1(v438[0]);
  if (BYTE1(v438[0]))
  {
    char v112 = (char)v438[0];
  }
  else
  {
    unint64_t v258 = *a1;
    unint64_t v259 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v260 = a1[3];
    if (v260 && v259) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v260 + 16))(v260, v258);
    }
    char v112 = 0;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v417);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v415);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v413);
  unint64_t v113 = a1[1];
  unint64_t v114 = *a1;
  unint64_t v115 = a1[2] - *a1;
  char v361 = v112;
  if (v113 <= v115)
  {
    unint64_t v261 = 0;
    unint64_t v262 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v263 = a1[3];
    if (v263)
    {
      if (v113)
      {
        (*(void (**)(unint64_t))(*(void *)v263 + 16))(v263);
        unint64_t v262 = *a1;
        unint64_t v261 = a1[1];
      }
      else
      {
        unint64_t v261 = 0;
        unint64_t v262 = 0;
      }
    }
    goto LABEL_321;
  }
  unsigned int v116 = (unsigned __int8 *)(v114 + v115);
  uint64_t v117 = v114 + v115 + 1;
  a1[2] = v117;
  if (!v114)
  {
    unint64_t v261 = v113;
    unint64_t v262 = 0;
LABEL_321:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v264 = a1[3];
    if (v264 && v261)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v264 + 16))(v264, v262, v261);
      unsigned int v118 = 0;
      unint64_t v114 = *a1;
      unint64_t v113 = a1[1];
    }
    else
    {
      unint64_t v113 = 0;
      unint64_t v114 = 0;
      unsigned int v118 = 0;
    }
    goto LABEL_323;
  }
  unsigned int v118 = *v116;
  if (v118 < 2)
  {
    unsigned int v360 = 0;
    char v119 = 1;
    goto LABEL_150;
  }
LABEL_323:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v265 = a1[3];
  if (!v265 || !v113)
  {
    unint64_t v266 = 0;
    unint64_t v114 = 0;
    char v359 = 0;
    unsigned int v360 = 1;
LABEL_325:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v267 = a1[3];
    if (v267 && v266)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v267 + 16))(v267, v114, v266);
      unsigned int v122 = 0;
      unint64_t v114 = *a1;
      unint64_t v113 = a1[1];
    }
    else
    {
      unint64_t v113 = 0;
      unint64_t v114 = 0;
      unsigned int v122 = 0;
    }
    goto LABEL_327;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v265 + 16))(v265, v114);
  char v119 = 0;
  unint64_t v114 = *a1;
  unint64_t v113 = a1[1];
  unsigned int v360 = 1;
  uint64_t v117 = a1[2];
LABEL_150:
  if (!v118) {
    char v119 = 0;
  }
  char v359 = v119;
  unint64_t v120 = v117 - v114;
  if (v113 <= v120)
  {
    unint64_t v266 = 0;
    unint64_t v335 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v335 && v113)
    {
      (*(void (**)(unint64_t))(*(void *)v335 + 16))(v335);
      unint64_t v114 = *a1;
      unint64_t v266 = a1[1];
    }
    else
    {
      unint64_t v114 = 0;
    }
    goto LABEL_325;
  }
  unsigned int v121 = (unsigned __int8 *)(v114 + v120);
  a1[2] = (unint64_t)(v121 + 1);
  if (!v114)
  {
    unint64_t v266 = v113;
    goto LABEL_325;
  }
  unsigned int v122 = *v121;
  if (v122 < 2)
  {
    unsigned int v358 = 0;
    char v123 = 1;
    goto LABEL_156;
  }
LABEL_327:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v268 = a1[3];
  if (v268 && v113) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v268 + 16))(v268, v114);
  }
  char v123 = 0;
  unsigned int v358 = 1;
LABEL_156:
  if (!v122) {
    char v123 = 0;
  }
  char v357 = v123;
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v411);
  if (!v412)
  {
    unint64_t v269 = *a1;
    unint64_t v270 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v271 = a1[3];
    if (v271)
    {
      if (v270) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v271 + 16))(v271, v269);
      }
    }
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v408);
  unint64_t v124 = a1[1];
  uint64_t v125 = (char *)*a1;
  unint64_t v126 = a1[2] - *a1;
  if (v124 <= v126)
  {
    unint64_t v272 = 0;
    unint64_t v273 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v274 = a1[3];
    if (v274)
    {
      if (v124)
      {
        (*(void (**)(unint64_t))(*(void *)v274 + 16))(v274);
        unint64_t v273 = *a1;
        unint64_t v272 = a1[1];
      }
      else
      {
        unint64_t v272 = 0;
        unint64_t v273 = 0;
      }
    }
    goto LABEL_333;
  }
  char v127 = &v125[v126];
  uint64_t v128 = (uint64_t)&v125[v126 + 1];
  a1[2] = v128;
  if (!v125)
  {
    unint64_t v272 = v124;
    unint64_t v273 = 0;
LABEL_333:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v275 = a1[3];
    if (v275 && v272)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v275 + 16))(v275, v273, v272);
      unsigned int v129 = 0;
      uint64_t v125 = (char *)*a1;
      unint64_t v124 = a1[1];
    }
    else
    {
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      unsigned int v129 = 0;
    }
    goto LABEL_335;
  }
  unsigned int v129 = *v127;
  if (v129 < 2)
  {
    unsigned int v356 = 0;
    char v130 = 1;
    goto LABEL_163;
  }
LABEL_335:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v276 = a1[3];
  if (!v276 || !v124)
  {
    unint64_t v277 = 0;
    uint64_t v125 = 0;
    char v355 = 0;
    unsigned int v356 = 1;
LABEL_337:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v278 = a1[3];
    if (v278 && v277)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v278 + 16))(v278, v125, v277);
      unsigned int v134 = 0;
      uint64_t v125 = (char *)*a1;
      unint64_t v124 = a1[1];
    }
    else
    {
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      unsigned int v134 = 0;
    }
    goto LABEL_339;
  }
  (*(void (**)(unint64_t, char *))(*(void *)v276 + 16))(v276, v125);
  char v130 = 0;
  uint64_t v125 = (char *)*a1;
  unint64_t v124 = a1[1];
  unsigned int v356 = 1;
  uint64_t v128 = a1[2];
LABEL_163:
  if (!v129) {
    char v130 = 0;
  }
  char v355 = v130;
  unint64_t v131 = v128 - (void)v125;
  if (v124 <= v131)
  {
    unint64_t v277 = 0;
    unint64_t v343 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v343 && v124)
    {
      (*(void (**)(unint64_t))(*(void *)v343 + 16))(v343);
      uint64_t v125 = (char *)*a1;
      unint64_t v277 = a1[1];
    }
    else
    {
      uint64_t v125 = 0;
    }
    goto LABEL_337;
  }
  char v132 = &v125[v131];
  uint64_t v133 = (uint64_t)&v125[v131 + 1];
  a1[2] = v133;
  if (!v125)
  {
    unint64_t v277 = v124;
    goto LABEL_337;
  }
  unsigned int v134 = *v132;
  if (v134 < 2)
  {
    unsigned int v354 = 0;
    char v135 = 1;
    goto LABEL_169;
  }
LABEL_339:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v279 = a1[3];
  if (!v279 || !v124)
  {
    char v352 = 0;
    unint64_t v280 = 0;
    uint64_t v125 = 0;
    unsigned int v354 = 1;
    goto LABEL_341;
  }
  (*(void (**)(unint64_t, char *))(*(void *)v279 + 16))(v279, v125);
  char v135 = 0;
  uint64_t v125 = (char *)*a1;
  unint64_t v124 = a1[1];
  unsigned int v354 = 1;
  uint64_t v133 = a1[2];
LABEL_169:
  if (!v134) {
    char v135 = 0;
  }
  char v352 = v135;
  unint64_t v136 = v133 - (void)v125;
  if (v124 <= v136)
  {
    unint64_t v280 = 0;
    unint64_t v342 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v342 && v124)
    {
      (*(void (**)(unint64_t))(*(void *)v342 + 16))(v342);
      uint64_t v125 = (char *)*a1;
      unint64_t v280 = a1[1];
    }
    else
    {
      uint64_t v125 = 0;
    }
LABEL_341:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v281 = a1[3];
    if (v281) {
      goto LABEL_606;
    }
    goto LABEL_342;
  }
  int v137 = &v125[v136];
  uint64_t v138 = (uint64_t)&v125[v136 + 1];
  a1[2] = v138;
  if (!v125)
  {
    unint64_t v280 = v124;
    goto LABEL_341;
  }
  unsigned int v139 = *v137;
  if (v139 < 2)
  {
    unsigned int v353 = 0;
    char v140 = 1;
    goto LABEL_175;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    unint64_t v282 = a1[3];
    if (!v282 || !v124)
    {
      char v351 = 0;
      unint64_t v283 = 0;
      uint64_t v125 = 0;
      unsigned int v353 = 1;
LABEL_345:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v284 = a1[3];
      if (v284 && v283)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v284 + 16))(v284, v125, v283);
        unsigned int v144 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
      }
      else
      {
        unint64_t v124 = 0;
        uint64_t v125 = 0;
        unsigned int v144 = 0;
      }
      goto LABEL_347;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v282 + 16))(v282, v125);
    char v140 = 0;
    uint64_t v125 = (char *)*a1;
    unint64_t v124 = a1[1];
    unsigned int v353 = 1;
    uint64_t v138 = a1[2];
LABEL_175:
    if (!v139) {
      char v140 = 0;
    }
    char v351 = v140;
    unint64_t v141 = v138 - (void)v125;
    if (v124 <= v141)
    {
      unint64_t v283 = 0;
      unint64_t v341 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v341 && v124)
      {
        (*(void (**)(unint64_t))(*(void *)v341 + 16))(v341);
        uint64_t v125 = (char *)*a1;
        unint64_t v283 = a1[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      goto LABEL_345;
    }
    unint64_t v142 = &v125[v141];
    uint64_t v143 = (uint64_t)&v125[v141 + 1];
    a1[2] = v143;
    if (!v125)
    {
      unint64_t v283 = v124;
      goto LABEL_345;
    }
    unsigned int v144 = *v142;
    if (v144 < 2)
    {
      unsigned int v350 = 0;
      char v145 = 1;
      goto LABEL_181;
    }
LABEL_347:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v285 = a1[3];
    if (!v285 || !v124)
    {
      char v348 = 0;
      unint64_t v286 = 0;
      uint64_t v125 = 0;
      unsigned int v350 = 1;
LABEL_349:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v287 = a1[3];
      if (v287 && v286)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v287 + 16))(v287, v125, v286);
        unsigned int v149 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
      }
      else
      {
        unint64_t v124 = 0;
        uint64_t v125 = 0;
        unsigned int v149 = 0;
      }
      goto LABEL_351;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v285 + 16))(v285, v125);
    char v145 = 0;
    uint64_t v125 = (char *)*a1;
    unint64_t v124 = a1[1];
    unsigned int v350 = 1;
    uint64_t v143 = a1[2];
LABEL_181:
    if (!v144) {
      char v145 = 0;
    }
    char v348 = v145;
    unint64_t v146 = v143 - (void)v125;
    if (v124 <= v146)
    {
      unint64_t v286 = 0;
      unint64_t v340 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v340 && v124)
      {
        (*(void (**)(unint64_t))(*(void *)v340 + 16))(v340);
        uint64_t v125 = (char *)*a1;
        unint64_t v286 = a1[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      goto LABEL_349;
    }
    v147 = &v125[v146];
    uint64_t v148 = (uint64_t)&v125[v146 + 1];
    a1[2] = v148;
    if (!v125)
    {
      unint64_t v286 = v124;
      goto LABEL_349;
    }
    unsigned int v149 = *v147;
    if (v149 < 2)
    {
      unsigned int v349 = 0;
      char v150 = 1;
      goto LABEL_187;
    }
LABEL_351:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v288 = a1[3];
    if (!v288 || !v124)
    {
      char v347 = 0;
      unint64_t v289 = 0;
      uint64_t v125 = 0;
      unsigned int v349 = 1;
LABEL_353:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v290 = a1[3];
      if (v290 && v289)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v290 + 16))(v290, v125, v289);
        unsigned int v154 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
      }
      else
      {
        unint64_t v124 = 0;
        uint64_t v125 = 0;
        unsigned int v154 = 0;
      }
      goto LABEL_355;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v288 + 16))(v288, v125);
    char v150 = 0;
    uint64_t v125 = (char *)*a1;
    unint64_t v124 = a1[1];
    unsigned int v349 = 1;
    uint64_t v148 = a1[2];
LABEL_187:
    if (!v149) {
      char v150 = 0;
    }
    char v347 = v150;
    unint64_t v151 = v148 - (void)v125;
    if (v124 <= v151)
    {
      unint64_t v289 = 0;
      unint64_t v339 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v339 && v124)
      {
        (*(void (**)(unint64_t))(*(void *)v339 + 16))(v339);
        uint64_t v125 = (char *)*a1;
        unint64_t v289 = a1[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      goto LABEL_353;
    }
    uint64_t v152 = &v125[v151];
    uint64_t v153 = (uint64_t)&v125[v151 + 1];
    a1[2] = v153;
    if (!v125)
    {
      unint64_t v289 = v124;
      goto LABEL_353;
    }
    unsigned int v154 = *v152;
    if (v154 < 2)
    {
      unsigned int v346 = 0;
      int v155 = 1;
      goto LABEL_193;
    }
LABEL_355:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v291 = a1[3];
    if (!v291 || !v124)
    {
      unint64_t v292 = 0;
      uint64_t v125 = 0;
      unsigned int v345 = 0;
      unsigned int v346 = 1;
LABEL_357:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v293 = a1[3];
      if (v293 && v292)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v293 + 16))(v293, v125, v292);
        unsigned int v159 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
      }
      else
      {
        unint64_t v124 = 0;
        uint64_t v125 = 0;
        unsigned int v159 = 0;
      }
      goto LABEL_359;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v291 + 16))(v291, v125);
    int v155 = 0;
    uint64_t v125 = (char *)*a1;
    unint64_t v124 = a1[1];
    unsigned int v346 = 1;
    uint64_t v153 = a1[2];
LABEL_193:
    if (!v154) {
      int v155 = 0;
    }
    unsigned int v345 = v155;
    unint64_t v156 = v153 - (void)v125;
    if (v124 <= v156)
    {
      unint64_t v292 = 0;
      unint64_t v338 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v338 && v124)
      {
        (*(void (**)(unint64_t))(*(void *)v338 + 16))(v338);
        uint64_t v125 = (char *)*a1;
        unint64_t v292 = a1[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      goto LABEL_357;
    }
    unint64_t v157 = &v125[v156];
    uint64_t v158 = (uint64_t)&v125[v156 + 1];
    a1[2] = v158;
    if (!v125)
    {
      unint64_t v292 = v124;
      goto LABEL_357;
    }
    unsigned int v159 = *v157;
    if (v159 < 2)
    {
      int v160 = 0;
      char v161 = 1;
      goto LABEL_199;
    }
LABEL_359:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v294 = a1[3];
    if (!v294 || !v124)
    {
      char v162 = 0;
      unint64_t v295 = 0;
      uint64_t v125 = 0;
      int v160 = 1;
LABEL_361:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v296 = a1[3];
      if (v296 && v295)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v296 + 16))(v296, v125, v295);
        unsigned int v166 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
      }
      else
      {
        unint64_t v124 = 0;
        uint64_t v125 = 0;
        unsigned int v166 = 0;
      }
      goto LABEL_363;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v294 + 16))(v294, v125);
    char v161 = 0;
    uint64_t v125 = (char *)*a1;
    unint64_t v124 = a1[1];
    int v160 = 1;
    uint64_t v158 = a1[2];
LABEL_199:
    if (v159) {
      char v162 = v161;
    }
    else {
      char v162 = 0;
    }
    unint64_t v163 = v158 - (void)v125;
    if (v124 <= v163)
    {
      unint64_t v295 = 0;
      unint64_t v337 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v337 && v124)
      {
        (*(void (**)(unint64_t))(*(void *)v337 + 16))(v337);
        uint64_t v125 = (char *)*a1;
        unint64_t v295 = a1[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      goto LABEL_361;
    }
    unint64_t v164 = &v125[v163];
    uint64_t v165 = (uint64_t)&v125[v163 + 1];
    a1[2] = v165;
    if (!v125)
    {
      unint64_t v295 = v124;
      goto LABEL_361;
    }
    unsigned int v166 = *v164;
    if (v166 < 2)
    {
      int v167 = 0;
      char v168 = 1;
      goto LABEL_206;
    }
LABEL_363:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v297 = a1[3];
    if (!v297 || !v124)
    {
      char v169 = 0;
      unint64_t v298 = 0;
      uint64_t v125 = 0;
      int v167 = 1;
LABEL_365:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v299 = a1[3];
      if (v299 && v298)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v299 + 16))(v299, v125, v298);
        unsigned int v172 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
      }
      else
      {
        unint64_t v124 = 0;
        uint64_t v125 = 0;
        unsigned int v172 = 0;
      }
      goto LABEL_367;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v297 + 16))(v297, v125);
    char v168 = 0;
    uint64_t v125 = (char *)*a1;
    unint64_t v124 = a1[1];
    int v167 = 1;
    uint64_t v165 = a1[2];
LABEL_206:
    if (v166) {
      char v169 = v168;
    }
    else {
      char v169 = 0;
    }
    unint64_t v170 = v165 - (void)v125;
    if (v124 <= v170)
    {
      unint64_t v298 = 0;
      unint64_t v336 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v336 && v124)
      {
        (*(void (**)(unint64_t))(*(void *)v336 + 16))(v336);
        uint64_t v125 = (char *)*a1;
        unint64_t v298 = a1[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      goto LABEL_365;
    }
    uint64_t v171 = &v125[v170];
    a1[2] = (unint64_t)(v171 + 1);
    if (!v125)
    {
      unint64_t v298 = v124;
      goto LABEL_365;
    }
    unsigned int v172 = *v171;
    if (v172 < 2)
    {
      int v173 = 0;
      char v174 = 1;
      goto LABEL_213;
    }
LABEL_367:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v300 = a1[3];
    if (v300)
    {
      if (v124)
      {
        (*(void (**)(unint64_t, char *))(*(void *)v300 + 16))(v300, v125);
        char v174 = 0;
        uint64_t v125 = (char *)*a1;
        unint64_t v124 = a1[1];
        goto LABEL_370;
      }
    }
    else
    {
      unint64_t v124 = 0;
    }
    uint64_t v125 = 0;
    char v174 = 0;
LABEL_370:
    int v173 = 1;
LABEL_213:
    if (v172) {
      char v175 = v174;
    }
    else {
      char v175 = 0;
    }
    unint64_t v176 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v125;
    if (v124 < v176 || v124 - v176 <= 7)
    {
      unint64_t v301 = 0;
      unint64_t v302 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v303 = a1[3];
      if (v303)
      {
        if (v124)
        {
          (*(void (**)(unint64_t))(*(void *)v303 + 16))(v303);
          unint64_t v302 = *a1;
          unint64_t v301 = a1[1];
        }
        else
        {
          unint64_t v301 = 0;
          unint64_t v302 = 0;
        }
      }
LABEL_372:
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v304 = a1[3];
      if (v304)
      {
        if (v301)
        {
          uint64_t v281 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v304 + 16))(v304, v302, v301);
          unint64_t v280 = *a1;
          if (*a1) {
            goto LABEL_605;
          }
          uint64_t v125 = 0;
          unint64_t v124 = a1[1];
        }
        else
        {
          unint64_t v124 = 0;
          uint64_t v125 = 0;
        }
      }
      goto LABEL_373;
    }
    uint64_t v177 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v177 + 1);
    if (!v125)
    {
      unint64_t v301 = v124;
      unint64_t v302 = 0;
      goto LABEL_372;
    }
    uint64_t v178 = *v177;
    if (*v177 != -1)
    {
      char v179 = 1;
      goto LABEL_375;
    }
LABEL_373:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v305 = a1[3];
    if (v305 && v124) {
      (*(void (**)(unint64_t, char *))(*(void *)v305 + 16))(v305, v125);
    }
    uint64_t v178 = 0;
    char v179 = 0;
LABEL_375:
    IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(&v406, (IPC::Decoder *)a1);
    uint64_t v281 = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a1, (uint64_t)&v404);
    if (!*a1) {
      break;
    }
    unint64_t v280 = v437;
    if (v437)
    {
      unint64_t v280 = (unint64_t)&v419;
      *(_OWORD *)v438 = v436;
      if (v499)
      {
        long long v441 = v497[2];
        long long v442 = v497[3];
        uint64_t v443 = v498;
        long long v439 = v497[0];
        long long v440 = v497[1];
        if (v403)
        {
          char v444 = v402;
          if (!v401)
          {
            uint64_t v445 = v400;
            if (!v399)
            {
              uint64_t v446 = v398;
              if (!v397)
              {
                uint64_t v447 = v396;
                if (!v395)
                {
                  uint64_t v448 = v394;
                  if (!v393)
                  {
                    char v449 = v392;
                    if (v435)
                    {
                      long long v450 = v434;
                      if (!v391)
                      {
                        char v451 = v390;
                        if (v433)
                        {
                          long long v452 = v432;
                          if (!v389)
                          {
                            char v453 = v387;
                            if (!v388)
                            {
                              char v454 = v386;
                              if (!v385)
                              {
                                char v455 = v384;
                                if (!v383)
                                {
                                  char v456 = v381;
                                  if (!v382)
                                  {
                                    char v457 = v380;
                                    if (!v379)
                                    {
                                      char v458 = v378;
                                      if (!v377)
                                      {
                                        char v459 = v376;
                                        if (!v375)
                                        {
                                          char v460 = v374;
                                          if (v373 > 0xFF)
                                          {
                                            char v461 = v373;
                                            if (v372 > 0xFF)
                                            {
                                              char v462 = v372;
                                              if (v371 > 0xFFu)
                                              {
                                                char v463 = v371;
                                                if (v370 > 0xFF)
                                                {
                                                  char v464 = v370;
                                                  if (v431)
                                                  {
                                                    uint64_t v306 = v430;
                                                    char v430 = 0;
                                                    long long v465 = v306;
                                                    if (v429)
                                                    {
                                                      uint64_t v307 = v427;
                                                      long long v427 = 0;
                                                      v466[0] = v307;
                                                      uint64_t v308 = v428;
                                                      uint64_t v428 = 0;
                                                      v466[1] = v308;
                                                      if ((v369 & 0xFF00000000) != 0)
                                                      {
                                                        int v467 = v369;
                                                        if (v426)
                                                        {
                                                          uint64_t v309 = v425;
                                                          uint64_t v425 = 0;
                                                          long long v468 = v309;
                                                          if (!v368)
                                                          {
                                                            uint64_t v469 = v367;
                                                            if (v424)
                                                            {
                                                              uint64_t v310 = v423;
                                                              char v423 = 0;
                                                              char v470 = v310;
                                                              if (!v366)
                                                              {
                                                                char v471 = v365;
                                                                if (!v364)
                                                                {
                                                                  char v472 = v363;
                                                                  if (v422)
                                                                  {
                                                                    uint64_t v311 = v419;
                                                                    long long v419 = 0;
                                                                    long long v473 = v311;
                                                                    long long v474 = v420;
                                                                    long long v475 = v421;
                                                                    LODWORD(v420) = v420 & 0xFFFFFFFE;
                                                                    unint64_t v280 = v362;
                                                                    if (v362 > 0xFF)
                                                                    {
                                                                      char v476 = v362;
                                                                      if (v111)
                                                                      {
                                                                        char v477 = v361;
                                                                        unint64_t v280 = v418;
                                                                        if (v418)
                                                                        {
                                                                          uint64_t v312 = v417;
                                                                          long long v417 = 0;
                                                                          char v478 = v312;
                                                                          unint64_t v280 = v416;
                                                                          if (v416)
                                                                          {
                                                                            uint64_t v313 = v415;
                                                                            char v415 = 0;
                                                                            uint64_t v479 = v313;
                                                                            unint64_t v280 = v414;
                                                                            if (v414)
                                                                            {
                                                                              uint64_t v314 = v413;
                                                                              uint64_t v413 = 0;
                                                                              v480 = v314;
                                                                              unint64_t v280 = v360;
                                                                              if (!v360)
                                                                              {
                                                                                char v481 = v359;
                                                                                unint64_t v280 = v358;
                                                                                if (!v358)
                                                                                {
                                                                                  char v482 = v357;
                                                                                  unint64_t v280 = v412;
                                                                                  if (v412)
                                                                                  {
                                                                                    unint64_t v111 = v466;
                                                                                    uint64_t v281 = WebCore::Color::Color();
                                                                                    unint64_t v280 = v410;
                                                                                    if (v410)
                                                                                    {
                                                                                      uint64_t v483 = v408;
                                                                                      uint64_t v315 = v409;
                                                                                      uint64_t v408 = 0;
                                                                                      uint64_t v409 = 0;
                                                                                      uint64_t v484 = v315;
                                                                                      unint64_t v280 = v356;
                                                                                      if (!v356)
                                                                                      {
                                                                                        char v485 = v355;
                                                                                        unint64_t v280 = v354;
                                                                                        if (!v354)
                                                                                        {
                                                                                          char v486 = v352;
                                                                                          unint64_t v280 = v353;
                                                                                          if (!v353)
                                                                                          {
                                                                                            char v487 = v351;
                                                                                            unint64_t v280 = v350;
                                                                                            if (!v350)
                                                                                            {
                                                                                              char v488 = v348;
                                                                                              unint64_t v280 = v349;
                                                                                              if (!v349)
                                                                                              {
                                                                                                char v489 = v347;
                                                                                                unint64_t v280 = v346;
                                                                                                if (!v346)
                                                                                                {
                                                                                                  unint64_t v280 = v345;
                                                                                                  char v490 = v345;
                                                                                                  if (!v160)
                                                                                                  {
                                                                                                    char v491 = v162;
                                                                                                    if (!v167)
                                                                                                    {
                                                                                                      char v492 = v169;
                                                                                                      if (!v173)
                                                                                                      {
                                                                                                        char v493 = v175;
                                                                                                        if (v179)
                                                                                                        {
                                                                                                          uint64_t v494 = v178;
                                                                                                          unint64_t v280 = v407;
                                                                                                          if (v407)
                                                                                                          {
                                                                                                            long long v495 = v406;
                                                                                                            unint64_t v280 = v405;
                                                                                                            if (v405)
                                                                                                            {
                                                                                                              long long v496 = v404;
                                                                                                              *(unsigned char *)(WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)a2, (long long *)v438) + 416) = 1;
                                                                                                              WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v438, v316);
                                                                                                              goto LABEL_430;
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_605:
    __break(1u);
LABEL_606:
    if (v280)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v281 + 16))(v281, v125, v280);
      unsigned int v139 = 0;
      uint64_t v125 = (char *)*a1;
      unint64_t v124 = a1[1];
    }
    else
    {
LABEL_342:
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      unsigned int v139 = 0;
    }
  }
  *a2 = 0;
  a2[416] = 0;
LABEL_430:
  if (v410) {
    WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v408, v125);
  }
  if (v412)
  {
    if ((v411 & 0x8000000000000) != 0)
    {
      uint64_t v324 = (unsigned int *)(v411 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v411 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v324);
        WTF::fastFree((WTF *)v324, v125);
      }
    }
  }
  if (v414)
  {
    uint64_t v317 = v413;
    uint64_t v413 = 0;
    if (v317)
    {
      if (*(_DWORD *)v317 == 2) {
        WTF::StringImpl::destroy(v317, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v317 -= 2;
      }
    }
  }
  if (v416)
  {
    uint64_t v318 = v415;
    char v415 = 0;
    if (v318)
    {
      if (*(_DWORD *)v318 == 2) {
        WTF::StringImpl::destroy(v318, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v318 -= 2;
      }
    }
  }
  if (v418)
  {
    uint64_t v319 = v417;
    long long v417 = 0;
    if (v319)
    {
      if (*(_DWORD *)v319 == 2) {
        WTF::StringImpl::destroy(v319, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v319 -= 2;
      }
    }
  }
  if (v422)
  {
    uint64_t v320 = v419;
    long long v419 = 0;
    if (v320)
    {
      if (*(_DWORD *)v320 == 2) {
        WTF::StringImpl::destroy(v320, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v320 -= 2;
      }
    }
  }
  if (v424)
  {
    uint64_t v321 = v423;
    char v423 = 0;
    if (v321)
    {
      if (*(_DWORD *)v321 == 2) {
        WTF::StringImpl::destroy(v321, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v321 -= 2;
      }
    }
  }
  if (v426)
  {
    unint64_t v322 = v425;
    uint64_t v425 = 0;
    if (v322)
    {
      if (*(_DWORD *)v322 == 2) {
        WTF::StringImpl::destroy(v322, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v322 -= 2;
      }
    }
  }
  if (v429) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v427, v125);
  }
  if (v431)
  {
    uint64_t v323 = v430;
    char v430 = 0;
    if (v323)
    {
      if (*(_DWORD *)v323 == 2) {
        WTF::StringImpl::destroy(v323, (WTF::StringImpl *)v125);
      }
      else {
        *(_DWORD *)v323 -= 2;
      }
    }
  }
}

void sub_198829918(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,WTF::StringImpl *a58,char a59,WTF::StringImpl *a60,char a61,WTF::StringImpl *a62,char a63)
{
  if (a57)
  {
    if ((a56 & 0x8000000000000) != 0)
    {
      unint64_t v73 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a56 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v73);
        WTF::fastFree((WTF *)v73, a2);
      }
    }
  }
  if (a59 && a58)
  {
    if (*(_DWORD *)a58 == 2) {
      WTF::StringImpl::destroy(a58, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a58 -= 2;
    }
  }
  if (a61 && a60)
  {
    if (*(_DWORD *)a60 == 2) {
      WTF::StringImpl::destroy(a60, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a60 -= 2;
    }
  }
  if (a63 && a62)
  {
    if (*(_DWORD *)a62 == 2) {
      WTF::StringImpl::destroy(a62, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a62 -= 2;
    }
  }
  if (a69 && a64)
  {
    if (*(_DWORD *)a64 == 2) {
      WTF::StringImpl::destroy(a64, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a64 -= 2;
    }
  }
  if (a71 && a70)
  {
    if (*(_DWORD *)a70 == 2) {
      WTF::StringImpl::destroy(a70, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a70 -= 2;
    }
  }
  if (LOBYTE(STACK[0x200]) && a72)
  {
    if (*(_DWORD *)a72 == 2) {
      WTF::StringImpl::destroy(a72, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a72 -= 2;
    }
  }
  if (LOBYTE(STACK[0x218])) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x208], a2);
  }
  if (LOBYTE(STACK[0x228]))
  {
    unint64_t v74 = (WTF::StringImpl *)STACK[0x220];
    STACK[0x220] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WebCore::ElementContext>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::ElementContext,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::InputMode>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::InputMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::Color,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198829E20(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  *uint64_t v5 = v4;
  char v7 = a2[1];
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198829F90);
  }
  *uint64_t v8 = v7;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 8));
  unsigned __int8 v16 = *((_DWORD *)a2 + 58);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v16);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)(a2 + 208), v16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 30);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2 + 31);
  uint64_t v17 = *((void *)a2 + 32);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v17);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)(a2 + 264));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *((_DWORD *)a2 + 72));
  char v10 = a2[292];
  unsigned int v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198829FB0);
  }
  *unsigned int v11 = v10;
  char v13 = a2[293];
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x198829F70);
  }
  *unint64_t result = v13;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebKit::FrameInfoData,void>::decode@<X0>(IPC::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(WTF::StringImpl **)this;
  unint64_t v6 = *((void *)this + 2) - *(void *)this;
  if (v4 <= v6) {
    goto LABEL_52;
  }
  char v7 = (unsigned __int8 *)v5 + v6;
  *((void *)this + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v36 = v4;
    unsigned int v37 = 0;
    goto LABEL_53;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    int v54 = 0;
    char v9 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v40 = *((void *)v2 + 3);
    if (!v40)
    {
      uint64_t v5 = 0;
      char v10 = 0;
      unint64_t v4 = 0;
      goto LABEL_57;
    }
    if (!v4)
    {
      uint64_t v5 = 0;
      char v10 = 0;
LABEL_57:
      int v54 = 1;
LABEL_58:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v41 = *((void *)v2 + 3);
      if (v41)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v5);
          unsigned int v42 = *(WTF::StringImpl **)v2;
          unint64_t v4 = *((void *)v2 + 1);
        }
        else
        {
          unsigned int v42 = 0;
        }
      }
      else
      {
        unsigned int v42 = 0;
        unint64_t v4 = 0;
      }
LABEL_60:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v43 = *((void *)v2 + 3);
      if (v43)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v43 + 16))(v43, v42);
          uint64_t v5 = *(WTF::StringImpl **)v2;
          unint64_t v4 = *((void *)v2 + 1);
        }
        else
        {
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v4 = 0;
      }
      goto LABEL_62;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v40 + 16))(v40, v5);
    char v9 = 0;
    uint64_t v5 = *(WTF::StringImpl **)v2;
    unint64_t v4 = *((void *)v2 + 1);
    int v54 = 1;
LABEL_5:
    if (v8) {
      char v10 = v9;
    }
    else {
      char v10 = 0;
    }
    if (v4 <= *((void *)v2 + 2) - (void)v5) {
      goto LABEL_58;
    }
    unsigned int v11 = (unsigned __int8 *)*((void *)v2 + 2);
    *((void *)v2 + 2) = v11 + 1;
    if (!v5)
    {
      unsigned int v42 = 0;
      goto LABEL_60;
    }
    unsigned int v12 = *v11;
    if (v12 < 2)
    {
      int v13 = 0;
      BOOL v14 = v12 != 0;
      goto LABEL_12;
    }
LABEL_62:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v44 = *((void *)v2 + 3);
    if (v44 && v4) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v44 + 16))(v44, v5);
    }
    IPC::Decoder::markInvalid(v2);
    BOOL v14 = 0;
    int v13 = 1;
LABEL_12:
    IPC::Decoder::decode<WebCore::ResourceRequest>(v2, (uint64_t)v62);
    IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v2, v78);
    IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v60);
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v2, (uint64_t)&v58);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v2, (uint64_t)&v55);
    uint64_t v15 = IPC::Decoder::decode<unsigned int>(v2);
    unint64_t v4 = *((void *)v2 + 1);
    unsigned __int8 v16 = *(WTF::StringImpl **)v2;
    unint64_t v17 = *((void *)v2 + 2) - *(void *)v2;
    if (v4 <= v17)
    {
      unint64_t v45 = 0;
      uint64_t v46 = 0;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v47 = *((void *)v2 + 3);
      if (v47)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
          uint64_t v46 = *(WTF::StringImpl **)v2;
          unint64_t v45 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v45 = 0;
          uint64_t v46 = 0;
        }
      }
      goto LABEL_65;
    }
    uint64_t v18 = (unsigned __int8 *)v16 + v17;
    uint64_t v19 = (uint64_t)v16 + v17 + 1;
    *((void *)v2 + 2) = v19;
    if (!v16)
    {
      unint64_t v45 = v4;
      uint64_t v46 = 0;
LABEL_65:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v48 = *((void *)v2 + 3);
      if (v48 && v45)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v48 + 16))(v48, v46, v45);
        unsigned int v20 = 0;
        unsigned __int8 v16 = *(WTF::StringImpl **)v2;
        unint64_t v4 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        unsigned __int8 v16 = 0;
        unsigned int v20 = 0;
      }
      goto LABEL_67;
    }
    unsigned int v20 = *v18;
    if (v20 < 2)
    {
      int v21 = 0;
      char v22 = 1;
      goto LABEL_16;
    }
LABEL_67:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v49 = *((void *)v2 + 3);
    if (!v49 || !v4)
    {
      char v23 = 0;
      unint64_t v50 = 0;
      unsigned __int8 v16 = 0;
      int v21 = 1;
LABEL_69:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v51 = *((void *)v2 + 3);
      if (v51 && v50)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v51 + 16))(v51, v16, v50);
        unsigned __int8 v16 = *(WTF::StringImpl **)v2;
        unint64_t v4 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        unsigned __int8 v16 = 0;
      }
      goto LABEL_71;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v49 + 16))(v49, v16);
    char v22 = 0;
    unsigned __int8 v16 = *(WTF::StringImpl **)v2;
    unint64_t v4 = *((void *)v2 + 1);
    int v21 = 1;
    uint64_t v19 = *((void *)v2 + 2);
LABEL_16:
    if (v20) {
      char v23 = v22;
    }
    else {
      char v23 = 0;
    }
    unint64_t v24 = v19 - (void)v16;
    if (v4 <= v24)
    {
      unint64_t v50 = 0;
      uint64_t v53 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v53 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
        unsigned __int8 v16 = *(WTF::StringImpl **)v2;
        unint64_t v50 = *((void *)v2 + 1);
      }
      else
      {
        unsigned __int8 v16 = 0;
      }
      goto LABEL_69;
    }
    unsigned int v25 = (unsigned __int8 *)v16 + v24;
    *((void *)v2 + 2) = v25 + 1;
    if (!v16)
    {
      unint64_t v50 = v4;
      goto LABEL_69;
    }
    uint64_t v26 = a2;
    unsigned int v27 = *v25;
    if (v27 <= 1)
    {
      int v28 = 0;
      a2 = v27 != 0;
      goto LABEL_23;
    }
LABEL_71:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v52 = *((void *)v2 + 3);
    if (!v52
      || !v4
      || (uint64_t v26 = a2,
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v16),
          !*(void *)v2))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 296) = 0;
      goto LABEL_41;
    }
    a2 = 0;
    int v28 = 1;
LABEL_23:
    if (!v54)
    {
      v66[0] = v10;
      if (!v13)
      {
        v66[1] = v14;
        if (v64)
        {
          uint64_t v2 = (IPC::Decoder *)v67;
          WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v67, (uint64_t)v62);
          unint64_t v29 = v63;
          char v63 = 0;
          CFTypeRef cf = v29;
          if (v80)
          {
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v69, (uint64_t)v78);
            if (v61)
            {
              uint64_t v30 = v60;
              unsigned int v60 = 0;
              unsigned int v71 = v30;
              if (v59)
              {
                long long v72 = v58;
                if (v57)
                {
                  long long v73 = v55;
                  char v74 = v56;
                  if ((v15 & 0xFF00000000) != 0)
                  {
                    int v75 = v15;
                    if (!v21)
                    {
                      char v76 = v23;
                      if (!v28) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_52:
    unint64_t v36 = 0;
    unsigned int v37 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v38 = *((void *)v2 + 3);
    if (v38)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        unsigned int v37 = *(WTF::StringImpl **)v2;
        unint64_t v36 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v36 = 0;
        unsigned int v37 = 0;
      }
    }
LABEL_53:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v39 = *((void *)v2 + 3);
    if (v39 && v36)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
      unsigned int v8 = 0;
      uint64_t v5 = *(WTF::StringImpl **)v2;
      unint64_t v4 = *((void *)v2 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v8 = 0;
    }
  }
  char v77 = a2;
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>(v26, (uint64_t)v66);
  unsigned int v32 = v71;
  unsigned int v71 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v31);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (v70 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v70])(&v65, v69);
  }
  int v70 = -1;
  CFTypeRef v33 = cf;
  CFTypeRef cf = 0;
  if (v33) {
    CFRelease(v33);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v67);
LABEL_41:
  if (v61)
  {
    unint64_t v34 = v60;
    unsigned int v60 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v16);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  if (v80 && v79 != -1) {
    ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v79])(v66, v78);
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v62);
}

void sub_19882A728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18);
  if (*(unsigned char *)(v47 - 104))
  {
    uint64_t v49 = *(unsigned int *)(v47 - 112);
    if (v49 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v49])(&a47, v47 - 136);
    }
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a20);
  _Unwind_Resume(a1);
}

void sub_19882A7A4()
{
}

void sub_19882A7AC()
{
}

void sub_19882A7B4()
{
}

unint64_t IPC::ArgumentCoder<WebKit::FrameTreeCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 36));
  uint64_t v5 = *(unsigned int *)(a2 + 36);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::FrameTreeCreationParameters,void>::encode(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::FrameTreeNodeData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)&v52);
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (v4 >= 0xD20)
    {
      uint64_t v46 = a2;
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameTreeNodeData>(&v60, a1);
        if (!v70) {
          break;
        }
        unsigned int v23 = HIDWORD(v51);
        if (HIDWORD(v51) == v51)
        {
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>((uint64_t)&v50, (unint64_t)&v60);
        }
        else
        {
          uint64_t v25 = v50;
          uint64_t v26 = v50 + 312 * HIDWORD(v51);
          *(_WORD *)uint64_t v26 = v60;
          WebCore::ResourceRequestBase::ResourceRequestBase(v26 + 8, (uint64_t)v61);
          CFTypeRef v27 = cf;
          CFTypeRef cf = 0;
          *(void *)(v26 + 200) = v27;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v26 + 208, (uint64_t)v63);
          int v28 = v65;
          char v65 = 0;
          *(void *)(v26 + 240) = v28;
          long long v29 = v66;
          long long v30 = v67[0];
          *(_OWORD *)(v26 + 278) = *(_OWORD *)((char *)v67 + 14);
          *(_OWORD *)(v26 + 264) = v30;
          *(_OWORD *)(v26 + 248) = v29;
          uint64_t v31 = v25 + 312 * v23;
          *(void *)(v31 + 296) = 0;
          *(void *)(v31 + 304) = 0;
          uint64_t v32 = v68;
          uint64_t v68 = 0;
          *(void *)(v31 + 296) = v32;
          LODWORD(v32) = v69;
          LODWORD(v69) = 0;
          *(_DWORD *)(v31 + 304) = v32;
          LODWORD(v32) = HIDWORD(v69);
          HIDWORD(v69) = 0;
          *(_DWORD *)(v31 + 308) = v32;
          ++HIDWORD(v51);
        }
        std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v24);
        if (!--v6)
        {
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v50, HIDWORD(v51));
          uint64_t v47 = v50;
          uint64_t v33 = v51;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v48 = v33;
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (!v4)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
LABEL_16:
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v47 = v18;
        uint64_t v48 = v19;
LABEL_17:
        char v49 = 1;
LABEL_26:
        WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v5);
        if (v49) {
          goto LABEL_27;
        }
        goto LABEL_12;
      }
      uint64_t v46 = a2;
      LODWORD(v51) = 312 * (int)v4 / 0x138u;
      uint64_t v50 = WTF::fastMalloc((WTF *)(312 * v4));
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameTreeNodeData>(&v60, a1);
        if (!v70) {
          break;
        }
        unsigned int v8 = HIDWORD(v51);
        if (HIDWORD(v51) == v51)
        {
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>((uint64_t)&v50, (unint64_t)&v60);
        }
        else
        {
          uint64_t v10 = v50;
          uint64_t v11 = v50 + 312 * HIDWORD(v51);
          *(_WORD *)uint64_t v11 = v60;
          WebCore::ResourceRequestBase::ResourceRequestBase(v11 + 8, (uint64_t)v61);
          CFTypeRef v12 = cf;
          CFTypeRef cf = 0;
          *(void *)(v11 + 200) = v12;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v11 + 208, (uint64_t)v63);
          int v13 = v65;
          char v65 = 0;
          *(void *)(v11 + 240) = v13;
          long long v14 = v66;
          long long v15 = v67[0];
          *(_OWORD *)(v11 + 278) = *(_OWORD *)((char *)v67 + 14);
          *(_OWORD *)(v11 + 264) = v15;
          *(_OWORD *)(v11 + 248) = v14;
          uint64_t v16 = v10 + 312 * v8;
          *(void *)(v16 + 296) = 0;
          *(void *)(v16 + 304) = 0;
          uint64_t v17 = v68;
          uint64_t v68 = 0;
          *(void *)(v16 + 296) = v17;
          LODWORD(v17) = v69;
          LODWORD(v69) = 0;
          *(_DWORD *)(v16 + 304) = v17;
          LODWORD(v17) = HIDWORD(v69);
          HIDWORD(v69) = 0;
          *(_DWORD *)(v16 + 308) = v17;
          ++HIDWORD(v51);
        }
        std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v9);
        if (!--v6)
        {
          uint64_t v18 = v50;
          uint64_t v19 = v51;
          goto LABEL_16;
        }
      }
    }
    LOBYTE(v47) = 0;
    char v49 = 0;
    std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v7);
    a2 = v46;
    goto LABEL_26;
  }
  LOBYTE(v47) = 0;
  char v49 = 0;
LABEL_12:
  unsigned int v20 = *(void **)a1;
  uint64_t v21 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v22 = *((void *)a1 + 3);
  if (v22 && v21) {
    (*(void (**)(uint64_t, void *))(*(void *)v22 + 16))(v22, v20);
  }
LABEL_27:
  if (!*(void *)a1)
  {
LABEL_43:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 312) = 0;
    goto LABEL_39;
  }
  if (!v59) {
    goto LABEL_42;
  }
  LOWORD(v60) = v52;
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v61, (uint64_t)&v53);
  unint64_t v34 = v54;
  int v54 = 0;
  CFTypeRef cf = v34;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v63, (uint64_t)&v55);
  uint64_t v35 = v56;
  char v56 = 0;
  char v65 = v35;
  v67[0] = v58[0];
  *(_OWORD *)((char *)v67 + 14) = *(_OWORD *)((char *)v58 + 14);
  long long v66 = v57;
  if (!v49)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v68 = v47;
  uint64_t v36 = v48;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v69 = v36;
  *(_WORD *)a2 = v60;
  WebCore::ResourceRequestBase::ResourceRequestBase(a2 + 8, (uint64_t)v61);
  CFTypeRef v37 = cf;
  CFTypeRef cf = 0;
  *(void *)(a2 + 200) = v37;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 208, (uint64_t)v63);
  long long v38 = v67[0];
  *(_OWORD *)(a2 + 248) = v66;
  uint64_t v39 = v68;
  *(void *)(a2 + 240) = v65;
  *(_OWORD *)(a2 + 264) = v38;
  *(_OWORD *)(a2 + 278) = *(_OWORD *)((char *)v67 + 14);
  char v65 = 0;
  uint64_t v68 = 0;
  *(void *)(a2 + 296) = v39;
  uint64_t v40 = v69;
  uint64_t v69 = 0;
  *(void *)(a2 + 304) = v40;
  *(unsigned char *)(a2 + 312) = 1;
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v41);
  uint64_t v43 = v65;
  char v65 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v42);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  if (v64 != -1) {
    ((void (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v64])(&v50, v63);
  }
  int v64 = -1;
  CFTypeRef v44 = cf;
  CFTypeRef cf = 0;
  if (v44) {
    CFRelease(v44);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v61);
LABEL_39:
  if (v49) {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v20);
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, (WTF::StringImpl *)v20);
}

void sub_19882AD6C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if ((_BYTE)v7) {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebKit::FrameInfoData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::FrameInfoData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 296)) {
    return (WebCore::ResourceRequestBase *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19882AED8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, a2 + 24);
}

void IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_22;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v16 = v4;
    unint64_t v17 = 0;
    goto LABEL_23;
  }
  unsigned int v8 = *v7;
  if (v8 >= 4) {
    goto LABEL_24;
  }
  for (unsigned int i = v8 | 0x100; ; unsigned int i = 0)
  {
    uint64_t v10 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    char v12 = v11;
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v26);
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>((IPC::Decoder *)a1, (uint64_t)v24);
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 48) = 0;
      goto LABEL_12;
    }
    if (i > 0xFF)
    {
      LOBYTE(v21) = i;
      if (v12)
      {
        HIDWORD(v21) = v10;
        if (v27)
        {
          long long v14 = v26;
          uint64_t v26 = 0;
          uint64_t v22 = v14;
          if (v25) {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_22:
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v18 = a1[3];
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v17 = *a1;
        unint64_t v16 = a1[1];
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
      }
    }
LABEL_23:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        unint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v20 = a1[3];
    if (v20 && v4) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v20 + 16))(v20, v5);
    }
  }
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100]((uint64_t)v23, (uint64_t)v24);
  *(void *)a2 = v21;
  *(_DWORD *)(a2 + 8) = HIDWORD(v10);
  *(void *)(a2 + 16) = v22;
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100](a2 + 24, (uint64_t)v23);
  *(unsigned char *)(a2 + 48) = 1;
  if (v23[16]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v23);
  }
LABEL_12:
  if (v25 && v24[16]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
  }
  if (v27)
  {
    long long v15 = v26;
    uint64_t v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
}

void sub_19882B1EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  int v28 = *(WTF::StringImpl **)(v24 + 16);
  *(void *)(v24 + 16) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, a2);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  if (a14) {
    WTF::MachSendRight::~MachSendRight(v25);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if ((_BYTE)a22 && a20) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a16);
  }
  if (*(unsigned char *)(v26 - 56))
  {
    long long v29 = *(WTF::StringImpl **)(v26 - 64);
    *(void *)(v26 - 64) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, a2);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebKit::GamepadData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3) {
    goto LABEL_26;
  }
  *unint64_t v5 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 2);
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)a2 + 3), a2[9]);
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)a2 + 5), a2[13]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)a2 + 7));
  uint64_t v7 = *((void *)a2 + 8);
  int v8 = v7 ? *(_DWORD *)(v7 - 12) : 0;
  unint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v10 <= 3)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x19882B444);
  }
  *unint64_t result = v8;
  char v11 = (char *)*((void *)a2 + 8);
  if (v11)
  {
    uint64_t v12 = *((unsigned int *)v11 - 1);
    int v13 = &v11[v12];
    if (*((_DWORD *)v11 - 3))
    {
      long long v14 = v11;
      if (v12)
      {
        long long v14 = v11;
        while (*v14 >= 0xFEu)
        {
          ++v14;
          if (!--v12)
          {
            long long v14 = v13;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    long long v14 = &v11[v12];
  }
  else
  {
    long long v14 = 0;
    uint64_t v12 = 0;
  }
  int v13 = &v11[v12];
  if (v11)
  {
LABEL_13:
    long long v15 = &v11[*((unsigned int *)v11 - 1)];
    goto LABEL_18;
  }
  long long v15 = 0;
LABEL_18:
  while (v14 != v15)
  {
    unint64_t v16 = v14 + 1;
    char v17 = *v14;
    unint64_t result = (_DWORD *)IPC::Encoder::operator<<<BOOL>(a1, &v17);
    long long v14 = v13;
    if (v16 != v13)
    {
      long long v14 = v16;
      while (*v14 >= 0xFEu)
      {
        if (++v14 == v13)
        {
          long long v14 = v13;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GamepadData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(unsigned __int8 **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    int v8 = &v5[v6];
    *((void *)a1 + 2) = v8 + 4;
    if (v5)
    {
      int v9 = 0;
      unsigned int v10 = *(_DWORD *)v8 & 0xFFFFFF00;
      int v11 = *(_DWORD *)v8;
      goto LABEL_8;
    }
    unint64_t v45 = v4;
    uint64_t v46 = 0;
  }
  else
  {
    unint64_t v45 = 0;
    uint64_t v46 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v47 = *((void *)a1 + 3);
    if (v47)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v47 + 16))(v47, v5, v4);
        uint64_t v46 = *(unsigned __int8 **)a1;
        unint64_t v45 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v45 = 0;
        uint64_t v46 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v48 = *((void *)a1 + 3);
  if (v48 && v45) {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v48 + 16))(v48, v46);
  }
  unsigned int v10 = 0;
  int v11 = 0;
  int v9 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v62);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v60);
  IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v57);
  IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v54);
  uint64_t result = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  uint64_t v13 = result;
  char v15 = v14;
  unint64_t v16 = *((void *)a1 + 1);
  char v17 = *(unsigned __int8 **)a1;
  unint64_t v18 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v16 < v18 || v16 - v18 <= 3)
  {
    int v53 = v11;
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v51 = *((void *)a1 + 3);
    if (v51)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
        uint64_t v50 = *(unsigned __int8 **)a1;
        unint64_t v49 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v49 = 0;
        uint64_t v50 = 0;
      }
    }
  }
  else
  {
    unint64_t v19 = (int *)&v17[v18];
    *((void *)a1 + 2) = v19 + 1;
    if (v17)
    {
      int v20 = *v19;
      uint64_t v64 = 0;
      if (!v20)
      {
        int i = 0;
        uint64_t v38 = 0;
        if (!v9) {
          goto LABEL_46;
        }
        goto LABEL_73;
      }
      int v53 = v11;
      int v21 = 0;
      while (1)
      {
        uint64_t result = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>((uint64_t *)a1);
        unsigned __int8 v22 = result;
        uint64_t v23 = v64;
        if ((unsigned __int16)result < 0x100u || (result & 0xFE) == 0xFE)
        {
          if (!v64) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        if (v64
          || (uint64_t result = WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(&v64),
              (uint64_t v23 = v64) != 0))
        {
          unsigned int v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          unsigned int v24 = 0;
        }
        unsigned int v25 = ~(v22 << 15) + v22;
        unsigned int v26 = (9 * (v25 ^ (v25 >> 10))) ^ ((9 * (v25 ^ (v25 >> 10))) >> 6);
        uint64_t v27 = v24 & ((v26 + ~(v26 << 11)) ^ ((v26 + ~(v26 << 11)) >> 16));
        char v17 = (unsigned __int8 *)(v23 + v27);
        int v28 = *(unsigned __int8 *)(v23 + v27);
        if (v28 != 255)
        {
          long long v29 = 0;
          int v30 = 1;
          while (v28 != v22)
          {
            if (v28 == 254) {
              long long v29 = v17;
            }
            uint64_t v27 = (v27 + v30) & v24;
            char v17 = (unsigned __int8 *)(v23 + v27);
            int v28 = *(unsigned __int8 *)(v23 + v27);
            ++v30;
            if (v28 == 255)
            {
              if (v29)
              {
                *long long v29 = -1;
                --*(_DWORD *)(v64 - 16);
                char v17 = v29;
              }
              goto LABEL_26;
            }
          }
LABEL_38:
          WTF::fastFree((WTF *)(v23 - 16), v17);
          goto LABEL_39;
        }
LABEL_26:
        *char v17 = v22;
        uint64_t v31 = v64;
        int v32 = v64 ? *(_DWORD *)(v64 - 12) + 1 : 1;
        *(_DWORD *)(v64 - 12) = v32;
        uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
        unint64_t v34 = *(unsigned int *)(v31 - 4);
        if (v34 > 0x400) {
          break;
        }
        if (3 * v34 <= 4 * v33) {
          goto LABEL_31;
        }
LABEL_32:
        if (++v21 == v20)
        {
          uint64_t v38 = v64;
          if (*(void *)a1)
          {
            for (int i = 0; ; int i = 1)
            {
              int v11 = v53;
              if (!v9)
              {
LABEL_46:
                if (v63 && v61 && v59 && v56 && v15 && !i)
                {
                  uint64_t v39 = v62;
                  unsigned int v62 = 0;
                  uint64_t v40 = v60;
                  uint64_t v60 = 0;
                  uint64_t v41 = v57;
                  long long v57 = 0;
                  unsigned int v42 = v54;
                  int v54 = 0;
                  *(_DWORD *)a2 = v11 | v10;
                  *(void *)(a2 + 8) = v39;
                  *(void *)(a2 + 16) = v40;
                  *(void *)(a2 + 24) = v41;
                  uint64_t v43 = v58;
                  uint64_t v58 = 0;
                  *(void *)(a2 + 32) = v43;
                  *(void *)(a2 + 40) = v42;
                  uint64_t v44 = v55;
                  uint64_t v55 = 0;
                  *(void *)(a2 + 48) = v44;
                  *(void *)(a2 + 56) = v13;
                  *(void *)(a2 + 64) = v38;
                  *(unsigned char *)(a2 + 72) = 1;
                  goto LABEL_53;
                }
              }
LABEL_73:
              __break(1u);
LABEL_74:
              uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)result + 16))(result, v17);
              if (!*(void *)a1) {
                goto LABEL_44;
              }
              uint64_t v38 = 0;
            }
          }
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 72) = 0;
          if (v38) {
            uint64_t result = WTF::fastFree((WTF *)(v38 - 16), v17);
          }
          goto LABEL_53;
        }
      }
      if (v34 > 2 * v33) {
        goto LABEL_32;
      }
LABEL_31:
      uint64_t result = WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(&v64);
      goto LABEL_32;
    }
    int v53 = v11;
    unint64_t v49 = v16;
    uint64_t v50 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v52 = *((void *)a1 + 3);
  if (v52 && v49) {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v52 + 16))(v52, v50);
  }
LABEL_39:
  char v17 = *(unsigned __int8 **)a1;
  uint64_t v35 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result) {
    BOOL v36 = v35 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  if (!v36) {
    goto LABEL_74;
  }
LABEL_44:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 72) = 0;
LABEL_53:
  if (v56)
  {
    uint64_t result = (uint64_t)v54;
    if (v54)
    {
      int v54 = 0;
      LODWORD(v55) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, v17);
    }
  }
  if (v59)
  {
    uint64_t result = (uint64_t)v57;
    if (v57)
    {
      long long v57 = 0;
      LODWORD(v58) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, v17);
    }
  }
  if (v61)
  {
    uint64_t result = (uint64_t)v60;
    uint64_t v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v63)
  {
    uint64_t result = (uint64_t)v62;
    unsigned int v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19882B9D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, WTF *a14, int a15, int a16, char a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20,char a21,uint64_t a22)
{
  if (a13 && a10) {
    WTF::fastFree(a10, a2);
  }
  if (a17 && a14) {
    WTF::fastFree(a14, a2);
  }
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, (uint64_t *)(a2 + 8));
  char v8 = *(unsigned char *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = *(unsigned char *)(a2 + 25);
  IPC::Encoder::operator<<<BOOL>(a1, &v9);
  IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(a1, a2 + 32);
  char v4 = *(unsigned char *)(a2 + 160);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *unint64_t v5 = v4;
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 168);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 184));
    return (uint64_t)IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 192));
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v40);
  unsigned __int16 v7 = IPC::Decoder::decode<WebCore::TextGranularity>((uint64_t *)a1);
  LOWORD(v8) = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(a1);
  IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v38, a1);
  char v9 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v10 = *(void *)a1;
  unint64_t v11 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v9 <= v11) {
    goto LABEL_36;
  }
  uint64_t v12 = (unsigned __int8 *)(v10 + v11);
  *((void *)a1 + 2) = v12 + 1;
  if (!v10)
  {
    uint64_t v12 = v9;
    uint64_t v21 = 0;
    goto LABEL_37;
  }
  LODWORD(v12) = *v12;
  if (v12 >= 2) {
    goto LABEL_39;
  }
  int v13 = 0;
  char v14 = 1;
  while (1)
  {
    if (v12) {
      char v15 = v14;
    }
    else {
      char v15 = 0;
    }
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, &v35);
    IPC::Decoder::decode<WebCore::PublicSuffix>(&v33, a1);
    IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v31);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 200) = 0;
      goto LABEL_24;
    }
    if (v6)
    {
      *(void *)unsigned int v26 = v4;
      if (v41)
      {
        *(_OWORD *)&v26[8] = v40;
        if (v7 > 0xFFu)
        {
          v26[24] = v7;
          if ((unsigned __int16)v8 > 0xFFu)
          {
            v26[25] = (_BYTE)v8;
            if (v39)
            {
              char v8 = v27;
              std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v27, (uint64_t)v38);
              if (!v13)
              {
                LOBYTE(v28) = v15;
                if (v37)
                {
                  *((void *)&v28 + 1) = v35;
                  char v29 = v36;
                  if (v34)
                  {
                    char v17 = v33;
                    uint64_t v33 = 0;
                    v30[0] = v17;
                    if (v32) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    uint64_t v12 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v21 = *(void *)a1;
        uint64_t v12 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v21 = 0;
      }
    }
LABEL_37:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v23 + 16))(v23, v21, v12);
        LODWORD(v12) = 0;
        uint64_t v10 = *(void *)a1;
        char v9 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        char v9 = 0;
        uint64_t v10 = 0;
      }
    }
    else
    {
      char v9 = 0;
      uint64_t v10 = 0;
      LODWORD(v12) = 0;
    }
LABEL_39:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      int v25 = (int)v12;
      if (v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v10);
      }
      char v14 = 0;
      int v13 = 1;
      LODWORD(v12) = v25;
    }
    else
    {
      char v14 = 0;
      int v13 = 1;
    }
  }
  v30[1] = (WTF::StringImpl *)v31;
  uint64_t v31 = 0;
  *(_OWORD *)a2 = *(_OWORD *)v26;
  *(_OWORD *)(a2 + 10) = *(_OWORD *)&v26[10];
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 32), (uint64_t)v27);
  *(_OWORD *)(a2 + 160) = v28;
  *(unsigned char *)(a2 + 176) = v29;
  long long v18 = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  *(_OWORD *)(a2 + 184) = v18;
  *(unsigned char *)(a2 + 200) = 1;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v30[1]);
  unint64_t v19 = v30[0];
  v30[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v27[120]) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v27, v16);
  }
LABEL_24:
  if (v32) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v31);
  }
  if (v34)
  {
    int v20 = v33;
    uint64_t v33 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v39)
  {
    if (v38[120]) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v38, v16);
    }
  }
}

void sub_19882BF10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,WTF::StringImpl *a39,char a40)
{
  if (*(unsigned char *)(v40 - 112))
  {
    if (*(unsigned char *)(v40 - 120)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(v40 - 240), a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *(void *)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_14;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v6;
    uint64_t v20 = 0;
LABEL_14:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_15:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v5);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 128) = 0;
    goto LABEL_17;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebKit::WebsitePoliciesData>(a2, (uint64_t)&v24);
    if (v36)
    {
      long long v11 = v24;
      long long v24 = 0u;
      *(_OWORD *)a1 = v11;
      *(void *)&long long v11 = v25;
      uint64_t v25 = 0;
      *(void *)(a1 + 16) = v11;
      uint64_t v12 = v26;
      uint64_t v26 = 0;
      *(void *)(a1 + 24) = v12;
      *(void *)&long long v11 = v27;
      uint64_t v27 = 0;
      *(void *)(a1 + 32) = v11;
      long long v13 = v28;
      long long v28 = 0u;
      *(_OWORD *)(a1 + 40) = v13;
      long long v14 = v29;
      long long v29 = 0u;
      *(_OWORD *)(a1 + 56) = v14;
      LOWORD(v12) = v30;
      *(unsigned char *)(a1 + 74) = v31;
      *(_WORD *)(a1 + 72) = v12;
      *(unsigned char *)(a1 + 80) = v32;
      uint64_t v15 = v33;
      uint64_t v33 = 0;
      *(void *)(a1 + 88) = v15;
      long long v16 = v34;
      *(unsigned char *)(a1 + 112) = v35;
      *(_OWORD *)(a1 + 96) = v16;
      int v17 = 1;
      *(unsigned char *)(a1 + 120) = 1;
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v24, v10);
    }
    else
    {
      int v17 = 0;
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 128) = v17;
  }
  else
  {
    LOBYTE(v24) = 0;
    char v36 = 0;
    std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((unsigned char *)a1, (uint64_t)&v24);
    int v17 = 1;
    *(unsigned char *)(a1 + 128) = 1;
    if (v36)
    {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v24, v18);
      int v17 = *(unsigned __int8 *)(a1 + 128);
    }
  }
  if (!v17) {
LABEL_17:
  }
    IPC::Decoder::markInvalid(a2);
}

void sub_19882C228(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*((unsigned char *)v24 + 128))
  {
    if (*((unsigned char *)v24 + 120)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData(v24, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<WebCore::PublicSuffix>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PublicSuffix,void>::decode(a1, a2);
  if (!a1[8]) {
    return (IPC::Decoder *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_19882C2EC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebCore::PublicSuffix>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::PublicSuffix>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<WebKit::DynamicViewportSizeUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 20));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 40));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 56));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 72));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 88));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 96));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 104));

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 112));
}

uint64_t IPC::ArgumentCoder<WebKit::DynamicViewportSizeUpdate,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v45 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  char v5 = v4;
  uint64_t v44 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  char v7 = v6;
  char v8 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  char v10 = v9;
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v52);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v50);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v48);
  IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v46);
  unint64_t v11 = a1[1];
  unint64_t v12 = *a1;
  unint64_t v13 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v11 >= v13 && v11 - v13 > 7)
  {
    uint64_t v15 = (uint64_t *)(v12 + v13);
    a1[2] = (unint64_t)(v15 + 1);
    if (!v12)
    {
      unint64_t v28 = v11;
      unint64_t v29 = 0;
      goto LABEL_31;
    }
    int v16 = 0;
    uint64_t v17 = *v15;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v28 = 0;
    unint64_t v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v30 = a1[3];
    if (v30)
    {
      if (v11)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v12, v11);
        unint64_t v29 = *a1;
        unint64_t v28 = a1[1];
      }
      else
      {
        unint64_t v28 = 0;
        unint64_t v29 = 0;
      }
    }
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v31 = a1[3];
    if (v31 && v28) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29);
    }
    uint64_t v17 = 0;
    int v16 = 1;
LABEL_8:
    uint64_t result = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v19 = a1[1];
    unint64_t v20 = *a1;
    unint64_t v21 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v19 < v21 || v19 - v21 <= 7)
    {
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v34 = a1[3];
      if (v34)
      {
        uint64_t v40 = result;
        if (v19)
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(a1[3]);
          unint64_t v33 = *a1;
          unint64_t v32 = a1[1];
        }
        else
        {
          unint64_t v32 = 0;
          unint64_t v33 = 0;
        }
        uint64_t result = v40;
      }
    }
    else
    {
      uint64_t v22 = (uint64_t *)(v20 + v21);
      a1[2] = (unint64_t)(v22 + 1);
      if (v20)
      {
        int v23 = 0;
        uint64_t v24 = *v22;
        goto LABEL_12;
      }
      unint64_t v32 = v19;
      unint64_t v33 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    unint64_t v35 = a1[3];
    if (v35)
    {
      uint64_t v41 = result;
      if (v32)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
        uint64_t v24 = 0;
        unint64_t v20 = *a1;
        unint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v20 = 0;
        uint64_t v24 = 0;
      }
      int v23 = 1;
      uint64_t result = v41;
    }
    else
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v24 = 0;
      int v23 = 1;
    }
LABEL_12:
    unint64_t v25 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v20;
    if (v19 < v25 || v19 - v25 <= 7) {
      break;
    }
    uint64_t v26 = (unint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v26 + 1);
    if (!v20)
    {
      unint64_t v36 = v19;
      unint64_t v37 = 0;
      goto LABEL_37;
    }
    unint64_t v11 = 0;
    unint64_t v12 = *v26;
LABEL_16:
    if (v5 && v7 && v10 && v53 && v51 && v49 && v47 && !v16 && (result & 0xFF00000000) != 0 && !v23 && !v11)
    {
      *(void *)a2 = v45;
      *(void *)(a2 + 8) = v44;
      *(void *)(a2 + 16) = v8;
      *(_OWORD *)(a2 + 24) = v52;
      *(_OWORD *)(a2 + 40) = v50;
      *(_OWORD *)(a2 + 56) = v48;
      *(_OWORD *)(a2 + 72) = v46;
      *(void *)(a2 + 88) = v17;
      *(_DWORD *)(a2 + 96) = result;
      char v27 = 1;
      *(void *)(a2 + 104) = v24;
      *(void *)(a2 + 112) = v12;
      goto LABEL_28;
    }
    __break(1u);
  }
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  *a1 = 0;
  a1[1] = 0;
  unint64_t v38 = a1[3];
  if (v38)
  {
    uint64_t v43 = result;
    if (v19)
    {
      (*(void (**)(unint64_t))(*(void *)v38 + 16))(v38);
      unint64_t v37 = *a1;
      unint64_t v36 = a1[1];
    }
    else
    {
      unint64_t v36 = 0;
      unint64_t v37 = 0;
    }
    uint64_t result = v43;
  }
LABEL_37:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v39 = a1[3];
  if (v39)
  {
    if (v36)
    {
      uint64_t v42 = result;
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
      uint64_t result = v42;
      if (*a1)
      {
        unint64_t v12 = 0;
        unint64_t v11 = 1;
        goto LABEL_16;
      }
    }
  }
  char v27 = 0;
  *(unsigned char *)a2 = 0;
LABEL_28:
  *(unsigned char *)(a2 + 120) = v27;
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, a2[1]);
  char v4 = a2[2];

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::encode(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 17));
  char v5 = *(unsigned char *)(a2 + 19);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 20));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 21));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 22));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 23));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 25));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 26));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 27));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 28));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 29));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 30));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 31));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 32));
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 40));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 56));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 57));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 58));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 59));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 60));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 61));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 112));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 152));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 160));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 168));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 176));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>,void>::encode<IPC::Encoder,WebCore::ShareableBitmap>(a1, (WebCore::ShareableBitmap **)(a2 + 192));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 200));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 208));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 216));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 220));
  IPC::ArgumentCoder<std::optional<WebCore::Cursor>,void>::encode<IPC::Encoder,std::optional<WebCore::Cursor> const&>(a1, a2 + 240);
  IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, a2 + 280);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 392));
  IPC::encodeObjectDirectly<NSArray>(a1, *(NSArray **)(a2 + 400));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 408));
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 432);
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 528);
  return IPC::VectorArgumentCoder<false,WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 624);
}

void IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::decode(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v404 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::InteractionInformationRequest>(a1, v355);
  unint64_t v3 = v2[1];
  unint64_t v4 = *v2;
  unint64_t v5 = v2[2] - *v2;
  if (v3 <= v5)
  {
    unint64_t v119 = 0;
    unint64_t v120 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v121 = v2[3];
    if (v121)
    {
      if (v3)
      {
        (*(void (**)(unint64_t))(*(void *)v121 + 16))(v121);
        unint64_t v120 = *v2;
        unint64_t v119 = v2[1];
      }
      else
      {
        unint64_t v119 = 0;
        unint64_t v120 = 0;
      }
    }
    goto LABEL_137;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  v2[2] = (unint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v119 = v3;
    unint64_t v120 = 0;
LABEL_137:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v122 = v2[3];
    if (v122 && v119)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v122 + 16))(v122, v120, v119);
      unsigned int v7 = 0;
      unint64_t v4 = *v2;
      unint64_t v3 = v2[1];
    }
    else
    {
      unint64_t v3 = 0;
      unint64_t v4 = 0;
      unsigned int v7 = 0;
    }
    goto LABEL_139;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    int v309 = 0;
    char v8 = 1;
    goto LABEL_5;
  }
LABEL_139:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v123 = v2[3];
  if (v123 && v3) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v123 + 16))(v123, v4);
  }
  char v8 = 0;
  int v309 = 1;
LABEL_5:
  if (!v7) {
    char v8 = 0;
  }
  char v308 = v8;
  int v310 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v2);
  unint64_t v9 = v2[1];
  unint64_t v10 = *v2;
  unint64_t v11 = v2[2] - *v2;
  if (v9 <= v11)
  {
    unint64_t v124 = 0;
    unint64_t v125 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v126 = v2[3];
    if (v126)
    {
      if (v9)
      {
        (*(void (**)(unint64_t))(*(void *)v126 + 16))(v126);
        unint64_t v125 = *v2;
        unint64_t v124 = v2[1];
      }
      else
      {
        unint64_t v124 = 0;
        unint64_t v125 = 0;
      }
    }
    goto LABEL_142;
  }
  unint64_t v12 = (unsigned __int8 *)(v10 + v11);
  v2[2] = (unint64_t)(v12 + 1);
  if (!v10)
  {
    unint64_t v124 = v9;
    unint64_t v125 = 0;
LABEL_142:
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v127 = v2[3];
    if (v127)
    {
      if (v124)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v127 + 16))(v127, v125, v124);
        unint64_t v10 = *v2;
        unint64_t v9 = v2[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v10 = 0;
      }
    }
    goto LABEL_143;
  }
  unsigned int v13 = *v12;
  if (v13 < 5)
  {
    unsigned int v307 = v13 | 0x100;
    goto LABEL_11;
  }
LABEL_143:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v128 = v2[3];
  if (!v128)
  {
    unint64_t v10 = 0;
    unsigned int v307 = 0;
    unint64_t v9 = 0;
    goto LABEL_145;
  }
  if (!v9)
  {
    unint64_t v10 = 0;
    unsigned int v307 = 0;
LABEL_145:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v129 = v2[3];
    if (v129)
    {
      if (v9)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v129 + 16))(v129, v10);
        unint64_t v130 = *v2;
        unint64_t v9 = v2[1];
      }
      else
      {
        unint64_t v130 = 0;
      }
    }
    else
    {
      unint64_t v130 = 0;
      unint64_t v9 = 0;
    }
LABEL_147:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v131 = v2[3];
    if (v131)
    {
      if (v9)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v131 + 16))(v131, v130);
        unsigned int v16 = 0;
        unint64_t v10 = *v2;
        unint64_t v9 = v2[1];
        goto LABEL_150;
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v10 = 0;
    unsigned int v16 = 0;
    goto LABEL_150;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v128 + 16))(v128, v10);
  unsigned int v307 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
LABEL_11:
  if (v9 <= v2[2] - v10) {
    goto LABEL_145;
  }
  long long v14 = (unsigned __int8 *)v2[2];
  uint64_t v15 = v14 + 1;
  v2[2] = (unint64_t)(v14 + 1);
  if (!v10)
  {
    unint64_t v130 = 0;
    goto LABEL_147;
  }
  unsigned int v16 = *v14;
  if (v16 < 2)
  {
    int v306 = 0;
    char v17 = 1;
    goto LABEL_15;
  }
LABEL_150:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v132 = v2[3];
  if (!v132 || !v9)
  {
    unint64_t v133 = 0;
    unint64_t v10 = 0;
    char v305 = 0;
    int v306 = 1;
LABEL_152:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v134 = v2[3];
    if (v134 && v133)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v134 + 16))(v134, v10, v133);
      unsigned int v21 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v21 = 0;
    }
    goto LABEL_154;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v132 + 16))(v132, v10);
  char v17 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v306 = 1;
  uint64_t v15 = (unsigned __int8 *)v2[2];
LABEL_15:
  if (!v16) {
    char v17 = 0;
  }
  char v305 = v17;
  long long v18 = &v15[-v10];
  if (v9 <= (unint64_t)v18)
  {
    unint64_t v133 = 0;
    unint64_t v249 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v249 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v249 + 16))(v249);
      unint64_t v10 = *v2;
      unint64_t v133 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_152;
  }
  unint64_t v19 = &v18[v10];
  uint64_t v20 = (uint64_t)&v18[v10 + 1];
  v2[2] = v20;
  if (!v10)
  {
    unint64_t v133 = v9;
    goto LABEL_152;
  }
  unsigned int v21 = *v19;
  if (v21 < 2)
  {
    int v304 = 0;
    char v22 = 1;
    goto LABEL_21;
  }
LABEL_154:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v135 = v2[3];
  if (!v135 || !v9)
  {
    unint64_t v136 = 0;
    unint64_t v10 = 0;
    char v303 = 0;
    int v304 = 1;
LABEL_156:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v137 = v2[3];
    if (v137 && v136)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v137 + 16))(v137, v10, v136);
      unsigned int v26 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v26 = 0;
    }
    goto LABEL_158;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v135 + 16))(v135, v10);
  char v22 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v304 = 1;
  uint64_t v20 = v2[2];
LABEL_21:
  if (!v21) {
    char v22 = 0;
  }
  char v303 = v22;
  unint64_t v23 = v20 - v10;
  if (v9 <= v23)
  {
    unint64_t v136 = 0;
    unint64_t v250 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v250 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v250 + 16))(v250);
      unint64_t v10 = *v2;
      unint64_t v136 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_156;
  }
  uint64_t v24 = (unsigned __int8 *)(v10 + v23);
  uint64_t v25 = v10 + v23 + 1;
  v2[2] = v25;
  if (!v10)
  {
    unint64_t v136 = v9;
    goto LABEL_156;
  }
  unsigned int v26 = *v24;
  if (v26 < 2)
  {
    int v302 = 0;
    char v27 = 1;
    goto LABEL_27;
  }
LABEL_158:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v138 = v2[3];
  if (!v138 || !v9)
  {
    unint64_t v139 = 0;
    unint64_t v10 = 0;
    char v301 = 0;
    int v302 = 1;
LABEL_160:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v140 = v2[3];
    if (v140 && v139)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v140 + 16))(v140, v10, v139);
      unsigned int v31 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v31 = 0;
    }
    goto LABEL_162;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v138 + 16))(v138, v10);
  char v27 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v302 = 1;
  uint64_t v25 = v2[2];
LABEL_27:
  if (!v26) {
    char v27 = 0;
  }
  char v301 = v27;
  unint64_t v28 = v25 - v10;
  if (v9 <= v28)
  {
    unint64_t v139 = 0;
    unint64_t v251 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v251 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v251 + 16))(v251);
      unint64_t v10 = *v2;
      unint64_t v139 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_160;
  }
  unint64_t v29 = (unsigned __int8 *)(v10 + v28);
  uint64_t v30 = v10 + v28 + 1;
  v2[2] = v30;
  if (!v10)
  {
    unint64_t v139 = v9;
    goto LABEL_160;
  }
  unsigned int v31 = *v29;
  if (v31 < 2)
  {
    int v300 = 0;
    char v32 = 1;
    goto LABEL_33;
  }
LABEL_162:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v141 = v2[3];
  if (!v141 || !v9)
  {
    unint64_t v142 = 0;
    unint64_t v10 = 0;
    char v299 = 0;
    int v300 = 1;
LABEL_164:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v143 = v2[3];
    if (v143 && v142)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v143 + 16))(v143, v10, v142);
      unsigned int v36 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v36 = 0;
    }
    goto LABEL_166;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v141 + 16))(v141, v10);
  char v32 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v300 = 1;
  uint64_t v30 = v2[2];
LABEL_33:
  if (!v31) {
    char v32 = 0;
  }
  char v299 = v32;
  unint64_t v33 = v30 - v10;
  if (v9 <= v33)
  {
    unint64_t v142 = 0;
    unint64_t v252 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v252 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v252 + 16))(v252);
      unint64_t v10 = *v2;
      unint64_t v142 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_164;
  }
  unint64_t v34 = (unsigned __int8 *)(v10 + v33);
  uint64_t v35 = v10 + v33 + 1;
  v2[2] = v35;
  if (!v10)
  {
    unint64_t v142 = v9;
    goto LABEL_164;
  }
  unsigned int v36 = *v34;
  if (v36 < 2)
  {
    int v298 = 0;
    char v37 = 1;
    goto LABEL_39;
  }
LABEL_166:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v144 = v2[3];
  if (!v144 || !v9)
  {
    unint64_t v145 = 0;
    unint64_t v10 = 0;
    char v297 = 0;
    int v298 = 1;
LABEL_168:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v146 = v2[3];
    if (v146 && v145)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v146 + 16))(v146, v10, v145);
      unsigned int v41 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v41 = 0;
    }
    goto LABEL_170;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v144 + 16))(v144, v10);
  char v37 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v298 = 1;
  uint64_t v35 = v2[2];
LABEL_39:
  if (!v36) {
    char v37 = 0;
  }
  char v297 = v37;
  unint64_t v38 = v35 - v10;
  if (v9 <= v38)
  {
    unint64_t v145 = 0;
    unint64_t v253 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v253 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v253 + 16))(v253);
      unint64_t v10 = *v2;
      unint64_t v145 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_168;
  }
  unint64_t v39 = (unsigned __int8 *)(v10 + v38);
  uint64_t v40 = v10 + v38 + 1;
  v2[2] = v40;
  if (!v10)
  {
    unint64_t v145 = v9;
    goto LABEL_168;
  }
  unsigned int v41 = *v39;
  if (v41 < 2)
  {
    int v296 = 0;
    char v42 = 1;
    goto LABEL_45;
  }
LABEL_170:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v147 = v2[3];
  if (!v147 || !v9)
  {
    unint64_t v148 = 0;
    unint64_t v10 = 0;
    char v295 = 0;
    int v296 = 1;
LABEL_172:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v149 = v2[3];
    if (v149 && v148)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v149 + 16))(v149, v10, v148);
      unsigned int v46 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v46 = 0;
    }
    goto LABEL_174;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v147 + 16))(v147, v10);
  char v42 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v296 = 1;
  uint64_t v40 = v2[2];
LABEL_45:
  if (!v41) {
    char v42 = 0;
  }
  char v295 = v42;
  unint64_t v43 = v40 - v10;
  if (v9 <= v43)
  {
    unint64_t v148 = 0;
    unint64_t v254 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v254 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v254 + 16))(v254);
      unint64_t v10 = *v2;
      unint64_t v148 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_172;
  }
  uint64_t v44 = (unsigned __int8 *)(v10 + v43);
  uint64_t v45 = v10 + v43 + 1;
  v2[2] = v45;
  if (!v10)
  {
    unint64_t v148 = v9;
    goto LABEL_172;
  }
  unsigned int v46 = *v44;
  if (v46 < 2)
  {
    int v294 = 0;
    char v47 = 1;
    goto LABEL_51;
  }
LABEL_174:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v150 = v2[3];
  if (!v150 || !v9)
  {
    unint64_t v151 = 0;
    unint64_t v10 = 0;
    char v293 = 0;
    int v294 = 1;
LABEL_176:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v152 = v2[3];
    if (v152 && v151)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v152 + 16))(v152, v10, v151);
      unsigned int v51 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v51 = 0;
    }
    goto LABEL_178;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v150 + 16))(v150, v10);
  char v47 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v294 = 1;
  uint64_t v45 = v2[2];
LABEL_51:
  if (!v46) {
    char v47 = 0;
  }
  char v293 = v47;
  unint64_t v48 = v45 - v10;
  if (v9 <= v48)
  {
    unint64_t v151 = 0;
    unint64_t v255 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v255 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v255 + 16))(v255);
      unint64_t v10 = *v2;
      unint64_t v151 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_176;
  }
  char v49 = (unsigned __int8 *)(v10 + v48);
  uint64_t v50 = v10 + v48 + 1;
  v2[2] = v50;
  if (!v10)
  {
    unint64_t v151 = v9;
    goto LABEL_176;
  }
  unsigned int v51 = *v49;
  if (v51 < 2)
  {
    int v292 = 0;
    char v52 = 1;
    goto LABEL_57;
  }
LABEL_178:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v153 = v2[3];
  if (!v153 || !v9)
  {
    unint64_t v154 = 0;
    unint64_t v10 = 0;
    char v291 = 0;
    int v292 = 1;
LABEL_180:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v155 = v2[3];
    if (v155 && v154)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v155 + 16))(v155, v10, v154);
      unsigned int v56 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v56 = 0;
    }
    goto LABEL_182;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v153 + 16))(v153, v10);
  char v52 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v292 = 1;
  uint64_t v50 = v2[2];
LABEL_57:
  if (!v51) {
    char v52 = 0;
  }
  char v291 = v52;
  unint64_t v53 = v50 - v10;
  if (v9 <= v53)
  {
    unint64_t v154 = 0;
    unint64_t v256 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v256 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v256 + 16))(v256);
      unint64_t v10 = *v2;
      unint64_t v154 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_180;
  }
  int v54 = (unsigned __int8 *)(v10 + v53);
  uint64_t v55 = v10 + v53 + 1;
  v2[2] = v55;
  if (!v10)
  {
    unint64_t v154 = v9;
    goto LABEL_180;
  }
  unsigned int v56 = *v54;
  if (v56 < 2)
  {
    int v290 = 0;
    char v57 = 1;
    goto LABEL_63;
  }
LABEL_182:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v156 = v2[3];
  if (!v156 || !v9)
  {
    unint64_t v157 = 0;
    unint64_t v10 = 0;
    char v289 = 0;
    int v290 = 1;
LABEL_184:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v158 = v2[3];
    if (v158 && v157)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v158 + 16))(v158, v10, v157);
      unsigned int v61 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v61 = 0;
    }
    goto LABEL_186;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v156 + 16))(v156, v10);
  char v57 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v290 = 1;
  uint64_t v55 = v2[2];
LABEL_63:
  if (!v56) {
    char v57 = 0;
  }
  char v289 = v57;
  unint64_t v58 = v55 - v10;
  if (v9 <= v58)
  {
    unint64_t v157 = 0;
    unint64_t v257 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v257 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v257 + 16))(v257);
      unint64_t v10 = *v2;
      unint64_t v157 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_184;
  }
  char v59 = (unsigned __int8 *)(v10 + v58);
  uint64_t v60 = v10 + v58 + 1;
  v2[2] = v60;
  if (!v10)
  {
    unint64_t v157 = v9;
    goto LABEL_184;
  }
  unsigned int v61 = *v59;
  if (v61 < 2)
  {
    int v288 = 0;
    char v62 = 1;
    goto LABEL_69;
  }
LABEL_186:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v159 = v2[3];
  if (!v159 || !v9)
  {
    unint64_t v160 = 0;
    unint64_t v10 = 0;
    char v287 = 0;
    int v288 = 1;
LABEL_188:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v161 = v2[3];
    if (v161 && v160)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v161 + 16))(v161, v10, v160);
      unsigned int v66 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v66 = 0;
    }
    goto LABEL_190;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v159 + 16))(v159, v10);
  char v62 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v288 = 1;
  uint64_t v60 = v2[2];
LABEL_69:
  if (!v61) {
    char v62 = 0;
  }
  char v287 = v62;
  unint64_t v63 = v60 - v10;
  if (v9 <= v63)
  {
    unint64_t v160 = 0;
    unint64_t v258 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v258 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v258 + 16))(v258);
      unint64_t v10 = *v2;
      unint64_t v160 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_188;
  }
  uint64_t v64 = (unsigned __int8 *)(v10 + v63);
  uint64_t v65 = v10 + v63 + 1;
  v2[2] = v65;
  if (!v10)
  {
    unint64_t v160 = v9;
    goto LABEL_188;
  }
  unsigned int v66 = *v64;
  if (v66 < 2)
  {
    int v286 = 0;
    char v67 = 1;
    goto LABEL_75;
  }
LABEL_190:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v162 = v2[3];
  if (!v162 || !v9)
  {
    unint64_t v163 = 0;
    unint64_t v10 = 0;
    char v285 = 0;
    int v286 = 1;
LABEL_192:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v164 = v2[3];
    if (v164 && v163)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v164 + 16))(v164, v10, v163);
      unsigned int v71 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v71 = 0;
    }
    goto LABEL_194;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v162 + 16))(v162, v10);
  char v67 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v286 = 1;
  uint64_t v65 = v2[2];
LABEL_75:
  if (!v66) {
    char v67 = 0;
  }
  char v285 = v67;
  unint64_t v68 = v65 - v10;
  if (v9 <= v68)
  {
    unint64_t v163 = 0;
    unint64_t v259 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v259 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v259 + 16))(v259);
      unint64_t v10 = *v2;
      unint64_t v163 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_192;
  }
  uint64_t v69 = (unsigned __int8 *)(v10 + v68);
  uint64_t v70 = v10 + v68 + 1;
  v2[2] = v70;
  if (!v10)
  {
    unint64_t v163 = v9;
    goto LABEL_192;
  }
  unsigned int v71 = *v69;
  if (v71 < 2)
  {
    int v284 = 0;
    char v72 = 1;
    goto LABEL_81;
  }
LABEL_194:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v165 = v2[3];
  if (!v165 || !v9)
  {
    unint64_t v166 = 0;
    unint64_t v10 = 0;
    char v283 = 0;
    int v284 = 1;
LABEL_196:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v167 = v2[3];
    if (v167 && v166)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v167 + 16))(v167, v10, v166);
      unsigned int v75 = 0;
      unint64_t v10 = *v2;
      unint64_t v9 = v2[1];
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v75 = 0;
    }
    goto LABEL_198;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v165 + 16))(v165, v10);
  char v72 = 0;
  unint64_t v10 = *v2;
  unint64_t v9 = v2[1];
  int v284 = 1;
  uint64_t v70 = v2[2];
LABEL_81:
  if (!v71) {
    char v72 = 0;
  }
  char v283 = v72;
  unint64_t v73 = v70 - v10;
  if (v9 <= v73)
  {
    unint64_t v166 = 0;
    unint64_t v260 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v260 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v260 + 16))(v260);
      unint64_t v10 = *v2;
      unint64_t v166 = v2[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_196;
  }
  char v74 = (unsigned __int8 *)(v10 + v73);
  v2[2] = (unint64_t)(v74 + 1);
  if (!v10)
  {
    unint64_t v166 = v9;
    goto LABEL_196;
  }
  unsigned int v75 = *v74;
  if (v75 < 2)
  {
    int v282 = 0;
    char v76 = 1;
    goto LABEL_87;
  }
LABEL_198:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v168 = v2[3];
  if (v168 && v9) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v168 + 16))(v168, v10);
  }
  char v76 = 0;
  int v282 = 1;
LABEL_87:
  if (!v75) {
    char v76 = 0;
  }
  char v281 = v76;
  IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(&v353, (IPC::Decoder *)v2);
  unint64_t v77 = v2[1];
  unint64_t v78 = *v2;
  unint64_t v79 = v2[2] - *v2;
  if (v77 <= v79)
  {
    unint64_t v169 = 0;
    unint64_t v170 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v171 = v2[3];
    if (v171)
    {
      if (v77)
      {
        (*(void (**)(unint64_t))(*(void *)v171 + 16))(v171);
        unint64_t v170 = *v2;
        unint64_t v169 = v2[1];
      }
      else
      {
        unint64_t v169 = 0;
        unint64_t v170 = 0;
      }
    }
    goto LABEL_201;
  }
  char v80 = (unsigned __int8 *)(v78 + v79);
  uint64_t v81 = v78 + v79 + 1;
  v2[2] = v81;
  if (!v78)
  {
    unint64_t v169 = v77;
    unint64_t v170 = 0;
LABEL_201:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v172 = v2[3];
    if (v172 && v169)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v172 + 16))(v172, v170, v169);
      unsigned int v82 = 0;
      unint64_t v78 = *v2;
      unint64_t v77 = v2[1];
    }
    else
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      unsigned int v82 = 0;
    }
    goto LABEL_203;
  }
  unsigned int v82 = *v80;
  if (v82 < 2)
  {
    int v280 = 0;
    char v83 = 1;
    goto LABEL_93;
  }
LABEL_203:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v173 = v2[3];
  if (!v173 || !v77)
  {
    unint64_t v174 = 0;
    unint64_t v78 = 0;
    char v279 = 0;
    int v280 = 1;
LABEL_205:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v175 = v2[3];
    if (v175 && v174)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v175 + 16))(v175, v78, v174);
      unsigned int v87 = 0;
      unint64_t v78 = *v2;
      unint64_t v77 = v2[1];
    }
    else
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      unsigned int v87 = 0;
    }
    goto LABEL_207;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v173 + 16))(v173, v78);
  char v83 = 0;
  unint64_t v78 = *v2;
  unint64_t v77 = v2[1];
  int v280 = 1;
  uint64_t v81 = v2[2];
LABEL_93:
  if (!v82) {
    char v83 = 0;
  }
  char v279 = v83;
  unint64_t v84 = v81 - v78;
  if (v77 <= v84)
  {
    unint64_t v174 = 0;
    unint64_t v261 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v261 && v77)
    {
      (*(void (**)(unint64_t))(*(void *)v261 + 16))(v261);
      unint64_t v78 = *v2;
      unint64_t v174 = v2[1];
    }
    else
    {
      unint64_t v78 = 0;
    }
    goto LABEL_205;
  }
  uint64_t v85 = (unsigned __int8 *)(v78 + v84);
  uint64_t v86 = v78 + v84 + 1;
  v2[2] = v86;
  if (!v78)
  {
    unint64_t v174 = v77;
    goto LABEL_205;
  }
  unsigned int v87 = *v85;
  if (v87 < 2)
  {
    int v278 = 0;
    char v88 = 1;
    goto LABEL_99;
  }
LABEL_207:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v176 = v2[3];
  if (!v176 || !v77)
  {
    unint64_t v177 = 0;
    unint64_t v78 = 0;
    char v277 = 0;
    int v278 = 1;
LABEL_209:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v178 = v2[3];
    if (v178 && v177)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v178 + 16))(v178, v78, v177);
      unsigned int v92 = 0;
      unint64_t v78 = *v2;
      unint64_t v77 = v2[1];
    }
    else
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      unsigned int v92 = 0;
    }
    goto LABEL_211;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v176 + 16))(v176, v78);
  char v88 = 0;
  unint64_t v78 = *v2;
  unint64_t v77 = v2[1];
  int v278 = 1;
  uint64_t v86 = v2[2];
LABEL_99:
  if (!v87) {
    char v88 = 0;
  }
  char v277 = v88;
  unint64_t v89 = v86 - v78;
  if (v77 <= v89)
  {
    unint64_t v177 = 0;
    unint64_t v262 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v262 && v77)
    {
      (*(void (**)(unint64_t))(*(void *)v262 + 16))(v262);
      unint64_t v78 = *v2;
      unint64_t v177 = v2[1];
    }
    else
    {
      unint64_t v78 = 0;
    }
    goto LABEL_209;
  }
  unint64_t v90 = (unsigned __int8 *)(v78 + v89);
  uint64_t v91 = v78 + v89 + 1;
  v2[2] = v91;
  if (!v78)
  {
    unint64_t v177 = v77;
    goto LABEL_209;
  }
  unsigned int v92 = *v90;
  if (v92 < 2)
  {
    int v276 = 0;
    char v93 = 1;
    goto LABEL_105;
  }
LABEL_211:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v179 = v2[3];
  if (!v179 || !v77)
  {
    unint64_t v180 = 0;
    unint64_t v78 = 0;
    char v275 = 0;
    int v276 = 1;
LABEL_213:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v181 = v2[3];
    if (v181 && v180)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v181 + 16))(v181, v78, v180);
      unsigned int v97 = 0;
      unint64_t v78 = *v2;
      unint64_t v77 = v2[1];
    }
    else
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      unsigned int v97 = 0;
    }
    goto LABEL_215;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v179 + 16))(v179, v78);
  char v93 = 0;
  unint64_t v78 = *v2;
  unint64_t v77 = v2[1];
  int v276 = 1;
  uint64_t v91 = v2[2];
LABEL_105:
  if (!v92) {
    char v93 = 0;
  }
  char v275 = v93;
  unint64_t v94 = v91 - v78;
  if (v77 <= v94)
  {
    unint64_t v180 = 0;
    unint64_t v263 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v263 && v77)
    {
      (*(void (**)(unint64_t))(*(void *)v263 + 16))(v263);
      unint64_t v78 = *v2;
      unint64_t v180 = v2[1];
    }
    else
    {
      unint64_t v78 = 0;
    }
    goto LABEL_213;
  }
  unint64_t v95 = (unsigned __int8 *)(v78 + v94);
  uint64_t v96 = v78 + v94 + 1;
  v2[2] = v96;
  if (!v78)
  {
    unint64_t v180 = v77;
    goto LABEL_213;
  }
  unsigned int v97 = *v95;
  if (v97 < 2)
  {
    LODWORD(v98) = 0;
    char v99 = 1;
    goto LABEL_111;
  }
LABEL_215:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v182 = v2[3];
  if (!v182 || !v77)
  {
    LOBYTE(v100) = 0;
    unint64_t v183 = 0;
    unint64_t v78 = 0;
    LODWORD(v98) = 1;
LABEL_217:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v184 = v2[3];
    if (v184 && v183)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v184 + 16))(v184, v78, v183);
      unsigned int v104 = 0;
      unint64_t v78 = *v2;
      unint64_t v77 = v2[1];
    }
    else
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      unsigned int v104 = 0;
    }
    goto LABEL_219;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v182 + 16))(v182, v78);
  char v99 = 0;
  unint64_t v78 = *v2;
  unint64_t v77 = v2[1];
  LODWORD(v98) = 1;
  uint64_t v96 = v2[2];
LABEL_111:
  if (v97) {
    LOBYTE(v100) = v99;
  }
  else {
    LOBYTE(v100) = 0;
  }
  unint64_t v101 = v96 - v78;
  if (v77 <= v101)
  {
    unint64_t v183 = 0;
    unint64_t v264 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v264 && v77)
    {
      (*(void (**)(unint64_t))(*(void *)v264 + 16))(v264);
      unint64_t v78 = *v2;
      unint64_t v183 = v2[1];
    }
    else
    {
      unint64_t v78 = 0;
    }
    goto LABEL_217;
  }
  unint64_t v102 = (unsigned __int8 *)(v78 + v101);
  uint64_t v103 = v78 + v101 + 1;
  v2[2] = v103;
  if (!v78)
  {
    unint64_t v183 = v77;
    goto LABEL_217;
  }
  unsigned int v104 = *v102;
  if (v104 < 2)
  {
    LODWORD(v105) = 0;
    char v106 = 1;
    goto LABEL_118;
  }
LABEL_219:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v185 = v2[3];
  if (!v185 || !v77)
  {
    LOBYTE(v107) = 0;
    unint64_t v186 = 0;
    unint64_t v78 = 0;
    LODWORD(v105) = 1;
LABEL_221:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v187 = v2[3];
    if (v187 && v186)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v187 + 16))(v187, v78, v186);
      unsigned int v110 = 0;
      unint64_t v78 = *v2;
      unint64_t v77 = v2[1];
    }
    else
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      unsigned int v110 = 0;
    }
    goto LABEL_223;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v185 + 16))(v185, v78);
  char v106 = 0;
  unint64_t v78 = *v2;
  unint64_t v77 = v2[1];
  LODWORD(v105) = 1;
  uint64_t v103 = v2[2];
LABEL_118:
  if (v104) {
    LOBYTE(v107) = v106;
  }
  else {
    LOBYTE(v107) = 0;
  }
  unint64_t v108 = v103 - v78;
  if (v77 <= v108)
  {
    unint64_t v186 = 0;
    unint64_t v265 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v265 && v77)
    {
      (*(void (**)(unint64_t))(*(void *)v265 + 16))(v265);
      unint64_t v78 = *v2;
      unint64_t v186 = v2[1];
    }
    else
    {
      unint64_t v78 = 0;
    }
    goto LABEL_221;
  }
  unsigned int v109 = (unsigned __int8 *)(v78 + v108);
  v2[2] = (unint64_t)(v109 + 1);
  if (!v78)
  {
    unint64_t v186 = v77;
    goto LABEL_221;
  }
  unsigned int v110 = *v109;
  if (v110 < 2)
  {
    int v273 = 0;
    int v111 = 1;
    goto LABEL_125;
  }
LABEL_223:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v188 = v2[3];
  if (v188 && v77) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v188 + 16))(v188, v78);
  }
  int v111 = 0;
  int v273 = 1;
LABEL_125:
  if (v110) {
    LODWORD(v112) = v111;
  }
  else {
    LODWORD(v112) = 0;
  }
  unint64_t v269 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(v2);
  uint64_t v271 = v113;
  if (!v113)
  {
    unint64_t v189 = *v2;
    unint64_t v190 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v191 = v2[3];
    if (v191)
    {
      if (v190) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v191 + 16))(v191, v189);
      }
    }
  }
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v2, &v349);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v2, &v345);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v343);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v341);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v339);
  IPC::Decoder::decode<WebCore::IntRect>(v2, (uint64_t)&v337);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>((WTF::MachSendRight *)&v335, (uint64_t *)v2);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v333);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v331);
  uint64_t v268 = IPC::Decoder::decode<float>(v2);
  IPC::Decoder::decode<WebCore::FloatRect>(v2, (uint64_t)&v329);
  unint64_t v114 = v2[1];
  unint64_t v115 = *v2;
  unint64_t v116 = v2[2] - *v2;
  char v270 = (char)v112;
  if (v114 <= v116)
  {
    unint64_t v192 = 0;
    unint64_t v193 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v194 = v2[3];
    if (v194)
    {
      if (v114)
      {
        (*(void (**)(unint64_t))(*(void *)v194 + 16))(v194);
        unint64_t v193 = *v2;
        unint64_t v192 = v2[1];
      }
      else
      {
        unint64_t v192 = 0;
        unint64_t v193 = 0;
      }
    }
    goto LABEL_229;
  }
  uint64_t v117 = (unsigned __int8 *)(v115 + v116);
  v2[2] = (unint64_t)(v117 + 1);
  if (!v115)
  {
    unint64_t v192 = v114;
    unint64_t v193 = 0;
LABEL_229:
    unint64_t v114 = 0;
    unint64_t v115 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v195 = v2[3];
    if (v195)
    {
      if (v192)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v195 + 16))(v195, v193, v192);
        unint64_t v115 = *v2;
        unint64_t v114 = v2[1];
      }
      else
      {
        unint64_t v114 = 0;
        unint64_t v115 = 0;
      }
    }
    goto LABEL_230;
  }
  unsigned int v118 = *v117;
  if (v118 >= 2)
  {
LABEL_230:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v196 = v2[3];
    if (v196 && v114) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v196 + 16))(v196, v115);
    }
    goto LABEL_231;
  }
  if (v118)
  {
    IPC::Decoder::decode<WebCore::Cursor>((uint64_t *)v2, v359);
    if (v361[0])
    {
      LODWORD(v112) = 0;
      int v313 = 0;
      char v266 = (char)v359[0];
      unint64_t v267 = (unint64_t *)v359[1];
      long long v328 = v360;
      goto LABEL_233;
    }
LABEL_231:
    unint64_t v197 = (void *)*v2;
    unint64_t v198 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v199 = v2[3];
    if (v199) {
      goto LABEL_305;
    }
    goto LABEL_232;
  }
  char v266 = 0;
  int v313 = 0;
  LODWORD(v112) = 1;
  while (1)
  {
LABEL_233:
    int v312 = (int)v112;
    IPC::Decoder::decode<WebCore::TextIndicatorData>(v2, v320);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v318);
    unint64_t v200 = (const void *)objc_opt_class();
    v359[0] = v200;
    if (v200) {
      unint64_t v200 = CFRetain(v200);
    }
    unint64_t v201 = (const void *)((uint64_t (*)(const void *))*MEMORY[0x1E4FB62E8])(v200);
    v359[1] = v201;
    if (v201) {
      CFRetain(v201);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)v401, v359, 2);
    char v272 = v107;
    char v112 = (long long *)v359;
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)v2 + 7, (void **)v401);
    IPC::decodeRequiringAllowedClasses<NSArray,NSArray*>((uint64_t)&cf, (uint64_t *)v2);
    int v274 = (int)v105;
    LOBYTE(v107) = v100;
    int v100 = v98;
    if (*(void *)&v401[0]) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(*(const void ***)&v401[0], v202);
    }
    uint64_t v98 = 8;
    char v105 = (long long *)v359;
    do
    {
      unint64_t v203 = *(CFTypeRef *)((char *)v359 + v98);
      *(CFTypeRef *)((char *)v359 + v98) = 0;
      if (v203) {
        CFRelease(v203);
      }
      v98 -= 8;
    }
    while (v98 != -8);
    IPC::Decoder::decode<WebCore::IntRect>(v2, (uint64_t)&v314);
    IPC::Decoder::decode<std::optional<WebCore::ElementContext>>(v2, (uint64_t)v401);
    IPC::Decoder::decode<std::optional<WebCore::ElementContext>>(v2, (uint64_t)v398);
    unint64_t v199 = IPC::Decoder::decode<unsigned long long>(v2);
    if (!(_BYTE)v197) {
      goto LABEL_316;
    }
    unint64_t v204 = v199;
    char v357 = 0;
    uint64_t v358 = 0;
    if (v199 >= 0x2AAA)
    {
      LODWORD(v98) = 96;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ElementAnimationContext>((uint64_t)v359, v2);
        if (!(_BYTE)v364) {
          goto LABEL_314;
        }
        int v226 = HIDWORD(v358);
        if (HIDWORD(v358) == v358)
        {
          unint64_t v227 = (long long *)WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v357, HIDWORD(v358) + 1, (unint64_t)v359);
          int v226 = HIDWORD(v358);
          unint64_t v228 = (_OWORD *)((char *)v357 + 96 * HIDWORD(v358));
          long long v229 = *v227;
          v228[1] = v227[1];
          long long v230 = v227[5];
          long long v232 = v227[2];
          long long v231 = v227[3];
          v228[4] = v227[4];
        }
        else
        {
          unint64_t v228 = (_OWORD *)((char *)v357 + 96 * HIDWORD(v358));
          long long v229 = *(_OWORD *)v359;
          v228[1] = v360;
          long long v230 = v363;
          long long v232 = *(_OWORD *)v361;
          long long v231 = *(_OWORD *)&v361[16];
          v228[4] = v362;
        }
        v228[5] = v230;
        v228[2] = v232;
        v228[3] = v231;
        _OWORD *v228 = v229;
        HIDWORD(v358) = v226 + 1;
        if (!--v204)
        {
          unint64_t v199 = WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v357, (v226 + 1));
          unint64_t v208 = v357;
          LODWORD(v105) = v358;
          LODWORD(v98) = HIDWORD(v358);
          goto LABEL_254;
        }
      }
    }
    if (!v199) {
      break;
    }
    unsigned int v205 = 96 * v199;
    uint64_t v206 = WTF::fastMalloc((WTF *)(96 * v199));
    LODWORD(v358) = v205 / 0x60;
    char v357 = (WTF *)v206;
    LODWORD(v105) = 96;
    while (1)
    {
      unint64_t v199 = IPC::Decoder::decode<WebCore::ElementAnimationContext>((uint64_t)v359, v2);
      if (!(_BYTE)v364) {
        break;
      }
      int v207 = HIDWORD(v358);
      if (HIDWORD(v358) == v358)
      {
        unint64_t v199 = WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v357, HIDWORD(v358) + 1, (unint64_t)v359);
        int v207 = HIDWORD(v358);
        unint64_t v208 = v357;
        unint64_t v209 = (_OWORD *)((char *)v357 + 96 * HIDWORD(v358));
        long long v210 = *(_OWORD *)v199;
        v209[1] = *(_OWORD *)(v199 + 16);
        long long v211 = *(_OWORD *)(v199 + 80);
        long long v213 = *(_OWORD *)(v199 + 32);
        long long v212 = *(_OWORD *)(v199 + 48);
        v209[4] = *(_OWORD *)(v199 + 64);
      }
      else
      {
        unint64_t v208 = v357;
        unint64_t v209 = (_OWORD *)((char *)v357 + 96 * HIDWORD(v358));
        long long v210 = *(_OWORD *)v359;
        v209[1] = v360;
        long long v211 = v363;
        long long v213 = *(_OWORD *)v361;
        long long v212 = *(_OWORD *)&v361[16];
        v209[4] = v362;
      }
      v209[5] = v211;
      v209[2] = v213;
      v209[3] = v212;
      *unint64_t v209 = v210;
      LODWORD(v98) = v207 + 1;
      HIDWORD(v358) = v207 + 1;
      if (!--v204)
      {
        LODWORD(v105) = v358;
        goto LABEL_254;
      }
    }
LABEL_314:
    unint64_t v233 = v357;
    if (v357)
    {
      char v357 = 0;
      LODWORD(v358) = 0;
      WTF::fastFree(v233, v197);
    }
LABEL_316:
    unint64_t v197 = (void *)*v2;
    unint64_t v234 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v235 = v2[3];
    if (!v235
      || !v234
      || (unint64_t v199 = (*(uint64_t (**)(unint64_t, void *))(*(void *)v235 + 16))(v235, v197), !*v2))
    {
      *a2 = 0;
      a2[640] = 0;
      goto LABEL_318;
    }
    unint64_t v208 = 0;
    int v214 = 1;
LABEL_256:
    if (v356)
    {
      v359[0] = v355[0];
      *(CFTypeRef *)((char *)v359 + 7) = *(CFTypeRef *)((char *)v355 + 7);
      if (!v309)
      {
        LOBYTE(v360) = v308;
        if ((v310 & 0xFF0000) != 0)
        {
          *(_WORD *)((char *)&v360 + 1) = v310;
          if (v307 > 0xFF)
          {
            BYTE3(v360) = v307;
            if (!v306)
            {
              BYTE4(v360) = v305;
              if (!v304)
              {
                BYTE5(v360) = v303;
                if (!v302)
                {
                  BYTE6(v360) = v301;
                  if (!v300)
                  {
                    BYTE7(v360) = v299;
                    if (!v298)
                    {
                      BYTE8(v360) = v297;
                      if (!v296)
                      {
                        BYTE9(v360) = v295;
                        if (!v294)
                        {
                          BYTE10(v360) = v293;
                          if (!v292)
                          {
                            BYTE11(v360) = v291;
                            if (!v290)
                            {
                              BYTE12(v360) = v289;
                              if (!v288)
                              {
                                BYTE13(v360) = v287;
                                if (!v286)
                                {
                                  BYTE14(v360) = v285;
                                  if (!v284)
                                  {
                                    HIBYTE(v360) = v283;
                                    if (!v282)
                                    {
                                      v361[0] = v281;
                                      if (v354)
                                      {
                                        *(_OWORD *)&v361[8] = v353;
                                        if (!v280)
                                        {
                                          v361[24] = v279;
                                          if (!v278)
                                          {
                                            v361[25] = v277;
                                            if (!v276)
                                            {
                                              v361[26] = v275;
                                              if (!v100)
                                              {
                                                v361[27] = v107;
                                                if (!v274)
                                                {
                                                  v361[28] = v272;
                                                  if (!v273)
                                                  {
                                                    v361[29] = v270;
                                                    if (v271)
                                                    {
                                                      *(void *)&long long v362 = v269;
                                                      if (v352)
                                                      {
                                                        unint64_t v215 = v349;
                                                        unsigned int v349 = 0;
                                                        *((void *)&v362 + 1) = v215;
                                                        long long v363 = v350;
                                                        long long v364 = v351;
                                                        LODWORD(v350) = v350 & 0xFFFFFFFE;
                                                        if (v348)
                                                        {
                                                          unint64_t v216 = v345;
                                                          unsigned int v345 = 0;
                                                          char v365 = v216;
                                                          long long v366 = v346;
                                                          long long v367 = v347;
                                                          LODWORD(v346) = v346 & 0xFFFFFFFE;
                                                          if (v344)
                                                          {
                                                            unint64_t v217 = v343;
                                                            unint64_t v343 = 0;
                                                            int v368 = v217;
                                                            if (v342)
                                                            {
                                                              unint64_t v218 = v341;
                                                              unint64_t v341 = 0;
                                                              uint64_t v369 = v218;
                                                              if (v340)
                                                              {
                                                                unint64_t v219 = v339;
                                                                unint64_t v339 = 0;
                                                                unsigned int v370 = v219;
                                                                if (v338)
                                                                {
                                                                  long long v371 = v337;
                                                                  if (v336)
                                                                  {
                                                                    uint64_t v220 = v335;
                                                                    uint64_t v335 = 0;
                                                                    uint64_t v372 = v220;
                                                                    if (v334)
                                                                    {
                                                                      unint64_t v221 = v333;
                                                                      unint64_t v333 = 0;
                                                                      unsigned int v373 = v221;
                                                                      if (v332)
                                                                      {
                                                                        unint64_t v222 = v331;
                                                                        unint64_t v331 = 0;
                                                                        char v374 = v222;
                                                                        if ((v268 & 0xFF00000000) != 0)
                                                                        {
                                                                          int v375 = v268;
                                                                          if (v330)
                                                                          {
                                                                            long long v376 = v329;
                                                                            int v100 = v313;
                                                                            if (!v313)
                                                                            {
                                                                              char v377 = 0;
                                                                              char v380 = 0;
                                                                              int v107 = v312;
                                                                              if (v312)
                                                                              {
                                                                                uint64_t v2 = v267;
                                                                              }
                                                                              else
                                                                              {
                                                                                char v377 = v266;
                                                                                char v378 = v267;
                                                                                long long v379 = v328;
                                                                                char v380 = 1;
                                                                                uint64_t v2 = 0;
                                                                              }
                                                                              if (v327)
                                                                              {
                                                                                unint64_t v199 = WebCore::TextIndicatorData::TextIndicatorData((uint64_t)v381, v320);
                                                                                if (v319)
                                                                                {
                                                                                  unint64_t v223 = v318;
                                                                                  uint64_t v318 = 0;
                                                                                  v381[14] = v223;
                                                                                  if (v317)
                                                                                  {
                                                                                    CFTypeRef v224 = cf;
                                                                                    CFTypeRef cf = 0;
                                                                                    v381[15] = v224;
                                                                                    if (v315)
                                                                                    {
                                                                                      long long v382 = v314;
                                                                                      if (v403)
                                                                                      {
                                                                                        long long v385 = v401[2];
                                                                                        long long v386 = v401[3];
                                                                                        long long v387 = v401[4];
                                                                                        char v388 = v402;
                                                                                        long long v383 = v401[0];
                                                                                        long long v384 = v401[1];
                                                                                        if (v400)
                                                                                        {
                                                                                          long long v391 = v398[2];
                                                                                          long long v392 = v398[3];
                                                                                          long long v393 = v398[4];
                                                                                          char v394 = v399;
                                                                                          long long v389 = v398[0];
                                                                                          long long v390 = v398[1];
                                                                                          if (!v214)
                                                                                          {
                                                                                            int v395 = v208;
                                                                                            int v396 = (int)v105;
                                                                                            int v397 = v98;
                                                                                            *(unsigned char *)(WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((uint64_t)a2, (uint64_t)v359) + 640) = 1;
                                                                                            WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v359, v225);
                                                                                            goto LABEL_319;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_305:
    if (v198) {
      (*(void (**)(unint64_t, void *))(*(void *)v199 + 16))(v199, v197);
    }
LABEL_232:
    char v266 = 0;
    int v313 = 1;
  }
  LODWORD(v98) = 0;
  LODWORD(v105) = 0;
  unint64_t v208 = 0;
LABEL_254:
  if (*v2)
  {
    int v214 = 0;
    goto LABEL_256;
  }
  *a2 = 0;
  a2[640] = 0;
  if (v208) {
    WTF::fastFree(v208, v197);
  }
LABEL_318:
  uint64_t v2 = v267;
  int v107 = v312;
  int v100 = v313;
LABEL_319:
  if (v317 && cf) {
    CFRelease(cf);
  }
  if (v319)
  {
    unint64_t v236 = v318;
    uint64_t v318 = 0;
    if (v236)
    {
      if (*(_DWORD *)v236 == 2) {
        WTF::StringImpl::destroy(v236, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v236 -= 2;
      }
    }
  }
  if (v327)
  {
    if ((v326 & 0x8000000000000) != 0)
    {
      unint64_t v248 = (unsigned int *)(v326 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v326 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v248);
        WTF::fastFree((WTF *)v248, v197);
      }
    }
    unint64_t v237 = v325;
    uint64_t v325 = 0;
    if (v237)
    {
      if (v237[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v237 + 8))(v237);
      }
      else {
        --v237[2];
      }
    }
    unint64_t v238 = v324;
    uint64_t v324 = 0;
    if (v238)
    {
      if (v238[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v238 + 8))(v238);
      }
      else {
        --v238[2];
      }
    }
    unint64_t v239 = v323;
    uint64_t v323 = 0;
    if (v239)
    {
      if (v239[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v239 + 8))(v239);
      }
      else {
        --v239[2];
      }
    }
    unint64_t v240 = v321;
    if (v321)
    {
      uint64_t v321 = 0;
      int v322 = 0;
      WTF::fastFree(v240, v197);
    }
  }
  if (((v107 | v100) & 1) == 0 && v2)
  {
    if (*((_DWORD *)v2 + 2) == 1) {
      (*(void (**)(unint64_t *))(*v2 + 8))(v2);
    }
    else {
      --*((_DWORD *)v2 + 2);
    }
  }
  if (v332)
  {
    unint64_t v241 = v331;
    unint64_t v331 = 0;
    if (v241)
    {
      if (*(_DWORD *)v241 == 2) {
        WTF::StringImpl::destroy(v241, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v241 -= 2;
      }
    }
  }
  if (v334)
  {
    unint64_t v242 = v333;
    unint64_t v333 = 0;
    if (v242)
    {
      if (*(_DWORD *)v242 == 2) {
        WTF::StringImpl::destroy(v242, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v242 -= 2;
      }
    }
  }
  if (v336 && v335) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v335, v197);
  }
  if (v340)
  {
    unint64_t v243 = v339;
    unint64_t v339 = 0;
    if (v243)
    {
      if (*(_DWORD *)v243 == 2) {
        WTF::StringImpl::destroy(v243, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v243 -= 2;
      }
    }
  }
  if (v342)
  {
    unint64_t v244 = v341;
    unint64_t v341 = 0;
    if (v244)
    {
      if (*(_DWORD *)v244 == 2) {
        WTF::StringImpl::destroy(v244, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v244 -= 2;
      }
    }
  }
  if (v344)
  {
    unint64_t v245 = v343;
    unint64_t v343 = 0;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2) {
        WTF::StringImpl::destroy(v245, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v245 -= 2;
      }
    }
  }
  if (v348)
  {
    unint64_t v246 = v345;
    unsigned int v345 = 0;
    if (v246)
    {
      if (*(_DWORD *)v246 == 2) {
        WTF::StringImpl::destroy(v246, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v246 -= 2;
      }
    }
  }
  if (v352)
  {
    unint64_t v247 = v349;
    unsigned int v349 = 0;
    if (v247)
    {
      if (*(_DWORD *)v247 == 2) {
        WTF::StringImpl::destroy(v247, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v247 -= 2;
      }
    }
  }
}

void sub_19882F190(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37,int a38,uint64_t a39,uint64_t a40,CFTypeRef cf,char a42,WTF::StringImpl *a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,WTF *a51,uint64_t a52,uint64_t a53,_DWORD *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v73 = v70[18];
  if (v73)
  {
    v70[18] = 0;
    LODWORD(STACK[0x2C8]) = 0;
    WTF::fastFree(v73, a2);
  }
  if (a42 && cf) {
    CFRelease(cf);
  }
  if (a44 && a43)
  {
    if (*(_DWORD *)a43 == 2) {
      WTF::StringImpl::destroy(a43, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a43 -= 2;
    }
  }
  if (a59)
  {
    uint64_t v74 = v71[12];
    if ((v74 & 0x8000000000000) != 0)
    {
      uint64_t v85 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v85);
        WTF::fastFree((WTF *)v85, a2);
      }
    }
    unsigned int v75 = (_DWORD *)v71[11];
    v71[11] = 0;
    if (v75)
    {
      if (v75[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v75 + 8))(v75);
      }
      else {
        --v75[2];
      }
    }
    char v76 = (_DWORD *)v71[10];
    v71[10] = 0;
    if (v76)
    {
      if (v76[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v76 + 8))(v76);
      }
      else {
        --v76[2];
      }
    }
    if (a54)
    {
      if (a54[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a54 + 8))(a54);
      }
      else {
        --a54[2];
      }
    }
    if (a51) {
      WTF::fastFree(a51, a2);
    }
  }
  if (((a37 | a38) & 1) == 0 && a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[2];
    }
  }
  if (a66)
  {
    unint64_t v77 = (WTF::StringImpl *)v71[20];
    v71[20] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
  }
  if (a68)
  {
    unint64_t v78 = (WTF::StringImpl *)v71[22];
    v71[22] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2) {
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v78 -= 2;
      }
    }
  }
  if (a70)
  {
    uint64_t v79 = v71[24];
    if (v79) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v79, a2);
    }
  }
  if (LOBYTE(STACK[0x208]))
  {
    char v80 = (WTF::StringImpl *)v71[29];
    v71[29] = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2) {
        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v80 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x218]))
  {
    uint64_t v81 = (WTF::StringImpl *)v71[31];
    v71[31] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x228]))
  {
    unsigned int v82 = (WTF::StringImpl *)v71[33];
    v71[33] = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2) {
        WTF::StringImpl::destroy(v82, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v82 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x258]))
  {
    char v83 = *v70;
    *uint64_t v70 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2) {
        WTF::StringImpl::destroy(v83, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v83 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x288]))
  {
    unint64_t v84 = v70[6];
    v70[6] = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2) {
        WTF::StringImpl::destroy(v84, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v84 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

unint64_t *IPC::Decoder::decode<WebKit::InteractionInformationRequest>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::decode(a1, a2);
  if (!a2[16])
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

WTF::MachSendRight *IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>(WTF::MachSendRight *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    *(unsigned char *)unint64_t v3 = 0;
    *((unsigned char *)v3 + 8) = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(void *)uint64_t result = 0;
    goto LABEL_8;
  }
  uint64_t result = IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::decode(a2, &v17);
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 8) = 0;
  if (v18)
  {
    *(void *)unint64_t v3 = v17;
LABEL_8:
    *((unsigned char *)v3 + 8) = 1;
    return result;
  }
LABEL_13:
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (WTF::MachSendRight *)a2[3];
  if (result)
  {
    if (v16) {
      return (WTF::MachSendRight *)(*(uint64_t (**)(WTF::MachSendRight *, uint64_t))(*(void *)result + 16))(result, v15);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextIndicatorData>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::decode(a1, a2);
  if (!a2[112])
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19882F9D0(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 112)) {
    WebCore::TextIndicatorData::~TextIndicatorData(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v6 = *(_DWORD *)a2;
  IPC::Encoder::operator<<<int>(a1, &v6);
  int v5 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<int>(a1, &v5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 9));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 10));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 11));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 12));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 13));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 14));
}

unint64_t *IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5)
  {
    unint64_t v49 = *a1;
    unint64_t v50 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v51 = a1[3];
    if (v51 && v50 != 0)
    {
      unint64_t v201 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v51 + 16))(v51, v49);
      uint64_t v6 = 0;
      uint64_t result = v201;
    }
  }
  unint64_t v7 = a1[1];
  unint64_t v8 = *a1;
  unint64_t v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    unint64_t v53 = 0;
    unint64_t v54 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v55 = a1[3];
    if (v55)
    {
      uint64_t v243 = v6;
      unint64_t v222 = result;
      if (v7)
      {
        (*(void (**)(unint64_t))(*(void *)v55 + 16))(v55);
        unint64_t v54 = *a1;
        unint64_t v53 = a1[1];
      }
      else
      {
        unint64_t v53 = 0;
        unint64_t v54 = 0;
      }
      uint64_t result = v222;
      uint64_t v6 = v243;
    }
    goto LABEL_60;
  }
  uint64_t v10 = (unsigned __int8 *)(v8 + v9);
  uint64_t v11 = v8 + v9 + 1;
  a1[2] = v11;
  if (!v8)
  {
    unint64_t v53 = v7;
    unint64_t v54 = 0;
LABEL_60:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v56 = a1[3];
    if (v56)
    {
      uint64_t v242 = v6;
      unint64_t v221 = result;
      if (v53)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v56 + 16))(v56, v54, v53);
        unsigned int v12 = 0;
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        unsigned int v12 = 0;
      }
      uint64_t result = v221;
      uint64_t v6 = v242;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      unsigned int v12 = 0;
    }
    goto LABEL_62;
  }
  unsigned int v12 = *v10;
  if (v12 < 2)
  {
    int v13 = 0;
    int v14 = 1;
    goto LABEL_6;
  }
LABEL_62:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v57 = a1[3];
  if (!v57)
  {
    int v14 = 0;
    unint64_t v8 = 0;
    int v13 = 1;
    goto LABEL_64;
  }
  unsigned int v200 = v12;
  uint64_t v241 = v6;
  uint64_t v220 = result;
  if (!v7)
  {
    int v14 = 0;
    unint64_t v57 = 0;
    unint64_t v8 = 0;
    int v13 = 1;
LABEL_64:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = (unsigned __int8 *)a1[3];
    if (v16)
    {
      int v181 = v13;
      int v199 = v14;
      uint64_t v240 = v6;
      unint64_t v219 = result;
      if (v57)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v8, v57);
        LODWORD(v16) = 0;
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        LODWORD(v16) = 0;
      }
      uint64_t result = v219;
      uint64_t v6 = v240;
      int v13 = v181;
      int v14 = v199;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_66;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v57 + 16))(v57, v8);
  int v14 = 0;
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  int v13 = 1;
  uint64_t v11 = a1[2];
  uint64_t result = v220;
  uint64_t v6 = v241;
  unsigned int v12 = v200;
LABEL_6:
  if (!v12) {
    int v14 = 0;
  }
  unint64_t v15 = v11 - v8;
  if (v7 <= v15)
  {
    int v164 = v13;
    int v182 = v14;
    uint64_t v223 = v6;
    unint64_t v202 = result;
    unint64_t v57 = 0;
    unint64_t v63 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v63 && v7)
    {
      (*(void (**)(unint64_t))(*(void *)v63 + 16))(v63);
      unint64_t v8 = *a1;
      unint64_t v57 = a1[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t result = v202;
    uint64_t v6 = v223;
    int v13 = v164;
    int v14 = v182;
    goto LABEL_64;
  }
  uint64_t v16 = (unsigned __int8 *)(v8 + v15);
  uint64_t v17 = v8 + v15 + 1;
  a1[2] = v17;
  if (!v8)
  {
    unint64_t v57 = v7;
    goto LABEL_64;
  }
  LODWORD(v16) = *v16;
  if (v16 < 2)
  {
    int v18 = 0;
    int v19 = 1;
    goto LABEL_12;
  }
LABEL_66:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v58 = a1[3];
  if (!v58)
  {
    int v19 = 0;
    unint64_t v8 = 0;
    int v18 = 1;
    goto LABEL_68;
  }
  int v163 = (int)v16;
  int v180 = v13;
  int v198 = v14;
  uint64_t v239 = v6;
  unint64_t v218 = result;
  if (!v7)
  {
    int v19 = 0;
    unint64_t v58 = 0;
    unint64_t v8 = 0;
    int v18 = 1;
LABEL_68:
    *a1 = 0;
    a1[1] = 0;
    unsigned int v21 = (unsigned __int8 *)a1[3];
    if (v21)
    {
      int v147 = v18;
      int v162 = v19;
      int v179 = v13;
      int v197 = v14;
      uint64_t v238 = v6;
      unint64_t v217 = result;
      if (v58)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(void *)v21 + 16))(v21, v8, v58);
        LODWORD(v21) = 0;
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        LODWORD(v21) = 0;
      }
      uint64_t result = v217;
      uint64_t v6 = v238;
      int v13 = v179;
      int v14 = v197;
      int v18 = v147;
      int v19 = v162;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_70;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v58 + 16))(v58, v8);
  int v19 = 0;
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  int v18 = 1;
  uint64_t v17 = a1[2];
  uint64_t result = v218;
  uint64_t v6 = v239;
  int v13 = v180;
  int v14 = v198;
  LODWORD(v16) = v163;
LABEL_12:
  if (!v16) {
    int v19 = 0;
  }
  unint64_t v20 = v17 - v8;
  if (v7 <= v20)
  {
    int v133 = v18;
    int v148 = v19;
    int v165 = v13;
    int v183 = v14;
    uint64_t v224 = v6;
    unint64_t v203 = result;
    unint64_t v58 = 0;
    unint64_t v64 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v64 && v7)
    {
      (*(void (**)(unint64_t))(*(void *)v64 + 16))(v64);
      unint64_t v8 = *a1;
      unint64_t v58 = a1[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t result = v203;
    uint64_t v6 = v224;
    int v13 = v165;
    int v14 = v183;
    int v18 = v133;
    int v19 = v148;
    goto LABEL_68;
  }
  unsigned int v21 = (unsigned __int8 *)(v8 + v20);
  uint64_t v22 = v8 + v20 + 1;
  a1[2] = v22;
  if (!v8)
  {
    unint64_t v58 = v7;
    goto LABEL_68;
  }
  LODWORD(v21) = *v21;
  if (v21 < 2)
  {
    int v23 = 0;
    int v24 = 1;
    goto LABEL_18;
  }
LABEL_70:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v59 = a1[3];
  if (!v59)
  {
    int v25 = 0;
    unint64_t v8 = 0;
    int v23 = 1;
    goto LABEL_72;
  }
  int v132 = (int)v21;
  int v146 = v18;
  int v161 = v19;
  int v178 = v13;
  int v196 = v14;
  uint64_t v237 = v6;
  unint64_t v216 = result;
  if (!v7)
  {
    int v25 = 0;
    unint64_t v59 = 0;
    unint64_t v8 = 0;
    int v23 = 1;
LABEL_72:
    *a1 = 0;
    a1[1] = 0;
    char v27 = (unsigned __int8 *)a1[3];
    if (v27)
    {
      int v119 = v23;
      int v131 = v25;
      int v145 = v18;
      int v160 = v19;
      int v177 = v13;
      int v195 = v14;
      uint64_t v236 = v6;
      unint64_t v215 = result;
      if (v59)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(void *)v27 + 16))(v27, v8, v59);
        LODWORD(v27) = 0;
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        LODWORD(v27) = 0;
      }
      uint64_t result = v215;
      uint64_t v6 = v236;
      int v13 = v177;
      int v14 = v195;
      int v18 = v145;
      int v19 = v160;
      int v23 = v119;
      int v25 = v131;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_74;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v59 + 16))(v59, v8);
  int v24 = 0;
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  int v23 = 1;
  uint64_t v22 = a1[2];
  uint64_t result = v216;
  uint64_t v6 = v237;
  int v13 = v178;
  int v14 = v196;
  int v18 = v146;
  int v19 = v161;
  LODWORD(v21) = v132;
LABEL_18:
  if (v21) {
    int v25 = v24;
  }
  else {
    int v25 = 0;
  }
  unint64_t v26 = v22 - v8;
  if (v7 <= v26)
  {
    int v108 = v23;
    int v120 = v25;
    int v134 = v18;
    int v149 = v19;
    int v166 = v13;
    int v184 = v14;
    uint64_t v225 = v6;
    unint64_t v204 = result;
    unint64_t v59 = 0;
    unint64_t v65 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v65 && v7)
    {
      (*(void (**)(unint64_t))(*(void *)v65 + 16))(v65);
      unint64_t v8 = *a1;
      unint64_t v59 = a1[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t result = v204;
    uint64_t v6 = v225;
    int v13 = v166;
    int v14 = v184;
    int v18 = v134;
    int v19 = v149;
    int v23 = v108;
    int v25 = v120;
    goto LABEL_72;
  }
  char v27 = (unsigned __int8 *)(v8 + v26);
  uint64_t v28 = v8 + v26 + 1;
  a1[2] = v28;
  if (!v8)
  {
    unint64_t v59 = v7;
    goto LABEL_72;
  }
  LODWORD(v27) = *v27;
  if (v27 < 2)
  {
    int v29 = 0;
    int v30 = 1;
    goto LABEL_25;
  }
LABEL_74:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v60 = a1[3];
  if (!v60)
  {
    int v31 = 0;
    unint64_t v8 = 0;
    int v29 = 1;
    goto LABEL_76;
  }
  int v107 = (int)v27;
  int v118 = v23;
  int v130 = v25;
  int v144 = v18;
  int v159 = v19;
  int v176 = v13;
  int v194 = v14;
  uint64_t v235 = v6;
  int v214 = result;
  if (!v7)
  {
    int v31 = 0;
    unint64_t v60 = 0;
    unint64_t v8 = 0;
    int v29 = 1;
LABEL_76:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v33 = (unsigned __int8 *)a1[3];
    if (v33)
    {
      int v97 = v29;
      int v106 = v31;
      int v117 = v23;
      int v129 = v25;
      int v143 = v18;
      int v158 = v19;
      int v175 = v13;
      int v193 = v14;
      uint64_t v234 = v6;
      long long v213 = result;
      if (v60)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v8, v60);
        LODWORD(v33) = 0;
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        LODWORD(v33) = 0;
      }
      uint64_t result = v213;
      uint64_t v6 = v234;
      int v13 = v175;
      int v14 = v193;
      int v18 = v143;
      int v19 = v158;
      int v23 = v117;
      int v25 = v129;
      int v29 = v97;
      int v31 = v106;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_78;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v60 + 16))(v60, v8);
  int v30 = 0;
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  int v29 = 1;
  uint64_t v28 = a1[2];
  uint64_t result = v214;
  uint64_t v6 = v235;
  int v13 = v176;
  int v14 = v194;
  int v18 = v144;
  int v19 = v159;
  int v23 = v118;
  int v25 = v130;
  LODWORD(v27) = v107;
LABEL_25:
  if (v27) {
    int v31 = v30;
  }
  else {
    int v31 = 0;
  }
  unint64_t v32 = v28 - v8;
  if (v7 <= v32)
  {
    int v89 = v29;
    int v98 = v31;
    int v109 = v23;
    int v121 = v25;
    int v135 = v18;
    int v150 = v19;
    int v167 = v13;
    int v185 = v14;
    uint64_t v226 = v6;
    unsigned int v205 = result;
    unint64_t v60 = 0;
    unint64_t v66 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v66 && v7)
    {
      (*(void (**)(unint64_t))(*(void *)v66 + 16))(v66);
      unint64_t v8 = *a1;
      unint64_t v60 = a1[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t result = v205;
    uint64_t v6 = v226;
    int v13 = v167;
    int v14 = v185;
    int v18 = v135;
    int v19 = v150;
    int v23 = v109;
    int v25 = v121;
    int v29 = v89;
    int v31 = v98;
    goto LABEL_76;
  }
  unint64_t v33 = (unsigned __int8 *)(v8 + v32);
  uint64_t v34 = v8 + v32 + 1;
  a1[2] = v34;
  if (!v8)
  {
    unint64_t v60 = v7;
    goto LABEL_76;
  }
  LODWORD(v33) = *v33;
  if (v33 < 2)
  {
    int v35 = 0;
    int v36 = 1;
    goto LABEL_32;
  }
LABEL_78:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v61 = a1[3];
  if (!v61)
  {
    int v37 = 0;
    unint64_t v8 = 0;
    int v35 = 1;
    goto LABEL_80;
  }
  int v88 = (int)v33;
  int v96 = v29;
  int v105 = v31;
  int v116 = v23;
  int v128 = v25;
  int v142 = v18;
  int v157 = v19;
  int v174 = v13;
  int v192 = v14;
  uint64_t v233 = v6;
  long long v212 = result;
  if (!v7)
  {
    int v37 = 0;
    unint64_t v61 = 0;
    unint64_t v8 = 0;
    int v35 = 1;
LABEL_80:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v39 = (unsigned __int8 *)a1[3];
    if (v39)
    {
      int v81 = v35;
      int v87 = v37;
      int v95 = v29;
      int v104 = v31;
      int v115 = v23;
      int v127 = v25;
      int v141 = v18;
      int v156 = v19;
      int v173 = v13;
      int v191 = v14;
      uint64_t v232 = v6;
      long long v211 = result;
      if (v61)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v8, v61);
        LODWORD(v39) = 0;
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        LODWORD(v39) = 0;
      }
      uint64_t result = v211;
      uint64_t v6 = v232;
      int v13 = v173;
      int v14 = v191;
      int v18 = v141;
      int v19 = v156;
      int v23 = v115;
      int v25 = v127;
      int v29 = v95;
      int v31 = v104;
      int v35 = v81;
      int v37 = v87;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_82;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v61 + 16))(v61, v8);
  int v36 = 0;
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  int v35 = 1;
  uint64_t v34 = a1[2];
  uint64_t result = v212;
  uint64_t v6 = v233;
  int v13 = v174;
  int v14 = v192;
  int v18 = v142;
  int v19 = v157;
  int v23 = v116;
  int v25 = v128;
  int v29 = v96;
  int v31 = v105;
  LODWORD(v33) = v88;
LABEL_32:
  if (v33) {
    int v37 = v36;
  }
  else {
    int v37 = 0;
  }
  unint64_t v38 = v34 - v8;
  if (v7 <= v38)
  {
    int v76 = v35;
    int v82 = v37;
    int v90 = v29;
    int v99 = v31;
    int v110 = v23;
    int v122 = v25;
    int v136 = v18;
    int v151 = v19;
    int v168 = v13;
    int v186 = v14;
    uint64_t v227 = v6;
    uint64_t v206 = result;
    unint64_t v61 = 0;
    unint64_t v67 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v67 && v7)
    {
      (*(void (**)(unint64_t))(*(void *)v67 + 16))(v67);
      unint64_t v8 = *a1;
      unint64_t v61 = a1[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t result = v206;
    uint64_t v6 = v227;
    int v13 = v168;
    int v14 = v186;
    int v18 = v136;
    int v19 = v151;
    int v23 = v110;
    int v25 = v122;
    int v29 = v90;
    int v31 = v99;
    int v35 = v76;
    int v37 = v82;
    goto LABEL_80;
  }
  unint64_t v39 = (unsigned __int8 *)(v8 + v38);
  uint64_t v40 = v8 + v38 + 1;
  a1[2] = v40;
  if (!v8)
  {
    unint64_t v61 = v7;
    goto LABEL_80;
  }
  LODWORD(v39) = *v39;
  if (v39 < 2)
  {
    int v41 = 0;
    int v42 = 1;
    goto LABEL_39;
  }
LABEL_82:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v47 = a1[3];
  if (!v47)
  {
    int v42 = 0;
    unint64_t v8 = 0;
    int v41 = 1;
LABEL_84:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v46 = a1[3];
    if (v46) {
      goto LABEL_116;
    }
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    goto LABEL_86;
  }
  int v75 = (int)v39;
  int v80 = v35;
  int v86 = v37;
  int v94 = v29;
  int v103 = v31;
  int v114 = v23;
  int v126 = v25;
  int v140 = v18;
  int v155 = v19;
  int v172 = v13;
  int v190 = v14;
  uint64_t v231 = v6;
  long long v210 = result;
  if (!v7)
  {
    int v42 = 0;
    unint64_t v47 = 0;
    unint64_t v8 = 0;
    int v41 = 1;
    goto LABEL_84;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v47 + 16))(v47, v8);
  int v42 = 0;
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  int v41 = 1;
  uint64_t v40 = a1[2];
  uint64_t result = v210;
  uint64_t v6 = v231;
  int v13 = v172;
  int v14 = v190;
  int v18 = v140;
  int v19 = v155;
  int v23 = v114;
  int v25 = v126;
  int v29 = v94;
  int v31 = v103;
  int v35 = v80;
  int v37 = v86;
  LODWORD(v39) = v75;
LABEL_39:
  if (!v39) {
    int v42 = 0;
  }
  unint64_t v43 = v40 - v8;
  if (v7 <= v43)
  {
    int v69 = v41;
    int v72 = v42;
    int v77 = v35;
    int v83 = v37;
    int v91 = v29;
    int v100 = v31;
    int v111 = v23;
    int v123 = v25;
    int v137 = v18;
    int v152 = v19;
    int v169 = v13;
    int v187 = v14;
    uint64_t v228 = v6;
    int v207 = result;
    unint64_t v47 = 0;
    unint64_t v68 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v68 && v7)
    {
      (*(void (**)(unint64_t))(*(void *)v68 + 16))(v68);
      unint64_t v8 = *a1;
      unint64_t v47 = a1[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t result = v207;
    uint64_t v6 = v228;
    int v13 = v169;
    int v14 = v187;
    int v18 = v137;
    int v19 = v152;
    int v23 = v111;
    int v25 = v123;
    int v29 = v91;
    int v31 = v100;
    int v35 = v77;
    int v37 = v83;
    int v41 = v69;
    int v42 = v72;
    goto LABEL_84;
  }
  uint64_t v44 = (unsigned __int8 *)(v8 + v43);
  a1[2] = (unint64_t)(v44 + 1);
  if (!v8)
  {
    unint64_t v47 = v7;
    goto LABEL_84;
  }
  unsigned int v45 = *v44;
  if (v45 > 1) {
    goto LABEL_86;
  }
  uint64_t v46 = 0;
  unint64_t v47 = v45 != 0;
  if (!v6) {
    goto LABEL_115;
  }
LABEL_45:
  if (v13 || v18 || v23 || v29 || v35 || v41 || v46)
  {
LABEL_115:
    while (1)
    {
      __break(1u);
LABEL_116:
      int v71 = v41;
      int v74 = v42;
      int v79 = v35;
      int v85 = v37;
      int v93 = v29;
      int v102 = v31;
      int v113 = v23;
      int v125 = v25;
      int v139 = v18;
      int v154 = v19;
      int v171 = v13;
      int v189 = v14;
      uint64_t v230 = v6;
      unint64_t v209 = result;
      if (v47)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v46 + 16))(v46, v8, v47);
        unint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
      }
      uint64_t result = v209;
      uint64_t v6 = v230;
      int v13 = v171;
      int v14 = v189;
      int v18 = v139;
      int v19 = v154;
      int v23 = v113;
      int v25 = v125;
      int v29 = v93;
      int v31 = v102;
      int v35 = v79;
      int v37 = v85;
      int v41 = v71;
      int v42 = v74;
LABEL_86:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v62 = a1[3];
      if (!v62) {
        break;
      }
      if (!v7) {
        break;
      }
      int v70 = v41;
      int v73 = v42;
      unint64_t v208 = result;
      uint64_t v229 = v6;
      int v170 = v13;
      int v188 = v14;
      int v138 = v18;
      int v153 = v19;
      int v112 = v23;
      int v124 = v25;
      int v92 = v29;
      int v101 = v31;
      int v78 = v35;
      int v84 = v37;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v62 + 16))(v62, v8);
      int v41 = v70;
      int v42 = v73;
      int v35 = v78;
      int v37 = v84;
      int v29 = v92;
      int v31 = v101;
      int v23 = v112;
      int v25 = v124;
      int v18 = v138;
      int v19 = v153;
      int v13 = v170;
      int v14 = v188;
      uint64_t v6 = v229;
      uint64_t result = v208;
      if (!*a1) {
        break;
      }
      unint64_t v47 = 0;
      uint64_t v46 = 1;
      if (v229) {
        goto LABEL_45;
      }
    }
    char v48 = 0;
    *a2 = 0;
  }
  else
  {
    *(void *)a2 = result;
    a2[8] = v14;
    a2[9] = v19;
    a2[10] = v25;
    a2[11] = v31;
    a2[12] = v37;
    a2[13] = v42;
    char v48 = 1;
    a2[14] = v47;
  }
  a2[16] = v48;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 4);

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 5);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v18);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v14);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v12);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebKit::EditingRange>(a1, (uint64_t)&v10);
  if (*(void *)a1)
  {
    if (v19)
    {
      uint64_t v6 = v18;
      int v18 = 0;
      if (v17)
      {
        unint64_t v7 = v16;
        uint64_t v16 = 0;
        if (v15)
        {
          unint64_t v8 = v14;
          int v14 = 0;
          if (v13)
          {
            unint64_t v9 = v12;
            unsigned int v12 = 0;
            if (v11)
            {
              *(_OWORD *)(a2 + 32) = v10;
              *(void *)a2 = v6;
              *(void *)(a2 + 8) = v7;
              *(void *)(a2 + 16) = v8;
              *(void *)(a2 + 24) = v9;
              *(unsigned char *)(a2 + 48) = 1;
              goto LABEL_8;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v13)
  {
    uint64_t result = v12;
    unsigned int v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_8:
  if (v15)
  {
    uint64_t result = v14;
    int v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v17)
  {
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v19)
  {
    uint64_t result = v18;
    int v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198830A9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (*(unsigned char *)(v16 - 40))
  {
    int v18 = *(WTF::StringImpl **)(v16 - 48);
    *(void *)(v16 - 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, a2);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v16 - 24))
  {
    char v19 = *(WTF::StringImpl **)(v16 - 32);
    *(void *)(v16 - 32) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, a2);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebKit::EditingRange>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::EditingRange,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::encode(IPC::Encoder *a1, id *a2)
{
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
  WebKit::WebAutocorrectionData::fontName(a2, &v10);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)&v10);
  if (v11)
  {
    uint64_t v5 = v10;
    long long v10 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  objc_msgSend(a2[2], "pointSize", v10);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v6);
  unint64_t v7 = (void *)[a2[2] fontDescriptor];
  objc_msgSend((id)objc_msgSend(v7, "objectForKey:", *MEMORY[0x1E4F43940]), "doubleValue");
  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v8);
}

void sub_198830C9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v33);
  IPC::Decoder::decode<std::optional<WTF::String>>((IPC::Decoder *)a1, (uint64_t)&v30);
  unint64_t v5 = a1[1];
  double v6 = (WTF::StringImpl *)*a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unint64_t v9 = (double *)((char *)v6 + v7);
    a1[2] = (unint64_t)(v9 + 1);
    if (!v6)
    {
      unint64_t v18 = v5;
      unint64_t v19 = 0;
      goto LABEL_32;
    }
    int v10 = 0;
    double v11 = *v9;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v20 = a1[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v19 = *a1;
        unint64_t v18 = a1[1];
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
      }
    }
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    double v11 = 0.0;
    unint64_t v21 = a1[3];
    if (v21 && v18)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t, double))(*(void *)v21 + 16))(v21, v19, v18, 0.0);
      double v6 = (WTF::StringImpl *)*a1;
      unint64_t v5 = a1[1];
      int v10 = 1;
      double v11 = 0.0;
    }
    else
    {
      unint64_t v5 = 0;
      double v6 = 0;
      int v10 = 1;
    }
LABEL_8:
    unint64_t v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6;
    if (v5 < v12 || v5 - v12 <= 7) {
      break;
    }
    int v14 = (double *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v14 + 1);
    if (!v6)
    {
      unint64_t v22 = v5;
      unint64_t v23 = 0;
      goto LABEL_35;
    }
    int v15 = 0;
    double v16 = *v14;
LABEL_15:
    if (v35 && v32 && !v10 && !v15)
    {
      uint64_t result = (WTF::StringImpl *)WebKit::WebAutocorrectionData::WebAutocorrectionData(v29, &v33, (uint64_t)&v30, v11, v16);
      *(void *)a3 = v29[0];
      *(void *)(a3 + 8) = v29[1];
      *(void *)(a3 + 16) = v29[2];
      *(unsigned char *)(a3 + 24) = 1;
      goto LABEL_20;
    }
    __break(1u);
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  *a1 = 0;
  a1[1] = 0;
  unint64_t v24 = a1[3];
  if (v24)
  {
    int v28 = v10;
    double v26 = v11;
    if (v5)
    {
      (*(void (**)(unint64_t))(*(void *)v24 + 16))(v24);
      unint64_t v23 = *a1;
      unint64_t v22 = a1[1];
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = 0;
    }
    double v11 = v26;
    int v10 = v28;
  }
LABEL_35:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v22)
    {
      int v27 = v10;
      double v25 = v11;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t, unint64_t))(*(void *)result + 16))(result, v23, v22);
      double v11 = v25;
      int v10 = v27;
      if (*a1)
      {
        int v15 = 1;
        double v16 = 0.0;
        goto LABEL_15;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_20:
  if (v32)
  {
    if (v31)
    {
      uint64_t result = v30;
      int v30 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (v35)
  {
    uint64_t result = v33;
    if (v33)
    {
      unint64_t v33 = 0;
      int v34 = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_198830FB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if ((_BYTE)a18 && a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (*(unsigned char *)(v20 - 24))
  {
    unint64_t v22 = *(WTF **)(v20 - 40);
    if (v22)
    {
      *(void *)(v20 - 40) = 0;
      *(_DWORD *)(v20 - 32) = 0;
      WTF::fastFree(v22, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::RefCountedBase *IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, a2 + 24);
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v22, (WebCore::ResourceRequestBase *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 48));
  uint64_t v4 = v22;
  unint64_t v21 = v22;
  unint64_t v22 = 0;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(a1, (_DWORD **)&v21);
  if (v4) {
    WTF::RefCounted<WebCore::FormData>::deref(v4);
  }
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 248));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 256));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 264));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 272));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 280));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 288));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 296));
  IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(a1, a2 + 304);
  LOBYTE(v21) = *(unsigned char *)(a2 + 432);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v21);
  LOBYTE(v21) = *(unsigned char *)(a2 + 433);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v21);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, (uint64_t *)(a2 + 440));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 448));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 449));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 450));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 456));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 464));
  int v5 = *(unsigned __int8 *)(a2 + 520);
  double v6 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v5)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198831304);
    }
    *double v6 = 1;
    if (!*(unsigned char *)(a2 + 520))
    {
LABEL_28:
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
LABEL_29:
      JUMPOUT(0x1988312A4);
    }
    IPC::ArgumentCoder<WebCore::OwnerPermissionsPolicyData,void>::encode(a1, a2 + 472);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198831344);
    }
    *double v6 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebCore::UserStyleLevel>,void>::encode<IPC::Encoder,std::optional<WebCore::UserStyleLevel> const&>(a1, a2 + 528);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 536);
  char v8 = *(unsigned char *)(a2 + 552);
  unint64_t v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  *unint64_t v9 = v8;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 560);
  char v11 = *(unsigned char *)(a2 + 576);
  unint64_t v12 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1988312C4);
  }
  *unint64_t v12 = v11;
  char v14 = *(unsigned char *)(a2 + 577);
  int v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1988312E4);
  }
  *int v15 = v14;
  int v17 = *(unsigned __int8 *)(a2 + 580);
  unint64_t v18 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v17)
  {
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x198831324);
    }
    *unint64_t v18 = 1;
    if (*(unsigned char *)(a2 + 580))
    {
      IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 578));
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198831364);
  }
  *unint64_t v18 = 0;
LABEL_18:
  uint64_t result = v22;
  unint64_t v22 = 0;
  if (result) {
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  }
  return result;
}

void sub_198831370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::RefCountedBase *a10)
{
  if (v10) {
    WTF::RefCounted<WebCore::FormData>::deref(v10);
  }
  if (a10) {
    WTF::RefCounted<WebCore::FormData>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::LoadParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::PublicSuffix>(&v74, a1);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v71);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, (uint64_t)&v68);
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v65);
  if (v67)
  {
    IPC::Decoder::decode<IPC::FormDataReference>(a1, &v76);
    if ((_BYTE)v77)
    {
      if (!v67) {
        goto LABEL_54;
      }
      uint64_t v3 = (uint64_t)v76;
      int v76 = 0;
      v48[0] = v3;
      WebCore::ResourceRequestBase::setHTTPBody();
      uint64_t v4 = (WTF::RefCountedBase *)v48[0];
      v48[0] = 0;
      if (v4) {
        WTF::RefCounted<WebCore::FormData>::deref(v4);
      }
      if ((_BYTE)v77)
      {
        int v5 = v76;
        int v76 = 0;
        if (v5) {
          WTF::RefCounted<WebCore::FormData>::deref(v5);
        }
      }
    }
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v63);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v61);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v59);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v57);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v55);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v53);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v51);
  IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v48, a1);
  unsigned __int16 ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(a1);
  unsigned __int16 v7 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(a1);
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v46);
  unsigned __int16 v37 = IPC::Decoder::decode<WebCore::LockHistory>(a1);
  unsigned __int16 v36 = IPC::Decoder::decode<WebCore::LockHistory>(a1);
  unsigned __int16 v8 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v44);
  unsigned int v9 = IPC::Decoder::decode<WTF::OptionSet<WebCore::SandboxFlag>>(a1);
  IPC::Decoder::decode<std::optional<WebCore::OwnerPermissionsPolicyData>>((uint64_t)v99, (uint64_t *)a1);
  int v10 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(a1);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, &v41);
  unsigned __int16 v11 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<std::optional<double>>(a1, &v38);
  unsigned __int16 v12 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v13 = IPC::Decoder::decode<BOOL>(a1);
  unint64_t v14 = IPC::Decoder::decode<std::optional<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>>(a1);
  if (*(void *)a1)
  {
    if (v75)
    {
      uint64_t v16 = v74;
      uint64_t v74 = 0;
      int v76 = (WTF::RefCountedBase *)v16;
      if (v73)
      {
        uint64_t v77 = v71;
        char v78 = v72;
        if (v70)
        {
          long long v79 = v68;
          char v80 = v69;
          if (v67)
          {
            unint64_t v17 = v14;
            WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v81, (uint64_t)v65);
            uint64_t v18 = v66;
            uint64_t v66 = 0;
            v81[24] = v18;
            if (v64)
            {
              uint64_t v19 = v63;
              unint64_t v63 = 0;
              v81[25] = v19;
              if (v62)
              {
                uint64_t v20 = v61;
                unint64_t v61 = 0;
                v81[26] = v20;
                if (v60)
                {
                  uint64_t v21 = v59;
                  uint64_t v59 = 0;
                  v81[27] = v21;
                  if (v58)
                  {
                    uint64_t v22 = v57;
                    uint64_t v57 = 0;
                    v81[28] = v22;
                    if (v56)
                    {
                      uint64_t v23 = v55;
                      uint64_t v55 = 0;
                      v81[29] = v23;
                      if (v54)
                      {
                        uint64_t v24 = v53;
                        uint64_t v53 = 0;
                        v81[30] = v24;
                        if (v52)
                        {
                          uint64_t v25 = v51;
                          uint64_t v51 = 0;
                          v81[31] = v25;
                          if (v50)
                          {
                            std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v82, (uint64_t)v48);
                            if (ShouldOpenExternalURLs > 0xFFu)
                            {
                              v82[128] = ShouldOpenExternalURLs;
                              if (v7 > 0xFFu)
                              {
                                v82[129] = v7;
                                if (v47)
                                {
                                  uint64_t v26 = v46;
                                  if (v46) {
                                    CFRetain(*(CFTypeRef *)(v46 + 8));
                                  }
                                  uint64_t v83 = v26;
                                  if (v37 > 0xFFu)
                                  {
                                    char v84 = v37;
                                    if (v36 > 0xFFu)
                                    {
                                      char v85 = v36;
                                      if (v8 > 0xFFu)
                                      {
                                        char v86 = v8;
                                        if (v45)
                                        {
                                          uint64_t v27 = v44;
                                          uint64_t v44 = 0;
                                          uint64_t v87 = v27;
                                          if (HIWORD(v9))
                                          {
                                            __int16 v88 = v9;
                                            if (v100)
                                            {
                                              std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100]((uint64_t)v89, (uint64_t)v99);
                                              if ((v10 & 0xFF0000) != 0)
                                              {
                                                v89[28] = v10;
                                                if (v43)
                                                {
                                                  uint64_t v90 = v41;
                                                  char v91 = v42;
                                                  if (v11 > 0xFFu)
                                                  {
                                                    char v92 = v11;
                                                    if (v40)
                                                    {
                                                      uint64_t v93 = v38;
                                                      char v94 = v39;
                                                      if (v12 > 0xFFu)
                                                      {
                                                        char v95 = v12;
                                                        if (v13 > 0xFFu)
                                                        {
                                                          char v96 = v13;
                                                          if (WORD2(v17))
                                                          {
                                                            __int16 v97 = v17;
                                                            char v98 = BYTE2(v17);
                                                            *(unsigned char *)(WebKit::LoadParameters::LoadParameters((uint64_t)a2, (uint64_t *)&v76)+ 584) = 1;
                                                            WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v76, v28);
                                                            goto LABEL_41;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_54:
    __break(1u);
LABEL_55:
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v63);
    goto LABEL_53;
  }
  *a2 = 0;
  a2[584] = 0;
LABEL_41:
  if (v100) {
    std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v99, v15);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44);
  if (v47)
  {
    uint64_t v30 = v46;
    uint64_t v46 = 0;
    if (v30) {
      CFRelease(*(CFTypeRef *)(v30 + 8));
    }
  }
  if (v50 && v49) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v48, v29);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v53);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59);
  if (v62)
  {
    char v32 = v61;
    unint64_t v61 = 0;
    if (v32) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v31);
    }
  }
  if (v64) {
    goto LABEL_55;
  }
LABEL_53:
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v65);
  return std::optional<WebCore::PublicSuffix>::~optional((uint64_t)&v74, v33);
}

void sub_1988318F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebCore::ResourceRequest *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::RefCountedBase *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,__int16 a53)
{
  if (a22) {
    WTF::RefCounted<WebCore::FormData>::deref(a22);
  }
  if (LOBYTE(STACK[0x280]))
  {
    char v54 = (WTF::RefCountedBase *)STACK[0x278];
    STACK[0x278] = 0;
    if (v54) {
      WTF::RefCounted<WebCore::FormData>::deref(v54);
    }
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a53);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)&STACK[0x268], v55);
  _Unwind_Resume(a1);
}

void sub_198831B78()
{
}

void sub_198831B84()
{
}

void sub_198831B98()
{
}

void sub_198831BA8()
{
}

void sub_198831BB0()
{
}

void sub_198831BB8()
{
}

void sub_198831BC0()
{
}

void sub_198831BC8()
{
}

void sub_198831BD0()
{
}

void sub_198831BD8()
{
}

void sub_198831BE8()
{
}

void sub_198831BF8()
{
}

WTF::RefCountedBase *IPC::Decoder::decode<IPC::FormDataReference>@<X0>(WTF *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<IPC::FormDataReference,void>::decode(a1, a2);
  if (!a2[8])
  {
    return (WTF::RefCountedBase *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[8]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198831C8C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v4 = *(unsigned int **)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WebCore::LockHistory>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::OwnerPermissionsPolicyData>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2[2];
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  unint64_t v10 = v7 - v8;
  if (v9 <= v10)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v55 = a2[3];
    if (v55)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
        uint64_t v54 = *a2;
        uint64_t v53 = a2[1];
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v54 = 0;
      }
    }
    goto LABEL_89;
  }
  unsigned __int16 v11 = (unsigned __int8 *)(v8 + v10);
  a2[2] = (uint64_t)(v11 + 1);
  if (!v8)
  {
    uint64_t v53 = v9;
    uint64_t v54 = 0;
LABEL_89:
    unint64_t v9 = 0;
    uint64_t v8 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v56 = a2[3];
    if (v56)
    {
      if (v53)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v56 + 16))(v56, v54, v53);
        uint64_t v8 = *a2;
        unint64_t v9 = a2[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_90;
  }
  unsigned int v12 = *v11;
  if (v12 < 2)
  {
    if (!v12)
    {
      v69[0] = 0;
      char v71 = 0;
      std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v69);
      char v44 = 1;
LABEL_60:
      *(unsigned char *)(a1 + 56) = v44;
      uint64_t result = std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v42);
      goto LABEL_61;
    }
    IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v77);
    unint64_t v13 = a2[1];
    uint64_t v14 = *a2;
    unint64_t v15 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
    if (v13 < v15 || v13 - v15 <= 3)
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v59 = a2[3];
      if (v59)
      {
        if (v13)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v59 + 16))(v59, v14, v13);
          uint64_t v58 = *a2;
          uint64_t v57 = a2[1];
        }
        else
        {
          uint64_t v57 = 0;
          uint64_t v58 = 0;
        }
      }
      goto LABEL_93;
    }
    unint64_t v17 = (int *)(v14 + v15);
    a2[2] = (uint64_t)(v17 + 1);
    if (!v14)
    {
      uint64_t v57 = v13;
      uint64_t v58 = 0;
LABEL_93:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v60 = a2[3];
      if (v60 && v57) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
      }
      LOBYTE(v72) = 0;
      LOBYTE(v73) = 0;
LABEL_69:
      unint64_t v33 = 0;
      uint64_t v47 = *a2;
      uint64_t v46 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v48 = a2[3];
      if (v48)
      {
        if (v46)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v47);
          unint64_t v33 = (void *)*a2;
          if (*a2) {
            goto LABEL_107;
          }
        }
        else
        {
          unint64_t v33 = 0;
        }
      }
LABEL_70:
      uint64_t v49 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v50 = a2[3];
      if (v50 && v49) {
        (*(void (**)(uint64_t, void *))(*(void *)v50 + 16))(v50, v33);
      }
      uint64_t v3 = 0;
      int v4 = 1;
      goto LABEL_41;
    }
    int v18 = *v17;
    v65[0] = 0;
    if (!v18)
    {
      char v72 = 0;
      LOBYTE(v73) = 1;
LABEL_37:
      WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(v65, &v72);
      uint64_t v3 = v65[0];
      if ((_BYTE)v73 && v72) {
        WTF::fastFree((WTF *)(v72 - 16), v33);
      }
      int v4 = 0;
LABEL_41:
      unint64_t v34 = a2[1];
      uint64_t v35 = *a2;
      unint64_t v36 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
      if (v34 < v36 || v34 - v36 <= 3)
      {
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v63 = a2[3];
        if (v63)
        {
          if (v34)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v63 + 16))(v63, v35, v34);
            uint64_t v62 = *a2;
            uint64_t v61 = a2[1];
          }
          else
          {
            uint64_t v61 = 0;
            uint64_t v62 = 0;
          }
        }
        goto LABEL_96;
      }
      uint64_t v38 = (int *)(v35 + v36);
      a2[2] = (uint64_t)(v38 + 1);
      if (!v35)
      {
        uint64_t v61 = v34;
        uint64_t v62 = 0;
LABEL_96:
        uint64_t v2 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v64 = a2[3];
        if (v64)
        {
          if (v61) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 16))(v64, v62);
          }
          uint64_t v2 = 0;
        }
        while (1)
        {
          IPC::Decoder::markInvalid((IPC::Decoder *)a2);
          if (!*a2)
          {
            v69[0] = 0;
            char v71 = 0;
            goto LABEL_85;
          }
          int v40 = 1;
LABEL_50:
          if (v79 && !v4 && !v40) {
            break;
          }
LABEL_107:
          __break(1u);
LABEL_108:
          v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_109:
          if (v68) {
            WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v68, v33);
          }
        }
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v72, (uint64_t)v77);
        *(void *)&long long v76 = v3;
        *((void *)&v76 + 1) = v2;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v69, (uint64_t)&v72);
        long long v41 = v76;
        long long v76 = 0uLL;
        long long v70 = v41;
        char v71 = 1;
        if (v75 != -1) {
          ((void (*)(uint64_t *, unsigned __int8 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v75])(v65, &v72);
        }
LABEL_55:
        if (v79 && v78 != -1) {
          ((void (*)(unsigned __int8 **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v78])(&v72, v77);
        }
        if (v71 || (IPC::Decoder::markInvalid((IPC::Decoder *)a2), (char v44 = v71) != 0))
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, (uint64_t)v69);
          long long v43 = v70;
          long long v70 = 0uLL;
          *(_OWORD *)(a1 + 32) = v43;
          char v44 = 1;
          *(unsigned char *)(a1 + 48) = 1;
        }
        else
        {
          *(unsigned char *)a1 = 0;
        }
        goto LABEL_60;
      }
      int v39 = *v38;
      uint64_t v68 = 0;
      if (!v39)
      {
        uint64_t v2 = 0;
        goto LABEL_49;
      }
      while (1)
      {
        int v51 = IPC::Decoder::decode<WebCore::PermissionsPolicy::Feature>((IPC::Decoder *)a2);
        __int16 v67 = v51;
        if ((unsigned __int16)v51 <= 0xFFu) {
          goto LABEL_108;
        }
        IPC::Decoder::decode<WebCore::Allowlist>(&v72, a2);
        if (!v74) {
          goto LABEL_108;
        }
        if ((~v51 & 0xFE) == 0) {
          break;
        }
        WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::add<WebCore::Allowlist>((uint64_t)v65, &v68, &v67, (uint64_t)&v72);
        if (!v66)
        {
          v2 &= 0xFFFFFFFFFFFFFF00;
          if (!v74) {
            goto LABEL_109;
          }
          char v52 = 0;
LABEL_78:
          if (v73 != -1) {
            ((void (*)(uint64_t *, unsigned __int8 **))off_1EE9B3D98[v73])(v65, &v72);
          }
          if ((v52 & 1) == 0) {
            goto LABEL_109;
          }
          goto LABEL_81;
        }
        if (v74)
        {
          char v52 = 1;
          goto LABEL_78;
        }
LABEL_81:
        if (!--v39)
        {
          uint64_t v2 = v68;
          if (!*a2)
          {
            v69[0] = 0;
            char v71 = 0;
            if (v68) {
              WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v68, v33);
            }
LABEL_85:
            if ((v4 & 1) == 0 && v3) {
              WTF::fastFree((WTF *)(v3 - 16), v33);
            }
            goto LABEL_55;
          }
LABEL_49:
          int v40 = 0;
          goto LABEL_50;
        }
      }
      char v52 = 0;
      v2 &= 0xFFFFFFFFFFFFFF00;
      goto LABEL_78;
    }
    uint64_t v3 = 0;
    int v4 = 254;
    while (1)
    {
      uint64_t v19 = IPC::ArgumentCoder<WebCore::PermissionsPolicy::Feature,void>::decode<IPC::Decoder>(a2);
      uint64_t v2 = v19;
      if ((unsigned __int16)v19 <= 0xFFu)
      {
        IPC::Decoder::markInvalid((IPC::Decoder *)a2);
LABEL_67:
        LOBYTE(v72) = 0;
        LOBYTE(v73) = 0;
        if (v65[0]) {
          WTF::fastFree((WTF *)(v65[0] - 16), v20);
        }
        goto LABEL_69;
      }
      if ((~v19 & 0xFE) == 0) {
        goto LABEL_67;
      }
      uint64_t v21 = v65[0];
      if (v65[0]
        || (WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(v65),
            (uint64_t v21 = v65[0]) != 0))
      {
        unsigned int v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        unsigned int v22 = 0;
      }
      unsigned int v23 = ~(v2 << 15) + v2;
      unsigned int v24 = (9 * (v23 ^ (v23 >> 10))) ^ ((9 * (v23 ^ (v23 >> 10))) >> 6);
      uint64_t v25 = v22 & ((v24 + ~(v24 << 11)) ^ ((v24 + ~(v24 << 11)) >> 16));
      uint64_t v20 = (unsigned char *)(v21 + v25);
      int v26 = *(unsigned __int8 *)(v21 + v25);
      if (v26 != 255)
      {
        char v31 = 0;
        int v32 = 1;
        while (v26 != v2)
        {
          if (v26 == 254) {
            char v31 = v20;
          }
          uint64_t v25 = (v25 + v32) & v22;
          uint64_t v20 = (unsigned char *)(v21 + v25);
          int v26 = *(unsigned __int8 *)(v21 + v25);
          ++v32;
          if (v26 == 255)
          {
            if (v31)
            {
              *char v31 = -1;
              --*(_DWORD *)(v65[0] - 16);
              uint64_t v20 = v31;
            }
            goto LABEL_18;
          }
        }
        goto LABEL_67;
      }
LABEL_18:
      *uint64_t v20 = v2;
      uint64_t v27 = v65[0];
      if (v65[0]) {
        int v28 = *(_DWORD *)(v65[0] - 12) + 1;
      }
      else {
        int v28 = 1;
      }
      *(_DWORD *)(v65[0] - 12) = v28;
      uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
      unint64_t v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400)
      {
        if (v30 <= 2 * v29) {
LABEL_35:
        }
          WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(v65);
      }
      else if (3 * v30 <= 4 * v29)
      {
        goto LABEL_35;
      }
      uint64_t v3 = (v3 + 1);
      if (v3 == v18)
      {
        unint64_t v33 = (void *)*a2;
        char v72 = (unsigned __int8 *)v65[0];
        LOBYTE(v73) = 1;
        if (v33) {
          goto LABEL_37;
        }
        if (v65[0])
        {
          WTF::fastFree((WTF *)(v65[0] - 16), 0);
          unint64_t v33 = (void *)*a2;
        }
        goto LABEL_70;
      }
    }
  }
LABEL_90:
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v9) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
LABEL_61:
  if (!*(unsigned char *)(a1 + 56)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

void sub_198832560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24)
{
  if (*(unsigned char *)(v24 - 96))
  {
    uint64_t v26 = *(unsigned int *)(v24 - 104);
    if (v26 != -1) {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v26])(&a9, v24 - 128);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<std::optional<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>>(IPC::Decoder *a1)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *((void *)a1 + 2) - *(void *)a1;
  if (v2 <= v4)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *(void *)a1;
        unint64_t v14 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_12;
  }
  int v5 = (unsigned __int8 *)(v3 + v4);
  *((void *)a1 + 2) = v5 + 1;
  if (!v3)
  {
    unint64_t v14 = v2;
    uint64_t v15 = 0;
LABEL_12:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v3 = *(void *)a1;
        unint64_t v2 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      uint64_t v7 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(a1);
      unsigned int v8 = v7 & 0xFF00;
      int v9 = v7;
      BOOL v10 = (v7 & 0xFF0000) != 0;
      int v11 = 0x10000;
      if ((v7 & 0xFF0000) == 0)
      {
        int v9 = 0;
        unsigned int v8 = 0;
      }
    }
    else
    {
      int v11 = 0;
      int v9 = 0;
      unsigned int v8 = 0;
      BOOL v10 = 1;
    }
    goto LABEL_7;
  }
LABEL_13:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v18 = *((void *)a1 + 3);
  if (v18 && v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v3);
  }
  BOOL v10 = 0;
  int v11 = 0;
  int v9 = 0;
  unsigned int v8 = 0;
LABEL_7:
  unint64_t v12 = v9 | v11 | v8 | ((unint64_t)v10 << 32);
  if (!v10) {
    IPC::Decoder::markInvalid(a1);
  }
  return v12;
}

uint64_t IPC::ArgumentCoder<WebKit::ModelIdentifier,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v6);
  uint64_t v5 = *(void *)a1;
  if (!*(void *)a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v4 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v2;
  }
  return result;
}

WTF::RefCountedBase *IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  LOBYTE(v29) = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
  LOBYTE(v29) = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 2));
  LOBYTE(v29) = *(unsigned char *)(a2 + 3);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
  if (*(unsigned char *)(a2 + 24))
  {
    LOBYTE(v29) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
    if (!*(unsigned char *)(a2 + 24)) {
      goto LABEL_36;
    }
    IPC::Encoder::operator<<<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, (uint64_t *)(a2 + 8));
  }
  else
  {
    unint64_t v4 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v5) {
      goto LABEL_46;
    }
    *unint64_t v4 = 0;
  }
  IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(a1, a2 + 32);
  char v6 = *(unsigned char *)(a2 + 64);
  char v7 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198832D24);
  }
  *char v7 = v6;
  LOBYTE(v29) = *(unsigned char *)(a2 + 65);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 80));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 84));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(a2 + 88));
  char v9 = *(unsigned char *)(a2 + 344);
  BOOL v10 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198832D44);
  }
  *BOOL v10 = v9;
  char v12 = *(unsigned char *)(a2 + 345);
  unint64_t v13 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198832D64);
  }
  *unint64_t v13 = v12;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 346));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 347));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 348));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 349));
  LOBYTE(v29) = *(_DWORD *)(a2 + 376);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 352, v29);
  LOBYTE(v29) = *(_DWORD *)(a2 + 408);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 384, v29);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 416);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 440);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 464));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 465));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 472));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 480));
  int v15 = *(unsigned __int8 *)(a2 + 536);
  uint64_t v16 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v15)
  {
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198832DE4);
    }
    *uint64_t v16 = 1;
    if (!*(unsigned char *)(a2 + 536)) {
      goto LABEL_36;
    }
    IPC::ArgumentCoder<WebCore::OwnerPermissionsPolicyData,void>::encode(a1, a2 + 488);
  }
  else
  {
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198832E04);
    }
    *uint64_t v16 = 0;
  }
  if (*(unsigned char *)(a2 + 856))
  {
    LOBYTE(v29) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
    if (!*(unsigned char *)(a2 + 856)) {
      goto LABEL_36;
    }
    IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::encode(a1, a2 + 544);
  }
  else
  {
    uint64_t v18 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x198832D84);
    }
    *uint64_t v18 = 0;
  }
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 864));
  int v20 = *(unsigned __int8 *)(a2 + 868);
  uint64_t v21 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v20)
  {
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198832DC4);
    }
    *uint64_t v21 = 1;
    if (*(unsigned char *)(a2 + 868))
    {
      IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 866));
      goto LABEL_18;
    }
LABEL_36:
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_46;
  }
  if (!v22)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198832D04);
  }
  *uint64_t v21 = 0;
LABEL_18:
  if (*(unsigned char *)(a2 + 1536))
  {
    LOBYTE(v29) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v29);
    if (*(unsigned char *)(a2 + 1536))
    {
      IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode(a1, a2 + 872);
      goto LABEL_21;
    }
    goto LABEL_36;
  }
  unsigned int v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198832DA4);
  }
  *unsigned int v23 = 0;
LABEL_21:
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 1544));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, a2 + 1840);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 1856));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, a2 + 2152);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 2168));
  uint64_t v25 = (WebCore::ResourceRequest *)(a2 + 2368);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, v25);
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v28, v25);
  uint64_t v26 = v28;
  int v28 = 0;
  uint64_t v29 = v26;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(a1, &v29);
  if (v26) {
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v26);
  }
  unint64_t result = (WTF::RefCountedBase *)v28;
  int v28 = 0;
  if (result) {
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  }
  return result;
}

void sub_198832E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::RefCountedBase *a9)
{
  if (v9) {
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  }
  if (a9) {
    WTF::RefCounted<WebCore::FormData>::deref(a9);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::NavigationActionData,void>::decode()
{
  v0 = (uint64_t *)MEMORY[0x1F4188790]();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  v318[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = v0[1];
  uint64_t v5 = *v0;
  unint64_t v6 = v0[2] - *v0;
  if (v4 <= v6)
  {
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t *v0 = 0;
    v0[1] = 0;
    uint64_t v99 = v0[3];
    if (v99)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v99 + 16))(v99, v5, v4);
        uint64_t v98 = *v1;
        uint64_t v97 = v1[1];
      }
      else
      {
        uint64_t v97 = 0;
        uint64_t v98 = 0;
      }
    }
    goto LABEL_166;
  }
  char v7 = (unsigned char *)(v5 + v6);
  v0[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v97 = v4;
    uint64_t v98 = 0;
LABEL_166:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v100 = v1[3];
    if (v100 && v97) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v100 + 16))(v100, v98);
    }
    goto LABEL_167;
  }
  if (*v7 < 6u)
  {
    LOBYTE(v168) = *v7;
    LODWORD(v170) = 0;
    goto LABEL_5;
  }
LABEL_167:
  IPC::Decoder::markInvalid((IPC::Decoder *)v1);
  LOBYTE(v168) = 0;
  LODWORD(v170) = 1;
LABEL_5:
  unsigned __int16 v169 = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::decode<IPC::Decoder>(v1);
  if (v169 <= 0xFFu) {
    IPC::Decoder::markInvalid((IPC::Decoder *)v1);
  }
  unsigned __int16 v167 = IPC::ArgumentCoder<WebKit::WebMouseEventButton,void>::decode<IPC::Decoder>((IPC::Decoder *)v1);
  if (v167 <= 0xFFu) {
    IPC::Decoder::markInvalid((IPC::Decoder *)v1);
  }
  unsigned __int16 v166 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(v1);
  if (v166 <= 0xFFu) {
    IPC::Decoder::markInvalid((IPC::Decoder *)v1);
  }
  uint64_t v8 = (__int16 *)&v315;
  char v9 = (uint64_t *)&v219;
  unint64_t v10 = v1[1];
  uint64_t v11 = *v1;
  unint64_t v12 = v1[2] - *v1;
  if (v10 <= v12)
  {
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v103 = v1[3];
    if (v103)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v103 + 16))(v103);
        uint64_t v102 = *v1;
        uint64_t v101 = v1[1];
      }
      else
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0;
      }
    }
    goto LABEL_169;
  }
  unint64_t v13 = (unsigned __int8 *)(v11 + v12);
  v1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    uint64_t v101 = v10;
    uint64_t v102 = 0;
LABEL_169:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v104 = v1[3];
    if (v104)
    {
      if (v101)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v104 + 16))(v104, v102, v101);
        uint64_t v11 = *v1;
        unint64_t v10 = v1[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_170;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_170:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v105 = v1[3];
    if (v105 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v105 + 16))(v105, v11);
    }
    goto LABEL_171;
  }
  if (v14) {
    goto LABEL_157;
  }
  uint64_t v165 = 0;
  char v161 = 0;
  while (1)
  {
    IPC::Decoder::decode<std::optional<WTF::UUID>>((IPC::Decoder *)v1, (uint64_t)&v315);
    unint64_t v15 = v1[1];
    uint64_t v16 = *v1;
    unint64_t v17 = v1[2] - *v1;
    if (v15 <= v17)
    {
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v108 = v1[3];
      if (v108)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(void *)v108 + 16))(v108);
          uint64_t v107 = *v1;
          uint64_t v106 = v1[1];
        }
        else
        {
          uint64_t v106 = 0;
          uint64_t v107 = 0;
        }
      }
      goto LABEL_173;
    }
    uint64_t v18 = (unsigned __int8 *)(v16 + v17);
    v1[2] = (uint64_t)(v18 + 1);
    if (!v16)
    {
      uint64_t v106 = v15;
      uint64_t v107 = 0;
LABEL_173:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v109 = v1[3];
      if (v109 && v106)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v109 + 16))(v109, v107, v106);
        unsigned int v19 = 0;
        uint64_t v16 = *v1;
        unint64_t v15 = v1[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v19 = 0;
      }
      goto LABEL_175;
    }
    unsigned int v19 = *v18;
    if (v19 < 2)
    {
      int v164 = 0;
      char v20 = 1;
      goto LABEL_20;
    }
LABEL_175:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v110 = v1[3];
    if (v110 && v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v110 + 16))(v110, v16);
    }
    char v20 = 0;
    int v164 = 1;
LABEL_20:
    if (v19) {
      char v21 = v20;
    }
    else {
      char v21 = 0;
    }
    unsigned __int16 v22 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(v1);
    if (v22 <= 0xFFu) {
      IPC::Decoder::markInvalid((IPC::Decoder *)v1);
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v1, (uint64_t)&v217);
    int v159 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v1);
    uint64_t v160 = v23;
    if (!v23)
    {
      uint64_t v111 = *v1;
      uint64_t v112 = v1[1];
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v113 = v1[3];
      if (v113)
      {
        if (v112) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v113 + 16))(v113, v111);
        }
      }
    }
    IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)v1, &v195);
    unint64_t v24 = v1[1];
    uint64_t v25 = *v1;
    unint64_t v26 = v1[2] - *v1;
    unsigned __int16 v162 = v22;
    char v163 = v21;
    if (v24 <= v26)
    {
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v116 = v1[3];
      if (v116)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v116 + 16))(v116);
          uint64_t v115 = *v1;
          uint64_t v114 = v1[1];
        }
        else
        {
          uint64_t v114 = 0;
          uint64_t v115 = 0;
        }
      }
      goto LABEL_181;
    }
    uint64_t v27 = (unsigned __int8 *)(v25 + v26);
    uint64_t v28 = v25 + v26 + 1;
    v1[2] = v28;
    if (!v25)
    {
      uint64_t v114 = v24;
      uint64_t v115 = 0;
LABEL_181:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v117 = v1[3];
      if (v117 && v114)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117 + 16))(v117, v115, v114);
        unsigned int v29 = 0;
        uint64_t v25 = *v1;
        unint64_t v24 = v1[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v29 = 0;
      }
      goto LABEL_183;
    }
    unsigned int v29 = *v27;
    if (v29 < 2)
    {
      int v158 = 0;
      char v30 = 1;
      goto LABEL_30;
    }
LABEL_183:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v118 = v1[3];
    if (!v118 || !v24)
    {
      uint64_t v119 = 0;
      uint64_t v25 = 0;
      char v157 = 0;
      int v158 = 1;
LABEL_185:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v120 = v1[3];
      if (v120 && v119)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v120 + 16))(v120, v25, v119);
        unsigned int v34 = 0;
        uint64_t v25 = *v1;
        unint64_t v24 = v1[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v34 = 0;
      }
      goto LABEL_187;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v118 + 16))(v118, v25);
    char v30 = 0;
    uint64_t v25 = *v1;
    unint64_t v24 = v1[1];
    int v158 = 1;
    uint64_t v28 = v1[2];
LABEL_30:
    if (!v29) {
      char v30 = 0;
    }
    char v157 = v30;
    unint64_t v31 = v28 - v25;
    if (v24 <= v31)
    {
      uint64_t v119 = 0;
      uint64_t v144 = v1[3];
      *uint64_t v1 = 0;
      v1[1] = 0;
      if (v144 && v24)
      {
        (*(void (**)(uint64_t))(*(void *)v144 + 16))(v144);
        uint64_t v25 = *v1;
        uint64_t v119 = v1[1];
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_185;
    }
    int v32 = (unsigned __int8 *)(v25 + v31);
    uint64_t v33 = v25 + v31 + 1;
    v1[2] = v33;
    if (!v25)
    {
      uint64_t v119 = v24;
      goto LABEL_185;
    }
    unsigned int v34 = *v32;
    if (v34 < 2)
    {
      int v156 = 0;
      char v35 = 1;
      goto LABEL_36;
    }
LABEL_187:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v121 = v1[3];
    if (!v121 || !v24)
    {
      uint64_t v122 = 0;
      uint64_t v25 = 0;
      char v155 = 0;
      int v156 = 1;
LABEL_189:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v123 = v1[3];
      if (v123 && v122)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v123 + 16))(v123, v25, v122);
        unsigned int v39 = 0;
        uint64_t v25 = *v1;
        unint64_t v24 = v1[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v39 = 0;
      }
      goto LABEL_191;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v121 + 16))(v121, v25);
    char v35 = 0;
    uint64_t v25 = *v1;
    unint64_t v24 = v1[1];
    int v156 = 1;
    uint64_t v33 = v1[2];
LABEL_36:
    if (!v34) {
      char v35 = 0;
    }
    char v155 = v35;
    unint64_t v36 = v33 - v25;
    if (v24 <= v36)
    {
      uint64_t v122 = 0;
      uint64_t v145 = v1[3];
      *uint64_t v1 = 0;
      v1[1] = 0;
      if (v145 && v24)
      {
        (*(void (**)(uint64_t))(*(void *)v145 + 16))(v145);
        uint64_t v25 = *v1;
        uint64_t v122 = v1[1];
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_189;
    }
    unsigned __int16 v37 = (unsigned __int8 *)(v25 + v36);
    uint64_t v38 = v25 + v36 + 1;
    v1[2] = v38;
    if (!v25)
    {
      uint64_t v122 = v24;
      goto LABEL_189;
    }
    unsigned int v39 = *v37;
    if (v39 < 2)
    {
      int v154 = 0;
      char v40 = 1;
      goto LABEL_42;
    }
LABEL_191:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v124 = v1[3];
    if (!v124 || !v24)
    {
      uint64_t v125 = 0;
      uint64_t v25 = 0;
      char v153 = 0;
      int v154 = 1;
LABEL_193:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v126 = v1[3];
      if (v126 && v125)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v126 + 16))(v126, v25, v125);
        unsigned int v44 = 0;
        uint64_t v25 = *v1;
        unint64_t v24 = v1[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v44 = 0;
      }
      goto LABEL_195;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v124 + 16))(v124, v25);
    char v40 = 0;
    uint64_t v25 = *v1;
    unint64_t v24 = v1[1];
    int v154 = 1;
    uint64_t v38 = v1[2];
LABEL_42:
    if (!v39) {
      char v40 = 0;
    }
    char v153 = v40;
    unint64_t v41 = v38 - v25;
    if (v24 <= v41)
    {
      uint64_t v125 = 0;
      uint64_t v146 = v1[3];
      *uint64_t v1 = 0;
      v1[1] = 0;
      if (v146 && v24)
      {
        (*(void (**)(uint64_t))(*(void *)v146 + 16))(v146);
        uint64_t v25 = *v1;
        uint64_t v125 = v1[1];
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_193;
    }
    char v42 = (unsigned __int8 *)(v25 + v41);
    uint64_t v43 = v25 + v41 + 1;
    v1[2] = v43;
    if (!v25)
    {
      uint64_t v125 = v24;
      goto LABEL_193;
    }
    unsigned int v44 = *v42;
    if (v44 < 2)
    {
      int v152 = 0;
      char v45 = 1;
      goto LABEL_48;
    }
LABEL_195:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v127 = v1[3];
    if (!v127 || !v24)
    {
      uint64_t v128 = 0;
      uint64_t v25 = 0;
      char v151 = 0;
      int v152 = 1;
LABEL_197:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v129 = v1[3];
      if (v129 && v128)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129 + 16))(v129, v25, v128);
        unsigned int v49 = 0;
        uint64_t v25 = *v1;
        unint64_t v24 = v1[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v49 = 0;
      }
      goto LABEL_199;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v127 + 16))(v127, v25);
    char v45 = 0;
    uint64_t v25 = *v1;
    unint64_t v24 = v1[1];
    int v152 = 1;
    uint64_t v43 = v1[2];
LABEL_48:
    if (!v44) {
      char v45 = 0;
    }
    char v151 = v45;
    unint64_t v46 = v43 - v25;
    if (v24 <= v46)
    {
      uint64_t v128 = 0;
      uint64_t v147 = v1[3];
      *uint64_t v1 = 0;
      v1[1] = 0;
      if (v147 && v24)
      {
        (*(void (**)(uint64_t))(*(void *)v147 + 16))(v147);
        uint64_t v25 = *v1;
        uint64_t v128 = v1[1];
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_197;
    }
    uint64_t v47 = (unsigned __int8 *)(v25 + v46);
    uint64_t v48 = v25 + v46 + 1;
    v1[2] = v48;
    if (!v25)
    {
      uint64_t v128 = v24;
      goto LABEL_197;
    }
    unsigned int v49 = *v47;
    if (v49 < 2)
    {
      int v150 = 0;
      char v50 = 1;
      goto LABEL_54;
    }
LABEL_199:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v130 = v1[3];
    if (!v130 || !v24)
    {
      uint64_t v131 = 0;
      uint64_t v25 = 0;
      char v149 = 0;
      int v150 = 1;
LABEL_201:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v132 = v1[3];
      if (v132 && v131)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132 + 16))(v132, v25, v131);
        unsigned int v53 = 0;
        uint64_t v25 = *v1;
        unint64_t v24 = v1[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v53 = 0;
      }
      goto LABEL_203;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v130 + 16))(v130, v25);
    char v50 = 0;
    uint64_t v25 = *v1;
    unint64_t v24 = v1[1];
    int v150 = 1;
    uint64_t v48 = v1[2];
LABEL_54:
    if (!v49) {
      char v50 = 0;
    }
    char v149 = v50;
    unint64_t v51 = v48 - v25;
    if (v24 <= v51)
    {
      uint64_t v131 = 0;
      uint64_t v148 = v1[3];
      *uint64_t v1 = 0;
      v1[1] = 0;
      if (v148 && v24)
      {
        (*(void (**)(uint64_t))(*(void *)v148 + 16))(v148);
        uint64_t v25 = *v1;
        uint64_t v131 = v1[1];
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_201;
    }
    char v52 = (unsigned __int8 *)(v25 + v51);
    v1[2] = (uint64_t)(v52 + 1);
    if (!v25)
    {
      uint64_t v131 = v24;
      goto LABEL_201;
    }
    unsigned int v53 = *v52;
    if (v53 < 2)
    {
      int v54 = 0;
      char v55 = 1;
      goto LABEL_60;
    }
LABEL_203:
    *uint64_t v1 = 0;
    v1[1] = 0;
    uint64_t v133 = v1[3];
    if (v133 && v24) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v133 + 16))(v133, v25);
    }
    char v55 = 0;
    int v54 = 1;
LABEL_60:
    if (v53) {
      char v56 = v55;
    }
    else {
      char v56 = 0;
    }
    IPC::Decoder::decode<WebCore::SecurityOriginData>(v1, v312);
    uint64_t v8 = &v296;
    IPC::Decoder::decode<WebCore::SecurityOriginData>(v1, v309);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v1, (uint64_t)&v192);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v1, (uint64_t)&v189);
    unsigned __int16 v57 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v1);
    if (v57 <= 0xFFu) {
      IPC::Decoder::markInvalid((IPC::Decoder *)v1);
    }
    unsigned __int16 v58 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v1);
    if (v58 <= 0xFFu) {
      IPC::Decoder::markInvalid((IPC::Decoder *)v1);
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v1, (uint64_t)&v187);
    unsigned int v59 = IPC::Decoder::decode<WTF::OptionSet<WebCore::SandboxFlag>>((IPC::Decoder *)v1);
    IPC::Decoder::decode<std::optional<WebCore::OwnerPermissionsPolicyData>>((uint64_t)v307, v1);
    unint64_t v60 = v1[1];
    uint64_t v61 = *v1;
    unint64_t v62 = v1[2] - *v1;
    if (v60 <= v62)
    {
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v136 = v1[3];
      if (v136)
      {
        if (v60)
        {
          (*(void (**)(uint64_t))(*(void *)v136 + 16))(v136);
          uint64_t v135 = *v1;
          uint64_t v134 = v1[1];
        }
        else
        {
          uint64_t v134 = 0;
          uint64_t v135 = 0;
        }
      }
LABEL_206:
      unint64_t v60 = 0;
      uint64_t v61 = 0;
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v137 = v1[3];
      if (v137)
      {
        if (v134)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v137 + 16))(v137, v135, v134);
          uint64_t v61 = *v1;
          unint64_t v60 = v1[1];
        }
        else
        {
          unint64_t v60 = 0;
          uint64_t v61 = 0;
        }
      }
LABEL_207:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v138 = v1[3];
      if (v138 && v60) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v138 + 16))(v138, v61);
      }
LABEL_208:
      v184[0] = 0;
      char v186 = 0;
LABEL_209:
      IPC::Decoder::markInvalid((IPC::Decoder *)v1);
      goto LABEL_72;
    }
    uint64_t v63 = (unsigned __int8 *)(v61 + v62);
    v1[2] = (uint64_t)(v63 + 1);
    if (!v61)
    {
      uint64_t v134 = v60;
      uint64_t v135 = 0;
      goto LABEL_206;
    }
    unsigned int v64 = *v63;
    if (v64 >= 2) {
      goto LABEL_207;
    }
    if (!v64)
    {
      v184[0] = 0;
      char v185 = 0;
      char v186 = 1;
      goto LABEL_72;
    }
    IPC::Decoder::decode<WebCore::PrivateClickMeasurement>((IPC::Decoder *)v1, (uint64_t)&v219);
    if (!v246[8]) {
      goto LABEL_208;
    }
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v184, (uint64_t)&v219);
    char v185 = 1;
    char v186 = 1;
    if (v246[8])
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v219, v96);
      if (!v186) {
        goto LABEL_209;
      }
    }
LABEL_72:
    int v65 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>((IPC::Decoder *)v1);
    char v9 = (uint64_t *)IPC::Decoder::decode<std::optional<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>>((IPC::Decoder *)v1);
    unint64_t v66 = v1[1];
    uint64_t v67 = *v1;
    unint64_t v68 = v1[2] - *v1;
    if (v66 <= v68)
    {
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v141 = v1[3];
      if (v141)
      {
        if (v66)
        {
          (*(void (**)(uint64_t))(*(void *)v141 + 16))(v141);
          uint64_t v140 = *v1;
          uint64_t v139 = v1[1];
        }
        else
        {
          uint64_t v139 = 0;
          uint64_t v140 = 0;
        }
      }
LABEL_211:
      unint64_t v66 = 0;
      uint64_t v67 = 0;
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v142 = v1[3];
      if (v142)
      {
        if (v139)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v142 + 16))(v142, v140, v139);
          uint64_t v67 = *v1;
          unint64_t v66 = v1[1];
        }
        else
        {
          unint64_t v66 = 0;
          uint64_t v67 = 0;
        }
      }
LABEL_212:
      *uint64_t v1 = 0;
      v1[1] = 0;
      uint64_t v143 = v1[3];
      if (v143 && v66) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v143 + 16))(v143, v67);
      }
LABEL_213:
      v304[0] = 0;
      uint64_t v8 = &v296;
      char v306 = 0;
      goto LABEL_79;
    }
    char v69 = (unsigned __int8 *)(v67 + v68);
    v1[2] = (uint64_t)(v69 + 1);
    if (!v67)
    {
      uint64_t v139 = v66;
      uint64_t v140 = 0;
      goto LABEL_211;
    }
    unsigned int v70 = *v69;
    if (v70 >= 2) {
      goto LABEL_212;
    }
    if (v70)
    {
      IPC::Decoder::decode<WebKit::WebHitTestResultData>((IPC::Decoder *)v1, &v219);
      if (!v266) {
        goto LABEL_213;
      }
      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v304, (uint64_t *)&v219);
      char v305 = 1;
      uint64_t v8 = &v296;
      char v306 = 1;
    }
    else
    {
      LOBYTE(v219) = 0;
      char v266 = 0;
      std::__optional_move_base<WebKit::WebHitTestResultData,false>::__optional_move_base[abi:sn180100](v304, (uint64_t)&v219);
      char v306 = 1;
    }
    if (v266) {
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&v219);
    }
LABEL_79:
    if (!v306) {
      IPC::Decoder::markInvalid((IPC::Decoder *)v1);
    }
    IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v1, (uint64_t)&v296);
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v1, &v181);
    IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v1, (uint64_t)&v288);
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v1, (uint64_t)&v178);
    IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v1, (uint64_t)v175);
    IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v1, (uint64_t)v172);
    if (v174)
    {
      IPC::Decoder::decode<IPC::FormDataReference>((WTF *)v1, &v219);
      if ((_BYTE)v220)
      {
        if (!v174) {
          goto LABEL_156;
        }
        uint64_t v71 = (uint64_t)v219;
        unint64_t v219 = 0;
        int v171 = (WTF::RefCountedBase *)v71;
        WebCore::ResourceRequestBase::setHTTPBody();
        if (v171) {
          WTF::RefCounted<WebCore::FormData>::deref(v171);
        }
        if ((_BYTE)v220)
        {
          char v72 = v219;
          unint64_t v219 = 0;
          if (v72) {
            WTF::RefCounted<WebCore::FormData>::deref(v72);
          }
        }
      }
    }
    if (!*v1) {
      break;
    }
    if (!v170)
    {
      LOBYTE(v219) = (_BYTE)v168;
      if (v169 > 0xFFu)
      {
        BYTE1(v219) = v169;
        if (v167 > 0xFFu)
        {
          BYTE2(v219) = v167;
          if (v166 > 0xFFu)
          {
            BYTE3(v219) = v166;
            if (!HIDWORD(v165))
            {
              LOBYTE(v220) = v165;
              uint64_t v1 = (uint64_t *)&v219;
              *(void *)((char *)&v220 + 1) = v318[0];
              *((void *)&v220 + 1) = *(void *)((char *)v318 + 7);
              char v221 = v161;
              if (v317)
              {
                long long v222 = v315;
                char v223 = v316;
                if (!v164)
                {
                  char v224 = v163;
                  if (v162 > 0xFFu)
                  {
                    char v225 = v162;
                    if (v218)
                    {
                      int v73 = v217;
                      unint64_t v217 = 0;
                      uint64_t v226 = v73;
                      if (v160)
                      {
                        uint64_t v227 = v159;
                        if (v216)
                        {
                          long long v229 = v196;
                          long long v230 = v197;
                          long long v74 = v200;
                          long long v200 = 0u;
                          long long v75 = v201;
                          long long v201 = 0u;
                          LODWORD(v196) = v196 & 0xFFFFFFFE;
                          uint64_t v76 = v195;
                          uint64_t v77 = v198;
                          uint64_t v195 = 0;
                          uint64_t v198 = 0;
                          uint64_t v228 = v76;
                          uint64_t v231 = v77;
                          uint64_t v232 = v199;
                          long long v233 = v74;
                          long long v234 = v75;
                          *(void *)&long long v74 = v202;
                          uint64_t v202 = 0;
                          uint64_t v235 = v74;
                          uint64_t v78 = v203;
                          uint64_t v203 = 0;
                          uint64_t v236 = v78;
                          *(void *)&long long v74 = v204;
                          uint64_t v204 = 0;
                          uint64_t v237 = v74;
                          uint64_t v79 = v205;
                          uint64_t v205 = 0;
                          uint64_t v238 = v79;
                          LOBYTE(v239) = 0;
                          char v240 = 0;
                          if (v207)
                          {
                            uint64_t v95 = v206;
                            uint64_t v206 = 0;
                            uint64_t v239 = v95;
                            char v240 = 1;
                          }
                          *(_DWORD *)&v246[15] = *(_DWORD *)&v213[15];
                          long long v245 = v212;
                          *(_OWORD *)unint64_t v246 = *(_OWORD *)v213;
                          long long v241 = v208;
                          long long v242 = v209;
                          long long v243 = v210;
                          long long v244 = v211;
                          uint64_t v80 = v214;
                          uint64_t v214 = 0;
                          uint64_t v247 = v80;
                          char v248 = v215;
                          if (!v158)
                          {
                            char v249 = v157;
                            if (!v156)
                            {
                              char v250 = v155;
                              if (!v154)
                              {
                                char v251 = v153;
                                if (!v152)
                                {
                                  char v252 = v151;
                                  if (!v150)
                                  {
                                    char v253 = v149;
                                    if (!v54)
                                    {
                                      char v254 = v56;
                                      if (v314)
                                      {
                                        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v255, (uint64_t)v312);
                                        if (v311)
                                        {
                                          int v170 = v255;
                                          unsigned __int16 v81 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v256, (uint64_t)v309);
                                          if (v194)
                                          {
                                            v256[2] = v192;
                                            char v257 = v193;
                                            if (v191)
                                            {
                                              long long v258 = v189;
                                              char v259 = v190;
                                              if (v57 > 0xFFu)
                                              {
                                                char v260 = v57;
                                                if (v58 > 0xFFu)
                                                {
                                                  char v261 = v58;
                                                  if (v188)
                                                  {
                                                    int v82 = v187;
                                                    int v187 = 0;
                                                    unint64_t v262 = v82;
                                                    if (HIWORD(v59))
                                                    {
                                                      __int16 v263 = v59;
                                                      if (v308)
                                                      {
                                                        unsigned __int16 v169 = v81;
                                                        std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v264, (uint64_t)v307);
                                                        if (v186)
                                                        {
                                                          v265[0] = 0;
                                                          char v267 = 0;
                                                          if (v185)
                                                          {
                                                            WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v265, (uint64_t)v184);
                                                            char v267 = 1;
                                                          }
                                                          if ((v65 & 0xFF0000) != 0)
                                                          {
                                                            __int16 v268 = v65;
                                                            if (WORD2(v9))
                                                            {
                                                              __int16 v269 = (__int16)v9;
                                                              char v270 = BYTE2(v9);
                                                              if (v306)
                                                              {
                                                                int v168 = v265;
                                                                std::__optional_move_base<WebKit::WebHitTestResultData,false>::__optional_move_base[abi:sn180100](v271, (uint64_t)v304);
                                                                uint64_t v1 = (uint64_t *)&v288;
                                                                if (v303)
                                                                {
                                                                  __int16 v272 = v296;
                                                                  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v273, (uint64_t)&v297);
                                                                  uint64_t v83 = v298;
                                                                  uint64_t v298 = 0;
                                                                  v273[24] = v83;
                                                                  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v274, (uint64_t)&v299);
                                                                  uint64_t v84 = v300;
                                                                  uint64_t v300 = 0;
                                                                  v274[4] = v84;
                                                                  *(_OWORD *)((char *)v276 + 14) = *(_OWORD *)((char *)v302 + 14);
                                                                  long long v275 = v301;
                                                                  v276[0] = v302[0];
                                                                  if (v183)
                                                                  {
                                                                    uint64_t v277 = v181;
                                                                    char v278 = v182;
                                                                    if (v295)
                                                                    {
                                                                      char v9 = v3;
                                                                      __int16 v279 = v288;
                                                                      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v280, (uint64_t)&v289);
                                                                      uint64_t v85 = v290;
                                                                      uint64_t v290 = 0;
                                                                      v280[24] = v85;
                                                                      uint64_t v3 = (uint64_t *)&v219;
                                                                      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v281, (uint64_t)&v291);
                                                                      uint64_t v86 = v292;
                                                                      uint64_t v292 = 0;
                                                                      v281[4] = v86;
                                                                      long long v282 = v293;
                                                                      v283[0] = v294[0];
                                                                      *(_OWORD *)((char *)v283 + 14) = *(_OWORD *)((char *)v294 + 14);
                                                                      if (v180)
                                                                      {
                                                                        uint64_t v284 = v178;
                                                                        char v285 = v179;
                                                                        if (v177)
                                                                        {
                                                                          WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v286, (uint64_t)v175);
                                                                          uint64_t v87 = v176;
                                                                          uint64_t v176 = 0;
                                                                          v286[24] = v87;
                                                                          if (v174)
                                                                          {
                                                                            WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v287, (uint64_t)v172);
                                                                            uint64_t v88 = v173;
                                                                            uint64_t v173 = 0;
                                                                            v287[24] = v88;
                                                                            WebKit::NavigationActionData::NavigationActionData((uint64_t)v9, (uint64_t)&v219);
                                                                            *((unsigned char *)v9 + 2576) = 1;
                                                                            WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v219);
                                                                            goto LABEL_131;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_156:
    __break(1u);
LABEL_157:
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v1, (uint64_t)&v219);
    if (BYTE8(v220))
    {
      uint64_t v165 = v219;
      v318[0] = *(uint64_t *)((char *)v9 + 1);
      *(void *)((char *)v8 + 63) = v220;
      char v161 = 1;
    }
    else
    {
LABEL_171:
      IPC::Decoder::markInvalid((IPC::Decoder *)v1);
      uint64_t v165 = 0x100000000;
    }
  }
  *(unsigned char *)uint64_t v3 = 0;
  *((unsigned char *)v3 + 2576) = 0;
LABEL_131:
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v172);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v175);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v288, v89);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v296, v90);
  if (v306 && v305) {
    WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v304);
  }
  if (v186 && v185) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v184, v91);
  }
  if (v308) {
    std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v307, v91);
  }
  if (v188)
  {
    char v92 = v187;
    int v187 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2) {
        WTF::StringImpl::destroy(v92, v91);
      }
      else {
        *(_DWORD *)v92 -= 2;
      }
    }
  }
  if (v311 && v310 != -1) {
    ((void (*)(WTF::RefCountedBase **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v310])(&v219, v309);
  }
  if (v314 && v313 != -1) {
    ((void (*)(WTF::RefCountedBase **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v313])(&v219, v312);
  }
  unint64_t result = std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v195, v91);
  if (v218)
  {
    unint64_t result = v217;
    unint64_t v217 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v94);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988345F8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
}

void sub_19883494C()
{
}

void sub_198834958()
{
}

void sub_198834964()
{
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WebKit::WebMouseEventButton>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::WebMouseEventButton,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

void *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void WebCore::ResourceResponse::~ResourceResponse(WebCore::ResourceResponse *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
}

unint64_t IPC::ArgumentCoder<WebCore::PasteboardImage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 96));
  float v4 = *(float *)(a2 + 100);

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

_DWORD *IPC::ArgumentCoder<WebCore::PasteboardImage,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>(a1, &v44);
  IPC::Decoder::decode<WebCore::PasteboardURL>((IPC::Decoder *)a1, (uint64_t)&v39);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((IPC::Decoder *)a1, &v37);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v35);
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v32, (IPC::Decoder *)a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v30);
  float v4 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
  if (!*a1) {
    goto LABEL_32;
  }
  if (!v45) {
    goto LABEL_31;
  }
  unint64_t v6 = v44;
  unsigned int v44 = 0;
  char v21 = v6;
  if (!v43) {
    goto LABEL_31;
  }
  uint64_t v7 = v42;
  uint64_t v22 = v39;
  uint64_t v39 = 0;
  long long v23 = v40;
  long long v24 = v41;
  LODWORD(v40) = v40 & 0xFFFFFFFE;
  uint64_t v42 = 0;
  *(void *)&long long v25 = v7;
  if (!v38) {
    goto LABEL_31;
  }
  uint64_t v8 = v37;
  unsigned __int16 v37 = 0;
  *((void *)&v25 + 1) = v8;
  if (!v36) {
    goto LABEL_31;
  }
  char v9 = v35;
  char v35 = 0;
  *(void *)&long long v26 = v9;
  if (!v34) {
    goto LABEL_31;
  }
  *((void *)&v26 + 1) = v32;
  uint64_t v10 = v33;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v27 = v10;
  if (!v31 || (uint64_t v11 = v30, v30 = 0, v28 = v11, !(_BYTE)v5))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 104) = 0;
    goto LABEL_10;
  }
  unsigned int v29 = v4;
  char v21 = 0;
  *(void *)a2 = v6;
  WTF::URL::URL(a2 + 8, &v22);
  long long v12 = v25;
  long long v13 = v26;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v13;
  *(void *)(a2 + 80) = v27;
  unsigned int v14 = v28;
  unint64_t v15 = v29;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = v15;
  *(unsigned char *)(a2 + 104) = 1;
  WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v21, v16);
LABEL_10:
  if (v31)
  {
    unint64_t v17 = v30;
    char v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v5);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  if (v34) {
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
  }
  if (v36)
  {
    uint64_t v18 = v35;
    char v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v5);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (v38)
  {
    unsigned int v19 = v37;
    unsigned __int16 v37 = 0;
    if (v19) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v5);
    }
  }
  unint64_t result = (_DWORD *)std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v5);
  if (v45)
  {
    unint64_t result = v44;
    unsigned int v44 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  return result;
}

void sub_198834D98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v32 = v30;
  char v34 = *v32;
  *uint64_t v32 = 0;
  if (v34)
  {
    if (v34[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
    }
    else {
      --v34[2];
    }
  }
  WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&a10, a2);
  if (a24)
  {
    char v36 = a23;
    a23 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  if (a30) {
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, v35);
  }
  if (*(unsigned char *)(v31 - 128))
  {
    unsigned __int16 v37 = *(WTF::StringImpl **)(v31 - 136);
    *(void *)(v31 - 136) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v35);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v31 - 112))
  {
    char v38 = *(unsigned int **)(v31 - 120);
    *(void *)(v31 - 120) = 0;
    if (v38) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v38, v35);
    }
  }
  std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100](v31 - 104, v35);
  if (*(unsigned char *)(v31 - 40))
  {
    uint64_t v39 = *(_DWORD **)(v31 - 48);
    *(void *)(v31 - 48) = 0;
    if (v39)
    {
      if (v39[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
      }
      else {
        --v39[2];
      }
    }
  }
  _Unwind_Resume(a1);
}

void sub_198834EE8()
{
}

void sub_198834EF0()
{
}

uint64_t *IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::decode<IPC::Decoder,WebCore::Image>(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198834F68(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::PasteboardURL>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::PasteboardURL,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198834FEC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_21;
  }
  unint64_t v6 = v4;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v4 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v25, a2);
      if (!v27) {
        goto LABEL_20;
      }
      if (HIDWORD(v29) == v29)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v28, (unint64_t)&v25);
      }
      else
      {
        int v16 = HIDWORD(v29) + 1;
        unint64_t v17 = (void *)(v28 + 16 * HIDWORD(v29));
        uint64_t v18 = v25;
        uint64_t v25 = 0;
        *unint64_t v17 = v18;
        uint64_t v19 = v26;
        uint64_t v26 = 0;
        v17[1] = v19;
        HIDWORD(v29) = v16;
      }
      std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
      if (!--v6)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v28, HIDWORD(v29));
        uint64_t v24 = v28;
        uint64_t v28 = 0;
        *(void *)a1 = v24;
        int v14 = v29;
        int v13 = HIDWORD(v29);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v29) = v4;
    uint64_t v28 = WTF::fastMalloc((WTF *)(16 * v4));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v25, a2);
      if (!v27) {
        break;
      }
      if (HIDWORD(v29) == v29)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v28, (unint64_t)&v25);
      }
      else
      {
        int v8 = HIDWORD(v29) + 1;
        char v9 = (void *)(v28 + 16 * HIDWORD(v29));
        uint64_t v10 = v25;
        uint64_t v25 = 0;
        *char v9 = v10;
        uint64_t v11 = v26;
        uint64_t v26 = 0;
        v9[1] = v11;
        HIDWORD(v29) = v8;
      }
      std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
      if (!--v6)
      {
        uint64_t v12 = v28;
        int v14 = v29;
        int v13 = HIDWORD(v29);
        goto LABEL_13;
      }
    }
LABEL_20:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v20);
LABEL_21:
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v23 = v22 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v21);
    }
    return result;
  }
  int v13 = 0;
  int v14 = 0;
  uint64_t v12 = 0;
LABEL_13:
  uint64_t v28 = 0;
  *(void *)a1 = v12;
LABEL_14:
  uint64_t v29 = 0;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v5);
}

void sub_1988351F8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 16));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 24));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 32));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));

  return IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 64));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v50);
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_49;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v23 = v4;
    uint64_t v24 = 0;
    goto LABEL_50;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_52;
  }
  int v9 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v11 = v8 ? i : 0;
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v48);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v46);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v44);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v42);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v40);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v38);
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v35, a1);
    if (!*(void *)a1) {
      break;
    }
    if (v51)
    {
      int v14 = v50;
      char v50 = 0;
      if (!v9)
      {
        char v29 = v11;
        if (v49)
        {
          unint64_t v15 = v48;
          uint64_t v48 = 0;
          if (v47)
          {
            int v16 = v46;
            unint64_t v46 = 0;
            if (v45)
            {
              unint64_t v17 = v44;
              unsigned int v44 = 0;
              if (v43)
              {
                uint64_t v18 = v42;
                uint64_t v42 = 0;
                if (v41)
                {
                  uint64_t v19 = v40;
                  long long v40 = 0;
                  if (v39)
                  {
                    char v20 = v38;
                    char v38 = 0;
                    if (v37)
                    {
                      uint64_t v21 = v35;
                      uint64_t v35 = 0;
                      uint64_t v28 = 0;
                      *(void *)a2 = v14;
                      *(unsigned char *)(a2 + 8) = v11;
                      *(void *)(a2 + 16) = v15;
                      *(void *)(a2 + 24) = v16;
                      long long v30 = 0u;
                      long long v31 = 0u;
                      *(void *)(a2 + 32) = v17;
                      *(void *)(a2 + 40) = v18;
                      long long v32 = 0u;
                      *(void *)(a2 + 48) = v19;
                      *(void *)(a2 + 56) = v20;
                      uint64_t v33 = 0;
                      *(void *)(a2 + 64) = v21;
                      uint64_t v34 = 0;
                      uint64_t v22 = v36;
                      uint64_t v36 = 0;
                      *(void *)(a2 + 72) = v22;
                      *(unsigned char *)(a2 + 80) = 1;
                      WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v28, v13);
LABEL_19:
                      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v13);
                      goto LABEL_20;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_49:
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *(void *)a1;
        unint64_t v23 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
LABEL_50:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26 && v23)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
      unsigned int v8 = 0;
      uint64_t v5 = *(void *)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v8 = 0;
    }
LABEL_52:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v27 = *((void *)a1 + 3);
    if (v27 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v5);
    }
    int v9 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
  if (v37) {
    goto LABEL_19;
  }
LABEL_20:
  if (v39)
  {
    uint64_t result = v38;
    char v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v41)
  {
    uint64_t result = v40;
    long long v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v43)
  {
    uint64_t result = v42;
    uint64_t v42 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
    }
  }
  if (v45)
  {
    uint64_t result = v44;
    unsigned int v44 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
    }
  }
  if (v47)
  {
    uint64_t result = v46;
    unint64_t v46 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
    }
  }
  if (v49)
  {
    uint64_t result = v48;
    uint64_t v48 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
    }
  }
  if (v51)
  {
    uint64_t result = v50;
    char v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19883566C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26)
{
  if (*(unsigned char *)(v26 - 56))
  {
    uint64_t v27 = *(WTF::StringImpl **)(v26 - 64);
    *(void *)(v26 - 64) = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, a2);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PasteboardURL,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, &v13);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  if (!*(void *)a1) {
    goto LABEL_20;
  }
  if (!v16 || (unint64_t v6 = v13, v13 = 0, v7 = v6, v8 = v14, v9 = v15, LODWORD(v14) = v14 & 0xFFFFFFFE, !v12))
  {
    __break(1u);
LABEL_20:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_8;
  }
  uint64_t v10 = v11;
  char v11 = 0;
  WTF::URL::URL(a2, (uint64_t *)&v7);
  uint64_t result = v7;
  *(void *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 48) = 1;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_8:
  if (v12)
  {
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v16)
  {
    uint64_t result = v13;
    int v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988358C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a22 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));

  return IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (atomic_uint **)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v11);
  if (*(void *)a1)
  {
    if (v16)
    {
      uint64_t v5 = v15;
      long long v15 = 0;
      if (v14)
      {
        unint64_t v6 = v13;
        int v13 = 0;
        if (v12)
        {
          uint64_t v7 = v11;
          *(void *)a2 = v5;
          *(void *)(a2 + 8) = v6;
          *(void *)(a2 + 16) = v7;
          *(unsigned char *)(a2 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v12)
  {
    uint64_t v10 = v11;
    char v11 = 0;
    if (v10) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v4);
    }
  }
LABEL_6:
  if (v14)
  {
    long long v8 = v13;
    int v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  if (v16)
  {
    long long v9 = v15;
    long long v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_198835AD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 9));
  char v5 = *(unsigned char *)(a2 + 10);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

void IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&cf);
  uint64_t v9 = *a1;
  uint64_t v10 = v65;
  if (*a1)
  {
    if (!v65) {
      goto LABEL_56;
    }
    CFTypeRef v4 = cf;
    uint64_t v5 = *a1;
  }
  else
  {
    uint64_t v21 = 0;
    if (v65)
    {
      CFTypeRef v22 = cf;
      CFTypeRef cf = 0;
      if (v22)
      {
        CFRelease(v22);
        uint64_t v21 = *a1;
      }
      else
      {
        uint64_t v21 = 0;
      }
    }
    uint64_t v5 = 0;
    CFTypeRef v4 = 0;
    uint64_t v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(a1[3], v21);
        CFTypeRef v4 = 0;
        uint64_t v5 = *a1;
      }
      else
      {
        uint64_t v5 = 0;
        CFTypeRef v4 = 0;
      }
    }
  }
  unint64_t v11 = a1[1];
  if (v11 <= a1[2] - v5)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27)
    {
      CFTypeRef v61 = v4;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *a1;
        uint64_t v25 = a1[1];
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
      CFTypeRef v4 = v61;
    }
    goto LABEL_33;
  }
  char v12 = (unsigned __int8 *)a1[2];
  int v13 = v12 + 1;
  a1[2] = (uint64_t)(v12 + 1);
  if (!v5)
  {
    uint64_t v25 = v11;
    uint64_t v26 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v28 = a1[3];
    if (v28)
    {
      CFTypeRef v59 = v4;
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        unsigned int v14 = 0;
        uint64_t v5 = *a1;
        unint64_t v11 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v5 = 0;
        unsigned int v14 = 0;
      }
      CFTypeRef v4 = v59;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v5 = 0;
      unsigned int v14 = 0;
    }
    goto LABEL_35;
  }
  unsigned int v14 = *v12;
  if (v14 < 2)
  {
    int v7 = 0;
    int v8 = 1;
    goto LABEL_8;
  }
LABEL_35:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  if (v6)
  {
    unsigned int v49 = v14;
    CFTypeRef v56 = v4;
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      int v8 = 0;
      uint64_t v5 = *a1;
      unint64_t v11 = a1[1];
      int v7 = 1;
      int v13 = (unsigned __int8 *)a1[2];
      CFTypeRef v4 = v56;
      unsigned int v14 = v49;
LABEL_8:
      if (!v14) {
        int v8 = 0;
      }
      long long v15 = &v13[-v5];
      if (v11 <= (unint64_t)v15)
      {
        int v47 = v7;
        int v54 = v8;
        CFTypeRef v63 = v4;
        uint64_t v6 = 0;
        uint64_t v34 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        if (v34 && v11)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
          uint64_t v5 = *a1;
          uint64_t v6 = a1[1];
        }
        else
        {
          uint64_t v5 = 0;
        }
        CFTypeRef v4 = v63;
        int v7 = v47;
        int v8 = v54;
      }
      else
      {
        char v16 = &v15[v5];
        a1[2] = (uint64_t)(v16 + 1);
        if (v5)
        {
          LODWORD(v10) = *v16;
          if (v10 < 2)
          {
            int v17 = 0;
            char v18 = 1;
            goto LABEL_14;
          }
          goto LABEL_39;
        }
        uint64_t v6 = v11;
      }
      goto LABEL_37;
    }
    int v8 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    int v7 = 1;
  }
  else
  {
    int v8 = 0;
    uint64_t v5 = 0;
    int v7 = 1;
  }
LABEL_37:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v10 = a1[3];
  if (v10) {
    goto LABEL_57;
  }
  unint64_t v11 = 0;
  uint64_t v5 = 0;
  while (1)
  {
LABEL_39:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (!v29)
    {
      uint64_t v5 = 0;
      char v19 = 0;
      unint64_t v11 = 0;
      int v17 = 1;
      goto LABEL_41;
    }
    int v38 = v10;
    int v42 = v7;
    int v48 = v8;
    CFTypeRef v55 = v4;
    if (!v11)
    {
      uint64_t v5 = 0;
      char v19 = 0;
      int v17 = 1;
LABEL_41:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v30 = a1[3];
      if (v30)
      {
        char v37 = v19;
        int v41 = v17;
        int v46 = v7;
        int v53 = v8;
        CFTypeRef v62 = v4;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v5);
          uint64_t v31 = *a1;
          unint64_t v11 = a1[1];
        }
        else
        {
          uint64_t v31 = 0;
        }
        CFTypeRef v4 = v62;
        int v7 = v46;
        int v8 = v53;
        char v19 = v37;
        int v17 = v41;
      }
      else
      {
        uint64_t v31 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_43;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v5);
    char v18 = 0;
    uint64_t v5 = *a1;
    unint64_t v11 = a1[1];
    int v17 = 1;
    CFTypeRef v4 = v55;
    int v7 = v42;
    int v8 = v48;
    LODWORD(v10) = v38;
LABEL_14:
    if (v10) {
      char v19 = v18;
    }
    else {
      char v19 = 0;
    }
    if (v11 <= a1[2] - v5) {
      goto LABEL_41;
    }
    char v20 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v20 + 1);
    if (!v5)
    {
      uint64_t v31 = 0;
LABEL_43:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v32 = a1[3];
      if (v32)
      {
        char v36 = v19;
        int v40 = v17;
        int v45 = v7;
        int v52 = v8;
        CFTypeRef v60 = v4;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v31);
          uint64_t v5 = *a1;
          unint64_t v11 = a1[1];
        }
        else
        {
          uint64_t v5 = 0;
        }
        CFTypeRef v4 = v60;
        int v7 = v45;
        int v8 = v52;
        char v19 = v36;
        int v17 = v40;
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_45;
    }
    uint64_t v6 = *v20;
    if (v6 <= 3)
    {
      uint64_t v10 = v6 | 0x100;
      if (!v9) {
        goto LABEL_56;
      }
      goto LABEL_21;
    }
LABEL_45:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (!v33) {
      break;
    }
    if (!v11) {
      break;
    }
    char v35 = v19;
    int v39 = v17;
    int v43 = v7;
    int v50 = v8;
    CFTypeRef v57 = v4;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v5);
    CFTypeRef v4 = v57;
    int v7 = v43;
    int v8 = v50;
    char v19 = v35;
    int v17 = v39;
    if (!*a1) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v10 = 0;
    if (!v9) {
      goto LABEL_56;
    }
LABEL_21:
    if (!v7 && !v17 && v10 > 0xFF)
    {
      *(void *)a2 = v4;
      *(unsigned char *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 9) = v19;
      *(unsigned char *)(a2 + 10) = v6;
      *(unsigned char *)(a2 + 16) = 1;
      return;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    int v44 = v7;
    int v51 = v8;
    CFTypeRef v58 = v4;
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v5, v6);
      LODWORD(v10) = 0;
      uint64_t v5 = *a1;
      unint64_t v11 = a1[1];
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v5 = 0;
      LODWORD(v10) = 0;
    }
    CFTypeRef v4 = v58;
    int v7 = v44;
    int v8 = v51;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v9)
  {
    if (v4) {
      CFRelease(v4);
    }
  }
}

void sub_198836154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (v12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::UserStyleLevel>,void>::encode<IPC::Encoder,std::optional<WebCore::UserStyleLevel> const&>(a1, a2);
  char v5 = *(unsigned char *)(a2 + 2);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(a1, a2 + 40);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 168);
  return IPC::ArgumentCoder<std::optional<WebKit::PolicyDecisionConsoleMessage>,void>::encode<IPC::Encoder,std::optional<WebKit::PolicyDecisionConsoleMessage>>(a1, a2 + 184);
}

void IPC::ArgumentCoder<WebKit::PolicyDecision,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  LODWORD(v5) = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(a1);
  unint64_t v6 = *((void *)a1 + 1);
  int v7 = *(WTF::StringImpl **)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8)
  {
    unint64_t v34 = 0;
    char v35 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (v36)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v36 + 16))(v36, v7, v6);
        char v35 = *(WTF::StringImpl **)a1;
        unint64_t v34 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v34 = 0;
        char v35 = 0;
      }
    }
    goto LABEL_48;
  }
  uint64_t v9 = (unsigned __int8 *)v7 + v8;
  *((void *)a1 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v34 = v6;
    char v35 = 0;
LABEL_48:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (v37 && v34) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v35);
    }
    goto LABEL_49;
  }
  unsigned int v10 = *v9;
  if (v10 < 4)
  {
    int v11 = 0;
    goto LABEL_5;
  }
LABEL_49:
  IPC::Decoder::markInvalid(a1);
  LOBYTE(v10) = 0;
  int v11 = 1;
LABEL_5:
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v67);
  unint64_t v12 = *((void *)a1 + 1);
  int v13 = *(WTF::StringImpl **)a1;
  unint64_t v14 = *((void *)a1 + 2) - *(void *)a1;
  if (v12 <= v14)
  {
    unint64_t v38 = 0;
    int v39 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        int v39 = *(WTF::StringImpl **)a1;
        unint64_t v38 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v38 = 0;
        int v39 = 0;
      }
    }
    goto LABEL_51;
  }
  long long v15 = (unsigned __int8 *)v13 + v14;
  *((void *)a1 + 2) = v15 + 1;
  if (!v13)
  {
    unint64_t v38 = v12;
    int v39 = 0;
LABEL_51:
    unint64_t v12 = 0;
    int v13 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v41 = *((void *)a1 + 3);
    if (v41)
    {
      if (v38)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
        int v13 = *(WTF::StringImpl **)a1;
        unint64_t v12 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        int v13 = 0;
      }
    }
    goto LABEL_52;
  }
  unsigned int v16 = *v15;
  if (v16 >= 2)
  {
LABEL_52:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v42 = *((void *)a1 + 3);
    if (v42 && v12) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v13);
    }
    goto LABEL_53;
  }
  if (v16) {
    goto LABEL_43;
  }
  unsigned __int8 v17 = 0;
  int v18 = 0;
  unint64_t v19 = 0;
  char v2 = 0;
  while (1)
  {
    IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v65, a1);
    IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v62);
    unint64_t v20 = *((void *)a1 + 1);
    uint64_t v21 = *(WTF::StringImpl **)a1;
    unint64_t v22 = *((void *)a1 + 2) - *(void *)a1;
    if (v20 <= v22)
    {
      unint64_t v43 = 0;
      int v44 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v45 = *((void *)a1 + 3);
      if (v45)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
          int v44 = *(WTF::StringImpl **)a1;
          unint64_t v43 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v43 = 0;
          int v44 = 0;
        }
      }
      goto LABEL_55;
    }
    uint64_t v23 = (unsigned __int8 *)v21 + v22;
    *((void *)a1 + 2) = v23 + 1;
    if (!v21)
    {
      unint64_t v43 = v20;
      int v44 = 0;
LABEL_55:
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v46 = *((void *)a1 + 3);
      if (v46)
      {
        if (v43)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v46 + 16))(v46, v44, v43);
          uint64_t v21 = *(WTF::StringImpl **)a1;
          unint64_t v20 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v20 = 0;
          uint64_t v21 = 0;
        }
      }
LABEL_56:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v47 = *((void *)a1 + 3);
      if (v47 && v20) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v21);
      }
      LOBYTE(v58) = 0;
      char v61 = 0;
      goto LABEL_58;
    }
    unsigned int v24 = *v23;
    if (v24 >= 2) {
      goto LABEL_56;
    }
    if (!v24)
    {
      LOBYTE(v58) = 0;
      char v60 = 0;
      char v61 = 1;
      goto LABEL_15;
    }
    IPC::Decoder::decode<WebKit::PolicyDecisionConsoleMessage>((uint64_t)&v49, (uint64_t *)a1);
    if ((_BYTE)v50)
    {
      __int16 v58 = v49;
      uint64_t v33 = *((void *)&v49 + 1);
      *((void *)&v49 + 1) = 0;
      uint64_t v59 = v33;
      char v60 = 1;
      char v61 = 1;
      std::optional<WebKit::PolicyDecisionConsoleMessage>::~optional((uint64_t)&v49, v32);
      goto LABEL_15;
    }
    LOBYTE(v58) = 0;
    char v61 = 0;
    std::optional<WebKit::PolicyDecisionConsoleMessage>::~optional((uint64_t)&v49, v32);
LABEL_58:
    IPC::Decoder::markInvalid(a1);
LABEL_15:
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 208) = 0;
      goto LABEL_35;
    }
    if ((v5 & 0xFF0000) != 0)
    {
      LOWORD(v49) = (_WORD)v5;
      if (!v11)
      {
        BYTE2(v49) = v10;
        if (v69)
        {
          *((void *)&v49 + 1) = v67;
          LOBYTE(v50) = v68;
          if (!v18)
          {
            *((void *)&v50 + 1) = v19 | v17;
            char v51 = v2;
            if (v66)
            {
              char v5 = v52;
              std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v52, (uint64_t)v65);
              if (v64)
              {
                LOBYTE(v53) = 0;
                unsigned __int8 v54 = 0;
                if (v63)
                {
                  uint64_t v28 = v62;
                  CFTypeRef v62 = 0;
                  int v53 = v28;
                  unsigned __int8 v54 = 1;
                }
                if (v61) {
                  break;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_43:
    uint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
    if (v31)
    {
      unsigned __int8 v17 = v30;
      int v18 = 0;
      unint64_t v19 = v30 & 0xFFFFFFFFFFFFFF00;
      char v2 = 1;
    }
    else
    {
LABEL_53:
      IPC::Decoder::markInvalid(a1);
      unsigned __int8 v17 = 0;
      unint64_t v19 = 0;
      int v18 = 1;
    }
  }
  LOBYTE(v55) = 0;
  char v57 = 0;
  if (v60)
  {
    __int16 v55 = v58;
    uint64_t v48 = v59;
    uint64_t v59 = 0;
    uint64_t v56 = v48;
    char v57 = 1;
  }
  long long v25 = v50;
  *(_OWORD *)a2 = v49;
  *(_OWORD *)(a2 + 16) = v25;
  *(unsigned char *)(a2 + 32) = v51;
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 40), (uint64_t)v52);
  *(unsigned char *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 176) = 0;
  int v26 = v54;
  if (v54)
  {
    uint64_t v29 = v53;
    int v53 = 0;
    *(void *)(a2 + 168) = v29;
    *(unsigned char *)(a2 + 176) = 1;
  }
  *(unsigned char *)(a2 + 184) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  if (v57)
  {
    *(_WORD *)(a2 + 184) = v55;
    *(void *)(a2 + 192) = v56;
    *(unsigned char *)(a2 + 200) = 1;
    uint64_t v56 = 0;
  }
  *(unsigned char *)(a2 + 208) = 1;
  if (v26) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v53);
  }
  if (v52[120]) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v52, v21);
  }
LABEL_35:
  std::__optional_destruct_base<std::optional<WebKit::PolicyDecisionConsoleMessage>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v21);
  if (v64 && v63) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v62);
  }
  if (v66)
  {
    if (v65[120]) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v65, v27);
    }
  }
}

void sub_198836818(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,const char **a40,char a41,int a42,char a43)
{
  std::__optional_destruct_base<std::optional<WebKit::PolicyDecisionConsoleMessage>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a36, a2);
  if (a43 && a41) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a40);
  }
  if (*(unsigned char *)(v43 - 112))
  {
    if (*(unsigned char *)(v43 - 120)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(v43 - 240), v45);
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::PolicyDecision::~PolicyDecision(WebKit::PolicyDecision *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 200))
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  if (*((unsigned char *)this + 176)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 21);
  }
  if (*((unsigned char *)this + 160)) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::PolicyDecision *)((char *)this + 40), a2);
  }
}

uint64_t IPC::Decoder::decode<JSC::MessageLevel>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<JSC::MessageSource>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<JSC::MessageSource,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 12));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 28));
}

uint64_t IPC::ArgumentCoder<WebKit::PrintInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a1);
  uint64_t v5 = IPC::Decoder::decode<float>(a1);
  uint64_t v6 = IPC::Decoder::decode<float>(a1);
  uint64_t result = IPC::Decoder::decode<WebCore::RectEdges<float>>(a1, (uint64_t)&v20);
  unint64_t v8 = a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = a1[2] - *a1;
  if (v8 <= v10) {
    goto LABEL_13;
  }
  int v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    uint64_t v16 = v8;
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  unsigned int v12 = *v11;
  if (v12 > 1) {
    goto LABEL_15;
  }
  int v13 = 0;
  for (BOOL i = v12 != 0; ; BOOL i = 0)
  {
    if ((v4 & 0xFF00000000) != 0 && (v5 & 0xFF00000000) != 0 && (v6 & 0xFF00000000) != 0 && v21 && !v13)
    {
      *(_DWORD *)a2 = v4;
      *(_DWORD *)(a2 + 4) = v5;
      *(_DWORD *)(a2 + 8) = v6;
      *(_OWORD *)(a2 + 12) = v20;
      *(unsigned char *)(a2 + 28) = i;
      char v15 = 1;
      goto LABEL_11;
    }
    __break(1u);
LABEL_13:
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        uint64_t v17 = *a1;
        uint64_t v16 = a1[1];
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
LABEL_14:
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        uint64_t v9 = *a1;
        unint64_t v8 = a1[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (!result) {
      break;
    }
    if (!v8) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
    if (!*a1) {
      break;
    }
    int v13 = 1;
  }
  char v15 = 0;
  *(unsigned char *)a2 = 0;
LABEL_11:
  *(unsigned char *)(a2 + 32) = v15;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<PAL::SessionID,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
  uint64_t v5 = a2[2];
  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
}

uint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v8);
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a1);
  uint64_t v6 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_7;
  }
  LOBYTE(v6) = v9;
  if (!v9 || !v5)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  uint64_t v7 = v8[1];
  *(void *)a2 = v8[0];
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = result;
  LOBYTE(v6) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

void *IPC::Decoder::decode<WTF::UUID>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::UUID,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>>(a1, (uint64_t)&v6);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  if (v8)
  {
    *(_OWORD *)a2 = v6;
    *(_DWORD *)(a2 + 16) = v7;
    LOBYTE(v5) = 1;
LABEL_4:
    *(unsigned char *)(a2 + 20) = v5;
    return result;
  }
  __break(1u);
  return result;
}

void *IPC::Decoder::decode<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 20))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::RTC::Network::InterfaceAddress,void>::encode(IPC::Encoder *a1, int *a2)
{
  unsigned __int8 v5 = a2[4];
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(a1, a2, v5);
  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, a2[5]);
}

void *IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 20))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 8), *(unsigned int *)(a2 + 20));

  return IPC::ArgumentCoder<std::optional<WebKit::RTC::Network::IPAddress>,void>::encode<IPC::Encoder,std::optional<WebKit::RTC::Network::IPAddress> const&>(a1, a2 + 24);
}

WTF *IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = IPC::Decoder::decode<unsigned short>(a1);
  uint64_t v5 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v12);
  uint64_t result = (WTF *)IPC::Decoder::decode<std::optional<WebKit::RTC::Network::IPAddress>>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if ((v4 & 0xFF0000) != 0 && (v5 & 0xFF00000000) != 0 && v14 && v11)
    {
      *(_OWORD *)(a2 + 24) = v9;
      *(void *)(a2 + 40) = v10;
      char v8 = v12;
      *(void *)a2 = (unsigned __int16)v4 | (unint64_t)(v5 << 32);
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = v13;
      *(unsigned char *)(a2 + 48) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v14)
  {
    uint64_t result = v12;
    if (v12)
    {
      unsigned int v12 = 0;
      LODWORD(v13) = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

void sub_198837184(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, char a17)
{
  if (a17)
  {
    if (a14) {
      WTF::fastFree(a14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<true,char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19883721C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    int v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::RTC::Network::IPAddress>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::RTCNetwork,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
  unsigned __int8 v5 = *(_DWORD *)(a2 + 48);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(a1, (int *)(a2 + 32), v5);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 52));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 56));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 60));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 64));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 68));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 69));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 72));
  return IPC::VectorArgumentCoder<false,WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
}

WTF *IPC::ArgumentCoder<WebKit::RTCNetwork,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v66);
  IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v63);
  IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)&v60);
  uint64_t v59 = IPC::Decoder::decode<unsigned int>(a1);
  uint64_t v58 = IPC::Decoder::decode<unsigned int>(a1);
  int v57 = IPC::Decoder::decode<unsigned short>(a1);
  uint64_t v4 = IPC::Decoder::decode<unsigned int>(a1);
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7) {
    goto LABEL_41;
  }
  char v8 = (unsigned __int8 *)(v6 + v7);
  uint64_t v9 = v6 + v7 + 1;
  a1[2] = v9;
  if (!v6)
  {
    uint64_t v42 = v5;
    uint64_t v43 = 0;
    goto LABEL_42;
  }
  unsigned int v10 = *v8;
  if (v10 < 2)
  {
    int v11 = 0;
    char v12 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v46 = a1[3];
    if (!v46 || !v5)
    {
      char v13 = 0;
      uint64_t v47 = 0;
      uint64_t v6 = 0;
      int v11 = 1;
LABEL_46:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v48 = a1[3];
      if (v48 && v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v6, v47);
        unsigned int v16 = 0;
        uint64_t v6 = *a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_48;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v6);
    char v12 = 0;
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    int v11 = 1;
    uint64_t v9 = a1[2];
LABEL_5:
    if (v10) {
      char v13 = v12;
    }
    else {
      char v13 = 0;
    }
    unint64_t v14 = v9 - v6;
    if (v5 <= v14)
    {
      uint64_t v47 = 0;
      uint64_t v56 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v56 && v5)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        uint64_t v6 = *a1;
        uint64_t v47 = a1[1];
      }
      else
      {
        uint64_t v6 = 0;
      }
      goto LABEL_46;
    }
    char v15 = (unsigned __int8 *)(v6 + v14);
    a1[2] = (uint64_t)(v15 + 1);
    if (!v6)
    {
      uint64_t v47 = v5;
      goto LABEL_46;
    }
    unsigned int v16 = *v15;
    if (v16 < 2)
    {
      int v17 = 0;
      char v18 = 1;
      goto LABEL_12;
    }
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v49 = a1[3];
    if (v49 && v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v6);
    }
    char v18 = 0;
    int v17 = 1;
LABEL_12:
    char v19 = v16 ? v18 : 0;
    uint64_t v20 = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v21 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v22) {
      break;
    }
LABEL_58:
    unint64_t v22 = (void *)*a1;
    uint64_t v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (!result
      || !v55
      || (unint64_t result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(void *)result + 16))(result, v22),
          (uint64_t v34 = *a1) == 0))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 96) = 0;
      goto LABEL_60;
    }
    unint64_t result = 0;
    int v36 = 1;
LABEL_28:
    if (v68
      && v65
      && v62
      && (v59 & 0xFF00000000) != 0
      && (v58 & 0xFF00000000) != 0
      && (v57 & 0xFF0000) != 0
      && (v4 & 0xFF00000000) != 0
      && !v11
      && !v17
      && (v20 & 0xFF00000000) != 0
      && !v36)
    {
      uint64_t v37 = v66;
      char v66 = 0;
      unint64_t v38 = v63;
      char v63 = 0;
      *(_OWORD *)(a2 + 32) = v60;
      int v39 = v61;
      *(void *)a2 = v37;
      uint64_t v40 = v67;
      uint64_t v67 = 0;
      *(void *)(a2 + 8) = v40;
      *(void *)(a2 + 16) = v38;
      uint64_t v41 = v64;
      uint64_t v64 = 0;
      *(void *)(a2 + 24) = v41;
      *(_DWORD *)(a2 + 48) = v39;
      *(_DWORD *)(a2 + 52) = v59;
      *(_DWORD *)(a2 + 56) = v58;
      *(_WORD *)(a2 + 60) = v57;
      *(_DWORD *)(a2 + 64) = v4;
      *(unsigned char *)(a2 + 68) = v13;
      *(unsigned char *)(a2 + 69) = v19;
      *(_DWORD *)(a2 + 72) = v20;
      *(void *)(a2 + 80) = result;
      *(_DWORD *)(a2 + 88) = v35;
      *(_DWORD *)(a2 + 92) = v34;
      *(unsigned char *)(a2 + 96) = 1;
      goto LABEL_60;
    }
    __break(1u);
LABEL_41:
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v44 = a1[3];
    if (v44)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v43 = *a1;
        uint64_t v42 = a1[1];
      }
      else
      {
        uint64_t v42 = 0;
        uint64_t v43 = 0;
      }
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v45 = a1[3];
    if (v45 && v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43, v42);
      unsigned int v10 = 0;
      uint64_t v6 = *a1;
      unint64_t v5 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v10 = 0;
    }
  }
  unint64_t v23 = v21;
  char v72 = 0;
  uint64_t v73 = 0;
  if (v21 >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTC::Network::InterfaceAddress>((uint64_t)&v69, a1);
      if (!v71) {
        goto LABEL_56;
      }
      int v50 = HIDWORD(v73);
      if (HIDWORD(v73) == v73)
      {
        unint64_t v51 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, HIDWORD(v73) + 1, (unint64_t)&v69);
        int v50 = HIDWORD(v73);
        int v52 = (char *)v72 + 24 * HIDWORD(v73);
        long long v53 = *(_OWORD *)v51;
        *((void *)v52 + 2) = *(void *)(v51 + 16);
      }
      else
      {
        int v52 = (char *)v72 + 24 * HIDWORD(v73);
        long long v53 = v69;
        *((void *)v52 + 2) = v70;
      }
      *(_OWORD *)int v52 = v53;
      HIDWORD(v73) = v50 + 1;
      if (!--v23)
      {
        WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v72, (v50 + 1));
        unint64_t result = v72;
        int v35 = v73;
        LODWORD(v34) = HIDWORD(v73);
        goto LABEL_26;
      }
    }
  }
  if (v21)
  {
    unsigned int v24 = 24 * v21;
    uint64_t v25 = WTF::fastMalloc((WTF *)(24 * v21));
    LODWORD(v73) = v24 / 0x18;
    char v72 = (WTF *)v25;
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTC::Network::InterfaceAddress>((uint64_t)&v69, a1);
      if (!v71) {
        break;
      }
      int v26 = HIDWORD(v73);
      if (HIDWORD(v73) == v73)
      {
        unint64_t v27 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, HIDWORD(v73) + 1, (unint64_t)&v69);
        int v28 = HIDWORD(v73);
        unint64_t result = v72;
        uint64_t v30 = (char *)v72 + 24 * HIDWORD(v73);
        long long v31 = *(_OWORD *)v27;
        *((void *)v30 + 2) = *(void *)(v27 + 16);
        *(_OWORD *)uint64_t v30 = v31;
        int v26 = v28;
      }
      else
      {
        unint64_t result = v72;
        uint64_t v32 = (char *)v72 + 24 * HIDWORD(v73);
        long long v33 = v69;
        *((void *)v32 + 2) = v70;
        *(_OWORD *)uint64_t v32 = v33;
      }
      LODWORD(v34) = v26 + 1;
      HIDWORD(v73) = v34;
      if (!--v23)
      {
        int v35 = v73;
        goto LABEL_26;
      }
    }
LABEL_56:
    unsigned __int8 v54 = v72;
    if (v72)
    {
      char v72 = 0;
      LODWORD(v73) = 0;
      WTF::fastFree(v54, v22);
    }
    goto LABEL_58;
  }
  unint64_t result = 0;
  int v35 = 0;
  LODWORD(v34) = 0;
LABEL_26:
  if (*a1)
  {
    int v36 = 0;
    goto LABEL_28;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 96) = 0;
  if (result) {
    unint64_t result = (WTF *)WTF::fastFree(result, v22);
  }
LABEL_60:
  if (v65)
  {
    unint64_t result = v63;
    if (v63)
    {
      char v63 = 0;
      LODWORD(v64) = 0;
      unint64_t result = (WTF *)WTF::fastFree(result, v22);
    }
  }
  if (v68)
  {
    unint64_t result = v66;
    if (v66)
    {
      char v66 = 0;
      LODWORD(v67) = 0;
      return (WTF *)WTF::fastFree(result, v22);
    }
  }
  return result;
}

void sub_1988379B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, WTF *a19, int a20,int a21,char a22)
{
  if (a18 && a15) {
    WTF::fastFree(a15, a2);
  }
  if (a22)
  {
    if (a19) {
      WTF::fastFree(a19, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 32));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 40));
  int v5 = *(_DWORD *)(a2 + 48);
  IPC::Encoder::operator<<<int>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 52);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *(unsigned char *)(a2 + 53);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 54));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 56));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 60));
  return IPC::ArgumentCoder<webrtc::EncodedImage::Timing,void>::encode(a1, a2 + 64);
}

unint64_t IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((void *)a1 + 1);
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v3 >= v5 && v3 - v5 > 3)
  {
    char v7 = (int *)(v4 + v5);
    *((void *)a1 + 2) = v7 + 1;
    if (v4)
    {
      int v107 = 0;
      int v8 = *v7;
      LODWORD(v93) = v8;
      HIDWORD(v93) = v8 & 0xFFFFFF00;
      unint64_t v9 = v4;
      goto LABEL_8;
    }
    unint64_t v9 = v3;
    uint64_t v75 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v75 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v76 = *((void *)a1 + 3);
    if (v76)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
        uint64_t v75 = *(void *)a1;
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v75 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v77 = *((void *)a1 + 3);
  if (!v77)
  {
    unint64_t v9 = 0;
LABEL_91:
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v93 = 0;
    int v107 = 1;
    goto LABEL_8;
  }
  if (!v9) {
    goto LABEL_91;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v77 + 16))(v77, v75, v9);
  uint64_t v93 = 0;
  unint64_t v9 = *(void *)a1;
  unint64_t v3 = *((void *)a1 + 1);
  int v107 = 1;
  unint64_t v4 = *(void *)a1;
LABEL_8:
  unint64_t v10 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
  if (v3 < v10 || v3 - v10 <= 3)
  {
    unint64_t v13 = 0;
    unint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v78 = *((void *)a1 + 3);
    if (v78)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v78 + 16))(v78);
        unint64_t v9 = *(void *)a1;
        unint64_t v13 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        unint64_t v9 = 0;
      }
    }
    goto LABEL_93;
  }
  char v12 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *((void *)a1 + 2) = v12 + 1;
  unint64_t v13 = v3;
  if (!v4)
  {
LABEL_93:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v79 = *((void *)a1 + 3);
    if (v79 && v13) {
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v79 + 16))(v79, v9, v13);
    }
    uint64_t v92 = 0;
    int v106 = 1;
    goto LABEL_15;
  }
  int v106 = 0;
  LODWORD(v92) = *v12;
  HIDWORD(v92) = *v12 & 0xFFFFFF00;
LABEL_15:
  unint64_t v91 = IPC::Decoder::decode<long long>(a1);
  char v105 = v14;
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v108);
  unint64_t v90 = IPC::Decoder::decode<long long>(a1);
  char v104 = v15;
  unint64_t v89 = IPC::Decoder::decode<long long>(a1);
  char v103 = v16;
  uint64_t v17 = IPC::Decoder::decode<unsigned int>(a1);
  if ((v17 & 0xFF00000000) == 0 || v17 > 4 || ((1 << v17) & 0x19) == 0)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      goto LABEL_64;
    }
    goto LABEL_20;
  }
  int v102 = 0;
  for (int i = v17; ; int i = 0)
  {
    unint64_t v21 = *((void *)a1 + 1);
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *((void *)a1 + 2) - *(void *)a1;
    if (v21 <= v23)
    {
      unint64_t v57 = 0;
      uint64_t v58 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v59 = *((void *)a1 + 3);
      if (v59)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
          uint64_t v58 = *(void *)a1;
          unint64_t v57 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v57 = 0;
          uint64_t v58 = 0;
        }
      }
      goto LABEL_67;
    }
    unsigned int v24 = (unsigned __int8 *)(v22 + v23);
    *((void *)a1 + 2) = v24 + 1;
    if (!v22)
    {
      unint64_t v57 = v21;
      uint64_t v58 = 0;
LABEL_67:
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v60 = *((void *)a1 + 3);
      if (v60)
      {
        if (v57)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v60 + 16))(v60, v58, v57);
          uint64_t v22 = *(void *)a1;
          unint64_t v21 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v22 = 0;
        }
      }
      goto LABEL_68;
    }
    unsigned int v25 = *v24;
    if (v25 < 4)
    {
      unsigned int v101 = v25 | 0x100;
      goto LABEL_25;
    }
LABEL_68:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v61 = *((void *)a1 + 3);
    if (!v61)
    {
      uint64_t v22 = 0;
      unsigned int v101 = 0;
      unint64_t v21 = 0;
      goto LABEL_70;
    }
    if (!v21)
    {
      uint64_t v22 = 0;
      unsigned int v101 = 0;
LABEL_70:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v62 = *((void *)a1 + 3);
      if (v62)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 16))(v62, v22);
          uint64_t v63 = *(void *)a1;
          unint64_t v21 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v63 = 0;
        }
      }
      else
      {
        uint64_t v63 = 0;
        unint64_t v21 = 0;
      }
      goto LABEL_72;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 16))(v61, v22);
    unsigned int v101 = 0;
    uint64_t v22 = *(void *)a1;
    unint64_t v21 = *((void *)a1 + 1);
LABEL_25:
    if (v21 <= *((void *)a1 + 2) - v22) {
      goto LABEL_70;
    }
    int v26 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v26 + 1;
    if (!v22)
    {
      uint64_t v63 = 0;
LABEL_72:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v64 = *((void *)a1 + 3);
      if (v64)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 16))(v64, v63);
          uint64_t v22 = *(void *)a1;
          unint64_t v21 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v22 = 0;
        }
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v21 = 0;
      }
      goto LABEL_74;
    }
    unsigned int v27 = *v26;
    if (v27 < 2)
    {
      int v28 = v27 | 0x100;
      goto LABEL_29;
    }
LABEL_74:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v65 = *((void *)a1 + 3);
    if (!v65)
    {
      uint64_t v22 = 0;
      unsigned int v100 = 0;
      unint64_t v21 = 0;
      goto LABEL_76;
    }
    if (!v21)
    {
      uint64_t v22 = 0;
      unsigned int v100 = 0;
LABEL_76:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v66 = *((void *)a1 + 3);
      if (v66)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 16))(v66, v22);
          uint64_t v67 = *(void *)a1;
          unint64_t v21 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v67 = 0;
        }
      }
      else
      {
        uint64_t v67 = 0;
        unint64_t v21 = 0;
      }
      goto LABEL_78;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v65 + 16))(v65, v22);
    int v28 = 0;
    uint64_t v22 = *(void *)a1;
    unint64_t v21 = *((void *)a1 + 1);
LABEL_29:
    unsigned int v100 = v28;
    if (v21 <= *((void *)a1 + 2) - v22) {
      goto LABEL_76;
    }
    uint64_t v29 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v29 + 1;
    if (v22)
    {
      unsigned int v30 = *v29;
      if (v30 < 2)
      {
        int v99 = 0;
        char v31 = 1;
        goto LABEL_33;
      }
      goto LABEL_81;
    }
    uint64_t v67 = 0;
LABEL_78:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v68 = *((void *)a1 + 3);
    if (!v68)
    {
      unint64_t v21 = 0;
LABEL_80:
      uint64_t v22 = 0;
      unsigned int v30 = 0;
      goto LABEL_81;
    }
    if (!v21) {
      goto LABEL_80;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 16))(v68, v67);
    unsigned int v30 = 0;
    uint64_t v22 = *(void *)a1;
    unint64_t v21 = *((void *)a1 + 1);
LABEL_81:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v69 = *((void *)a1 + 3);
    if (v69 && v21) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v22);
    }
    char v31 = 0;
    int v99 = 1;
LABEL_33:
    if (!v30) {
      char v31 = 0;
    }
    char v88 = v31;
    uint64_t v98 = IPC::Decoder::decode<unsigned int>(a1);
    uint64_t v32 = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v33 = *((void *)a1 + 1);
    uint64_t v34 = *(void *)a1;
    unint64_t v35 = *((void *)a1 + 2) - *(void *)a1;
    uint64_t v97 = v32;
    if (v33 <= v35)
    {
      unint64_t v70 = 0;
      uint64_t v71 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v72 = *((void *)a1 + 3);
      if (v72)
      {
        if (v33)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v72 + 16))(v72, v34, v33);
          uint64_t v71 = *(void *)a1;
          unint64_t v70 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
        }
      }
    }
    else
    {
      int v36 = (char *)(v34 + v35);
      *((void *)a1 + 2) = v36 + 1;
      if (v34)
      {
        int v37 = 0;
        char v95 = *v36;
        goto LABEL_38;
      }
      unint64_t v70 = v33;
      uint64_t v71 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v73 = *((void *)a1 + 3);
    if (v73 && v70) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v71);
    }
    char v95 = 0;
    int v37 = 1;
LABEL_38:
    unint64_t v87 = IPC::Decoder::decode<long long>(a1);
    char v39 = v38;
    unint64_t v86 = IPC::Decoder::decode<long long>(a1);
    char v41 = v40;
    unint64_t v85 = IPC::Decoder::decode<long long>(a1);
    char v43 = v42;
    unint64_t v84 = IPC::Decoder::decode<long long>(a1);
    char v45 = v44;
    unint64_t v83 = IPC::Decoder::decode<long long>(a1);
    char v47 = v46;
    unint64_t v82 = IPC::Decoder::decode<long long>(a1);
    char v49 = v48;
    unint64_t v81 = IPC::Decoder::decode<long long>(a1);
    char v51 = v50;
    unint64_t result = IPC::Decoder::decode<long long>(a1);
    unint64_t v52 = result;
    unint64_t v53 = *(void *)a1;
    if (*(void *)a1)
    {
      if (v37 || !v39 || !v41 || !v43 || !v45 || !v47 || !v49 || !v51 || !(_BYTE)v18) {
        goto LABEL_63;
      }
      goto LABEL_48;
    }
    uint64_t v74 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (!result) {
      break;
    }
    if (!v74) {
      break;
    }
    unint64_t v80 = v52;
    unint64_t result = (*(uint64_t (**)(unint64_t, void))(*(void *)result + 16))(result, 0);
    if (!*(void *)a1) {
      break;
    }
    unint64_t v52 = v80;
    char v95 = 0;
LABEL_48:
    if (!v107
      && !v106
      && v105
      && v110
      && v104
      && v103
      && !v102
      && v101 > 0xFF
      && v100 > 0xFF
      && !v99
      && (v98 & 0xFF00000000) != 0
      && (v97 & 0xFF00000000) != 0
      && v53)
    {
      uint64_t v54 = a2;
      *(unsigned char *)(a2 + 64) = v95;
      *(void *)(a2 + 72) = v87;
      *(void *)(a2 + 80) = v86;
      *(void *)(a2 + 88) = v85;
      *(void *)(a2 + 96) = v84;
      *(void *)(a2 + 104) = v83;
      *(void *)(a2 + 112) = v82;
      *(void *)(a2 + 120) = v81;
      *(void *)(a2 + 128) = v52;
      *(_DWORD *)a2 = v93 | HIDWORD(v93);
      *(_DWORD *)(a2 + 4) = v92 | HIDWORD(v92);
      uint64_t v55 = v108;
      *(void *)(a2 + 8) = v91;
      *(void *)(a2 + 16) = v55;
      *(unsigned char *)(a2 + 24) = v109;
      *(void *)(a2 + 32) = v90;
      *(void *)(a2 + 40) = v89;
      *(_DWORD *)(a2 + 48) = i;
      *(unsigned char *)(a2 + 52) = v101;
      *(unsigned char *)(a2 + 53) = v100;
      *(unsigned char *)(a2 + 54) = v88;
      char v56 = 1;
      *(_DWORD *)(a2 + 56) = v98;
      *(_DWORD *)(a2 + 60) = v97;
      goto LABEL_62;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    if (v19) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v18);
    }
LABEL_20:
    int v102 = 1;
  }
  char v56 = 0;
  uint64_t v54 = a2;
  *(unsigned char *)a2 = 0;
LABEL_62:
  *(unsigned char *)(v54 + 136) = v56;
  return result;
}

unint64_t IPC::ArgumentCoder<webrtc::EncodedImage::Timing,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 16));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 24));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 32));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 40));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 48));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 56));
  uint64_t v4 = *(void *)(a2 + 64);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 16));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 24), *(void *)(a2 + 32));
  uint64_t v4 = *(void *)(a2 + 40);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::ArgumentCoder<signed char,void>::decode<IPC::Decoder>(a1);
  if (v4 <= 0xFFu) {
    goto LABEL_17;
  }
  char v5 = v4;
  int v6 = 0;
  if (v4 <= 0x38u && ((1 << v4) & 0x101415555555501) != 0 || v4 == 255) {
    goto LABEL_4;
  }
  while (1)
  {
    uint64_t v15 = *(void *)a1;
    uint64_t v16 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17 && v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
    char v5 = 0;
    int v6 = 1;
LABEL_4:
    uint64_t v7 = IPC::Decoder::decode<unsigned int>(a1);
    uint64_t v8 = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v9 = IPC::Decoder::decode<long long>(a1);
    char v11 = v10;
    IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>((uint64_t *)a1, (uint64_t)&v22);
    unint64_t result = IPC::Decoder::decode<long long>(a1);
    uint64_t v14 = *(void *)a1;
    if (!*(void *)a1) {
      break;
    }
    if (!v6 && (v7 & 0xFF00000000) != 0 && (v8 & 0xFF00000000) != 0 && v11 && v23 && v13)
    {
      *(unsigned char *)a2 = v5;
      *(_DWORD *)(a2 + 4) = v7;
      *(_DWORD *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = v9;
      *(_OWORD *)(a2 + 24) = v22;
      *(void *)(a2 + 40) = result;
      LOBYTE(v14) = 1;
      goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_12:
  *(unsigned char *)(a2 + 48) = v14;
  return result;
}

unint64_t IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::RTCPacketOptions,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::RTCPacketOptions::SerializableData>(a1, (uint64_t)v5);
  if (*(void *)a1)
  {
    if (v5[48])
    {
      WebKit::RTCPacketOptions::RTCPacketOptions((uint64_t)v4, v5);
      rtc::PacketOptions::PacketOptions();
      a2[112] = 1;
      rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)v4);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a2 = 0;
    a2[112] = 0;
  }
}

void sub_1988388C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)va);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WebKit::RTCPacketOptions::SerializableData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteWorkerInitializationData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  uint64_t result = IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v12);
  if (*(void *)a1)
  {
    if (v6 && v14)
    {
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      v11[0] = 0;
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v9;
      v11[1] = 0;
      uint64_t v10 = v13;
      uint64_t v13 = 0;
      *(void *)(a2 + 16) = v10;
      *(unsigned char *)(a2 + 24) = 1;
      uint64_t result = WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v8);
      goto LABEL_5;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_5:
  if (v14) {
    return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v8);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 32);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 96));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 104));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 112));
  char v5 = *(unsigned char *)(a2 + 113);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)a1, (uint64_t)&v67);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)a1, (uint64_t)&v64);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v60);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v58);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  unint64_t v9 = a1[1];
  uint64_t v10 = *a1;
  unint64_t v11 = a1[2] - *a1;
  if (v9 <= v11) {
    goto LABEL_36;
  }
  uint64_t v12 = (unsigned __int8 *)(v10 + v11);
  a1[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    uint64_t v22 = v9;
    uint64_t v23 = 0;
    goto LABEL_37;
  }
  unsigned int v13 = *v12;
  if (v13 < 2)
  {
    int v14 = 0;
    char v15 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (!v25)
    {
      uint64_t v10 = 0;
      char v16 = 0;
      unint64_t v9 = 0;
      int v14 = 1;
      goto LABEL_41;
    }
    unsigned int v34 = v13;
    char v38 = result;
    char v44 = v8;
    if (!v9)
    {
      uint64_t v10 = 0;
      char v16 = 0;
      int v14 = 1;
LABEL_41:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v26 = a1[3];
      if (v26)
      {
        int v32 = v14;
        char v36 = v16;
        char v41 = result;
        char v47 = v8;
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v10);
          uint64_t v27 = *a1;
          unint64_t v9 = a1[1];
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t result = v41;
        uint64_t v8 = v47;
        int v14 = v32;
        char v16 = v36;
      }
      else
      {
        uint64_t v27 = 0;
        unint64_t v9 = 0;
      }
      goto LABEL_43;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v10);
    char v15 = 0;
    uint64_t v10 = *a1;
    unint64_t v9 = a1[1];
    int v14 = 1;
    uint64_t result = v38;
    uint64_t v8 = v44;
    unsigned int v13 = v34;
LABEL_5:
    if (v13) {
      char v16 = v15;
    }
    else {
      char v16 = 0;
    }
    if (v9 <= a1[2] - v10) {
      goto LABEL_41;
    }
    uint64_t v17 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v17 + 1);
    if (!v10)
    {
      uint64_t v27 = 0;
LABEL_43:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v28 = a1[3];
      if (v28)
      {
        int v31 = v14;
        char v35 = v16;
        char v40 = result;
        char v46 = v8;
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v27);
          uint64_t v10 = *a1;
          unint64_t v9 = a1[1];
        }
        else
        {
          uint64_t v10 = 0;
        }
        uint64_t result = v40;
        uint64_t v8 = v46;
        int v14 = v31;
        char v16 = v35;
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v9 = 0;
      }
      goto LABEL_45;
    }
    unsigned int v18 = *v17;
    if (v18 <= 0xE)
    {
      uint64_t v10 = v18 | 0x100;
      goto LABEL_12;
    }
LABEL_45:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (!v29) {
      goto LABEL_46;
    }
    if (!v9) {
      goto LABEL_46;
    }
    int v30 = v14;
    char v33 = v16;
    int v37 = result;
    char v43 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v10);
    uint64_t result = v37;
    uint64_t v8 = v43;
    int v14 = v30;
    char v16 = v33;
    if (!*a1)
    {
LABEL_46:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 120) = 0;
      goto LABEL_24;
    }
    LOBYTE(v18) = 0;
    uint64_t v10 = 0;
LABEL_12:
    if (v6)
    {
      *(void *)char v49 = v4;
      if (v69)
      {
        *(_OWORD *)&v49[8] = v67;
        v49[24] = v68;
        if (v66)
        {
          long long v50 = v64;
          char v51 = v65;
          if (v63)
          {
            uint64_t v19 = v60;
            uint64_t v60 = 0;
            unint64_t v52 = v19;
            long long v53 = v61;
            long long v54 = v62;
            LODWORD(v61) = v61 & 0xFFFFFFFE;
            if (v59)
            {
              uint64_t v20 = v58;
              uint64_t v58 = 0;
              uint64_t v55 = v20;
              if ((_BYTE)v8)
              {
                char v56 = result;
                if (!v14)
                {
                  LOBYTE(v57) = v16;
                  if (v10 > 0xFF) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      char v42 = result;
      char v48 = v8;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v10);
        uint64_t v23 = *a1;
        uint64_t v22 = a1[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      uint64_t result = v42;
      uint64_t v8 = v48;
    }
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      char v39 = result;
      char v45 = v8;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v23, v22);
        unsigned int v13 = 0;
        uint64_t v10 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
        unsigned int v13 = 0;
      }
      uint64_t result = v39;
      uint64_t v8 = v45;
    }
    else
    {
      unint64_t v9 = 0;
      unsigned int v13 = 0;
    }
  }
  HIBYTE(v57) = v18;
  *(_OWORD *)a2 = *(_OWORD *)v49;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v49[16];
  *(_OWORD *)(a2 + 32) = v50;
  *(unsigned char *)(a2 + 48) = v51;
  WTF::URL::URL(a2 + 56, (uint64_t *)&v52);
  BOOL v21 = v56;
  uint64_t result = v52;
  *(void *)(a2 + 96) = v55;
  *(void *)(a2 + 104) = v21;
  *(_WORD *)(a2 + 112) = v57;
  *(unsigned char *)(a2 + 120) = 1;
  uint64_t v55 = 0;
  unint64_t v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_24:
  if (v59)
  {
    uint64_t result = v58;
    uint64_t v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v63)
  {
    uint64_t result = v60;
    uint64_t v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198838FA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a28 && a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a34 && a29)
  {
    if (*(_DWORD *)a29 == 2) {
      WTF::StringImpl::destroy(a29, a2);
    }
    else {
      *(_DWORD *)a29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::WallTime>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::FrameState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 56);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 80));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 88));
  int v11 = *(_DWORD *)(a2 + 96);
  IPC::Encoder::operator<<<int>(a1, &v11);
  int v11 = *(_DWORD *)(a2 + 100);
  IPC::Encoder::operator<<<int>(a1, &v11);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 104));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 108));
  if (*(unsigned char *)(a2 + 136))
  {
    LOBYTE(v11) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v11);
    if (!*(unsigned char *)(a2 + 136))
    {
      uint64_t v10 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<WTF::AtomString>(v10);
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 112));
    IPC::VectorArgumentCoder<false,WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 120));
  }
  else
  {
    uint64_t v4 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1988392A8);
    }
    *uint64_t v4 = 0;
  }
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 144));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 160));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 176));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 180));
  int v11 = *(_DWORD *)(a2 + 184);
  IPC::Encoder::operator<<<int>(a1, &v11);
  int v11 = *(_DWORD *)(a2 + 188);
  IPC::Encoder::operator<<<int>(a1, &v11);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 192));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 196));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 228));
  uint64_t v6 = *(unsigned int *)(a2 + 228);
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 216);
    uint64_t v9 = 248 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::FrameState,void>::encode(a1, v8);
      v8 += 248;
      v9 -= 248;
    }
    while (v9);
  }
  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 232);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::AtomString>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::AtomString,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

void *IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988393DC(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_31:
    uint64_t v26 = *(void *)a2;
    uint64_t v27 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v28 = v27 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
    }
    return result;
  }
  unint64_t v6 = v4;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v4 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::AtomString>(a2, &v30);
      if (!v31)
      {
LABEL_30:
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 16) = 0;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
        goto LABEL_31;
      }
      int v18 = HIDWORD(v33);
      if (HIDWORD(v33) != v33) {
        break;
      }
      uint64_t v19 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
      uint64_t v20 = HIDWORD(v33);
      int v21 = HIDWORD(v33) + 1;
      uint64_t v22 = v32;
      uint64_t v23 = *v19;
      *uint64_t v19 = 0;
      *(void *)(v22 + 8 * v20) = v23;
      HIDWORD(v33) = v21;
      if (v31) {
        goto LABEL_24;
      }
LABEL_28:
      if (!--v6)
      {
        WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v32, HIDWORD(v33));
        *(void *)a1 = v32;
        uint64_t v29 = v33;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        *(void *)(a1 + 8) = v29;
        goto LABEL_19;
      }
    }
    uint64_t v24 = v30;
    int v30 = 0;
    *(void *)(v32 + 8 * HIDWORD(v33)) = v24;
    HIDWORD(v33) = v18 + 1;
LABEL_24:
    uint64_t v25 = v30;
    int v30 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    goto LABEL_28;
  }
  if (v4)
  {
    LODWORD(v33) = v4;
    uint64_t v32 = WTF::fastMalloc((WTF *)(8 * v4));
    while (1)
    {
      IPC::Decoder::decode<WTF::AtomString>(a2, &v30);
      if (!v31) {
        goto LABEL_30;
      }
      int v7 = HIDWORD(v33);
      if (HIDWORD(v33) != v33) {
        break;
      }
      uint64_t v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
      uint64_t v9 = HIDWORD(v33);
      int v10 = HIDWORD(v33) + 1;
      uint64_t v11 = v32;
      uint64_t v12 = *v8;
      *uint64_t v8 = 0;
      *(void *)(v11 + 8 * v9) = v12;
      HIDWORD(v33) = v10;
      if (v31) {
        goto LABEL_10;
      }
LABEL_14:
      if (!--v6)
      {
        uint64_t v15 = v32;
        uint64_t v16 = v33;
        goto LABEL_18;
      }
    }
    unsigned int v13 = v30;
    int v30 = 0;
    *(void *)(v32 + 8 * HIDWORD(v33)) = v13;
    HIDWORD(v33) = v7 + 1;
LABEL_10:
    int v14 = v30;
    int v30 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
LABEL_18:
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v16;
LABEL_19:
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
}

void sub_198839644(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::PageState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::FrameState,void>::encode(a1, a2 + 8);
  char v5 = *(unsigned char *)(a2 + 256);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, (uint64_t *)(a2 + 264));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 272));
}

WTF *IPC::Decoder::decode<WebKit::FrameState>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v142);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v140);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v138);
  IPC::Decoder::decode<WTF::AtomString>(a2, &v136);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v133);
  IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a2, (uint64_t)&v129);
  unint64_t v6 = IPC::Decoder::decode<long long>(a2);
  LOBYTE(v8) = v7;
  unint64_t v9 = IPC::Decoder::decode<long long>(a2);
  char v116 = v10;
  unint64_t v11 = v9;
  uint64_t v114 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
  uint64_t v115 = v12;
  if (!v12) {
    goto LABEL_162;
  }
  while (1)
  {
    unint64_t v13 = *((void *)a2 + 1);
    int v14 = *(WTF::StringImpl **)a2;
    unint64_t v15 = *((void *)a2 + 2) - *(void *)a2;
    char v117 = v8;
    if (v13 <= v15)
    {
      unint64_t v82 = 0;
      unint64_t v83 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v84 = *((void *)a2 + 3);
      if (v84)
      {
        if (v13)
        {
          (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
          unint64_t v83 = *(WTF::StringImpl **)a2;
          unint64_t v82 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v82 = 0;
          unint64_t v83 = 0;
        }
      }
      goto LABEL_166;
    }
    uint64_t v16 = (unsigned __int8 *)v14 + v15;
    *((void *)a2 + 2) = v16 + 1;
    if (!v14)
    {
      unint64_t v82 = v13;
      unint64_t v83 = 0;
LABEL_166:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v85 = *((void *)a2 + 3);
      if (v85 && v82)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v85 + 16))(v85, v83, v82);
        uint64_t v8 = 0;
        int v14 = *(WTF::StringImpl **)a2;
        unint64_t v13 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        int v14 = 0;
        uint64_t v8 = 0;
      }
      goto LABEL_168;
    }
    uint64_t v8 = *v16;
    if (v8 < 2)
    {
      int v113 = 0;
      char v17 = 1;
      goto LABEL_6;
    }
LABEL_168:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v86 = *((void *)a2 + 3);
    if (v86 && v13) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v86 + 16))(v86, v14);
    }
    char v17 = 0;
    int v113 = 1;
LABEL_6:
    if (!v8) {
      char v17 = 0;
    }
    char v111 = v17;
    uint64_t v112 = IPC::Decoder::decode<float>(a2);
    unint64_t v18 = *((void *)a2 + 1);
    uint64_t v19 = *(WTF::StringImpl **)a2;
    unint64_t v20 = *((void *)a2 + 2) - *(void *)a2;
    if (v18 <= v20)
    {
      unint64_t v87 = 0;
      char v88 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v89 = *((void *)a2 + 3);
      if (v89)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v89 + 16))(v89);
          char v88 = *(WTF::StringImpl **)a2;
          unint64_t v87 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v87 = 0;
          char v88 = 0;
        }
      }
      goto LABEL_171;
    }
    int v21 = (unsigned __int8 *)v19 + v20;
    *((void *)a2 + 2) = v21 + 1;
    if (!v19)
    {
      unint64_t v87 = v18;
      char v88 = 0;
LABEL_171:
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v90 = *((void *)a2 + 3);
      if (v90)
      {
        if (v87)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v90 + 16))(v90, v88, v87);
          uint64_t v19 = *(WTF::StringImpl **)a2;
          unint64_t v18 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v18 = 0;
          uint64_t v19 = 0;
        }
      }
      goto LABEL_172;
    }
    unsigned int v22 = *v21;
    if (v22 < 2)
    {
      if (!v22)
      {
        LOBYTE(v124[0]) = 0;
        char v127 = 0;
        char v128 = 1;
        goto LABEL_50;
      }
      IPC::Decoder::decode<WTF::String>(a2, (uint64_t)v120);
      unint64_t v23 = IPC::Decoder::decode<unsigned long long>(a2);
      if ((_BYTE)v24)
      {
        unint64_t v2 = v23;
        long long v122 = 0uLL;
        if (v23 >= 0x4924)
        {
          uint64_t v8 = (uint64_t)off_1EE9B4388;
          LODWORD(v3) = 56;
          while (1)
          {
            IPC::Decoder::decode<WebKit::HTTPBody::Element>(&v144, a2);
            if (!v150[0]) {
              break;
            }
            if (HIDWORD(v122) == DWORD2(v122))
            {
              WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)&v122, (unint64_t)&v144);
            }
            else
            {
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v122 + 56 * HIDWORD(v122), (uint64_t)&v144);
              ++HIDWORD(v122);
            }
            if (v150[0] && v149 != -1) {
              ((void (*)(long long *, WTF::StringImpl **))off_1EE9B4388[v149])(&v118, &v144);
            }
            if (!--v2)
            {
              WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v122, HIDWORD(v122));
              uint64_t v8 = v122;
              int v170 = (WTF::StringImpl *)v122;
              LODWORD(v2) = DWORD2(v122);
              LODWORD(v3) = HIDWORD(v122);
              long long v122 = 0uLL;
              goto LABEL_28;
            }
          }
          LOBYTE(v170) = 0;
          char v172 = 0;
        }
        else
        {
          if (!v23)
          {
            LODWORD(v3) = 0;
            uint64_t v8 = 0;
LABEL_27:
            long long v122 = 0uLL;
            int v170 = (WTF::StringImpl *)v8;
LABEL_28:
            unint64_t v171 = __PAIR64__(v3, v2);
            char v172 = 1;
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v122, v24);
            if (*(void *)a2)
            {
              if (!LOBYTE(v120[1])) {
                goto LABEL_161;
              }
              uint64_t v29 = v120[0];
              v120[0] = 0;
              int v170 = 0;
              unint64_t v171 = 0;
              uint64_t v144 = 0;
              uint64_t v145 = 0;
              unsigned __int16 v166 = v29;
              uint64_t v167 = v8;
              uint64_t v146 = 0;
              unint64_t v168 = __PAIR64__(v3, v2);
              char v169 = 1;
              WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v145, v28);
              int v30 = v144;
              uint64_t v144 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2) {
                  WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
                }
                else {
                  *(_DWORD *)v30 -= 2;
                }
              }
              unsigned int v34 = a1;
              int v35 = 1;
            }
            else
            {
              unsigned int v34 = a1;
              int v35 = 0;
              LOBYTE(v166) = 0;
              char v169 = 0;
            }
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v170, v28);
LABEL_40:
            if (LOBYTE(v120[1]))
            {
              char v36 = v120[0];
              v120[0] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::destroy(v36, v31);
                  if (v35)
                  {
LABEL_45:
                    int v37 = v166;
                    unsigned __int16 v166 = 0;
                    uint64_t v167 = 0;
                    v124[0] = v37;
                    v124[1] = (WTF::StringImpl *)v8;
                    unint64_t v168 = 0;
                    int v125 = v2;
                    int v126 = v3;
                    char v127 = 1;
                    char v128 = 1;
                    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v167, v31);
                    char v39 = v166;
                    unsigned __int16 v166 = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2) {
                        WTF::StringImpl::destroy(v39, v38);
                      }
                      else {
                        *(_DWORD *)v39 -= 2;
                      }
                    }
                    a1 = v34;
                    goto LABEL_50;
                  }
LABEL_123:
                  uint64_t v19 = *(WTF::StringImpl **)a2;
                  uint64_t v74 = *((void *)a2 + 1);
                  *(void *)a2 = 0;
                  *((void *)a2 + 1) = 0;
                  uint64_t v75 = *((void *)a2 + 3);
                  a1 = v34;
                  if (v75 && v74) {
                    goto LABEL_125;
                  }
                  goto LABEL_173;
                }
                *(_DWORD *)v36 -= 2;
              }
            }
            if (v35) {
              goto LABEL_45;
            }
            goto LABEL_123;
          }
          unsigned int v25 = 56 * v23;
          uint64_t v26 = WTF::fastMalloc((WTF *)(56 * v23));
          DWORD2(v122) = v25 / 0x38;
          *(void *)&long long v122 = v26;
          uint64_t v8 = (uint64_t)off_1EE9B4388;
          LODWORD(v3) = 56;
          while (1)
          {
            IPC::Decoder::decode<WebKit::HTTPBody::Element>(&v144, a2);
            if (!v150[0]) {
              break;
            }
            if (HIDWORD(v122) == DWORD2(v122))
            {
              WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)&v122, (unint64_t)&v144);
            }
            else
            {
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v122 + 56 * HIDWORD(v122), (uint64_t)&v144);
              ++HIDWORD(v122);
            }
            if (v150[0] && v149 != -1) {
              ((void (*)(long long *, WTF::StringImpl **))off_1EE9B4388[v149])(&v118, &v144);
            }
            if (!--v2)
            {
              uint64_t v8 = v122;
              LODWORD(v2) = DWORD2(v122);
              LODWORD(v3) = HIDWORD(v122);
              goto LABEL_27;
            }
          }
          LOBYTE(v170) = 0;
        }
        WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v122, v27);
      }
      char v31 = *(WTF::StringImpl **)a2;
      uint64_t v32 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v33 = *((void *)a2 + 3);
      if (v33)
      {
        if (v32)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v31);
          if (*(void *)a2)
          {
            if (LOBYTE(v120[1])) {
              v120[0] = 0;
            }
            goto LABEL_161;
          }
        }
      }
      unsigned int v34 = a1;
      int v35 = 0;
      LOBYTE(v166) = 0;
      char v169 = 0;
      goto LABEL_40;
    }
LABEL_172:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v75 = *((void *)a2 + 3);
    if (v75 && v18) {
LABEL_125:
    }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v75 + 16))(v75, v19);
LABEL_173:
    LOBYTE(v124[0]) = 0;
    char v128 = 0;
    unint64_t v91 = *(WTF::StringImpl **)a2;
    uint64_t v92 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v93 = *((void *)a2 + 3);
    if (v93 && v92) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v93 + 16))(v93, v91);
    }
LABEL_50:
    IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)&v122);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)v120);
    char v109 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    char v110 = v40;
    uint64_t v108 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
    unint64_t v41 = *((void *)a2 + 1);
    uint64_t v8 = v42;
    if (!v42)
    {
      char v94 = *(WTF::StringImpl **)a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v95 = *((void *)a2 + 3);
      if (!v95 || !v41) {
        goto LABEL_177;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v95 + 16))(v95, v94);
      unint64_t v41 = *((void *)a2 + 1);
    }
    char v43 = *(WTF::StringImpl **)a2;
    unint64_t v44 = *((void *)a2 + 2) - *(void *)a2;
    if (v41 <= v44)
    {
      unint64_t v96 = 0;
      uint64_t v97 = 0;
      uint64_t v106 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v106)
      {
        if (v41)
        {
          (*(void (**)(uint64_t))(*(void *)v106 + 16))(v106);
          uint64_t v97 = *(WTF::StringImpl **)a2;
          unint64_t v96 = *((void *)a2 + 1);
        }
        else
        {
LABEL_177:
          unint64_t v96 = 0;
          uint64_t v97 = 0;
        }
      }
LABEL_178:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v98 = *((void *)a2 + 3);
      if (v98 && v96)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v98 + 16))(v98, v97, v96);
        LODWORD(v3) = 0;
        char v43 = *(WTF::StringImpl **)a2;
        unint64_t v41 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v41 = 0;
        char v43 = 0;
        LODWORD(v3) = 0;
      }
      goto LABEL_180;
    }
    char v45 = (unsigned __int8 *)v43 + v44;
    *((void *)a2 + 2) = v45 + 1;
    if (!v43)
    {
      unint64_t v96 = v41;
      uint64_t v97 = 0;
      goto LABEL_178;
    }
    LODWORD(v3) = *v45;
    if (v3 < 2)
    {
      int v46 = 0;
      int v47 = 1;
      goto LABEL_55;
    }
LABEL_180:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v99 = *((void *)a2 + 3);
    if (v99 && v41) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v99 + 16))(v99, v43);
    }
    int v47 = 0;
    int v46 = 1;
LABEL_55:
    if (v3) {
      LODWORD(v2) = v47;
    }
    else {
      LODWORD(v2) = 0;
    }
    IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a2, (uint64_t)&v118);
    unint64_t v48 = IPC::Decoder::decode<unsigned long long>(a2);
    if (!(_BYTE)v49)
    {
      LOBYTE(v166) = 0;
      LOBYTE(v168) = 0;
LABEL_65:
      unint64_t v52 = *(WTF::StringImpl **)a2;
      uint64_t v53 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v54 = *((void *)a2 + 3);
      if (v54 && v53) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v54 + 16))(v54, v52);
      }
      goto LABEL_66;
    }
    unint64_t v3 = v48;
    int v170 = 0;
    unint64_t v171 = 0;
    if (v48 >> 2 >= 0x421)
    {
      int v107 = a1;
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameState>(&v144, a2);
        if (!v165) {
          goto LABEL_195;
        }
        if (HIDWORD(v171) == v171)
        {
          WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameState>((uint64_t)&v170, (unint64_t)&v144);
        }
        else
        {
          WebKit::FrameState::FrameState((uint64_t)v170 + 248 * HIDWORD(v171), (uint64_t *)&v144);
          ++HIDWORD(v171);
        }
        if (v165) {
          WebKit::FrameState::~FrameState(&v144);
        }
        if (!--v3)
        {
          WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v170, HIDWORD(v171));
          int v102 = v170;
          int v170 = 0;
          unsigned __int16 v166 = v102;
          unint64_t v103 = v171;
          unint64_t v171 = 0;
          uint64_t v167 = v103;
          goto LABEL_63;
        }
      }
    }
    if (v48)
    {
      int v107 = a1;
      unsigned int v76 = 248 * v48;
      uint64_t v77 = WTF::fastMalloc((WTF *)(248 * v48));
      LODWORD(v171) = v76 / 0xF8;
      int v170 = (WTF::StringImpl *)v77;
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameState>(&v144, a2);
        if (!v165) {
          break;
        }
        if (HIDWORD(v171) == v171)
        {
          WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameState>((uint64_t)&v170, (unint64_t)&v144);
        }
        else
        {
          WebKit::FrameState::FrameState((uint64_t)v170 + 248 * HIDWORD(v171), (uint64_t *)&v144);
          ++HIDWORD(v171);
        }
        if (v165) {
          WebKit::FrameState::~FrameState(&v144);
        }
        if (!--v3)
        {
          long long v50 = v170;
          unint64_t v51 = v171;
          a1 = v107;
          goto LABEL_62;
        }
      }
LABEL_195:
      LOBYTE(v166) = 0;
      LOBYTE(v168) = 0;
      WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v170, v78);
      a1 = v107;
      goto LABEL_65;
    }
    long long v50 = 0;
    unint64_t v51 = 0;
LABEL_62:
    int v170 = 0;
    unsigned __int16 v166 = v50;
    unint64_t v171 = 0;
    uint64_t v167 = v51;
LABEL_63:
    LOBYTE(v168) = 1;
    WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v170, v49);
LABEL_66:
    IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v170, a2);
    if (!*(void *)a2)
    {
      *a1 = 0;
      a1[248] = 0;
      goto LABEL_112;
    }
    if (v172)
    {
      WebKit::FrameState::FrameState((WebKit::FrameState *)&v144);
      if (v143)
      {
        __int16 v57 = v142;
        uint64_t v142 = 0;
        uint64_t v58 = v144;
        uint64_t v144 = v57;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2) {
            WTF::StringImpl::destroy(v58, v56);
          }
          else {
            *(_DWORD *)v58 -= 2;
          }
        }
        if (v141)
        {
          char v59 = v140;
          uint64_t v140 = 0;
          uint64_t v60 = v145;
          uint64_t v145 = v59;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2) {
              WTF::StringImpl::destroy(v60, v56);
            }
            else {
              *(_DWORD *)v60 -= 2;
            }
          }
          if (v139)
          {
            long long v61 = v138;
            uint64_t v138 = 0;
            long long v62 = v146;
            uint64_t v146 = v61;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2) {
                WTF::StringImpl::destroy(v62, v56);
              }
              else {
                *(_DWORD *)v62 -= 2;
              }
            }
            if (v137)
            {
              char v63 = v136;
              uint64_t v136 = 0;
              long long v64 = v147;
              uint64_t v147 = v63;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2) {
                  WTF::StringImpl::destroy(v64, v56);
                }
                else {
                  *(_DWORD *)v64 -= 2;
                }
              }
              if (v135)
              {
                long long v148 = v133;
                LOBYTE(v149) = v134;
                if (v132)
                {
                  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)v150, (uint64_t *)&v129);
                  if (v117)
                  {
                    unint64_t v151 = v6;
                    if (v116)
                    {
                      unint64_t v152 = v11;
                      if (v115)
                      {
                        char v153 = v114;
                        if (!v113)
                        {
                          char v154 = v111;
                          if ((v112 & 0xFF00000000) != 0)
                          {
                            int v155 = v112;
                            if (v128)
                            {
                              std::__optional_storage_base<WebKit::HTTPBody,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::HTTPBody,false>>((WTF::StringImpl *)v156, v124);
                              if (v123)
                              {
                                v156[2] = v122;
                                if (v121)
                                {
                                  v156[3] = *(_OWORD *)v120;
                                  if (v110)
                                  {
                                    char v157 = v109;
                                    if (v8)
                                    {
                                      int v158 = v108;
                                      if (!v46)
                                      {
                                        char v159 = v2;
                                        if (v119)
                                        {
                                          long long v160 = v118;
                                          if ((_BYTE)v168)
                                          {
                                            if (HIDWORD(v162))
                                            {
                                              char v104 = v161;
                                              uint64_t v8 = 248 * HIDWORD(v162);
                                              do
                                              {
                                                WebKit::FrameState::~FrameState(v104);
                                                char v104 = (WTF::StringImpl **)(v105 + 248);
                                                v8 -= 248;
                                              }
                                              while (v8);
                                            }
                                            char v66 = (WTF *)v161;
                                            if (v161)
                                            {
                                              char v161 = 0;
                                              LODWORD(v162) = 0;
                                              WTF::fastFree(v66, v65);
                                            }
                                            long long v67 = (WTF::StringImpl **)v166;
                                            unsigned __int16 v166 = 0;
                                            char v161 = v67;
                                            uint64_t v68 = v167;
                                            uint64_t v167 = 0;
                                            uint64_t v162 = v68;
                                            if (v172) {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_161:
    __break(1u);
LABEL_162:
    uint64_t v79 = *(WTF::StringImpl **)a2;
    uint64_t v80 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v81 = *((void *)a2 + 3);
    if (v81 && v80) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v81 + 16))(v81, v79);
    }
  }
  if (HIDWORD(v164)) {
    WTF::VectorDestructor<true,WTF::String>::destruct(v163, (WTF::StringImpl *)((char *)v163 + 8 * HIDWORD(v164)));
  }
  char v69 = v163;
  if (v163)
  {
    char v163 = 0;
    LODWORD(v164) = 0;
    WTF::fastFree(v69, v65);
  }
  unint64_t v70 = v170;
  int v170 = 0;
  char v163 = v70;
  unint64_t v71 = v171;
  unint64_t v171 = 0;
  unint64_t v164 = v71;
  WebKit::FrameState::FrameState((uint64_t)a1, (uint64_t *)&v144);
  a1[248] = 1;
  WebKit::FrameState::~FrameState(&v144);
LABEL_112:
  if (v172) {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v170, v55);
  }
  if ((_BYTE)v168) {
    WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v166, v55);
  }
  uint64_t result = (WTF *)std::__optional_destruct_base<std::optional<WebKit::HTTPBody>,false>::~__optional_destruct_base[abi:sn180100](v124, v55);
  if (v132)
  {
    if (v131)
    {
      uint64_t result = v129;
      if (v129)
      {
        uint64_t v129 = 0;
        int v130 = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v73);
      }
    }
  }
  if (v137)
  {
    uint64_t result = v136;
    uint64_t v136 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v73);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v139)
  {
    uint64_t result = v138;
    uint64_t v138 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v73);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v141)
  {
    uint64_t result = v140;
    uint64_t v140 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v73);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v143)
  {
    uint64_t result = v142;
    uint64_t v142 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v73);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!a1[248])
  {
    unsigned int v100 = *(WTF::StringImpl **)a2;
    uint64_t v101 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (result)
    {
      if (v101) {
        return (WTF *)(*(uint64_t (**)(WTF *, WTF::StringImpl *))(*(void *)result + 16))(result, v100);
      }
    }
  }
  return result;
}

void sub_19883A5FC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 248)) {
    WebKit::FrameState::~FrameState((WTF::StringImpl **)v1);
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::decode<IPC::Decoder,WebCore::SerializedScriptValue>(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19883A8BC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    unint64_t v3 = *(unsigned int **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  IPC::ArgumentCoder<WebKit::PageState,void>::encode(a1, a2 + 16);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 296));
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2);
  uint64_t v5 = a2[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  return a1;
}

uint64_t IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v109);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v135);
  IPC::Decoder::decode<WebKit::FrameState>(&v113, a1);
  unsigned __int16 ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(a1);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>>(a1, (uint64_t)&v111);
  unint64_t v10 = *((void *)a1 + 1);
  unint64_t v11 = *(WTF::StringImpl **)a1;
  unint64_t v12 = *((void *)a1 + 2) - *(void *)a1;
  if (v10 <= v12)
  {
    unint64_t v48 = 0;
    char v49 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v50 = *((void *)a1 + 3);
    if (v50)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
        char v49 = *(WTF::StringImpl **)a1;
        unint64_t v48 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v48 = 0;
        char v49 = 0;
      }
    }
    goto LABEL_51;
  }
  unint64_t v13 = (unsigned __int8 *)v11 + v12;
  *((void *)a1 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v48 = v10;
    char v49 = 0;
LABEL_51:
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v51 = *((void *)a1 + 3);
    if (v51)
    {
      if (v48)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v51 + 16))(v51, v49, v48);
        unint64_t v11 = *(WTF::StringImpl **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
    }
    goto LABEL_52;
  }
  unsigned int v14 = *v13;
  if (v14 > 1)
  {
LABEL_52:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (!v52
      || !v10
      || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v11), !*(void *)a1))
    {
      LOBYTE(v83) = 0;
      char v108 = 0;
      goto LABEL_21;
    }
    BOOL v16 = 0;
    int v15 = 1;
    goto LABEL_5;
  }
  int v15 = 0;
  BOOL v16 = v14 != 0;
LABEL_5:
  unint64_t v17 = v136;
  if (!v136) {
    goto LABEL_48;
  }
  unint64_t v17 = (unint64_t)v135;
  char v135 = 0;
  if (!v134) {
    goto LABEL_48;
  }
  uint64_t v9 = *((void *)&v113 + 1);
  unint64_t v10 = v113;
  *(_OWORD *)&v60[8] = v113;
  unint64_t v8 = *((void *)&v114 + 1);
  unint64_t v5 = v114;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v60[24] = __PAIR128__(v8, v5);
  *(_OWORD *)&v60[40] = v115;
  *(void *)&long long v61 = v116;
  BYTE8(v61) = 0;
  LOBYTE(v63) = 0;
  int v6 = v119;
  if (v119)
  {
    uint64_t v18 = v117;
    uint64_t v117 = 0;
    *((void *)&v61 + 1) = v18;
    uint64_t v19 = v118;
    uint64_t v118 = 0;
    uint64_t v62 = v19;
    LOBYTE(v63) = 1;
  }
  long long v64 = v120;
  long long v65 = v121;
  LOBYTE(v66) = 0;
  BYTE8(v67) = 0;
  int v7 = v124;
  if (v124) {
    goto LABEL_49;
  }
  while (1)
  {
    long long v69 = v126;
    long long v70 = v127;
    long long v71 = v128;
    LODWORD(v72) = v129;
    long long v68 = v125;
    uint64_t v20 = v130;
    uint64_t v130 = 0;
    *((void *)&v72 + 1) = v20;
    unsigned int v21 = v131;
    unsigned int v22 = HIDWORD(v131);
    uint64_t v131 = 0;
    unint64_t v73 = __PAIR64__(v22, v21);
    uint64_t v23 = v132;
    uint64_t v132 = 0;
    uint64_t v74 = v23;
    unsigned int v24 = v133;
    unsigned int v25 = HIDWORD(v133);
    uint64_t v133 = 0;
    unint64_t v75 = __PAIR64__(v25, v24);
    if (ShouldOpenExternalURLs > 0xFFu)
    {
      LOBYTE(v76) = ShouldOpenExternalURLs;
      if (v112)
      {
        uint64_t v26 = v111;
        char v111 = 0;
        unint64_t v77 = (unint64_t)v26;
        if (!v15) {
          break;
        }
      }
    }
LABEL_48:
    __break(1u);
LABEL_49:
    long long v45 = v122;
    long long v122 = 0uLL;
    long long v66 = v45;
    *(void *)&long long v45 = v123;
    uint64_t v123 = 0;
    *(void *)&long long v67 = v45;
    BYTE8(v67) = 1;
  }
  BOOL v78 = v16;
  *(void *)&long long v83 = v17;
  *((void *)&v83 + 1) = v10;
  memset(v60, 0, 40);
  *(void *)&long long v84 = v9;
  *((void *)&v84 + 1) = v5;
  long long v86 = v115;
  unint64_t v85 = v8;
  uint64_t v87 = v116;
  LOBYTE(v88) = 0;
  char v90 = 0;
  if (v6)
  {
    uint64_t v88 = *((void *)&v61 + 1);
    uint64_t v27 = v62;
    *((void *)&v61 + 1) = 0;
    uint64_t v62 = 0;
    uint64_t v89 = v27;
    char v90 = 1;
  }
  long long v91 = v120;
  long long v92 = v121;
  LOBYTE(v93) = 0;
  char v95 = 0;
  if (v7)
  {
    long long v46 = v66;
    long long v66 = 0uLL;
    long long v93 = v46;
    *(void *)&long long v46 = v67;
    *(void *)&long long v67 = 0;
    uint64_t v94 = v46;
    char v95 = 1;
  }
  long long v97 = v126;
  long long v98 = v127;
  long long v99 = v128;
  int v100 = v129;
  long long v96 = v125;
  *((void *)&v72 + 1) = 0;
  uint64_t v101 = v20;
  unint64_t v73 = 0;
  unint64_t v102 = __PAIR64__(v22, v21);
  uint64_t v74 = 0;
  uint64_t v103 = v23;
  unint64_t v75 = 0;
  unint64_t v104 = __PAIR64__(v25, v24);
  BOOL v105 = ShouldOpenExternalURLs;
  uint64_t v106 = v26;
  BOOL v107 = v16;
  char v108 = 1;
  unint64_t v77 = 0;
  WebKit::FrameState::~FrameState((WTF::StringImpl **)&v60[8]);
  if (*(void *)v60)
  {
    if (**(_DWORD **)v60 == 2) {
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v60, v11);
    }
    else {
      **(_DWORD **)v60 -= 2;
    }
  }
LABEL_21:
  if (v112)
  {
    BOOL v28 = v111;
    char v111 = 0;
    if (v28) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v28);
    }
  }
  if (v134) {
    WebKit::FrameState::~FrameState((WTF::StringImpl **)&v113);
  }
  if (v136)
  {
    uint64_t v29 = v135;
    char v135 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v11);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  unint64_t v10 = *((void *)a1 + 1);
  if (!v108)
  {
    uint64_t v53 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v54 = *((void *)a1 + 3);
    if (!v54 || !v10)
    {
      unint64_t v10 = 0;
      int v30 = *(WTF::StringImpl **)a1;
LABEL_56:
      unint64_t v55 = 0;
      char v56 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v57 = *((void *)a1 + 3);
      if (v57)
      {
        if (v10)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v30);
          char v56 = *(WTF::StringImpl **)a1;
          unint64_t v55 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v55 = 0;
          char v56 = 0;
        }
      }
      goto LABEL_57;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v54 + 16))(v54, v53);
    unint64_t v10 = *((void *)a1 + 1);
  }
  int v30 = *(WTF::StringImpl **)a1;
  unint64_t v31 = *((void *)a1 + 2) - *(void *)a1;
  if (v10 <= v31) {
    goto LABEL_56;
  }
  uint64_t v32 = (unsigned __int8 *)v30 + v31;
  *((void *)a1 + 2) = v32 + 1;
  if (!v30)
  {
    unint64_t v55 = v10;
    char v56 = 0;
LABEL_57:
    unint64_t v10 = 0;
    int v30 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v58 = *((void *)a1 + 3);
    if (v58)
    {
      if (v55)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v58 + 16))(v58, v56, v55);
        int v30 = *(WTF::StringImpl **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        int v30 = 0;
      }
    }
    goto LABEL_58;
  }
  unsigned int v33 = *v32;
  if (v33 <= 1)
  {
    int v15 = 0;
    BOOL v16 = v33 != 0;
    goto LABEL_36;
  }
LABEL_58:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v59 = *((void *)a1 + 3);
  if (!v59
    || !v10
    || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v59 + 16))(v59, v30), !*(void *)a1))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 312) = 0;
    return std::__optional_destruct_base<WebKit::PageState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83);
  }
  BOOL v16 = 0;
  int v15 = 1;
LABEL_36:
  unint64_t v17 = v110;
  if (!v110) {
    goto LABEL_48;
  }
  unint64_t v17 = (unint64_t)&v109;
  *(void *)&v60[8] = *((void *)&v109 + 1);
  if (!v108) {
    goto LABEL_48;
  }
  int v7 = v87;
  *(void *)&v60[48] = v85;
  long long v34 = v83;
  long long v35 = v84;
  long long v83 = 0u;
  long long v84 = 0u;
  *(_OWORD *)&v60[16] = v34;
  *(_OWORD *)&v60[32] = v35;
  unint64_t v85 = 0;
  long long v61 = v86;
  uint64_t v62 = v87;
  LOBYTE(v63) = 0;
  BYTE8(v64) = 0;
  if (v90)
  {
    uint64_t v63 = v88;
    uint64_t v36 = v89;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    *(void *)&long long v64 = v36;
    BYTE8(v64) = 1;
  }
  long long v65 = v91;
  long long v66 = v92;
  LOBYTE(v67) = 0;
  BYTE8(v68) = 0;
  if (v95)
  {
    long long v47 = v93;
    long long v93 = 0uLL;
    long long v67 = v47;
    *(void *)&long long v47 = v94;
    uint64_t v94 = 0;
    *(void *)&long long v68 = v47;
    BYTE8(v68) = 1;
  }
  long long v70 = v97;
  long long v71 = v98;
  long long v72 = v99;
  LODWORD(v73) = v100;
  long long v69 = v96;
  uint64_t v37 = v101;
  uint64_t v101 = 0;
  uint64_t v74 = v37;
  unint64_t v38 = v102;
  unint64_t v102 = 0;
  unint64_t v75 = v38;
  uint64_t v39 = v103;
  uint64_t v103 = 0;
  uint64_t v76 = v39;
  unint64_t v40 = v104;
  unint64_t v104 = 0;
  unint64_t v77 = v40;
  BOOL v78 = v105;
  unint64_t v41 = v106;
  uint64_t v106 = 0;
  uint64_t v79 = v41;
  BOOL v80 = v107;
  if (v15) {
    goto LABEL_48;
  }
  BOOL v81 = v16;
  uint64_t v82 = 0;
  *(_OWORD *)a2 = v109;
  *(void *)&v60[16] = 0;
  *(void *)(a2 + 16) = v34;
  WebKit::FrameState::FrameState(a2 + 24, (uint64_t *)&v60[24]);
  *(unsigned char *)(a2 + 272) = v78;
  *(void *)(a2 + 280) = v79;
  *(unsigned char *)(a2 + 288) = v80;
  *(unsigned char *)(a2 + 296) = v81;
  *(void *)(a2 + 304) = v82;
  *(unsigned char *)(a2 + 312) = 1;
  uint64_t v82 = 0;
  uint64_t v79 = 0;
  WebKit::FrameState::~FrameState((WTF::StringImpl **)&v60[24]);
  char v43 = *(WTF::StringImpl **)&v60[16];
  *(void *)&v60[16] = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v42);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  return std::__optional_destruct_base<WebKit::PageState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83);
}

void sub_19883B178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void *IPC::ArgumentCoder<WebCore::TextAnimationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 32));
  return IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 48));
}

void *IPC::ArgumentCoder<WebCore::TextAnimationData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::WritingDirection>(a1);
  unsigned __int16 v5 = IPC::Decoder::decode<WebCore::WritingDirection>(a1);
  IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)v14);
  uint64_t result = IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)v12);
  if (!*a1) {
    goto LABEL_10;
  }
  if (v4 <= 0xFFu || v5 <= 0xFFu || !v17 || (*(_OWORD *)&v11[14] = v16, !v15) || !v13)
  {
    __break(1u);
LABEL_10:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
    return result;
  }
  uint64_t v7 = v14[0];
  uint64_t v8 = v14[1];
  uint64_t v9 = v12[0];
  uint64_t v10 = v12[1];
  *(unsigned char *)a2 = v4;
  *(unsigned char *)(a2 + 1) = v5;
  *(_OWORD *)(a2 + 2) = *(_OWORD *)v11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v11[14];
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::TextRecognitionWordData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, (float *)(a2 + 8));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 40));
}

unint64_t *IPC::Decoder::decode<WebCore::FloatQuad>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::TextRecognitionLineData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, (float *)a2);
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 48));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 49));
}

void IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 16);
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 32));
  unsigned __int16 v4 = *(const void **)(a2 + 48);

  IPC::encodeObjectDirectly<NSData>(a1, v4);
}

void IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    char v90 = 0;
    unint64_t v91 = 0;
    if (v4 >= 0x4924)
    {
      do
      {
        IPC::Decoder::decode<WebCore::TextRecognitionLineData>((uint64_t)v96, a1);
        if (!v99) {
          goto LABEL_33;
        }
        if (HIDWORD(v91) == v91)
        {
          WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionLineData>((uint64_t)&v90, (unint64_t)v96);
        }
        else
        {
          unint64_t v12 = (char *)v90 + 56 * HIDWORD(v91);
          long long v13 = *(_OWORD *)&v96[16];
          *(_OWORD *)unint64_t v12 = *(_OWORD *)v96;
          *((_OWORD *)v12 + 1) = v13;
          *((void *)v12 + 4) = 0;
          *((void *)v12 + 5) = 0;
          uint64_t v14 = *(void *)&v96[32];
          *(void *)&v96[32] = 0;
          *((void *)v12 + 4) = v14;
          LODWORD(v14) = v97;
          LODWORD(v97) = 0;
          *((_DWORD *)v12 + 10) = v14;
          LODWORD(v14) = HIDWORD(v97);
          HIDWORD(v97) = 0;
          *((_DWORD *)v12 + 11) = v14;
          *((_WORD *)v12 + 24) = v98;
          ++HIDWORD(v91);
        }
        if (v99) {
          WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[32], v5);
        }
        --v6;
      }
      while (v6);
      unsigned int v15 = HIDWORD(v91);
      long long v16 = v90;
      if (v91 > HIDWORD(v91))
      {
        char v17 = v90;
        if (HIDWORD(v91))
        {
          if (HIDWORD(v91) >= 0x4924925)
          {
            __break(0xC471u);
            goto LABEL_140;
          }
          unsigned int v18 = 56 * HIDWORD(v91);
          uint64_t v19 = (WTF *)WTF::fastMalloc((WTF *)(56 * HIDWORD(v91)));
          LODWORD(v91) = v18 / 0x38;
          char v90 = v19;
          char v17 = v16;
          if (v19 != v16)
          {
            WTF::VectorMover<false,WebCore::TextRecognitionLineData>::move((uint64_t)v16, (char *)v16 + 56 * v15, (uint64_t)v19);
            char v17 = v90;
          }
        }
        if (v16)
        {
          if (v17 == v16)
          {
            char v90 = 0;
            LODWORD(v91) = 0;
          }
          WTF::fastFree(v16, v5);
          long long v16 = v90;
        }
        else
        {
          long long v16 = v17;
        }
      }
      long long v93 = v16;
      unint64_t v85 = v91;
      char v90 = 0;
      unint64_t v91 = 0;
      unint64_t v94 = v85;
    }
    else
    {
      if (v4)
      {
        LODWORD(v91) = 56 * (int)v4 / 0x38u;
        char v90 = (WTF *)WTF::fastMalloc((WTF *)(56 * v4));
        while (1)
        {
          IPC::Decoder::decode<WebCore::TextRecognitionLineData>((uint64_t)v96, a1);
          if (!v99) {
            break;
          }
          if (HIDWORD(v91) == v91)
          {
            WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionLineData>((uint64_t)&v90, (unint64_t)v96);
          }
          else
          {
            uint64_t v7 = (char *)v90 + 56 * HIDWORD(v91);
            long long v8 = *(_OWORD *)&v96[16];
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v96;
            *((_OWORD *)v7 + 1) = v8;
            *((void *)v7 + 4) = 0;
            *((void *)v7 + 5) = 0;
            uint64_t v9 = *(void *)&v96[32];
            *(void *)&v96[32] = 0;
            *((void *)v7 + 4) = v9;
            LODWORD(v9) = v97;
            LODWORD(v97) = 0;
            *((_DWORD *)v7 + 10) = v9;
            LODWORD(v9) = HIDWORD(v97);
            HIDWORD(v97) = 0;
            *((_DWORD *)v7 + 11) = v9;
            *((_WORD *)v7 + 24) = v98;
            ++HIDWORD(v91);
          }
          if (v99) {
            WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[32], v5);
          }
          if (!--v6)
          {
            uint64_t v10 = v90;
            unint64_t v11 = v91;
            goto LABEL_15;
          }
        }
LABEL_33:
        LOBYTE(v93) = 0;
        char v95 = 0;
        WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v5);
        goto LABEL_34;
      }
      uint64_t v10 = 0;
      unint64_t v11 = 0;
LABEL_15:
      char v90 = 0;
      unint64_t v91 = 0;
      long long v93 = v10;
      unint64_t v94 = v11;
    }
    char v95 = 1;
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v5);
    goto LABEL_39;
  }
  LOBYTE(v93) = 0;
  char v95 = 0;
LABEL_34:
  unint64_t v20 = *a1;
  unint64_t v21 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v22 = a1[3];
  if (v22) {
    BOOL v23 = v21 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20);
  }
LABEL_39:
  unint64_t v24 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v25)
  {
    LOBYTE(v90) = 0;
    char v92 = 0;
LABEL_68:
    unint64_t v43 = *a1;
    unint64_t v44 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v45 = a1[3];
    if (v45 && v44) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v45 + 16))(v45, v43);
    }
    goto LABEL_69;
  }
  unint64_t v26 = v24;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  if (v24 >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextRecognitionDataDetector>((uint64_t)v96, (uint64_t *)a1);
      if (!v96[24]) {
        goto LABEL_67;
      }
      if (HIDWORD(v88) == v88)
      {
        WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionDataDetector>((uint64_t)&v87, (unint64_t)v96);
      }
      else
      {
        long long v34 = (char *)v87 + 24 * HIDWORD(v88);
        uint64_t v35 = *(void *)v96;
        *(void *)long long v96 = 0;
        *((void *)v34 + 1) = 0;
        *((void *)v34 + 2) = 0;
        *(void *)long long v34 = v35;
        uint64_t v36 = *(void *)&v96[8];
        *(void *)&v96[8] = 0;
        *((void *)v34 + 1) = v36;
        LODWORD(v36) = *(_DWORD *)&v96[16];
        *(_DWORD *)&v96[16] = 0;
        *((_DWORD *)v34 + 4) = v36;
        LODWORD(v36) = *(_DWORD *)&v96[20];
        *(_DWORD *)&v96[20] = 0;
        *((_DWORD *)v34 + 5) = v36;
        ++HIDWORD(v88);
      }
      std::__optional_destruct_base<WebCore::TextRecognitionDataDetector,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v96, v27);
      if (!--v26)
      {
        int v37 = HIDWORD(v88);
        unint64_t v38 = (char *)v87;
        if (v88 > HIDWORD(v88))
        {
          uint64_t v39 = v87;
          if (HIDWORD(v88))
          {
            if (HIDWORD(v88) >= 0xAAAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x19883BF8CLL);
            }
            unsigned int v40 = 24 * HIDWORD(v88);
            unint64_t v41 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v88)));
            LODWORD(v88) = v40 / 0x18;
            uint64_t v87 = v41;
            uint64_t v39 = (WTF *)v38;
            if (v41 != (WTF *)v38)
            {
              WTF::VectorMover<false,WebCore::TextRecognitionDataDetector>::move(v38, &v38[24 * v37], (uint64_t)v41);
              uint64_t v39 = v87;
            }
          }
          if (v38)
          {
            if (v39 == (WTF *)v38)
            {
              uint64_t v87 = 0;
              LODWORD(v88) = 0;
            }
            WTF::fastFree((WTF *)v38, v25);
            unint64_t v38 = (char *)v87;
          }
          else
          {
            unint64_t v38 = (char *)v39;
          }
        }
        uint64_t v87 = 0;
        char v90 = (WTF *)v38;
        unsigned int v33 = v88;
        unsigned int v32 = HIDWORD(v88);
        goto LABEL_52;
      }
    }
  }
  if (v24)
  {
    LODWORD(v88) = 24 * (int)v24 / 0x18u;
    uint64_t v87 = (WTF *)WTF::fastMalloc((WTF *)(24 * v24));
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextRecognitionDataDetector>((uint64_t)v96, (uint64_t *)a1);
      if (!v96[24]) {
        break;
      }
      if (HIDWORD(v88) == v88)
      {
        WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionDataDetector>((uint64_t)&v87, (unint64_t)v96);
      }
      else
      {
        BOOL v28 = (char *)v87 + 24 * HIDWORD(v88);
        uint64_t v29 = *(void *)v96;
        *(void *)long long v96 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *(void *)BOOL v28 = v29;
        uint64_t v30 = *(void *)&v96[8];
        *(void *)&v96[8] = 0;
        *((void *)v28 + 1) = v30;
        LODWORD(v30) = *(_DWORD *)&v96[16];
        *(_DWORD *)&v96[16] = 0;
        *((_DWORD *)v28 + 4) = v30;
        LODWORD(v30) = *(_DWORD *)&v96[20];
        *(_DWORD *)&v96[20] = 0;
        *((_DWORD *)v28 + 5) = v30;
        ++HIDWORD(v88);
      }
      std::__optional_destruct_base<WebCore::TextRecognitionDataDetector,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v96, v27);
      if (!--v26)
      {
        unint64_t v31 = v87;
        unsigned int v33 = v88;
        unsigned int v32 = HIDWORD(v88);
        goto LABEL_51;
      }
    }
LABEL_67:
    LOBYTE(v90) = 0;
    char v92 = 0;
    std::__optional_destruct_base<WebCore::TextRecognitionDataDetector,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v96, v27);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v42);
    goto LABEL_68;
  }
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unint64_t v31 = 0;
LABEL_51:
  uint64_t v87 = 0;
  char v90 = v31;
LABEL_52:
  uint64_t v88 = 0;
  unint64_t v91 = __PAIR64__(v32, v33);
  char v92 = 1;
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v25);
LABEL_69:
  unint64_t v46 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v47)
  {
    unint64_t v48 = v46;
    int v100 = 0;
    uint64_t v101 = 0;
    if (v46 >= 0x6666)
    {
      do
      {
        IPC::Decoder::decode<WebCore::TextRecognitionBlockData>((uint64_t)v96, (IPC::Decoder *)a1);
        if (!(_BYTE)v97) {
          goto LABEL_109;
        }
        int v60 = HIDWORD(v101);
        if (HIDWORD(v101) == v101)
        {
          unint64_t v61 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, HIDWORD(v101) + 1, (unint64_t)v96);
          int v60 = HIDWORD(v101);
          uint64_t v62 = (char *)v100 + 40 * HIDWORD(v101);
          uint64_t v63 = *(void *)v61;
          *(void *)unint64_t v61 = 0;
          *(void *)uint64_t v62 = v63;
          long long v64 = *(_OWORD *)(v61 + 8);
          *(_OWORD *)(v62 + 24) = *(_OWORD *)(v61 + 24);
        }
        else
        {
          uint64_t v62 = (char *)v100 + 40 * HIDWORD(v101);
          uint64_t v65 = *(void *)v96;
          *(void *)long long v96 = 0;
          *(void *)uint64_t v62 = v65;
          long long v64 = *(_OWORD *)&v96[8];
          *(_OWORD *)(v62 + 24) = *(_OWORD *)&v96[24];
        }
        *(_OWORD *)(v62 + 8) = v64;
        HIDWORD(v101) = v60 + 1;
        if ((_BYTE)v97)
        {
          long long v66 = *(WTF::StringImpl **)v96;
          *(void *)long long v96 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2) {
              WTF::StringImpl::destroy(v66, v47);
            }
            else {
              *(_DWORD *)v66 -= 2;
            }
          }
        }
        --v48;
      }
      while (v48);
      unsigned int v67 = HIDWORD(v101);
      long long v68 = v100;
      if (v101 > HIDWORD(v101))
      {
        long long v69 = v100;
        if (HIDWORD(v101))
        {
          if (HIDWORD(v101) >= 0x6666667)
          {
            __break(0xC471u);
LABEL_139:
            __break(1u);
LABEL_140:
            JUMPOUT(0x19883BF84);
          }
          uint64_t v70 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v101)));
          LODWORD(v101) = 40 * v67 / 0x28;
          int v100 = (WTF::StringImpl *)v70;
          long long v69 = v68;
          if ((WTF::StringImpl *)v70 != v68)
          {
            WTF::VectorMover<false,WebCore::TextRecognitionBlockData>::move(v68, (WTF::StringImpl *)((char *)v68 + 40 * v67), v70);
            long long v69 = v100;
          }
        }
        if (v68)
        {
          if (v69 == v68)
          {
            int v100 = 0;
            LODWORD(v101) = 0;
          }
          WTF::fastFree(v68, v47);
          long long v68 = v100;
        }
        else
        {
          long long v68 = v69;
        }
      }
      uint64_t v87 = v68;
      uint64_t v86 = v101;
      int v100 = 0;
      uint64_t v101 = 0;
      uint64_t v88 = v86;
    }
    else
    {
      if (v46)
      {
        unsigned int v49 = 40 * v46;
        uint64_t v50 = WTF::fastMalloc((WTF *)(40 * v46));
        LODWORD(v101) = v49 / 0x28;
        int v100 = (WTF::StringImpl *)v50;
        while (1)
        {
          IPC::Decoder::decode<WebCore::TextRecognitionBlockData>((uint64_t)v96, (IPC::Decoder *)a1);
          if (!(_BYTE)v97) {
            break;
          }
          int v51 = HIDWORD(v101);
          if (HIDWORD(v101) == v101)
          {
            unint64_t v52 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, HIDWORD(v101) + 1, (unint64_t)v96);
            int v51 = HIDWORD(v101);
            uint64_t v53 = (char *)v100 + 40 * HIDWORD(v101);
            uint64_t v54 = *(void *)v52;
            *(void *)unint64_t v52 = 0;
            *(void *)uint64_t v53 = v54;
            long long v55 = *(_OWORD *)(v52 + 8);
            *(_OWORD *)(v53 + 24) = *(_OWORD *)(v52 + 24);
          }
          else
          {
            uint64_t v53 = (char *)v100 + 40 * HIDWORD(v101);
            uint64_t v56 = *(void *)v96;
            *(void *)long long v96 = 0;
            *(void *)uint64_t v53 = v56;
            long long v55 = *(_OWORD *)&v96[8];
            *(_OWORD *)(v53 + 24) = *(_OWORD *)&v96[24];
          }
          *(_OWORD *)(v53 + 8) = v55;
          HIDWORD(v101) = v51 + 1;
          if ((_BYTE)v97)
          {
            uint64_t v57 = *(WTF::StringImpl **)v96;
            *(void *)long long v96 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2) {
                WTF::StringImpl::destroy(v57, v47);
              }
              else {
                *(_DWORD *)v57 -= 2;
              }
            }
          }
          if (!--v48)
          {
            uint64_t v58 = v100;
            uint64_t v59 = v101;
            goto LABEL_86;
          }
        }
LABEL_109:
        LOBYTE(v87) = 0;
        char v89 = 0;
        WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v47);
        goto LABEL_110;
      }
      uint64_t v58 = 0;
      uint64_t v59 = 0;
LABEL_86:
      int v100 = 0;
      uint64_t v101 = 0;
      uint64_t v87 = v58;
      uint64_t v88 = v59;
    }
    char v89 = 1;
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v47);
    goto LABEL_111;
  }
  LOBYTE(v87) = 0;
  char v89 = 0;
LABEL_110:
  unint64_t v71 = *a1;
  unint64_t v72 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v73 = a1[3];
  if (v73 && v72) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v73 + 16))(v73, v71);
  }
LABEL_111:
  IPC::Decoder::decode<WTF::RetainPtr<NSData>>((uint64_t)a1, (uint64_t)&v100);
  if (!*a1)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    goto LABEL_117;
  }
  if (!v95) {
    goto LABEL_139;
  }
  *(void *)&v96[8] = 0;
  unint64_t v75 = v93;
  unint64_t v76 = v94;
  long long v93 = 0;
  unint64_t v94 = 0;
  if (!v92) {
    goto LABEL_139;
  }
  unint64_t v77 = v90;
  unint64_t v78 = v91;
  char v90 = 0;
  unint64_t v91 = 0;
  if (!v89) {
    goto LABEL_139;
  }
  uint64_t v79 = v87;
  uint64_t v80 = v88;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  if (!(_BYTE)v101) {
    goto LABEL_139;
  }
  BOOL v81 = v100;
  int v100 = 0;
  *(void *)a2 = v75;
  *(void *)(a2 + 8) = v76;
  *(void *)long long v96 = 0;
  *(void *)&v96[16] = 0;
  *(void *)(a2 + 16) = v77;
  *(void *)&v96[24] = 0;
  *(void *)(a2 + 24) = v78;
  *(void *)&v96[32] = 0;
  *(void *)(a2 + 32) = v79;
  uint64_t v97 = 0;
  *(void *)(a2 + 40) = v80;
  *(void *)(a2 + 48) = v81;
  *(unsigned char *)(a2 + 56) = 1;
  uint64_t v98 = 0;
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[32], v74);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[16], v82);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v83);
LABEL_117:
  if ((_BYTE)v101)
  {
    long long v84 = v100;
    int v100 = 0;
    if (v84) {
      CFRelease(v84);
    }
  }
  if (v89) {
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v74);
  }
  if (v92) {
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v74);
  }
  if (v95) {
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v93, v74);
  }
}

void sub_19883BF98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  if (a30)
  {
    long long v34 = a25;
    a25 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, a2);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v32 - 64, a2);
  if (a18) {
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v35);
  }
  if (a24) {
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, v35);
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSData>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<NSData>,void>::decode<NSData,NSData*>((const void ***)a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    unint64_t v4 = *(const void ***)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, const void **))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19883C0F8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    unint64_t v3 = *(const void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 16));
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v7, (WebCore::ResourceRequestBase *)(a2 + 16));
  unint64_t v4 = v7;
  BOOL v7 = 0;
  long long v8 = v4;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(a1, &v8);
  if (v4) {
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v4);
  }
  uint64_t v5 = (WTF::RefCountedBase *)v7;
  BOOL v7 = 0;
  if (v5) {
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  }
  return IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 216));
}

void sub_19883C1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::RefCountedBase *a9)
{
  if (v9) {
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  }
  if (a9) {
    WTF::RefCounted<WebCore::FormData>::deref(a9);
  }
  _Unwind_Resume(exception_object);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a1);
  char v9 = v8;
  IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)a1, (uint64_t)v19);
  if (v20)
  {
    IPC::Decoder::decode<IPC::FormDataReference>((WTF *)a1, &v22);
    if (v23)
    {
      if (!v20) {
        goto LABEL_26;
      }
      unint64_t v11 = v22;
      unint64_t v22 = 0;
      v31[0] = v11;
      WebCore::ResourceRequestBase::setHTTPBody();
      unint64_t v12 = (WTF::RefCountedBase *)v31[0];
      v31[0] = 0;
      if (v12) {
        WTF::RefCounted<WebCore::FormData>::deref(v12);
      }
      if (v23)
      {
        long long v13 = v22;
        unint64_t v22 = 0;
        if (v13) {
          WTF::RefCounted<WebCore::FormData>::deref(v13);
        }
      }
    }
  }
  IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)a1, (uint64_t)v31);
  if (!*a1)
  {
LABEL_27:
    *a2 = 0;
    a2[512] = 0;
    goto LABEL_25;
  }
  if (!v6 || !v9 || !v20 || !v32)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)&v22, v4, v7, v19, (uint64_t)v31);
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)a2, (uint64_t)&v22);
  a2[512] = 1;
  unsigned int v15 = v30;
  uint64_t v30 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (v29 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v29])(&v21, &v28);
  }
  int v29 = -1;
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v26);
  CFTypeRef v17 = v25;
  CFTypeRef v25 = 0;
  if (v17) {
    CFRelease(v17);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v24);
LABEL_25:
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v10);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v19);
}

void sub_19883C3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  unint64_t v38 = (WTF::RefCountedBase *)STACK[0x2D8];
  STACK[0x2D8] = 0;
  if (v38) {
    WTF::RefCounted<WebCore::FormData>::deref(v38);
  }
  if (a37)
  {
    uint64_t v39 = (WTF::RefCountedBase *)a36;
    a36 = 0;
    if (v39) {
      WTF::RefCounted<WebCore::FormData>::deref(v39);
    }
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_19883C4DC()
{
}

unint64_t *IPC::ArgumentCoder<WebKit::ViewWindowCoordinates,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v10);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v8);
  uint64_t result = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  if (!*a1) {
    goto LABEL_9;
  }
  if (!v13 || !v11 || (long long v6 = v10, !v9) || (v7 = v8, !v5))
  {
    __break(1u);
LABEL_9:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    return result;
  }
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(void *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 56) = 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::CString,void>::decode@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v7)
    {
      uint64_t result = WTF::CString::CString();
      *(void *)a2 = v5;
      *(unsigned char *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::MediaTime,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 12);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::MediaTime,void>::encode(void *a1, uint64_t *a2)
{
  uint64_t v13 = *a2;
  uint64_t result = IPC::StreamConnectionEncoder::encodeSpan<long long const,18446744073709551615ul>(a1, &v13, 1);
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *((_DWORD *)a2 + 2);
      a1[2] = v11;
      unint64_t v5 = v11;
    }
  }
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *((unsigned char *)a2 + 12);
    a1[2] = v5 + 1;
  }
  return result;
}

int64_t IPC::ArgumentCoder<WTF::MediaTime,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::Decoder::decode<long long>(a1);
  uint64_t v6 = v5;
  unint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    unint64_t v11 = (_DWORD *)(v8 + v9);
    uint64_t v12 = v8 + v9 + 4;
    *((void *)a1 + 2) = v12;
    if (!v8)
    {
      unint64_t v27 = v7;
      uint64_t v28 = 0;
      goto LABEL_36;
    }
    int v13 = 0;
    LODWORD(v14) = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (v29)
    {
      int64_t v39 = result;
      uint64_t v43 = v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *(void *)a1;
        unint64_t v27 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
      int64_t result = v39;
      uint64_t v6 = v43;
    }
LABEL_36:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v14 = *((void *)a1 + 3);
    if (v14)
    {
      int64_t v38 = result;
      uint64_t v42 = v6;
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v28, v27);
        LODWORD(v14) = 0;
        uint64_t v8 = *(void *)a1;
        unint64_t v7 = *((void *)a1 + 1);
        int v13 = 1;
        uint64_t v12 = *((void *)a1 + 2);
        int64_t result = v38;
        uint64_t v6 = v42;
LABEL_8:
        unint64_t v15 = v12 - v8;
        if (v7 <= v15)
        {
          int v32 = v14;
          int v34 = v13;
          int64_t v36 = result;
          uint64_t v40 = v6;
          unint64_t v27 = 0;
          uint64_t v31 = *((void *)a1 + 3);
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          if (!v31) {
            goto LABEL_56;
          }
          if (v7)
          {
            (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
            uint64_t v8 = *(void *)a1;
            unint64_t v27 = *((void *)a1 + 1);
          }
          else
          {
LABEL_56:
            uint64_t v8 = 0;
          }
          int64_t result = v36;
          uint64_t v6 = v40;
          LODWORD(v14) = v32;
          int v13 = v34;
        }
        else
        {
          CFTypeRef v16 = (char *)(v8 + v15);
          *((void *)a1 + 2) = v16 + 1;
          if (v8)
          {
            int v17 = 0;
            char v18 = *v16;
            goto LABEL_11;
          }
          unint64_t v27 = v7;
        }
      }
      else
      {
        LODWORD(v14) = 0;
        uint64_t v8 = 0;
        int v13 = 1;
      }
    }
    else
    {
      unint64_t v27 = 0;
      uint64_t v8 = 0;
      int v13 = 1;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v30 = *((void *)a1 + 3);
    if (!v30) {
      goto LABEL_39;
    }
    if (!v27) {
      goto LABEL_39;
    }
    int64_t v37 = result;
    uint64_t v41 = v6;
    int v33 = v14;
    int v35 = v13;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v8, v27);
    LODWORD(v14) = v33;
    int v13 = v35;
    int64_t result = v37;
    uint64_t v6 = v41;
    if (!*(void *)a1)
    {
LABEL_39:
      char v26 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_33;
    }
    char v18 = 0;
    int v17 = 1;
LABEL_11:
    if ((_BYTE)v6 && !v13 && !v17) {
      break;
    }
    __break(1u);
  }
  BOOL v20 = (v18 & 1) == 0 || v14 != 0;
  if (result >= 0) {
    char v21 = 5;
  }
  else {
    char v21 = 9;
  }
  BOOL v22 = !v20;
  if (v20) {
    char v23 = v18;
  }
  else {
    char v23 = v21;
  }
  if (v22) {
    uint64_t v24 = result >> 63;
  }
  else {
    uint64_t v24 = result;
  }
  *(void *)a2 = v24;
  if (v22) {
    int v25 = 1;
  }
  else {
    int v25 = v14;
  }
  *(_DWORD *)(a2 + 8) = v25;
  *(unsigned char *)(a2 + 12) = v23;
  char v26 = 1;
LABEL_33:
  *(unsigned char *)(a2 + 16) = v26;
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::Seconds,void>::encode(IPC::Encoder *a1, double *a2)
{
  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *a2);
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::AtomString,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1;
  int64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  uint64_t v6 = *(void *)v2;
  if (!*(void *)v2)
  {
    *a2 = 0;
    goto LABEL_7;
  }
  if (v8)
  {
    unint64_t v2 = v7;
    unint64_t v7 = 0;
    if (!v2) {
      goto LABEL_6;
    }
    unint64_t v9 = v2;
    if ((*((unsigned char *)v2 + 16) & 0x10) != 0) {
      goto LABEL_6;
    }
    WTF::AtomStringImpl::addSlowCase();
    int64_t result = v9;
    unint64_t v2 = v10;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    if (!result) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  if (*(_DWORD *)result == 2) {
    int64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  else {
    *(_DWORD *)result -= 2;
  }
LABEL_6:
  *(void *)a2 = v2;
  LOBYTE(v6) = 1;
LABEL_7:
  a2[8] = v6;
  if (v8)
  {
    int64_t result = v7;
    unint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19883CAB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2);
  uint64_t v5 = a2[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
}

uint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfos,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    unint64_t v45 = 0;
    uint64_t v46 = 0;
    if (v4 >= 0xAAAA)
    {
      do
      {
        uint64_t result = IPC::Decoder::decode<WebCore::DOMCacheEngine::CacheInfo>((uint64_t)&v42, a1);
        if (!v44) {
          goto LABEL_39;
        }
        if (HIDWORD(v46) == v46)
        {
          uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v45, HIDWORD(v46) + 1, (unint64_t)&v42);
          uint64_t v19 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
          *uint64_t v19 = *(_OWORD *)result;
          BOOL v20 = (WTF::StringImpl **)(v19 + 1);
          char v21 = (WTF::StringImpl **)((char *)result + 16);
        }
        else
        {
          BOOL v22 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
          *BOOL v22 = v42;
          BOOL v20 = (WTF::StringImpl **)(v22 + 1);
          char v21 = &v43;
        }
        char v23 = *v21;
        *char v21 = 0;
        *BOOL v20 = v23;
        ++HIDWORD(v46);
        if (v44)
        {
          uint64_t result = v43;
          uint64_t v43 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        --v6;
      }
      while (v6);
      unsigned int v24 = HIDWORD(v46);
      int v25 = v45;
      if (v46 > HIDWORD(v46))
      {
        char v26 = v45;
        if (HIDWORD(v46))
        {
          if (HIDWORD(v46) >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return result;
          }
          unsigned int v27 = 24 * HIDWORD(v46);
          uint64_t v28 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v46)));
          LODWORD(v46) = v27 / 0x18;
          unint64_t v45 = v28;
          char v26 = v25;
          if (v28 != v25)
          {
            WTF::VectorMover<false,WebKit::WebScriptMessageHandlerData>::move(v25, (WTF::StringImpl *)((char *)v25 + 24 * v24), (uint64_t)v28);
            char v26 = v45;
          }
        }
        if (v25)
        {
          if (v26 == v25)
          {
            unint64_t v45 = 0;
            LODWORD(v46) = 0;
          }
          WTF::fastFree(v25, v5);
          int v25 = v45;
        }
        else
        {
          int v25 = v26;
        }
      }
      int64_t v39 = v25;
      uint64_t v38 = v46;
      unint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v40 = v38;
      goto LABEL_19;
    }
    if (!v4)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
LABEL_18:
      unint64_t v45 = 0;
      uint64_t v46 = 0;
      int64_t v39 = v14;
      uint64_t v40 = v15;
LABEL_19:
      int v16 = 1;
      char v41 = 1;
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v5);
      goto LABEL_42;
    }
    LODWORD(v46) = 24 * (int)v4 / 0x18u;
    unint64_t v45 = (WTF *)WTF::fastMalloc((WTF *)(24 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::DOMCacheEngine::CacheInfo>((uint64_t)&v42, a1);
      if (!v44) {
        break;
      }
      if (HIDWORD(v46) == v46)
      {
        unint64_t v7 = (_OWORD *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v45, HIDWORD(v46) + 1, (unint64_t)&v42);
        char v8 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
        *char v8 = *v7;
        unint64_t v9 = (WTF::StringImpl **)(v8 + 1);
        unint64_t v10 = (WTF::StringImpl **)(v7 + 1);
      }
      else
      {
        unint64_t v11 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
        *unint64_t v11 = v42;
        unint64_t v9 = (WTF::StringImpl **)(v11 + 1);
        unint64_t v10 = &v43;
      }
      uint64_t v12 = *v10;
      *unint64_t v10 = 0;
      *unint64_t v9 = v12;
      ++HIDWORD(v46);
      if (v44)
      {
        int v13 = v43;
        uint64_t v43 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v5);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      if (!--v6)
      {
        uint64_t v14 = v45;
        uint64_t v15 = v46;
        goto LABEL_18;
      }
    }
LABEL_39:
    LOBYTE(v39) = 0;
    char v41 = 0;
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v5);
  }
  else
  {
    LOBYTE(v39) = 0;
    char v41 = 0;
  }
  char v18 = (void *)*a1;
  uint64_t v29 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (WTF::StringImpl *)a1[3];
  if (result && v29) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v18);
  }
  int v16 = 0;
LABEL_42:
  unint64_t v30 = a1[1];
  uint64_t v31 = (WTF::StringImpl *)*a1;
  unint64_t v32 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v30 >= v32 && v30 - v32 > 7)
  {
    int v34 = (WTF::StringImpl **)((char *)v31 + v32);
    a1[2] = (uint64_t)(v34 + 1);
    if (v31)
    {
      unint64_t v30 = 0;
      uint64_t v31 = *v34;
      if (!v16) {
        goto LABEL_64;
      }
      goto LABEL_49;
    }
    unint64_t v37 = v30;
    char v18 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    char v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      goto LABEL_65;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (!result) {
      break;
    }
    if (!v37) {
      break;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v18);
    if (!*a1) {
      break;
    }
    uint64_t v31 = 0;
    unint64_t v30 = 1;
    if (v41)
    {
LABEL_49:
      int v35 = v39;
      uint64_t v36 = v40;
      int64_t v39 = 0;
      uint64_t v40 = 0;
      if (!v30)
      {
        uint64_t v43 = v31;
        long long v42 = 0uLL;
        *(void *)a2 = v35;
        *(void *)(a2 + 8) = v36;
        *(void *)(a2 + 16) = v31;
        *(unsigned char *)(a2 + 24) = 1;
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v18);
        goto LABEL_51;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    if (v30)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v31, v30);
      char v18 = (void *)*a1;
      unint64_t v37 = a1[1];
    }
    else
    {
      unint64_t v37 = 0;
      char v18 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_51:
  if (v41) {
    return (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v18);
  }
  return result;
}

void sub_19883D06C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a12) {
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
}

uint64_t IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v13);
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v10 = *a1;
        uint64_t v9 = a1[1];
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
LABEL_8:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  char v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    uint64_t v9 = v5;
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_9;
  }
  uint64_t v10 = v14;
  if (v14)
  {
    *(_OWORD *)a2 = v13;
    *(unsigned char *)(a2 + 16) = v9 != 0;
    char v11 = 1;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_15:
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, v10, v9);
        uint64_t v6 = *a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = a1[3];
      if (!result) {
        break;
      }
      if (!v5) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
      if (!*a1) {
        break;
      }
      uint64_t v9 = v14;
    }
    char v11 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 24) = v11;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 8));
  char v5 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, a2 + 224);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 272));
  char v6 = *(unsigned char *)(a2 + 280);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<WebCore::ResourceResponseData,void>::encode(a1, a2 + 288);
  unsigned __int8 v7 = *(_DWORD *)(a2 + 576);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v7);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>((unsigned int *)a1, a2 + 568, v7);
  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 584));
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    char v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v27 = v4;
    uint64_t v28 = 0;
  }
  else
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (v29)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *(void *)a1;
        unint64_t v27 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v30 = *((void *)a1 + 3);
  if (v30 && v27)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
    uint64_t v10 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v10 = 0;
  }
  int v9 = 1;
LABEL_8:
  unint64_t v11 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v11 && v4 - v11 > 7)
  {
    long long v13 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v13 + 1;
    if (v5)
    {
      int v14 = 0;
      uint64_t v15 = *v13;
      goto LABEL_15;
    }
    unint64_t v31 = v4;
    uint64_t v32 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
        uint64_t v32 = *(void *)a1;
        unint64_t v31 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v34 = *((void *)a1 + 3);
  if (v34 && v31) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
  }
  uint64_t v15 = 0;
  int v14 = 1;
LABEL_15:
  unsigned __int16 Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v76);
  IPC::Decoder::decode<WebCore::FetchOptions>(a1, (uint64_t)v78);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v74);
  unsigned __int16 v17 = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  char v18 = IPC::Decoder::decode<WebCore::ResourceResponseData>(v72, a1);
  unint64_t v19 = *((void *)a1 + 1);
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *((void *)a1 + 2) - *(void *)a1;
  if (v19 <= v21)
  {
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (v37)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v37 + 16))(v37, v20, v19);
        uint64_t v36 = *(void *)a1;
        unint64_t v35 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v35 = 0;
        uint64_t v36 = 0;
      }
    }
    goto LABEL_37;
  }
  BOOL v22 = (unsigned char *)(v20 + v21);
  *((void *)a1 + 2) = v22 + 1;
  if (!v20)
  {
    unint64_t v35 = v19;
    uint64_t v36 = 0;
LABEL_37:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v38 = *((void *)a1 + 3);
    if (v38 && v35) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
    }
    goto LABEL_18;
  }
  unsigned int v23 = *v22;
  if (v23 < 3)
  {
    if (!*v22)
    {
      uint64_t v69 = 0;
      int v70 = 0;
      char v71 = 1;
      goto LABEL_44;
    }
    if (v23 == 1)
    {
      char v18 = IPC::ArgumentCoder<WebCore::FormData,void>::decode(&v61, a1);
      if (BYTE8(v61))
      {
        uint64_t v69 = v61;
        int v26 = 1;
        int v70 = 1;
        goto LABEL_43;
      }
      uint64_t v39 = *(void *)a1;
      uint64_t v40 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      char v18 = (WTF::StringImpl *)*((void *)a1 + 3);
      if (v18 && v40) {
        char v18 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)v18 + 16))(v18, v39);
      }
      int v26 = 0;
    }
    else
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v61);
      int v26 = BYTE8(v61);
      if (BYTE8(v61))
      {
        uint64_t v69 = v61;
        int v70 = 2;
        int v26 = 1;
        goto LABEL_43;
      }
    }
    LOBYTE(v69) = 0;
LABEL_43:
    char v71 = v26;
    if (v26) {
      goto LABEL_44;
    }
    goto LABEL_19;
  }
LABEL_18:
  LOBYTE(v69) = 0;
  char v71 = 0;
LABEL_19:
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  char v18 = (WTF::StringImpl *)*((void *)a1 + 3);
  if (v18 && v25) {
    char v18 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)v18 + 16))(v18, v24);
  }
LABEL_44:
  unint64_t v41 = *((void *)a1 + 1);
  uint64_t v42 = *(void *)a1;
  unint64_t v43 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v41 < v43 || v41 - v43 <= 7)
  {
    unint64_t v55 = 0;
    int v51 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    char v18 = (WTF::StringImpl *)*((void *)a1 + 3);
    if (v18) {
      goto LABEL_101;
    }
    goto LABEL_85;
  }
  char v44 = (uint64_t *)(v42 + v43);
  *((void *)a1 + 2) = v44 + 1;
  if (!v42)
  {
    unint64_t v55 = v41;
    int v51 = 0;
    goto LABEL_85;
  }
  unint64_t v41 = 0;
  uint64_t v42 = *v44;
  if (v9)
  {
LABEL_100:
    while (1)
    {
      __break(1u);
LABEL_101:
      if (v41)
      {
        (*(void (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v42, v41);
        int v51 = *(WTF::StringImpl **)a1;
        unint64_t v55 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v55 = 0;
        int v51 = 0;
      }
LABEL_85:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v56 = *((void *)a1 + 3);
      if (!v56) {
        break;
      }
      if (!v55) {
        break;
      }
      char v18 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v56 + 16))(v56, v51);
      if (!*(void *)a1) {
        break;
      }
      uint64_t v42 = 0;
      unint64_t v41 = 1;
      if (!v9) {
        goto LABEL_48;
      }
    }
    *a2 = 0;
    a2[592] = 0;
  }
  else
  {
LABEL_48:
    if (v14) {
      goto LABEL_100;
    }
    if (Headers <= 0xFFu) {
      goto LABEL_100;
    }
    if (!v76[200]) {
      goto LABEL_100;
    }
    if (!v82) {
      goto LABEL_100;
    }
    v57[0] = v78[0];
    *(_DWORD *)((char *)v57 + 3) = *(_DWORD *)((char *)v78 + 3);
    unint64_t v45 = v79;
    uint64_t v79 = 0;
    uint64_t v58 = v45;
    long long v59 = v80;
    long long v60 = v81;
    if (!v75 || v17 <= 0xFFu || !v73 || !v71 || v41) {
      goto LABEL_100;
    }
    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v61, v10, v15, Headers, (uint64_t)v76, (uint64_t)v57, (uint64_t *)&v74, v17, (uint64_t)v72, (uint64_t)&v69, v42);
    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)a2, &v61);
    a2[592] = 1;
    if (v68 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9B43B8[v68])(&v77, &v67);
    }
    int v68 = -1;
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v66, v46);
    unint64_t v48 = v65;
    uint64_t v65 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v47);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
    unsigned int v49 = v64;
    long long v64 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v47);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
    CFTypeRef v50 = cf;
    CFTypeRef cf = 0;
    if (v50) {
      CFRelease(v50);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v62);
    unint64_t v52 = v58;
    uint64_t v58 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, v51);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  if (v71 && v70 != -1) {
    ((void (*)(long long *, uint64_t *))off_1EE9B43B8[v70])(&v61, &v69);
  }
  if (v73) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v72, v51);
  }
  if (v75)
  {
    uint64_t v53 = v74;
    uint64_t v74 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, v51);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v78, v51);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v76);
}

void sub_19883DACC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, WTF::StringImpl *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (LOBYTE(STACK[0x2B0]))
  {
    uint64_t v14 = LODWORD(STACK[0x2A8]);
    if (v14 != -1) {
      ((void (*)(char *, unint64_t *))off_1EE9B43B8[v14])(va, &STACK[0x2A0]);
    }
  }
  if (LOBYTE(STACK[0x3D0])) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&STACK[0x2B8], a2);
  }
  if (LOBYTE(STACK[0x3E0]))
  {
    uint64_t v15 = (WTF::StringImpl *)STACK[0x3D8];
    STACK[0x3D8] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, a2);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100](v12 - 160, a2);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&STACK[0x3E8]);
  _Unwind_Resume(a1);
}

void sub_19883DC44()
{
}

void sub_19883DC4C()
{
}

uint64_t IPC::Decoder::decode<WebCore::FetchHeadersGuard>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        uint64_t v2 = *v11;
        unint64_t v1 = v11[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 5) {
    return v5 | 0x100;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v2);
    }
    return 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ResourceResponseData>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, &v167);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v165);
  unint64_t v5 = IPC::Decoder::decode<long long>(a2);
  char v7 = v6;
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v163);
  int v111 = IPC::Decoder::decode<short>(a2);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v161);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v159);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)&v154, (uint64_t *)a2);
  IPC::Decoder::decode<std::optional<WebCore::NetworkLoadMetrics>>((uint64_t *)a2, (uint64_t)v146);
  unint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = *(WTF::StringImpl **)a2;
  unint64_t v10 = *((void *)a2 + 2) - *(void *)a2;
  unint64_t v104 = v5;
  BOOL v105 = a1;
  char v110 = v7;
  if (v8 <= v10) {
    goto LABEL_100;
  }
  unint64_t v11 = (unsigned __int8 *)v9 + v10;
  uint64_t v12 = (uint64_t)v9 + v10 + 1;
  *((void *)a2 + 2) = v12;
  if (!v9)
  {
    unint64_t v65 = v8;
    uint64_t v66 = 0;
    goto LABEL_101;
  }
  unsigned int v13 = *v11;
  if (v13 >= 0xA) {
    goto LABEL_102;
  }
  for (int i = 0; ; int i = 1)
  {
    char v103 = v13;
    unint64_t v14 = v12 - (void)v9;
    if (v8 <= v14)
    {
      unint64_t v69 = 0;
      int v70 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v71 = *((void *)a2 + 3);
      if (v71)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
          int v70 = *(WTF::StringImpl **)a2;
          unint64_t v69 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v69 = 0;
          int v70 = 0;
        }
      }
      goto LABEL_104;
    }
    uint64_t v15 = (unsigned __int8 *)v9 + v14;
    uint64_t v16 = (uint64_t)v9 + v14 + 1;
    *((void *)a2 + 2) = v16;
    if (!v9)
    {
      unint64_t v69 = v8;
      int v70 = 0;
LABEL_104:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v72 = *((void *)a2 + 3);
      if (v72 && v69) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v72 + 16))(v72, v70, v69);
      }
      goto LABEL_105;
    }
    unsigned int v17 = *v15;
    if (v17 < 6)
    {
      int v108 = 0;
      goto LABEL_9;
    }
LABEL_105:
    IPC::Decoder::markInvalid(a2);
    LOBYTE(v17) = 0;
    unint64_t v8 = *((void *)a2 + 1);
    uint64_t v16 = *((void *)a2 + 2);
    int v108 = 1;
    uint64_t v9 = *(WTF::StringImpl **)a2;
LABEL_9:
    unint64_t v18 = v16 - (void)v9;
    char v102 = v17;
    if (v8 <= v18)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v75 = *((void *)a2 + 3);
      if (v75)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v75 + 16))(v75);
          uint64_t v74 = *(WTF::StringImpl **)a2;
          unint64_t v73 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v73 = 0;
          uint64_t v74 = 0;
        }
      }
      goto LABEL_107;
    }
    unint64_t v19 = (unsigned __int8 *)v9 + v18;
    uint64_t v20 = (uint64_t)v9 + v18 + 1;
    *((void *)a2 + 2) = v20;
    if (!v9)
    {
      unint64_t v73 = v8;
      uint64_t v74 = 0;
LABEL_107:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v76 = *((void *)a2 + 3);
      if (v76 && v73) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v76 + 16))(v76, v74, v73);
      }
      goto LABEL_108;
    }
    unsigned int v21 = *v19;
    if (v21 < 4)
    {
      int v107 = 0;
      goto LABEL_13;
    }
LABEL_108:
    IPC::Decoder::markInvalid(a2);
    LOBYTE(v21) = 0;
    unint64_t v8 = *((void *)a2 + 1);
    uint64_t v20 = *((void *)a2 + 2);
    int v107 = 1;
    uint64_t v9 = *(WTF::StringImpl **)a2;
LABEL_13:
    unint64_t v22 = v20 - (void)v9;
    if (v8 <= v22)
    {
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v79 = *((void *)a2 + 3);
      if (v79)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
          unint64_t v78 = *(WTF::StringImpl **)a2;
          unint64_t v77 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v77 = 0;
          unint64_t v78 = 0;
        }
      }
      goto LABEL_110;
    }
    unsigned int v23 = (unsigned __int8 *)v9 + v22;
    uint64_t v24 = (uint64_t)v9 + v22 + 1;
    *((void *)a2 + 2) = v24;
    if (!v9)
    {
      unint64_t v77 = v8;
      unint64_t v78 = 0;
LABEL_110:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v80 = *((void *)a2 + 3);
      if (v80 && v77)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v80 + 16))(v80, v78, v77);
        unsigned int v25 = 0;
        uint64_t v9 = *(WTF::StringImpl **)a2;
        unint64_t v8 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        unsigned int v25 = 0;
      }
      goto LABEL_112;
    }
    unsigned int v25 = *v23;
    if (v25 < 2)
    {
      int v106 = 0;
      char v26 = 1;
      goto LABEL_17;
    }
LABEL_112:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v81 = *((void *)a2 + 3);
    if (!v81 || !v8)
    {
      char v101 = 0;
      unint64_t v82 = 0;
      uint64_t v9 = 0;
      int v106 = 1;
LABEL_114:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v83 = *((void *)a2 + 3);
      if (v83 && v82)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v83 + 16))(v83, v9, v82);
        uint64_t v9 = *(WTF::StringImpl **)a2;
        unint64_t v8 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      goto LABEL_116;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v81 + 16))(v81, v9);
    char v26 = 0;
    uint64_t v9 = *(WTF::StringImpl **)a2;
    unint64_t v8 = *((void *)a2 + 1);
    int v106 = 1;
    uint64_t v24 = *((void *)a2 + 2);
LABEL_17:
    if (!v25) {
      char v26 = 0;
    }
    char v101 = v26;
    unint64_t v27 = v24 - (void)v9;
    if (v8 <= v27)
    {
      unint64_t v82 = 0;
      uint64_t v98 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v98 && v8)
      {
        (*(void (**)(uint64_t))(*(void *)v98 + 16))(v98);
        uint64_t v9 = *(WTF::StringImpl **)a2;
        unint64_t v82 = *((void *)a2 + 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      goto LABEL_114;
    }
    uint64_t v28 = (unsigned __int8 *)v9 + v27;
    uint64_t v29 = (uint64_t)v9 + v27 + 1;
    *((void *)a2 + 2) = v29;
    if (!v9)
    {
      unint64_t v82 = v8;
      goto LABEL_114;
    }
    unsigned int v30 = *v28;
    if (v30 < 2)
    {
      int v31 = 0;
      BOOL v100 = v30 != 0;
      goto LABEL_23;
    }
LABEL_116:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v84 = *((void *)a2 + 3);
    if (v84 && v8) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v84 + 16))(v84, v9);
    }
    IPC::Decoder::markInvalid(a2);
    BOOL v100 = 0;
    unint64_t v8 = *((void *)a2 + 1);
    uint64_t v29 = *((void *)a2 + 2);
    int v31 = 1;
    uint64_t v9 = *(WTF::StringImpl **)a2;
LABEL_23:
    unint64_t v32 = v29 - (void)v9;
    if (v8 <= v32)
    {
      unint64_t v85 = 0;
      uint64_t v86 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v87 = *((void *)a2 + 3);
      if (v87)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v87 + 16))(v87);
          uint64_t v86 = *(WTF::StringImpl **)a2;
          unint64_t v85 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v85 = 0;
          uint64_t v86 = 0;
        }
      }
      goto LABEL_119;
    }
    uint64_t v33 = (unsigned __int8 *)v9 + v32;
    uint64_t v34 = (uint64_t)v9 + v32 + 1;
    *((void *)a2 + 2) = v34;
    if (!v9)
    {
      unint64_t v85 = v8;
      uint64_t v86 = 0;
LABEL_119:
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v88 = *((void *)a2 + 3);
      if (v88)
      {
        if (v85)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v88 + 16))(v88, v86, v85);
          uint64_t v9 = *(WTF::StringImpl **)a2;
          unint64_t v8 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
        }
      }
      goto LABEL_120;
    }
    unsigned int v35 = *v33;
    if (v35 < 2)
    {
      int v36 = 0;
      BOOL v37 = v35 != 0;
      goto LABEL_27;
    }
LABEL_120:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v89 = *((void *)a2 + 3);
    if (v89 && v8) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v89 + 16))(v89, v9);
    }
    IPC::Decoder::markInvalid(a2);
    BOOL v37 = 0;
    unint64_t v8 = *((void *)a2 + 1);
    uint64_t v34 = *((void *)a2 + 2);
    int v36 = 1;
    uint64_t v9 = *(WTF::StringImpl **)a2;
LABEL_27:
    unint64_t v38 = v34 - (void)v9;
    if (v8 <= v38)
    {
      unint64_t v90 = 0;
      unint64_t v91 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v92 = *((void *)a2 + 3);
      if (v92)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v92 + 16))(v92);
          unint64_t v91 = *(WTF::StringImpl **)a2;
          unint64_t v90 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v90 = 0;
          unint64_t v91 = 0;
        }
      }
      goto LABEL_123;
    }
    uint64_t v39 = (unsigned __int8 *)v9 + v38;
    uint64_t v40 = (uint64_t)v9 + v38 + 1;
    *((void *)a2 + 2) = v40;
    if (!v9)
    {
      unint64_t v90 = v8;
      unint64_t v91 = 0;
LABEL_123:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v93 = *((void *)a2 + 3);
      if (v93 && v90)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v93 + 16))(v93, v91, v90);
        unsigned int v41 = 0;
        uint64_t v9 = *(WTF::StringImpl **)a2;
        unint64_t v8 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        unsigned int v41 = 0;
      }
      goto LABEL_125;
    }
    unsigned int v41 = *v39;
    if (v41 < 2)
    {
      int v42 = 0;
      char v43 = 1;
      goto LABEL_31;
    }
LABEL_125:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v94 = *((void *)a2 + 3);
    if (!v94 || !v8)
    {
      char v44 = 0;
      unint64_t v95 = 0;
      uint64_t v9 = 0;
      int v42 = 1;
LABEL_127:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v96 = *((void *)a2 + 3);
      if (v96 && v95)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v96 + 16))(v96, v9, v95);
        uint64_t v9 = *(WTF::StringImpl **)a2;
        unint64_t v8 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
LABEL_129:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v97 = *((void *)a2 + 3);
      if (v97 && v8) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v97 + 16))(v97, v9);
      }
      goto LABEL_130;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v94 + 16))(v94, v9);
    char v43 = 0;
    uint64_t v9 = *(WTF::StringImpl **)a2;
    unint64_t v8 = *((void *)a2 + 1);
    int v42 = 1;
    uint64_t v40 = *((void *)a2 + 2);
LABEL_31:
    if (v41) {
      char v44 = v43;
    }
    else {
      char v44 = 0;
    }
    unint64_t v45 = v40 - (void)v9;
    if (v8 <= v45)
    {
      unint64_t v95 = 0;
      uint64_t v99 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v99 && v8)
      {
        (*(void (**)(uint64_t))(*(void *)v99 + 16))(v99);
        uint64_t v9 = *(WTF::StringImpl **)a2;
        unint64_t v95 = *((void *)a2 + 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      goto LABEL_127;
    }
    uint64_t v46 = (unsigned __int8 *)v9 + v45;
    *((void *)a2 + 2) = v46 + 1;
    if (!v9)
    {
      unint64_t v95 = v8;
      goto LABEL_127;
    }
    unsigned int v47 = *v46;
    if (v47 >= 2) {
      goto LABEL_129;
    }
    if (!v47)
    {
      int v48 = 0;
      unsigned int v49 = 0;
      int v2 = 1;
      goto LABEL_39;
    }
    IPC::Decoder::decode<WebCore::CertificateInfo>((uint64_t *)a2, (uint64_t)&v114);
    if ((_BYTE)v115)
    {
      int v48 = 0;
      int v2 = 0;
      unsigned int v49 = v114;
      goto LABEL_39;
    }
LABEL_130:
    IPC::Decoder::markInvalid(a2);
    unsigned int v49 = 0;
    int v48 = 1;
LABEL_39:
    if (!*(void *)a2)
    {
      long long v60 = v105;
      *BOOL v105 = 0;
      v105[280] = 0;
      goto LABEL_62;
    }
    if (v170
      && v166
      && v110
      && v164
      && (v111 & 0xFF0000) != 0
      && v162
      && v160
      && v158
      && v153
      && !i
      && !v108
      && !v107
      && !v106
      && !v31
      && !v36
      && !v42
      && !v48)
    {
      break;
    }
    __break(1u);
LABEL_100:
    unint64_t v65 = 0;
    uint64_t v66 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v67 = *((void *)a2 + 3);
    if (v67)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
        uint64_t v66 = *(WTF::StringImpl **)a2;
        unint64_t v65 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v65 = 0;
        uint64_t v66 = 0;
      }
    }
LABEL_101:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v68 = *((void *)a2 + 3);
    if (v68 && v65) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v68 + 16))(v68, v66, v65);
    }
LABEL_102:
    IPC::Decoder::markInvalid(a2);
    LOBYTE(v13) = 0;
    unint64_t v8 = *((void *)a2 + 1);
    uint64_t v12 = *((void *)a2 + 2);
    uint64_t v9 = *(WTF::StringImpl **)a2;
  }
  LOBYTE(cf) = 0;
  char v113 = 0;
  if ((v2 & 1) == 0)
  {
    CFTypeRef cf = v49;
    char v113 = 1;
    unsigned int v49 = 0;
  }
  CFTypeRef v50 = v167;
  uint64_t v167 = 0;
  long long v114 = v50;
  long long v115 = v168;
  long long v116 = v169;
  LODWORD(v168) = v168 & 0xFFFFFFFE;
  int v51 = v165;
  char v165 = 0;
  uint64_t v117 = v51;
  unint64_t v118 = v104;
  unint64_t v52 = v163;
  char v163 = 0;
  unsigned __int8 v119 = v52;
  __int16 v120 = v111;
  uint64_t v53 = v161;
  char v161 = 0;
  uint64_t v54 = v159;
  char v159 = 0;
  long long v121 = v53;
  long long v122 = v54;
  uint64_t v55 = v154;
  uint64_t v154 = 0;
  uint64_t v123 = v55;
  uint64_t v56 = v155;
  uint64_t v155 = 0;
  uint64_t v124 = v56;
  uint64_t v57 = v156;
  uint64_t v156 = 0;
  uint64_t v125 = v57;
  uint64_t v58 = v157;
  uint64_t v157 = 0;
  uint64_t v126 = v58;
  LOBYTE(v127) = 0;
  char v137 = 0;
  if (v152)
  {
    uint64_t v132 = v147;
    long long v129 = v146[2];
    long long v130 = v146[3];
    long long v131 = v146[4];
    long long v127 = v146[0];
    long long v128 = v146[1];
    uint64_t v133 = v148;
    long long v134 = v149;
    uint64_t v59 = v151;
    uint64_t v148 = 0;
    uint64_t v151 = 0;
    uint64_t v135 = v150;
    uint64_t v136 = v59;
    char v137 = 1;
  }
  char v138 = v103;
  char v139 = v102;
  char v140 = v21;
  char v141 = v101;
  BOOL v142 = v100;
  BOOL v143 = v37;
  char v144 = v44;
  std::__optional_copy_base<WebCore::CertificateInfo,false>::__optional_copy_base[abi:sn180100](v145, (uint64_t)&cf);
  long long v60 = v105;
  WebCore::ResourceResponseData::ResourceResponseData((uint64_t)v105, (uint64_t)&v114);
  v105[280] = 1;
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v114, v61);
  if (v113)
  {
    CFTypeRef v64 = cf;
    CFTypeRef cf = 0;
    if (v64) {
      CFRelease(v64);
    }
  }
LABEL_62:
  if (((v48 | v2) & 1) == 0 && v49) {
    CFRelease(v49);
  }
  if (v153) {
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v146, v9);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&v154);
  if (v160)
  {
    uint64_t result = v159;
    char v159 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v63);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v162)
  {
    uint64_t result = v161;
    char v161 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v63);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v164)
  {
    uint64_t result = v163;
    char v163 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v63);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v166)
  {
    uint64_t result = v165;
    char v165 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v63);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v170)
  {
    uint64_t result = v167;
    uint64_t v167 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v63);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v60[280]) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_19883EABC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::ResourceResponseData *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71) {
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a55, a2);
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100]((unsigned char *)(v71 - 240));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v71 - 200);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v71 - 184);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v71 - 168);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v71 - 152);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v71 - 136, v73);
  _Unwind_Resume(a1);
}

void sub_19883EB88(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,WTF::StringImpl *a30)
{
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](v32, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(v31);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v30);
  if (a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, v33);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (a29)
  {
    if (*(_DWORD *)a29 == 2) {
      WTF::StringImpl::destroy(a29, v33);
    }
    else {
      *(_DWORD *)a29 -= 2;
    }
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, v33);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, v33);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v33);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  JUMPOUT(0x19883EB08);
}

void sub_19883EC5C()
{
}

void sub_19883EC64()
{
}

void sub_19883EC6C()
{
}

void sub_19883EC74()
{
}

void sub_19883EC80()
{
}

void sub_19883EC8C()
{
}

void *IPC::ArgumentCoder<WebCore::CharacterRange,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    char v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      unint64_t v8 = *v6;
      goto LABEL_8;
    }
    unint64_t v8 = v2;
    uint64_t v15 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v15 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = (void *)result[3];
    if (v12) {
      goto LABEL_30;
    }
  }
  while (1)
  {
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (!v16)
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      unint64_t v8 = 0;
LABEL_21:
      int v7 = 1;
      goto LABEL_8;
    }
    unint64_t v22 = result;
    uint64_t v25 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v15, v8);
      unint64_t v8 = 0;
      uint64_t result = v22;
      a2 = v25;
      uint64_t v3 = *v22;
      unint64_t v2 = v22[1];
      goto LABEL_21;
    }
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    int v7 = 1;
LABEL_8:
    unint64_t v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7) {
      break;
    }
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v19 = result[3];
    if (v19)
    {
      uint64_t v24 = result;
      uint64_t v28 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t result = v24;
        a2 = v28;
        uint64_t v18 = *v24;
        unint64_t v17 = v24[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
LABEL_23:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v20 = result[3];
    if (!v20) {
      goto LABEL_24;
    }
    if (!v17) {
      goto LABEL_24;
    }
    unsigned int v21 = result;
    uint64_t v26 = a2;
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)v20 + 16))(result[3], v18, v17);
    a2 = v26;
    if (!*v21) {
      goto LABEL_24;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    unsigned int v23 = result;
    uint64_t v27 = a2;
    if (v2)
    {
      (*(void (**)(void *))(*v12 + 16))(v12);
      uint64_t result = v23;
      a2 = v27;
      uint64_t v15 = *v23;
      unint64_t v8 = v23[1];
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v15 = 0;
    }
  }
  unint64_t v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11 + 1;
  result[2] = v11 + 1;
  if (!v3)
  {
    unint64_t v17 = v2;
    uint64_t v18 = 0;
    goto LABEL_23;
  }
  if (v7) {
    goto LABEL_29;
  }
  uint64_t v13 = *v11;
  if (!__CFADD__(v8, v13))
  {
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v13;
    char v14 = 1;
    goto LABEL_17;
  }
LABEL_24:
  char v14 = 0;
  *(unsigned char *)a2 = 0;
LABEL_17:
  *(unsigned char *)(a2 + 16) = v14;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(IPC::Encoder *a1, double *a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[4]);
  double v4 = a2[5];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 8;
    if (v13 > 0xFFFFFFFFFFFFFFF7 || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 8;
    if (v18 > 0xFFFFFFFFFFFFFFF7 || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    unint64_t v28 = v26 - v2;
    unint64_t v29 = v27 + v3 + 8;
    if (v28 > 0xFFFFFFFFFFFFFFF7 || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v2 + v28) = a2[4];
      result[2] = v29;
      uint64_t v2 = *result;
      unint64_t v3 = v29;
    }
  }
  int v31 = (void *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v31 >= v2 + v3)
  {
    uint64_t v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v32 + 8) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *int v31 = a2[5];
      result[2] = (uint64_t)(v32 + 8);
    }
  }
  return result;
}

void *IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    BOOL v6 = (uint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      uint64_t v8 = *v6;
      goto LABEL_8;
    }
    unint64_t v31 = v2;
    uint64_t v32 = 0;
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v33 = result[3];
    if (v33)
    {
      long long v121 = result;
      uint64_t v133 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
        uint64_t result = v121;
        a2 = v133;
        uint64_t v32 = *v121;
        unint64_t v31 = v121[1];
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
LABEL_41:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v34 = result[3];
    if (!v34)
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v8 = 0;
LABEL_43:
      int v7 = 1;
      goto LABEL_8;
    }
    long long v116 = result;
    uint64_t v127 = a2;
    if (v31)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
      uint64_t v8 = 0;
      uint64_t result = v116;
      a2 = v127;
      uint64_t v3 = *v116;
      unint64_t v2 = v116[1];
      goto LABEL_43;
    }
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v8 = 0;
    int v7 = 1;
LABEL_8:
    unint64_t v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
    {
      unint64_t v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v11 + 1;
      if (v3)
      {
        int v12 = 0;
        uint64_t v13 = *v11;
        goto LABEL_15;
      }
      unint64_t v35 = v2;
      uint64_t v36 = 0;
    }
    else
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v37 = result[3];
      if (v37)
      {
        int v111 = v7;
        uint64_t v101 = v8;
        long long v122 = result;
        uint64_t v134 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t result = v122;
          a2 = v134;
          uint64_t v36 = *v122;
          unint64_t v35 = v122[1];
        }
        else
        {
          unint64_t v35 = 0;
          uint64_t v36 = 0;
        }
        uint64_t v8 = v101;
        int v7 = v111;
      }
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v38 = result[3];
    if (v38)
    {
      int v106 = v7;
      uint64_t v96 = v8;
      uint64_t v117 = result;
      uint64_t v128 = a2;
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        uint64_t v13 = 0;
        uint64_t result = v117;
        a2 = v128;
        uint64_t v3 = *v117;
        unint64_t v2 = v117[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v13 = 0;
      }
      int v12 = 1;
      uint64_t v8 = v96;
      int v7 = v106;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v13 = 0;
      int v12 = 1;
    }
LABEL_15:
    unint64_t v14 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v14 || v2 - v14 <= 7)
    {
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v41 = result[3];
      if (v41)
      {
        int v92 = v12;
        uint64_t v84 = v13;
        int v112 = v7;
        uint64_t v102 = v8;
        uint64_t v123 = result;
        uint64_t v135 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
          uint64_t result = v123;
          a2 = v135;
          uint64_t v40 = *v123;
          unint64_t v39 = v123[1];
        }
        else
        {
          unint64_t v39 = 0;
          uint64_t v40 = 0;
        }
        uint64_t v8 = v102;
        int v7 = v112;
        uint64_t v13 = v84;
        int v12 = v92;
      }
    }
    else
    {
      uint64_t v15 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v15 + 1;
      if (v3)
      {
        int v16 = 0;
        uint64_t v17 = *v15;
        goto LABEL_19;
      }
      unint64_t v39 = v2;
      uint64_t v40 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v42 = result[3];
    if (v42)
    {
      int v88 = v12;
      uint64_t v80 = v13;
      int v107 = v7;
      uint64_t v97 = v8;
      unint64_t v118 = result;
      uint64_t v129 = a2;
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v42 + 16))(v42, v40, v39);
        uint64_t v17 = 0;
        uint64_t result = v118;
        a2 = v129;
        uint64_t v3 = *v118;
        unint64_t v2 = v118[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v17 = 0;
      }
      int v16 = 1;
      uint64_t v8 = v97;
      int v7 = v107;
      uint64_t v13 = v80;
      int v12 = v88;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v17 = 0;
      int v16 = 1;
    }
LABEL_19:
    unint64_t v18 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v18 || v2 - v18 <= 7)
    {
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v45 = result[3];
      if (v45)
      {
        int v77 = v16;
        uint64_t v71 = v17;
        int v93 = v12;
        uint64_t v85 = v13;
        int v113 = v7;
        uint64_t v103 = v8;
        uint64_t v124 = result;
        uint64_t v136 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
          uint64_t result = v124;
          a2 = v136;
          uint64_t v44 = *v124;
          unint64_t v43 = v124[1];
        }
        else
        {
          unint64_t v43 = 0;
          uint64_t v44 = 0;
        }
        uint64_t v8 = v103;
        int v7 = v113;
        uint64_t v13 = v85;
        int v12 = v93;
        uint64_t v17 = v71;
        int v16 = v77;
      }
    }
    else
    {
      unint64_t v19 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v19 + 1;
      if (v3)
      {
        int v20 = 0;
        uint64_t v21 = *v19;
        goto LABEL_23;
      }
      unint64_t v43 = v2;
      uint64_t v44 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v46 = result[3];
    if (v46)
    {
      int v74 = v16;
      uint64_t v68 = v17;
      int v89 = v12;
      uint64_t v81 = v13;
      int v108 = v7;
      uint64_t v98 = v8;
      unsigned __int8 v119 = result;
      uint64_t v130 = a2;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v46 + 16))(v46, v44, v43);
        uint64_t v21 = 0;
        uint64_t result = v119;
        a2 = v130;
        uint64_t v3 = *v119;
        unint64_t v2 = v119[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v21 = 0;
      }
      int v20 = 1;
      uint64_t v8 = v98;
      int v7 = v108;
      uint64_t v13 = v81;
      int v12 = v89;
      uint64_t v17 = v68;
      int v16 = v74;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v21 = 0;
      int v20 = 1;
    }
LABEL_23:
    unint64_t v22 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v22 || v2 - v22 <= 7)
    {
      unint64_t v47 = 0;
      uint64_t v48 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v49 = result[3];
      if (v49)
      {
        int v66 = v20;
        uint64_t v62 = v21;
        int v78 = v16;
        uint64_t v72 = v17;
        int v94 = v12;
        uint64_t v86 = v13;
        int v114 = v7;
        uint64_t v104 = v8;
        uint64_t v125 = result;
        uint64_t v137 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
          uint64_t result = v125;
          a2 = v137;
          uint64_t v48 = *v125;
          unint64_t v47 = v125[1];
        }
        else
        {
          unint64_t v47 = 0;
          uint64_t v48 = 0;
        }
        uint64_t v8 = v104;
        int v7 = v114;
        uint64_t v13 = v86;
        int v12 = v94;
        uint64_t v17 = v72;
        int v16 = v78;
        uint64_t v21 = v62;
        int v20 = v66;
      }
    }
    else
    {
      unint64_t v23 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v23 + 1;
      if (v3)
      {
        int v24 = 0;
        uint64_t v25 = *v23;
        goto LABEL_27;
      }
      unint64_t v47 = v2;
      uint64_t v48 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v25 = 0;
    uint64_t v50 = result[3];
    if (v50)
    {
      int v64 = v20;
      uint64_t v60 = v21;
      int v75 = v16;
      uint64_t v69 = v17;
      int v90 = v12;
      uint64_t v82 = v13;
      int v109 = v7;
      uint64_t v99 = v8;
      __int16 v120 = result;
      uint64_t v131 = a2;
      if (v47)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v50 + 16))(v50, v48, v47, 0.0);
        uint64_t result = v120;
        a2 = v131;
        uint64_t v3 = *v120;
        unint64_t v2 = v120[1];
        int v24 = 1;
        uint64_t v8 = v99;
        int v7 = v109;
        uint64_t v13 = v82;
        int v12 = v90;
        uint64_t v17 = v69;
        int v16 = v75;
        uint64_t v21 = v60;
        int v20 = v64;
        uint64_t v25 = 0;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        int v24 = 1;
      }
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      int v24 = 1;
    }
LABEL_27:
    unint64_t v26 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v26 || v2 - v26 <= 7) {
      break;
    }
    unint64_t v27 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v27 + 1;
    if (!v3)
    {
      unint64_t v51 = v2;
      uint64_t v52 = 0;
      goto LABEL_57;
    }
    int v28 = 0;
    uint64_t v29 = *v27;
LABEL_31:
    if (!v7 && !v12 && !v16 && !v20 && !v24 && !v28)
    {
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v13;
      *(void *)(a2 + 16) = v17;
      *(void *)(a2 + 24) = v21;
      char v30 = 1;
      *(void *)(a2 + 32) = v25;
      *(void *)(a2 + 40) = v29;
      goto LABEL_38;
    }
    __break(1u);
  }
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v53 = result[3];
  if (v53)
  {
    int v59 = v24;
    uint64_t v57 = v25;
    int v67 = v20;
    uint64_t v63 = v21;
    int v79 = v16;
    uint64_t v73 = v17;
    int v95 = v12;
    uint64_t v87 = v13;
    int v115 = v7;
    uint64_t v105 = v8;
    uint64_t v126 = result;
    uint64_t v138 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
      uint64_t result = v126;
      a2 = v138;
      uint64_t v52 = *v126;
      unint64_t v51 = v126[1];
    }
    else
    {
      unint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    uint64_t v8 = v105;
    int v7 = v115;
    uint64_t v13 = v87;
    int v12 = v95;
    uint64_t v17 = v73;
    int v16 = v79;
    uint64_t v21 = v63;
    int v20 = v67;
    uint64_t v25 = v57;
    int v24 = v59;
  }
LABEL_57:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v54 = result[3];
  if (v54)
  {
    if (v51)
    {
      uint64_t v61 = v21;
      int v65 = v20;
      uint64_t v55 = result;
      uint64_t v132 = a2;
      uint64_t v100 = v8;
      int v110 = v7;
      uint64_t v83 = v13;
      int v91 = v12;
      uint64_t v70 = v17;
      int v76 = v16;
      uint64_t v56 = v25;
      int v58 = v24;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v54 + 16))(v54, v52, v51);
      int v24 = v58;
      uint64_t v25 = v56;
      int v20 = v65;
      uint64_t v21 = v61;
      int v16 = v76;
      uint64_t v17 = v70;
      int v12 = v91;
      uint64_t v13 = v83;
      int v7 = v110;
      uint64_t v8 = v100;
      a2 = v132;
      if (*v55)
      {
        int v28 = 1;
        uint64_t v29 = 0;
        goto LABEL_31;
      }
    }
  }
  char v30 = 0;
  *(unsigned char *)a2 = 0;
LABEL_38:
  *(unsigned char *)(a2 + 48) = v30;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  int v16 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 >= v2 + v3)
  {
    unint64_t v17 = (unint64_t)v16 - v2 + 4;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFFBLL || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *int v16 = a2[2];
      result[2] = v17;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::IDBKeyData>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IDBKeyData,void>::decode(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19883FBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 32))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 24);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    }
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::IDBValue>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IDBValue,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19883FC50(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::encode(IPC::Encoder *a1, long long *a2)
{
  long long v13 = *a2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v13);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)&v13 + 1);
  long long v13 = a2[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v13);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)&v13 + 1);
  *(void *)&long long v13 = *((void *)a2 + 4);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v13);
  uint64_t v4 = *((void *)a2 + 5);
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7) {
    goto LABEL_7;
  }
  *uint64_t v5 = v4;
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(a1, (uint64_t)(a2 + 3));
  char v7 = *((unsigned char *)a2 + 120);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19883FDA4);
  }
  *unint64_t v8 = v7;
  LOBYTE(v13) = *((unsigned char *)a2 + 121);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v13);
  char v10 = *((unsigned char *)a2 + 122);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19883FD84);
  }
  *uint64_t result = v10;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)v46);
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)v45);
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v5 = v4;
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 >= v8 && v6 - v8 > 7)
  {
    a1[2] = v7 + v8 + 8;
    if (!v7)
    {
      uint64_t v20 = v6;
      uint64_t v21 = 0;
      goto LABEL_31;
    }
    int v10 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v7, v6);
        uint64_t v21 = *a1;
        uint64_t v20 = a1[1];
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (v23 && v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
    }
    int v10 = 1;
LABEL_8:
    IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a1, (uint64_t)v44);
    LOWORD(v34[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v34);
    int v11 = BYTE1(v34[0]);
    unint64_t v12 = a1[1];
    if (!BYTE1(v34[0]))
    {
      uint64_t v24 = *a1;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v25 = a1[3];
      if (!v25 || !v12)
      {
        unint64_t v12 = 0;
        uint64_t v13 = *a1;
LABEL_35:
        *a1 = 0;
        a1[1] = 0;
        uint64_t v26 = a1[3];
        if (v26)
        {
          if (v12)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v13);
            uint64_t v27 = *a1;
            unint64_t v12 = a1[1];
          }
          else
          {
            uint64_t v27 = 0;
          }
        }
        else
        {
          uint64_t v27 = 0;
          unint64_t v12 = 0;
        }
LABEL_37:
        *a1 = 0;
        a1[1] = 0;
        uint64_t v28 = a1[3];
        if (v28)
        {
          if (v12)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v27);
            uint64_t v13 = *a1;
            unint64_t v12 = a1[1];
          }
          else
          {
            uint64_t v13 = 0;
          }
        }
        else
        {
          uint64_t v13 = 0;
          unint64_t v12 = 0;
        }
        goto LABEL_39;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v24);
      unint64_t v12 = a1[1];
    }
    uint64_t v13 = *a1;
    unint64_t v14 = a1[2] - *a1;
    if (v12 <= v14) {
      goto LABEL_35;
    }
    uint64_t v15 = (unsigned __int8 *)(v13 + v14);
    a1[2] = (uint64_t)(v15 + 1);
    if (!v13)
    {
      uint64_t v27 = 0;
      goto LABEL_37;
    }
    unsigned int v16 = *v15;
    if (v16 < 4)
    {
      unsigned int v17 = v16 | 0x100;
      goto LABEL_13;
    }
LABEL_39:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v13);
    }
    unsigned int v17 = 0;
LABEL_13:
    LOWORD(v34[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v34);
    uint64_t v7 = BYTE1(v34[0]);
    if (BYTE1(v34[0]))
    {
      unint64_t v6 = LOBYTE(v34[0]);
    }
    else
    {
      uint64_t v30 = *a1;
      uint64_t v31 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v32 = a1[3];
      if (v32)
      {
        unsigned int v33 = v7;
        if (v31) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
        }
        unint64_t v6 = 0;
        uint64_t v7 = v33;
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 128) = 0;
      return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v44);
    }
    if (v46[16] && v45[16] && v5 && !v10 && v44[72] && v11 && v17 > 0xFF && v7) {
      break;
    }
    __break(1u);
  }
  WebCore::IDBCursorInfo::IDBCursorInfo();
  long long v18 = v34[1];
  *(_OWORD *)a2 = v34[0];
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v34[2];
  *(unsigned char *)(a2 + 48) = v35;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 56, (uint64_t)v36);
  *(unsigned char *)(a2 + 80) = v38;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 88, (uint64_t)v39);
  *(_WORD *)(a2 + 112) = v41;
  *(_WORD *)(a2 + 120) = v42;
  *(unsigned char *)(a2 + 122) = v43;
  *(unsigned char *)(a2 + 128) = 1;
  if (v40 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v40])(&v47, v39);
  }
  int v40 = -1;
  if (v37 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(&v47, v36);
  }
  return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v44);
}

void sub_198840260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t IPC::Decoder::decode<WebCore::IDBResourceIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IDBResourceIdentifier,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::IDBKeyRangeData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988403FC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBError,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = IPC::Decoder::decode<std::optional<WebCore::ExceptionCode>>(a1);
  uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v9);
  if (!*a1) {
    goto LABEL_12;
  }
  if ((v4 & 0xFF0000) == 0 || !v10)
  {
    __break(1u);
LABEL_12:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    goto LABEL_5;
  }
  uint64_t result = (WTF::StringImpl *)WebCore::IDBError::IDBError();
  *(_WORD *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = 1;
LABEL_5:
  if (v10)
  {
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988404D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::ExceptionCode>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ExceptionCode>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 72));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 76);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 88));

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 96));
}

uint64_t IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (unint64_t)a1;
  IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a1, (uint64_t)v45);
  uint64_t v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)v2);
  uint64_t v5 = IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)v2);
  uint64_t v7 = v6;
  uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v2);
  uint64_t v10 = v9;
  unint64_t v11 = *(void *)(v2 + 8);
  uint64_t v12 = *(void *)v2;
  unint64_t v13 = ((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v2;
  if (v11 >= v13 && v11 - v13 > 7)
  {
    uint64_t v15 = (uint64_t *)(v12 + v13);
    *(void *)(v2 + 16) = v15 + 1;
    if (!v12)
    {
      uint64_t v22 = v11;
      uint64_t v23 = 0;
      goto LABEL_20;
    }
    int v16 = 0;
    uint64_t v17 = *v15;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v24 = *(void *)(v2 + 24);
    if (v24)
    {
      uint64_t v31 = v4;
      uint64_t v32 = v5;
      unsigned int v33 = v7;
      uint64_t v34 = v10;
      uint64_t v35 = v8;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v12, v11);
        uint64_t v23 = *(void *)v2;
        uint64_t v22 = *(void *)(v2 + 8);
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v8 = v35;
      uint64_t v10 = v34;
      uint64_t v7 = v33;
      uint64_t v5 = v32;
      uint64_t v4 = v31;
    }
LABEL_20:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v25 = *(void *)(v2 + 24);
    if (!v25
      || !v22
      || (uint64_t v26 = v4,
          uint64_t v27 = v5,
          uint64_t v28 = v7,
          uint64_t v29 = v10,
          uint64_t v30 = v8,
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23),
          !*(void *)v2))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 104) = 0;
      return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45);
    }
    uint64_t v8 = v30;
    uint64_t v10 = v29;
    uint64_t v7 = v28;
    uint64_t v5 = v27;
    uint64_t v4 = v26;
    uint64_t v17 = 0;
    int v16 = 1;
LABEL_8:
    uint64_t v12 = v48;
    if (v48)
    {
      unint64_t v2 = v5;
      uint64_t v5 = (uint64_t)v7;
      char v18 = v10;
      uint64_t v19 = v8;
      char v36 = v45[0];
      uint64_t v7 = v45;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v37, (uint64_t)v46);
      char v39 = v46[24];
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v40, (uint64_t)v47);
      __int16 v42 = v47[12];
      uint64_t v12 = (unsigned __int16)v4;
      if ((unsigned __int16)v4 > 0xFFu)
      {
        LOBYTE(v43) = v4;
        if ((_BYTE)v5)
        {
          DWORD1(v43) = v2;
          uint64_t v12 = HIDWORD(v2);
          BYTE8(v43) = BYTE4(v2);
          if (v18)
          {
            *(void *)&long long v44 = v19;
            if (!v16) {
              break;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *((void *)&v44 + 1) = v17;
  *(unsigned char *)a2 = v36;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v37);
  *(unsigned char *)(a2 + 32) = v39;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v40);
  *(_WORD *)(a2 + 64) = v42;
  long long v20 = v44;
  *(_OWORD *)(a2 + 72) = v43;
  *(_OWORD *)(a2 + 88) = v20;
  *(unsigned char *)(a2 + 104) = 1;
  if (v41 != -1) {
    ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v41])(v49, v40);
  }
  int v41 = -1;
  if (v38 != -1) {
    ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v38])(v49, v37);
  }
  return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45);
}

void sub_1988408E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_14:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_15:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v6) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_16;
  }
  if (!v9)
  {
    v17[0] = 0;
    char v19 = 0;
    uint64_t result = (uint64_t)std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v17);
    goto LABEL_8;
  }
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, v17);
  if (!v19)
  {
LABEL_16:
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_11;
  }
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v17);
  a1[24] = 1;
LABEL_8:
  a1[32] = 1;
  if (v19 && v18 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9B44A8[v18])(&v20, v17);
  }
LABEL_11:
  if (!a1[32])
  {
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v16) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
      }
    }
  }
  return result;
}

void sub_198840BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (*(unsigned char *)(v14 + 32) && *(unsigned char *)(v14 + 24))
  {
    uint64_t v16 = *(unsigned int *)(v14 + 16);
    if (v16 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B44A8[v16])(&a10, v14);
    }
    *(_DWORD *)(v14 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_36:
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    }
    return result;
  }
  unint64_t v6 = v4;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (v4 >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::IDBKeyData>(&v21, a2);
      if (!v24) {
        goto LABEL_35;
      }
      if (HIDWORD(v26) == v26)
      {
        uint64_t result = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBKeyData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        uint64_t v12 = (char *)v25 + 32 * HIDWORD(v26);
        *uint64_t v12 = v21;
        uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v12 + 8), (uint64_t)v22);
        ++HIDWORD(v26);
      }
      if (v24 && v23 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v27, v22);
      }
      --v6;
    }
    while (v6);
    uint64_t v13 = HIDWORD(v26);
    uint64_t v14 = v25;
    if (v26 > HIDWORD(v26))
    {
      uint64_t v15 = v25;
      if (HIDWORD(v26))
      {
        if (HIDWORD(v26) >> 27)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v16 = (WTF *)WTF::fastMalloc((WTF *)(32 * HIDWORD(v26)));
        LODWORD(v26) = v13;
        uint64_t v25 = v16;
        uint64_t v15 = v14;
        if (v16 != v14)
        {
          WTF::VectorMover<false,WebCore::IDBKeyData>::move((uint64_t)v14, (uint64_t)v14 + 32 * v13, (uint64_t)v16);
          uint64_t v15 = v25;
        }
      }
      if (v14)
      {
        if (v15 == v14)
        {
          uint64_t v25 = 0;
          LODWORD(v26) = 0;
        }
        WTF::fastFree(v14, v5);
        uint64_t v14 = v25;
      }
      else
      {
        uint64_t v14 = v15;
      }
    }
    *(void *)a1 = v14;
    uint64_t v20 = v26;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)(a1 + 8) = v20;
    goto LABEL_17;
  }
  if (v4)
  {
    LODWORD(v26) = v4;
    uint64_t v25 = (WTF *)WTF::fastMalloc((WTF *)(32 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::IDBKeyData>(&v21, a2);
      if (!v24) {
        break;
      }
      if (HIDWORD(v26) == v26)
      {
        WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBKeyData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        uint64_t v8 = (char *)v25 + 32 * HIDWORD(v26);
        *uint64_t v8 = v21;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v8 + 8), (uint64_t)v22);
        ++HIDWORD(v26);
      }
      if (v24)
      {
        if (v23 != -1) {
          ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v27, v22);
        }
      }
      if (!--v6)
      {
        unsigned int v9 = v25;
        uint64_t v10 = v26;
        goto LABEL_16;
      }
    }
LABEL_35:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v7);
    goto LABEL_36;
  }
  unsigned int v9 = 0;
  uint64_t v10 = 0;
LABEL_16:
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v10;
LABEL_17:
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
}

void sub_198840EE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, char a8, ...)
{
  va_start(va, a8);
  if (a8)
  {
    if (a6 != -1) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8 * a6))(v10 - 49, v8);
    }
  }
  WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)(a2 + 8);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>((uint64_t *)a1, v4, v6);
  unsigned __int8 v7 = *(_DWORD *)(a2 + 56);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v7);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>((uint64_t *)a1, (unsigned int *)(a2 + 40), v7);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 64));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 65));
}

uint64_t IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::IDBKeyData>(a1, v38);
  IPC::Decoder::decode<WebCore::IDBKeyData>(a1, v34);
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_28;
  }
  unsigned __int8 v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    uint64_t v19 = v4;
    uint64_t v20 = 0;
    goto LABEL_29;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (!v23 || !v4)
    {
      char v12 = 0;
      uint64_t v24 = 0;
      uint64_t v5 = 0;
      int v10 = 1;
LABEL_33:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v25 = a1[3];
      if (v25 && v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v5, v24);
        uint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v5);
    char v11 = 0;
    uint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    int v10 = 1;
    uint64_t v8 = a1[2];
LABEL_5:
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    unint64_t v13 = v8 - v5;
    if (v4 <= v13)
    {
      uint64_t v24 = 0;
      uint64_t v26 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v26 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t v5 = *a1;
        uint64_t v24 = a1[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_33;
    }
    uint64_t v14 = (unsigned __int8 *)(v5 + v13);
    a1[2] = (uint64_t)(v14 + 1);
    if (!v5)
    {
      uint64_t v24 = v4;
      goto LABEL_33;
    }
    unsigned int v15 = *v14;
    if (v15 <= 1)
    {
      int v16 = 0;
      BOOL v17 = v15 != 0;
      goto LABEL_12;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (!result
      || !v4
      || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5), !*a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 72) = 0;
      goto LABEL_20;
    }
    BOOL v17 = 0;
    int v16 = 1;
LABEL_12:
    if (v41 && v37 && !v10 && !v16) {
      break;
    }
    __break(1u);
LABEL_28:
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *a1;
        uint64_t v19 = a1[1];
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22 && v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20, v19);
      unsigned int v9 = 0;
      uint64_t v5 = *a1;
      unint64_t v4 = a1[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
  }
  v27[0] = v38[0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v28, (uint64_t)v39);
  char v30 = v34[0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v31, (uint64_t)v35);
  LOBYTE(v33) = v12;
  HIBYTE(v33) = v17;
  *(unsigned char *)a2 = v27[0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v28);
  *(unsigned char *)(a2 + 32) = v30;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v31);
  *(_WORD *)(a2 + 64) = v33;
  *(unsigned char *)(a2 + 72) = 1;
  if (v32 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v32])(&v42, v31);
  }
  int v32 = -1;
  if (v29 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v29])(&v42, v28);
  }
LABEL_20:
  if (v37 && v36 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v36])(v27, v35);
  }
  if (v41)
  {
    if (v40 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v40])(v27, v39);
    }
  }
  return result;
}

void sub_1988413D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  if (a23 && a21 != -1) {
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a21])(&a9, &a19);
  }
  if (*(unsigned char *)(v23 - 64))
  {
    uint64_t v25 = *(unsigned int *)(v23 - 72);
    if (v25 != -1) {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v25])(&a9, v23 - 88);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBTransactionInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 8));
  char v8 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = *(unsigned char *)(a2 + 17);
  IPC::Encoder::operator<<<BOOL>(a1, &v9);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
    return (uint64_t)IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBDatabaseInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBDatabaseInfo> const&>(a1, (uint64_t **)(a2 + 48));
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::IDBTransactionInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v41);
  unint64_t v4 = a1[1];
  uint64_t v5 = (char *)*a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_27;
  }
  unsigned __int8 v7 = &v5[v6];
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v21 = v4;
    uint64_t v22 = 0;
    goto LABEL_28;
  }
  unsigned int v8 = *v7;
  if (v8 >= 3) {
    goto LABEL_29;
  }
  unsigned int v9 = v8 | 0x100;
LABEL_5:
  if (v4 > a1[2] - (uint64_t)v5)
  {
    int v10 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v10 + 1);
    if (v5)
    {
      unsigned int v11 = *v10;
      if (v11 < 3)
      {
        unsigned int v12 = v11 | 0x100;
        goto LABEL_9;
      }
      goto LABEL_35;
    }
    uint64_t v27 = 0;
    goto LABEL_33;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v26 + 16))(v26, v5);
        uint64_t v27 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        uint64_t v27 = 0;
      }
    }
    else
    {
      uint64_t v27 = 0;
      unint64_t v4 = 0;
    }
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v28 = a1[3];
    if (v28)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v27);
        uint64_t v5 = (char *)*a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v4 = 0;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v29 + 16))(v29, v5);
        unsigned int v12 = 0;
        uint64_t v5 = (char *)*a1;
        unint64_t v4 = a1[1];
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v4 = 0;
    }
    uint64_t v5 = 0;
    unsigned int v12 = 0;
LABEL_9:
    unint64_t v13 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v4 < v13 || v4 - v13 <= 7)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v32 = a1[3];
      if (v32)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
          uint64_t v31 = *a1;
          uint64_t v30 = a1[1];
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v14 + 1);
      if (v5)
      {
        int v15 = 0;
        uint64_t v16 = *v14;
        goto LABEL_13;
      }
      uint64_t v30 = v4;
      uint64_t v31 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33 && v30) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31, v30);
    }
    uint64_t v16 = 0;
    int v15 = 1;
LABEL_13:
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v5, (uint64_t)&v38);
    IPC::Decoder::decode<std::unique_ptr<WebCore::IDBDatabaseInfo>>(&v36, (IPC::Decoder *)a1);
    if (!*a1) {
      break;
    }
    if (v42 && v9 > 0xFF && v12 > 0xFF && !v15 && v40 && v37)
    {
      uint64_t v18 = v36;
      v35[2] = 0;
      int v36 = 0;
      LOBYTE(v34) = v9;
      BYTE1(v34) = v12;
      *((void *)&v34 + 1) = v16;
      v35[0] = 0;
      uint64_t v19 = v38;
      uint64_t v38 = 0;
      *(_OWORD *)a2 = v41;
      *(_OWORD *)(a2 + 16) = v34;
      *(void *)(a2 + 32) = v19;
      v35[1] = 0;
      uint64_t v20 = v39;
      uint64_t v39 = 0;
      *(void *)(a2 + 40) = v20;
      *(void *)(a2 + 48) = v18;
      *(unsigned char *)(a2 + 56) = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v17);
      goto LABEL_21;
    }
    __break(1u);
LABEL_27:
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        uint64_t v22 = *a1;
        uint64_t v21 = a1[1];
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
LABEL_28:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v21);
        uint64_t v5 = (char *)*a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v25 + 16))(v25, v5);
        unsigned int v9 = 0;
        uint64_t v5 = (char *)*a1;
        unint64_t v4 = a1[1];
        goto LABEL_5;
      }
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
    else
    {
      uint64_t v5 = 0;
      unsigned int v9 = 0;
      unint64_t v4 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (!v37) {
    goto LABEL_23;
  }
LABEL_21:
  BOOL v17 = v36;
  int v36 = 0;
  if (v17) {
    std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v36, v17);
  }
LABEL_23:
  if (v40) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v17);
  }
}

void sub_198841A10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a20) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::Decoder::decode<std::unique_ptr<WebCore::IDBDatabaseInfo>>(unsigned char *result, IPC::Decoder *a2)
{
  int v79 = result;
  uint64_t v3 = *((void *)a2 + 2);
  unint64_t v4 = *(WTF::StringImpl **)a2;
  unint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = v3 - (void)v4;
  if (v5 <= v6)
  {
    unint64_t v60 = 0;
    uint64_t v61 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v62 = *((void *)a2 + 3);
    if (v62)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v62 + 16))(v62);
        uint64_t v61 = *(WTF::StringImpl **)a2;
        unint64_t v60 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v61 = 0;
      }
    }
    goto LABEL_105;
  }
  unsigned __int8 v7 = (unsigned __int8 *)v4 + v6;
  *((void *)a2 + 2) = v7 + 1;
  if (!v4)
  {
    unint64_t v60 = v5;
    uint64_t v61 = 0;
LABEL_105:
    unint64_t v5 = 0;
    unint64_t v4 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v63 = *((void *)a2 + 3);
    if (v63)
    {
      if (v60)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v63 + 16))(v63, v61, v60);
        unint64_t v4 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v4 = 0;
      }
    }
    goto LABEL_106;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_106:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v64 = *((void *)a2 + 3);
    if (v64 && v5) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v64 + 16))(v64, v4);
    }
    *int v79 = 0;
    v79[8] = 0;
    goto LABEL_96;
  }
  if (!v8)
  {
    *(void *)uint64_t result = 0;
    result[8] = 1;
    return result;
  }
  uint64_t v9 = (uint64_t)IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v86);
  unint64_t v10 = *((void *)a2 + 1);
  unsigned int v11 = *(WTF::StringImpl **)a2;
  unint64_t v12 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v10 >= v12 && v10 - v12 > 7)
  {
    *((void *)a2 + 2) = (char *)v11 + v12 + 8;
    if (v11)
    {
      int v78 = 0;
      goto LABEL_12;
    }
    unint64_t v65 = v10;
    int v66 = 0;
  }
  else
  {
    unint64_t v65 = 0;
    int v66 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v67 = *((void *)a2 + 3);
    if (v67)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
        int v66 = *(WTF::StringImpl **)a2;
        unint64_t v65 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v65 = 0;
        int v66 = 0;
      }
    }
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v9 = *((void *)a2 + 3);
  if (v9 && v65)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v9 + 16))(v9, v66, v65);
    unsigned int v11 = *(WTF::StringImpl **)a2;
    unint64_t v10 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
  }
  int v78 = 1;
LABEL_12:
  unint64_t v14 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
  if (v10 < v14 || v10 - v14 <= 7)
  {
    unint64_t v68 = 0;
    uint64_t v69 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v70 = *((void *)a2 + 3);
    if (v70)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
        uint64_t v69 = *(WTF::StringImpl **)a2;
        unint64_t v68 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v68 = 0;
        uint64_t v69 = 0;
      }
    }
  }
  else
  {
    *((void *)a2 + 2) = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v11)
    {
      int v77 = 0;
      goto LABEL_16;
    }
    unint64_t v68 = v10;
    uint64_t v69 = 0;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v9 = *((void *)a2 + 3);
  if (v9 && v68)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v9 + 16))(v9, v69, v68);
    unsigned int v11 = *(WTF::StringImpl **)a2;
    unint64_t v10 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
  }
  int v77 = 1;
LABEL_16:
  unint64_t v15 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v11;
  if (v10 < v15 || v10 - v15 <= 3)
  {
    unint64_t v71 = 0;
    uint64_t v72 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v73 = *((void *)a2 + 3);
    if (v73)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v73 + 16))(v73);
        uint64_t v72 = *(WTF::StringImpl **)a2;
        unint64_t v71 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v71 = 0;
        uint64_t v72 = 0;
      }
    }
    goto LABEL_117;
  }
  uint64_t v16 = (int *)((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *((void *)a2 + 2) = v16 + 1;
  if (!v11)
  {
    unint64_t v71 = v10;
    uint64_t v72 = 0;
LABEL_117:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v74 = *((void *)a2 + 3);
    if (v74 && v71) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v74 + 16))(v74, v72, v71);
    }
    LOBYTE(v84) = 0;
    char v85 = 0;
    goto LABEL_74;
  }
  int v17 = *v16;
  uint64_t v94 = 0;
  if (!v17)
  {
    uint64_t v59 = 0;
    goto LABEL_77;
  }
  for (int i = 0; i != v17; ++i)
  {
    uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
    if (!(_BYTE)v20)
    {
      LOBYTE(v84) = 0;
      char v85 = 0;
      goto LABEL_72;
    }
    uint64_t v21 = v19;
    IPC::Decoder::decode<WebCore::IDBObjectStoreInfo>((uint64_t *)a2, (uint64_t)&v88);
    if (!v93 || (unint64_t)(v21 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
LABEL_71:
      LOBYTE(v84) = 0;
      char v85 = 0;
      std::__optional_destruct_base<WebCore::IDBObjectStoreInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v22);
LABEL_72:
      if (v94) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v94, v20);
      }
LABEL_74:
      unsigned int v11 = *(WTF::StringImpl **)a2;
      unint64_t v10 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v9 = *((void *)a2 + 3);
      if (v9) {
        goto LABEL_99;
      }
      goto LABEL_75;
    }
    uint64_t v23 = v94;
    if (v94
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(&v94),
          (uint64_t v23 = v94) != 0))
    {
      int v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      int v24 = 0;
    }
    unint64_t v25 = (v21 + ~(v21 << 32)) ^ ((unint64_t)(v21 + ~(v21 << 32)) >> 22);
    unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    unsigned int v28 = v24 & ((v27 >> 31) ^ v27);
    uint64_t v29 = (uint64_t *)(v23 + 72 * v28);
    uint64_t v30 = *v29;
    if (*v29)
    {
      uint64_t v31 = 0;
      int v32 = 1;
      do
      {
        if (v30 == v21) {
          goto LABEL_71;
        }
        if (v30 == -1) {
          uint64_t v31 = v29;
        }
        unsigned int v28 = (v28 + v32) & v24;
        uint64_t v29 = (uint64_t *)(v23 + 72 * v28);
        uint64_t v30 = *v29;
        ++v32;
      }
      while (*v29);
      if (v31)
      {
        *uint64_t v31 = 0;
        WTF::HashTraits<WebCore::IDBObjectStoreInfo>::emptyValue();
        --*(_DWORD *)(v94 - 16);
        uint64_t v29 = v31;
      }
    }
    *uint64_t v29 = v21;
    uint64_t v33 = (WTF::StringImpl *)v89;
    *(void *)&long long v89 = 0;
    uint64_t v95 = v88;
    uint64_t v96 = v33;
    std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](v97, (uint64_t)&v89 + 8);
    char v100 = v91;
    uint64_t v35 = v92;
    uint64_t v92 = 0;
    uint64_t v101 = v35;
    v29[1] = v95;
    int v36 = v96;
    uint64_t v96 = 0;
    char v37 = (WTF::StringImpl *)v29[2];
    v29[2] = (uint64_t)v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v34);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    uint64_t v38 = (WTF::StringImpl *)(v29 + 3);
    if (*((unsigned __int8 *)v29 + 48) == v99)
    {
      if (*((unsigned char *)v29 + 48)) {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v29 + 3), (uint64_t)v97);
      }
    }
    else
    {
      if (*((unsigned char *)v29 + 48))
      {
        uint64_t v39 = *((unsigned int *)v29 + 10);
        if (v39 != -1) {
          ((void (*)(unsigned char *, WTF::StringImpl *))off_1EE9B44A8[v39])(v102, v38);
        }
        char v40 = 0;
        *((_DWORD *)v29 + 10) = -1;
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v29 + 3), (uint64_t)v97);
        char v40 = 1;
      }
      *((unsigned char *)v29 + 48) = v40;
    }
    *((unsigned char *)v29 + 56) = v100;
    uint64_t v41 = v101;
    uint64_t v101 = 0;
    uint64_t v42 = v29[8];
    v29[8] = v41;
    if (v42)
    {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v42, v38);
      if (v101) {
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v101, v38);
      }
    }
    if (v99)
    {
      if (v98 != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9B44A8[v98])(v102, v97);
      }
      int v98 = -1;
    }
    long long v43 = v96;
    uint64_t v96 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v38);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    uint64_t v44 = v94;
    if (v94) {
      int v45 = *(_DWORD *)(v94 - 12) + 1;
    }
    else {
      int v45 = 1;
    }
    *(_DWORD *)(v94 - 12) = v45;
    uint64_t v46 = (*(_DWORD *)(v44 - 16) + v45);
    unint64_t v47 = *(unsigned int *)(v44 - 4);
    if (v47 <= 0x400)
    {
      if (3 * v47 > 4 * v46) {
        goto LABEL_66;
      }
LABEL_65:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(&v94);
      goto LABEL_66;
    }
    if (v47 <= 2 * v46) {
      goto LABEL_65;
    }
LABEL_66:
    uint64_t v9 = std::__optional_destruct_base<WebCore::IDBObjectStoreInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v38);
  }
  uint64_t v59 = v94;
LABEL_77:
  int v49 = 0;
  uint64_t v84 = v59;
  int v48 = 1;
  char v85 = 1;
  while (1)
  {
    uint64_t v50 = *(WTF::StringImpl **)a2;
    if (!*(void *)a2) {
      break;
    }
    if (v87 && !v78 && !v77 && !v49)
    {
      WebCore::IDBDatabaseInfo::IDBDatabaseInfo();
      uint64_t v80 = v88;
      long long v81 = v89;
      uint64_t v82 = v90;
      int v51 = 1;
      unsigned __int8 v83 = 1;
      if (!v85) {
        goto LABEL_86;
      }
      goto LABEL_84;
    }
    __break(1u);
LABEL_99:
    if (v10) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v9 + 16))(v9, v11);
    }
LABEL_75:
    int v48 = 0;
    int v49 = 1;
  }
  int v51 = 0;
  LOBYTE(v80) = 0;
  unsigned __int8 v83 = 0;
  if (!v48) {
    goto LABEL_86;
  }
LABEL_84:
  if (v84) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v84, v11);
  }
LABEL_86:
  if (!v87 || (uint64_t v52 = v86, v86 = 0, !v52))
  {
LABEL_90:
    if (v50) {
      goto LABEL_93;
    }
    goto LABEL_121;
  }
  if (*(_DWORD *)v52 != 2)
  {
    *(_DWORD *)v52 -= 2;
    goto LABEL_90;
  }
  WTF::StringImpl::destroy(v52, v11);
  if (!v50)
  {
LABEL_121:
    unsigned int v11 = *(WTF::StringImpl **)a2;
    uint64_t v75 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v76 = *((void *)a2 + 3);
    if (v76 && v75)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v76 + 16))(v76, v11);
      int v51 = v83;
    }
  }
LABEL_93:
  if (v51)
  {
    uint64_t v53 = WebCore::IDBDatabaseInfo::operator new((WebCore::IDBDatabaseInfo *)0x20);
    uint64_t v54 = v80;
    uint64_t v80 = 0;
    *(void *)uint64_t v53 = v54;
    *(_OWORD *)(v53 + 8) = v81;
    *(void *)(v53 + 24) = 0;
    uint64_t v55 = v82;
    uint64_t v82 = 0;
    *(void *)(v53 + 24) = v55;
    *(void *)int v79 = v53;
    v79[8] = 1;
    return (unsigned char *)std::__optional_destruct_base<WebCore::IDBDatabaseInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80, v56);
  }
  *int v79 = 0;
  v79[8] = 0;
  std::__optional_destruct_base<WebCore::IDBDatabaseInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80, v11);
LABEL_96:
  uint64_t v57 = *(WTF::StringImpl **)a2;
  uint64_t v58 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (unsigned char *)*((void *)a2 + 3);
  if (result)
  {
    if (v58) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *, WTF::StringImpl *))(*(void *)result + 16))(result, v57);
    }
  }
  return result;
}

void sub_19884238C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t IPC::ArgumentCoder<WebCore::IDBGetRecordData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a1, (uint64_t)v18);
  __int16 v10 = 0;
  IPC::Decoder::operator>><BOOL>(v2, &v10);
  int v4 = HIBYTE(v10);
  if (!HIBYTE(v10)) {
    goto LABEL_12;
  }
  for (char i = v10; ; char i = 0)
  {
    if (!*v2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
    }
    if (v21)
    {
      LOBYTE(v10) = v18[0];
      unint64_t v2 = (uint64_t *)v11;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v11, (uint64_t)v19);
      char v13 = v19[24];
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v14, (uint64_t)v20);
      __int16 v16 = v20[12];
      if (v4) {
        break;
      }
    }
    __break(1u);
LABEL_12:
    uint64_t v7 = *v2;
    uint64_t v8 = v2[1];
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v9 = v2[3];
    if (v9 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
  }
  char v17 = i;
  *(unsigned char *)a2 = v10;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v11);
  *(unsigned char *)(a2 + 32) = v13;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v14);
  *(_WORD *)(a2 + 64) = v16;
  *(unsigned char *)(a2 + 72) = v17;
  *(unsigned char *)(a2 + 80) = 1;
  if (v15 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&v22, v14);
  }
  int v15 = -1;
  if (v12 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v22, v11);
  }
  return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
}

void sub_19884263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    __break(0xC471u);
    goto LABEL_8;
  }
  *unint64_t v5 = v4;
  uint64_t v13 = a2[1];
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v13);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  unsigned __int8 v14 = *((_DWORD *)a2 + 10);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  IPC::ArgumentCoder<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(a2 + 3), v14);
  char v7 = *((unsigned char *)a2 + 48);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1988427F4);
  }
  *uint64_t v8 = v7;
  char v10 = *((unsigned char *)a2 + 49);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
LABEL_8:
    JUMPOUT(0x1988427D4);
  }
  *uint64_t result = v10;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    a1[2] = v5 + v6 + 8;
    if (v5)
    {
      int v8 = 0;
      goto LABEL_8;
    }
    uint64_t v20 = v4;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v5, v4);
        uint64_t v21 = *a1;
        uint64_t v20 = a1[1];
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v23 = a1[3];
  if (v23 && v20) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
  }
  int v8 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v10 = v9;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v42);
  uint64_t result = IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a1, v39);
  unint64_t v12 = a1[1];
  uint64_t v13 = (WTF::StringImpl *)*a1;
  unint64_t v14 = a1[2] - *a1;
  if (v12 <= v14)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t v25 = *a1;
        uint64_t v24 = a1[1];
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_40;
  }
  int v15 = (unsigned __int8 *)v13 + v14;
  __int16 v16 = v15 + 1;
  a1[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    uint64_t v24 = v12;
    uint64_t v25 = 0;
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v24);
        uint64_t v13 = (WTF::StringImpl *)*a1;
        unint64_t v12 = a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = 0;
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      goto LABEL_52;
    }
    goto LABEL_43;
  }
  if (*v15 >= 2u) {
    goto LABEL_42;
  }
  for (int i = 0; ; int i = 1)
  {
    if (v12 <= v16 - (unsigned __int8 *)v13)
    {
      int v33 = i;
      uint64_t j = 0;
      uint64_t v30 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v30 && v12)
      {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
        uint64_t v13 = (WTF::StringImpl *)*a1;
        uint64_t j = a1[1];
      }
      else
      {
        uint64_t v13 = 0;
      }
      int i = v33;
      goto LABEL_44;
    }
    a1[2] = (uint64_t)(v16 + 1);
    if (v13) {
      break;
    }
    for (uint64_t j = v12; ; uint64_t j = 0)
    {
LABEL_44:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v29 = a1[3];
      if (v29)
      {
        int v32 = i;
        if (j)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v29 + 16))(v29, v13, j);
          uint64_t v13 = (WTF::StringImpl *)*a1;
          unint64_t v12 = a1[1];
        }
        else
        {
          unint64_t v12 = 0;
          uint64_t v13 = 0;
        }
        int i = v32;
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
LABEL_46:
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = (WTF::StringImpl *)a1[3];
      if (!result
        || !v12
        || (int v31 = i,
            uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v13), i = v31, !*a1))
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 56) = 0;
        goto LABEL_27;
      }
      int v18 = 1;
      if (!v8) {
        goto LABEL_16;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      if (v12) {
        break;
      }
LABEL_43:
      uint64_t v13 = 0;
      int i = 1;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v13);
    uint64_t v13 = (WTF::StringImpl *)*a1;
    unint64_t v12 = a1[1];
    __int16 v16 = (unsigned __int8 *)a1[2];
  }
  if (*v16 > 1u) {
    goto LABEL_46;
  }
  int v18 = 0;
  if (v8) {
    goto LABEL_51;
  }
LABEL_16:
  if (!v10 || !v43 || !v41 || i || v18) {
    goto LABEL_51;
  }
  WebCore::IDBIndexInfo::IDBIndexInfo();
  *(_OWORD *)a2 = v34;
  uint64_t v19 = v35;
  uint64_t v35 = 0;
  *(void *)(a2 + 16) = v19;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 24, (uint64_t)v36);
  *(_WORD *)(a2 + 48) = v38;
  *(unsigned char *)(a2 + 56) = 1;
  if (v37 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9B44A8[v37])(&v44, v36);
  }
  int v37 = -1;
  uint64_t result = v35;
  uint64_t v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_27:
  if (v41 && v40 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(long long *, unsigned char *))off_1EE9B44A8[v40])(&v34, v39);
  }
  if (v43)
  {
    uint64_t result = v42;
    uint64_t v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198842D1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, char a18, uint64_t a19, int a20,int a21,char a22)
{
  if (a22 && a20 != -1) {
    ((void (*)(char *, char *))off_1EE9B44A8[a20])(&a11, &a18);
  }
  if (*(unsigned char *)(v22 - 64))
  {
    uint64_t v24 = *(WTF::StringImpl **)(v22 - 72);
    *(void *)(v22 - 72) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, a2);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24]) {
    return (IPC::Decoder *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198842E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B44A8[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::IDBObjectStoreInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v19 = *(void *)a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v19);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&>(a1, a2 + 16);
  char v4 = *(unsigned char *)(a2 + 48);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6
    || ((*v5 = v4, (uint64_t v7 = *(void *)(a2 + 56)) == 0) ? (v8 = 0) : (v8 = *(_DWORD *)(v7 - 12)),
        uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4),
        v10 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x198843020);
  }
  *uint64_t result = v8;
  unsigned int v11 = *(uint64_t **)(a2 + 56);
  if (v11)
  {
    uint64_t v12 = *((unsigned int *)v11 - 1);
    uint64_t v13 = &v11[8 * v12];
    if (*((_DWORD *)v11 - 3))
    {
      unint64_t v14 = *(uint64_t **)(a2 + 56);
      if (v12)
      {
        uint64_t v15 = v12 << 6;
        unint64_t v14 = v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 8;
          v15 -= 64;
          if (!v15)
          {
            unint64_t v14 = v13;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    unint64_t v14 = &v11[8 * v12];
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v11[8 * v12];
  if (v11)
  {
LABEL_13:
    __int16 v16 = &v11[8 * (unint64_t)*((unsigned int *)v11 - 1)];
    goto LABEL_18;
  }
  __int16 v16 = 0;
LABEL_18:
  while (v14 != v16)
  {
    char v17 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>(a1, v14);
    uint64_t result = IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::encode(v17, v14 + 1);
    int v18 = v14 + 8;
    unint64_t v14 = v13;
    if (v18 != v13)
    {
      unint64_t v14 = v18;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 8;
        if (v14 == v13)
        {
          unint64_t v14 = v13;
          break;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBObjectStoreInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v5 = v4;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v65);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v61, (IPC::Decoder *)a1);
  unint64_t v7 = a1[1];
  int v8 = (WTF::StringImpl *)*a1;
  unint64_t v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v49 = a1[3];
    if (v49)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
        uint64_t v48 = *a1;
        uint64_t v47 = a1[1];
      }
      else
      {
        uint64_t v47 = 0;
        uint64_t v48 = 0;
      }
    }
    goto LABEL_96;
  }
  unint64_t v10 = (unsigned __int8 *)v8 + v9;
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    uint64_t v47 = v7;
    uint64_t v48 = 0;
LABEL_96:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v50 = a1[3];
    if (v50 && v47)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48, v47);
      int v8 = (WTF::StringImpl *)*a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v7 = 0;
      int v8 = 0;
    }
    goto LABEL_98;
  }
  if (*v10 < 2u)
  {
    int v11 = 0;
    goto LABEL_5;
  }
LABEL_98:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v7)
    {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v8);
      int v8 = (WTF::StringImpl *)*a1;
      unint64_t v7 = a1[1];
      goto LABEL_101;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  int v8 = 0;
LABEL_101:
  int v11 = 1;
LABEL_5:
  unint64_t v12 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v8;
  if (v7 < v12 || v7 - v12 <= 3)
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v53 = a1[3];
    if (v53)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
        uint64_t v52 = *a1;
        uint64_t v51 = a1[1];
      }
      else
      {
        uint64_t v51 = 0;
        uint64_t v52 = 0;
      }
    }
    goto LABEL_103;
  }
  char v58 = v5;
  unint64_t v14 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (uint64_t)(v14 + 1);
  if (v8)
  {
    int v15 = *v14;
    uint64_t v74 = 0;
    if (!v15)
    {
      uint64_t v44 = 0;
      goto LABEL_60;
    }
    int v57 = v11;
    int v16 = 0;
    while (1)
    {
      unint64_t v7 = a1[1];
      int v8 = (WTF::StringImpl *)*a1;
      unint64_t v17 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
      if (v7 < v17 || v7 - v17 <= 7) {
        goto LABEL_89;
      }
      uint64_t v19 = (uint64_t *)((char *)v8 + v17);
      a1[2] = (uint64_t)(v19 + 1);
      if (!v8) {
        goto LABEL_106;
      }
      uint64_t v20 = *v19;
      IPC::Decoder::decode<WebCore::IDBIndexInfo>(a1, (uint64_t)v67);
      if (!(_BYTE)v73 || (unint64_t)(v20 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      {
LABEL_53:
        LOBYTE(v59) = 0;
        char v60 = 0;
        std::__optional_destruct_base<WebCore::IDBIndexInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67, v21);
        goto LABEL_54;
      }
      uint64_t v22 = v74;
      if (v74
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(&v74),
            (uint64_t v22 = v74) != 0))
      {
        unsigned int v23 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        unsigned int v23 = 0;
      }
      unint64_t v24 = (v20 + ~(v20 << 32)) ^ ((unint64_t)(v20 + ~(v20 << 32)) >> 22);
      unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      uint64_t v27 = v23 & ((v26 >> 31) ^ v26);
      unsigned int v28 = (void *)(v22 + (v27 << 6));
      uint64_t v29 = *v28;
      if (*v28)
      {
        uint64_t v30 = 0;
        int v31 = 1;
        do
        {
          if (v29 == v20) {
            goto LABEL_53;
          }
          if (v29 == -1) {
            uint64_t v30 = v28;
          }
          uint64_t v27 = (v27 + v31) & v23;
          unsigned int v28 = (void *)(v22 + (v27 << 6));
          uint64_t v29 = *v28;
          ++v31;
        }
        while (*v28);
        if (v30)
        {
          *uint64_t v30 = 0;
          WTF::HashTraits<WebCore::IDBIndexInfo>::emptyValue();
          --*(_DWORD *)(v74 - 16);
          unsigned int v28 = v30;
        }
      }
      *unsigned int v28 = v20;
      long long v75 = *(_OWORD *)v67;
      int v32 = v68;
      unint64_t v68 = 0;
      uint64_t v76 = v32;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v77, (uint64_t)&v69);
      __int16 v79 = v72;
      *(_OWORD *)(v28 + 1) = v75;
      long long v34 = v76;
      uint64_t v76 = 0;
      uint64_t v35 = (WTF::StringImpl *)v28[3];
      v28[3] = v34;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v33);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v28 + 4), (uint64_t)v77);
      *((_WORD *)v28 + 28) = v79;
      if (v78 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B44A8[v78])(v80, v77);
      }
      int v78 = -1;
      int v37 = v76;
      uint64_t v76 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v36);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      uint64_t v38 = v74;
      int v39 = v74 ? *(_DWORD *)(v74 - 12) + 1 : 1;
      *(_DWORD *)(v74 - 12) = v39;
      uint64_t v40 = (*(_DWORD *)(v38 - 16) + v39);
      unint64_t v41 = *(unsigned int *)(v38 - 4);
      if (v41 > 0x400) {
        break;
      }
      if (3 * v41 <= 4 * v40) {
        goto LABEL_47;
      }
LABEL_48:
      uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::IDBIndexInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67, v36);
      if (++v16 == v15)
      {
        uint64_t v44 = v74;
LABEL_60:
        uint64_t v59 = v44;
        char v60 = 1;
        char v5 = v58;
        goto LABEL_61;
      }
    }
    if (v41 > 2 * v40) {
      goto LABEL_48;
    }
LABEL_47:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(&v74);
    goto LABEL_48;
  }
  uint64_t v51 = v7;
  uint64_t v52 = 0;
LABEL_103:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v54 = a1[3];
  if (v54 && v51) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v52, v51);
  }
  LOBYTE(v59) = 0;
  char v60 = 0;
  while (1)
  {
    int v8 = (WTF::StringImpl *)*a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v7) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v8);
LABEL_61:
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 64) = 0;
      goto LABEL_75;
    }
    if (v5 && v66 && v64 && !v11 && v60) {
      break;
    }
    __break(1u);
LABEL_89:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v45 = a1[3];
    if (v45) {
      BOOL v46 = v7 == 0;
    }
    else {
      BOOL v46 = 1;
    }
    if (!v46)
    {
      (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
      int v8 = (WTF::StringImpl *)*a1;
      unint64_t v7 = a1[1];
LABEL_106:
      uint64_t v55 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v55) {
        BOOL v56 = v7 == 0;
      }
      else {
        BOOL v56 = 1;
      }
      if (!v56) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v55 + 16))(v55, v8, v7);
      }
    }
    LOBYTE(v59) = 0;
    char v60 = 0;
LABEL_54:
    char v5 = v58;
    int v11 = v57;
    if (v74) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v74, v8);
    }
  }
  WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo();
  uint64_t v42 = v67[1];
  v67[1] = 0;
  *(WTF::StringImpl **)a2 = v67[0];
  *(void *)(a2 + 8) = v42;
  std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 16), (uint64_t)&v68);
  *(unsigned char *)(a2 + 48) = v72;
  uint64_t v43 = v73;
  uint64_t v73 = 0;
  *(void *)(a2 + 56) = v43;
  *(unsigned char *)(a2 + 64) = 1;
  if (v71)
  {
    if (v70 != -1) {
      ((void (*)(long long *, WTF::StringImpl **))off_1EE9B44A8[v70])(&v75, &v68);
    }
    int v70 = -1;
  }
  uint64_t result = v67[1];
  v67[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_75:
  if (v60)
  {
    uint64_t result = (WTF::StringImpl *)v59;
    if (v59) {
      uint64_t result = (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v59, v8);
    }
  }
  if (v64 && v63 && v62 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9B44A8[v62])(v67, v61);
  }
  if (v66)
  {
    uint64_t result = v65;
    unint64_t v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988437A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26,WTF::StringImpl *a27,char a28,int a29,__int16 a30,char a31,char a32,WTF::StringImpl *a33,uint64_t a34,uint64_t a35,int a36,int a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if ((_BYTE)a24 && a22 && a20 != -1) {
    ((void (*)(__int16 *, __int16 *))off_1EE9B44A8[a20])(&a30, &a16);
  }
  if (a28)
  {
    uint64_t v42 = a27;
    a27 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, a2);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4 = (unsigned int *)(a2 + 8);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>((uint64_t *)a1, v4, v6);
  unsigned __int8 v7 = *(_DWORD *)(a2 + 56);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v7);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>((uint64_t *)a1, (unsigned int *)(a2 + 40), v7);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 64));
  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 68));
}

uint64_t IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  IPC::Decoder::decode<WebCore::IDBKeyData>(a1, v33);
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, v29);
  unint64_t v4 = v2[1];
  uint64_t v5 = *v2;
  unint64_t v6 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    int v8 = (_DWORD *)(v5 + v6);
    v2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      uint64_t v15 = v4;
      uint64_t v16 = 0;
      goto LABEL_28;
    }
    int v9 = 0;
    unsigned int v10 = *v8 & 0xFFFFFF00;
    int v11 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v17 = v2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v5, v4);
        uint64_t v16 = *v2;
        uint64_t v15 = v2[1];
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
LABEL_28:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v18 = v2[3];
    if (v18 && v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
    unsigned int v10 = 0;
    int v11 = 0;
    int v9 = 1;
LABEL_8:
    __int16 v21 = 0;
    uint64_t result = (uint64_t)IPC::Decoder::operator>><BOOL>(v2, &v21);
    int v13 = HIBYTE(v21);
    if (HIBYTE(v21))
    {
      char v14 = v21;
    }
    else
    {
      uint64_t v19 = *v2;
      uint64_t v20 = v2[1];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t result = v2[3];
      if (result && v20) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v19);
      }
      char v14 = 0;
    }
    if (!*v2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 72) = 0;
      goto LABEL_19;
    }
    uint64_t v5 = v36;
    if (v36)
    {
      LOBYTE(v21) = v33[0];
      unint64_t v2 = (uint64_t *)v22;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v22, (uint64_t)v34);
      uint64_t v5 = v32;
      if (v32)
      {
        char v24 = v29[0];
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v25, (uint64_t)v30);
        if (!v9)
        {
          uint64_t v5 = v11 | v10;
          int v27 = v11 | v10;
          if (v13) {
            break;
          }
        }
      }
    }
    __break(1u);
  }
  char v28 = v14;
  *(unsigned char *)a2 = v21;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v22);
  *(unsigned char *)(a2 + 32) = v24;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v25);
  *(_DWORD *)(a2 + 64) = v27;
  *(unsigned char *)(a2 + 68) = v28;
  *(unsigned char *)(a2 + 72) = 1;
  if (v26 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v26])(&v37, v25);
  }
  int v26 = -1;
  if (v23 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v37, v22);
  }
LABEL_19:
  if (v32 && v31 != -1) {
    uint64_t result = ((uint64_t (*)(__int16 *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v21, v30);
  }
  if (v36)
  {
    if (v35 != -1) {
      return ((uint64_t (*)(__int16 *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(&v21, v34);
    }
  }
  return result;
}

void sub_198843D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,int a31,char a32)
{
  if (a23 && a21 != -1) {
    ((void (*)(uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a21])(v32 - 65, &a19);
  }
  if (a32)
  {
    if (a30 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a30])(&a18, &a28);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBResourceIdentifier,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 >= v8 && v6 - v8 > 7)
  {
    a1[2] = v7 + v8 + 8;
    if (v7)
    {
      if (!v5) {
        goto LABEL_14;
      }
      uint64_t result = WebCore::IDBResourceIdentifier::IDBResourceIdentifier();
      *(_OWORD *)a2 = v12;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    uint64_t v10 = v6;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_15;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (!result) {
      break;
    }
    if (!v10) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v11);
    uint64_t v7 = *a1;
    if (!*a1) {
      break;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)result + 16))(result, v7, v6);
      uint64_t v11 = *a1;
      uint64_t v10 = a1[1];
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::IDBValue,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ThreadSafeDataBufferImpl,WTF::RawPtrTraits<WebCore::ThreadSafeDataBufferImpl>,WTF::DefaultRefDerefTraits<WebCore::ThreadSafeDataBufferImpl>>,void>::encode<IPC::Encoder,WebCore::ThreadSafeDataBufferImpl>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 1));

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 3));
}

uint64_t IPC::ArgumentCoder<WebCore::IDBValue,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ThreadSafeDataBuffer>((WTF *)&v20, a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)v18);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)v16);
  if (*(void *)a1)
  {
    if (v21 && v19 && v17)
    {
      WebCore::IDBValue::IDBValue();
      long long v8 = *(_OWORD *)v12;
      v12[1] = 0;
      *(_OWORD *)a2 = v8;
      *(void *)&long long v8 = v13;
      uint64_t v13 = 0;
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = v14;
      uint64_t v14 = 0;
      *(void *)(a2 + 24) = v9;
      *(void *)&long long v8 = v15;
      uint64_t v15 = 0;
      *(void *)(a2 + 32) = v8;
      *(unsigned char *)(a2 + 40) = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v10);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12[1], v11);
      uint64_t result = 0;
      goto LABEL_6;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_6:
  if (v17) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v7);
  }
  if (v19) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v7);
  }
  if (v21)
  {
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(result, v7);
    }
  }
  return result;
}

void sub_1988440E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a17) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  }
  if (a23) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  }
  if (*(unsigned char *)(v23 - 40))
  {
    uint64_t v25 = *(void *)(v23 - 48);
    *(void *)(v23 - 48) = 0;
    if (v25) {
      WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v25, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WebCore::ThreadSafeDataBuffer>(WTF *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  char v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *(char **)a2;
        unint64_t v14 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_15;
  }
  long long v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v14 = v6;
    uint64_t v15 = 0;
LABEL_15:
    unint64_t v6 = 0;
    char v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        char v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_16:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v18 + 16))(v18, v5);
    }
    goto LABEL_17;
  }
  if (v9)
  {
    uint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v21);
    uint64_t v10 = *(char **)a2;
    if (*(void *)a2)
    {
      if (!v23) {
        goto LABEL_23;
      }
      uint64_t result = (WTF *)WTF::fastMalloc((WTF *)0x18);
      uint64_t v11 = (uint64_t)result;
      *(_DWORD *)uint64_t result = 1;
      long long v12 = v21;
      char v21 = 0;
      *((void *)result + 1) = v12;
      uint64_t v13 = v22;
      HIDWORD(v22) = 0;
      *((void *)result + 2) = v13;
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (v23)
    {
      uint64_t result = v21;
      if (v21)
      {
        char v21 = 0;
        LODWORD(v22) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v5);
      }
    }
    if (v10)
    {
      unsigned int v9 = 0;
      goto LABEL_19;
    }
LABEL_17:
    char v5 = *(char **)a2;
    unint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (result) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  uint64_t v11 = 0;
LABEL_19:
  while (*(void *)a2)
  {
    if (!v9)
    {
      *(void *)uint64_t v3 = v11;
      *((unsigned char *)v3 + 8) = 1;
      return result;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    if (v6) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v5);
    }
LABEL_18:
    uint64_t v11 = 0;
    unsigned int v9 = 1;
  }
  *(unsigned char *)uint64_t v3 = 0;
  *((unsigned char *)v3 + 8) = 0;
  if (!v11) {
    LOBYTE(v9) = 1;
  }
  if ((v9 & 1) != 0
    || (uint64_t result = (WTF *)WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v11, v5), !*((unsigned char *)v3 + 8)))
  {
    uint64_t v19 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (result)
    {
      if (v19)
      {
        uint64_t v20 = *(uint64_t (**)(void))(*(void *)result + 16);
        return (WTF *)v20();
      }
    }
  }
  return result;
}

void sub_1988443F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 8));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::IDBDatabaseIdentifier,void>::encode(a1, a2 + 24);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 104));
  char v5 = *(unsigned char *)(a2 + 112);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v5 = v4;
  uint64_t result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v38);
  if (!*a1) {
    goto LABEL_4;
  }
  if (!v39) {
    goto LABEL_54;
  }
  if (v38 == 0)
  {
LABEL_4:
    *a2 = 0;
    a2[120] = 0;
    return result;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v40);
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v55);
  unint64_t v7 = a1[1];
  uint64_t v8 = *a1;
  unint64_t v9 = a1[2] - *a1;
  if (v7 <= v9) {
    goto LABEL_55;
  }
  uint64_t v10 = (unsigned __int8 *)(v8 + v9);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    uint64_t v27 = v7;
    uint64_t v28 = 0;
    goto LABEL_56;
  }
  unsigned int v11 = *v10;
  if (v11 <= 1)
  {
    int v12 = 0;
    BOOL v13 = v11 != 0;
    goto LABEL_9;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v31 = a1[3];
    if (v31 && v7 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v8), *a1))
    {
      BOOL v13 = 0;
      int v12 = 1;
LABEL_9:
      v46[0] = 0;
      v46[1] = 0;
      int v48 = 0;
      uint64_t v47 = 0;
      BOOL v49 = 0;
      *(_OWORD *)uint64_t v43 = 0u;
      *(_OWORD *)uint64_t v44 = 0u;
      int v45 = 0;
      if (!v41) {
        goto LABEL_54;
      }
      unint64_t v14 = v40;
      uint64_t v40 = 0;
      v43[0] = v14;
      if (!v56[32]) {
        goto LABEL_54;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43[1], (uint64_t)v55);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v46, (uint64_t)v56);
      if (v12) {
        goto LABEL_54;
      }
      BOOL v49 = v13;
      uint64_t v15 = v43[0];
      v43[0] = 0;
      uint64_t v51 = v15;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v52, (uint64_t)&v43[1]);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v53, (uint64_t)v46);
      v53[32] = v49;
      char v54 = 1;
      if (v48 != -1) {
        ((void (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v48])(&v42, v46);
      }
      int v48 = -1;
      if (v45 != -1) {
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v45])(&v42, &v43[1]);
      }
      int v45 = -1;
      uint64_t v17 = v43[0];
      v43[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      LOBYTE(v51) = 0;
      char v54 = 0;
    }
    std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55);
    if (v41)
    {
      uint64_t v19 = v40;
      uint64_t v40 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    if (!v54)
    {
      uint64_t v32 = *a1;
      unint64_t v7 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v33 = a1[3];
      if (v33)
      {
        if (v7) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v32);
        }
      }
    }
    uint64_t v20 = (WTF::StringImpl *)*a1;
    if (!*a1)
    {
LABEL_29:
      *a2 = 0;
      a2[120] = 0;
      return std::__optional_destruct_base<WebCore::IDBDatabaseIdentifier,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v20);
    }
    if (v54)
    {
      if ((unint64_t)v51 + 1 <= 1) {
        goto LABEL_29;
      }
      unint64_t v21 = a1[1];
      unint64_t v22 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v20;
      BOOL v23 = v21 >= v22 && v21 - v22 >= 8;
      BOOL v24 = !v23;
      if (v24)
      {
        *a1 = 0;
        a1[1] = 0;
        uint64_t v34 = a1[3];
        if (v34)
        {
          if (v21)
          {
            (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
            uint64_t v35 = *a1;
            uint64_t v36 = a1[1];
            uint64_t v37 = a1[3];
            *a1 = 0;
            a1[1] = 0;
            if (v37)
            {
              if (v36) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
              }
            }
          }
        }
      }
      else
      {
        a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      unsigned __int16 v25 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
      if (!*a1) {
        goto LABEL_29;
      }
      if (v5 && v39 && v54 && !v24 && v25 > 0xFFu) {
        break;
      }
    }
LABEL_54:
    __break(1u);
LABEL_55:
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *a1;
        uint64_t v27 = a1[1];
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
LABEL_56:
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v30 = a1[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28, v27);
        uint64_t v8 = *a1;
        unint64_t v7 = a1[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  WebCore::IDBOpenRequestData::IDBOpenRequestData();
  WebCore::IDBOpenRequestData::IDBOpenRequestData((uint64_t)a2, (long long *)v43);
  a2[120] = 1;
  if (v50 != -1) {
    ((void (*)(unsigned char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v50])(v55, &v48);
  }
  int v50 = -1;
  if (v47 != -1) {
    ((void (*)(unsigned char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v47])(v55, &v45);
  }
  LODWORD(v47) = -1;
  int v26 = v44[1];
  v44[1] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v20);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::IDBDatabaseIdentifier,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v20);
}

void sub_198844A0C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, int a14, int a15, __int16 a16, char a17, char a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,int a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28,uint64_t a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
}

uint64_t IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 8));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 24));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WebCore::IDBResourceIdentifier>,void>::encode<IPC::Encoder,std::optional<WebCore::IDBResourceIdentifier> const&>(a1, a2 + 40);
  IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 64));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 80));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 88));
  char v5 = *(unsigned char *)(a2 + 96);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

__n128 IPC::ArgumentCoder<WebCore::IDBRequestData,void>::decode@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v5 = v4;
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v49);
  if (!*a1) {
    goto LABEL_7;
  }
  if (!v50) {
    goto LABEL_34;
  }
  if (v49 == 0) {
    goto LABEL_7;
  }
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v47);
  if (!*a1) {
    goto LABEL_7;
  }
  if (!v48) {
    goto LABEL_34;
  }
  if (v47 == 0)
  {
LABEL_7:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 104) = 0;
    return result;
  }
  IPC::Decoder::decode<std::optional<WebCore::IDBResourceIdentifier>>(a1, (uint64_t)v46);
  unint64_t v6 = a1[1];
  uint64_t v8 = *a1;
  unint64_t v9 = a1[2] - *a1;
  if (v6 <= v9) {
    goto LABEL_35;
  }
  uint64_t v10 = (unsigned __int8 *)(v8 + v9);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    uint64_t v25 = v6;
    uint64_t v26 = 0;
    goto LABEL_36;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2) {
    goto LABEL_37;
  }
  if (!v11)
  {
    IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
    if (!v12) {
      goto LABEL_38;
    }
  }
  for (char i = 1; ; char i = 0)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a1[1];
    unint64_t v15 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v14 < v15 || v14 - v15 <= 7)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v37 = a1[3];
      if (v37)
      {
        if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v36 = *a1;
          uint64_t v35 = a1[1];
        }
        else
        {
          uint64_t v35 = 0;
          uint64_t v36 = 0;
        }
      }
    }
    else
    {
      a1[2] = v13 + v15 + 8;
      if (v13)
      {
        int v16 = 0;
        goto LABEL_18;
      }
      uint64_t v35 = v14;
      uint64_t v36 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v38 = a1[3];
    if (v38 && v35) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
    }
    int v16 = 1;
LABEL_18:
    LOWORD(v44[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v44);
    int v17 = BYTE1(v44[0]);
    unint64_t v18 = a1[1];
    if (!BYTE1(v44[0]))
    {
      uint64_t v33 = *a1;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v34 = a1[3];
      if (v34)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v33);
          unint64_t v18 = a1[1];
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
    }
    uint64_t v19 = *a1;
    unint64_t v20 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v18 < v20 || v18 - v20 <= 7)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v41 = a1[3];
      if (v41)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
          uint64_t v40 = *a1;
          uint64_t v39 = a1[1];
        }
        else
        {
          uint64_t v39 = 0;
          uint64_t v40 = 0;
        }
      }
    }
    else
    {
      a1[2] = v19 + v20 + 8;
      if (v19)
      {
        int v21 = 0;
        goto LABEL_23;
      }
      uint64_t v39 = v18;
      uint64_t v40 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v42 = a1[3];
    if (v42 && v39) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40, v39);
    }
    int v21 = 1;
LABEL_23:
    unsigned __int16 v22 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    if (!*a1) {
      goto LABEL_7;
    }
    if (v5 && v50 && v48 && v46[24] && i && !v16 && v17 && !v21 && v22 > 0xFFu) {
      break;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *a1;
        uint64_t v25 = a1[1];
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
LABEL_36:
    unint64_t v6 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v28 = a1[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        uint64_t v8 = *a1;
        unint64_t v6 = a1[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v8 = 0;
      }
    }
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v8);
    }
LABEL_38:
    uint64_t v30 = *a1;
    uint64_t v31 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v32 = a1[3];
    if (v32)
    {
      if (v31) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
      }
    }
  }
  WebCore::IDBRequestData::IDBRequestData();
  long long v23 = v44[5];
  *(_OWORD *)(a2 + 64) = v44[4];
  *(_OWORD *)(a2 + 80) = v23;
  *(void *)(a2 + 96) = v45;
  long long v24 = v44[1];
  *(_OWORD *)a2 = v44[0];
  *(_OWORD *)(a2 + 16) = v24;
  __n128 result = (__n128)v44[3];
  *(_OWORD *)(a2 + 32) = v44[2];
  *(__n128 *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 104) = 1;
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::IDBResourceIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = IPC::ArgumentCoder<std::optional<WebCore::IDBResourceIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    __n128 result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBDatabaseIdentifier,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, a2 + 8);

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 72));
}

uint64_t IPC::Decoder::decode<WebCore::ClientOrigin>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ClientOrigin,void>::decode(a1, a2);
  if (!a2[64]) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_1988452D8(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBDatabaseNameAndVersion,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unint64_t v9 = (uint64_t *)((char *)v6 + v7);
    *((void *)a1 + 2) = v9 + 1;
    if (v6)
    {
      unint64_t v6 = (WTF::StringImpl *)v14;
      if (!v14) {
        goto LABEL_20;
      }
      uint64_t v10 = *v9;
      *(void *)a2 = v13;
      *(void *)(a2 + 8) = v10;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    unint64_t v11 = v5;
    char v12 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    char v12 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_21;
    }
  }
  while (1)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result) {
      break;
    }
    if (!v11) {
      break;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v12);
    if (!*(void *)a1) {
      break;
    }
    unint64_t v6 = (WTF::StringImpl *)v14;
    if (v14) {
      uint64_t v13 = 0;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    if (v5)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v6, v5);
      char v12 = *(WTF::StringImpl **)a1;
      unint64_t v11 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v11 = 0;
      char v12 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v14)
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198845454(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 8));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  __int16 v6 = *(_WORD *)(a2 + 24);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, (uint64_t)&v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, a2 + 40);
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBDatabaseInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBDatabaseInfo> const&>(a1, (uint64_t **)(a2 + 56));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBTransactionInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBTransactionInfo> const&>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBKeyData>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBKeyData> const&>(a1, (void *)(a2 + 72));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBGetResult>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBGetResult> const&>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBGetAllResult>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBGetAllResult> const&>(a1, (char **)(a2 + 88));
  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 96));
}

void IPC::ArgumentCoder<WebCore::IDBResultData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        uint64_t v19 = *v2;
        uint64_t v18 = v2[1];
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_13;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v18 = v4;
    uint64_t v19 = 0;
LABEL_13:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v21 = v2[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19, v18);
        uint64_t v5 = *v2;
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v8 = *v7;
  if (v8 < 0x12)
  {
    uint64_t v9 = v8 | 0x100;
    goto LABEL_5;
  }
LABEL_14:
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v22 = v2[3];
  if (v22 && v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v5);
  }
  uint64_t v9 = 0;
LABEL_5:
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(v2, (uint64_t)&v225);
  IPC::Decoder::decode<WebCore::IDBError>(v2, (uint64_t)&v222);
  unint64_t v10 = v2[1];
  uint64_t v11 = *v2;
  unint64_t v12 = v2[2] - *v2;
  if (v10 <= v12)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v25 = v2[3];
    if (v25)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *v2;
        uint64_t v23 = v2[1];
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_17;
  }
  uint64_t v13 = (unsigned __int8 *)(v11 + v12);
  v2[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    uint64_t v23 = v10;
    uint64_t v24 = 0;
LABEL_17:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v26 = v2[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24, v23);
        uint64_t v11 = *v2;
        unint64_t v10 = v2[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_18:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v27 = v2[3];
    if (v27 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v11);
    }
    goto LABEL_19;
  }
  if (!v14)
  {
    uint64_t v17 = 0;
    int v213 = 0;
    unint64_t v212 = 0;
    char v211 = 0;
    goto LABEL_21;
  }
  uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2);
  if (v16)
  {
    uint64_t v17 = v15;
    int v213 = 0;
    unint64_t v212 = v15 & 0xFFFFFFFFFFFFFF00;
    char v211 = 1;
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v28 = *v2;
  uint64_t v29 = v2[1];
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v30 = v2[3];
  if (v30 && v29) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
  }
  uint64_t v17 = 0;
  unint64_t v212 = 0;
  int v213 = 1;
LABEL_21:
  IPC::Decoder::decode<std::unique_ptr<WebCore::IDBDatabaseInfo>>(&v220, (IPC::Decoder *)v2);
  unint64_t v31 = v2[1];
  uint64_t v32 = *v2;
  unint64_t v33 = v2[2] - *v2;
  if (v31 <= v33)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v51 = v2[3];
    if (v51)
    {
      if (v31)
      {
        (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
        uint64_t v50 = *v2;
        uint64_t v49 = v2[1];
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v50 = 0;
      }
    }
    goto LABEL_44;
  }
  uint64_t v34 = (unsigned __int8 *)(v32 + v33);
  v2[2] = (uint64_t)(v34 + 1);
  if (!v32)
  {
    uint64_t v49 = v31;
    uint64_t v50 = 0;
LABEL_44:
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v52 = v2[3];
    if (v52)
    {
      if (v49)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 16))(v52, v50, v49);
        uint64_t v32 = *v2;
        unint64_t v31 = v2[1];
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_45;
  }
  unsigned int v35 = *v34;
  if (v35 >= 2)
  {
LABEL_45:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v53 = v2[3];
    if (v53 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v32);
    }
    LOBYTE(v218) = 0;
    char v219 = 0;
    goto LABEL_29;
  }
  if (!v35)
  {
    char v218 = 0;
    char v219 = 1;
    goto LABEL_30;
  }
  IPC::Decoder::decode<WebCore::IDBTransactionInfo>(v2, (uint64_t)v227);
  if ((_BYTE)v230)
  {
    uint64_t v36 = WTF::fastMalloc((WTF *)0x38);
    long long v37 = *(_OWORD *)&v227[16];
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v227;
    *(_OWORD *)(v36 + 16) = v37;
    *(void *)(v36 + 32) = 0;
    *(void *)(v36 + 40) = 0;
    uint64_t v38 = v228;
    uint64_t v228 = 0;
    *(void *)(v36 + 32) = v38;
    LODWORD(v38) = v229;
    LODWORD(v229) = 0;
    *(_DWORD *)(v36 + 40) = v38;
    LODWORD(v38) = DWORD1(v229);
    DWORD1(v229) = 0;
    *(_DWORD *)(v36 + 44) = v38;
    uint64_t v39 = *((void *)&v229 + 1);
    *((void *)&v229 + 1) = 0;
    *(void *)(v36 + 48) = v39;
    char v218 = (uint64_t *)v36;
    char v219 = 1;
    std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227);
    goto LABEL_30;
  }
  LOBYTE(v218) = 0;
  char v219 = 0;
  std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227);
LABEL_29:
  uint64_t v40 = *v2;
  uint64_t v41 = v2[1];
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v42 = v2[3];
  if (v42 && v41) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
  }
LABEL_30:
  unint64_t v43 = v2[1];
  uint64_t v44 = *v2;
  unint64_t v45 = v2[2] - *v2;
  if (v43 <= v45)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v56 = v2[3];
    if (v56)
    {
      if (v43)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        uint64_t v55 = *v2;
        uint64_t v54 = v2[1];
      }
      else
      {
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
    }
    goto LABEL_48;
  }
  BOOL v46 = (unsigned __int8 *)(v44 + v45);
  v2[2] = (uint64_t)(v46 + 1);
  if (!v44)
  {
    uint64_t v54 = v43;
    uint64_t v55 = 0;
LABEL_48:
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v57 = v2[3];
    if (v57)
    {
      if (v54)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55, v54);
        uint64_t v44 = *v2;
        unint64_t v43 = v2[1];
      }
      else
      {
        unint64_t v43 = 0;
        uint64_t v44 = 0;
      }
    }
    goto LABEL_49;
  }
  unsigned int v47 = *v46;
  if (v47 >= 2)
  {
LABEL_49:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v58 = v2[3];
    if (v58 && v43) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v44);
    }
    goto LABEL_50;
  }
  if (!v47)
  {
    char v216 = 0;
    char v217 = 1;
    goto LABEL_51;
  }
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, v227);
  if ((_BYTE)v228)
  {
    char v48 = (unsigned int *)WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)char v48 = v227[0];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v48 + 2), (uint64_t)&v227[8]);
    *(void *)&long long v234 = 0;
    char v216 = v48;
    char v217 = 1;
    std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100]((unsigned int **)&v234, 0);
    if ((_BYTE)v228 && *(_DWORD *)&v227[24] != -1) {
      ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[*(unsigned int *)&v227[24]])(&v234, &v227[8]);
    }
    goto LABEL_51;
  }
LABEL_50:
  LOBYTE(v216) = 0;
  char v217 = 0;
  uint64_t v59 = *v2;
  uint64_t v60 = v2[1];
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v61 = v2[3];
  if (v61 && v60) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 16))(v61, v59);
  }
LABEL_51:
  unint64_t v62 = v2[1];
  uint64_t v63 = *v2;
  unint64_t v64 = v2[2] - *v2;
  if (v62 <= v64)
  {
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v127 = v2[3];
    if (v127)
    {
      if (v62)
      {
        (*(void (**)(uint64_t))(*(void *)v127 + 16))(v127);
        uint64_t v126 = *v2;
        uint64_t v125 = v2[1];
      }
      else
      {
        uint64_t v125 = 0;
        uint64_t v126 = 0;
      }
    }
    goto LABEL_135;
  }
  unint64_t v65 = (unsigned __int8 *)(v63 + v64);
  v2[2] = (uint64_t)(v65 + 1);
  if (!v63)
  {
    uint64_t v125 = v62;
    uint64_t v126 = 0;
LABEL_135:
    unint64_t v62 = 0;
    uint64_t v63 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v128 = v2[3];
    if (v128)
    {
      if (v125)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v128 + 16))(v128, v126, v125);
        uint64_t v63 = *v2;
        unint64_t v62 = v2[1];
      }
      else
      {
        unint64_t v62 = 0;
        uint64_t v63 = 0;
      }
    }
    goto LABEL_136;
  }
  unsigned int v66 = *v65;
  if (v66 >= 2)
  {
LABEL_136:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v129 = v2[3];
    if (v129 && v62) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v129 + 16))(v129, v63);
    }
    LOBYTE(v214) = 0;
    char v215 = 0;
    goto LABEL_148;
  }
  if (!v66)
  {
    uint64_t v214 = 0;
    char v215 = 1;
    goto LABEL_111;
  }
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, &v271);
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, &v266);
  IPC::Decoder::decode<WebCore::IDBValue>((IPC::Decoder *)v2, (uint64_t)&v261);
  IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(&v256, (IPC::Decoder *)v2);
  unint64_t v67 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v68)
  {
    unint64_t v69 = v67;
    int v276 = 0;
    uint64_t v277 = 0;
    if (v67 >= 0x2762)
    {
      do
      {
        IPC::Decoder::decode<WebCore::IDBCursorRecord>((uint64_t)&v234, v2);
        if (!v248[0])
        {
          LOBYTE(v253) = 0;
          char v255 = 0;
          std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v146);
          goto LABEL_71;
        }
        uint64_t v147 = v17;
        unsigned int v148 = HIDWORD(v277);
        if (HIDWORD(v277) == v277)
        {
          WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBCursorRecord>((uint64_t)&v276, (unint64_t)&v234);
        }
        else
        {
          uint64_t v150 = v276;
          uint64_t v151 = (char *)v276 + 104 * HIDWORD(v277);
          unsigned char *v151 = v234;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v151 + 8), (uint64_t)&v234 + 8);
          uint64_t v152 = (uint64_t)v150 + 104 * v148;
          *(unsigned char *)(v152 + 32) = (_BYTE)v237;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(v152 + 40, (uint64_t)v238);
          uint64_t v153 = (uint64_t)v150 + 104 * v148;
          uint64_t v154 = v241;
          uint64_t v241 = 0;
          *(void *)(v153 + 72) = 0;
          *(void *)(v153 + 80) = 0;
          *(void *)(v153 + 64) = v154;
          uint64_t v155 = v242;
          uint64_t v242 = 0;
          *(void *)(v153 + 72) = v155;
          LODWORD(v155) = v243;
          int v243 = 0;
          *(_DWORD *)(v153 + 80) = v155;
          LODWORD(v155) = v244;
          int v244 = 0;
          *(_DWORD *)(v153 + 84) = v155;
          *(void *)(v153 + 88) = 0;
          *(void *)(v153 + 96) = 0;
          uint64_t v156 = v245;
          uint64_t v245 = 0;
          *(void *)(v153 + 88) = v156;
          LODWORD(v156) = v246;
          int v246 = 0;
          *(_DWORD *)(v153 + 96) = v156;
          LODWORD(v156) = v247;
          int v247 = 0;
          *(_DWORD *)(v153 + 100) = v156;
          ++HIDWORD(v277);
        }
        std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v149);
        --v69;
        uint64_t v17 = v147;
      }
      while (v69);
      unsigned int v157 = HIDWORD(v277);
      char v158 = v276;
      if (v277 > HIDWORD(v277))
      {
        char v159 = v276;
        if (HIDWORD(v277))
        {
          if (HIDWORD(v277) >= 0x2762763) {
            goto LABEL_343;
          }
          uint64_t v160 = WTF::fastMalloc((WTF *)(104 * HIDWORD(v277)));
          LODWORD(v277) = 104 * v157 / 0x68;
          int v276 = (WTF *)v160;
          char v159 = v158;
          if ((WTF *)v160 != v158)
          {
            WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v158, (uint64_t)v158 + 104 * v157, v160);
            char v159 = v276;
          }
        }
        if (v158)
        {
          if (v159 == v158)
          {
            int v276 = 0;
            LODWORD(v277) = 0;
          }
          WTF::fastFree(v158, v68);
          char v158 = v276;
        }
        else
        {
          char v158 = v159;
        }
      }
      int v276 = 0;
      char v253 = v158;
      int v209 = v277;
      int v83 = HIDWORD(v277);
      LODWORD(v277) = 0;
      LODWORD(v254) = v209;
      LOBYTE(v17) = v147;
    }
    else
    {
      if (v67)
      {
        char v210 = v17;
        unsigned int v70 = 104 * v67;
        uint64_t v71 = WTF::fastMalloc((WTF *)(104 * v67));
        LODWORD(v277) = v70 / 0x68;
        int v276 = (WTF *)v71;
        while (1)
        {
          IPC::Decoder::decode<WebCore::IDBCursorRecord>((uint64_t)&v234, v2);
          if (!v248[0]) {
            break;
          }
          unsigned int v73 = HIDWORD(v277);
          if (HIDWORD(v277) == v277)
          {
            WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBCursorRecord>((uint64_t)&v276, (unint64_t)&v234);
          }
          else
          {
            long long v75 = v276;
            uint64_t v76 = (char *)v276 + 104 * HIDWORD(v277);
            *uint64_t v76 = v234;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v76 + 8), (uint64_t)&v234 + 8);
            uint64_t v77 = (uint64_t)v75 + 104 * v73;
            *(unsigned char *)(v77 + 32) = (_BYTE)v237;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(v77 + 40, (uint64_t)v238);
            uint64_t v78 = (uint64_t)v75 + 104 * v73;
            uint64_t v79 = v241;
            uint64_t v241 = 0;
            *(void *)(v78 + 72) = 0;
            *(void *)(v78 + 80) = 0;
            *(void *)(v78 + 64) = v79;
            uint64_t v80 = v242;
            uint64_t v242 = 0;
            *(void *)(v78 + 72) = v80;
            LODWORD(v80) = v243;
            int v243 = 0;
            *(_DWORD *)(v78 + 80) = v80;
            LODWORD(v80) = v244;
            int v244 = 0;
            *(_DWORD *)(v78 + 84) = v80;
            *(void *)(v78 + 88) = 0;
            *(void *)(v78 + 96) = 0;
            uint64_t v81 = v245;
            uint64_t v245 = 0;
            *(void *)(v78 + 88) = v81;
            LODWORD(v81) = v246;
            int v246 = 0;
            *(_DWORD *)(v78 + 96) = v81;
            LODWORD(v81) = v247;
            int v247 = 0;
            *(_DWORD *)(v78 + 100) = v81;
            ++HIDWORD(v277);
          }
          std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v74);
          if (!--v69)
          {
            uint64_t v82 = v276;
            int v84 = v277;
            int v83 = HIDWORD(v277);
            LOBYTE(v17) = v210;
            goto LABEL_68;
          }
        }
        LOBYTE(v253) = 0;
        char v255 = 0;
        std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v72);
        LOBYTE(v17) = v210;
LABEL_71:
        WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v276, v86);
        goto LABEL_72;
      }
      int v83 = 0;
      int v84 = 0;
      uint64_t v82 = 0;
LABEL_68:
      int v276 = 0;
      char v253 = v82;
      LODWORD(v277) = 0;
      LODWORD(v254) = v84;
    }
    HIDWORD(v277) = 0;
    HIDWORD(v254) = v83;
    char v255 = 1;
    char v85 = (WTF::StringImpl *)WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v276, v68);
    goto LABEL_73;
  }
  LOBYTE(v253) = 0;
  char v255 = 0;
LABEL_72:
  uint64_t v87 = *v2;
  uint64_t v88 = v2[1];
  *unint64_t v2 = 0;
  v2[1] = 0;
  char v85 = (WTF::StringImpl *)v2[3];
  if (v85 && v88) {
    char v85 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)v85 + 16))(v85, v87);
  }
LABEL_73:
  unint64_t v89 = v2[1];
  uint64_t v90 = (char *)*v2;
  unint64_t v91 = v2[2] - *v2;
  if (v89 <= v91)
  {
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v137 = v2[3];
    if (v137)
    {
      if (v89)
      {
        (*(void (**)(uint64_t))(*(void *)v137 + 16))(v137);
        uint64_t v136 = *v2;
        uint64_t v135 = v2[1];
      }
      else
      {
        uint64_t v135 = 0;
        uint64_t v136 = 0;
      }
    }
    goto LABEL_143;
  }
  uint64_t v92 = a2;
  char v93 = &v90[v91];
  v2[2] = (uint64_t)(v93 + 1);
  if (!v90)
  {
    uint64_t v135 = v89;
    uint64_t v136 = 0;
LABEL_143:
    uint64_t v92 = a2;
    unint64_t v89 = 0;
    uint64_t v90 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v138 = v2[3];
    if (v138)
    {
      if (v135)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v138 + 16))(v138, v136, v135);
        uint64_t v90 = (char *)*v2;
        unint64_t v89 = v2[1];
      }
      else
      {
        unint64_t v89 = 0;
        uint64_t v90 = 0;
      }
    }
    goto LABEL_144;
  }
  char v94 = v17;
  a2 = v9;
  unsigned int v95 = *v93;
  if (v95 <= 1)
  {
    int v96 = 0;
    LOBYTE(v17) = v95 != 0;
    goto LABEL_77;
  }
LABEL_144:
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v139 = v2[3];
  if (v139)
  {
    if (v89)
    {
      char v94 = v17;
      a2 = v9;
      char v85 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v139 + 16))(v139, v90);
      if (*v2)
      {
        LOBYTE(v17) = 0;
        int v96 = 1;
LABEL_77:
        if (!v275 || !v270 || !v265 || !v260 || !v255 || v96) {
          goto LABEL_248;
        }
        long long v97 = v261;
        long long v261 = 0uLL;
        long long v234 = v97;
        *(void *)&long long v97 = v262;
        uint64_t v262 = 0;
        uint64_t v235 = v97;
        int v98 = v263;
        __int16 v263 = 0;
        uint64_t v236 = v98;
        *(void *)&long long v97 = v264;
        uint64_t v264 = 0;
        v238[0] = v271;
        uint64_t v237 = (WTF::StringImpl *)v97;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v239, (uint64_t)&v272);
        LOBYTE(v242) = (_BYTE)v266;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v243, (uint64_t)&v267);
        v248[0] = 0;
        char v250 = 0;
        if (v259)
        {
          int v249 = -1;
          int v99 = v258;
          if (v258 != -1)
          {
            ((void (*)(WTF **, unsigned char *, uint64_t **))off_1EE9B44B8[v258])(&v276, v248, &v256);
            int v249 = v99;
          }
          char v250 = 1;
        }
        v251[0] = v253;
        uint64_t v100 = v254;
        char v253 = 0;
        uint64_t v254 = 0;
        v251[1] = v100;
        char v252 = v17;
        WebCore::IDBGetResult::IDBGetResult((uint64_t)v227, (uint64_t *)&v234);
        char v233 = 1;
        WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v251, v101);
        LODWORD(v9) = a2;
        a2 = v92;
        LOBYTE(v17) = v94;
        if (v250)
        {
          if (v249 != -1) {
            ((void (*)(WTF **, unsigned char *))off_1EE9B44A8[v249])(&v276, v248);
          }
          int v249 = -1;
        }
        if (v246 != -1) {
          ((void (*)(WTF **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v246])(&v276, &v243);
        }
        int v246 = -1;
        if (v241 != -1) {
          ((void (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v241])(&v276, &v239);
        }
        LODWORD(v241) = -1;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v236, v102);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v234 + 8, v103);
        uint64_t v104 = v234;
        *(void *)&long long v234 = 0;
        if (v104) {
          WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v104, v90);
        }
        goto LABEL_97;
      }
    }
  }
  v227[0] = 0;
  char v233 = 0;
  a2 = v92;
LABEL_97:
  if (v255) {
    WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v253, v90);
  }
  if (v260 && v259 && v258 != -1) {
    ((void (*)(long long *, uint64_t **))off_1EE9B44A8[v258])(&v234, &v256);
  }
  std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v261, v90);
  if (v270 && v269 != -1) {
    ((void (*)(long long *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v269])(&v234, &v267);
  }
  if (v275 && v274 != -1) {
    ((void (*)(long long *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v274])(&v234, &v272);
  }
  if (v233
    || (v140 = (void *)*v2, v141 = v2[1], *unint64_t v2 = 0, v2[1] = 0, (v142 = v2[3]) != 0)
    && v141
    && ((*(void (**)(uint64_t, void *))(*(void *)v142 + 16))(v142, v140), v233))
  {
    uint64_t v105 = WebCore::IDBGetResult::operator new((WebCore::IDBGetResult *)0xA0);
    WebCore::IDBGetResult::IDBGetResult(v105, (uint64_t *)v227);
    uint64_t v214 = (uint64_t *)v105;
    char v215 = 1;
    std::__optional_destruct_base<WebCore::IDBGetResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v106);
    goto LABEL_111;
  }
  LOBYTE(v214) = 0;
  char v215 = 0;
  std::__optional_destruct_base<WebCore::IDBGetResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v140);
LABEL_148:
  uint64_t v143 = *v2;
  uint64_t v144 = v2[1];
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v145 = v2[3];
  if (v145 && v144) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v145 + 16))(v145, v143);
  }
LABEL_111:
  unint64_t v107 = v2[1];
  uint64_t v108 = *v2;
  unint64_t v109 = v2[2] - *v2;
  if (v107 <= v109)
  {
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v132 = v2[3];
    if (v132)
    {
      if (v107)
      {
        (*(void (**)(uint64_t))(*(void *)v132 + 16))(v132);
        uint64_t v131 = *v2;
        uint64_t v130 = v2[1];
      }
      else
      {
        uint64_t v130 = 0;
        uint64_t v131 = 0;
      }
    }
    goto LABEL_139;
  }
  int v110 = (unsigned __int8 *)(v108 + v109);
  v2[2] = (uint64_t)(v110 + 1);
  if (!v108)
  {
    uint64_t v130 = v107;
    uint64_t v131 = 0;
LABEL_139:
    unint64_t v107 = 0;
    uint64_t v108 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v133 = v2[3];
    if (v133)
    {
      if (v130)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v133 + 16))(v133, v131, v130);
        uint64_t v108 = *v2;
        unint64_t v107 = v2[1];
      }
      else
      {
        unint64_t v107 = 0;
        uint64_t v108 = 0;
      }
    }
    goto LABEL_140;
  }
  unsigned int v111 = *v110;
  if (v111 >= 2)
  {
LABEL_140:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v134 = v2[3];
    if (v134 && v107) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v134 + 16))(v134, v108);
    }
    LOBYTE(v256) = 0;
    char v257 = 0;
    goto LABEL_257;
  }
  if (!v111)
  {
    unint64_t v256 = 0;
    char v257 = 1;
    goto LABEL_201;
  }
  LOWORD(v92) = IPC::Decoder::decode<WebCore::UserStyleLevel>(v2);
  IPC::Decoder::decode<WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v271, v2);
  unint64_t v112 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v113)
  {
    unint64_t v114 = v112;
    long long v261 = 0uLL;
    if (v112 < 0x6666)
    {
      if (v112)
      {
        unsigned int v115 = 40 * v112;
        uint64_t v116 = WTF::fastMalloc((WTF *)(40 * v112));
        DWORD2(v261) = v115 / 0x28;
        *(void *)&long long v261 = v116;
        do
        {
          IPC::Decoder::decode<WebCore::IDBValue>((IPC::Decoder *)v2, (uint64_t)&v234);
          if (!v238[0]) {
            goto LABEL_179;
          }
          if (HIDWORD(v261) == DWORD2(v261))
          {
            WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBValue>((uint64_t)&v261, (unint64_t)&v234);
          }
          else
          {
            uint64_t v118 = v261 + 40 * HIDWORD(v261);
            uint64_t v119 = v234;
            *(void *)&long long v234 = 0;
            *(void *)(v118 + 8) = 0;
            *(void *)(v118 + 16) = 0;
            *(void *)uint64_t v118 = v119;
            uint64_t v120 = *((void *)&v234 + 1);
            *((void *)&v234 + 1) = 0;
            *(void *)(v118 + 8) = v120;
            LODWORD(v120) = v235;
            LODWORD(v235) = 0;
            *(_DWORD *)(v118 + 16) = v120;
            LODWORD(v120) = HIDWORD(v235);
            HIDWORD(v235) = 0;
            *(_DWORD *)(v118 + 20) = v120;
            *(void *)(v118 + 24) = 0;
            *(void *)(v118 + 32) = 0;
            long long v121 = v236;
            uint64_t v236 = 0;
            *(void *)(v118 + 24) = v121;
            LODWORD(v121) = v237;
            LODWORD(v237) = 0;
            *(_DWORD *)(v118 + 32) = v121;
            LODWORD(v121) = HIDWORD(v237);
            HIDWORD(v237) = 0;
            *(_DWORD *)(v118 + 36) = v121;
            ++HIDWORD(v261);
          }
          std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v117);
          --v114;
        }
        while (v114);
        long long v122 = (WTF *)v261;
        unsigned int v124 = DWORD2(v261);
        unsigned int v123 = HIDWORD(v261);
      }
      else
      {
        unsigned int v123 = 0;
        unsigned int v124 = 0;
        long long v122 = 0;
      }
      *(void *)&long long v261 = 0;
      char v266 = v122;
      goto LABEL_129;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::IDBValue>((IPC::Decoder *)v2, (uint64_t)&v234);
      if (!v238[0]) {
        break;
      }
      if (HIDWORD(v261) == DWORD2(v261))
      {
        WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBValue>((uint64_t)&v261, (unint64_t)&v234);
      }
      else
      {
        uint64_t v161 = v261 + 40 * HIDWORD(v261);
        uint64_t v162 = v234;
        *(void *)&long long v234 = 0;
        *(void *)(v161 + 8) = 0;
        *(void *)(v161 + 16) = 0;
        *(void *)uint64_t v161 = v162;
        uint64_t v163 = *((void *)&v234 + 1);
        *((void *)&v234 + 1) = 0;
        *(void *)(v161 + 8) = v163;
        LODWORD(v163) = v235;
        LODWORD(v235) = 0;
        *(_DWORD *)(v161 + 16) = v163;
        LODWORD(v163) = HIDWORD(v235);
        HIDWORD(v235) = 0;
        *(_DWORD *)(v161 + 20) = v163;
        *(void *)(v161 + 24) = 0;
        *(void *)(v161 + 32) = 0;
        char v164 = v236;
        uint64_t v236 = 0;
        *(void *)(v161 + 24) = v164;
        LODWORD(v164) = v237;
        LODWORD(v237) = 0;
        *(_DWORD *)(v161 + 32) = v164;
        LODWORD(v164) = HIDWORD(v237);
        HIDWORD(v237) = 0;
        *(_DWORD *)(v161 + 36) = v164;
        ++HIDWORD(v261);
      }
      std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v117);
      if (!--v114)
      {
        unsigned int v165 = HIDWORD(v261);
        char v166 = (WTF *)v261;
        if (DWORD2(v261) <= HIDWORD(v261)) {
          goto LABEL_264;
        }
        uint64_t v167 = (WTF *)v261;
        if (!HIDWORD(v261)) {
          goto LABEL_175;
        }
        if (HIDWORD(v261) < 0x6666667)
        {
          unsigned int v168 = 40 * HIDWORD(v261);
          uint64_t v169 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v261)));
          DWORD2(v261) = v168 / 0x28;
          *(void *)&long long v261 = v169;
          uint64_t v167 = v166;
          if ((WTF *)v169 != v166)
          {
            WTF::VectorMover<false,WebCore::IDBValue>::move((uint64_t)v166, (char *)v166 + 40 * v165, v169);
            uint64_t v167 = (WTF *)v261;
          }
LABEL_175:
          if (v166)
          {
            if (v167 == v166)
            {
              *(void *)&long long v261 = 0;
              DWORD2(v261) = 0;
            }
            WTF::fastFree(v166, v113);
            char v166 = (WTF *)v261;
          }
          else
          {
            char v166 = v167;
          }
LABEL_264:
          *(void *)&long long v261 = 0;
          char v266 = v166;
          unsigned int v124 = DWORD2(v261);
          unsigned int v123 = HIDWORD(v261);
LABEL_129:
          *((void *)&v261 + 1) = 0;
          unint64_t v267 = __PAIR64__(v123, v124);
          char v268 = 1;
          WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v113);
          goto LABEL_181;
        }
LABEL_343:
        __break(0xC471u);
        JUMPOUT(0x198847120);
      }
    }
LABEL_179:
    LOBYTE(v266) = 0;
    char v268 = 0;
    std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v117);
    WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v170);
  }
  else
  {
    LOBYTE(v266) = 0;
    char v268 = 0;
  }
  uint64_t v90 = (char *)*v2;
  unint64_t v89 = v2[1];
  *unint64_t v2 = 0;
  v2[1] = 0;
  char v85 = (WTF::StringImpl *)v2[3];
  if (v85) {
    goto LABEL_249;
  }
  while (1)
  {
LABEL_181:
    char v85 = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(&v261, (IPC::Decoder *)v2);
    if (*v2)
    {
      if ((unsigned __int16)v92 <= 0xFFu || !v273 || !v268 || !(_BYTE)v264) {
        goto LABEL_248;
      }
      LOBYTE(v234) = v92 != 0;
      uint64_t v171 = v271;
      uint64_t v271 = 0;
      *((void *)&v234 + 1) = v171;
      uint64_t v172 = v272;
      uint64_t v272 = 0;
      uint64_t v235 = v172;
      uint64_t v173 = v266;
      char v266 = 0;
      uint64_t v236 = v173;
      unint64_t v174 = v267;
      unint64_t v267 = 0;
      uint64_t v237 = (WTF::StringImpl *)v174;
      std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](v238, (uint64_t)&v261);
      v227[0] = v234;
      uint64_t v175 = *((void *)&v234 + 1);
      *((void *)&v234 + 1) = 0;
      *(void *)&v227[8] = v175;
      uint64_t v176 = v235;
      uint64_t v235 = 0;
      *(void *)&v227[16] = v176;
      char v177 = v236;
      uint64_t v236 = 0;
      *(void *)&v227[24] = v177;
      uint64_t v178 = v237;
      uint64_t v237 = 0;
      uint64_t v228 = v178;
      std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](&v229, (uint64_t)v238);
      LOBYTE(v231) = 1;
      if ((_BYTE)v241)
      {
        if (v240 != -1) {
          ((void (*)(WTF **, char *))off_1EE9B44A8[v240])(&v253, v238);
        }
        int v240 = -1;
      }
      WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v236, v179);
      WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v234 + 8, v180);
    }
    else
    {
      v227[0] = 0;
      LOBYTE(v231) = 0;
    }
    if ((_BYTE)v264 && (_BYTE)v263 && v262 != -1) {
      ((void (*)(long long *, long long *))off_1EE9B44A8[v262])(&v234, &v261);
    }
    if (v268) {
      WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v266, v90);
    }
    if (v273) {
      WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v271, v90);
    }
    if ((_BYTE)v231
      || (v203 = (void *)*v2, v204 = v2[1], *unint64_t v2 = 0, v2[1] = 0, (v205 = v2[3]) != 0)
      && v204
      && ((*(void (**)(uint64_t, void *))(*(void *)v205 + 16))(v205, v203), (_BYTE)v231))
    {
      uint64_t v181 = WebCore::IDBGetAllResult::operator new((WebCore::IDBGetAllResult *)0x48);
      *(unsigned char *)uint64_t v181 = v227[0];
      *(void *)(v181 + 8) = 0;
      *(void *)(v181 + 16) = 0;
      uint64_t v182 = *(void *)&v227[8];
      *(void *)&v227[8] = 0;
      *(void *)(v181 + 8) = v182;
      LODWORD(v182) = *(_DWORD *)&v227[16];
      *(_DWORD *)&v227[16] = 0;
      *(_DWORD *)(v181 + 16) = v182;
      LODWORD(v182) = *(_DWORD *)&v227[20];
      *(_DWORD *)&v227[20] = 0;
      *(_DWORD *)(v181 + 20) = v182;
      *(void *)(v181 + 24) = 0;
      *(void *)(v181 + 32) = 0;
      uint64_t v183 = *(void *)&v227[24];
      *(void *)&v227[24] = 0;
      *(void *)(v181 + 24) = v183;
      LODWORD(v183) = v228;
      LODWORD(v228) = 0;
      *(_DWORD *)(v181 + 32) = v183;
      LODWORD(v183) = HIDWORD(v228);
      HIDWORD(v228) = 0;
      *(_DWORD *)(v181 + 36) = v183;
      std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v181 + 40), (uint64_t)&v229);
      unint64_t v256 = (uint64_t *)v181;
      char v257 = 1;
      std::__optional_destruct_base<WebCore::IDBGetAllResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v184);
    }
    else
    {
      LOBYTE(v256) = 0;
      char v257 = 0;
      std::__optional_destruct_base<WebCore::IDBGetAllResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v203);
LABEL_257:
      uint64_t v206 = *v2;
      uint64_t v207 = v2[1];
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v208 = v2[3];
      if (v208 && v207) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v208 + 16))(v208, v206);
      }
    }
LABEL_201:
    unint64_t v185 = v2[1];
    uint64_t v186 = *v2;
    unint64_t v187 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v185 < v187 || v185 - v187 <= 7)
    {
      uint64_t v200 = 0;
      uint64_t v198 = 0;
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v201 = v2[3];
      if (v201)
      {
        if (v185)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v201 + 16))(v201, v186, v185);
          uint64_t v198 = (uint64_t *)*v2;
          uint64_t v200 = v2[1];
        }
        else
        {
          uint64_t v200 = 0;
          uint64_t v198 = 0;
        }
      }
    }
    else
    {
      char v188 = (uint64_t **)(v186 + v187);
      v2[2] = (uint64_t)(v188 + 1);
      if (v186)
      {
        LODWORD(v92) = 0;
        unint64_t v2 = *v188;
        goto LABEL_205;
      }
      uint64_t v200 = v185;
      uint64_t v198 = 0;
    }
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v202 = v2[3];
    if (!v202) {
      break;
    }
    if (!v200) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v202 + 16))(v202, v198);
    if (!*v2) {
      break;
    }
    unint64_t v2 = 0;
    LODWORD(v92) = 1;
LABEL_205:
    char v85 = (WTF::StringImpl *)WebCore::IDBResultData::IDBResultData((WebCore::IDBResultData *)v227);
    if (v9 > 0xFF)
    {
      v227[0] = v9;
      if (v226)
      {
        *(_OWORD *)&v227[8] = v225;
        if (v224)
        {
          *(_WORD *)&v227[24] = v222;
          long long v189 = v223;
          char v223 = 0;
          char v85 = v228;
          uint64_t v228 = v189;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2) {
              char v85 = (WTF::StringImpl *)WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v90);
            }
            else {
              *(_DWORD *)v85 -= 2;
            }
          }
          if (!v213)
          {
            *(void *)&long long v229 = v212 | v17;
            BYTE8(v229) = v211;
            if (v221)
            {
              char v190 = v220;
              long long v220 = 0;
              uint64_t v90 = (char *)v230;
              *(void *)&long long v230 = v190;
              if (v90) {
                std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v230, (bmalloc::api *)v90);
              }
              if (v219)
              {
                char v191 = v218;
                char v218 = 0;
                uint64_t v90 = (char *)*((void *)&v230 + 1);
                *((void *)&v230 + 1) = v191;
                if (v90) {
                  std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)&v230 + 8, v90);
                }
                if (v217)
                {
                  long long v192 = v216;
                  char v216 = 0;
                  char v85 = (WTF::StringImpl *)std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100]((unsigned int **)&v231, v192);
                  if (v215)
                  {
                    char v193 = v214;
                    uint64_t v214 = 0;
                    uint64_t v90 = (char *)*((void *)&v231 + 1);
                    *((void *)&v231 + 1) = v193;
                    if (v90) {
                      std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)&v231 + 8, (uint64_t *)v90);
                    }
                    if (v257)
                    {
                      char v194 = v256;
                      unint64_t v256 = 0;
                      uint64_t v90 = (char *)v232[0];
                      v232[0] = v194;
                      if (v90) {
                        char v85 = (WTF::StringImpl *)std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((uint64_t)v232, (uint64_t)v90);
                      }
                      if (!v92)
                      {
                        *(void *)(a2 + 16) = *(void *)&v227[16];
                        *(_WORD *)(a2 + 24) = *(_WORD *)&v227[24];
                        uint64_t v195 = v232[0];
                        *(void *)(a2 + 32) = v228;
                        v232[0] = 0;
                        v232[1] = v2;
                        *(_OWORD *)a2 = *(_OWORD *)v227;
                        *(_OWORD *)(a2 + 40) = v229;
                        long long v196 = v230;
                        long long v230 = 0u;
                        *(_OWORD *)(a2 + 56) = v196;
                        long long v197 = v231;
                        long long v231 = 0u;
                        *(_OWORD *)(a2 + 72) = v197;
                        uint64_t v228 = 0;
                        *(void *)(a2 + 88) = v195;
                        *(void *)(a2 + 96) = v2;
                        *(unsigned char *)(a2 + 104) = 1;
                        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v227);
                        goto LABEL_228;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_248:
    __break(1u);
LABEL_249:
    if (v89) {
      (*(void (**)(WTF::StringImpl *, char *))(*(void *)v85 + 16))(v85, v90);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 104) = 0;
LABEL_228:
  if (v257)
  {
    uint64_t v198 = v256;
    unint64_t v256 = 0;
    if (v198) {
      std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((uint64_t)&v256, (uint64_t)v198);
    }
  }
  if (v215)
  {
    uint64_t v198 = v214;
    uint64_t v214 = 0;
    if (v198) {
      std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)&v214, v198);
    }
  }
  if (v217) {
    std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100](&v216, 0);
  }
  if (v219)
  {
    uint64_t v198 = v218;
    char v218 = 0;
    if (v198) {
      std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)&v218, v198);
    }
  }
  if (v221)
  {
    uint64_t v198 = (uint64_t *)v220;
    long long v220 = 0;
    if (v198) {
      std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v220, (bmalloc::api *)v198);
    }
  }
  if (v224)
  {
    uint64_t v199 = v223;
    char v223 = 0;
    if (v199)
    {
      if (*(_DWORD *)v199 == 2) {
        WTF::StringImpl::destroy(v199, (WTF::StringImpl *)v198);
      }
      else {
        *(_DWORD *)v199 -= 2;
      }
    }
  }
}

void sub_19884712C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, unsigned int *a16, __int16 a17, uint64_t a18, char a19, bmalloc::api *a20,char a21,uint64_t a22,WTF::StringImpl *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::__optional_destruct_base<WebCore::IDBGetAllResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, a2);
  if (a15)
  {
    uint64_t v29 = (uint64_t *)a14;
    a14 = 0;
    if (v29) {
      std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)&a14, v29);
    }
  }
  if ((_BYTE)a17) {
    std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100](&a16, 0);
  }
  if (a19)
  {
    uint64_t v29 = (uint64_t *)a18;
    a18 = 0;
    if (v29) {
      std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)&a18, v29);
    }
  }
  if (a21)
  {
    uint64_t v29 = (uint64_t *)a20;
    a20 = 0;
    if (v29) {
      std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&a20, (bmalloc::api *)v29);
    }
  }
  if (a24)
  {
    uint64_t v30 = a23;
    a23 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::IDBError>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IDBError,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBKeyData,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    v5[0] = 0;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v8);
    *a2 = 0;
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v6);
    a2[32] = 1;
    if (v7 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v7])(&v11, v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  if (v10)
  {
    if (v9 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v9])(v5, v8);
    }
  }
  return result;
}

void sub_198847798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, int a17, int a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a13])(v20 - 17, v19);
  }
  if (a19)
  {
    if (a17 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a17])(&a10, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198847874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LinearTimingFunction::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9B44E8;
  uint64_t result = WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 16, a1);
  *a2 = v4;
  return result;
}

void sub_19884791C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::CubicBezierTimingFunction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a2 + 48);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 40));
}

void *IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 32));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 80));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 96));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 104));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 112));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 120));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 128));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 129));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 132));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 136));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 140));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 144));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 152));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 160));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 168));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 176));
  uint64_t v4 = *(void *)(a2 + 184);
  char v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7 || (*v5 = v4, v7 = *(void *)(a2 + 192), uint64_t result = (void *)IPC::Encoder::grow(a1, 8uLL, 8), v9 <= 7))
  {
    __break(0xC471u);
    JUMPOUT(0x198847B54);
  }
  *uint64_t result = v7;
  return result;
}

void IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v212);
  uint64_t v4 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  char v6 = v5;
  unint64_t v7 = *((void *)a1 + 1);
  unsigned int v8 = *(WTF::StringImpl **)a1;
  unint64_t v9 = *((void *)a1 + 2) - *(void *)a1;
  if (v7 <= v9)
  {
    unint64_t v90 = 0;
    unint64_t v91 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v92 = *((void *)a1 + 3);
    if (v92)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v92 + 16))(v92);
        unint64_t v91 = *(WTF::StringImpl **)a1;
        unint64_t v90 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v90 = 0;
        unint64_t v91 = 0;
      }
    }
    goto LABEL_142;
  }
  char v10 = (unsigned __int8 *)v8 + v9;
  *((void *)a1 + 2) = v10 + 1;
  if (!v8)
  {
    unint64_t v90 = v7;
    unint64_t v91 = 0;
LABEL_142:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v93 = *((void *)a1 + 3);
    if (v93 && v90)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v93 + 16))(v93, v91, v90);
      unsigned int v11 = 0;
      unsigned int v8 = *(WTF::StringImpl **)a1;
      unint64_t v7 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v7 = 0;
      unsigned int v8 = 0;
      unsigned int v11 = 0;
    }
    goto LABEL_144;
  }
  unsigned int v11 = *v10;
  if (v11 < 2)
  {
    uint64_t v12 = 0;
    char v13 = 1;
    goto LABEL_5;
  }
LABEL_144:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v94 = *((void *)a1 + 3);
  if (v94 && v7) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v94 + 16))(v94, v8);
  }
  char v13 = 0;
  uint64_t v12 = 1;
LABEL_5:
  if (v11) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  uint64_t v15 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  uint64_t v17 = v16;
  unint64_t v18 = *((void *)a1 + 1);
  uint64_t v19 = *(WTF::StringImpl **)a1;
  unint64_t v20 = *((void *)a1 + 2) - *(void *)a1;
  uint64_t v173 = v17;
  if (v18 <= v20)
  {
    unint64_t v95 = 0;
    int v96 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v97 = *((void *)a1 + 3);
    if (v97)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
        int v96 = *(WTF::StringImpl **)a1;
        unint64_t v95 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v95 = 0;
        int v96 = 0;
      }
    }
    goto LABEL_147;
  }
  uint64_t v21 = (unsigned __int8 *)v19 + v20;
  *((void *)a1 + 2) = v21 + 1;
  if (!v19)
  {
    unint64_t v95 = v18;
    int v96 = 0;
LABEL_147:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v98 = *((void *)a1 + 3);
    if (v98 && v95)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v98 + 16))(v98, v96, v95);
      unsigned int v22 = 0;
      uint64_t v19 = *(WTF::StringImpl **)a1;
      unint64_t v18 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      unsigned int v22 = 0;
    }
    goto LABEL_149;
  }
  unsigned int v22 = *v21;
  if (v22 < 2)
  {
    unsigned int v171 = 0;
    char v23 = 1;
    goto LABEL_12;
  }
LABEL_149:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v99 = *((void *)a1 + 3);
  if (v99 && v18) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v99 + 16))(v99, v19);
  }
  char v23 = 0;
  unsigned int v171 = 1;
LABEL_12:
  if (v22) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v210);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v208);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v206);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v204);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v202);
  unint64_t v25 = *((void *)a1 + 1);
  uint64_t v26 = *(WTF::StringImpl **)a1;
  unint64_t v27 = *((void *)a1 + 2) - *(void *)a1;
  char v169 = v24;
  if (v25 <= v27)
  {
    unint64_t v100 = 0;
    uint64_t v101 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v102 = *((void *)a1 + 3);
    if (v102)
    {
      if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v102 + 16))(v102);
        uint64_t v101 = *(WTF::StringImpl **)a1;
        unint64_t v100 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v100 = 0;
        uint64_t v101 = 0;
      }
    }
    goto LABEL_152;
  }
  uint64_t v28 = (unsigned __int8 *)v26 + v27;
  *((void *)a1 + 2) = v28 + 1;
  if (!v26)
  {
    unint64_t v100 = v25;
    uint64_t v101 = 0;
LABEL_152:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v103 = *((void *)a1 + 3);
    if (v103 && v100)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v103 + 16))(v103, v101, v100);
      unsigned int v29 = 0;
      uint64_t v26 = *(WTF::StringImpl **)a1;
      unint64_t v25 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      unsigned int v29 = 0;
    }
    goto LABEL_154;
  }
  unsigned int v29 = *v28;
  if (v29 < 2)
  {
    unsigned int v168 = 0;
    char v30 = 1;
    goto LABEL_19;
  }
LABEL_154:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v104 = *((void *)a1 + 3);
  if (v104 && v25) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v104 + 16))(v104, v26);
  }
  char v30 = 0;
  unsigned int v168 = 1;
LABEL_19:
  if (v29) {
    char v31 = v30;
  }
  else {
    char v31 = 0;
  }
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v200);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v198);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v196);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v194);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v192);
  unint64_t v32 = *((void *)a1 + 1);
  unint64_t v33 = *(WTF::StringImpl **)a1;
  unint64_t v34 = *((void *)a1 + 2) - *(void *)a1;
  char v167 = v31;
  if (v32 <= v34)
  {
    unint64_t v105 = 0;
    int v106 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v107 = *((void *)a1 + 3);
    if (v107)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v107 + 16))(v107);
        int v106 = *(WTF::StringImpl **)a1;
        unint64_t v105 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v105 = 0;
        int v106 = 0;
      }
    }
    goto LABEL_157;
  }
  unsigned int v35 = (unsigned __int8 *)v33 + v34;
  uint64_t v36 = (uint64_t)v33 + v34 + 1;
  *((void *)a1 + 2) = v36;
  if (!v33)
  {
    unint64_t v105 = v32;
    int v106 = 0;
LABEL_157:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v108 = *((void *)a1 + 3);
    if (v108 && v105)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v108 + 16))(v108, v106, v105);
      unsigned int v37 = 0;
      unint64_t v33 = *(WTF::StringImpl **)a1;
      unint64_t v32 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      unsigned int v37 = 0;
    }
    goto LABEL_159;
  }
  unsigned int v37 = *v35;
  if (v37 < 2)
  {
    unsigned int v166 = 0;
    char v38 = 1;
    goto LABEL_26;
  }
LABEL_159:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v109 = *((void *)a1 + 3);
  if (!v109 || !v32)
  {
    unint64_t v110 = 0;
    unint64_t v33 = 0;
    char v165 = 0;
    unsigned int v166 = 1;
LABEL_161:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v111 = *((void *)a1 + 3);
    if (v111 && v110)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v111 + 16))(v111, v33, v110);
      unsigned int v41 = 0;
      unint64_t v33 = *(WTF::StringImpl **)a1;
      unint64_t v32 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      unsigned int v41 = 0;
    }
    goto LABEL_163;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v109 + 16))(v109, v33);
  char v38 = 0;
  unint64_t v33 = *(WTF::StringImpl **)a1;
  unint64_t v32 = *((void *)a1 + 1);
  unsigned int v166 = 1;
  uint64_t v36 = *((void *)a1 + 2);
LABEL_26:
  if (!v37) {
    char v38 = 0;
  }
  char v165 = v38;
  unint64_t v39 = v36 - (void)v33;
  if (v32 <= v39)
  {
    unint64_t v110 = 0;
    uint64_t v142 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v142 && v32)
    {
      (*(void (**)(uint64_t))(*(void *)v142 + 16))(v142);
      unint64_t v33 = *(WTF::StringImpl **)a1;
      unint64_t v110 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v33 = 0;
    }
    goto LABEL_161;
  }
  uint64_t v40 = (unsigned __int8 *)v33 + v39;
  *((void *)a1 + 2) = v40 + 1;
  if (!v33)
  {
    unint64_t v110 = v32;
    goto LABEL_161;
  }
  unsigned int v41 = *v40;
  if (v41 < 2)
  {
    unsigned int v164 = 0;
    int v42 = 1;
    goto LABEL_32;
  }
LABEL_163:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v112 = *((void *)a1 + 3);
  if (v112)
  {
    if (v32)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v112 + 16))(v112, v33);
      int v42 = 0;
      unint64_t v33 = *(WTF::StringImpl **)a1;
      unint64_t v32 = *((void *)a1 + 1);
      goto LABEL_166;
    }
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    unint64_t v32 = 0;
  }
  int v42 = 0;
LABEL_166:
  unsigned int v164 = 1;
LABEL_32:
  if (v41) {
    LODWORD(v43) = v42;
  }
  else {
    LODWORD(v43) = 0;
  }
  unint64_t v44 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v33;
  if (v32 < v44 || v32 - v44 <= 3)
  {
    unint64_t v113 = 0;
    unint64_t v114 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v115 = *((void *)a1 + 3);
    if (v115)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v115 + 16))(v115);
        unint64_t v114 = *(WTF::StringImpl **)a1;
        unint64_t v113 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v113 = 0;
        unint64_t v114 = 0;
      }
    }
  }
  else
  {
    unint64_t v45 = (int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v45 + 1;
    if (v33)
    {
      unsigned int v163 = 0;
      int v46 = *v45;
      unsigned int v47 = v46 & 0xFFFFFF00;
      unsigned int v48 = v46;
      goto LABEL_39;
    }
    unint64_t v113 = v32;
    unint64_t v114 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v116 = *((void *)a1 + 3);
  if (v116 && v113)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v116 + 16))(v116, v114, v113);
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    unint64_t v33 = *(WTF::StringImpl **)a1;
    unint64_t v32 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v33 = 0;
    unint64_t v32 = 0;
    unsigned int v47 = 0;
    unsigned int v48 = 0;
  }
  unsigned int v163 = 1;
LABEL_39:
  unint64_t v49 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v33;
  if (v32 < v49 || v32 - v49 <= 3)
  {
    unint64_t v52 = 0;
    uint64_t v117 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v118 = *((void *)a1 + 3);
    if (v118)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v118 + 16))(v118);
        uint64_t v117 = *(WTF::StringImpl **)a1;
        unint64_t v52 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v52 = 0;
        uint64_t v117 = 0;
      }
    }
LABEL_172:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v119 = *((void *)a1 + 3);
    if (v119)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v119 + 16))(v119, v117, v52);
        uint64_t v161 = 0;
        unint64_t v33 = *(WTF::StringImpl **)a1;
        unint64_t v32 = *((void *)a1 + 1);
        unsigned int v162 = 1;
        goto LABEL_43;
      }
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v52 = 0;
    }
    uint64_t v161 = 0;
    unsigned int v162 = 1;
    goto LABEL_44;
  }
  uint64_t v50 = (int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *((void *)a1 + 2) = v50 + 1;
  if (!v33)
  {
    unint64_t v52 = v32;
    uint64_t v117 = 0;
    goto LABEL_172;
  }
  int v51 = *v50;
  HIDWORD(v161) = v51 & 0xFFFFFF00;
  unsigned int v162 = 0;
  LODWORD(v161) = v51;
LABEL_43:
  unint64_t v52 = (unint64_t)v33;
LABEL_44:
  unint64_t v53 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v52;
  if (v32 < v53 || v32 - v53 <= 3)
  {
    unint64_t v55 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v120 = *((void *)a1 + 3);
    if (v120)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v120 + 16))(v120, v52);
        unint64_t v55 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v55 = 0;
      }
    }
  }
  else
  {
    uint64_t v54 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v54 + 1;
    unint64_t v55 = v32;
    if (v52)
    {
      unsigned int v159 = *v54 & 0xFFFFFF00;
      unsigned int v160 = 0;
      int v158 = *v54;
      goto LABEL_48;
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v121 = *((void *)a1 + 3);
  if (v121 && v55) {
    (*(void (**)(uint64_t))(*(void *)v121 + 16))(v121);
  }
  int v158 = 0;
  unsigned int v159 = 0;
  unsigned int v160 = 1;
LABEL_48:
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v190);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a1, &v188);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a1, &v186);
  uint64_t v56 = (WTF::StringImpl **)IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a1, &v175);
  unint64_t v58 = *((void *)a1 + 1);
  uint64_t v59 = *(WTF::StringImpl **)a1;
  unint64_t v60 = *((void *)a1 + 2) - *(void *)a1;
  unsigned int v157 = a2;
  unint64_t v170 = v15;
  char v172 = v14;
  unsigned int v174 = v12;
  if (v58 <= v60)
  {
    unint64_t v122 = 0;
    unsigned int v123 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v124 = *((void *)a1 + 3);
    if (v124)
    {
      if (v58)
      {
        (*(void (**)(uint64_t))(*(void *)v124 + 16))(v124);
        unsigned int v123 = *(WTF::StringImpl **)a1;
        unint64_t v122 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v122 = 0;
        unsigned int v123 = 0;
      }
    }
    goto LABEL_179;
  }
  uint64_t v61 = (unsigned __int8 *)v59 + v60;
  *((void *)a1 + 2) = v61 + 1;
  if (!v59)
  {
    unint64_t v122 = v58;
    unsigned int v123 = 0;
LABEL_179:
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v125 = *((void *)a1 + 3);
    if (v125)
    {
      if (v122)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v125 + 16))(v125, v123, v122);
        uint64_t v59 = *(WTF::StringImpl **)a1;
        unint64_t v58 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v59 = 0;
      }
    }
    goto LABEL_180;
  }
  unint64_t v62 = *v61;
  if (v62 >= 2)
  {
LABEL_180:
    unint64_t v62 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v126 = *((void *)a1 + 3);
    if (v126)
    {
      if (v58)
      {
        uint64_t v56 = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v126 + 16))(v126, v59);
        unint64_t v62 = *(void *)a1;
        if (*(void *)a1)
        {
          unint64_t v62 = v176;
          if ((_BYTE)v176) {
            uint64_t v175 = 0;
          }
          goto LABEL_243;
        }
      }
      else
      {
        unint64_t v62 = 0;
      }
    }
    if ((_BYTE)v176 && v175)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v175, v59);
      unint64_t v62 = *(void *)a1;
    }
    uint64_t v12 = v4;
    unint64_t v58 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v56 = (WTF::StringImpl **)*((void *)a1 + 3);
    if (v56) {
      goto LABEL_244;
    }
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    goto LABEL_184;
  }
  if (!(_BYTE)v176) {
    goto LABEL_243;
  }
  uint64_t v12 = v4;
  int v63 = 0;
  uint64_t v57 = v62 != 0;
  uint64_t v56 = v175;
  while (1)
  {
    unint64_t v64 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v59;
    if (v58 < v64 || v58 - v64 <= 7)
    {
      unint64_t v127 = 0;
      uint64_t v128 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v129 = *((void *)a1 + 3);
      if (v129)
      {
        uint64_t v140 = v57;
        int v149 = v63;
        uint64_t v155 = v56;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(void *)v129 + 16))(v129);
          uint64_t v128 = *(WTF::StringImpl **)a1;
          unint64_t v127 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v127 = 0;
          uint64_t v128 = 0;
        }
        uint64_t v56 = v155;
        int v63 = v149;
        uint64_t v57 = v140;
      }
      goto LABEL_186;
    }
    unint64_t v65 = (unint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v65 + 1;
    if (!v59)
    {
      unint64_t v127 = v58;
      uint64_t v128 = 0;
LABEL_186:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v130 = *((void *)a1 + 3);
      if (v130)
      {
        uint64_t v139 = v57;
        int v147 = v63;
        uint64_t v153 = v56;
        if (v127)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v130 + 16))(v130, v128, v127);
          unint64_t v68 = 0;
          BOOL v67 = 0;
          uint64_t v59 = *(WTF::StringImpl **)a1;
          unint64_t v58 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = 0;
          unint64_t v68 = 0;
          BOOL v67 = 0;
        }
        uint64_t v56 = v153;
        int v63 = v147;
        uint64_t v57 = v139;
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v68 = 0;
        BOOL v67 = 0;
      }
LABEL_188:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v131 = *((void *)a1 + 3);
      if (v131)
      {
        uint64_t v138 = v57;
        int v145 = v63;
        uint64_t v151 = v56;
        if (v58)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v131 + 16))(v131, v59);
          uint64_t v59 = *(WTF::StringImpl **)a1;
          unint64_t v58 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v59 = 0;
        }
        uint64_t v56 = v151;
        int v63 = v145;
        uint64_t v57 = v138;
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v59 = 0;
      }
      goto LABEL_60;
    }
    unint64_t v66 = *v65;
    BOOL v67 = v66 < 0x20;
    if (v66 >= 0x20) {
      unint64_t v68 = 0;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v66 >= 0x20) {
      goto LABEL_188;
    }
LABEL_60:
    unsigned int v69 = v48;
    unint64_t v70 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v59;
    if (v58 < v70 || v58 - v70 <= 7)
    {
      unsigned int v48 = v47;
      unint64_t v132 = 0;
      uint64_t v133 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v134 = *((void *)a1 + 3);
      if (v134)
      {
        int v141 = v57;
        int v150 = v63;
        uint64_t v156 = v56;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(void *)v134 + 16))(v134);
          uint64_t v133 = *(WTF::StringImpl **)a1;
          unint64_t v132 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v132 = 0;
          uint64_t v133 = 0;
        }
        uint64_t v56 = v156;
        int v63 = v150;
        LODWORD(v57) = v141;
      }
      goto LABEL_191;
    }
    unsigned int v48 = v47;
    unsigned int v47 = v43;
    uint64_t v71 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v71 + 1;
    if (!v59)
    {
      unint64_t v132 = v58;
      uint64_t v133 = 0;
LABEL_191:
      unsigned int v47 = v43;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v135 = *((void *)a1 + 3);
      if (v135)
      {
        int v144 = v57;
        int v148 = v63;
        uint64_t v154 = v56;
        if (v132)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v135 + 16))(v135, v133, v132);
          uint64_t v43 = 0;
          BOOL v73 = 0;
          uint64_t v59 = *(WTF::StringImpl **)a1;
          unint64_t v58 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = 0;
          uint64_t v43 = 0;
          BOOL v73 = 0;
        }
        uint64_t v56 = v154;
        LODWORD(v57) = v144;
        int v63 = v148;
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v59 = 0;
        uint64_t v43 = 0;
        BOOL v73 = 0;
      }
      goto LABEL_193;
    }
    uint64_t v43 = *v71;
    BOOL v72 = (unint64_t)*v71 >= 0x80;
    BOOL v73 = (unint64_t)*v71 < 0x80;
    if ((unint64_t)*v71 >= 0x80) {
      uint64_t v74 = 0;
    }
    else {
      uint64_t v74 = *v71;
    }
    if (!v72)
    {
      BOOL v73 = 1;
      goto LABEL_68;
    }
    uint64_t v43 = v74;
LABEL_193:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v136 = *((void *)a1 + 3);
    if (!v136) {
      break;
    }
    if (!v58) {
      break;
    }
    unsigned int v143 = v57;
    int v146 = v63;
    uint64_t v152 = v56;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v136 + 16))(v136, v59);
    uint64_t v56 = v152;
    uint64_t v57 = v143;
    int v63 = v146;
    if (!*(void *)a1) {
      break;
    }
LABEL_68:
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    char v177 = 0;
    unint64_t v178 = 0xBFF0000000000000;
    char v179 = 0;
    long long v180 = 0u;
    memset(v181, 0, 25);
    long long v182 = 0u;
    memset(v183, 0, 26);
    memset((char *)&v183[1] + 12, 0, 32);
    *(_OWORD *)((char *)&v183[3] + 9) = 0u;
    unint64_t v184 = 0;
    uint64_t v185 = 0;
    unint64_t v62 = v213;
    if (v213)
    {
      unint64_t v62 = (unint64_t)v212;
      unint64_t v212 = 0;
      uint64_t v175 = (WTF::StringImpl **)v62;
      if (v6)
      {
        uint64_t v176 = v12;
        unint64_t v62 = v174;
        if (!v174)
        {
          char v177 = v172;
          unint64_t v62 = (unint64_t)v173;
          if ((_BYTE)v173)
          {
            unint64_t v178 = v170;
            unint64_t v62 = v171;
            if (!v171)
            {
              char v179 = v169;
              unint64_t v62 = v211;
              if (v211)
              {
                long long v75 = v210;
                char v210 = 0;
                *(void *)&long long v180 = v75;
                unint64_t v62 = v209;
                if (v209)
                {
                  uint64_t v76 = v208;
                  uint64_t v208 = 0;
                  *((void *)&v180 + 1) = v76;
                  unint64_t v62 = v207;
                  if (v207)
                  {
                    uint64_t v77 = v206;
                    uint64_t v206 = 0;
                    *(void *)&v181[0] = v77;
                    unint64_t v62 = v205;
                    if (v205)
                    {
                      uint64_t v78 = v204;
                      uint64_t v204 = 0;
                      *((void *)&v181[0] + 1) = v78;
                      unint64_t v62 = v203;
                      if (v203)
                      {
                        uint64_t v79 = v202;
                        uint64_t v202 = 0;
                        *(void *)&v181[1] = v79;
                        unint64_t v62 = v168;
                        if (!v168)
                        {
                          BYTE8(v181[1]) = v167;
                          unint64_t v62 = v201;
                          if (v201)
                          {
                            uint64_t v80 = v200;
                            uint64_t v200 = 0;
                            *(void *)&long long v182 = v80;
                            unint64_t v62 = v199;
                            if (v199)
                            {
                              uint64_t v81 = v198;
                              uint64_t v198 = 0;
                              *((void *)&v182 + 1) = v81;
                              unint64_t v62 = v197;
                              if (v197)
                              {
                                uint64_t v82 = v196;
                                long long v196 = 0;
                                *(void *)&v183[0] = v82;
                                unint64_t v62 = v195;
                                if (v195)
                                {
                                  int v83 = v194;
                                  char v194 = 0;
                                  *((void *)&v183[0] + 1) = v83;
                                  unint64_t v62 = v193;
                                  if (v193)
                                  {
                                    int v84 = v192;
                                    long long v192 = 0;
                                    *(void *)&v183[1] = v84;
                                    unint64_t v62 = v166;
                                    if (!v166)
                                    {
                                      BYTE8(v183[1]) = v165;
                                      unint64_t v62 = v164;
                                      if (!v164)
                                      {
                                        BYTE9(v183[1]) = v47;
                                        unint64_t v62 = v163;
                                        if (!v163)
                                        {
                                          HIDWORD(v183[1]) = v69 | v48;
                                          unint64_t v62 = v162;
                                          if (!v162)
                                          {
                                            LODWORD(v183[2]) = v161 | HIDWORD(v161);
                                            unint64_t v62 = v160;
                                            if (!v160)
                                            {
                                              DWORD1(v183[2]) = v158 | v159;
                                              unint64_t v62 = v191;
                                              if (v191)
                                              {
                                                char v85 = v190;
                                                char v190 = 0;
                                                *((void *)&v183[2] + 1) = v85;
                                                unint64_t v62 = v189;
                                                if (v189)
                                                {
                                                  uint64_t v86 = v188;
                                                  char v188 = 0;
                                                  *(void *)&v183[3] = v86;
                                                  unint64_t v62 = v187;
                                                  if (v187)
                                                  {
                                                    unint64_t v62 = (unint64_t)v186;
                                                    uint64_t v186 = 0;
                                                    *((void *)&v183[3] + 1) = v62;
                                                    if (!v63)
                                                    {
                                                      *(void *)&v183[4] = v56;
                                                      BYTE8(v183[4]) = v57;
                                                      if (v67)
                                                      {
                                                        unint64_t v184 = v68;
                                                        if (v73)
                                                        {
                                                          uint64_t v185 = v43;
                                                          WebCore::ResourceLoadStatistics::ResourceLoadStatistics((uint64_t)v157, (uint64_t *)&v175);
                                                          *(unsigned char *)(v87 + 200) = 1;
                                                          WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)&v175, v88);
                                                          goto LABEL_96;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_243:
    __break(1u);
LABEL_244:
    if (v58)
    {
      (*((void (**)(WTF::StringImpl **, unint64_t))*v56 + 2))(v56, v62);
      uint64_t v56 = 0;
      uint64_t v59 = *(WTF::StringImpl **)a1;
      unint64_t v58 = *((void *)a1 + 1);
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v56 = 0;
    }
LABEL_184:
    int v63 = 1;
  }
  *unsigned int v157 = 0;
  v157[200] = 0;
  if (v56) {
    char v137 = v63;
  }
  else {
    char v137 = 1;
  }
  if ((v137 & 1) == 0) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v56, v59);
  }
LABEL_96:
  if (v187 && v186) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v186, v59);
  }
  if (v189 && v188) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v188, v59);
  }
  if (v191 && v190) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v190, v59);
  }
  if (v193 && v192) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v192, v59);
  }
  if (v195 && v194) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v194, v59);
  }
  if (v197 && v196) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v196, v59);
  }
  if (v199 && v198) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v198, v59);
  }
  if (v201 && v200) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v200, v59);
  }
  if (v203 && v202) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v202, v59);
  }
  if (v205 && v204) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v204, v59);
  }
  if (v207 && v206) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v206, v59);
  }
  if (v209 && v208) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v208, v59);
  }
  if (v211 && v210) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v210, v59);
  }
  if (v213)
  {
    unint64_t v89 = (WTF::StringImpl *)v212;
    unint64_t v212 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2) {
        WTF::StringImpl::destroy(v89, v59);
      }
      else {
        *(_DWORD *)v89 -= 2;
      }
    }
  }
}

void sub_198848EF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,WTF::StringImpl **a55,char a56)
{
  if (a56 && a55) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a55, a2);
  }
  if (*(unsigned char *)(v56 - 240))
  {
    unint64_t v58 = *(WTF::StringImpl ***)(v56 - 248);
    if (v58) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v58, a2);
    }
  }
  if (*(unsigned char *)(v56 - 224))
  {
    uint64_t v59 = *(WTF::StringImpl ***)(v56 - 232);
    if (v59) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v59, a2);
    }
  }
  if (*(unsigned char *)(v56 - 208))
  {
    unint64_t v60 = *(WTF::StringImpl ***)(v56 - 216);
    if (v60) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v60, a2);
    }
  }
  if (*(unsigned char *)(v56 - 192))
  {
    uint64_t v61 = *(WTF::StringImpl ***)(v56 - 200);
    if (v61) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61, a2);
    }
  }
  if (*(unsigned char *)(v56 - 176))
  {
    unint64_t v62 = *(WTF::StringImpl ***)(v56 - 184);
    if (v62) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v62, a2);
    }
  }
  if (*(unsigned char *)(v56 - 160))
  {
    int v63 = *(WTF::StringImpl ***)(v56 - 168);
    if (v63) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v63, a2);
    }
  }
  if (*(unsigned char *)(v56 - 144))
  {
    unint64_t v64 = *(WTF::StringImpl ***)(v56 - 152);
    if (v64) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v64, a2);
    }
  }
  if (*(unsigned char *)(v56 - 128))
  {
    unint64_t v65 = *(WTF::StringImpl ***)(v56 - 136);
    if (v65) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v65, a2);
    }
  }
  if (*(unsigned char *)(v56 - 112))
  {
    unint64_t v66 = *(WTF::StringImpl ***)(v56 - 120);
    if (v66) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v66, a2);
    }
  }
  if (*(unsigned char *)(v56 - 96))
  {
    BOOL v67 = *(WTF::StringImpl **)(v56 - 104);
    *(void *)(v56 - 104) = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2) {
        WTF::StringImpl::destroy(v67, a2);
      }
      else {
        *(_DWORD *)v67 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1988490E8()
{
}

void sub_1988490F0()
{
}

void sub_1988490F8()
{
}

void sub_198849100()
{
}

void sub_198849110()
{
}

void sub_198849118()
{
}

void sub_198849120()
{
}

void sub_198849128()
{
}

void sub_198849138()
{
}

unint64_t IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  int v4 = *(_DWORD *)(a2 + 12);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

void *IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(void *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }

  return IPC::StreamConnectionEncoder::operator<<<int const&>(a1, (_DWORD *)(a2 + 12));
}

void *IPC::StreamConnectionEncoder::operator<<<int const&>(void *result, _DWORD *a2)
{
  uint64_t v2 = result[2];
  unint64_t v3 = *result + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v6 + 4;
    unint64_t v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v6) = *a2;
      result[2] = v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v18);
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    unint64_t v8 = (_DWORD *)((char *)v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (!v5)
    {
      unint64_t v14 = v4;
      uint64_t v15 = 0;
      goto LABEL_16;
    }
    int v9 = 0;
    unsigned int v10 = *v8 & 0xFFFFFF00;
    int v11 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        uint64_t v15 = *(WTF::StringImpl **)a1;
        unint64_t v14 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
LABEL_16:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17 && v14) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v17 + 16))(v17, v15);
    }
    unsigned int v10 = 0;
    int v11 = 0;
    int v9 = 1;
LABEL_8:
    uint64_t result = IPC::Decoder::decode<unsigned int>(a1);
    if (!*(void *)a1) {
      break;
    }
    unint64_t v5 = (WTF::StringImpl *)v19;
    if (v19)
    {
      unint64_t v5 = v18;
      unint64_t v18 = 0;
      if (!v9 && (result & 0xFF00000000) != 0)
      {
        *(void *)a2 = v5;
        *(void *)(a2 + 8) = v11 | v10 | (unint64_t)(result << 32);
        *(unsigned char *)(a2 + 16) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v19)
  {
    uint64_t result = (uint64_t)v18;
    unint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19884940C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ViewportAttributes,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<float>(a1);
  uint64_t v8 = IPC::Decoder::decode<float>(a1);
  uint64_t v9 = IPC::Decoder::decode<float>(a1);
  uint64_t v10 = IPC::Decoder::decode<float>(a1);
  uint64_t v11 = IPC::Decoder::decode<float>(a1);
  uint64_t v12 = IPC::Decoder::decode<float>(a1);
  uint64_t result = IPC::Decoder::decode<WebCore::WritingDirection>((uint64_t *)a1);
  unint64_t v14 = *a1;
  if (!*a1) {
    goto LABEL_13;
  }
  if (!v6
    || (v7 & 0xFF00000000) == 0
    || (v8 & 0xFF00000000) == 0
    || (v9 & 0xFF00000000) == 0
    || (v10 & 0xFF00000000) == 0
    || (v11 & 0xFF00000000) == 0
    || (v12 & 0xFF00000000) == 0
    || (LOBYTE(v14) = result, (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
LABEL_13:
    *(unsigned char *)a2 = 0;
    goto LABEL_11;
  }
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v12;
  LOBYTE(v14) = 1;
  *(unsigned char *)(a2 + 32) = result;
LABEL_11:
  *(unsigned char *)(a2 + 36) = v14;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WTF::URL>,void>::encode<IPC::Encoder,std::optional<WTF::URL> const&>(a1, a2 + 40);
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 88));
  char v4 = *(unsigned char *)(a2 + 104);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (WTF::StringImpl **)a1;
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v68);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v65);
  char v4 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v76);
  uint64_t v8 = *v2;
  if (*v2)
  {
    if (!v69) {
      goto LABEL_77;
    }
    uint64_t v9 = v68;
    unint64_t v68 = 0;
    if (!(_BYTE)v66) {
      goto LABEL_77;
    }
    uint64_t v10 = v65;
    unint64_t v65 = 0;
    if (!(_BYTE)v77) {
      goto LABEL_77;
    }
    uint64_t v11 = v76;
    uint64_t v76 = 0;
    *(void *)&long long v72 = v9;
    *((void *)&v72 + 1) = v10;
    *(_OWORD *)unint64_t v58 = 0u;
    long long v73 = (unint64_t)v11;
    uint64_t v59 = 0;
    uint64_t v74 = 0;
    char v75 = 1;
    WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58[1], v5);
    v58[0] = 0;
    v57[1] = 0;
    v57[0] = 0;
  }
  else
  {
    LOBYTE(v72) = 0;
    char v75 = 0;
  }
  if ((_BYTE)v77)
  {
    uint64_t v12 = v76;
    uint64_t v76 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v5);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  if ((_BYTE)v66)
  {
    char v13 = v65;
    unint64_t v65 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v5);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  if (v69)
  {
    unint64_t v14 = v68;
    unint64_t v68 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v5);
        if (v8) {
          goto LABEL_23;
        }
        goto LABEL_81;
      }
      *(_DWORD *)v14 -= 2;
    }
  }
  if (v8) {
    goto LABEL_23;
  }
LABEL_81:
  uint64_t v50 = *v2;
  int v51 = v2[1];
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v52 = v2[3];
  if (v52 && v51) {
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v50);
  }
LABEL_23:
  IPC::Decoder::decode<std::optional<WTF::URL>>(&v68, (IPC::Decoder *)v2, v7);
  unint64_t v15 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v16)
  {
    unint64_t v17 = v15;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    if (v15 < 0x10000)
    {
      if (v15)
      {
        uint64_t v18 = WTF::fastMalloc((WTF *)(16 * v15));
        LODWORD(v77) = v17;
        uint64_t v76 = (WTF::StringImpl *)v18;
        do
        {
          IPC::Decoder::decode<WebCore::RawFile>((uint64_t)v57, (IPC::Decoder *)v2);
          if (!LOBYTE(v58[0])) {
            goto LABEL_42;
          }
          if (HIDWORD(v77) == v77)
          {
            WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RawFile>((unsigned int *)&v76, (unint64_t)v57);
          }
          else
          {
            int v20 = HIDWORD(v77) + 1;
            uint64_t v21 = (WTF::StringImpl **)((char *)v76 + 16 * HIDWORD(v77));
            unsigned int v22 = v57[0];
            v57[0] = 0;
            *uint64_t v21 = v22;
            char v23 = v57[1];
            v57[1] = 0;
            v21[1] = v23;
            HIDWORD(v77) = v20;
          }
          std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v19);
          --v17;
        }
        while (v17);
        char v24 = v76;
        unsigned int v26 = v77;
        unsigned int v25 = HIDWORD(v77);
      }
      else
      {
        unsigned int v25 = 0;
        unsigned int v26 = 0;
        char v24 = 0;
      }
      uint64_t v76 = 0;
      unint64_t v65 = v24;
      goto LABEL_36;
    }
    do
    {
      IPC::Decoder::decode<WebCore::RawFile>((uint64_t)v57, (IPC::Decoder *)v2);
      if (!LOBYTE(v58[0]))
      {
LABEL_42:
        LOBYTE(v65) = 0;
        char v67 = 0;
        std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v19);
        WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v32);
        goto LABEL_43;
      }
      if (HIDWORD(v77) == v77)
      {
        WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RawFile>((unsigned int *)&v76, (unint64_t)v57);
      }
      else
      {
        int v27 = HIDWORD(v77) + 1;
        uint64_t v28 = (WTF::StringImpl **)((char *)v76 + 16 * HIDWORD(v77));
        unsigned int v29 = v57[0];
        v57[0] = 0;
        *uint64_t v28 = v29;
        char v30 = v57[1];
        v57[1] = 0;
        v28[1] = v30;
        HIDWORD(v77) = v27;
      }
      uint64_t result = std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v19);
      --v17;
    }
    while (v17);
    uint64_t v53 = HIDWORD(v77);
    uint64_t v54 = v76;
    if (v77 <= HIDWORD(v77)) {
      goto LABEL_97;
    }
    unint64_t v55 = v76;
    if (!HIDWORD(v77)) {
      goto LABEL_92;
    }
    if (!(HIDWORD(v77) >> 28))
    {
      uint64_t v56 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v77)));
      LODWORD(v77) = v53;
      uint64_t v76 = (WTF::StringImpl *)v56;
      unint64_t v55 = v54;
      if (v56 != (WTF::StringImpl **)v54)
      {
        WTF::VectorMover<false,WebCore::RawFile>::move(v54, (WTF::StringImpl *)((char *)v54 + 16 * v53), v56);
        unint64_t v55 = v76;
      }
LABEL_92:
      if (v54)
      {
        if (v55 == v54)
        {
          uint64_t v76 = 0;
          LODWORD(v77) = 0;
        }
        WTF::fastFree(v54, v16);
        uint64_t v54 = v76;
      }
      else
      {
        uint64_t v54 = v55;
      }
LABEL_97:
      uint64_t v76 = 0;
      unint64_t v65 = v54;
      unsigned int v26 = v77;
      unsigned int v25 = HIDWORD(v77);
LABEL_36:
      uint64_t v77 = 0;
      unint64_t v66 = __PAIR64__(v25, v26);
      char v67 = 1;
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v16);
      goto LABEL_44;
    }
    __break(0xC471u);
  }
  else
  {
    LOBYTE(v65) = 0;
    char v67 = 0;
LABEL_43:
    char v5 = *v2;
    char v6 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    char v4 = v2[3];
    if (v4) {
      goto LABEL_78;
    }
    while (1)
    {
LABEL_44:
      LOWORD(v57[0]) = 0;
      char v4 = (WTF::StringImpl *)IPC::Decoder::operator>><BOOL>(v2, v57);
      int v33 = BYTE1(v57[0]);
      if (BYTE1(v57[0]))
      {
        char v34 = (char)v57[0];
      }
      else
      {
        char v5 = *v2;
        char v6 = v2[1];
        *uint64_t v2 = 0;
        v2[1] = 0;
        char v4 = v2[3];
        if (v4 && v6) {
          char v4 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v4 + 16))(v4, v5);
        }
        char v34 = 0;
      }
      if (!*v2)
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 112) = 0;
        goto LABEL_68;
      }
      if (v75)
      {
        long long v35 = v72;
        long long v36 = v73;
        long long v72 = 0u;
        long long v73 = 0u;
        *(_OWORD *)uint64_t v57 = v35;
        *(_OWORD *)unint64_t v58 = v36;
        uint64_t v37 = v74;
        uint64_t v74 = 0;
        uint64_t v59 = v37;
        if (v71)
        {
          uint64_t v2 = v60;
          char v4 = (WTF::StringImpl *)std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v60, (uint64_t)&v68);
          if (v67)
          {
            unint64_t v62 = v65;
            unint64_t v38 = v66;
            unint64_t v65 = 0;
            unint64_t v66 = 0;
            unint64_t v63 = v38;
            if (v33) {
              break;
            }
          }
        }
      }
LABEL_77:
      __break(1u);
LABEL_78:
      if (v6) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v4 + 16))(v4, v5);
      }
    }
    long long v39 = *(_OWORD *)v57;
    long long v40 = *(_OWORD *)v58;
    *(_OWORD *)uint64_t v57 = 0u;
    *(_OWORD *)unint64_t v58 = 0u;
    char v64 = v34;
    *(_OWORD *)a2 = v39;
    *(_OWORD *)(a2 + 16) = v40;
    uint64_t v41 = v59;
    uint64_t v59 = 0;
    *(void *)(a2 + 32) = v41;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 40), (uint64_t)v60);
    *(void *)(a2 + 88) = v62;
    unint64_t v42 = v63;
    unint64_t v62 = 0;
    unint64_t v63 = 0;
    *(void *)(a2 + 96) = v42;
    *(unsigned char *)(a2 + 104) = v64;
    *(unsigned char *)(a2 + 112) = 1;
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v43);
    if (v61)
    {
      unint64_t v45 = v60[0];
      v60[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v44);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58[1], v44);
    int v46 = v58[0];
    v58[0] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v5);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    unsigned int v47 = v57[1];
    v57[1] = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v5);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    unsigned int v48 = v57[0];
    v57[0] = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v5);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
LABEL_68:
    if (v67) {
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v5);
    }
    if (v71)
    {
      if (v70)
      {
        unint64_t v49 = v68;
        unint64_t v68 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2) {
            WTF::StringImpl::destroy(v49, v5);
          }
          else {
            *(_DWORD *)v49 -= 2;
          }
        }
      }
    }
    return std::__optional_destruct_base<WebCore::ShareData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v5);
  }
  return result;
}

void sub_198849C18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,int a25,__int16 a26,char a27,char a28,WTF::StringImpl *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  std::__optional_destruct_base<WebCore::ShareData,false>::~__optional_destruct_base[abi:sn180100](v38 - 112, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::TargetedElementAdjustment,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::UUID>>>(a1, (uint64_t)&v15);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)a1, (uint64_t)&v8);
  if (*a1)
  {
    if (v18)
    {
      long long v11 = v15;
      long long v12 = v16;
      long long v13 = v17;
      if (v10)
      {
        uint64_t v6 = v8;
        uint64_t v8 = 0;
        long long v7 = v16;
        *(_OWORD *)a2 = v15;
        *(_OWORD *)(a2 + 16) = v7;
        *(_OWORD *)(a2 + 32) = v17;
        v14[0] = 0;
        *(void *)(a2 + 48) = v6;
        v14[1] = 0;
        *(void *)&long long v7 = v9;
        uint64_t v9 = 0;
        *(void *)(a2 + 56) = v7;
        *(unsigned char *)(a2 + 64) = 1;
        uint64_t result = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v5);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
LABEL_5:
  if (v10) {
    return WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::UUID>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19884A034(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::TargetedElementRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2, v5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 25));
}

uint64_t IPC::ArgumentCoder<WebCore::TargetedElementRequest,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  char v4 = (unsigned __int8 *)a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6) {
    goto LABEL_39;
  }
  BOOL v7 = (unsigned char *)(v5 + v6);
  a1[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    char v31 = v4;
    uint64_t v32 = 0;
    goto LABEL_40;
  }
  unsigned int v8 = *v7;
  if (v8 <= 2)
  {
    if (!*v7)
    {
      long long v13 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      if (!v14) {
        goto LABEL_63;
      }
      v47[0] = v13;
      int v48 = 0;
      unsigned __int8 v49 = 1;
      goto LABEL_18;
    }
    if (v8 == 1)
    {
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v43);
      int v12 = v44;
      if ((_BYTE)v44)
      {
        v47[0] = v43;
        int v12 = 1;
        int v48 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)a1, (uint64_t)&v43);
      int v12 = v45;
      if ((_BYTE)v45)
      {
        v47[0] = v43;
        uint64_t v16 = v44;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        v47[1] = v16;
        int v48 = 2;
        WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v15);
        int v12 = 1;
        goto LABEL_17;
      }
    }
    LOBYTE(v47[0]) = 0;
LABEL_17:
    unsigned __int8 v49 = v12;
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  while (1)
  {
    LOBYTE(v47[0]) = 0;
    unsigned __int8 v49 = 0;
LABEL_5:
    uint64_t v9 = *v2;
    unint64_t v10 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v11 = v2[3];
    if (v11 && v10) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
LABEL_18:
    unint64_t v17 = v2[1];
    uint64_t v18 = *v2;
    unint64_t v19 = v2[2] - *v2;
    if (v17 <= v19)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v37 = v2[3];
      if (v37)
      {
        if (v17)
        {
          (*(void (**)(unint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v36 = *v2;
          unint64_t v35 = v2[1];
        }
        else
        {
          unint64_t v35 = 0;
          uint64_t v36 = 0;
        }
      }
      goto LABEL_44;
    }
    int v20 = (unsigned __int8 *)(v18 + v19);
    uint64_t v21 = v18 + v19 + 1;
    v2[2] = v21;
    if (!v18)
    {
      unint64_t v35 = v17;
      uint64_t v36 = 0;
LABEL_44:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v38 = v2[3];
      if (v38 && v35)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        unsigned int v22 = 0;
        uint64_t v18 = *v2;
        unint64_t v17 = v2[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        unsigned int v22 = 0;
      }
      goto LABEL_46;
    }
    unsigned int v22 = *v20;
    if (v22 < 2)
    {
      int v23 = 0;
      char v24 = 1;
      goto LABEL_22;
    }
LABEL_46:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v39 = v2[3];
    if (!v39 || !v17)
    {
      char v25 = 0;
      unint64_t v40 = 0;
      uint64_t v18 = 0;
      int v23 = 1;
LABEL_48:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v41 = v2[3];
      if (v41 && v40)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v18, v40);
        uint64_t v18 = *v2;
        unint64_t v17 = v2[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(unint64_t, uint64_t))(*(void *)v39 + 16))(v39, v18);
    char v24 = 0;
    uint64_t v18 = *v2;
    unint64_t v17 = v2[1];
    int v23 = 1;
    uint64_t v21 = v2[2];
LABEL_22:
    if (v22) {
      char v25 = v24;
    }
    else {
      char v25 = 0;
    }
    unint64_t v26 = v21 - v18;
    if (v17 <= v26)
    {
      unint64_t v40 = 0;
      unint64_t v42 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v42 && v17)
      {
        (*(void (**)(unint64_t))(*(void *)v42 + 16))(v42);
        uint64_t v18 = *v2;
        unint64_t v40 = v2[1];
      }
      else
      {
        uint64_t v18 = 0;
      }
      goto LABEL_48;
    }
    int v27 = (unsigned __int8 *)(v18 + v26);
    char v4 = v27 + 1;
    v2[2] = (unint64_t)(v27 + 1);
    if (!v18)
    {
      unint64_t v40 = v17;
      goto LABEL_48;
    }
    unsigned int v28 = *v27;
    if (v28 <= 1)
    {
      int v29 = 0;
      uint64_t v2 = (unint64_t *)(v28 != 0);
      goto LABEL_29;
    }
LABEL_50:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t result = v2[3];
    if (!result
      || !v17
      || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v18), !*v2))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
      goto LABEL_34;
    }
    uint64_t v2 = 0;
    int v29 = 1;
LABEL_29:
    unint64_t v5 = v49;
    if (v49)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v43, (uint64_t)v47);
      if (!v23)
      {
        LOBYTE(v46) = v25;
        if (!v29) {
          break;
        }
      }
    }
    __break(1u);
LABEL_39:
    char v31 = 0;
    uint64_t v32 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v33 = v2[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unsigned __int8 *))(*(void *)v33 + 16))(v33, v5, v4);
LABEL_63:
        uint64_t v32 = *v2;
        char v31 = (unsigned __int8 *)v2[1];
      }
      else
      {
        char v31 = 0;
        uint64_t v32 = 0;
      }
    }
LABEL_40:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v34 = v2[3];
    if (v34 && v31) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
  }
  HIBYTE(v46) = (_BYTE)v2;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v43);
  *(_WORD *)(a2 + 24) = v46;
  *(unsigned char *)(a2 + 32) = 1;
  if (v45 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9B45B8[v45])(&v50, &v43);
  }
LABEL_34:
  if (v49)
  {
    if (v48 != -1) {
      return ((uint64_t (*)(uint64_t *, void *))off_1EE9B45B8[v48])(&v43, v47);
    }
  }
  return result;
}

void sub_19884A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, uint64_t a13, char a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1) {
      ((void (*)(char *, char *))off_1EE9B45B8[a16])(&a10, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 32);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(a1, (char *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::VectorArgumentCoder<false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 96));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 112));
  char v6 = *(unsigned char *)(a2 + 128);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 136);
  IPC::ArgumentCoder<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 152));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 160));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 161));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 162));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 163));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 164));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 165));
}

void IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  uint64_t v238 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v240 = v5;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((IPC::Decoder *)a1, (uint64_t)&v273);
  unint64_t v239 = IPC::Decoder::decode<WebCore::RectEdges<BOOL>>(a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v252);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v250);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v248);
  unint64_t v6 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v7)
  {
    LOBYTE(v245) = 0;
    char v247 = 0;
LABEL_25:
    uint64_t v16 = *a1;
    uint64_t v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18 && v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
    goto LABEL_26;
  }
  unint64_t v8 = v6;
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  if (v6 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v7, (uint64_t)v258);
      if (!(_BYTE)v259) {
        goto LABEL_24;
      }
      if (HIDWORD(v255) == v255)
      {
        WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v254, (unint64_t)v258);
      }
      else
      {
        char v14 = (char *)v254 + 16 * HIDWORD(v255);
        *(void *)char v14 = 0;
        *((void *)v14 + 1) = 0;
        long long v15 = v258[0];
        v258[0] = 0;
        *(void *)char v14 = v15;
        LODWORD(v15) = v258[1];
        LODWORD(v258[1]) = 0;
        *((_DWORD *)v14 + 2) = v15;
        LODWORD(v15) = HIDWORD(v258[1]);
        HIDWORD(v258[1]) = 0;
        *((_DWORD *)v14 + 3) = v15;
        ++HIDWORD(v255);
      }
      if ((_BYTE)v259) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v258, v7);
      }
      if (!--v8)
      {
        uint64_t v135 = HIDWORD(v255);
        uint64_t v136 = v254;
        if (v255 > HIDWORD(v255))
        {
          char v137 = v254;
          if (HIDWORD(v255))
          {
            if (HIDWORD(v255) >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x19884BC70);
            }
            uint64_t v138 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v255)));
            LODWORD(v255) = v135;
            uint64_t v254 = v138;
            char v137 = v136;
            if (v138 != v136)
            {
              WTF::VectorMover<false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move((uint64_t)v136, (char *)v136 + 16 * v135, (uint64_t)v138);
              char v137 = v254;
            }
          }
          if (v136)
          {
            if (v137 == v136)
            {
              uint64_t v254 = 0;
              LODWORD(v255) = 0;
            }
            WTF::fastFree(v136, v7);
            uint64_t v136 = v254;
          }
          else
          {
            uint64_t v136 = v137;
          }
        }
        uint64_t v245 = v136;
        uint64_t v139 = v255;
        uint64_t v254 = 0;
        uint64_t v255 = 0;
        uint64_t v246 = v139;
        goto LABEL_16;
      }
    }
  }
  if (v6)
  {
    uint64_t v9 = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
    LODWORD(v255) = v8;
    uint64_t v254 = v9;
    while (1)
    {
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v7, (uint64_t)v258);
      if (!(_BYTE)v259) {
        break;
      }
      if (HIDWORD(v255) == v255)
      {
        WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v254, (unint64_t)v258);
      }
      else
      {
        unint64_t v10 = (char *)v254 + 16 * HIDWORD(v255);
        *(void *)unint64_t v10 = 0;
        *((void *)v10 + 1) = 0;
        unint64_t v11 = v258[0];
        v258[0] = 0;
        *(void *)unint64_t v10 = v11;
        LODWORD(v11) = v258[1];
        LODWORD(v258[1]) = 0;
        *((_DWORD *)v10 + 2) = v11;
        LODWORD(v11) = HIDWORD(v258[1]);
        HIDWORD(v258[1]) = 0;
        *((_DWORD *)v10 + 3) = v11;
        ++HIDWORD(v255);
      }
      if ((_BYTE)v259) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v258, v7);
      }
      if (!--v8)
      {
        int v12 = v254;
        uint64_t v13 = v255;
        goto LABEL_15;
      }
    }
LABEL_24:
    LOBYTE(v245) = 0;
    char v247 = 0;
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v254, v7);
    goto LABEL_25;
  }
  int v12 = 0;
  uint64_t v13 = 0;
LABEL_15:
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  uint64_t v245 = v12;
  uint64_t v246 = v13;
LABEL_16:
  char v247 = 1;
  WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v254, v7);
LABEL_26:
  IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a1, (uint64_t)&v243);
  IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a1, (uint64_t)&v241);
  unint64_t v19 = a1[1];
  uint64_t v20 = *a1;
  unint64_t v21 = a1[2] - *a1;
  if (v19 <= v21)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v39 = a1[3];
    if (v39)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v20, v19);
        uint64_t v38 = *a1;
        uint64_t v37 = a1[1];
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
    goto LABEL_50;
  }
  unsigned int v22 = (unsigned __int8 *)(v20 + v21);
  a1[2] = (uint64_t)(v22 + 1);
  if (!v20)
  {
    uint64_t v37 = v19;
    uint64_t v38 = 0;
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v40 = a1[3];
    if (v40 && v37) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
    }
    goto LABEL_30;
  }
  unsigned int v23 = *v22;
  if (v23 < 7 && ((0x4Fu >> v23) & 1) != 0)
  {
    int v28 = 0;
    unint64_t v27 = 0x6000003020100uLL >> (8 * v23);
    goto LABEL_33;
  }
LABEL_30:
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v26 = a1[3];
  if (v26 && v25) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
  }
  LOBYTE(v27) = 0;
  int v28 = 1;
LABEL_33:
  unint64_t v29 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v30) {
    goto LABEL_69;
  }
  unint64_t v31 = v29;
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  if (v29 >= 0x10000)
  {
    unint64_t v41 = 0;
    LODWORD(v2) = 0;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a1, (uint64_t)v258);
      if (!(_BYTE)v259) {
        break;
      }
      if (v2 == v255)
      {
        unint64_t v42 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v254, v2 + 1, (unint64_t)v258);
        int v43 = HIDWORD(v255);
        unint64_t v41 = v254;
        *((_OWORD *)v254 + HIDWORD(v255)) = *v42;
      }
      else
      {
        *((_OWORD *)v41 + v2) = *(_OWORD *)v258;
        int v43 = HIDWORD(v255);
      }
      uint64_t v2 = (v43 + 1);
      HIDWORD(v255) = v43 + 1;
      if (!--v31)
      {
        int v44 = v255;
        if (v255 > v2)
        {
          if (!v2) {
            goto LABEL_232;
          }
          if (v2 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x19884BC68);
          }
          int v45 = (WTF *)WTF::fastMalloc((WTF *)(16 * v2));
          LODWORD(v255) = v2;
          uint64_t v254 = v45;
          if (v45 == v41)
          {
LABEL_232:
            uint64_t v254 = 0;
            LODWORD(v255) = 0;
          }
          else
          {
            uint64_t v46 = 0;
            do
            {
              *(_OWORD *)((char *)v45 + v46) = *(_OWORD *)((char *)v41 + v46);
              v46 += 16;
            }
            while (16 * v2 != v46);
            int v44 = v2;
            if (!v41) {
              goto LABEL_234;
            }
          }
          WTF::fastFree(v41, v33);
          int v44 = v255;
          LODWORD(v2) = HIDWORD(v255);
        }
LABEL_234:
        int v235 = v44;
        uint64_t v32 = v254;
        goto LABEL_44;
      }
    }
    uint64_t v32 = v254;
    if (!v254) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v29)
  {
    uint64_t v32 = (WTF *)WTF::fastMalloc((WTF *)(16 * v29));
    LODWORD(v2) = 0;
    LODWORD(v255) = v31;
    uint64_t v254 = v32;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a1, (uint64_t)v258);
      if (!(_BYTE)v259) {
        break;
      }
      if (v2 == v255)
      {
        unint64_t v34 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v254, v2 + 1, (unint64_t)v258);
        int v35 = HIDWORD(v255);
        uint64_t v32 = v254;
        *((_OWORD *)v254 + HIDWORD(v255)) = *v34;
      }
      else
      {
        *((_OWORD *)v32 + v2) = *(_OWORD *)v258;
        int v35 = HIDWORD(v255);
      }
      LODWORD(v2) = v35 + 1;
      HIDWORD(v255) = v35 + 1;
      if (!--v31)
      {
        int v235 = v255;
        goto LABEL_44;
      }
    }
LABEL_68:
    uint64_t v254 = 0;
    LODWORD(v255) = 0;
    WTF::fastFree(v32, v33);
LABEL_69:
    uint64_t v47 = *a1;
    uint64_t v48 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v49 = a1[3];
    if (v49 && v48) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
    }
    uint64_t v32 = 0;
    int v36 = 1;
    goto LABEL_71;
  }
  uint64_t v32 = 0;
  int v235 = 0;
  LODWORD(v2) = 0;
LABEL_44:
  int v36 = 0;
LABEL_71:
  unint64_t v50 = a1[1];
  uint64_t v51 = *a1;
  unint64_t v52 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  BOOL v53 = v50 >= v52 && v50 - v52 > 3;
  int v237 = v36;
  if (v53)
  {
    uint64_t v54 = (int *)(v51 + v52);
    a1[2] = (uint64_t)(v54 + 1);
    if (v51)
    {
      int v55 = *v54;
      char v257 = 0;
      if (!v55)
      {
        uint64_t v59 = 0;
        goto LABEL_93;
      }
      while (1)
      {
        IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, v258);
        int v57 = BYTE8(v260);
        if (BYTE8(v260)) {
          BOOL v58 = v258[0] == (WTF::StringImpl *)-1;
        }
        else {
          BOOL v58 = 1;
        }
        if (v58) {
          goto LABEL_101;
        }
        uint64_t v59 = (WTF::StringImpl **)WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v258);
        if (v59) {
          break;
        }
        if (!BYTE8(v260)) {
          goto LABEL_186;
        }
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add((uint64_t *)&v257, (uint64_t *)v258, (uint64_t)&v254);
        if (!v256) {
          break;
        }
        if (BYTE8(v260))
        {
          char v61 = v258[0];
          v258[0] = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, v56);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
        if (!--v55)
        {
          uint64_t v59 = v257;
LABEL_93:
          int v62 = 0;
          goto LABEL_110;
        }
      }
      int v57 = BYTE8(v260);
LABEL_101:
      if (v57)
      {
        char v67 = v258[0];
        v258[0] = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2) {
            WTF::StringImpl::destroy(v67, v56);
          }
          else {
            *(_DWORD *)v67 -= 2;
          }
        }
      }
      if (v257) {
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v257, v56);
      }
      goto LABEL_108;
    }
    uint64_t v63 = v50;
    uint64_t v64 = 0;
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v65 = a1[3];
    if (v65)
    {
      if (v50)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v65 + 16))(v65, v51, v50);
        uint64_t v64 = *a1;
        uint64_t v63 = a1[1];
      }
      else
      {
        uint64_t v63 = 0;
        uint64_t v64 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v66 = a1[3];
  if (v66 && v63) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 16))(v66, v64);
  }
LABEL_108:
  uint64_t v56 = (WTF::StringImpl *)*a1;
  unint64_t v60 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v59 = (WTF::StringImpl **)a1[3];
  if (v59) {
    goto LABEL_187;
  }
  while (1)
  {
    int v62 = 1;
LABEL_110:
    unint64_t v60 = a1[1];
    uint64_t v56 = (WTF::StringImpl *)*a1;
    unint64_t v68 = a1[2] - *a1;
    char v236 = v27;
    if (v60 <= v68)
    {
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v120 = a1[3];
      if (v120)
      {
        int v213 = v62;
        long long v230 = v59;
        if (v60)
        {
          (*(void (**)(uint64_t))(*(void *)v120 + 16))(v120);
          uint64_t v119 = *a1;
          uint64_t v118 = a1[1];
        }
        else
        {
          uint64_t v118 = 0;
          uint64_t v119 = 0;
        }
        uint64_t v59 = v230;
        int v62 = v213;
      }
      goto LABEL_191;
    }
    char v69 = (unsigned __int8 *)v56 + v68;
    uint64_t v70 = (uint64_t)v56 + v68 + 1;
    a1[2] = v70;
    if (!v56)
    {
      uint64_t v118 = v60;
      uint64_t v119 = 0;
LABEL_191:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v121 = a1[3];
      if (v121)
      {
        int v212 = v62;
        long long v229 = v59;
        if (v118)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v121 + 16))(v121, v119, v118);
          unsigned int v71 = 0;
          uint64_t v56 = (WTF::StringImpl *)*a1;
          unint64_t v60 = a1[1];
        }
        else
        {
          unint64_t v60 = 0;
          uint64_t v56 = 0;
          unsigned int v71 = 0;
        }
        uint64_t v59 = v229;
        int v62 = v212;
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v56 = 0;
        unsigned int v71 = 0;
      }
      goto LABEL_193;
    }
    unsigned int v71 = *v69;
    if (v71 < 2)
    {
      int v72 = 0;
      char v73 = 1;
      goto LABEL_114;
    }
LABEL_193:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v122 = a1[3];
    if (!v122)
    {
      char v74 = 0;
      uint64_t v56 = 0;
      int v72 = 1;
      goto LABEL_195;
    }
    int v208 = v62;
    long long v225 = v59;
    if (!v60)
    {
      char v74 = 0;
      uint64_t v122 = 0;
      uint64_t v56 = 0;
      int v72 = 1;
LABEL_195:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v123 = a1[3];
      if (v123)
      {
        char v152 = v74;
        int v153 = v72;
        int v211 = v62;
        uint64_t v228 = v59;
        if (v122)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v123 + 16))(v123, v56, v122);
          unsigned int v78 = 0;
          uint64_t v56 = (WTF::StringImpl *)*a1;
          unint64_t v60 = a1[1];
        }
        else
        {
          unint64_t v60 = 0;
          uint64_t v56 = 0;
          unsigned int v78 = 0;
        }
        uint64_t v59 = v228;
        int v62 = v211;
        int v72 = v153;
        char v74 = v152;
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v56 = 0;
        unsigned int v78 = 0;
      }
      goto LABEL_197;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v122 + 16))(v122, v56);
    char v73 = 0;
    uint64_t v56 = (WTF::StringImpl *)*a1;
    unint64_t v60 = a1[1];
    int v72 = 1;
    uint64_t v70 = a1[2];
    uint64_t v59 = v225;
    int v62 = v208;
LABEL_114:
    if (v71) {
      char v74 = v73;
    }
    else {
      char v74 = 0;
    }
    unint64_t v75 = v70 - (void)v56;
    if (v60 <= v75)
    {
      char v154 = v74;
      int v155 = v72;
      int v214 = v62;
      long long v231 = v59;
      uint64_t v122 = 0;
      uint64_t v156 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v156 && v60)
      {
        (*(void (**)(uint64_t))(*(void *)v156 + 16))(v156);
        uint64_t v56 = (WTF::StringImpl *)*a1;
        uint64_t v122 = a1[1];
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v59 = v231;
      int v62 = v214;
      int v72 = v155;
      char v74 = v154;
      goto LABEL_195;
    }
    uint64_t v76 = (unsigned __int8 *)v56 + v75;
    uint64_t v77 = (uint64_t)v56 + v75 + 1;
    a1[2] = v77;
    if (!v56)
    {
      uint64_t v122 = v60;
      goto LABEL_195;
    }
    unsigned int v78 = *v76;
    if (v78 < 2)
    {
      int v79 = 0;
      char v80 = 1;
      goto LABEL_121;
    }
LABEL_197:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v124 = a1[3];
    if (!v124)
    {
      char v81 = 0;
      uint64_t v56 = 0;
      int v79 = 1;
      goto LABEL_199;
    }
    char v144 = v74;
    int v145 = v72;
    int v206 = v62;
    char v223 = v59;
    if (!v60)
    {
      char v81 = 0;
      uint64_t v124 = 0;
      uint64_t v56 = 0;
      int v79 = 1;
LABEL_199:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v125 = a1[3];
      if (v125)
      {
        char v198 = v81;
        int v210 = v62;
        int v183 = v79;
        char v150 = v74;
        int v151 = v72;
        uint64_t v227 = v59;
        if (v124)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v125 + 16))(v125, v56, v124);
          unsigned int v85 = 0;
          uint64_t v56 = (WTF::StringImpl *)*a1;
          unint64_t v60 = a1[1];
        }
        else
        {
          unint64_t v60 = 0;
          uint64_t v56 = 0;
          unsigned int v85 = 0;
        }
        uint64_t v59 = v227;
        char v81 = v198;
        int v62 = v210;
        int v72 = v151;
        char v74 = v150;
        int v79 = v183;
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v56 = 0;
        unsigned int v85 = 0;
      }
      goto LABEL_201;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v124 + 16))(v124, v56);
    char v80 = 0;
    uint64_t v56 = (WTF::StringImpl *)*a1;
    unint64_t v60 = a1[1];
    int v79 = 1;
    uint64_t v77 = a1[2];
    uint64_t v59 = v223;
    int v62 = v206;
    int v72 = v145;
    char v74 = v144;
LABEL_121:
    if (v78) {
      char v81 = v80;
    }
    else {
      char v81 = 0;
    }
    unint64_t v82 = v77 - (void)v56;
    if (v60 <= v82)
    {
      char v199 = v81;
      int v215 = v62;
      int v157 = v79;
      char v158 = v74;
      int v159 = v72;
      uint64_t v232 = v59;
      uint64_t v124 = 0;
      uint64_t v160 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v160 && v60)
      {
        (*(void (**)(uint64_t))(*(void *)v160 + 16))(v160);
        uint64_t v56 = (WTF::StringImpl *)*a1;
        uint64_t v124 = a1[1];
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v59 = v232;
      char v81 = v199;
      int v62 = v215;
      int v72 = v159;
      char v74 = v158;
      int v79 = v157;
      goto LABEL_199;
    }
    int v83 = (unsigned __int8 *)v56 + v82;
    uint64_t v84 = (uint64_t)v56 + v82 + 1;
    a1[2] = v84;
    if (!v56)
    {
      uint64_t v124 = v60;
      goto LABEL_199;
    }
    unsigned int v85 = *v83;
    if (v85 < 2)
    {
      int v86 = 0;
      char v87 = 1;
      goto LABEL_128;
    }
LABEL_201:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v126 = a1[3];
    if (!v126)
    {
      char v88 = 0;
      uint64_t v56 = 0;
      int v86 = 1;
      goto LABEL_203;
    }
    char v194 = v81;
    int v204 = v62;
    int v141 = v79;
    char v142 = v74;
    int v143 = v72;
    char v221 = v59;
    if (!v60)
    {
      char v88 = 0;
      uint64_t v126 = 0;
      uint64_t v56 = 0;
      int v86 = 1;
LABEL_203:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v127 = a1[3];
      if (v127)
      {
        int v189 = v86;
        char v197 = v81;
        int v147 = v79;
        char v148 = v74;
        int v149 = v72;
        int v209 = v62;
        char v226 = v59;
        if (v126)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v127 + 16))(v127, v56, v126);
          unsigned int v92 = 0;
          uint64_t v56 = (WTF::StringImpl *)*a1;
          unint64_t v60 = a1[1];
        }
        else
        {
          unint64_t v60 = 0;
          uint64_t v56 = 0;
          unsigned int v92 = 0;
        }
        uint64_t v59 = v226;
        char v81 = v197;
        int v62 = v209;
        int v72 = v149;
        char v74 = v148;
        int v79 = v147;
        int v86 = v189;
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v56 = 0;
        unsigned int v92 = 0;
      }
      goto LABEL_205;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v126 + 16))(v126, v56);
    char v87 = 0;
    uint64_t v56 = (WTF::StringImpl *)*a1;
    unint64_t v60 = a1[1];
    int v86 = 1;
    uint64_t v84 = a1[2];
    uint64_t v59 = v221;
    char v81 = v194;
    int v62 = v204;
    int v72 = v143;
    char v74 = v142;
    int v79 = v141;
LABEL_128:
    if (v85) {
      char v88 = v87;
    }
    else {
      char v88 = 0;
    }
    unint64_t v89 = v84 - (void)v56;
    if (v60 <= v89)
    {
      int v190 = v86;
      char v200 = v81;
      int v161 = v79;
      char v162 = v74;
      int v163 = v72;
      int v216 = v62;
      char v233 = v59;
      uint64_t v126 = 0;
      uint64_t v164 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v164 && v60)
      {
        (*(void (**)(uint64_t))(*(void *)v164 + 16))(v164);
        uint64_t v56 = (WTF::StringImpl *)*a1;
        uint64_t v126 = a1[1];
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v59 = v233;
      char v81 = v200;
      int v62 = v216;
      int v72 = v163;
      char v74 = v162;
      int v79 = v161;
      int v86 = v190;
      goto LABEL_203;
    }
    unint64_t v90 = (unsigned __int8 *)v56 + v89;
    uint64_t v91 = (uint64_t)v56 + v89 + 1;
    a1[2] = v91;
    if (!v56)
    {
      uint64_t v126 = v60;
      goto LABEL_203;
    }
    unsigned int v92 = *v90;
    if (v92 < 2)
    {
      LODWORD(v27) = v28;
      int v28 = 0;
      char v93 = 1;
      goto LABEL_135;
    }
LABEL_205:
    LODWORD(v27) = v28;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v128 = a1[3];
    if (!v128)
    {
      char v94 = 0;
      uint64_t v56 = 0;
      int v28 = 1;
      goto LABEL_207;
    }
    int v186 = v86;
    char v193 = v81;
    char v174 = v74;
    int v180 = v79;
    int v140 = v72;
    int v203 = v62;
    long long v220 = v59;
    if (!v60)
    {
      char v94 = 0;
      uint64_t v128 = 0;
      uint64_t v56 = 0;
      int v28 = 1;
      goto LABEL_291;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v128 + 16))(v128, v56);
    char v93 = 0;
    uint64_t v56 = (WTF::StringImpl *)*a1;
    unint64_t v60 = a1[1];
    int v28 = 1;
    uint64_t v91 = a1[2];
    uint64_t v59 = v220;
    char v81 = v193;
    int v62 = v203;
    int v72 = v140;
    char v74 = v174;
    int v79 = v180;
    int v86 = v186;
LABEL_135:
    if (v92) {
      char v94 = v93;
    }
    else {
      char v94 = 0;
    }
    unint64_t v95 = v91 - (void)v56;
    if (v60 <= v95)
    {
      int v186 = v86;
      char v193 = v81;
      int v165 = v79;
      char v177 = v74;
      int v166 = v72;
      int v217 = v62;
      long long v234 = v59;
      uint64_t v128 = 0;
      uint64_t v167 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v167 && v60)
      {
        (*(void (**)(uint64_t))(*(void *)v167 + 16))(v167);
        uint64_t v56 = (WTF::StringImpl *)*a1;
        uint64_t v128 = a1[1];
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v59 = v234;
      int v62 = v217;
      int v72 = v166;
      char v74 = v177;
      int v79 = v165;
LABEL_291:
      int v86 = v186;
      char v81 = v193;
LABEL_207:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v129 = a1[3];
      if (v129)
      {
        int v188 = v86;
        char v196 = v81;
        char v176 = v74;
        int v182 = v79;
        int v146 = v72;
        int v207 = v62;
        char v224 = v59;
        if (v128)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v129 + 16))(v129, v56, v128);
          unsigned int v98 = 0;
          uint64_t v56 = (WTF::StringImpl *)*a1;
          unint64_t v60 = a1[1];
        }
        else
        {
          unint64_t v60 = 0;
          uint64_t v56 = 0;
          unsigned int v98 = 0;
        }
        uint64_t v59 = v224;
        char v81 = v196;
        int v62 = v207;
        int v72 = v146;
        char v74 = v176;
        int v79 = v182;
        int v86 = v188;
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v56 = 0;
        unsigned int v98 = 0;
      }
      goto LABEL_209;
    }
    int v96 = (unsigned __int8 *)v56 + v95;
    uint64_t v97 = (uint64_t)v56 + v95 + 1;
    a1[2] = v97;
    if (!v56)
    {
      uint64_t v128 = v60;
      goto LABEL_207;
    }
    unsigned int v98 = *v96;
    if (v98 < 2)
    {
      int v99 = 0;
      char v100 = 1;
      goto LABEL_142;
    }
LABEL_209:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v130 = a1[3];
    if (!v130)
    {
      char v101 = 0;
      uint64_t v56 = 0;
      int v99 = 1;
      goto LABEL_211;
    }
    int v185 = v86;
    char v192 = v81;
    char v173 = v74;
    int v179 = v79;
    int v170 = v72;
    int v202 = v62;
    char v219 = v59;
    if (!v60)
    {
      char v101 = 0;
      uint64_t v130 = 0;
      uint64_t v56 = 0;
      int v99 = 1;
LABEL_295:
      uint64_t v59 = v219;
      char v81 = v192;
      int v62 = v202;
      int v72 = v170;
      char v74 = v173;
      int v79 = v179;
      int v86 = v185;
      goto LABEL_211;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v130 + 16))(v130, v56);
    char v100 = 0;
    uint64_t v56 = (WTF::StringImpl *)*a1;
    unint64_t v60 = a1[1];
    int v99 = 1;
    uint64_t v97 = a1[2];
    uint64_t v59 = v219;
    char v81 = v192;
    int v62 = v202;
    int v72 = v170;
    char v74 = v173;
    int v79 = v179;
    int v86 = v185;
LABEL_142:
    if (v98) {
      char v101 = v100;
    }
    else {
      char v101 = 0;
    }
    unint64_t v102 = v97 - (void)v56;
    if (v60 <= v102)
    {
      int v185 = v86;
      char v192 = v81;
      char v173 = v74;
      int v179 = v79;
      int v170 = v72;
      int v202 = v62;
      char v219 = v59;
      uint64_t v130 = 0;
      uint64_t v168 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v168 && v60)
      {
        (*(void (**)(uint64_t))(*(void *)v168 + 16))(v168);
        uint64_t v56 = (WTF::StringImpl *)*a1;
        uint64_t v130 = a1[1];
      }
      else
      {
        uint64_t v56 = 0;
      }
      goto LABEL_295;
    }
    uint64_t v103 = (unsigned __int8 *)v56 + v102;
    a1[2] = (uint64_t)(v103 + 1);
    if (!v56) {
      break;
    }
    unsigned int v104 = *v103;
    if (v104 > 1) {
      goto LABEL_213;
    }
    int v105 = 0;
    BOOL v106 = v104 != 0;
LABEL_149:
    if (v240)
    {
      v258[0] = v238;
      if (v275)
      {
        long long v259 = v273;
        *(void *)&long long v260 = v274;
        if (BYTE4(v239))
        {
          int v261 = v239;
          if (v253)
          {
            uint64_t v107 = v252;
            char v252 = 0;
            *(void *)&long long v262 = v107;
            if (v251)
            {
              uint64_t v108 = v250;
              char v250 = 0;
              *((void *)&v262 + 1) = v108;
              if (v249)
              {
                uint64_t v109 = v248;
                char v248 = 0;
                if (v247)
                {
                  unint64_t v110 = v245;
                  uint64_t v111 = v246;
                  uint64_t v245 = 0;
                  uint64_t v246 = 0;
                  if (v244)
                  {
                    long long v265 = v243;
                    if (v242)
                    {
                      long long v266 = v241;
                      if (!v27)
                      {
                        char v267 = v236;
                        if (!v237 && !v62 && !v72)
                        {
                          LOBYTE(v271) = v74;
                          if (!v79)
                          {
                            BYTE1(v271) = v81;
                            if (!v86)
                            {
                              BYTE2(v271) = v88;
                              if (!v28)
                              {
                                HIBYTE(v271) = v94;
                                if (!v99)
                                {
                                  LOBYTE(v272) = v101;
                                  if (!v105)
                                  {
                                    HIBYTE(v272) = v106;
                                    long long v112 = v259;
                                    *(_OWORD *)a2 = *(_OWORD *)v258;
                                    *(_OWORD *)(a2 + 16) = v112;
                                    *(_OWORD *)(a2 + 32) = v260;
                                    *(_DWORD *)(a2 + 48) = v261;
                                    long long v262 = 0u;
                                    *(void *)(a2 + 56) = v107;
                                    *(void *)(a2 + 64) = v108;
                                    long long v263 = 0u;
                                    *(void *)(a2 + 72) = v109;
                                    *(void *)(a2 + 80) = v110;
                                    uint64_t v264 = 0;
                                    *(void *)(a2 + 88) = v111;
                                    long long v113 = v265;
                                    long long v114 = v266;
                                    *(unsigned char *)(a2 + 128) = v267;
                                    *(_OWORD *)(a2 + 96) = v113;
                                    *(_OWORD *)(a2 + 112) = v114;
                                    uint64_t v268 = 0;
                                    *(void *)(a2 + 136) = v32;
                                    uint64_t v269 = 0;
                                    *(_DWORD *)(a2 + 144) = v235;
                                    *(_DWORD *)(a2 + 148) = v2;
                                    uint64_t v270 = 0;
                                    *(void *)(a2 + 152) = v59;
                                    *(_DWORD *)(a2 + 160) = v271;
                                    *(_WORD *)(a2 + 164) = v272;
                                    *(unsigned char *)(a2 + 176) = 1;
                                    WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)v258, v56);
                                    goto LABEL_168;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_186:
    __break(1u);
LABEL_187:
    if (v60) {
      (*((void (**)(WTF::StringImpl **, WTF::StringImpl *))*v59 + 2))(v59, v56);
    }
    uint64_t v59 = 0;
  }
  uint64_t v130 = v60;
LABEL_211:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v131 = a1[3];
  if (v131)
  {
    int v187 = v86;
    char v195 = v81;
    char v175 = v74;
    int v181 = v79;
    int v171 = v72;
    int v205 = v62;
    __int16 v222 = v59;
    if (v130)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v131 + 16))(v131, v56, v130);
      uint64_t v56 = (WTF::StringImpl *)*a1;
      unint64_t v60 = a1[1];
    }
    else
    {
      unint64_t v60 = 0;
      uint64_t v56 = 0;
    }
    uint64_t v59 = v222;
    char v81 = v195;
    int v62 = v205;
    int v72 = v171;
    char v74 = v175;
    int v79 = v181;
    int v86 = v187;
  }
  else
  {
    unint64_t v60 = 0;
    uint64_t v56 = 0;
  }
LABEL_213:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v132 = a1[3];
  if (v132)
  {
    if (v60)
    {
      int v184 = v86;
      char v191 = v81;
      char v172 = v74;
      int v178 = v79;
      int v169 = v72;
      int v201 = v62;
      char v218 = v59;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v132 + 16))(v132, v56);
      uint64_t v59 = v218;
      char v81 = v191;
      int v62 = v201;
      int v72 = v169;
      char v74 = v172;
      int v79 = v178;
      int v86 = v184;
      if (*a1)
      {
        BOOL v106 = 0;
        int v105 = 1;
        goto LABEL_149;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 176) = 0;
  if (v59) {
    char v133 = v62;
  }
  else {
    char v133 = 1;
  }
  if ((v133 & 1) == 0) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v59, v56);
  }
  char v134 = v237;
  if (!v32) {
    char v134 = 1;
  }
  if ((v134 & 1) == 0) {
    WTF::fastFree(v32, v56);
  }
LABEL_168:
  if (v247) {
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v245, v56);
  }
  if (v249)
  {
    uint64_t v115 = v248;
    char v248 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2) {
        WTF::StringImpl::destroy(v115, v56);
      }
      else {
        *(_DWORD *)v115 -= 2;
      }
    }
  }
  if (v251)
  {
    uint64_t v116 = v250;
    char v250 = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2) {
        WTF::StringImpl::destroy(v116, v56);
      }
      else {
        *(_DWORD *)v116 -= 2;
      }
    }
  }
  if (v253)
  {
    uint64_t v117 = v252;
    char v252 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2) {
        WTF::StringImpl::destroy(v117, v56);
      }
      else {
        *(_DWORD *)v117 -= 2;
      }
    }
  }
}

void sub_19884BC9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, WTF::StringImpl **a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,WTF::StringImpl *a29,char a30,WTF::StringImpl *a31,char a32,WTF::StringImpl *a33,char a34,WTF *a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  if (!a13) {
    a12 = 1;
  }
  if ((a12 & 1) == 0) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a13, a2);
  }
  if (!v44) {
    a17 = 1;
  }
  if ((a17 & 1) == 0) {
    WTF::fastFree(v44, a2);
  }
  if (a28) {
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, a2);
  }
  if (a30)
  {
    uint64_t v48 = a29;
    a29 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, a2);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  if (a32)
  {
    uint64_t v49 = a31;
    a31 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, a2);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
  if (a34)
  {
    unint64_t v50 = a33;
    a33 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, a2);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[5]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[6]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[7]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[8]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[9]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[10]);
  float v4 = a2[11];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(uint64_t *result, _DWORD *a2)
{
  int v2 = a2[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v8 + v4 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v9) = *a2;
      result[2] = v10;
      uint64_t v3 = *result;
      unint64_t v4 = v10;
    }
  }
  unint64_t v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = v12 - (v3 + v4);
  if (v12 >= v3 + v4)
  {
    unint64_t v14 = v12 - v3;
    unint64_t v15 = v13 + v4 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v14) = v2;
      result[2] = v15;
      uint64_t v3 = *result;
      unint64_t v4 = v15;
    }
  }
  int v17 = a2[3];
  unint64_t v18 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v3 + v4);
  if (v18 >= v3 + v4)
  {
    unint64_t v20 = v18 - v3;
    unint64_t v21 = v19 + v4 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v20) = a2[2];
      result[2] = v21;
      uint64_t v3 = *result;
      unint64_t v4 = v21;
    }
  }
  unint64_t v23 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = v23 - (v3 + v4);
  if (v23 >= v3 + v4)
  {
    unint64_t v25 = v23 - v3;
    unint64_t v26 = v24 + v4 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v25) = v17;
      result[2] = v26;
      uint64_t v3 = *result;
      unint64_t v4 = v26;
    }
  }
  unint64_t v28 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v29 = v28 - (v3 + v4);
  if (v28 >= v3 + v4)
  {
    unint64_t v30 = v28 - v3;
    unint64_t v31 = v29 + v4 + 4;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v31 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v30) = a2[4];
      result[2] = v31;
      uint64_t v3 = *result;
      unint64_t v4 = v31;
    }
  }
  unint64_t v33 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v3 + v4)
  {
    unint64_t v34 = (char *)v33 - v3;
    if ((unint64_t)v33 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v33 = a2[5];
      result[2] = (uint64_t)(v34 + 4);
      uint64_t v3 = *result;
      unint64_t v4 = (unint64_t)(v34 + 4);
    }
  }
  int v35 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v35 >= v3 + v4)
  {
    int v36 = (char *)v35 - v3;
    if ((unint64_t)v35 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *int v35 = a2[6];
      result[2] = (uint64_t)(v36 + 4);
      uint64_t v3 = *result;
      unint64_t v4 = (unint64_t)(v36 + 4);
    }
  }
  uint64_t v37 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v37 >= v3 + v4)
  {
    uint64_t v38 = (char *)v37 - v3;
    if ((unint64_t)v37 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v38 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *uint64_t v37 = a2[7];
      result[2] = (uint64_t)(v38 + 4);
      uint64_t v3 = *result;
      unint64_t v4 = (unint64_t)(v38 + 4);
    }
  }
  uint64_t v39 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v39 >= v3 + v4)
  {
    uint64_t v40 = (char *)v39 - v3;
    if ((unint64_t)v39 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      _DWORD *v39 = a2[8];
      result[2] = (uint64_t)(v40 + 4);
      uint64_t v3 = *result;
      unint64_t v4 = (unint64_t)(v40 + 4);
    }
  }
  unint64_t v41 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v3 + v4)
  {
    unint64_t v42 = (char *)v41 - v3;
    if ((unint64_t)v41 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v42 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v41 = a2[9];
      result[2] = (uint64_t)(v42 + 4);
      uint64_t v3 = *result;
      unint64_t v4 = (unint64_t)(v42 + 4);
    }
  }
  int v43 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v43 >= v3 + v4)
  {
    int v44 = (char *)v43 - v3;
    if ((unint64_t)v43 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v44 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *int v43 = a2[10];
      result[2] = (uint64_t)(v44 + 4);
      uint64_t v3 = *result;
      unint64_t v4 = (unint64_t)(v44 + 4);
    }
  }
  int v45 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v45 >= v3 + v4)
  {
    uint64_t v46 = (char *)v45 - v3;
    if ((unint64_t)v45 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v46 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *int v45 = a2[11];
      result[2] = (uint64_t)(v46 + 4);
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v45);
  uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!(_BYTE)v5) {
    goto LABEL_14;
  }
  while (1)
  {
    int v43 = result;
    int v44 = v5;
    BOOL v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v9 = v8;
    if (!(_BYTE)v8)
    {
      unint64_t v22 = *a1;
      unint64_t v21 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v23 = a1[3];
      if (v23)
      {
        if (v21)
        {
          unint64_t v33 = v7;
          int v24 = v8;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v22);
          BOOL v7 = v33;
          int v8 = v24;
        }
      }
    }
    unint64_t v41 = v7;
    int v42 = v8;
    unint64_t v10 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v12 = v11;
    if (!(_BYTE)v11)
    {
      unint64_t v26 = *a1;
      unint64_t v25 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v27 = a1[3];
      if (v27)
      {
        if (v25)
        {
          int v31 = v11;
          unint64_t v34 = v10;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v27 + 16))(v27, v26);
          int v11 = v31;
          unint64_t v10 = v34;
        }
      }
    }
    uint64_t v39 = v10;
    int v40 = v11;
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v13 = v5;
    if (!(_BYTE)v5)
    {
      unint64_t v29 = *a1;
      unint64_t v28 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v30 = a1[3];
      if (v30)
      {
        if (v28)
        {
          int v32 = v5;
          int v35 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v29);
          uint64_t v13 = 0;
          int v5 = v32;
          uint64_t result = v35;
        }
      }
    }
    uint64_t v37 = result;
    int v38 = v5;
    if (!*a1) {
      break;
    }
    if (v46 && v6 && v9 && v12 && v13)
    {
      uint64_t result = (unint64_t *)WebCore::FloatRoundedRect::FloatRoundedRect((WebCore::FloatRoundedRect *)v36, &v45, (const WebCore::FloatSize *)&v43, (const WebCore::FloatSize *)&v41, (const WebCore::FloatSize *)&v39, (const WebCore::FloatSize *)&v37);
      long long v14 = v36[1];
      *(_OWORD *)a2 = v36[0];
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v36[2];
      *(unsigned char *)(a2 + 48) = 1;
      return result;
    }
    __break(1u);
LABEL_14:
    unint64_t v16 = *a1;
    unint64_t v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v17 = a1[3];
    if (v17) {
      BOOL v18 = v15 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      unint64_t v19 = result;
      int v20 = v5;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v17 + 16))(a1[3], v16);
      uint64_t result = v19;
      int v5 = v20;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::IntRect,void>::encode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v5);
  uint64_t v5 = a2[1];
  return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v5);
}

void *IPC::StreamConnectionEncoder::operator<<<int>(void *result, int a2)
{
  uint64_t v2 = result[2];
  unint64_t v3 = *result + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v6 + 4;
    unint64_t v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v6) = a2;
      result[2] = v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v4 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)unint64_t result = v2;
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, a2 + 8);

  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, (uint64_t *)(a2 + 120));
}

void IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::decode(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5)
  {
    unint64_t v19 = *a1;
    unint64_t v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v21 = a1[3];
    if (v21 && v20 != 0) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19);
    }
  }
  IPC::Decoder::decode<WebCore::TextIndicatorData>(a1, v37);
  IPC::Decoder::decode<WebCore::AttributedString>((IPC::Decoder *)a1, &v25);
  if (*a1)
  {
    unint64_t v8 = v27;
    if (!v27)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      unint64_t v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v7);
      }
      goto LABEL_13;
    }
    WebCore::AttributedString::AttributedString();
    WebCore::AttributedString::AttributedString();
    unsigned __int8 v36 = 1;
    MEMORY[0x199732DE0](v45);
  }
  else
  {
    v35[0] = 0;
    unsigned __int8 v36 = 0;
  }
  if (v27) {
    MEMORY[0x199732DE0](&v25);
  }
  if (!v36)
  {
    unint64_t v7 = (void *)*a1;
    unint64_t v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v24 = a1[3];
    if (v24)
    {
      if (v23) {
        (*(void (**)(unint64_t, void *))(*(void *)v24 + 16))(v24, v7);
      }
    }
  }
  unint64_t v8 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    a2[160] = 0;
    goto LABEL_27;
  }
  if (!v6) {
    goto LABEL_46;
  }
  unint64_t v25 = v4;
  unint64_t v8 = v44;
  if (!v44) {
    goto LABEL_46;
  }
  WebCore::TextIndicatorData::TextIndicatorData((uint64_t)v26, v37);
  unint64_t v8 = v36;
  if (!v36) {
    goto LABEL_46;
  }
  WebCore::AttributedString::AttributedString();
  *(void *)a2 = v25;
  WebCore::TextIndicatorData::TextIndicatorData((uint64_t)(a2 + 8), v26);
  WebCore::AttributedString::AttributedString();
  a2[160] = 1;
  MEMORY[0x199732DE0](&v34);
  unint64_t v8 = v33;
  if ((v33 & 0x8000000000000) != 0) {
    goto LABEL_47;
  }
LABEL_13:
  BOOL v9 = v32;
  int v32 = 0;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
  }
  BOOL v10 = v31;
  int v31 = 0;
  if (v10)
  {
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[2];
    }
  }
  int v11 = v30;
  unint64_t v30 = 0;
  if (v11)
  {
    if (v11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
  }
  uint64_t v12 = v28;
  if (v28)
  {
    unint64_t v28 = 0;
    int v29 = 0;
    WTF::fastFree(v12, v7);
  }
LABEL_27:
  if (v36) {
    MEMORY[0x199732DE0](v35);
  }
  if (v44)
  {
    if ((v43 & 0x8000000000000) != 0)
    {
      BOOL v18 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v7);
      }
    }
    uint64_t v13 = v42;
    int v42 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    long long v14 = v41;
    unint64_t v41 = 0;
    if (v14)
    {
      if (v14[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    unint64_t v15 = v40;
    int v40 = 0;
    if (v15)
    {
      if (v15[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      }
      else {
        --v15[2];
      }
    }
    unint64_t v16 = v38;
    if (v38)
    {
      int v38 = 0;
      int v39 = 0;
      WTF::fastFree(v16, v7);
    }
  }
}

void sub_19884CA40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF *a41,int a42,uint64_t a43,_DWORD *a44,_DWORD *a45,_DWORD *a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a34) {
    MEMORY[0x199732DE0](&a29);
  }
  if (a49)
  {
    if ((a47 & 0x8000000000000) != 0)
    {
      uint64_t v54 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a47 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, a2);
      }
    }
    unint64_t v50 = a46;
    a46 = 0;
    if (v50)
    {
      if (v50[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v50 + 8))(v50);
      }
      else {
        --v50[2];
      }
    }
    uint64_t v51 = a45;
    a45 = 0;
    if (v51)
    {
      if (v51[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
      }
      else {
        --v51[2];
      }
    }
    unint64_t v52 = a44;
    a44 = 0;
    if (v52)
    {
      if (v52[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v52 + 8))(v52);
      }
      else {
        --v52[2];
      }
    }
    BOOL v53 = a41;
    if (a41)
    {
      a41 = 0;
      a42 = 0;
      WTF::fastFree(v53, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 32));
  *(_OWORD *)BOOL v9 = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)v9);
  IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<IPC::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(a1, a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)BOOL v9 = *(_OWORD *)(a2 + 192);
  long long v10 = v4;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)v9);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)&v10);
  LOBYTE(v9[0]) = 0;
  LOBYTE(v9[1]) = 0;
  if (*(unsigned char *)(a2 + 232))
  {
    unsigned __int8 v5 = *(WTF::StringImpl **)(a2 + 224);
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v9[0] = v5;
    LOBYTE(v9[1]) = 1;
  }
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)v9);
  if (LOBYTE(v9[1]))
  {
    unint64_t v7 = v9[0];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 304));
}

void sub_19884CDF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *((void *)a1 + 1);
  BOOL v9 = *(WTF::StringImpl **)a1;
  unint64_t v10 = *((void *)a1 + 2) - *(void *)a1;
  if (v8 <= v10)
  {
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v66 = *((void *)a1 + 3);
    if (v66)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v66 + 16))(v66, v9, v8);
        uint64_t v65 = *(WTF::StringImpl **)a1;
        unint64_t v64 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v64 = 0;
        uint64_t v65 = 0;
      }
    }
  }
  else
  {
    int v11 = (char *)v9 + v10;
    *((void *)a1 + 2) = v11 + 1;
    if (v9)
    {
      int v122 = 0;
      char v123 = *v11;
      goto LABEL_4;
    }
    unint64_t v64 = v8;
    uint64_t v65 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v67 = *((void *)a1 + 3);
  if (v67 && v64) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v67 + 16))(v67, v65);
  }
  int v122 = 1;
  char v123 = 0;
LABEL_4:
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v127);
  uint64_t v125 = *(WTF::StringImpl **)a1;
  if (!*(void *)a1)
  {
    unint64_t v68 = 0;
    if (!BYTE8(v127)) {
      goto LABEL_159;
    }
    uint64_t v115 = (WTF::StringImpl *)v127;
    *(void *)&long long v127 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
      {
        WTF::StringImpl::destroy(v115, 0);
        unint64_t v68 = *(WTF::StringImpl **)a1;
LABEL_159:
        uint64_t v126 = 0;
        uint64_t v69 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v70 = *((void *)a1 + 3);
        if (v70)
        {
          if (v69) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v70 + 16))(v70, v68);
          }
          uint64_t v126 = 0;
        }
        goto LABEL_7;
      }
      *(_DWORD *)v115 -= 2;
    }
    unint64_t v68 = 0;
    goto LABEL_159;
  }
  if (!BYTE8(v127)) {
    goto LABEL_144;
  }
  uint64_t v126 = (WTF::StringImpl *)v127;
LABEL_7:
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v127);
  uint64_t v124 = *(WTF::StringImpl **)a1;
  if (*(void *)a1)
  {
    if (!BYTE8(v127)) {
      goto LABEL_144;
    }
    int v2 = (WTF::StringImpl *)v127;
  }
  else
  {
    if (BYTE8(v127))
    {
      uint64_t v116 = (WTF::StringImpl *)v127;
      *(void *)&long long v127 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2) {
          WTF::StringImpl::destroy(v116, v12);
        }
        else {
          *(_DWORD *)v116 -= 2;
        }
      }
    }
    int v2 = 0;
    unsigned int v71 = *(WTF::StringImpl **)a1;
    uint64_t v72 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v73 = *((void *)a1 + 3);
    if (v73)
    {
      if (v72) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v73 + 16))(v73, v71);
      }
      int v2 = 0;
    }
  }
  uint64_t v119 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  char v121 = v13;
  unint64_t v14 = *((void *)a1 + 1);
  unint64_t v15 = *(WTF::StringImpl **)a1;
  unint64_t v16 = *((void *)a1 + 2) - *(void *)a1;
  if (v14 <= v16)
  {
    unint64_t v74 = 0;
    unint64_t v75 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v76 = *((void *)a1 + 3);
    if (v76)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
        unint64_t v75 = *(WTF::StringImpl **)a1;
        unint64_t v74 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v74 = 0;
        unint64_t v75 = 0;
      }
    }
    goto LABEL_169;
  }
  unint64_t v17 = (unsigned __int8 *)v15 + v16;
  *((void *)a1 + 2) = v17 + 1;
  if (!v15)
  {
    unint64_t v74 = v14;
    unint64_t v75 = 0;
LABEL_169:
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v77 = *((void *)a1 + 3);
    if (v77)
    {
      if (v74)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v77 + 16))(v77, v75, v74);
        unint64_t v15 = *(WTF::StringImpl **)a1;
        unint64_t v14 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        unint64_t v15 = 0;
      }
    }
    goto LABEL_170;
  }
  unsigned int v18 = *v17;
  if (v18 < 2)
  {
    int v120 = 0;
    BOOL v118 = v18 != 0;
    goto LABEL_14;
  }
LABEL_170:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v78 = *((void *)a1 + 3);
  if (v78 && v14) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v78 + 16))(v78, v15);
  }
  int v79 = *(WTF::StringImpl **)a1;
  uint64_t v80 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v81 = *((void *)a1 + 3);
  if (v81 && v80) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v81 + 16))(v81, v79);
  }
  BOOL v118 = 0;
  int v120 = 1;
LABEL_14:
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v166);
  long long v4 = (unsigned char *)*((void *)a1 + 1);
  unint64_t v19 = *(WTF::StringImpl **)a1;
  unint64_t v20 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v4 <= v20)
  {
    unint64_t v82 = 0;
    int v83 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v84 = *((void *)a1 + 3);
    if (v84)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
        int v83 = *(WTF::StringImpl **)a1;
        unint64_t v82 = (unsigned char *)*((void *)a1 + 1);
      }
      else
      {
        unint64_t v82 = 0;
        int v83 = 0;
      }
    }
    goto LABEL_174;
  }
  unint64_t v21 = (unsigned __int8 *)v19 + v20;
  uint64_t v22 = (uint64_t)v19 + v20 + 1;
  *((void *)a1 + 2) = v22;
  if (!v19)
  {
    unint64_t v82 = v4;
    int v83 = 0;
LABEL_174:
    long long v4 = 0;
    unint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v85 = *((void *)a1 + 3);
    if (v85)
    {
      if (v82)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v85 + 16))(v85, v83);
        unint64_t v19 = *(WTF::StringImpl **)a1;
        long long v4 = (unsigned char *)*((void *)a1 + 1);
      }
      else
      {
        long long v4 = 0;
        unint64_t v19 = 0;
      }
    }
    goto LABEL_175;
  }
  if (*v21 >= 2u)
  {
LABEL_175:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v86 = *((void *)a1 + 3);
    if (v86 && v4) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unsigned char *))(*(void *)v86 + 16))(v86, v19, v4);
    }
    LOBYTE(v150) = 0;
    unsigned __int8 v165 = 0;
    goto LABEL_177;
  }
  if (!*v21)
  {
    LOBYTE(v127) = 0;
    LOBYTE(v135) = 0;
    LOBYTE(v150) = 0;
    char v164 = 0;
    unsigned __int8 v165 = 1;
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v127, v19);
    int v40 = v165;
    goto LABEL_79;
  }
  unint64_t v3 = v22 - (void)v19;
  if ((unint64_t)v4 <= v22 - (uint64_t)v19)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v92 = *((void *)a1 + 3);
    if (!v92)
    {
      unsigned __int8 v117 = 0;
      char v93 = 0;
      unint64_t v19 = 0;
      goto LABEL_185;
    }
    (*(void (**)(uint64_t))(*(void *)v92 + 16))(v92);
    char v93 = 0;
    unsigned __int8 v117 = 0;
    uint64_t v111 = *(WTF::StringImpl **)a1;
    uint64_t v110 = *((void *)a1 + 1);
    uint64_t v112 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (!v112)
    {
LABEL_246:
      unint64_t v19 = 0;
      goto LABEL_185;
    }
    unint64_t v19 = 0;
    if (!v110) {
      goto LABEL_185;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v112 + 16))(v112, v111);
    unsigned __int8 v117 = 0;
    unint64_t v19 = *(WTF::StringImpl **)a1;
    unint64_t v24 = (WTF::StringImpl *)*((void *)a1 + 1);
    unint64_t v23 = (unsigned __int8 *)*((void *)a1 + 2);
  }
  else
  {
    unint64_t v23 = v21 + 2;
    *((void *)a1 + 2) = v21 + 2;
    unsigned __int8 v117 = v21[1];
    unint64_t v24 = (WTF::StringImpl *)v4;
  }
  unint64_t v25 = v23 - (unsigned __int8 *)v19;
  if ((unint64_t)v24 <= v25)
  {
    char v93 = 0;
    uint64_t v113 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v24 && v113)
    {
      (*(void (**)(uint64_t))(*(void *)v113 + 16))(v113);
      unint64_t v19 = *(WTF::StringImpl **)a1;
      char v93 = (WTF::StringImpl *)*((void *)a1 + 1);
      goto LABEL_185;
    }
    goto LABEL_246;
  }
  unint64_t v26 = (char *)v19 + v25;
  uint64_t v27 = (uint64_t)v19 + v25 + 1;
  *((void *)a1 + 2) = v27;
  if (v19)
  {
    int v28 = 0;
    char v29 = *v26;
    goto LABEL_23;
  }
  char v93 = v24;
LABEL_185:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v94 = *((void *)a1 + 3);
  if (!v94)
  {
    char v29 = 0;
    unint64_t v24 = 0;
    char v93 = 0;
LABEL_187:
    int v28 = 1;
    goto LABEL_188;
  }
  if (!v93)
  {
    char v29 = 0;
    unint64_t v24 = 0;
    goto LABEL_187;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v94 + 16))(v94, v19, v93);
  char v29 = 0;
  unint64_t v19 = *(WTF::StringImpl **)a1;
  unint64_t v24 = (WTF::StringImpl *)*((void *)a1 + 1);
  int v28 = 1;
  uint64_t v27 = *((void *)a1 + 2);
LABEL_23:
  unint64_t v30 = v27 - (void)v19;
  if ((unint64_t)v24 <= v30)
  {
    char v93 = 0;
    uint64_t v114 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v24 && v114)
    {
      (*(void (**)(uint64_t))(*(void *)v114 + 16))(v114);
      char v93 = *(WTF::StringImpl **)a1;
      unint64_t v24 = (WTF::StringImpl *)*((void *)a1 + 1);
    }
    else
    {
      unint64_t v24 = 0;
    }
    goto LABEL_188;
  }
  int v31 = (unsigned __int8 *)v19 + v30;
  *((void *)a1 + 2) = v31 + 1;
  if (!v19)
  {
    char v93 = 0;
LABEL_188:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v95 = *((void *)a1 + 3);
    if (v95)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v95 + 16))(v95, v93);
        unint64_t v19 = *(WTF::StringImpl **)a1;
        unint64_t v24 = (WTF::StringImpl *)*((void *)a1 + 1);
      }
      else
      {
        unint64_t v19 = 0;
      }
    }
    else
    {
      unint64_t v19 = 0;
      unint64_t v24 = 0;
    }
LABEL_190:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v96 = *((void *)a1 + 3);
    if (v96 && v24)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v96 + 16))(v96, v19);
      BOOL v34 = 0;
      uint64_t v107 = *((void *)a1 + 3);
      uint64_t v108 = *(WTF::StringImpl **)a1;
      uint64_t v109 = *((void *)a1 + 1);
      int v33 = 1;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v107 && v109)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v107 + 16))(v107, v108);
        BOOL v34 = 0;
      }
    }
    else
    {
      BOOL v34 = 0;
      int v33 = 1;
    }
    goto LABEL_27;
  }
  unsigned int v32 = *v31;
  if (v32 >= 2) {
    goto LABEL_190;
  }
  int v33 = 0;
  BOOL v34 = v32 != 0;
LABEL_27:
  IPC::Decoder::decode<std::optional<WebCore::RegistrableDomain>>((WTF::StringImpl *)&v182, a1);
  IPC::Decoder::decode<std::optional<WebCore::PCM::EphemeralNonce>>((IPC::Decoder *)&v180, a1);
  IPC::Decoder::decode<std::optional<WebCore::RegistrableDomain>>((WTF::StringImpl *)&v177, a1);
  unsigned __int8 v5 = *(WTF::StringImpl **)a1;
  if (*(void *)a1)
  {
    if ((unint64_t)v4 <= v3) {
      goto LABEL_144;
    }
    LOBYTE(v168) = v117;
    if (v28) {
      goto LABEL_144;
    }
    BYTE1(v168) = v29;
    if (v33) {
      goto LABEL_144;
    }
    BYTE2(v168) = v34;
    if (!v183) {
      goto LABEL_144;
    }
    LOBYTE(v169) = 0;
    char v170 = 0;
    if (BYTE8(v182))
    {
      int v99 = (WTF::StringImpl *)v182;
      *(void *)&long long v182 = 0;
      int v169 = v99;
      char v170 = 1;
    }
    if (!v181) {
      goto LABEL_144;
    }
    LOBYTE(v171) = 0;
    char v172 = 0;
    if (BYTE8(v180))
    {
      int v35 = (WTF::StringImpl *)v180;
      *(void *)&long long v180 = 0;
      int v171 = v35;
      char v172 = 1;
    }
    if (!v179) {
      goto LABEL_144;
    }
    LOBYTE(v173) = 0;
    char v174 = 0;
    int v36 = v178;
    if (v178)
    {
      char v100 = v177;
      char v177 = 0;
      char v173 = v100;
      char v174 = 1;
    }
    v175[0] = 0;
    v175[32] = 0;
    v176[0] = 0;
    v176[24] = 0;
    LOWORD(v127) = (_WORD)v168;
    BYTE2(v127) = BYTE2(v168);
    BYTE8(v127) = 0;
    LOBYTE(v128) = 0;
    if (BYTE8(v182))
    {
      char v101 = v169;
      int v169 = 0;
      *((void *)&v127 + 1) = v101;
      LOBYTE(v128) = 1;
    }
    long long v4 = v175;
    v129[0] = 0;
    v129[8] = 0;
    if (BYTE8(v180))
    {
      uint64_t v37 = v171;
      int v171 = 0;
      *(void *)uint64_t v129 = v37;
      v129[8] = 1;
    }
    v129[16] = 0;
    v129[24] = 0;
    if (v178)
    {
      unint64_t v102 = v173;
      char v173 = 0;
      *(void *)&v129[16] = v102;
      v129[24] = 1;
    }
    LOBYTE(v130) = 0;
    char v132 = 0;
    LOBYTE(v133) = 0;
    BYTE8(v134) = 0;
    LOBYTE(v135) = 1;
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v176, v12);
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v38);
    if (v174)
    {
      int v62 = v173;
      char v173 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2) {
          WTF::StringImpl::destroy(v62, v12);
        }
        else {
          *(_DWORD *)v62 -= 2;
        }
      }
    }
    if (v172)
    {
      int v39 = v171;
      int v171 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v12);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    if (v170)
    {
      uint64_t v63 = v169;
      int v169 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2) {
          WTF::StringImpl::destroy(v63, v12);
        }
        else {
          *(_DWORD *)v63 -= 2;
        }
      }
    }
    LODWORD(v3) = 1;
  }
  else
  {
    LODWORD(v3) = 0;
    LOBYTE(v127) = 0;
    LOBYTE(v135) = 0;
    int v36 = v178;
    if (!v179) {
      goto LABEL_56;
    }
  }
  if (v36) {
    goto LABEL_145;
  }
  while (1)
  {
LABEL_56:
    if (v181 && BYTE8(v180) && (void)v180)
    {
      if (*(_DWORD *)v180 == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)v180, v12);
      }
      else {
        *(_DWORD *)v180 -= 2;
      }
    }
    if (v183 && BYTE8(v182) && (void)v182)
    {
      if (*(_DWORD *)v182 == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)v182, v12);
      }
      else {
        *(_DWORD *)v182 -= 2;
      }
    }
    if (!v5)
    {
      uint64_t v12 = *(WTF::StringImpl **)a1;
      uint64_t v97 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v98 = *((void *)a1 + 3);
      if (v98)
      {
        if (v97)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v98 + 16))(v98, v12);
          LODWORD(v3) = v135;
        }
      }
    }
    if (v3)
    {
      __int16 v150 = v127;
      char v151 = BYTE2(v127);
      LOBYTE(v152) = 0;
      char v153 = 0;
      if ((_BYTE)v128)
      {
        uint64_t v105 = *((void *)&v127 + 1);
        *((void *)&v127 + 1) = 0;
        uint64_t v152 = v105;
        char v153 = 1;
      }
      LOBYTE(v154) = 0;
      char v155 = 0;
      if (v129[8])
      {
        uint64_t v41 = *(void *)v129;
        *(void *)uint64_t v129 = 0;
        uint64_t v154 = v41;
        char v155 = 1;
      }
      LOBYTE(v156) = 0;
      char v157 = 0;
      if (v129[24])
      {
        uint64_t v106 = *(void *)&v129[16];
        *(void *)&v129[16] = 0;
        uint64_t v156 = v106;
        char v157 = 1;
      }
      LOBYTE(v158) = 0;
      char v160 = 0;
      if (v132)
      {
        long long v158 = v130;
        long long v42 = v131;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v159 = v42;
        char v160 = 1;
      }
      LOBYTE(v161) = 0;
      char v163 = 0;
      if (BYTE8(v134))
      {
        long long v43 = v133;
        long long v133 = 0uLL;
        long long v161 = v43;
        uint64_t v44 = v134;
        *(void *)&long long v134 = 0;
        uint64_t v162 = v44;
        char v163 = 1;
      }
      int v40 = 1;
      char v164 = 1;
    }
    else
    {
      int v40 = 0;
      LOBYTE(v150) = 0;
    }
    unsigned __int8 v165 = v40;
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v127, v12);
LABEL_79:
    if (!v40)
    {
LABEL_177:
      char v87 = *(WTF::StringImpl **)a1;
      uint64_t v88 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v89 = *((void *)a1 + 3);
      if (v89 && v88) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v89 + 16))(v89, v87);
      }
    }
    IPC::Decoder::decode<std::optional<WTF::WallTime>>((uint64_t *)a1, &v127);
    IPC::Decoder::decode<std::optional<WTF::WallTime>>((uint64_t *)a1, &v168);
    FloatRect v45 = *(WTF::StringImpl **)a1;
    if (*(void *)a1)
    {
      if (!(_BYTE)v128 || !v170) {
        goto LABEL_144;
      }
      long long v4 = *(unsigned char **)((char *)&v127 + 1);
      LODWORD(v3) = v127;
      *(void *)((char *)&v182 + 7) = v168;
      HIBYTE(v182) = (_BYTE)v169;
      long long v180 = v182;
    }
    else
    {
      uint64_t v90 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v91 = *((void *)a1 + 3);
      if (v91 && v90) {
        (*(void (**)(uint64_t, void))(*(void *)v91 + 16))(v91, 0);
      }
      LODWORD(v3) = 0;
    }
    IPC::Decoder::decode<std::optional<WebCore::PCM::EphemeralNonce>>((IPC::Decoder *)&v168, a1);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v182);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 312) = 0;
      goto LABEL_114;
    }
    if (!v122 && v125 && v124 && v121 && !v120 && v167 && v165 && v45 && v170 && BYTE8(v182)) {
      break;
    }
LABEL_144:
    __break(1u);
LABEL_145:
    if (v177)
    {
      if (*(_DWORD *)v177 == 2) {
        WTF::StringImpl::destroy(v177, v12);
      }
      else {
        *(_DWORD *)v177 -= 2;
      }
    }
  }
  LOBYTE(v127) = v123;
  *((void *)&v127 + 1) = v126;
  uint64_t v128 = v2;
  *(void *)uint64_t v129 = v119;
  v129[8] = v118;
  *(_OWORD *)&v129[16] = v166;
  LOBYTE(v130) = 0;
  char v140 = 0;
  if (v164)
  {
    LOWORD(v130) = v150;
    BYTE2(v130) = v151;
    BYTE8(v130) = 0;
    LOBYTE(v131) = 0;
    if (v153)
    {
      uint64_t v103 = v152;
      uint64_t v152 = 0;
      *((void *)&v130 + 1) = v103;
      LOBYTE(v131) = 1;
    }
    BYTE8(v131) = 0;
    char v132 = 0;
    if (v155)
    {
      uint64_t v46 = v154;
      uint64_t v154 = 0;
      *((void *)&v131 + 1) = v46;
      char v132 = 1;
    }
    LOBYTE(v133) = 0;
    BYTE8(v133) = 0;
    if (v157)
    {
      uint64_t v104 = v156;
      uint64_t v156 = 0;
      *(void *)&long long v133 = v104;
      BYTE8(v133) = 1;
    }
    LOBYTE(v134) = 0;
    char v136 = 0;
    if (v160)
    {
      long long v47 = v158;
      long long v158 = 0u;
      long long v48 = v159;
      long long v159 = 0u;
      long long v134 = v47;
      long long v135 = v48;
      char v136 = 1;
    }
    LOBYTE(v137) = 0;
    char v139 = 0;
    if (v163)
    {
      long long v49 = v161;
      long long v161 = 0uLL;
      long long v137 = v49;
      uint64_t v50 = v162;
      uint64_t v162 = 0;
      uint64_t v138 = v50;
      char v139 = 1;
    }
    char v140 = 1;
  }
  v141[0] = v3;
  *(void *)&v141[1] = v4;
  *(_OWORD *)&v141[9] = v180;
  *(_DWORD *)&v141[25] = v177;
  *(_DWORD *)&v141[28] = *(_DWORD *)((char *)&v177 + 3);
  LOBYTE(v142) = 0;
  char v143 = 0;
  if ((_BYTE)v169)
  {
    uint64_t v51 = v168;
    uint64_t v168 = 0;
    char v142 = v51;
    char v143 = 1;
  }
  char v148 = 0;
  long long v144 = 0u;
  long long v145 = 0u;
  LOBYTE(v146) = 0;
  uint64_t v52 = v182;
  *(void *)&long long v182 = 0;
  uint64_t v149 = v52;
  *(unsigned char *)a2 = v123;
  *((void *)&v127 + 1) = 0;
  uint64_t v128 = 0;
  *(void *)(a2 + 8) = v126;
  *(void *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v129;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v129[9];
  std::__optional_move_base<WebCore::PCM::AttributionTriggerData,false>::__optional_move_base[abi:sn180100](a2 + 56, (uint64_t)&v130);
  long long v54 = *(_OWORD *)&v141[16];
  *(_OWORD *)(a2 + 192) = *(_OWORD *)v141;
  *(_OWORD *)(a2 + 208) = v54;
  *(unsigned char *)(a2 + 224) = 0;
  *(unsigned char *)(a2 + 232) = 0;
  if (v143)
  {
    int v55 = v142;
    char v142 = 0;
    *(void *)(a2 + 224) = v55;
    *(unsigned char *)(a2 + 232) = 1;
  }
  long long v56 = v144;
  long long v57 = v145;
  long long v144 = 0u;
  long long v145 = 0u;
  *(_OWORD *)(a2 + 240) = v56;
  *(_OWORD *)(a2 + 256) = v57;
  *(unsigned char *)(a2 + 272) = 0;
  *(unsigned char *)(a2 + 296) = 0;
  if (v148)
  {
    long long v58 = v146;
    long long v146 = 0uLL;
    *(_OWORD *)(a2 + 272) = v58;
    uint64_t v59 = v147;
    uint64_t v147 = 0;
    *(void *)(a2 + 288) = v59;
    *(unsigned char *)(a2 + 296) = 1;
  }
  uint64_t v60 = v149;
  uint64_t v149 = 0;
  *(void *)(a2 + 304) = v60;
  *(unsigned char *)(a2 + 312) = 1;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v127, v53);
  int v2 = 0;
  uint64_t v126 = 0;
LABEL_114:
  if (BYTE8(v182))
  {
    char v61 = (WTF::StringImpl *)v182;
    *(void *)&long long v182 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, v12);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
  }
  if (v170 && (_BYTE)v169 && v168)
  {
    if (*(_DWORD *)v168 == 2) {
      WTF::StringImpl::destroy(v168, v12);
    }
    else {
      *(_DWORD *)v168 -= 2;
    }
  }
  if (v165) {
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v150, v12);
  }
  if (v124 && v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v12);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  if (v125 && v126)
  {
    if (*(_DWORD *)v126 == 2) {
      WTF::StringImpl::destroy(v126, v12);
    }
    else {
      *(_DWORD *)v126 -= 2;
    }
  }
}

void sub_19884DF5C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, ...)
{
  va_start(va, a11);
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (a9 && v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v13);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (a10 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v13);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

IPC::Decoder *IPC::Decoder::decode<std::optional<WebCore::PCM::EphemeralNonce>>(IPC::Decoder *result, IPC::Decoder *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_17;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (!v9)
    {
      *(unsigned char *)unint64_t result = 0;
      goto LABEL_9;
    }
    unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v17);
    uint64_t v5 = *(void *)a2;
    if (*(void *)a2)
    {
      if (v18)
      {
        *(void *)unint64_t v3 = v17;
        LOBYTE(v9) = 1;
LABEL_9:
        *((unsigned char *)v3 + 8) = v9;
        *((unsigned char *)v3 + 16) = 1;
        return result;
      }
      __break(1u);
      goto LABEL_22;
    }
    if (v18)
    {
      unint64_t v16 = v17;
      unint64_t v17 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, 0);
          uint64_t v5 = *(void *)a2;
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    unint64_t v6 = *((void *)a2 + 1);
  }
LABEL_17:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result)
  {
LABEL_22:
    if (v6) {
      (*(void (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 16) = 0;
  uint64_t v14 = *(void *)a2;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result)
  {
    if (v15) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v14);
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WebCore::RegistrableDomain>>(WTF::StringImpl *result, IPC::Decoder *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    goto LABEL_12;
  }
  if (!v9)
  {
    *(unsigned char *)unint64_t result = 0;
    *((unsigned char *)result + 8) = 0;
    goto LABEL_8;
  }
  unint64_t result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(void *)unint64_t v3 = v17;
    *((unsigned char *)v3 + 8) = 1;
LABEL_8:
    *((unsigned char *)v3 + 16) = 1;
    return result;
  }
LABEL_12:
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 16) = 0;
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v16) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v15);
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (*(void *)a1)
  {
    if (v7)
    {
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      return result;
    }
    __break(1u);
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v7)
  {
    unint64_t result = v6;
    unint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ApplePayDateComponents,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 16);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 24);
}

uint64_t IPC::Decoder::decode<WebCore::ApplePayDateComponents>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  char v9 = v8;
  uint64_t v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  char v12 = v11;
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (*(void *)a2)
  {
    if (v6 && v9 && v12 && v14)
    {
      *(_DWORD *)a1 = v4;
      *(unsigned char *)(a1 + 4) = BYTE4(v4);
      *(_DWORD *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 12) = BYTE4(v7);
      *(_DWORD *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 20) = BYTE4(v10);
      *(_DWORD *)(a1 + 24) = result;
      *(unsigned char *)(a1 + 28) = BYTE4(result);
      *(unsigned char *)(a1 + 32) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v16();
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ApplePaySetupConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 3));
}

unsigned char *IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  char v5 = *(unsigned char *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
  char v6 = *(unsigned char *)(a2 + 40);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 44));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 48));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  return IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 72);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingMethod,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDateComponentsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDateComponentsRange> const&>(a1, a2 + 32);

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 100));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ApplePayShippingMethod,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v46);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v44);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v42);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v40);
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *(WTF::StringImpl **)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8) {
    goto LABEL_38;
  }
  char v9 = (unsigned __int8 *)v7 + v8;
  *((void *)a1 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v22 = v6;
    unint64_t v23 = 0;
    goto LABEL_39;
  }
  unsigned int v10 = *v9;
  if (v10 >= 2) {
    goto LABEL_40;
  }
  if (v10)
  {
    IPC::Decoder::decode<WebCore::ApplePayDateComponents>((uint64_t)&v51, a1);
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ApplePayDateComponents>((uint64_t)&v48, a1);
    uint64_t v7 = *(WTF::StringImpl **)a1;
    if (!*(void *)a1)
    {
      uint64_t v31 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v26 = *((void *)a1 + 3);
      if (!v26 || !v31) {
        goto LABEL_51;
      }
      uint64_t v7 = 0;
      goto LABEL_71;
    }
    if (!v53) {
      goto LABEL_37;
    }
    char v11 = v51;
    v57[0] = *(_OWORD *)v52;
    *(_OWORD *)((char *)v57 + 15) = *(_OWORD *)&v52[15];
    if (!v50) {
      goto LABEL_37;
    }
    int v12 = 0;
    *(_OWORD *)((char *)&v57[1] + 15) = v48;
    *(_OWORD *)((char *)&v57[2] + 15) = v49;
    *(_OWORD *)((char *)v56 + 15) = v49;
    long long v54 = v57[0];
    long long v55 = v57[1];
    v56[0] = v57[2];
    char v2 = 1;
  }
  else
  {
    int v12 = 0;
    char v2 = 0;
    char v11 = 0;
  }
  while (1)
  {
    unint64_t v6 = *((void *)a1 + 1);
    if (v6 <= *((void *)a1 + 2) - (void)v7) {
      break;
    }
    uint64_t v13 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v13 + 1;
    if (!v7)
    {
      unint64_t v27 = v6;
      int v28 = 0;
      goto LABEL_44;
    }
    unsigned int v14 = *v13;
    if (v14 > 1) {
      goto LABEL_45;
    }
    int v15 = 0;
    BOOL v16 = v14 != 0;
LABEL_14:
    if (v47)
    {
      uint64_t v17 = v46;
      uint64_t v46 = 0;
      if (v45)
      {
        char v18 = v44;
        uint64_t v44 = 0;
        if (v43)
        {
          unint64_t v19 = v42;
          long long v42 = 0;
          if (v41)
          {
            unint64_t v20 = v40;
            int v40 = 0;
            if (!v12 && !v15)
            {
              long long v21 = v55;
              *(_OWORD *)(a2 + 33) = v54;
              *(void *)a2 = v17;
              *(void *)(a2 + 8) = v18;
              *(void *)(a2 + 16) = v19;
              *(void *)(a2 + 24) = v20;
              *(unsigned char *)(a2 + 32) = v11;
              *(_OWORD *)(a2 + 49) = v21;
              *(_OWORD *)(a2 + 65) = v56[0];
              *(_OWORD *)(a2 + 80) = *(_OWORD *)((char *)v56 + 15);
              *(unsigned char *)(a2 + 96) = v2;
              *(unsigned char *)(a2 + 100) = v16;
              *(unsigned char *)(a2 + 104) = 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
LABEL_37:
    __break(1u);
LABEL_38:
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        unint64_t v23 = *(WTF::StringImpl **)a1;
        unint64_t v22 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v23 = 0;
      }
    }
LABEL_39:
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        uint64_t v7 = *(WTF::StringImpl **)a1;
        unint64_t v6 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_40:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26 && v6) {
LABEL_71:
    }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v7);
LABEL_51:
    unsigned int v32 = *(WTF::StringImpl **)a1;
    uint64_t v33 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v33)
    {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v32);
      char v11 = 0;
      uint64_t v7 = *(WTF::StringImpl **)a1;
    }
    else
    {
      uint64_t v7 = 0;
      char v11 = 0;
    }
    int v12 = 1;
  }
  unint64_t v27 = 0;
  int v28 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v29 = *((void *)a1 + 3);
  if (v29)
  {
    char v36 = v11;
    int v39 = v12;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
      int v28 = *(WTF::StringImpl **)a1;
      unint64_t v27 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v27 = 0;
      int v28 = 0;
    }
    char v11 = v36;
    int v12 = v39;
  }
LABEL_44:
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v30 = *((void *)a1 + 3);
  if (v30)
  {
    char v35 = v11;
    int v38 = v12;
    if (v27)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
      uint64_t v7 = *(WTF::StringImpl **)a1;
      unint64_t v6 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    char v11 = v35;
    int v12 = v38;
  }
LABEL_45:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v6)
    {
      char v34 = v11;
      int v37 = v12;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v7);
      char v11 = v34;
      int v12 = v37;
      if (*(void *)a1)
      {
        BOOL v16 = 0;
        int v15 = 1;
        goto LABEL_14;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 104) = 0;
  if (v41)
  {
    uint64_t result = v40;
    int v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_21:
  if (v43)
  {
    uint64_t result = v42;
    long long v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v45)
  {
    uint64_t result = v44;
    uint64_t v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v47)
  {
    uint64_t result = v46;
    uint64_t v46 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19884ED6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, char a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, char a17)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::ApplePayError,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v14 = *(unsigned char *)(a2 + 12);
  IPC::Encoder::operator<<<BOOL>(a1, &v14);
  unsigned int v4 = *(unsigned __int16 *)(a2 + 13);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4 > 0xFF)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19884EFA4);
    }
    *char v5 = 1;
    char v15 = v4;
    IPC::Encoder::operator<<<BOOL>(a1, &v15);
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    *char v5 = 0;
  }
  uint64_t v7 = *(WTF::StringImpl **)(a2 + 16);
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v13 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)&v13);
  char v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  unsigned int v10 = *(unsigned __int16 *)(a2 + 24);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10 > 0xFF)
  {
    if (v12)
    {
      *uint64_t result = 1;
      char v16 = v10;
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v16);
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x19884EF84);
  }
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19884EFC4);
  }
  *uint64_t result = 0;
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 304);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 424);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 448);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 584);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 616);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 632);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 648));
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v74, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v71, (uint64_t)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v68, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v66, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v62, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v60, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)&v55, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, (uint64_t)&v52);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v49, (IPC::Decoder *)a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v47);
  if (!*a1) {
    goto LABEL_53;
  }
  if (!v81) {
    goto LABEL_52;
  }
  v24[0] = v74[0];
  long long v5 = v75;
  long long v75 = 0uLL;
  long long v25 = v5;
  long long v26 = v76;
  long long v27 = v77;
  uint64_t v6 = v79;
  uint64_t v79 = 0;
  uint64_t v28 = v78;
  uint64_t v29 = v6;
  __int16 v30 = v80;
  if (!v73) {
    goto LABEL_52;
  }
  uint64_t v31 = v71;
  uint64_t v7 = v72;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v32 = v7;
  if (!v70) {
    goto LABEL_52;
  }
  std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v33, v68);
  if (!v67) {
    goto LABEL_52;
  }
  std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)v66);
  if (!v65) {
    goto LABEL_52;
  }
  LOBYTE(v35) = 0;
  char v37 = 0;
  if (v64)
  {
    uint64_t v8 = v62;
    uint64_t v62 = 0;
    uint64_t v35 = v8;
    uint64_t v9 = v63;
    uint64_t v63 = 0;
    uint64_t v36 = v9;
    char v37 = 1;
  }
  if (!v61) {
    goto LABEL_52;
  }
  std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v38, (uint64_t)v60);
  if (!v59) {
    goto LABEL_52;
  }
  LOBYTE(v39) = 0;
  char v42 = 0;
  if (v58)
  {
    char v41 = 0;
    if (v57)
    {
      unsigned int v10 = v55;
      long long v55 = 0;
      int v39 = v10;
      uint64_t v11 = v56;
      uint64_t v56 = 0;
      uint64_t v40 = v11;
      char v41 = 1;
    }
    char v42 = 1;
  }
  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v43, (uint64_t)v24);
  if (!v54) {
    goto LABEL_52;
  }
  uint64_t v12 = v52;
  uint64_t v52 = 0;
  v44[0] = v12;
  uint64_t v13 = v53;
  uint64_t v53 = 0;
  v44[1] = v13;
  if (!v51 || (v14 = v49, v49 = 0, v45[0] = v14, uint64_t v15 = v50, v50 = 0, v45[1] = v15, !v48))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    *a2 = 0;
    a2[656] = 0;
    goto LABEL_23;
  }
  char v16 = v47;
  char v47 = 0;
  uint64_t v46 = v16;
  std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentMethodUpdate>((uint64_t)a2, (uint64_t)v43);
  char v18 = v46;
  uint64_t v46 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v17);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v19);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v43, v20);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v24, v21);
LABEL_23:
  if (v48)
  {
    unint64_t v22 = v47;
    char v47 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v4);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (v51) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v4);
  }
  if (v54) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
  }
  if (v59 && v58 && v57 && v55) {
    WTF::fastFree(v55, v4);
  }
  if (v61 && v60[128]) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v60, v4);
  }
  if (v65 && v64) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v4);
  }
  if (v67 && v66[112]) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v66, v4);
  }
  if (v70 && v69) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v68, v4);
  }
  if (v73) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v4);
  }
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v74, v4);
}

void sub_19884F434(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v7 = (WTF::StringImpl *)STACK[0x4F8];
  STACK[0x4F8] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v8);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x270], v9);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)va, v10);
  if (LOBYTE(STACK[0x508]))
  {
    uint64_t v12 = (WTF::StringImpl *)STACK[0x500];
    STACK[0x500] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x520])) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x510], v11);
  }
  if (LOBYTE(STACK[0x538])) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x528], v11);
  }
  if (LOBYTE(STACK[0x560]) && LOBYTE(STACK[0x558]) && LOBYTE(STACK[0x550]) && STACK[0x540]) {
    WTF::fastFree((WTF *)STACK[0x540], v11);
  }
  if (LOBYTE(STACK[0x5F0]) && LOBYTE(STACK[0x5E8])) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x568], v11);
  }
  if (LOBYTE(STACK[0x610]) && LOBYTE(STACK[0x608])) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5F8], v11);
  }
  if (LOBYTE(STACK[0x690]) && LOBYTE(STACK[0x688])) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x618], v11);
  }
  if (LOBYTE(STACK[0x768]) && LOBYTE(STACK[0x760])) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x698], v11);
  }
  if (*(unsigned char *)(v5 - 144)) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 - 160, v11);
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v5 - 136, v11);
  _Unwind_Resume(a1);
}

void sub_19884F654()
{
}

void sub_19884F65C()
{
}

void sub_19884F664()
{
}

void sub_19884F66C()
{
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19884F6E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v8;
  LOWORD(v8) = *(_WORD *)(a2 + 72);
  *(void *)(a1 + 80) = 0;
  uint64_t v9 = a1 + 80;
  *(_WORD *)(a1 + 72) = v8;
  *(void *)(a1 + 88) = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 80) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 88) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 92) = v10;
  std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100](a1 + 96, (uint64_t *)(a2 + 96));
  std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v9 + 224), a2 + 304);
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  if (*(unsigned char *)(a2 + 440))
  {
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 432) = 0;
    uint64_t v11 = *(void *)(a2 + 424);
    *(void *)(a2 + 424) = 0;
    *(void *)(a1 + 424) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 432);
    *(_DWORD *)(a2 + 432) = 0;
    *(_DWORD *)(a1 + 432) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 436);
    *(_DWORD *)(a2 + 436) = 0;
    *(_DWORD *)(a1 + 436) = v11;
    *(unsigned char *)(a1 + 440) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 448), a2 + 448);
  std::__optional_move_base<WebCore::ApplePayDisbursementRequest,false>::__optional_move_base[abi:sn180100](a1 + 584, (uint64_t *)(a2 + 584));
  return a1;
}

void sub_19884F830(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 440)) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  }
  if (*(unsigned char *)(v2 + 416)) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(v5, a2);
  }
  if (*(unsigned char *)(v2 + 296)) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(v4, a2);
  }
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  uint64_t v9 = *(WTF::StringImpl **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = *(WTF::StringImpl **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = *(WTF::StringImpl **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 304);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 424);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 448);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 584);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 616);

  return IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 632);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v66, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v63, (uint64_t)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v60, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v58, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v54, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v52, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)v48, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v42, (IPC::Decoder *)a1);
  if (*a1)
  {
    if (v73)
    {
      v20[0] = v66[0];
      long long v5 = v67;
      long long v67 = 0uLL;
      long long v21 = v5;
      long long v22 = v68;
      long long v23 = v69;
      uint64_t v6 = v71;
      uint64_t v71 = 0;
      uint64_t v24 = v70;
      uint64_t v25 = v6;
      __int16 v26 = v72;
      if (v65)
      {
        uint64_t v27 = v63;
        uint64_t v7 = v64;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        uint64_t v28 = v7;
        if (v62)
        {
          std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v29, v60);
          if (v59)
          {
            std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v30, (uint64_t)v58);
            if (v57)
            {
              LOBYTE(v31) = 0;
              char v33 = 0;
              if (v56)
              {
                uint64_t v8 = v54;
                uint64_t v54 = 0;
                uint64_t v31 = v8;
                uint64_t v9 = v55;
                uint64_t v55 = 0;
                uint64_t v32 = v9;
                char v33 = 1;
              }
              if (v53)
              {
                std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)v52);
                if (v51)
                {
                  LOBYTE(v35) = 0;
                  char v38 = 0;
                  if (v50)
                  {
                    char v37 = 0;
                    if (v49)
                    {
                      uint64_t v10 = v48[0];
                      v48[0] = 0;
                      uint64_t v35 = v10;
                      uint64_t v36 = v48[1];
                      char v37 = 1;
                    }
                    char v38 = 1;
                  }
                  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v39, (uint64_t)v20);
                  if (v47)
                  {
                    uint64_t v11 = v45;
                    uint64_t v45 = 0;
                    v40[0] = v11;
                    uint64_t v12 = v46;
                    uint64_t v46 = 0;
                    v40[1] = v12;
                    if (v44)
                    {
                      uint64_t v13 = v42;
                      uint64_t v42 = 0;
                      v41[0] = v13;
                      uint64_t v14 = v43;
                      uint64_t v43 = 0;
                      v41[1] = v14;
                      std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)a2, (uint64_t)v39);
                      WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v15);
                      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v16);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v39, v17);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v20, v18);
                      goto LABEL_18;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[648] = 0;
LABEL_18:
  if (v44) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v4);
  }
  if (v47) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, (WTF::StringImpl *)v4);
  }
  if (v51 && v50 && v49 && v48[0]) {
    WTF::fastFree(v48[0], v4);
  }
  if (v53 && v52[128]) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v52, (WTF::StringImpl *)v4);
  }
  if (v57 && v56) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, (WTF::StringImpl *)v4);
  }
  if (v59 && v58[112]) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v58, (WTF::StringImpl *)v4);
  }
  if (v62 && v61) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v60, (WTF::StringImpl *)v4);
  }
  if (v65) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v4);
  }
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, (WTF::StringImpl *)v4);
}

void sub_19884FCB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v13);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x268], v14);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&a9, v15);
  if (LOBYTE(STACK[0x500])) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x4F0], v16);
  }
  if (LOBYTE(STACK[0x518])) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x508], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x540]) && LOBYTE(STACK[0x538]) && LOBYTE(STACK[0x530]) && STACK[0x520]) {
    WTF::fastFree((WTF *)STACK[0x520], v16);
  }
  if (LOBYTE(STACK[0x5D0]) && LOBYTE(STACK[0x5C8])) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x548], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x5F0]) && LOBYTE(STACK[0x5E8])) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5D8], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x670]) && LOBYTE(STACK[0x668])) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x5F8], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x748]) && LOBYTE(STACK[0x740])) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x678], (WTF::StringImpl *)v16);
  }
  if (*(unsigned char *)(v11 - 144)) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 - 160, v16);
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v11 - 136, (WTF::StringImpl *)v16);
  _Unwind_Resume(a1);
}

void sub_19884FE88()
{
}

void sub_19884FE90()
{
}

void sub_19884FE98()
{
}

unint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 304);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 424);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 448);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 584);

  return IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 616);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v62, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v59, (uint64_t)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v56, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v54, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v50, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v48, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)v44, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v41, (IPC::Decoder *)a1);
  if (*a1)
  {
    if (v69)
    {
      v19[0] = v62[0];
      long long v5 = v63;
      long long v63 = 0uLL;
      long long v20 = v5;
      long long v21 = v64;
      long long v22 = v65;
      uint64_t v6 = v67;
      uint64_t v67 = 0;
      uint64_t v23 = v66;
      uint64_t v24 = v6;
      __int16 v25 = v68;
      if (v61)
      {
        uint64_t v26 = v59;
        uint64_t v7 = v60;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t v27 = v7;
        if (v58)
        {
          std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v28, v56);
          if (v55)
          {
            std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v29, (uint64_t)v54);
            if (v53)
            {
              LOBYTE(v30) = 0;
              char v32 = 0;
              if (v52)
              {
                uint64_t v8 = v50;
                uint64_t v50 = 0;
                uint64_t v30 = v8;
                uint64_t v9 = v51;
                uint64_t v51 = 0;
                uint64_t v31 = v9;
                char v32 = 1;
              }
              if (v49)
              {
                std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v33, (uint64_t)v48);
                if (v47)
                {
                  LOBYTE(v34) = 0;
                  char v37 = 0;
                  if (v46)
                  {
                    char v36 = 0;
                    if (v45)
                    {
                      uint64_t v10 = v44[0];
                      v44[0] = 0;
                      char v34 = v10;
                      uint64_t v35 = v44[1];
                      char v36 = 1;
                    }
                    char v37 = 1;
                  }
                  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v38, (uint64_t)v19);
                  if (v43)
                  {
                    uint64_t v11 = v41;
                    uint64_t v41 = 0;
                    uint64_t v39 = v11;
                    uint64_t v12 = v42;
                    uint64_t v42 = 0;
                    uint64_t v40 = v12;
                    WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(a2, (uint64_t)v38);
                    uint64_t v13 = v39;
                    uint64_t v39 = 0;
                    *(void *)(a2 + 616) = v13;
                    uint64_t v14 = v40;
                    uint64_t v40 = 0;
                    *(void *)(a2 + 624) = v14;
                    *(unsigned char *)(a2 + 632) = 1;
                    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v15);
                    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v38, v16);
                    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v19, v17);
                    goto LABEL_17;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 632) = 0;
LABEL_17:
  if (v43) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v4);
  }
  if (v47 && v46 && v45 && v44[0]) {
    WTF::fastFree(v44[0], v4);
  }
  if (v49 && v48[128]) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v48, (WTF::StringImpl *)v4);
  }
  if (v53 && v52) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, (WTF::StringImpl *)v4);
  }
  if (v55 && v54[112]) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v54, (WTF::StringImpl *)v4);
  }
  if (v58 && v57) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v56, (WTF::StringImpl *)v4);
  }
  if (v61) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v4);
  }
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, (WTF::StringImpl *)v4);
}

void sub_198850238(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x270], v6);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)va, v7);
  if (LOBYTE(STACK[0x4F8])) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x4E8], v8);
  }
  if (LOBYTE(STACK[0x520]) && LOBYTE(STACK[0x518]) && LOBYTE(STACK[0x510]) && STACK[0x500]) {
    WTF::fastFree((WTF *)STACK[0x500], v8);
  }
  if (LOBYTE(STACK[0x5B0]) && LOBYTE(STACK[0x5A8])) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x528], (WTF::StringImpl *)v8);
  }
  if (LOBYTE(STACK[0x5D0]) && LOBYTE(STACK[0x5C8])) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5B8], (WTF::StringImpl *)v8);
  }
  if (LOBYTE(STACK[0x650]) && LOBYTE(STACK[0x648])) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x5D8], (WTF::StringImpl *)v8);
  }
  if (LOBYTE(STACK[0x728]) && LOBYTE(STACK[0x720])) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x658], (WTF::StringImpl *)v8);
  }
  if (*(unsigned char *)(v4 - 144)) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 - 160, v8);
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v4 - 136, (WTF::StringImpl *)v8);
  _Unwind_Resume(a1);
}

void sub_1988503F0()
{
}

void sub_1988503F8()
{
}

_DWORD *IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::encode(IPC::Encoder *a1, __int16 *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 12);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 4));

  return IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayPaymentOrderDetails> const&>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  int v4 = IPC::Decoder::decode<unsigned short>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v19);
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ApplePayPaymentOrderDetails>>((uint64_t)a1, (uint64_t)&v15);
  if (!*(void *)a1) {
    goto LABEL_14;
  }
  if ((v4 & 0xFF0000) == 0 || (v11 = v4, !v21) || (v12[0] = v19, uint64_t v7 = v20, v19 = 0, v20 = 0, v12[1] = v7, !v18))
  {
    __break(1u);
LABEL_14:
    *a2 = 0;
    a2[64] = 0;
    goto LABEL_8;
  }
  LOBYTE(v13[0]) = 0;
  char v14 = 0;
  if (v17)
  {
    long long v8 = v16;
    v13[0] = v15;
    long long v15 = 0u;
    long long v16 = 0u;
    v13[1] = v8;
    char v14 = 1;
  }
  std::__optional_destruct_base<WebCore::ApplePayPaymentAuthorizationResult,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentAuthorizationResult>((uint64_t)a2, (uint64_t)&v11);
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
  uint64_t result = WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
LABEL_8:
  if (v18) {
    uint64_t result = std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
  }
  if (v21) {
    return WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  }
  return result;
}

void sub_19885056C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](v23, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v26);
  if (a22) {
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17, v27);
  }
  if (*(unsigned char *)(v24 - 40)) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24 - 56, v27);
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::ApplePayPaymentOrderDetails>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::decode<IPC::Decoder>((WTF::StringImpl **)a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    long long v5 = *(WTF::StringImpl **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198850620(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 40)) {
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayCouponCodeUpdate,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v66, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v63, (uint64_t)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v60, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v58, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v54, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v52, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)v48, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v42, (IPC::Decoder *)a1);
  if (*a1)
  {
    if (v73)
    {
      v20[0] = v66[0];
      long long v5 = v67;
      long long v67 = 0uLL;
      long long v21 = v5;
      long long v22 = v68;
      long long v23 = v69;
      uint64_t v6 = v71;
      uint64_t v71 = 0;
      uint64_t v24 = v70;
      uint64_t v25 = v6;
      __int16 v26 = v72;
      if (v65)
      {
        uint64_t v27 = v63;
        uint64_t v7 = v64;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        uint64_t v28 = v7;
        if (v62)
        {
          std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v29, v60);
          if (v59)
          {
            std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v30, (uint64_t)v58);
            if (v57)
            {
              LOBYTE(v31) = 0;
              char v33 = 0;
              if (v56)
              {
                uint64_t v8 = v54;
                uint64_t v54 = 0;
                uint64_t v31 = v8;
                uint64_t v9 = v55;
                uint64_t v55 = 0;
                uint64_t v32 = v9;
                char v33 = 1;
              }
              if (v53)
              {
                std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)v52);
                if (v51)
                {
                  LOBYTE(v35) = 0;
                  char v38 = 0;
                  if (v50)
                  {
                    char v37 = 0;
                    if (v49)
                    {
                      uint64_t v10 = v48[0];
                      v48[0] = 0;
                      uint64_t v35 = v10;
                      char v36 = v48[1];
                      char v37 = 1;
                    }
                    char v38 = 1;
                  }
                  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v39, (uint64_t)v20);
                  if (v47)
                  {
                    uint64_t v11 = v45;
                    uint64_t v45 = 0;
                    v40[0] = v11;
                    uint64_t v12 = v46;
                    uint64_t v46 = 0;
                    v40[1] = v12;
                    if (v44)
                    {
                      uint64_t v13 = v42;
                      uint64_t v42 = 0;
                      v41[0] = v13;
                      uint64_t v14 = v43;
                      uint64_t v43 = 0;
                      v41[1] = v14;
                      std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)a2, (uint64_t)v39);
                      WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v15);
                      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v16);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v39, v17);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v20, v18);
                      goto LABEL_18;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[648] = 0;
LABEL_18:
  if (v44) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v4);
  }
  if (v47) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, (WTF::StringImpl *)v4);
  }
  if (v51 && v50 && v49 && v48[0]) {
    WTF::fastFree(v48[0], v4);
  }
  if (v53 && v52[128]) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v52, (WTF::StringImpl *)v4);
  }
  if (v57 && v56) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, (WTF::StringImpl *)v4);
  }
  if (v59 && v58[112]) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v58, (WTF::StringImpl *)v4);
  }
  if (v62 && v61) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v60, (WTF::StringImpl *)v4);
  }
  if (v65) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v4);
  }
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, (WTF::StringImpl *)v4);
}

void sub_198850978(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v13);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x268], v14);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&a9, v15);
  if (LOBYTE(STACK[0x500])) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x4F0], v16);
  }
  if (LOBYTE(STACK[0x518])) {
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x508], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x540]) && LOBYTE(STACK[0x538]) && LOBYTE(STACK[0x530]) && STACK[0x520]) {
    WTF::fastFree((WTF *)STACK[0x520], v16);
  }
  if (LOBYTE(STACK[0x5D0]) && LOBYTE(STACK[0x5C8])) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x548], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x5F0]) && LOBYTE(STACK[0x5E8])) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5D8], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x670]) && LOBYTE(STACK[0x668])) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x5F8], (WTF::StringImpl *)v16);
  }
  if (LOBYTE(STACK[0x748]) && LOBYTE(STACK[0x740])) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x678], (WTF::StringImpl *)v16);
  }
  if (*(unsigned char *)(v11 - 144)) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 - 160, v16);
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v11 - 136, (WTF::StringImpl *)v16);
  _Unwind_Resume(a1);
}

void sub_198850B48()
{
}

void sub_198850B50()
{
}

void sub_198850B58()
{
}

uint64_t IPC::ArgumentCoder<WebCore::ApplicationManifest::Icon,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 40);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  char v5 = *(unsigned char *)(a2 + 64);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

unint64_t IPC::ArgumentCoder<WebCore::ApplicationManifest::Shortcut,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);

  return IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  unint64_t v6 = v4;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v4 >= 0x38E3)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplicationManifest::Icon>(v29, a2);
      if (!v35) {
        goto LABEL_21;
      }
      unsigned int v18 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>((uint64_t)&v36, (unint64_t)v29);
      }
      else
      {
        uint64_t v20 = v36;
        WTF::URL::URL(v36 + 72 * HIDWORD(v37), v29);
        uint64_t v21 = v20 + 72 * v18;
        *(void *)(v21 + 40) = 0;
        *(void *)(v21 + 48) = 0;
        uint64_t v22 = v30;
        uint64_t v30 = 0;
        *(void *)(v21 + 40) = v22;
        LODWORD(v22) = v31;
        int v31 = 0;
        *(_DWORD *)(v21 + 48) = v22;
        LODWORD(v22) = v32;
        int v32 = 0;
        *(_DWORD *)(v21 + 52) = v22;
        uint64_t v23 = v33;
        uint64_t v33 = 0;
        *(void *)(v21 + 56) = v23;
        *(unsigned char *)(v21 + 64) = v34;
        ++HIDWORD(v37);
      }
      std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v19);
      if (!--v6)
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v36, HIDWORD(v37));
        uint64_t v24 = v36;
        uint64_t v36 = 0;
        *(void *)a1 = v24;
        int v16 = v37;
        int v15 = HIDWORD(v37);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v37) = 72 * (int)v4 / 0x48u;
    uint64_t v36 = WTF::fastMalloc((WTF *)(72 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplicationManifest::Icon>(v29, a2);
      if (!v35) {
        break;
      }
      unsigned int v8 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>((uint64_t)&v36, (unint64_t)v29);
      }
      else
      {
        uint64_t v10 = v36;
        WTF::URL::URL(v36 + 72 * HIDWORD(v37), v29);
        uint64_t v11 = v10 + 72 * v8;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        uint64_t v12 = v30;
        uint64_t v30 = 0;
        *(void *)(v11 + 40) = v12;
        LODWORD(v12) = v31;
        int v31 = 0;
        *(_DWORD *)(v11 + 48) = v12;
        LODWORD(v12) = v32;
        int v32 = 0;
        *(_DWORD *)(v11 + 52) = v12;
        uint64_t v13 = v33;
        uint64_t v33 = 0;
        *(void *)(v11 + 56) = v13;
        *(unsigned char *)(v11 + 64) = v34;
        ++HIDWORD(v37);
      }
      std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v9);
      if (!--v6)
      {
        uint64_t v14 = v36;
        int v16 = v37;
        int v15 = HIDWORD(v37);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v25);
LABEL_22:
    uint64_t v26 = *(void *)a2;
    uint64_t v27 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v28 = v27 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
    }
    return result;
  }
  int v15 = 0;
  int v16 = 0;
  uint64_t v14 = 0;
LABEL_13:
  uint64_t v36 = 0;
  *(void *)a1 = v14;
LABEL_14:
  uint64_t v37 = 0;
  *(_DWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 12) = v15;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v5);
}

void sub_198850E98(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 80));
  char v6 = *(unsigned char *)(a2 + 81);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 82);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 128));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 168));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 208));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 216));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 224);
  IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 240);
  return IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 256);
}

void IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v163);
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(char **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v67 = 0;
    long long v68 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v69 = *((void *)a1 + 3);
    if (v69)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v69 + 16))(v69);
        long long v68 = *(char **)a1;
        unint64_t v67 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v67 = 0;
        long long v68 = 0;
      }
    }
    goto LABEL_124;
  }
  uint64_t v7 = &v5[v6];
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v67 = v4;
    long long v68 = 0;
LABEL_124:
    unint64_t v4 = 0;
    char v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v70 = *((void *)a1 + 3);
    if (v70)
    {
      if (v67)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v70 + 16))(v70, v68, v67);
        char v5 = *(char **)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_125;
  }
  unsigned int v8 = *v7;
  if (v8 < 3)
  {
    unsigned int v9 = v8 | 0x100;
    goto LABEL_5;
  }
LABEL_125:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v71 = *((void *)a1 + 3);
  if (v71 && v4) {
    (*(void (**)(uint64_t, char *))(*(void *)v71 + 16))(v71, v5);
  }
  unsigned int v9 = 0;
LABEL_5:
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v161);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v159);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v157);
  IPC::Decoder::decode<WTF::URL>(a1, &v153);
  unint64_t v10 = *((void *)a1 + 1);
  uint64_t v11 = *(char **)a1;
  unint64_t v12 = *((void *)a1 + 2) - *(void *)a1;
  if (v10 <= v12)
  {
    unint64_t v72 = 0;
    char v73 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v74 = *((void *)a1 + 3);
    if (v74)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v74 + 16))(v74);
        char v73 = *(char **)a1;
        unint64_t v72 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v72 = 0;
        char v73 = 0;
      }
    }
    goto LABEL_128;
  }
  uint64_t v13 = &v11[v12];
  *((void *)a1 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v72 = v10;
    char v73 = 0;
LABEL_128:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v75 = *((void *)a1 + 3);
    if (v75 && v72)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v75 + 16))(v75, v73, v72);
      unsigned int v14 = 0;
      uint64_t v11 = *(char **)a1;
      unint64_t v10 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = 0;
      unsigned int v14 = 0;
    }
    goto LABEL_130;
  }
  unsigned int v14 = *v13;
  if (v14 < 2)
  {
    uint64_t v15 = 0;
    char v16 = 1;
    goto LABEL_9;
  }
LABEL_130:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v76 = *((void *)a1 + 3);
  if (!v76)
  {
    uint64_t v11 = 0;
    char v17 = 0;
    unint64_t v10 = 0;
LABEL_132:
    uint64_t v15 = 1;
LABEL_133:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v77 = *((void *)a1 + 3);
    if (v77)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v77 + 16))(v77, v11);
        uint64_t v78 = *(char **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v78 = 0;
      }
    }
    else
    {
      uint64_t v78 = 0;
      unint64_t v10 = 0;
    }
    goto LABEL_135;
  }
  if (!v10)
  {
    uint64_t v11 = 0;
    char v17 = 0;
    goto LABEL_132;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v76 + 16))(v76, v11);
  char v16 = 0;
  uint64_t v11 = *(char **)a1;
  unint64_t v10 = *((void *)a1 + 1);
  uint64_t v15 = 1;
LABEL_9:
  if (v14) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  if (v10 <= *((void *)a1 + 2) - (void)v11) {
    goto LABEL_133;
  }
  unsigned int v18 = (unsigned __int8 *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v18 + 1;
  if (!v11)
  {
    uint64_t v78 = 0;
LABEL_135:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v79 = *((void *)a1 + 3);
    if (v79)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v79 + 16))(v79, v78);
        uint64_t v11 = *(char **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v10 = 0;
    }
    goto LABEL_137;
  }
  unsigned int v19 = *v18;
  if (v19 < 4)
  {
    unsigned int v20 = v19 | 0x100;
    goto LABEL_16;
  }
LABEL_137:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v80 = *((void *)a1 + 3);
  if (!v80)
  {
    uint64_t v11 = 0;
    char v26 = 0;
    unsigned int v20 = 0;
    unint64_t v10 = 0;
    goto LABEL_139;
  }
  if (!v10)
  {
    uint64_t v11 = 0;
    char v26 = 0;
    unsigned int v20 = 0;
LABEL_139:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v81 = *((void *)a1 + 3);
    if (v81)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v81 + 16))(v81, v11);
        unint64_t v82 = *(char **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v82 = 0;
      }
    }
    else
    {
      unint64_t v82 = 0;
      unint64_t v10 = 0;
    }
    goto LABEL_141;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v80 + 16))(v80, v11);
  unsigned int v20 = 0;
  uint64_t v11 = *(char **)a1;
  unint64_t v10 = *((void *)a1 + 1);
LABEL_16:
  if (v10 <= *((void *)a1 + 2) - (void)v11)
  {
    char v26 = v20;
    goto LABEL_139;
  }
  uint64_t v21 = (unsigned __int8 *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v21 + 1;
  if (!v11)
  {
    char v26 = v20;
    unint64_t v82 = 0;
LABEL_141:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v83 = *((void *)a1 + 3);
    if (v83)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v83 + 16))(v83, v82);
        uint64_t v11 = *(char **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v10 = 0;
    }
    goto LABEL_143;
  }
  unsigned int v22 = *v21;
  if (v22 < 2)
  {
    if (v22)
    {
      unsigned __int16 v23 = IPC::Decoder::decode<WebCore::ScreenOrientationLockType>((uint64_t *)a1);
      unsigned int v24 = (v23 > 0xFFu) << 16;
      if ((v23 & 0xFF00) != 0) {
        int v25 = v23;
      }
      else {
        int v25 = 0;
      }
      int v103 = 256;
      int v104 = v25;
    }
    else
    {
      int v103 = 0;
      int v104 = 0;
      unsigned int v24 = 0x10000;
    }
    char v26 = v20;
    goto LABEL_26;
  }
  char v26 = v20;
LABEL_143:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v84 = *((void *)a1 + 3);
  if (v84 && v10) {
    (*(void (**)(uint64_t, char *))(*(void *)v84 + 16))(v84, v11);
  }
  unsigned int v24 = 0;
  int v103 = 0;
  int v104 = 0;
LABEL_26:
  unsigned int v105 = v24;
  if (!HIWORD(v24))
  {
    uint64_t v85 = *(char **)a1;
    uint64_t v86 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v87 = *((void *)a1 + 3);
    if (v87)
    {
      if (v86) {
        (*(void (**)(uint64_t, char *))(*(void *)v87 + 16))(v87, v85);
      }
    }
  }
  IPC::Decoder::decode<WTF::URL>(a1, &v149);
  IPC::Decoder::decode<WTF::URL>(a1, &v145);
  IPC::Decoder::decode<WTF::URL>(a1, &v141);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v139);
  if (!v140)
  {
    uint64_t v88 = *(char **)a1;
    uint64_t v89 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v90 = *((void *)a1 + 3);
    if (v90)
    {
      if (v89) {
        (*(void (**)(uint64_t, char *))(*(void *)v90 + 16))(v90, v88);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v137);
  if (!v138)
  {
    uint64_t v27 = *(char **)a1;
    uint64_t v91 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v92 = *((void *)a1 + 3);
    if (v92)
    {
      if (v91) {
        (*(void (**)(uint64_t, char *))(*(void *)v92 + 16))(v92, v27);
      }
    }
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v27, (uint64_t)&v134);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v131, a1);
  unint64_t v28 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v29)
  {
    unint64_t v30 = v28;
    uint64_t v165 = 0;
    uint64_t v166 = 0;
    if (v28 >= 0x4000)
    {
      char v102 = v26;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ApplicationManifest::Shortcut>(&v106, a1);
        if (!(_BYTE)v109) {
          break;
        }
        if (HIDWORD(v166) == v166)
        {
          WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Shortcut>((uint64_t)&v165, (unint64_t)&v106);
        }
        else
        {
          uint64_t v95 = v15;
          uint64_t v96 = a2;
          unint64_t v97 = v165 + ((unint64_t)HIDWORD(v166) << 6);
          uint64_t v98 = v106;
          uint64_t v106 = 0;
          *(void *)unint64_t v97 = v98;
          WTF::URL::URL(v97 + 8, v107);
          *(void *)(v97 + 48) = 0;
          *(void *)(v97 + 56) = 0;
          uint64_t v99 = v108;
          *(void *)&long long v108 = 0;
          *(void *)(v97 + 48) = v99;
          LODWORD(v99) = DWORD2(v108);
          DWORD2(v108) = 0;
          *(_DWORD *)(v97 + 56) = v99;
          LODWORD(v99) = HIDWORD(v108);
          HIDWORD(v108) = 0;
          *(_DWORD *)(v97 + 60) = v99;
          ++HIDWORD(v166);
          a2 = v96;
          uint64_t v15 = v95;
          char v26 = v102;
        }
        std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v106, v94);
        if (!--v30)
        {
          WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v165, HIDWORD(v166));
          uint64_t v100 = v165;
          uint64_t v165 = 0;
          uint64_t v128 = v100;
          unsigned int v40 = v166;
          unsigned int v39 = HIDWORD(v166);
          goto LABEL_42;
        }
      }
      LOBYTE(v128) = 0;
      char v130 = 0;
      std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v106, v93);
    }
    else
    {
      if (!v28)
      {
        unsigned int v39 = 0;
        unsigned int v40 = 0;
        uint64_t v38 = 0;
LABEL_41:
        uint64_t v165 = 0;
        uint64_t v128 = v38;
LABEL_42:
        uint64_t v166 = 0;
        unint64_t v129 = __PAIR64__(v39, v40);
        char v130 = 1;
        uint64_t v41 = WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v29);
        goto LABEL_46;
      }
      uint64_t v31 = WTF::fastMalloc((WTF *)(v28 << 6));
      char v101 = v17;
      unsigned int v32 = v9;
      LODWORD(v166) = v30;
      uint64_t v165 = v31;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ApplicationManifest::Shortcut>(&v106, a1);
        if (!(_BYTE)v109) {
          break;
        }
        if (HIDWORD(v166) == v166)
        {
          WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Shortcut>((uint64_t)&v165, (unint64_t)&v106);
        }
        else
        {
          unint64_t v35 = v165 + ((unint64_t)HIDWORD(v166) << 6);
          uint64_t v36 = v106;
          uint64_t v106 = 0;
          *(void *)unint64_t v35 = v36;
          WTF::URL::URL(v35 + 8, v107);
          *(void *)(v35 + 48) = 0;
          *(void *)(v35 + 56) = 0;
          uint64_t v37 = v108;
          *(void *)&long long v108 = 0;
          *(void *)(v35 + 48) = v37;
          LODWORD(v37) = DWORD2(v108);
          DWORD2(v108) = 0;
          *(_DWORD *)(v35 + 56) = v37;
          LODWORD(v37) = HIDWORD(v108);
          HIDWORD(v108) = 0;
          *(_DWORD *)(v35 + 60) = v37;
          ++HIDWORD(v166);
        }
        std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v106, v34);
        if (!--v30)
        {
          uint64_t v38 = v165;
          unsigned int v40 = v166;
          unsigned int v39 = HIDWORD(v166);
          unsigned int v9 = v32;
          char v17 = v101;
          goto LABEL_41;
        }
      }
      LOBYTE(v128) = 0;
      char v130 = 0;
      std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v106, v33);
      unsigned int v9 = v32;
      char v17 = v101;
    }
    WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v44);
  }
  else
  {
    LOBYTE(v128) = 0;
    char v130 = 0;
  }
  uint64_t v42 = *(char **)a1;
  uint64_t v43 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v41 = *((void *)a1 + 3);
  if (v41) {
    goto LABEL_117;
  }
LABEL_46:
  while (*(void *)a1)
  {
    if (v164)
    {
      uint64_t v45 = (uint64_t)v163;
      char v163 = 0;
      uint64_t v106 = v45;
      if (v9 > 0xFF)
      {
        LOBYTE(v107[0]) = v9;
        if (v162)
        {
          uint64_t v46 = (uint64_t)v161;
          long long v161 = 0;
          v107[1] = v46;
          if (v160)
          {
            uint64_t v47 = (uint64_t)v159;
            long long v159 = 0;
            v107[2] = v47;
            if (v158)
            {
              uint64_t v48 = (uint64_t)v157;
              char v157 = 0;
              v107[3] = v48;
              if (v156)
              {
                uint64_t v49 = (uint64_t)v153;
                char v153 = 0;
                v107[4] = v49;
                long long v108 = v154;
                long long v109 = v155;
                LODWORD(v154) = v154 & 0xFFFFFFFE;
                if (!v15)
                {
                  char v110 = v17;
                  if (v20 > 0xFF)
                  {
                    char v111 = v26;
                    if ((v104 | v105 | v103) >> 16)
                    {
                      __int16 v112 = v104 | v105 | v103;
                      if (v152)
                      {
                        char v50 = v149;
                        uint64_t v149 = 0;
                        uint64_t v113 = v50;
                        long long v114 = v150;
                        long long v115 = v151;
                        LODWORD(v150) = v150 & 0xFFFFFFFE;
                        if (v148)
                        {
                          char v51 = v145;
                          long long v145 = 0;
                          uint64_t v116 = v51;
                          long long v117 = v146;
                          long long v118 = v147;
                          LODWORD(v146) = v146 & 0xFFFFFFFE;
                          if (v144)
                          {
                            char v52 = v141;
                            int v141 = 0;
                            uint64_t v119 = v52;
                            long long v120 = v142;
                            long long v121 = v143;
                            LODWORD(v142) = v142 & 0xFFFFFFFE;
                            if (v140)
                            {
                              uint64_t v41 = WebCore::Color::Color();
                              if (v138)
                              {
                                uint64_t v41 = WebCore::Color::Color();
                                if (v136)
                                {
                                  uint64_t v122 = v134;
                                  uint64_t v53 = v135;
                                  uint64_t v134 = 0;
                                  uint64_t v135 = 0;
                                  uint64_t v123 = v53;
                                  if (v133)
                                  {
                                    uint64_t v124 = v131;
                                    uint64_t v54 = v132;
                                    uint64_t v131 = 0;
                                    uint64_t v132 = 0;
                                    uint64_t v125 = v54;
                                    if (v130)
                                    {
                                      uint64_t v126 = v128;
                                      unint64_t v55 = v129;
                                      uint64_t v128 = 0;
                                      unint64_t v129 = 0;
                                      unint64_t v127 = v55;
                                      WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a2, &v106);
                                      a2[272] = 1;
                                      WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&v106, v56);
                                      goto LABEL_65;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_117:
    if (v43) {
      uint64_t v41 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v41 + 16))(v41, v42);
    }
  }
  *a2 = 0;
  a2[272] = 0;
LABEL_65:
  if (v130) {
    WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v42);
  }
  if (v133) {
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v131, v42);
  }
  if (v136) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v42);
  }
  if (v138)
  {
    if ((v137 & 0x8000000000000) != 0)
    {
      char v65 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v137 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v65);
        WTF::fastFree((WTF *)v65, v42);
      }
    }
  }
  if (v140)
  {
    if ((v139 & 0x8000000000000) != 0)
    {
      uint64_t v66 = (unsigned int *)(v139 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v66);
        WTF::fastFree((WTF *)v66, v42);
      }
    }
  }
  if (v144)
  {
    char v57 = v141;
    int v141 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  if (v148)
  {
    char v58 = v145;
    long long v145 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2) {
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  if (v152)
  {
    char v59 = v149;
    uint64_t v149 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  if (v156)
  {
    uint64_t v60 = v153;
    char v153 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
  }
  if (v158)
  {
    char v61 = v157;
    char v157 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
  }
  if (v160)
  {
    char v62 = v159;
    long long v159 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  if (v162)
  {
    uint64_t v63 = v161;
    long long v161 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2) {
        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v63 -= 2;
      }
    }
  }
  if (v164)
  {
    uint64_t v64 = v163;
    char v163 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
}

void sub_198851D20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,WTF::StringImpl *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a57)
  {
    if ((a56 & 0x8000000000000) != 0)
    {
      uint64_t v80 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a56 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80);
        WTF::fastFree((WTF *)v80, a2);
      }
    }
  }
  if (a59)
  {
    if ((a58 & 0x8000000000000) != 0)
    {
      uint64_t v79 = (unsigned int *)(a58 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a58 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v79);
        WTF::fastFree((WTF *)v79, a2);
      }
    }
  }
  if (a65 && a60)
  {
    if (*(_DWORD *)a60 == 2) {
      WTF::StringImpl::destroy(a60, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a60 -= 2;
    }
  }
  if (a71 && a66)
  {
    if (*(_DWORD *)a66 == 2) {
      WTF::StringImpl::destroy(a66, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a66 -= 2;
    }
  }
  if (LOBYTE(STACK[0x220]) && a72)
  {
    if (*(_DWORD *)a72 == 2) {
      WTF::StringImpl::destroy(a72, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a72 -= 2;
    }
  }
  if (*(unsigned char *)(v72 - 176))
  {
    uint64_t v74 = *(WTF::StringImpl **)(v72 - 216);
    *(void *)(v72 - 216) = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v72 - 160))
  {
    uint64_t v75 = *(WTF::StringImpl **)(v72 - 168);
    *(void *)(v72 - 168) = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v72 - 144))
  {
    uint64_t v76 = *(WTF::StringImpl **)(v72 - 152);
    *(void *)(v72 - 152) = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v72 - 128))
  {
    uint64_t v77 = *(WTF::StringImpl **)(v72 - 136);
    *(void *)(v72 - 136) = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v72 - 112))
  {
    uint64_t v78 = *(WTF::StringImpl **)(v72 - 120);
    *(void *)(v72 - 120) = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2) {
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v78 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)a2);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, a2 + 200);
  IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, *(void *)(a2 + 224));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 232));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 233));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 234));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 235));
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v63);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v60, v2);
  IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v58, (uint64_t *)v2);
  unint64_t v4 = *((void *)v2 + 1);
  char v5 = *(WTF::StringImpl **)v2;
  unint64_t v6 = *((void *)v2 + 2) - *(void *)v2;
  if (v4 <= v6) {
    goto LABEL_38;
  }
  uint64_t v7 = (unsigned __int8 *)v5 + v6;
  uint64_t v8 = (uint64_t)v5 + v6 + 1;
  *((void *)v2 + 2) = v8;
  if (!v5)
  {
    unint64_t v35 = v4;
    uint64_t v36 = 0;
    goto LABEL_39;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v39 = *((void *)v2 + 3);
    if (!v39 || !v4)
    {
      char v12 = 0;
      unint64_t v40 = 0;
      char v5 = 0;
      int v10 = 1;
LABEL_43:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v41 = *((void *)v2 + 3);
      if (v41 && v40)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v41 + 16))(v41, v5, v40);
        unsigned int v16 = 0;
        char v5 = *(WTF::StringImpl **)v2;
        unint64_t v4 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_45;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v5);
    char v11 = 0;
    char v5 = *(WTF::StringImpl **)v2;
    unint64_t v4 = *((void *)v2 + 1);
    int v10 = 1;
    uint64_t v8 = *((void *)v2 + 2);
LABEL_5:
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    unint64_t v13 = v8 - (void)v5;
    if (v4 <= v13)
    {
      unint64_t v40 = 0;
      uint64_t v49 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v49 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
        char v5 = *(WTF::StringImpl **)v2;
        unint64_t v40 = *((void *)v2 + 1);
      }
      else
      {
        char v5 = 0;
      }
      goto LABEL_43;
    }
    unsigned int v14 = (unsigned __int8 *)v5 + v13;
    uint64_t v15 = (uint64_t)v5 + v13 + 1;
    *((void *)v2 + 2) = v15;
    if (!v5)
    {
      unint64_t v40 = v4;
      goto LABEL_43;
    }
    unsigned int v16 = *v14;
    if (v16 < 2)
    {
      int v17 = 0;
      char v18 = 1;
      goto LABEL_12;
    }
LABEL_45:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v42 = *((void *)v2 + 3);
    if (!v42 || !v4)
    {
      char v19 = 0;
      unint64_t v43 = 0;
      char v5 = 0;
      int v17 = 1;
LABEL_47:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v44 = *((void *)v2 + 3);
      if (v44 && v43)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v44 + 16))(v44, v5, v43);
        unsigned int v23 = 0;
        char v5 = *(WTF::StringImpl **)v2;
        unint64_t v4 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
        unsigned int v23 = 0;
      }
      goto LABEL_49;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v5);
    char v18 = 0;
    char v5 = *(WTF::StringImpl **)v2;
    unint64_t v4 = *((void *)v2 + 1);
    int v17 = 1;
    uint64_t v15 = *((void *)v2 + 2);
LABEL_12:
    if (v16) {
      char v19 = v18;
    }
    else {
      char v19 = 0;
    }
    unint64_t v20 = v15 - (void)v5;
    if (v4 <= v20)
    {
      unint64_t v43 = 0;
      uint64_t v50 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v50 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
        char v5 = *(WTF::StringImpl **)v2;
        unint64_t v43 = *((void *)v2 + 1);
      }
      else
      {
        char v5 = 0;
      }
      goto LABEL_47;
    }
    uint64_t v21 = (unsigned __int8 *)v5 + v20;
    uint64_t v22 = (uint64_t)v5 + v20 + 1;
    *((void *)v2 + 2) = v22;
    if (!v5)
    {
      unint64_t v43 = v4;
      goto LABEL_47;
    }
    unsigned int v23 = *v21;
    if (v23 < 2)
    {
      int v24 = 0;
      char v25 = 1;
      goto LABEL_19;
    }
LABEL_49:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v45 = *((void *)v2 + 3);
    if (!v45 || !v4)
    {
      char v26 = 0;
      unint64_t v46 = 0;
      char v5 = 0;
      int v24 = 1;
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v45 + 16))(v45, v5);
    char v25 = 0;
    char v5 = *(WTF::StringImpl **)v2;
    unint64_t v4 = *((void *)v2 + 1);
    int v24 = 1;
    uint64_t v22 = *((void *)v2 + 2);
LABEL_19:
    char v26 = v23 ? v25 : 0;
    unint64_t v27 = v22 - (void)v5;
    if (v4 <= v27) {
      break;
    }
    unint64_t v28 = (unsigned __int8 *)v5 + v27;
    *((void *)v2 + 2) = v28 + 1;
    if (!v5)
    {
      unint64_t v46 = v4;
      goto LABEL_51;
    }
    unsigned int v29 = *v28;
    if (v29 > 1) {
      goto LABEL_53;
    }
    int v30 = 0;
    uint64_t v2 = (IPC::Decoder *)(v29 != 0);
LABEL_26:
    if (v65)
    {
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v52, (uint64_t)v63);
      uint64_t v31 = v64;
      uint64_t v64 = 0;
      uint64_t v53 = v31;
      if (v62)
      {
        __int16 v54 = v60;
        long long v32 = v61;
        long long v61 = 0uLL;
        long long v55 = v32;
        if (v59)
        {
          uint64_t v33 = v58;
          char v58 = 0;
          char v56 = v33;
          if (!v10)
          {
            LOBYTE(v57) = v12;
            if (!v17)
            {
              BYTE1(v57) = v19;
              if (!v24)
              {
                BYTE2(v57) = v26;
                if (!v30)
                {
                  HIBYTE(v57) = (_BYTE)v2;
                  WebCore::ResourceRequestBase::ResourceRequestBase(a2, (uint64_t)v52);
                  *(void *)(a2 + 192) = v53;
                  *(_WORD *)(a2 + 200) = v54;
                  *(_OWORD *)(a2 + 208) = v55;
                  *(void *)(a2 + 224) = v56;
                  *(_DWORD *)(a2 + 232) = v57;
                  *(unsigned char *)(a2 + 240) = 1;
                  uint64_t v53 = 0;
                  char v56 = 0;
                  long long v55 = 0uLL;
                  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v52);
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_38:
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v37 = *((void *)v2 + 3);
    if (v37)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
        uint64_t v36 = *(void *)v2;
        unint64_t v35 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v35 = 0;
        uint64_t v36 = 0;
      }
    }
LABEL_39:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v38 = *((void *)v2 + 3);
    if (v38 && v35)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
      unsigned int v9 = 0;
      char v5 = *(WTF::StringImpl **)v2;
      unint64_t v4 = *((void *)v2 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v5 = 0;
      unsigned int v9 = 0;
    }
  }
  unint64_t v46 = 0;
  uint64_t v51 = *((void *)v2 + 3);
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  if (v51 && v4)
  {
    (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
    char v5 = *(WTF::StringImpl **)v2;
    unint64_t v46 = *((void *)v2 + 1);
  }
  else
  {
    char v5 = 0;
  }
LABEL_51:
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v47 = *((void *)v2 + 3);
  if (v47 && v46)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v47 + 16))(v47, v5, v46);
    char v5 = *(WTF::StringImpl **)v2;
    unint64_t v4 = *((void *)v2 + 1);
  }
  else
  {
    unint64_t v4 = 0;
    char v5 = 0;
  }
LABEL_53:
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v48 = *((void *)v2 + 3);
  if (v48)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v48 + 16))(v48, v5);
      if (*(void *)v2)
      {
        uint64_t v2 = 0;
        int v30 = 1;
        goto LABEL_26;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 240) = 0;
  if (!v59) {
    goto LABEL_36;
  }
LABEL_34:
  if (v58) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v58, v5);
  }
LABEL_36:
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v5);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v63);
}

void sub_198852808(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf,uint64_t a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF *a37,uint64_t a38,WTF *a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a40)
  {
    if (a39) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a39, a2);
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a42, a2);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a48);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(a1, a2);
  if (!a1[8])
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ContactInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
}

uint64_t IPC::ArgumentCoder<WebCore::ContactInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v26);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v23);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v20);
  if (*(void *)a1)
  {
    if (v28)
    {
      uint64_t v9 = v26;
      uint64_t v10 = v27;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      if (v25)
      {
        uint64_t v11 = v23;
        uint64_t v12 = v24;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        if (v22)
        {
          uint64_t v13 = v20;
          uint64_t v20 = 0;
          v17[0] = 0;
          *(void *)a3 = v9;
          v17[1] = 0;
          *(void *)(a3 + 8) = v10;
          v18[0] = 0;
          *(void *)(a3 + 16) = v11;
          v18[1] = 0;
          *(void *)(a3 + 24) = v12;
          v19[0] = 0;
          *(void *)(a3 + 32) = v13;
          v19[1] = 0;
          uint64_t v14 = v21;
          uint64_t v21 = 0;
          *(void *)(a3 + 40) = v14;
          *(unsigned char *)(a3 + 48) = 1;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v8);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v15);
          uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v16);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 48) = 0;
LABEL_6:
  if (v22) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  }
  if (v25) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v8);
  }
  if (v28) {
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v8);
  }
  return result;
}

void sub_198852AA8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 48)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 64, a2);
  }
  if (*(unsigned char *)(v2 - 24)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v6 = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v6;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if ((unint64_t)v6 >= 0x100000)
  {
    while (1)
    {
      unsigned __int16 v16 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
      unsigned __int16 v35 = v16;
      if (v16 < 0x100u) {
        break;
      }
      int v14 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        uint64_t v15 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(HIDWORD(v37) + 1), (unint64_t)&v35);
        int v14 = HIDWORD(v37);
        *((unsigned char *)v36 + HIDWORD(v37)) = *v15;
      }
      else
      {
        *((unsigned char *)v36 + HIDWORD(v37)) = v16;
      }
      HIDWORD(v37) = v14 + 1;
      uint64_t v8 = (WTF::StringImpl *)((char *)v8 - 1);
      if (!v8)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v36, (void *)(v14 + 1));
        uint64_t v8 = v36;
        int v3 = v37;
        int v2 = HIDWORD(v37);
        goto LABEL_12;
      }
    }
LABEL_18:
    int v17 = v36;
    if (v36)
    {
      uint64_t v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v17, v10);
    }
LABEL_20:
    char v18 = *a1;
    char v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_36;
    }
    goto LABEL_21;
  }
  if (v6)
  {
    LODWORD(v37) = v6;
    uint64_t v36 = (WTF::StringImpl *)WTF::fastMalloc(v6);
    do
    {
      unsigned __int16 v9 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
      unsigned __int16 v35 = v9;
      if (v9 < 0x100u) {
        goto LABEL_18;
      }
      int v11 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        uint64_t v12 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(HIDWORD(v37) + 1), (unint64_t)&v35);
        int v11 = HIDWORD(v37);
        *((unsigned char *)v36 + HIDWORD(v37)) = *v12;
      }
      else
      {
        *((unsigned char *)v36 + HIDWORD(v37)) = v9;
      }
      int v2 = v11 + 1;
      HIDWORD(v37) = v11 + 1;
      uint64_t v8 = (WTF::StringImpl *)((char *)v8 - 1);
    }
    while (v8);
    uint64_t v8 = v36;
    int v3 = v37;
  }
  else
  {
    int v2 = 0;
    int v3 = 0;
  }
LABEL_12:
  for (int i = 0; ; int i = 1)
  {
    uint64_t v21 = (unsigned __int8 *)a1[1];
    char v22 = *a1;
    unint64_t v23 = a1[2] - *a1;
    if ((unint64_t)v21 <= v23)
    {
      uint64_t v24 = 0;
      unsigned int v29 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v30 = a1[3];
      if (v30)
      {
        if (v21)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 16))(v30);
          unsigned int v29 = *a1;
          uint64_t v24 = (unsigned __int8 *)a1[1];
        }
        else
        {
          uint64_t v24 = 0;
          unsigned int v29 = 0;
        }
      }
      goto LABEL_39;
    }
    uint64_t v24 = (unsigned __int8 *)v22 + v23;
    a1[2] = (WTF::StringImpl *)(v24 + 1);
    if (!v22)
    {
      uint64_t v24 = v21;
      unsigned int v29 = 0;
LABEL_39:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v31 = a1[3];
      if (v31)
      {
        if (v24)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unsigned __int8 *))(*(void *)v31 + 16))(v31, v29, v24);
          LODWORD(v24) = 0;
          char v22 = *a1;
          uint64_t v21 = (unsigned __int8 *)a1[1];
        }
        else
        {
          uint64_t v21 = 0;
          char v22 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
        char v22 = 0;
        LODWORD(v24) = 0;
      }
      goto LABEL_41;
    }
    LODWORD(v24) = *v24;
    if (v24 < 2)
    {
      int v25 = 0;
      char v26 = 1;
      goto LABEL_26;
    }
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    long long v32 = a1[3];
    if (v32)
    {
      int v34 = (int)v24;
      if (v21) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v22);
      }
      char v26 = 0;
      int v25 = 1;
      LODWORD(v24) = v34;
    }
    else
    {
      char v26 = 0;
      int v25 = 1;
    }
LABEL_26:
    char v27 = v24 ? v26 : 0;
    uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v36);
    if (!*a1) {
      break;
    }
    if (!i && !v25 && (_BYTE)v37)
    {
      char v28 = v36;
      *(void *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a2 + 12) = v2;
      *(unsigned char *)(a2 + 16) = v27;
      *(void *)(a2 + 24) = v28;
      *(unsigned char *)(a2 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_36:
    if (v19) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v18);
    }
LABEL_21:
    uint64_t v8 = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if ((_BYTE)v37)
  {
    uint64_t result = v36;
    uint64_t v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v8) {
    char v33 = i;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0) {
    return (WTF::StringImpl *)WTF::fastFree(v8, v18);
  }
  return result;
}

void sub_198852EC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (v12) {
    char v15 = v13;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0) {
    WTF::fastFree(v12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RTCDataChannelIdentifier,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(IPC::Encoder *a1, double *a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[1]);
  double v4 = a2[2];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void *IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    char v7 = (uint64_t *)(v4 + v5);
    result[2] = v7 + 1;
    if (v4)
    {
      int v8 = 0;
      uint64_t v9 = *v7;
      goto LABEL_8;
    }
    unint64_t v20 = v3;
    uint64_t v21 = 0;
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (v2) {
      goto LABEL_40;
    }
  }
  while (1)
  {
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v9 = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      uint64_t v42 = result;
      uint64_t v47 = a2;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v2 + 16))(v2, v21, v20, 0.0);
        uint64_t result = v42;
        uint64_t v4 = *v42;
        unint64_t v3 = v42[1];
        int v8 = 1;
        a2 = v47;
        uint64_t v9 = 0;
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        int v8 = 1;
      }
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      int v8 = 1;
    }
LABEL_8:
    unint64_t v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      uint64_t v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v12 + 1;
      if (v4)
      {
        int v13 = 0;
        uint64_t v14 = *v12;
        goto LABEL_15;
      }
      unint64_t v22 = v3;
      uint64_t v23 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v24 = result[3];
      if (v24)
      {
        int v40 = v8;
        uint64_t v36 = v9;
        uint64_t v45 = result;
        uint64_t v51 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
          uint64_t result = v45;
          uint64_t v23 = *v45;
          unint64_t v22 = v45[1];
          a2 = v51;
        }
        else
        {
          unint64_t v22 = 0;
          uint64_t v23 = 0;
        }
        uint64_t v9 = v36;
        int v8 = v40;
      }
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v14 = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      int v38 = v8;
      uint64_t v34 = v9;
      unint64_t v43 = result;
      uint64_t v48 = a2;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v23, v22);
        uint64_t result = v43;
        uint64_t v4 = *v43;
        unint64_t v3 = v43[1];
        int v13 = 1;
        a2 = v48;
        uint64_t v9 = v34;
        int v8 = v38;
        uint64_t v14 = 0;
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        int v13 = 1;
      }
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      int v13 = 1;
    }
LABEL_15:
    unint64_t v15 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v15 || v3 - v15 <= 7)
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v27 = result[3];
      if (v27)
      {
        int v33 = v13;
        uint64_t v31 = v14;
        int v41 = v8;
        uint64_t v37 = v9;
        unint64_t v46 = result;
        uint64_t v52 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
          uint64_t result = v46;
          uint64_t v26 = *v46;
          unint64_t v25 = v46[1];
          a2 = v52;
        }
        else
        {
          unint64_t v25 = 0;
          uint64_t v26 = 0;
        }
        uint64_t v9 = v37;
        int v8 = v41;
        uint64_t v14 = v31;
        int v13 = v33;
      }
    }
    else
    {
      unsigned __int16 v16 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v16 + 1;
      if (v4)
      {
        int v17 = 0;
        uint64_t v18 = *v16;
        if (v8) {
          goto LABEL_39;
        }
        goto LABEL_19;
      }
      unint64_t v25 = v3;
      uint64_t v26 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v28 = result[3];
    if (!v28) {
      break;
    }
    if (!v25) {
      break;
    }
    unsigned int v29 = result;
    uint64_t v49 = a2;
    uint64_t v35 = v9;
    int v39 = v8;
    uint64_t v30 = v14;
    int v32 = v13;
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)v28 + 16))(result[3], v26, v25);
    int v13 = v32;
    uint64_t v14 = v30;
    uint64_t v9 = v35;
    a2 = v49;
    if (!*v29) {
      break;
    }
    int v17 = 1;
    uint64_t v18 = 0;
    if (v39) {
      goto LABEL_39;
    }
LABEL_19:
    if (!v13 && !v17)
    {
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v14;
      char v19 = 1;
      *(void *)(a2 + 16) = v18;
      goto LABEL_22;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    uint64_t v44 = result;
    uint64_t v50 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
      uint64_t result = v44;
      uint64_t v21 = *v44;
      unint64_t v20 = v44[1];
      a2 = v50;
    }
    else
    {
      unint64_t v20 = 0;
      uint64_t v21 = 0;
    }
  }
  char v19 = 0;
  *(unsigned char *)a2 = 0;
LABEL_22:
  *(unsigned char *)(a2 + 24) = v19;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  char v5 = *(unsigned char *)(a2 + 80);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 96));
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 144));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, a2 + 160);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 208));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 216));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 224), *(unsigned int *)(a2 + 236));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 240));
}

void IPC::ArgumentCoder<WebCore::NotificationData,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::URL>(a1, &v51);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v49);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v47);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v43);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v41);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::NotificationDirection>((uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v39);
  IPC::Decoder::decode<WTF::URL>(a1, &v35);
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v80);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(a1, (uint64_t)v77);
  uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v7 = v6;
  uint64_t v8 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  char v10 = v9;
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v32);
  uint64_t v11 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*(void *)a1) {
    goto LABEL_63;
  }
  if (!v54) {
    goto LABEL_62;
  }
  int v13 = v51;
  uint64_t v51 = 0;
  long long v55 = v13;
  long long v56 = v52;
  long long v57 = v53;
  LODWORD(v52) = v52 & 0xFFFFFFFE;
  if (!v50) {
    goto LABEL_62;
  }
  uint64_t v14 = v49;
  uint64_t v49 = 0;
  char v58 = v14;
  if (!v48) {
    goto LABEL_62;
  }
  unint64_t v15 = v47;
  uint64_t v47 = 0;
  char v59 = v15;
  if (!v46) {
    goto LABEL_62;
  }
  unsigned __int16 v16 = v45;
  uint64_t v45 = 0;
  __int16 v60 = v16;
  if (!v44) {
    goto LABEL_62;
  }
  int v17 = v43;
  unint64_t v43 = 0;
  long long v61 = v17;
  if (!v42) {
    goto LABEL_62;
  }
  uint64_t v18 = v41;
  int v41 = 0;
  char v62 = v18;
  if (v4 <= 0xFFu) {
    goto LABEL_62;
  }
  char v63 = v4;
  if (!v40) {
    goto LABEL_62;
  }
  char v19 = v39;
  int v39 = 0;
  uint64_t v64 = v19;
  if (!v38) {
    goto LABEL_62;
  }
  unint64_t v20 = v35;
  uint64_t v35 = 0;
  char v65 = v20;
  long long v66 = v36;
  long long v67 = v37;
  LODWORD(v36) = v36 & 0xFFFFFFFE;
  if (!v81) {
    goto LABEL_62;
  }
  long long v68 = v80;
  if (!v79) {
    goto LABEL_62;
  }
  long long v69 = v77[0];
  long long v70 = v77[1];
  char v71 = v78;
  if (!v7
    || (uint64_t v72 = v5, !v10)
    || (uint64_t v73 = v8, !v34)
    || (v74 = v32, v21 = v33, v32 = 0, uint64_t v33 = 0, v75 = v21, (v11 & 0xFF0000) == 0))
  {
LABEL_62:
    __break(1u);
LABEL_63:
    *a2 = 0;
    a2[256] = 0;
    goto LABEL_18;
  }
  __int16 v76 = v11;
  WebCore::NotificationData::NotificationData((uint64_t)a2, (uint64_t)&v55);
  a2[256] = 1;
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v55, v22);
LABEL_18:
  if (v34)
  {
    uint64_t v31 = v32;
    if (v32)
    {
      int v32 = 0;
      LODWORD(v33) = 0;
      WTF::fastFree(v31, v12);
    }
  }
  if (v38)
  {
    uint64_t v23 = v35;
    uint64_t v35 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  if (v40)
  {
    uint64_t v24 = v39;
    int v39 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  if (v42)
  {
    unint64_t v25 = v41;
    int v41 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  if (v44)
  {
    uint64_t v26 = v43;
    unint64_t v43 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t v27 = v45;
    uint64_t v45 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v48)
  {
    uint64_t v28 = v47;
    uint64_t v47 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (v50)
  {
    unsigned int v29 = v49;
    uint64_t v49 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (v54)
  {
    uint64_t v30 = v51;
    uint64_t v51 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
}

void sub_19885392C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a39, a2);
  if (a13 && a10) {
    WTF::fastFree(a10, v42);
  }
  if (a19 && a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (a37 && a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, (WTF::StringImpl *)v42);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198853B18()
{
}

uint64_t IPC::Decoder::decode<WebCore::NotificationDirection>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::NotificationDirection,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PermissionName>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PermissionName,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 32), *(unsigned int *)(a2 + 44));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 48), *(unsigned int *)(a2 + 60));
  uint64_t v4 = *(const void **)(a2 + 64);
  size_t v5 = *(unsigned int *)(a2 + 76);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);
}

WTF *IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v29);
  IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)a1, (uint64_t)&v26);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, &v23);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, &v20);
  uint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, &v17);
  if (*a1)
  {
    if (v6)
    {
      if (v30)
      {
        char v9 = v29;
        unsigned int v29 = 0;
        if (v28)
        {
          *(void *)&long long v16 = v26;
          BYTE8(v16) = v27;
          if (v25)
          {
            char v10 = v23;
            uint64_t v11 = v24;
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            if (v22)
            {
              uint64_t v12 = v20;
              uint64_t v13 = v21;
              unint64_t v20 = 0;
              uint64_t v21 = 0;
              if (v19)
              {
                uint64_t v14 = v17;
                *(void *)a2 = v4;
                *(void *)(a2 + 8) = v9;
                *(_OWORD *)(a2 + 16) = v16;
                *(void *)(a2 + 32) = v10;
                *(void *)(a2 + 40) = v11;
                *(void *)(a2 + 48) = v12;
                *(void *)(a2 + 56) = v13;
                *(void *)(a2 + 64) = v14;
                uint64_t v15 = v18;
                int v17 = 0;
                uint64_t v18 = 0;
                *(void *)(a2 + 72) = v15;
                *(unsigned char *)(a2 + 80) = 1;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
  if (v19)
  {
    uint64_t result = v17;
    if (v17)
    {
      int v17 = 0;
      LODWORD(v18) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v8);
    }
  }
LABEL_9:
  if (v22)
  {
    uint64_t result = v20;
    if (v20)
    {
      unint64_t v20 = 0;
      LODWORD(v21) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  if (v25)
  {
    uint64_t result = v23;
    if (v23)
    {
      uint64_t v23 = 0;
      LODWORD(v24) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  if (v30)
  {
    uint64_t result = v29;
    unsigned int v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198853ECC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, char a17, WTF *a18, int a19, int a20,char a21)
{
  if (a17 && a14) {
    WTF::fastFree(a14, a2);
  }
  if (a21 && a18) {
    WTF::fastFree(a18, a2);
  }
  if (*(unsigned char *)(v21 - 40))
  {
    uint64_t v23 = *(WTF::StringImpl **)(v21 - 48);
    *(void *)(v21 - 48) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::Report,void>::encode(IPC::Encoder *a1, WebCore::Report *this)
{
  uint64_t v4 = (uint64_t *)WebCore::Report::type(this);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
  char v5 = (uint64_t *)WebCore::Report::url(this);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v5);
  char v6 = (WebCore::TestReportBody **)WebCore::Report::body(this);

  return IPC::ArgumentCoder<WTF::RefPtr<WebCore::ReportBody,WTF::RawPtrTraits<WebCore::ReportBody>,WTF::DefaultRefDerefTraits<WebCore::ReportBody>>,void>::encode<IPC::Encoder,WebCore::ReportBody>(a1, v6);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Report,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v69);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v67);
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_161;
  }
  uint64_t v7 = (unsigned __int8 *)v5 + v6;
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v53 = v4;
    char v54 = 0;
    goto LABEL_162;
  }
  if (*v7 >= 2u) {
    goto LABEL_189;
  }
  if (!*v7)
  {
    char v65 = 0;
LABEL_135:
    unsigned __int8 v66 = 1;
    goto LABEL_136;
  }
  if (v4 <= v7 + 1 - (unsigned __int8 *)v5)
  {
    unint64_t v56 = 0;
    long long v57 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v59 = *((void *)a1 + 3);
    if (!v59) {
      goto LABEL_166;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v59 + 16))(v59, v5, v4);
    unint64_t v56 = 0;
    char v62 = *(WTF::StringImpl **)a1;
    uint64_t v63 = *((void *)a1 + 1);
    uint64_t v64 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    long long v57 = 0;
    if (!v64 || !v63) {
      goto LABEL_166;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v64 + 16))(v64, v62, v63);
    goto LABEL_188;
  }
  *((void *)a1 + 2) = v7 + 2;
  if (v7[1] >= 5u)
  {
LABEL_189:
    unint64_t v56 = v4;
    long long v57 = v5;
    goto LABEL_166;
  }
  switch(v7[1])
  {
    case 0u:
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v80);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v85);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v83);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v78);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v76);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v74);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v72);
      unsigned __int16 v8 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
      int v9 = IPC::Decoder::decode<unsigned short>(a1);
      IPC::Decoder::decode<unsigned long long>(a1);
      char v11 = v10;
      IPC::Decoder::decode<unsigned long long>(a1);
      uint64_t v13 = *(WTF::StringImpl **)a1;
      if (*(void *)a1)
      {
        char v5 = (WTF::StringImpl *)v81;
        if (!v81) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v86;
        if (!v86) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v84;
        if (!v84) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v79;
        if (!v79) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v77;
        if (!v77) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v75;
        if (!v75) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v73;
        if (!v73) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v8;
        if (v8 <= 0xFFu || (v9 & 0xFF0000) == 0 || !v11 || !(_BYTE)v12) {
          goto LABEL_160;
        }
        WebCore::CSPViolationReportBody::create();
        uint64_t v14 = v71;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (v73)
      {
        uint64_t v15 = v72;
        uint64_t v72 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v12);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
      if (v75)
      {
        char v44 = v74;
        uint64_t v74 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v12);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
      if (v77)
      {
        uint64_t v45 = v76;
        __int16 v76 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2) {
            WTF::StringImpl::destroy(v45, v12);
          }
          else {
            *(_DWORD *)v45 -= 2;
          }
        }
      }
      if (v79)
      {
        char v46 = v78;
        char v78 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, v12);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
      }
      if (v84)
      {
        uint64_t v47 = v83;
        uint64_t v83 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v12);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
      }
      if (v86)
      {
        char v48 = v85;
        uint64_t v85 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2) {
            WTF::StringImpl::destroy(v48, v12);
          }
          else {
            *(_DWORD *)v48 -= 2;
          }
        }
      }
      if (!v81) {
        goto LABEL_132;
      }
      uint64_t v49 = v80;
      long long v80 = 0;
      if (!v49) {
        goto LABEL_132;
      }
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::destroy(v49, v12);
        if (v13) {
          goto LABEL_133;
        }
      }
      else
      {
        *(_DWORD *)v49 -= 2;
LABEL_132:
        if (v13) {
          goto LABEL_133;
        }
      }
      uint64_t v35 = *(WTF::StringImpl **)a1;
      uint64_t v52 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (!v37 || !v52) {
        goto LABEL_167;
      }
      goto LABEL_159;
    case 1u:
      unsigned __int16 v28 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
      IPC::Decoder::decode<WTF::URL>(a1, &v80);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v85);
      char v30 = *(WTF::StringImpl **)a1;
      if (*(void *)a1)
      {
        char v5 = (WTF::StringImpl *)v28;
        if (v28 <= 0xFFu) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v82;
        if (!v82) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v86;
        if (!v86) {
          goto LABEL_160;
        }
        WebCore::COEPInheritenceViolationReportBody::create();
        uint64_t v14 = v83;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (v86)
      {
        uint64_t v31 = v85;
        uint64_t v85 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v29);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
      }
      if (!v82) {
        goto LABEL_80;
      }
      int v39 = v80;
      long long v80 = 0;
      if (!v39) {
        goto LABEL_80;
      }
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v29);
        if (v30) {
          goto LABEL_133;
        }
      }
      else
      {
        *(_DWORD *)v39 -= 2;
LABEL_80:
        if (v30) {
          goto LABEL_133;
        }
      }
      uint64_t v35 = *(WTF::StringImpl **)a1;
      uint64_t v40 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (!v37 || !v40) {
        goto LABEL_167;
      }
      goto LABEL_159;
    case 2u:
      unsigned __int16 v16 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
      IPC::Decoder::decode<WTF::URL>(a1, &v80);
      unsigned __int16 Options = IPC::Decoder::decode<WebCore::FetchOptionsDestination>(a1);
      char v19 = *(WTF::StringImpl **)a1;
      if (*(void *)a1)
      {
        char v5 = (WTF::StringImpl *)v16;
        if (v16 <= 0xFFu) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v82;
        if (!v82) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)Options;
        if (Options <= 0xFFu) {
          goto LABEL_160;
        }
        WebCore::CORPViolationReportBody::create();
        uint64_t v14 = v85;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (!v82) {
        goto LABEL_35;
      }
      unint64_t v20 = v80;
      long long v80 = 0;
      if (!v20) {
        goto LABEL_35;
      }
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v18);
        if (v19) {
          goto LABEL_133;
        }
      }
      else
      {
        *(_DWORD *)v20 -= 2;
LABEL_35:
        if (v19) {
          goto LABEL_133;
        }
      }
      uint64_t v35 = *(WTF::StringImpl **)a1;
      uint64_t v38 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (!v37 || !v38) {
        goto LABEL_167;
      }
      goto LABEL_159;
    case 3u:
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v80);
      IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
      char v22 = v21;
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v85);
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v83);
      IPC::Decoder::decode<std::optional<unsigned int>>(a1);
      char v24 = v23;
      IPC::Decoder::decode<std::optional<unsigned int>>(a1);
      uint64_t v26 = *(WTF::StringImpl **)a1;
      if (*(void *)a1)
      {
        char v5 = (WTF::StringImpl *)v81;
        if (!v81) {
          goto LABEL_160;
        }
        if (!v22) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v86;
        if (!v86) {
          goto LABEL_160;
        }
        char v5 = (WTF::StringImpl *)v84;
        if (!v84 || !v24 || !(_BYTE)v25) {
          goto LABEL_160;
        }
        WebCore::DeprecationReportBody::create();
        uint64_t v14 = v78;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (v84)
      {
        char v27 = v83;
        uint64_t v83 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v25);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      if (v86)
      {
        int v41 = v85;
        uint64_t v85 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v25);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
      }
      if (!v81) {
        goto LABEL_96;
      }
      char v42 = v80;
      long long v80 = 0;
      if (!v42) {
        goto LABEL_96;
      }
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::destroy(v42, v25);
        if (v26) {
          goto LABEL_133;
        }
      }
      else
      {
        *(_DWORD *)v42 -= 2;
LABEL_96:
        if (v26) {
          goto LABEL_133;
        }
      }
      uint64_t v35 = *(WTF::StringImpl **)a1;
      uint64_t v43 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (!v37 || !v43) {
        goto LABEL_167;
      }
      goto LABEL_159;
    default:
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v80);
      uint64_t v33 = *(WTF::StringImpl **)a1;
      if (*(void *)a1)
      {
        char v5 = (WTF::StringImpl *)v81;
        if (!v81) {
          goto LABEL_160;
        }
        WebCore::TestReportBody::create();
        uint64_t v14 = v85;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (!v81) {
        goto LABEL_65;
      }
      char v34 = v80;
      long long v80 = 0;
      if (!v34) {
        goto LABEL_65;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_65:
        if (!v33) {
          goto LABEL_68;
        }
LABEL_133:
        if (*(void *)a1)
        {
          char v65 = v14;
          goto LABEL_135;
        }
        if (v14)
        {
          if (*((_DWORD *)v14 + 2) == 1) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
          }
          else {
            --*((_DWORD *)v14 + 2);
          }
        }
        goto LABEL_167;
      }
      WTF::StringImpl::destroy(v34, v32);
      if (v33) {
        goto LABEL_133;
      }
LABEL_68:
      uint64_t v35 = *(WTF::StringImpl **)a1;
      uint64_t v36 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (!v37 || !v36) {
        goto LABEL_167;
      }
LABEL_159:
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v35);
      char v5 = *(WTF::StringImpl **)a1;
      if (!*(void *)a1) {
        goto LABEL_167;
      }
LABEL_160:
      while (1)
      {
        __break(1u);
LABEL_161:
        unint64_t v53 = 0;
        char v54 = 0;
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v55 = *((void *)a1 + 3);
        if (v55)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v55 + 16))(v55, v5, v4);
            char v54 = *(WTF::StringImpl **)a1;
            unint64_t v53 = *((void *)a1 + 1);
          }
          else
          {
            unint64_t v53 = 0;
            char v54 = 0;
          }
        }
LABEL_162:
        unint64_t v56 = 0;
        long long v57 = 0;
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v58 = *((void *)a1 + 3);
        if (v58)
        {
          if (v53)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v58 + 16))(v58, v54, v53);
LABEL_188:
            long long v57 = *(WTF::StringImpl **)a1;
            unint64_t v56 = *((void *)a1 + 1);
          }
          else
          {
            unint64_t v56 = 0;
            long long v57 = 0;
          }
        }
LABEL_166:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v60 = *((void *)a1 + 3);
        if (v60 && v56) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v60 + 16))(v60, v57);
        }
LABEL_167:
        LOBYTE(v65) = 0;
        unsigned __int8 v66 = 0;
        uint64_t v51 = *(WTF::StringImpl **)a1;
        uint64_t v61 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
        if (!result) {
          break;
        }
        if (!v61) {
          break;
        }
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v51);
        if (!*(void *)a1) {
          break;
        }
LABEL_136:
        char v5 = (WTF::StringImpl *)v70;
        if (v70)
        {
          char v5 = (WTF::StringImpl *)v68;
          if (v68)
          {
            char v5 = (WTF::StringImpl *)v66;
            if (v66)
            {
              uint64_t result = (WTF::StringImpl *)WebCore::Report::create();
              *(void *)a2 = v80;
              *(unsigned char *)(a2 + 8) = 1;
              goto LABEL_140;
            }
          }
        }
      }
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
LABEL_140:
      if (v66)
      {
        uint64_t result = v65;
        if (v65)
        {
          if (*((_DWORD *)v65 + 2) == 1) {
            uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v65 + 8))(v65);
          }
          else {
            --*((_DWORD *)v65 + 2);
          }
        }
      }
      if (v68)
      {
        uint64_t result = v67;
        long long v67 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v70)
      {
        uint64_t result = v69;
        long long v69 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      return result;
  }
}

void sub_198854A5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, char a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26,WTF::StringImpl *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a24 && a23)
  {
    if (*(_DWORD *)a23 == 2) {
      WTF::StringImpl::destroy(a23, a2);
    }
    else {
      *(_DWORD *)a23 -= 2;
    }
  }
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (*(unsigned char *)(v32 - 88))
  {
    char v34 = *(WTF::StringImpl **)(v32 - 96);
    *(void *)(v32 - 96) = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, a2);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v32 - 72))
  {
    uint64_t v35 = *(WTF::StringImpl **)(v32 - 80);
    *(void *)(v32 - 80) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, a2);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  if (a28 && a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v16);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v13);
  if (*(void *)a1)
  {
    if (v18)
    {
      uint64_t v6 = v16;
      uint64_t v7 = v17;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      if (v15)
      {
        uint64_t v8 = v13;
        uint64_t v13 = 0;
        v11[0] = 0;
        *(void *)a2 = v6;
        v11[1] = 0;
        *(void *)(a2 + 8) = v7;
        v12[0] = 0;
        *(void *)(a2 + 16) = v8;
        v12[1] = 0;
        uint64_t v9 = v14;
        uint64_t v14 = 0;
        *(void *)(a2 + 24) = v9;
        *(unsigned char *)(a2 + 32) = 1;
        WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v5);
        uint64_t result = WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
LABEL_5:
  if (v15) {
    uint64_t result = WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
  }
  if (v18) {
    return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v5);
  }
  return result;
}

void sub_198854DF4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 24)) {
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198854E80(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot::Info,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
}

WTF *IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(WTF *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *(char **)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_16;
  }
  uint64_t v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_16:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_17:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF *)*((void *)a2 + 3);
    if (!result)
    {
LABEL_18:
      *(unsigned char *)uint64_t v3 = 0;
      *((unsigned char *)v3 + 8) = 0;
      goto LABEL_19;
    }
LABEL_25:
    if (v6) {
      (*(void (**)(WTF *, char *))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_18;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_17;
  }
  if (!v9)
  {
    *(void *)unint64_t result = 0;
    goto LABEL_12;
  }
  unint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v19);
  char v10 = *(char **)a2;
  if (!*(void *)a2)
  {
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  if (!v21)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t result = (WTF *)JSC::ArrayBuffer::create();
  uint64_t v11 = v18;
LABEL_8:
  if (v21)
  {
    unint64_t result = v19;
    if (v19)
    {
      char v19 = 0;
      int v20 = 0;
      unint64_t result = (WTF *)WTF::fastFree(result, v5);
    }
  }
  *(unsigned char *)uint64_t v3 = 0;
  *((unsigned char *)v3 + 8) = 0;
  if (v10)
  {
    *(void *)uint64_t v3 = v11;
LABEL_12:
    *((unsigned char *)v3 + 8) = 1;
    return result;
  }
LABEL_19:
  uint64_t v16 = *(char **)a2;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF *)*((void *)a2 + 3);
  if (result)
  {
    if (v17) {
      return (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v16);
    }
  }
  return result;
}

void sub_198855104(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientOutputs>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v6 = *((void *)a2 + 2);
  unint64_t v7 = *(void *)a2;
  unint64_t v8 = *((void *)a2 + 1);
  unint64_t v9 = v6 - v7;
  if (v8 <= v9)
  {
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v57 = *((void *)a2 + 3);
    if (v57)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
        uint64_t v56 = *(void *)a2;
        unint64_t v55 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v55 = 0;
        uint64_t v56 = 0;
      }
    }
    goto LABEL_87;
  }
  char v10 = (unsigned __int8 *)(v7 + v9);
  *((void *)a2 + 2) = v10 + 1;
  if (!v7)
  {
    unint64_t v55 = v8;
    uint64_t v56 = 0;
LABEL_87:
    unint64_t v8 = 0;
    unint64_t v7 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v58 = *((void *)a2 + 3);
    if (v58)
    {
      if (v55)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v58 + 16))(v58, v56, v55);
        unint64_t v7 = *(void *)a2;
        unint64_t v8 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v7 = 0;
      }
    }
    goto LABEL_88;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2)
  {
LABEL_88:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v8) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v7);
    }
    *a1 = 0;
    a1[88] = 0;
    goto LABEL_84;
  }
  if (!v11)
  {
    v102[0] = 0;
    char v103 = 0;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v102);
LABEL_82:
    char v53 = 1;
    goto LABEL_83;
  }
  uint64_t v12 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  uint64_t v13 = v12;
  unint64_t v14 = *((void *)a2 + 1);
  uint64_t v15 = *(void *)a2;
  unint64_t v16 = *((void *)a2 + 2) - *(void *)a2;
  if (v14 <= v16)
  {
    unint64_t v61 = 0;
    uint64_t v62 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v63 = *((void *)a2 + 3);
    if (v63)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
        uint64_t v62 = *(void *)a2;
        unint64_t v61 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v61 = 0;
        uint64_t v62 = 0;
      }
    }
    goto LABEL_94;
  }
  uint64_t v17 = (unsigned __int8 *)(v15 + v16);
  *((void *)a2 + 2) = v17 + 1;
  if (!v15)
  {
    unint64_t v61 = v14;
    uint64_t v62 = 0;
LABEL_94:
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v64 = *((void *)a2 + 3);
    if (v64)
    {
      if (v61)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v64 + 16))(v64, v62, v61);
        uint64_t v15 = *(void *)a2;
        unint64_t v14 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_95;
  }
  unsigned int v18 = *v17;
  if (v18 >= 2)
  {
LABEL_95:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    if (v12 && v14) {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v15);
    }
    LODWORD(v21) = 0;
    unsigned int v18 = 0;
    int v20 = 0;
    goto LABEL_15;
  }
  if (*v17)
  {
    if (v14 <= (unint64_t)&v17[-v15 + 1])
    {
      unint64_t v21 = 0;
      uint64_t v78 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (v12) {
        goto LABEL_176;
      }
      goto LABEL_112;
    }
    *((void *)a2 + 2) = v17 + 2;
    unsigned int v19 = v17[1];
    if (v19 >= 2)
    {
      unint64_t v21 = v14;
      uint64_t v78 = v15;
      goto LABEL_112;
    }
    unsigned int v18 = v19 != 0;
    int v20 = 256;
  }
  else
  {
    int v20 = 0;
  }
  LODWORD(v21) = 0x10000;
  while (1)
  {
LABEL_15:
    unsigned int v22 = v18 | v21 | v20;
    unint64_t v23 = *((void *)a2 + 1);
    if (!WORD1(v21))
    {
      uint64_t v65 = *(void *)a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v66 = *((void *)a2 + 3);
      if (!v66 || !v23) {
        goto LABEL_98;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v66 + 16))(v66, v65);
      unint64_t v23 = *((void *)a2 + 1);
    }
    uint64_t v24 = *(void *)a2;
    unint64_t v25 = *((void *)a2 + 2) - *(void *)a2;
    if (v23 <= v25)
    {
      unint64_t v67 = 0;
      uint64_t v68 = 0;
      uint64_t v94 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v94)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
          uint64_t v68 = *(void *)a2;
          unint64_t v67 = *((void *)a2 + 1);
        }
        else
        {
LABEL_98:
          unint64_t v67 = 0;
          uint64_t v68 = 0;
        }
      }
      goto LABEL_99;
    }
    uint64_t v26 = (unsigned __int8 *)(v24 + v25);
    *((void *)a2 + 2) = v26 + 1;
    if (!v24)
    {
      unint64_t v67 = v23;
      uint64_t v68 = 0;
LABEL_99:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v69 = *((void *)a2 + 3);
      if (v69 && v67)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v69 + 16))(v69, v68, v67);
        uint64_t v24 = *(void *)a2;
        unint64_t v23 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
LABEL_119:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v79 = *((void *)a2 + 3);
      if (v79 && v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 16))(v79, v24);
      }
      uint64_t v80 = *(void *)a2;
      uint64_t v81 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (v12 && v81)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v80);
        LOWORD(v28) = 0;
        uint64_t v24 = *(void *)a2;
      }
      else
      {
        uint64_t v24 = 0;
        LOWORD(v28) = 0;
      }
      int v29 = 1;
      goto LABEL_26;
    }
    unsigned int v27 = *v26;
    if (v27 >= 2) {
      goto LABEL_119;
    }
    if (!v27)
    {
      int v29 = 0;
      LOWORD(v28) = 0;
      int v3 = 1;
      goto LABEL_26;
    }
    int v28 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v104, a2);
    uint64_t v12 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    uint64_t v24 = *(void *)a2;
    if (!*(void *)a2)
    {
      if ((_BYTE)v105 && v104)
      {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v104);
        uint64_t v24 = *(void *)a2;
      }
      unint64_t v23 = *((void *)a2 + 1);
      goto LABEL_119;
    }
    if ((v28 & 0xFF0000) == 0 || !(_BYTE)v105 || (v12 & 0xFF0000) == 0) {
      goto LABEL_175;
    }
    __int16 v100 = v12;
    int v3 = 0;
    int v29 = 0;
    uint64_t v2 = v104;
LABEL_26:
    unint64_t v30 = *((void *)a2 + 1);
    if (v30 <= *((void *)a2 + 2) - v24)
    {
      unint64_t v70 = 0;
      uint64_t v71 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v72 = *((void *)a2 + 3);
      if (v72)
      {
        if (v30)
        {
          (*(void (**)(uint64_t))(*(void *)v72 + 16))(v72);
          uint64_t v71 = *(void *)a2;
          unint64_t v70 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
        }
      }
LABEL_102:
      unint64_t v30 = 0;
      uint64_t v24 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v73 = *((void *)a2 + 3);
      if (v73)
      {
        if (v70)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v73 + 16))(v73, v71, v70);
          uint64_t v24 = *(void *)a2;
          unint64_t v30 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v30 = 0;
          uint64_t v24 = 0;
        }
      }
LABEL_103:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v74 = *((void *)a2 + 3);
      if (v74 && v30) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v74 + 16))(v74, v24);
      }
LABEL_130:
      LOBYTE(v113) = 0;
      char v117 = 0;
      uint64_t v89 = *(void *)a2;
      uint64_t v90 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (v12 && v90) {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v89);
      }
      goto LABEL_58;
    }
    uint64_t v31 = (unsigned __int8 *)*((void *)a2 + 2);
    *((void *)a2 + 2) = v31 + 1;
    if (!v24)
    {
      unint64_t v70 = v30;
      uint64_t v71 = 0;
      goto LABEL_102;
    }
    unsigned int v32 = *v31;
    if (v32 >= 2) {
      goto LABEL_103;
    }
    if (!v32)
    {
      LOBYTE(v113) = 0;
      char v116 = 0;
      char v117 = 1;
      goto LABEL_58;
    }
    uint64_t v33 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    unint64_t v34 = *((void *)a2 + 1);
    uint64_t v35 = *(void *)a2;
    unint64_t v36 = *((void *)a2 + 2) - *(void *)a2;
    unsigned int v101 = v22;
    if (v34 <= v36)
    {
      unint64_t v82 = 0;
      uint64_t v83 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v84 = *((void *)a2 + 3);
      if (v84)
      {
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
          uint64_t v83 = *(void *)a2;
          unint64_t v82 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v82 = 0;
          uint64_t v83 = 0;
        }
      }
      goto LABEL_124;
    }
    uint64_t v37 = (unsigned __int8 *)(v35 + v36);
    *((void *)a2 + 2) = v37 + 1;
    if (!v35)
    {
      unint64_t v82 = v34;
      uint64_t v83 = 0;
LABEL_124:
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v85 = *((void *)a2 + 3);
      if (v85)
      {
        if (v82)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v85 + 16))(v85, v83, v82);
          uint64_t v35 = *(void *)a2;
          unint64_t v34 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v35 = 0;
        }
      }
LABEL_125:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v86 = *((void *)a2 + 3);
      if (v86 && v34) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v35);
      }
      LOBYTE(v122) = 0;
      char v125 = 0;
      goto LABEL_47;
    }
    unsigned int v38 = *v37;
    if (v38 >= 2) {
      goto LABEL_125;
    }
    if (!v38)
    {
      uint64_t v41 = v13;
      LOBYTE(v118) = 0;
      LOBYTE(v120) = 0;
      LOBYTE(v122) = 0;
      char v124 = 0;
      uint64_t v13 = 1;
      char v125 = 1;
      uint64_t v12 = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v118);
      int v45 = 0;
      goto LABEL_49;
    }
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v128, a2);
    uint64_t v12 = (uint64_t)IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v126, a2);
    unint64_t v39 = *(void *)a2;
    if (*(void *)a2)
    {
      if (!v129) {
        goto LABEL_175;
      }
      uint64_t v40 = v128;
      uint64_t v128 = 0;
      if (!v127) {
        goto LABEL_175;
      }
      uint64_t v41 = v13;
      long long v118 = v40;
      uint64_t v119 = v126;
      int v42 = 1;
      LOBYTE(v120) = 1;
    }
    else
    {
      uint64_t v41 = v13;
      LOBYTE(v118) = 0;
      LOBYTE(v120) = 0;
      if (v127 && v126) {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v126);
      }
      int v42 = 0;
    }
    if (v129 && v128) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v128);
    }
    if (!v39)
    {
      uint64_t v91 = *(void *)a2;
      uint64_t v92 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v93 = *((void *)a2 + 3);
      if (v93)
      {
        if (v92)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 16))(v93, v91);
          int v42 = v120;
        }
      }
    }
    if (v42)
    {
      uint64_t v43 = v118;
      char v44 = v119;
      long long v118 = 0;
      uint64_t v119 = 0;
      uint64_t v122 = v43;
      uint64_t v123 = v44;
      uint64_t v99 = v44;
      char v124 = 1;
      char v125 = 1;
      uint64_t v12 = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v118);
      int v45 = 0;
      uint64_t v13 = 0;
      goto LABEL_49;
    }
    LOBYTE(v122) = 0;
    char v125 = 0;
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v118);
    uint64_t v13 = v41;
LABEL_47:
    uint64_t v46 = *(void *)a2;
    uint64_t v47 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    if (v12 && v47) {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v46);
    }
    uint64_t v41 = v13;
    int v45 = 1;
LABEL_49:
    if (!*(void *)a2)
    {
      if ((v45 & 1) == 0) {
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v122);
      }
      uint64_t v13 = v41;
      uint64_t v87 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v88 = *((void *)a2 + 3);
      unsigned int v22 = v101;
      if (v88 && v87) {
        (*(void (**)(uint64_t))(*(void *)v88 + 16))(v88);
      }
      goto LABEL_130;
    }
    if ((v33 & 0xFF0000) == 0) {
      goto LABEL_175;
    }
    LOWORD(v118) = v33;
    if (v45) {
      goto LABEL_175;
    }
    LOBYTE(v119) = 0;
    char v121 = 0;
    if (v13)
    {
      char v48 = 0;
      LOBYTE(v105) = 0;
    }
    else
    {
      uint64_t v49 = v122;
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      char v48 = 1;
      char v121 = 1;
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      unsigned int v105 = v49;
      uint64_t v106 = v99;
    }
    LOWORD(v104) = v33;
    LOBYTE(v107) = v48;
    char v108 = 1;
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v119);
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v122);
    __int16 v113 = v33;
    LOBYTE(v114) = 0;
    char v115 = 0;
    if ((v13 & 1) == 0)
    {
      char v50 = v105;
      unsigned int v105 = 0;
      uint64_t v106 = 0;
      *(void *)&long long v114 = v50;
      *((void *)&v114 + 1) = v99;
      char v115 = 1;
    }
    char v116 = 1;
    char v117 = 1;
    uint64_t v12 = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v105);
    uint64_t v13 = v41;
    unsigned int v22 = v101;
LABEL_58:
    if (!*(void *)a2)
    {
      v102[0] = 0;
      char v103 = 0;
      goto LABEL_74;
    }
    if ((v13 & 0xFF0000) != 0)
    {
      LOWORD(v104) = v13;
      if (HIWORD(v22))
      {
        WORD1(v104) = v22;
        if (!v29)
        {
          LOBYTE(v105) = 0;
          char v108 = 0;
          if ((v3 & 1) == 0)
          {
            LOWORD(v105) = v28;
            uint64_t v106 = v2;
            __int16 v107 = v100;
            char v108 = 1;
            uint64_t v2 = 0;
          }
          if (v117) {
            break;
          }
        }
      }
    }
    do
    {
LABEL_175:
      __break(1u);
LABEL_176:
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      unint64_t v21 = 0;
      uint64_t v96 = *(void *)a2;
      uint64_t v97 = *((void *)a2 + 1);
      uint64_t v98 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v78 = 0;
      if (v98 && v97)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v98 + 16))(v98, v96);
        uint64_t v78 = *(void *)a2;
        unint64_t v21 = *((void *)a2 + 1);
      }
LABEL_112:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (!v12) {
        goto LABEL_113;
      }
      if (!v21) {
        goto LABEL_114;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v78, v21);
      unint64_t v21 = *(void *)a2;
    }
    while (*(void *)a2);
    uint64_t v12 = *((void *)a2 + 3);
    uint64_t v95 = *((void *)a2 + 1);
    int v20 = 256;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unsigned int v18 = 0;
    if (v12 && v95)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
LABEL_113:
      LODWORD(v21) = 0;
LABEL_114:
      unsigned int v18 = 0;
      int v20 = 256;
      continue;
    }
  }
  LOBYTE(v109) = 0;
  char v112 = 0;
  if (v116)
  {
    __int16 v109 = v113;
    LOBYTE(v110) = 0;
    char v111 = 0;
    if (v115)
    {
      long long v51 = v114;
      long long v114 = 0uLL;
      long long v110 = v51;
      char v111 = 1;
    }
    char v112 = 1;
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>((uint64_t)v102, (uint64_t)&v104);
  if (v112) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v110);
  }
  if (v108)
  {
    uint64_t v52 = v106;
    uint64_t v106 = 0;
    if (v52) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v52);
    }
  }
LABEL_74:
  if (v117 && v116) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v114);
  }
  if (((v3 | v29) & 1) == 0 && v2) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
  }
  if (v103
    || (unint64_t v75 = *(void *)a2,
        uint64_t v76 = *((void *)a2 + 1),
        *(void *)a2 = 0,
        *((void *)a2 + 1) = 0,
        (uint64_t v77 = *((void *)a2 + 3)) != 0)
    && v76
    && ((*(void (**)(uint64_t, unint64_t))(*(void *)v77 + 16))(v77, v75), v103))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>((uint64_t)a1, (uint64_t)v102);
    goto LABEL_82;
  }
  char v53 = 0;
  *a1 = 0;
LABEL_83:
  a1[88] = v53;
  uint64_t result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v102);
LABEL_84:
  if (!a1[88])
  {
    unint64_t v59 = *(void *)a2;
    uint64_t v60 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v60) {
        return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v59);
      }
    }
  }
  return result;
}

void sub_198855EE4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(v4 - 192));
  if (((v3 | v2) & 1) == 0)
  {
    if (v1) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v1);
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::AuthenticatorAttestationResponseData,void>::encode(IPC::Encoder *a1, JSC::ArrayBuffer **a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 12);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 13);

  return IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 14));
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (WTF *)IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_12:
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v13);
    }
    return result;
  }
  uint64_t v6 = v4;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if ((unint64_t)v4 >= 0x100000)
  {
    while (1)
    {
      unsigned __int16 v20 = IPC::Decoder::decode<WebCore::AuthenticatorTransport>(a2);
      unsigned __int16 v22 = v20;
      if (v20 < 0x100u) {
        goto LABEL_25;
      }
      int v18 = HIDWORD(v24);
      if (HIDWORD(v24) == v24)
      {
        unsigned int v19 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        int v18 = HIDWORD(v24);
        *((unsigned char *)v23 + HIDWORD(v24)) = *v19;
      }
      else
      {
        *((unsigned char *)v23 + HIDWORD(v24)) = v20;
      }
      HIDWORD(v24) = v18 + 1;
      uint64_t v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v23, (void *)(v18 + 1));
        int v17 = 0;
        *(void *)a1 = v23;
        uint64_t v21 = v24;
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        *(void *)(a1 + 8) = v21;
        goto LABEL_19;
      }
    }
  }
  if (v4)
  {
    LODWORD(v24) = v4;
    unint64_t v23 = (WTF *)WTF::fastMalloc(v4);
    while (1)
    {
      unsigned __int16 v7 = IPC::Decoder::decode<WebCore::AuthenticatorTransport>(a2);
      unsigned __int16 v22 = v7;
      if (v7 < 0x100u) {
        break;
      }
      int v8 = HIDWORD(v24);
      if (HIDWORD(v24) == v24)
      {
        unint64_t v9 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        int v8 = HIDWORD(v24);
        *((unsigned char *)v23 + HIDWORD(v24)) = *v9;
      }
      else
      {
        *((unsigned char *)v23 + HIDWORD(v24)) = v7;
      }
      int v10 = v8 + 1;
      HIDWORD(v24) = v10;
      uint64_t v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        unsigned int v11 = v23;
        int v12 = v24;
        goto LABEL_18;
      }
    }
LABEL_25:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    int v17 = 1;
    goto LABEL_26;
  }
  int v10 = 0;
  int v12 = 0;
  unsigned int v11 = 0;
LABEL_18:
  int v17 = 0;
  unint64_t v23 = 0;
  *(void *)a1 = v11;
  HIDWORD(v24) = 0;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v10;
LABEL_19:
  *(unsigned char *)(a1 + 16) = 1;
LABEL_26:
  uint64_t result = v23;
  if (v23)
  {
    unint64_t v23 = 0;
    LODWORD(v24) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v17) {
    goto LABEL_12;
  }
  return result;
}

void sub_198856214(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::AuthenticatorAssertionResponseData,void>::encode(IPC::Encoder *a1, JSC::ArrayBuffer **a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 12);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 13);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 14);

  return IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 15);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::encode(IPC::Encoder *a1, WebCore::AuthenticatorResponseData *this)
{
  WebCore::AuthenticatorResponseData::getSerializableForm(this, (uint64_t)v4);
  unsigned __int8 v6 = v5;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  uint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>(a1, (uint64_t)v4, v6);
  if (v5 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v7, v4);
  }
  return result;
}

void sub_198856328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a25])(v25 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::AuthenticatorResponseData::getSerializableForm@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = (_DWORD *)this[1];
  if (!v3)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 128) = 0;
    return this;
  }
  uint64_t v4 = this;
  if (*(unsigned char *)this && this[14])
  {
    *v3 += 2;
    unsigned int v19 = v3;
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](v20, (uint64_t)(this + 2));
    int v5 = (WTF::DeferrableRefCountedBase *)v4[13];
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    uint64_t v21 = v5;
    unsigned __int8 v6 = (WTF::DeferrableRefCountedBase *)v4[14];
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
    char v7 = (WTF *)*((unsigned int *)v4 + 39);
    unint64_t v23 = 0;
    LODWORD(v24) = 0;
    unsigned __int16 v22 = v6;
    HIDWORD(v24) = v7;
    if (v7)
    {
      int v8 = (WTF *)WTF::fastMalloc(v7);
      LODWORD(v24) = v7;
      unint64_t v23 = v8;
      memcpy(v8, (const void *)v4[18], *((unsigned int *)v4 + 39));
    }
    std::__variant_detail::__alt<2ul,WebCore::AuthenticatorAttestationResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAttestationResponseData>(a2, (uint64_t *)&v19);
    *(_DWORD *)(a2 + 128) = 2;
    int v10 = v23;
    if (v23)
    {
      unint64_t v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v10, v9);
    }
LABEL_26:
    int v17 = v22;
    unsigned __int16 v22 = 0;
    if (v17) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v17);
    }
    int v18 = v21;
    uint64_t v21 = 0;
    if (v18) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v18);
    }
    goto LABEL_32;
  }
  if (this[15] && this[16])
  {
    *v3 += 2;
    unsigned int v19 = v3;
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](v20, (uint64_t)(this + 2));
    unsigned int v11 = (WTF::DeferrableRefCountedBase *)v4[13];
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
    uint64_t v21 = v11;
    int v12 = (WTF::DeferrableRefCountedBase *)v4[15];
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    unsigned __int16 v22 = v12;
    uint64_t v13 = (WTF *)v4[16];
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    unint64_t v23 = v13;
    uint64_t v14 = (WTF::DeferrableRefCountedBase *)v4[17];
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v24 = v14;
    std::__variant_detail::__alt<3ul,WebCore::AuthenticatorAssertionResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAssertionResponseData>(a2, (uint64_t *)&v19);
    *(_DWORD *)(a2 + 128) = 3;
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v15);
    }
    BOOL v16 = v23;
    unint64_t v23 = 0;
    if (v16) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v16);
    }
    goto LABEL_26;
  }
  *v3 += 2;
  unsigned int v19 = v3;
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](v20, (uint64_t)(this + 2));
  std::__variant_detail::__alt<1ul,WebCore::AuthenticatorResponseBaseData>::__alt[abi:sn180100]<WebCore::AuthenticatorResponseBaseData>(a2, (uint64_t *)&v19);
  *(_DWORD *)(a2 + 128) = 1;
LABEL_32:
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
  this = v19;
  unsigned int v19 = 0;
  if (this) {
    return (void *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)this);
  }
  return this;
}

void sub_198856598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::DeferrableRefCountedBase *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::DeferrableRefCountedBase *a21,WTF::DeferrableRefCountedBase *a22,WTF *a23,WTF::DeferrableRefCountedBase *a24)
{
  if (a24) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a24);
  }
  if (a23) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a23);
  }
  if (a22) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a22);
  }
  if (a21) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a21);
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](v24);
  if (a9) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a9);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>(a1, (uint64_t)v6);
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((uint64_t)v5, (uint64_t)v6);
    std::__optional_destruct_base<WebCore::AuthenticatorResponseData,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticatorResponseData>((uint64_t)a2, (uint64_t)v5);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v5, v4);
  }
  else
  {
    *a2 = 0;
    a2[160] = 0;
  }
  if (v8)
  {
    if (v7 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(v5, v6);
    }
  }
}

void sub_1988566E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46,char a47)
{
  if (a47)
  {
    if (a45 != -1) {
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a45])(&a9, &a29);
    }
  }
  _Unwind_Resume(a1);
}

IPC::Decoder *IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 136))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988567A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 136))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 128);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 128) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::BufferSource>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_12;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_12:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v6) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_14;
  }
  if (!v9)
  {
    v17[0] = 0;
    char v19 = 0;
    uint64_t result = (uint64_t)std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v17);
    goto LABEL_8;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::BufferSource>(v17, a2);
  if (!v19)
  {
LABEL_14:
    *a1 = 0;
    a1[24] = 0;
    goto LABEL_15;
  }
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v17);
  a1[16] = 1;
LABEL_8:
  a1[24] = 1;
  if (v19 && v18 != -1) {
    uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9B4628[v18])(&v20, v17);
  }
LABEL_15:
  if (!a1[24])
  {
    uint64_t v15 = *a2;
    uint64_t v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v16) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
      }
    }
  }
  return result;
}

void sub_1988569F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (*(unsigned char *)(v12 + 24) && *(unsigned char *)(v12 + 16))
  {
    uint64_t v14 = *(unsigned int *)(v12 + 8);
    if (v14 != -1) {
      ((void (*)(uint64_t *, uint64_t))off_1EE9B4628[v14])(&a9, v12);
    }
    *(_DWORD *)(v12 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientInputs::PRFValues,void>::encode(IPC::Encoder *a1, WebCore::BufferSource *this)
{
  uint64_t v4 = (const void *)WebCore::BufferSource::span(this);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);

  return IPC::ArgumentCoder<std::optional<WebCore::BufferSource>,void>::encode<IPC::Encoder,std::optional<WebCore::BufferSource> const&>(a1, (unsigned __int8 *)this + 16);
}

uint64_t IPC::Decoder::decode<WebCore::BufferSource>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v10);
  if (!*a2)
  {
    *a1 = 0;
    a1[16] = 0;
LABEL_7:
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
    return result;
  }
  if (!v11)
  {
    __break(1u);
    return result;
  }
  JSC::ArrayBuffer::tryCreate();
  int v9 = 1;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)&v8);
  a1[16] = 1;
  if (v9 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9B4628[v9])(&v12, &v8);
    if (!a1[16]) {
      goto LABEL_7;
    }
  }
  return result;
}

void sub_198856BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  if (*(unsigned char *)(v12 + 16))
  {
    uint64_t v14 = *(unsigned int *)(v12 + 8);
    if (v14 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B4628[v14])(&a12, v12);
    }
    *(_DWORD *)(v12 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::RpEntity,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);

  return IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>&>(a1, (uint64_t)(a2 + 2));
}

_DWORD *IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::UserEntity,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  uint64_t v4 = (const void *)WebCore::BufferSource::span((WebCore::BufferSource *)(a2 + 2));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 4);
}

unint64_t IPC::ArgumentCoder<WebCore::PublicKeyCredentialDescriptor,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 24);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *a2);
  size_t v5 = (const void *)WebCore::BufferSource::span((WebCore::BufferSource *)(a2 + 8));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v5, v6);

  return IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v4);
}

unsigned char *IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::RpEntity,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::UserEntity,void>::encode(a1, (uint64_t *)(a2 + 32));
  uint64_t v4 = (const void *)WebCore::BufferSource::span((WebCore::BufferSource *)(a2 + 72));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);
  IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 104);
  IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 112);
  IPC::ArgumentCoder<std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>,void>::encode<IPC::Encoder,std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria> const&>(a1, (char *)(a2 + 128));
  char v7 = *(unsigned char *)(a2 + 136);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  return IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs>&>(a1, a2 + 144);
}

uint64_t IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = a1;
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v152);
  IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v162);
  char v133 = a2;
  uint64_t v5 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::String>>(v3, (uint64_t)v135);
  uint64_t v8 = *(WTF::StringImpl **)v3;
  if (*(void *)v3)
  {
    if (!(_BYTE)v153) {
      goto LABEL_146;
    }
    int v9 = v152;
    char v152 = 0;
    if (!BYTE8(v162)) {
      goto LABEL_146;
    }
    uint64_t v10 = v162;
    *(void *)&long long v162 = 0;
    if (!(_BYTE)v136) {
      goto LABEL_146;
    }
    if (LOBYTE(v135[1]))
    {
      char v11 = v135[0];
      v135[0] = 0;
      *(void *)&long long v166 = v9;
      *((void *)&v166 + 1) = v10;
      char v167 = v11;
      char v168 = 1;
    }
    else
    {
      *(void *)&long long v166 = v9;
      *((void *)&v166 + 1) = v10;
      LOBYTE(v167) = 0;
      char v168 = 0;
    }
    char v169 = 1;
  }
  else
  {
    LOBYTE(v166) = 0;
    char v169 = 0;
    if ((_BYTE)v136)
    {
      if (LOBYTE(v135[1]))
      {
        uint64_t v79 = v135[0];
        v135[0] = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2) {
            WTF::StringImpl::destroy(v79, v6);
          }
          else {
            *(_DWORD *)v79 -= 2;
          }
        }
      }
    }
  }
  if (BYTE8(v162))
  {
    uint64_t v12 = (WTF::StringImpl *)v162;
    *(void *)&long long v162 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v6);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  if ((_BYTE)v153)
  {
    uint64_t v13 = v152;
    char v152 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v6);
        if (v8) {
          goto LABEL_21;
        }
        goto LABEL_154;
      }
      *(_DWORD *)v13 -= 2;
    }
  }
  if (v8) {
    goto LABEL_21;
  }
LABEL_154:
  uint64_t v80 = *(WTF::StringImpl **)v3;
  uint64_t v81 = *((void *)v3 + 1);
  *(void *)int v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v82 = *((void *)v3 + 3);
  if (v82 && v81) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v82 + 16))(v82, v80);
  }
LABEL_21:
  IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v159);
  IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v156);
  IPC::Decoder::decode<WebCore::BufferSource>(&v152, (uint64_t *)v3);
  uint64_t v5 = (uint64_t)IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v170);
  if (*(void *)v3)
  {
    if (!(_BYTE)v160) {
      goto LABEL_146;
    }
    uint64_t v14 = v159;
    long long v159 = 0;
    if (!(_BYTE)v157) {
      goto LABEL_146;
    }
    uint64_t v15 = v156;
    char v156 = 0;
    v135[0] = v14;
    v135[1] = v15;
    if (!v154) {
      goto LABEL_146;
    }
    uint64_t v5 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v136, (uint64_t)&v152);
    if (!v171) {
      goto LABEL_146;
    }
    uint64_t v16 = v170;
    char v170 = 0;
    *(void *)&long long v138 = v16;
    long long v17 = *(_OWORD *)v135;
    v135[0] = 0;
    v135[1] = 0;
    long long v162 = v17;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v163, (uint64_t)&v136);
    uint64_t v164 = v138;
    char v165 = 1;
    *(void *)&long long v138 = 0;
    if (v137 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9B4628[v137])(v172, &v136);
    }
    int v137 = -1;
    int v18 = v135[1];
    v135[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v6);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    char v19 = v135[0];
    v135[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v6);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v162) = 0;
    char v165 = 0;
  }
  if (v171)
  {
    char v20 = v170;
    char v170 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v6);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v154 && v153 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B4628[v153])(v135, &v152);
  }
  if ((_BYTE)v157)
  {
    uint64_t v21 = v156;
    char v156 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v6);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  if ((_BYTE)v160)
  {
    unsigned __int16 v22 = v159;
    long long v159 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v6);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (!v165)
  {
    uint64_t v83 = *(WTF::StringImpl **)v3;
    uint64_t v84 = *((void *)v3 + 1);
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v85 = *((void *)v3 + 3);
    if (v85)
    {
      if (v84) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v85 + 16))(v85, v83);
      }
    }
  }
  IPC::Decoder::decode<WebCore::BufferSource>(&v159, (uint64_t *)v3);
  unint64_t v23 = IPC::Decoder::decode<unsigned long long>(v3);
  if (!v24) {
    goto LABEL_74;
  }
  uint64_t v25 = (WTF::StringImpl *)v23;
  char v152 = 0;
  uint64_t v153 = 0;
  if (v23 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialCreationOptions::Parameters>((uint64_t)v135, (uint64_t *)v3);
      if (!(_BYTE)v136) {
        break;
      }
      uint64_t v32 = HIDWORD(v153);
      if (HIDWORD(v153) == v153)
      {
        uint64_t v33 = (long long *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, HIDWORD(v153) + 1, (unint64_t)v135);
        uint64_t v32 = HIDWORD(v153);
        unint64_t v34 = v152;
        long long v35 = *v33;
      }
      else
      {
        unint64_t v34 = v152;
        long long v35 = *(_OWORD *)v135;
      }
      *((_OWORD *)v34 + v32) = v35;
      unint64_t v36 = ++HIDWORD(v153);
      uint64_t v25 = (WTF::StringImpl *)((char *)v25 - 1);
      if (!v25)
      {
        WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v152, v36);
        uint64_t v25 = v152;
        int v130 = v153;
        int v2 = HIDWORD(v153);
        goto LABEL_66;
      }
    }
LABEL_72:
    uint64_t v37 = v152;
    if (v152)
    {
      char v152 = 0;
      LODWORD(v153) = 0;
      WTF::fastFree(v37, v27);
    }
LABEL_74:
    size_t v6 = *(WTF::StringImpl **)v3;
    uint64_t v7 = *((void *)v3 + 1);
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v5 = *((void *)v3 + 3);
    if (v5) {
      goto LABEL_147;
    }
    goto LABEL_75;
  }
  if (v23)
  {
    uint64_t v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v23));
    LODWORD(v153) = v25;
    char v152 = v26;
    do
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialCreationOptions::Parameters>((uint64_t)v135, (uint64_t *)v3);
      if (!(_BYTE)v136) {
        goto LABEL_72;
      }
      uint64_t v28 = HIDWORD(v153);
      if (HIDWORD(v153) == v153)
      {
        int v29 = (long long *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, HIDWORD(v153) + 1, (unint64_t)v135);
        uint64_t v28 = HIDWORD(v153);
        unint64_t v30 = v152;
        long long v31 = *v29;
      }
      else
      {
        unint64_t v30 = v152;
        long long v31 = *(_OWORD *)v135;
      }
      *((_OWORD *)v30 + v28) = v31;
      int v2 = ++HIDWORD(v153);
      uint64_t v25 = (WTF::StringImpl *)((char *)v25 - 1);
    }
    while (v25);
    uint64_t v25 = v152;
    int v130 = v153;
  }
  else
  {
    int v2 = 0;
    int v130 = 0;
  }
LABEL_66:
  for (int i = 0; ; int i = 1)
  {
    uint64_t v131 = IPC::Decoder::decode<std::optional<unsigned int>>(v3);
    char v132 = v38;
    IPC::Decoder::decode<WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v156, (uint64_t *)v3);
    unint64_t v39 = *((void *)v3 + 1);
    size_t v6 = *(WTF::StringImpl **)v3;
    unint64_t v40 = *((void *)v3 + 2) - *(void *)v3;
    if (v39 <= v40)
    {
      unint64_t v86 = 0;
      uint64_t v87 = 0;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v88 = *((void *)v3 + 3);
      if (v88)
      {
        if (v39)
        {
          (*(void (**)(uint64_t))(*(void *)v88 + 16))(v88);
          uint64_t v87 = *(WTF::StringImpl **)v3;
          unint64_t v86 = *((void *)v3 + 1);
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = 0;
        }
      }
      goto LABEL_162;
    }
    uint64_t v41 = (unsigned __int8 *)v6 + v40;
    *((void *)v3 + 2) = v41 + 1;
    if (!v6)
    {
      unint64_t v86 = v39;
      uint64_t v87 = 0;
LABEL_162:
      unint64_t v39 = 0;
      size_t v6 = 0;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v89 = *((void *)v3 + 3);
      if (v89)
      {
        if (v86)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v89 + 16))(v89, v87, v86);
          size_t v6 = *(WTF::StringImpl **)v3;
          unint64_t v39 = *((void *)v3 + 1);
        }
        else
        {
          unint64_t v39 = 0;
          size_t v6 = 0;
        }
      }
LABEL_163:
      unint64_t v46 = 0;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v90 = *((void *)v3 + 3);
      if (v90)
      {
        if (v39) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v90 + 16))(v90, v6);
        }
        unint64_t v46 = 0;
      }
      goto LABEL_187;
    }
    if (*v41 >= 2u) {
      goto LABEL_163;
    }
    if (!*v41)
    {
      unint64_t v46 = 0;
      int v47 = 0;
      goto LABEL_117;
    }
    if (v39 <= v41 + 1 - (unsigned __int8 *)v6)
    {
      unint64_t v96 = 0;
      uint64_t v97 = 0;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v98 = *((void *)v3 + 3);
      if (v98)
      {
        (*(void (**)(uint64_t))(*(void *)v98 + 16))(v98);
        unint64_t v96 = 0;
        uint64_t v122 = *(WTF::StringImpl **)v3;
        uint64_t v123 = *((void *)v3 + 1);
        uint64_t v124 = *((void *)v3 + 3);
        *(void *)int v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v97 = 0;
        if (v124)
        {
          if (v123)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v124 + 16))(v124, v122);
            uint64_t v97 = *(WTF::StringImpl **)v3;
            unint64_t v96 = *((void *)v3 + 1);
          }
        }
      }
    }
    else
    {
      *((void *)v3 + 2) = v41 + 2;
      unsigned int v42 = v41[1];
      if (v42 < 2)
      {
        if (v42)
        {
          unsigned __int16 v43 = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>((uint64_t *)v3);
          unsigned int v44 = (v43 > 0xFFu) << 16;
          if ((v43 & 0xFF00) != 0) {
            int v45 = v43;
          }
          else {
            int v45 = 0;
          }
          int v128 = 256;
          int v129 = v45;
        }
        else
        {
          int v128 = 0;
          int v129 = 0;
          unsigned int v44 = 0x10000;
        }
        goto LABEL_89;
      }
      unint64_t v96 = v39;
      uint64_t v97 = v6;
    }
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v99 = *((void *)v3 + 3);
    if (v99 && v96) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v99 + 16))(v99, v97, v96);
    }
    unsigned int v44 = 0;
    int v128 = 0;
    int v129 = 0;
LABEL_89:
    unint64_t v48 = *((void *)v3 + 1);
    if (!HIWORD(v44))
    {
      unint64_t v100 = 0;
      unsigned int v101 = 0;
      char v102 = *(WTF::StringImpl **)v3;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v103 = *((void *)v3 + 3);
      if (!v103) {
        goto LABEL_176;
      }
      if (!v48)
      {
        unint64_t v100 = 0;
        unsigned int v101 = 0;
LABEL_176:
        unint64_t v48 = 0;
        uint64_t v49 = 0;
        *(void *)int v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v104 = *((void *)v3 + 3);
        if (v104)
        {
          if (v100)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v104 + 16))(v104, v101, v100);
            uint64_t v49 = *(WTF::StringImpl **)v3;
            unint64_t v48 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v48 = 0;
            uint64_t v49 = 0;
          }
        }
        goto LABEL_177;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v103 + 16))(v103, v102);
      unint64_t v48 = *((void *)v3 + 1);
    }
    uint64_t v49 = *(WTF::StringImpl **)v3;
    unint64_t v50 = *((void *)v3 + 2) - *(void *)v3;
    if (v48 <= v50)
    {
      unint64_t v100 = 0;
      uint64_t v120 = *((void *)v3 + 3);
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      unsigned int v101 = 0;
      if (v48 && v120)
      {
        (*(void (**)(uint64_t))(*(void *)v120 + 16))(v120);
        unsigned int v101 = *(WTF::StringImpl **)v3;
        unint64_t v100 = *((void *)v3 + 1);
      }
      goto LABEL_176;
    }
    long long v51 = (unsigned __int8 *)v49 + v50;
    *((void *)v3 + 2) = v51 + 1;
    if (!v49)
    {
      unint64_t v100 = v48;
      unsigned int v101 = 0;
      goto LABEL_176;
    }
    if (*v51 < 2u)
    {
      if (!*v51)
      {
        int v55 = 0;
        int v56 = 0;
        unsigned int v54 = 0x10000;
        goto LABEL_102;
      }
      if (v48 <= v51 + 1 - (unsigned __int8 *)v49)
      {
        unint64_t v53 = 0;
        char v117 = 0;
        *(void *)int v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v118 = *((void *)v3 + 3);
        if (v118)
        {
          (*(void (**)(uint64_t))(*(void *)v118 + 16))(v118);
          unint64_t v53 = 0;
          char v125 = *(WTF::StringImpl **)v3;
          uint64_t v126 = *((void *)v3 + 1);
          uint64_t v127 = *((void *)v3 + 3);
          *(void *)int v3 = 0;
          *((void *)v3 + 1) = 0;
          char v117 = 0;
          if (v127)
          {
            if (v126)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v127 + 16))(v127, v125);
              char v117 = *(WTF::StringImpl **)v3;
              unint64_t v53 = *((void *)v3 + 1);
            }
          }
        }
      }
      else
      {
        *((void *)v3 + 2) = v51 + 2;
        unsigned int v52 = v51[1];
        if (v52 < 3)
        {
          LODWORD(v53) = v52 | 0x100;
          goto LABEL_97;
        }
        unint64_t v53 = v48;
        char v117 = v49;
      }
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v119 = *((void *)v3 + 3);
      if (v119)
      {
        if (!v53) {
          goto LABEL_97;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v119 + 16))(v119, v117, v53);
      }
      LODWORD(v53) = 0;
LABEL_97:
      unsigned int v54 = (v53 > 0xFF) << 16;
      if (v53 >= 0x100) {
        int v55 = v53;
      }
      else {
        int v55 = 0;
      }
      int v56 = 256;
      goto LABEL_102;
    }
LABEL_177:
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v105 = *((void *)v3 + 3);
    if (v105 && v48) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v105 + 16))(v105, v49);
    }
    unsigned int v54 = 0;
    int v55 = 0;
    int v56 = 0;
LABEL_102:
    unint64_t v57 = *((void *)v3 + 1);
    if (!HIWORD(v54))
    {
      unint64_t v106 = 0;
      __int16 v107 = 0;
      char v108 = *(WTF::StringImpl **)v3;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v109 = *((void *)v3 + 3);
      if (!v109) {
        goto LABEL_180;
      }
      if (!v57)
      {
        unint64_t v106 = 0;
        __int16 v107 = 0;
        goto LABEL_180;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v109 + 16))(v109, v108);
      unint64_t v57 = *((void *)v3 + 1);
    }
    uint64_t v58 = *(WTF::StringImpl **)v3;
    unint64_t v59 = *((void *)v3 + 2) - *(void *)v3;
    if (v57 <= v59)
    {
      unint64_t v106 = 0;
      uint64_t v121 = *((void *)v3 + 3);
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      __int16 v107 = 0;
      if (v57 && v121)
      {
        (*(void (**)(uint64_t))(*(void *)v121 + 16))(v121);
        __int16 v107 = *(WTF::StringImpl **)v3;
        unint64_t v106 = *((void *)v3 + 1);
      }
      goto LABEL_180;
    }
    uint64_t v60 = (unsigned __int8 *)v58 + v59;
    *((void *)v3 + 2) = v60 + 1;
    if (!v58)
    {
      unint64_t v106 = v57;
      __int16 v107 = 0;
LABEL_180:
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v110 = *((void *)v3 + 3);
      if (v110 && v106)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v110 + 16))(v110, v107, v106);
        unsigned int v61 = 0;
        uint64_t v58 = *(WTF::StringImpl **)v3;
        unint64_t v57 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v57 = 0;
        uint64_t v58 = 0;
        unsigned int v61 = 0;
      }
LABEL_182:
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v111 = *((void *)v3 + 3);
      if (v111 && v57) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v111 + 16))(v111, v58);
      }
      char v63 = 0;
      int v62 = 1;
      goto LABEL_107;
    }
    unsigned int v61 = *v60;
    if (v61 >= 2) {
      goto LABEL_182;
    }
    int v62 = 0;
    char v63 = 1;
LABEL_107:
    uint64_t v5 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(v3);
    unsigned int v64 = v55 | v54 | v56;
    size_t v6 = *(WTF::StringImpl **)v3;
    if (*(void *)v3)
    {
      if (!((v129 | v44 | v128) >> 16) || !HIWORD(v64) || v62 || (unsigned __int16)v5 <= 0xFFu) {
        goto LABEL_146;
      }
      uint64_t v65 = (unsigned __int16)(v129 | v44 | v128);
      unint64_t v66 = 0x1000000000000;
    }
    else
    {
      unint64_t v66 = 0;
      uint64_t v65 = 0;
    }
    uint64_t v67 = 0x100000000;
    if ((v63 & (v61 != 0)) == 0) {
      uint64_t v67 = 0;
    }
    if (HIWORD(v66))
    {
      int v47 = 0;
      unint64_t v46 = (v66 | ((unint64_t)v5 << 40) | (v64 << 16) | v65 | v67) & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      goto LABEL_117;
    }
    uint64_t v112 = *((void *)v3 + 1);
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v113 = *((void *)v3 + 3);
    if (v113 && v112) {
      (*(void (**)(uint64_t))(*(void *)v113 + 16))(v113);
    }
    unint64_t v46 = 0x1000000000000;
LABEL_187:
    long long v114 = *(WTF::StringImpl **)v3;
    uint64_t v115 = *((void *)v3 + 1);
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v116 = *((void *)v3 + 3);
    if (v116 && v115)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v116 + 16))(v116, v114);
      size_t v6 = *(WTF::StringImpl **)v3;
    }
    else
    {
      size_t v6 = 0;
    }
    int v47 = 1;
LABEL_117:
    unint64_t v68 = *((void *)v3 + 1);
    if (v68 <= *((void *)v3 + 2) - (void)v6)
    {
      unint64_t v91 = 0;
      uint64_t v92 = 0;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v93 = *((void *)v3 + 3);
      if (v93)
      {
        if (v68)
        {
          (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
          uint64_t v92 = *(WTF::StringImpl **)v3;
          unint64_t v91 = *((void *)v3 + 1);
        }
        else
        {
          unint64_t v91 = 0;
          uint64_t v92 = 0;
        }
      }
      goto LABEL_168;
    }
    uint64_t v69 = (unsigned __int8 *)*((void *)v3 + 2);
    *((void *)v3 + 2) = v69 + 1;
    if (!v6)
    {
      unint64_t v91 = v68;
      uint64_t v92 = 0;
LABEL_168:
      unint64_t v68 = 0;
      size_t v6 = 0;
      *(void *)int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v94 = *((void *)v3 + 3);
      if (v94)
      {
        if (v91)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v94 + 16))(v94, v92, v91);
          size_t v6 = *(WTF::StringImpl **)v3;
          unint64_t v68 = *((void *)v3 + 1);
        }
        else
        {
          unint64_t v68 = 0;
          size_t v6 = 0;
        }
      }
      goto LABEL_169;
    }
    unsigned int v70 = *v69;
    if (v70 < 4)
    {
      unsigned int v71 = v70 | 0x100;
      goto LABEL_121;
    }
LABEL_169:
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v95 = *((void *)v3 + 3);
    if (v95 && v68) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v95 + 16))(v95, v6);
    }
    unsigned int v71 = 0;
LABEL_121:
    uint64_t v5 = (uint64_t)IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientInputs>>(&v152, v3);
    if (!*(void *)v3) {
      break;
    }
    if (v169)
    {
      long long v72 = v166;
      long long v166 = 0uLL;
      *(_OWORD *)uint64_t v135 = v72;
      LOBYTE(v136) = 0;
      LOBYTE(v137) = 0;
      if (v168)
      {
        uint64_t v73 = v167;
        char v167 = 0;
        char v136 = v73;
        LOBYTE(v137) = 1;
      }
      if (v165)
      {
        long long v74 = v162;
        long long v162 = 0uLL;
        long long v138 = v74;
        int v3 = (IPC::Decoder *)v139;
        uint64_t v5 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v139, (uint64_t)v163);
        uint64_t v75 = v164;
        uint64_t v164 = 0;
        v139[2] = v75;
        if (v161)
        {
          uint64_t v5 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v140, (uint64_t)&v159);
          if (!i)
          {
            v140[2] = v25;
            int v141 = v130;
            int v142 = v2;
            if (v132)
            {
              int v143 = v131;
              char v144 = BYTE4(v131);
              if (v158)
              {
                long long v145 = v156;
                uint64_t v76 = v157;
                char v156 = 0;
                uint64_t v157 = 0;
                uint64_t v146 = v76;
                if (!v47)
                {
                  int v147 = v46;
                  char v149 = BYTE6(v46);
                  __int16 v148 = WORD2(v46);
                  if (v71 > 0xFF)
                  {
                    char v150 = v71;
                    if (v155)
                    {
                      std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](v151, (uint64_t)&v152);
                      *(unsigned char *)(WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v133, (uint64_t)v135)+ 296) = 1;
                      WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)v135);
                      uint64_t v25 = 0;
                      goto LABEL_134;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_146:
    __break(1u);
LABEL_147:
    if (v7) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v5 + 16))(v5, v6);
    }
LABEL_75:
    uint64_t v25 = 0;
  }
  *char v133 = 0;
  v133[296] = 0;
LABEL_134:
  if (v155) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&v152);
  }
  if (v158) {
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v156);
  }
  char v77 = i;
  if (!v25) {
    char v77 = 1;
  }
  if ((v77 & 1) == 0) {
    WTF::fastFree(v25, v6);
  }
  if (v161 && v160 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B4628[v160])(v135, &v159);
  }
  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::UserEntity,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v162, v6);
  return std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::RpEntity,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v166);
}

void sub_198857E44(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::UserEntity,false>::~__optional_destruct_base[abi:sn180100](v2 - 208, a2);
  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::RpEntity,false>::~__optional_destruct_base[abi:sn180100](v2 - 160);
  _Unwind_Resume(a1);
}

WTF::ASCIILiteral *IPC::Decoder::decode<WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  unint64_t v6 = v4;
  uint64_t v34 = 0;
  long long v35 = 0;
  if (v4 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialDescriptor>((uint64_t)v28, a2);
      if (!v33) {
        goto LABEL_21;
      }
      unsigned int v18 = HIDWORD(v35);
      if (HIDWORD(v35) == v35)
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PublicKeyCredentialDescriptor>((uint64_t)&v34, (unint64_t)v28);
      }
      else
      {
        uint64_t v20 = v34;
        uint64_t v21 = (unsigned char *)(v34 + 40 * HIDWORD(v35));
        *uint64_t v21 = v28[0];
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v21 + 8), (uint64_t)v29);
        uint64_t v22 = v20 + 40 * v18;
        *(void *)(v22 + 24) = 0;
        *(void *)(v22 + 32) = 0;
        uint64_t v23 = v30;
        uint64_t v30 = 0;
        *(void *)(v22 + 24) = v23;
        LODWORD(v23) = v31;
        int v31 = 0;
        *(_DWORD *)(v22 + 32) = v23;
        LODWORD(v23) = v32;
        int v32 = 0;
        *(_DWORD *)(v22 + 36) = v23;
        ++HIDWORD(v35);
      }
      std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v19);
      if (!--v6)
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
        uint64_t v24 = v34;
        uint64_t v34 = 0;
        *(void *)a1 = v24;
        int v16 = (int)v35;
        int v15 = HIDWORD(v35);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v35) = 40 * (int)v4 / 0x28u;
    uint64_t v34 = WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialDescriptor>((uint64_t)v28, a2);
      if (!v33) {
        break;
      }
      unsigned int v8 = HIDWORD(v35);
      if (HIDWORD(v35) == v35)
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PublicKeyCredentialDescriptor>((uint64_t)&v34, (unint64_t)v28);
      }
      else
      {
        uint64_t v10 = v34;
        char v11 = (unsigned char *)(v34 + 40 * HIDWORD(v35));
        *char v11 = v28[0];
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v11 + 8), (uint64_t)v29);
        uint64_t v12 = v10 + 40 * v8;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 32) = 0;
        uint64_t v13 = v30;
        uint64_t v30 = 0;
        *(void *)(v12 + 24) = v13;
        LODWORD(v13) = v31;
        int v31 = 0;
        *(_DWORD *)(v12 + 32) = v13;
        LODWORD(v13) = v32;
        int v32 = 0;
        *(_DWORD *)(v12 + 36) = v13;
        ++HIDWORD(v35);
      }
      std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v9);
      if (!--v6)
      {
        uint64_t v14 = v34;
        int v16 = (int)v35;
        int v15 = HIDWORD(v35);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v7);
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v34);
LABEL_22:
    uint64_t v25 = *a2;
    uint64_t v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::ASCIILiteral *)a2[3];
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (!v27) {
      return (WTF::ASCIILiteral *)(*(uint64_t (**)(WTF::ASCIILiteral *, uint64_t))(*(void *)result + 16))(result, v25);
    }
    return result;
  }
  int v15 = 0;
  int v16 = 0;
  uint64_t v14 = 0;
LABEL_13:
  uint64_t v34 = 0;
  *(void *)a1 = v14;
LABEL_14:
  long long v35 = 0;
  *(_DWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 12) = v15;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v34);
}

void sub_19885854C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

WebCore::AuthenticationExtensionsClientInputs *IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientInputs>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  char v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v47 = 0;
    unint64_t v48 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v49 = *((void *)a2 + 3);
    if (v49)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
        unint64_t v48 = *(WTF::StringImpl **)a2;
        unint64_t v47 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v47 = 0;
        unint64_t v48 = 0;
      }
    }
    goto LABEL_71;
  }
  unsigned int v8 = (unsigned __int8 *)v5 + v7;
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v47 = v6;
    unint64_t v48 = 0;
LABEL_71:
    unint64_t v6 = 0;
    char v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v50 = *((void *)a2 + 3);
    if (v50)
    {
      if (v47)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v50 + 16))(v50, v48, v47);
        char v5 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_72;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_72:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WebCore::AuthenticationExtensionsClientInputs *)*((void *)a2 + 3);
    if (result && v6) {
      uint64_t result = (WebCore::AuthenticationExtensionsClientInputs *)(*(uint64_t (**)(WebCore::AuthenticationExtensionsClientInputs *, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
    }
    *a1 = 0;
    a1[152] = 0;
LABEL_143:
    if (a1[152]) {
      return result;
    }
    goto LABEL_146;
  }
  if (!v9)
  {
    LOBYTE(v107[0]) = 0;
    char v108 = 0;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v107);
    goto LABEL_141;
  }
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v124);
  unint64_t v10 = *((void *)a2 + 1);
  char v11 = *(WTF::StringImpl **)a2;
  unint64_t v12 = *((void *)a2 + 2) - *(void *)a2;
  if (v10 <= v12)
  {
    unint64_t v52 = 0;
    unint64_t v53 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v54 = *((void *)a2 + 3);
    if (v54)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
        unint64_t v53 = *(WTF::StringImpl **)a2;
        unint64_t v52 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v52 = 0;
        unint64_t v53 = 0;
      }
    }
    goto LABEL_75;
  }
  uint64_t v13 = (unsigned __int8 *)v11 + v12;
  *((void *)a2 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v52 = v10;
    unint64_t v53 = 0;
LABEL_75:
    unint64_t v10 = 0;
    char v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v55 = *((void *)a2 + 3);
    if (v55)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v55 + 16))(v55, v53, v52);
        char v11 = *(WTF::StringImpl **)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        char v11 = 0;
      }
    }
    goto LABEL_76;
  }
  unsigned int v14 = *v13;
  if (v14 < 2)
  {
    if (v14)
    {
      IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v137);
      int v15 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
      IPC::Decoder::decode<std::optional<WebCore::BufferSource>>(&v126, (uint64_t *)a2);
      if (*(void *)a2)
      {
        if (!v138) {
          goto LABEL_145;
        }
        long long v17 = v137;
        int v137 = 0;
        uint64_t v116 = v17;
        if ((v15 & 0xFF0000) == 0) {
          goto LABEL_145;
        }
        __int16 v117 = v15;
        if (!v129[0]) {
          goto LABEL_145;
        }
        std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](v118, (uint64_t)&v126);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>((uint64_t)v109, (uint64_t *)&v116);
        if (v120)
        {
          if (v119 != -1) {
            ((void (*)(uint64_t *, char *))off_1EE9B4628[v119])(&v133, v118);
          }
          int v119 = -1;
        }
        unsigned int v18 = v116;
        uint64_t v116 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v16);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      else
      {
        LOBYTE(v109[0]) = 0;
        char v111 = 0;
      }
      if (v129[0] && v128 && v127 != -1) {
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9B4628[v127])(&v116, &v126);
      }
      if (v138)
      {
        char v19 = v137;
        int v137 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v16);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      if (!v111)
      {
        uint64_t v73 = *(WTF::StringImpl **)a2;
        uint64_t v74 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v75 = *((void *)a2 + 3);
        if (!v75
          || !v74
          || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v75 + 16))(v75, v73), !v111))
        {
          char v20 = 0;
          v122[0] = 0;
          goto LABEL_35;
        }
      }
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>((uint64_t)v122, (uint64_t *)v109);
    }
    else
    {
      LOBYTE(v109[0]) = 0;
      char v111 = 0;
      std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](v122, (uint64_t)v109);
    }
    char v20 = 1;
LABEL_35:
    char v123 = v20;
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v109);
    goto LABEL_36;
  }
LABEL_76:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v56 = *((void *)a2 + 3);
  if (v56 && v10) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v56 + 16))(v56, v11);
  }
  v122[0] = 0;
  char v123 = 0;
LABEL_36:
  unint64_t v21 = *((void *)a2 + 1);
  if (!v123)
  {
    unint64_t v57 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v58 = *((void *)a2 + 3);
    if (!v58 || !v21)
    {
      unint64_t v59 = 0;
      uint64_t v60 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      goto LABEL_80;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v58 + 16))(v58, v57);
    unint64_t v21 = *((void *)a2 + 1);
  }
  uint64_t v22 = *(WTF::StringImpl **)a2;
  unint64_t v23 = *((void *)a2 + 2) - *(void *)a2;
  if (v21 <= v23)
  {
    unint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v101 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v101)
    {
      if (v21)
      {
        (*(void (**)(uint64_t))(*(void *)v101 + 16))(v101);
        uint64_t v60 = *(WTF::StringImpl **)a2;
        unint64_t v59 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v59 = 0;
        uint64_t v60 = 0;
      }
    }
    goto LABEL_80;
  }
  uint64_t v24 = (unsigned __int8 *)v22 + v23;
  *((void *)a2 + 2) = v24 + 1;
  if (!v22)
  {
    unint64_t v59 = v21;
    uint64_t v60 = 0;
LABEL_80:
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v61 = *((void *)a2 + 3);
    if (v61)
    {
      if (v59)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v61 + 16))(v61, v60, v59);
        uint64_t v22 = *(WTF::StringImpl **)a2;
        unint64_t v21 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_81;
  }
  if (*v24 >= 2u)
  {
LABEL_81:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v62 = *((void *)a2 + 3);
    if (v62 && v21) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v62 + 16))(v62, v22);
    }
    LOBYTE(v116) = 0;
    char v121 = 0;
    goto LABEL_121;
  }
  if (!*v24)
  {
    LOBYTE(v109[0]) = 0;
    char v114 = 0;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](&v116, (uint64_t)v109);
    goto LABEL_119;
  }
  if (v21 <= v24 + 1 - (unsigned __int8 *)v22)
  {
    unint64_t v63 = 0;
    unsigned int v64 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v65 = *((void *)a2 + 3);
    if (v65)
    {
      (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
      unint64_t v63 = 0;
      char v102 = *(WTF::StringImpl **)a2;
      uint64_t v103 = *((void *)a2 + 1);
      uint64_t v104 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unsigned int v64 = 0;
      if (v104)
      {
        if (v103)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v104 + 16))(v104, v102);
          unsigned int v64 = *(WTF::StringImpl **)a2;
          unint64_t v63 = *((void *)a2 + 1);
        }
      }
    }
  }
  else
  {
    *((void *)a2 + 2) = v24 + 2;
    unsigned int v25 = v24[1];
    if (v25 < 2)
    {
      if (v25)
      {
        IPC::Decoder::decode<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(&v126, (uint64_t *)a2);
        char v26 = v130;
        if (!v130)
        {
          LOBYTE(v137) = 0;
          goto LABEL_50;
        }
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)&v137, (uint64_t)&v126);
      }
      else
      {
        LOBYTE(v126) = 0;
        char v130 = 0;
        std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](&v137, (uint64_t)&v126);
      }
      char v26 = 1;
LABEL_50:
      char v139 = v26;
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)&v126);
      goto LABEL_51;
    }
    unint64_t v63 = v21;
    unsigned int v64 = v22;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v66 = *((void *)a2 + 3);
  if (v66 && v63) {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v66 + 16))(v66, v64, v63);
  }
  LOBYTE(v137) = 0;
  char v139 = 0;
LABEL_51:
  unint64_t v27 = *((void *)a2 + 1);
  if (!v139)
  {
    uint64_t v67 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v68 = *((void *)a2 + 3);
    if (!v68 || !v27)
    {
      unint64_t v69 = 0;
      unsigned int v70 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      goto LABEL_89;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v68 + 16))(v68, v67);
    unint64_t v27 = *((void *)a2 + 1);
  }
  uint64_t v28 = *(WTF::StringImpl **)a2;
  unint64_t v29 = *((void *)a2 + 2) - *(void *)a2;
  if (v27 <= v29)
  {
    unint64_t v69 = 0;
    unsigned int v70 = 0;
    uint64_t v105 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v105)
    {
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v105 + 16))(v105);
        unsigned int v70 = *(WTF::StringImpl **)a2;
        unint64_t v69 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v69 = 0;
        unsigned int v70 = 0;
      }
    }
    goto LABEL_89;
  }
  uint64_t v30 = (unsigned __int8 *)v28 + v29;
  *((void *)a2 + 2) = v30 + 1;
  if (!v28)
  {
    unint64_t v69 = v27;
    unsigned int v70 = 0;
LABEL_89:
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v71 = *((void *)a2 + 3);
    if (v71)
    {
      if (v69)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v71 + 16))(v71, v70, v69);
        uint64_t v28 = *(WTF::StringImpl **)a2;
        unint64_t v27 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
LABEL_90:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v72 = *((void *)a2 + 3);
    if (!v72 || !v27) {
      goto LABEL_103;
    }
LABEL_92:
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v72 + 16))(v72, v28);
LABEL_103:
    LOBYTE(v133) = 0;
    char v136 = 0;
    uint64_t v82 = *(WTF::StringImpl **)a2;
    uint64_t v83 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v84 = *((void *)a2 + 3);
    if (v84 && v83) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v84 + 16))(v84, v82);
    }
    int v45 = 0;
    int v46 = 0;
    goto LABEL_105;
  }
  unsigned int v31 = *v30;
  if (v31 >= 2) {
    goto LABEL_90;
  }
  if (!v31)
  {
    int v45 = 0;
    LOBYTE(v133) = 0;
    unsigned __int8 v135 = 0;
    int v46 = 1;
    char v136 = 1;
    goto LABEL_105;
  }
  unint64_t v32 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v33)
  {
LABEL_102:
    uint64_t v28 = *(WTF::StringImpl **)a2;
    uint64_t v81 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v72 = *((void *)a2 + 3);
    if (!v72 || !v81) {
      goto LABEL_103;
    }
    goto LABEL_92;
  }
  unint64_t v34 = v32;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  if (v32 >= 0x5555)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v126, a2);
      if (!LOBYTE(v131[0])) {
        goto LABEL_101;
      }
      unsigned int v76 = HIDWORD(v143);
      if (HIDWORD(v143) == v143)
      {
        WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v142, (unint64_t)&v126);
      }
      else
      {
        uint64_t v78 = v142;
        uint64_t v79 = v126;
        uint64_t v126 = 0;
        uint64_t v80 = (void *)(v142 + 48 * HIDWORD(v143));
        *uint64_t v80 = v79;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v80 + 1), (uint64_t)&v127);
        std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v78 + 48 * v76 + 24), (uint64_t)v129);
        ++HIDWORD(v143);
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126, v77);
      if (!--v34)
      {
        WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v142, HIDWORD(v143));
        uint64_t v43 = v142;
        uint64_t v142 = 0;
        uint64_t v106 = v143;
        goto LABEL_69;
      }
    }
  }
  if (v32)
  {
    unsigned int v35 = 48 * v32;
    uint64_t v36 = WTF::fastMalloc((WTF *)(48 * v32));
    LODWORD(v143) = v35 / 0x30;
    uint64_t v142 = v36;
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v126, a2);
      if (!LOBYTE(v131[0])) {
        break;
      }
      unsigned int v38 = HIDWORD(v143);
      if (HIDWORD(v143) == v143)
      {
        WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v142, (unint64_t)&v126);
      }
      else
      {
        uint64_t v40 = v142;
        uint64_t v41 = v126;
        uint64_t v126 = 0;
        unsigned int v42 = (void *)(v142 + 48 * HIDWORD(v143));
        *unsigned int v42 = v41;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v42 + 1), (uint64_t)&v127);
        std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v40 + 48 * v38 + 24), (uint64_t)v129);
        ++HIDWORD(v143);
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126, v39);
      if (!--v34)
      {
        uint64_t v43 = v142;
        uint64_t v44 = v143;
        goto LABEL_68;
      }
    }
LABEL_101:
    std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126, v37);
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v142);
    goto LABEL_102;
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
LABEL_68:
  uint64_t v106 = v44;
  uint64_t v142 = 0;
LABEL_69:
  uint64_t v143 = 0;
  int v45 = 1;
  char v141 = 1;
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v142);
  v140[0] = 0;
  v140[1] = 0;
  uint64_t v133 = v43;
  uint64_t v134 = v106;
  unsigned __int8 v135 = 1;
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v140);
  char v136 = 1;
  int v46 = 1;
LABEL_105:
  if (*(void *)a2)
  {
    if (!v139) {
      goto LABEL_145;
    }
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](&v126, (uint64_t)&v137);
    if (!v136) {
      goto LABEL_145;
    }
    LOBYTE(v131[0]) = 0;
    char v132 = 0;
    if (v135)
    {
      v131[0] = v133;
      uint64_t v85 = v134;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      v131[1] = v85;
      char v132 = 1;
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(v109, (uint64_t)&v126);
    if (v132) {
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v131);
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)&v126);
    int v45 = v135;
    if (!v136) {
      goto LABEL_115;
    }
    goto LABEL_113;
  }
  LOBYTE(v109[0]) = 0;
  char v114 = 0;
  if (v46)
  {
LABEL_113:
    if (v45) {
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v133);
    }
  }
LABEL_115:
  if (v139) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)&v137);
  }
  if (!v114)
  {
    uint64_t v98 = *(WTF::StringImpl **)a2;
    uint64_t v99 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v100 = *((void *)a2 + 3);
    if (!v100
      || !v99
      || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v100 + 16))(v100, v98), !v114))
    {
      char v86 = 0;
      LOBYTE(v116) = 0;
      goto LABEL_120;
    }
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(&v116, (uint64_t)v109);
LABEL_119:
  char v86 = 1;
LABEL_120:
  char v121 = v86;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v109);
LABEL_121:
  if (!v121)
  {
    uint64_t v22 = *(WTF::StringImpl **)a2;
    uint64_t v93 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v94 = *((void *)a2 + 3);
    if (v94)
    {
      if (v93) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v94 + 16))(v94, v22);
      }
    }
  }
  if (!*(void *)a2)
  {
    LOBYTE(v107[0]) = 0;
    char v108 = 0;
LABEL_130:
    if (v121) {
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)&v116);
    }
    if (v123) {
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v122);
    }
    if (v125)
    {
      uint64_t v89 = v124;
      uint64_t v124 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2) {
          WTF::StringImpl::destroy(v89, v22);
        }
        else {
          *(_DWORD *)v89 -= 2;
        }
      }
    }
    if (!v108)
    {
      uint64_t v95 = *(WTF::StringImpl **)a2;
      uint64_t v96 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v97 = *((void *)a2 + 3);
      if (!v97
        || !v96
        || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v97 + 16))(v97, v95), !v108))
      {
        char v90 = 0;
        *a1 = 0;
        goto LABEL_142;
      }
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>((uint64_t)a1, v107);
LABEL_141:
    char v90 = 1;
LABEL_142:
    a1[152] = v90;
    uint64_t result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v107);
    goto LABEL_143;
  }
  v109[0] = 0;
  v110[0] = 0;
  char v112 = 0;
  v113[0] = 0;
  char v115 = 0;
  if (v125)
  {
    uint64_t v87 = v124;
    uint64_t v124 = 0;
    v109[0] = v87;
    if (v123)
    {
      std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v110, (uint64_t)v122);
      if (v121)
      {
        std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v113, (uint64_t)&v116);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>((uint64_t)v107, (uint64_t *)v109);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v113);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v110);
        uint64_t v88 = v109[0];
        v109[0] = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2) {
            WTF::StringImpl::destroy(v88, v22);
          }
          else {
            *(_DWORD *)v88 -= 2;
          }
        }
        goto LABEL_130;
      }
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  unint64_t v91 = *(WTF::StringImpl **)a2;
  uint64_t v92 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WebCore::AuthenticationExtensionsClientInputs *)*((void *)a2 + 3);
  if (result)
  {
    if (v92) {
      return (WebCore::AuthenticationExtensionsClientInputs *)(*(uint64_t (**)(WebCore::AuthenticationExtensionsClientInputs *, WTF::StringImpl *))(*(void *)result + 16))(result, v91);
    }
  }
  return result;
}

void sub_19885942C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,__int16 a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)&a30);
  if (a65) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&a59);
  }
  if (a67)
  {
    unint64_t v69 = a66;
    a66 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2) {
        WTF::StringImpl::destroy(v69, v68);
      }
      else {
        *(_DWORD *)v69 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::encode(IPC::Encoder *a1, WebCore::BufferSource *this)
{
  uint64_t v4 = (const void *)WebCore::BufferSource::span(this);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)this + 16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)this + 3);
  IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)this + 32);
  char v7 = *((unsigned char *)this + 48);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  return IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs>&>(a1, (uint64_t)this + 56);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::BufferSource>(v28, a1);
  uint64_t v4 = IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v26);
  IPC::Decoder::decode<WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v23, a1);
  unsigned __int16 v7 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientInputs>>(v21, (IPC::Decoder *)a1);
  if (!*a1) {
    goto LABEL_28;
  }
  if (!v30) {
    goto LABEL_27;
  }
  uint64_t result = (WTF::StringImpl *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v13, (uint64_t)v28);
  if (!v6) {
    goto LABEL_27;
  }
  LODWORD(v15) = v4;
  BYTE4(v15) = BYTE4(v4);
  if (!v27) {
    goto LABEL_27;
  }
  unint64_t v10 = v26;
  char v26 = 0;
  v16[0] = v10;
  if (!v25 || (v16[1] = v23, v11 = v24, v23 = 0, v24 = 0, uint64_t v17 = v11, v7 <= 0xFFu) || (v18 = v7, !v22))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 216) = 0;
    goto LABEL_14;
  }
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](v19, (uint64_t)v21);
  __int16 v20 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v13);
  *(void *)(a2 + 16) = v15;
  long long v12 = *(_OWORD *)v16;
  v16[0] = 0;
  v16[1] = 0;
  *(_OWORD *)(a2 + 24) = v12;
  *(void *)&long long v12 = v17;
  uint64_t v17 = 0;
  *(void *)(a2 + 40) = v12;
  *(unsigned char *)(a2 + 48) = v18;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 56), (uint64_t)v19);
  *(_WORD *)(a2 + 208) = v20;
  *(unsigned char *)(a2 + 216) = 1;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v19);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v16[1]);
  uint64_t result = v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v14 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1EE9B4628[v14])(&v31, &v13);
  }
LABEL_14:
  if (v22) {
    uint64_t result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v21);
  }
  if (v25) {
    uint64_t result = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v23);
  }
  if (v27)
  {
    uint64_t result = v26;
    char v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v30)
  {
    if (v29 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9B4628[v29])(&v13, v28);
    }
  }
  return result;
}

void sub_1988599E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v59 = v55;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v59 + 32));
  uint64_t v62 = *(WTF::StringImpl **)(v59 + 24);
  *(void *)(v59 + 24) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2) {
      WTF::StringImpl::destroy(v62, v61);
    }
    else {
      *(_DWORD *)v62 -= 2;
    }
  }
  uint64_t v63 = *(unsigned int *)(v59 + 8);
  if (v63 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9B4628[v63])(v58 - 49, v59);
  }
  *(_DWORD *)(v59 + 8) = -1;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](v57);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v56);
  uint64_t v65 = a12;
  a12 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2) {
      WTF::StringImpl::destroy(v65, v64);
    }
    else {
      *(_DWORD *)v65 -= 2;
    }
  }
  if (a10 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9B4628[a10])(v58 - 49, &a9);
  }
  if (a55) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a36);
  }
  if (*(unsigned char *)(v58 - 104)) {
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v58 - 120));
  }
  if (*(unsigned char *)(v58 - 88))
  {
    uint64_t v66 = *(WTF::StringImpl **)(v58 - 96);
    *(void *)(v58 - 96) = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2) {
        WTF::StringImpl::destroy(v66, v64);
      }
      else {
        *(_DWORD *)v66 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v58 - 64))
  {
    uint64_t v67 = *(unsigned int *)(v58 - 72);
    if (v67 != -1) {
      ((void (*)(uint64_t *, uint64_t))off_1EE9B4628[v67])(&a9, v58 - 80);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::Cookie,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 40);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 56));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 57));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 58));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<std::span<unsigned short const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 112), *(unsigned int *)(a2 + 124));
  char v5 = *(unsigned char *)(a2 + 128);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Cookie,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v97);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v95);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v93);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v91);
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unsigned int v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (!v5)
    {
      unint64_t v47 = v4;
      uint64_t v48 = 0;
      goto LABEL_82;
    }
    int v9 = 0;
    uint64_t v10 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v47 = 0;
    uint64_t v48 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v49 = *((void *)a1 + 3);
    if (v49)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v49 + 16))(v49, v5, v4);
        uint64_t v48 = *(void *)a1;
        unint64_t v47 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v47 = 0;
        uint64_t v48 = 0;
      }
    }
LABEL_82:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = 0;
    uint64_t v50 = *((void *)a1 + 3);
    if (v50 && v47) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48);
    }
    int v9 = 1;
LABEL_8:
    IPC::Decoder::decode<std::optional<double>>(a1, &v89);
    unint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = *(void *)a1;
    unint64_t v13 = *((void *)a1 + 2) - *(void *)a1;
    if (v11 <= v13)
    {
      unint64_t v51 = 0;
      uint64_t v52 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v53 = *((void *)a1 + 3);
      if (v53)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
          uint64_t v52 = *(void *)a1;
          unint64_t v51 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v51 = 0;
          uint64_t v52 = 0;
        }
      }
      goto LABEL_85;
    }
    int v14 = (unsigned __int8 *)(v12 + v13);
    uint64_t v15 = v12 + v13 + 1;
    *((void *)a1 + 2) = v15;
    if (!v12)
    {
      unint64_t v51 = v11;
      uint64_t v52 = 0;
LABEL_85:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v54 = *((void *)a1 + 3);
      if (v54 && v51)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v54 + 16))(v54, v52, v51);
        unsigned int v16 = 0;
        uint64_t v12 = *(void *)a1;
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_87;
    }
    unsigned int v16 = *v14;
    if (v16 < 2)
    {
      int v17 = 0;
      char v18 = 1;
      goto LABEL_12;
    }
LABEL_87:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v55 = *((void *)a1 + 3);
    if (!v55 || !v11)
    {
      char v19 = 0;
      unint64_t v56 = 0;
      uint64_t v12 = 0;
      int v17 = 1;
LABEL_89:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v57 = *((void *)a1 + 3);
      if (v57 && v56)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v57 + 16))(v57, v12, v56);
        unsigned int v23 = 0;
        uint64_t v12 = *(void *)a1;
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        unsigned int v23 = 0;
      }
      goto LABEL_91;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v55 + 16))(v55, v12);
    char v18 = 0;
    uint64_t v12 = *(void *)a1;
    unint64_t v11 = *((void *)a1 + 1);
    int v17 = 1;
    uint64_t v15 = *((void *)a1 + 2);
LABEL_12:
    if (v16) {
      char v19 = v18;
    }
    else {
      char v19 = 0;
    }
    unint64_t v20 = v15 - v12;
    if (v11 <= v20)
    {
      unint64_t v56 = 0;
      uint64_t v66 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v66 && v11)
      {
        (*(void (**)(uint64_t))(*(void *)v66 + 16))(v66);
        uint64_t v12 = *(void *)a1;
        unint64_t v56 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v12 = 0;
      }
      goto LABEL_89;
    }
    unint64_t v21 = (unsigned __int8 *)(v12 + v20);
    uint64_t v22 = v12 + v20 + 1;
    *((void *)a1 + 2) = v22;
    if (!v12)
    {
      unint64_t v56 = v11;
      goto LABEL_89;
    }
    unsigned int v23 = *v21;
    if (v23 < 2)
    {
      int v24 = 0;
      char v25 = 1;
      goto LABEL_19;
    }
LABEL_91:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v58 = *((void *)a1 + 3);
    if (!v58 || !v11)
    {
      char v26 = 0;
      unint64_t v59 = 0;
      uint64_t v12 = 0;
      int v24 = 1;
LABEL_93:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v60 = *((void *)a1 + 3);
      if (v60 && v59)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v60 + 16))(v60, v12, v59);
        unsigned int v29 = 0;
        uint64_t v12 = *(void *)a1;
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        unsigned int v29 = 0;
      }
      goto LABEL_95;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v12);
    char v25 = 0;
    uint64_t v12 = *(void *)a1;
    unint64_t v11 = *((void *)a1 + 1);
    int v24 = 1;
    uint64_t v22 = *((void *)a1 + 2);
LABEL_19:
    if (v23) {
      char v26 = v25;
    }
    else {
      char v26 = 0;
    }
    unint64_t v27 = v22 - v12;
    if (v11 <= v27)
    {
      unint64_t v59 = 0;
      uint64_t v67 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v67 && v11)
      {
        (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
        uint64_t v12 = *(void *)a1;
        unint64_t v59 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v12 = 0;
      }
      goto LABEL_93;
    }
    uint64_t v28 = (unsigned __int8 *)(v12 + v27);
    *((void *)a1 + 2) = v28 + 1;
    if (!v12)
    {
      unint64_t v59 = v11;
      goto LABEL_93;
    }
    unsigned int v29 = *v28;
    if (v29 < 2)
    {
      int v30 = 0;
      char v31 = 1;
      goto LABEL_26;
    }
LABEL_95:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v61 = *((void *)a1 + 3);
    if (v61 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 16))(v61, v12);
    }
    char v31 = 0;
    int v30 = 1;
LABEL_26:
    char v32 = v29 ? v31 : 0;
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v87);
    IPC::Decoder::decode<WTF::URL>(a1, &v83);
    IPC::Decoder::decode<WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v80, a1);
    unint64_t v33 = *((void *)a1 + 1);
    unint64_t v34 = *(char **)a1;
    unint64_t v35 = *((void *)a1 + 2) - *(void *)a1;
    if (v33 <= v35) {
      break;
    }
    uint64_t v36 = &v34[v35];
    *((void *)a1 + 2) = v36 + 1;
    if (!v34)
    {
      unint64_t v62 = v33;
      uint64_t v63 = 0;
      goto LABEL_98;
    }
    uint64_t v5 = *v36;
    if (v5 > 2) {
      goto LABEL_99;
    }
    unint64_t v4 = v5 | 0x100;
LABEL_33:
    if (v98)
    {
      if (v96)
      {
        if (v94)
        {
          if (v92)
          {
            if (!v9)
            {
              if (v90)
              {
                if (!v17 && !v24 && !v30)
                {
                  if (v88)
                  {
                    if (v86)
                    {
                      if (v82)
                      {
                        uint64_t v37 = v80;
                        uint64_t v38 = v81;
                        uint64_t v80 = 0;
                        uint64_t v81 = 0;
                        if (v4 > 0xFF)
                        {
                          uint64_t v39 = (uint64_t)v97;
                          uint64_t v97 = 0;
                          uint64_t v40 = (uint64_t)v95;
                          uint64_t v95 = 0;
                          v68[0] = v39;
                          v68[1] = v40;
                          uint64_t v41 = (uint64_t)v93;
                          uint64_t v93 = 0;
                          uint64_t v42 = (uint64_t)v91;
                          unint64_t v91 = 0;
                          v68[2] = v41;
                          v68[3] = v42;
                          v68[4] = v10;
                          long long v69 = v89;
                          char v70 = v19;
                          char v71 = v26;
                          char v72 = v32;
                          uint64_t v43 = v87;
                          uint64_t v87 = 0;
                          uint64_t v44 = v83;
                          uint64_t v83 = 0;
                          uint64_t v73 = v43;
                          uint64_t v74 = v44;
                          long long v75 = v84;
                          long long v76 = v85;
                          LODWORD(v84) = v84 & 0xFFFFFFFE;
                          char v77 = v37;
                          uint64_t v78 = v38;
                          char v79 = v5;
                          WebCore::Cookie::Cookie((uint64_t)a2, v68);
                          a2[136] = 1;
                          WebCore::Cookie::~Cookie((WebCore::Cookie *)v68, v45);
                          goto LABEL_47;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v64 = *((void *)a1 + 3);
  if (v64)
  {
    if (v33)
    {
      (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
      uint64_t v63 = *(char **)a1;
      unint64_t v62 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v62 = 0;
      uint64_t v63 = 0;
    }
  }
LABEL_98:
  unint64_t v33 = 0;
  unint64_t v34 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v65 = *((void *)a1 + 3);
  if (v65)
  {
    if (v62)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v65 + 16))(v65, v63, v62);
      unint64_t v34 = *(char **)a1;
      unint64_t v33 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v33 = 0;
      unint64_t v34 = 0;
    }
  }
LABEL_99:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v33)
    {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)result + 16))(result, v34);
      if (*(void *)a1)
      {
        uint64_t v5 = 0;
        unint64_t v4 = 0;
        goto LABEL_33;
      }
    }
  }
  *a2 = 0;
  a2[136] = 0;
  if (!v82) {
    goto LABEL_49;
  }
LABEL_47:
  uint64_t result = v80;
  if (v80) {
    uint64_t result = (WTF::StringImpl *)WTF::fastFree(v80, v34);
  }
LABEL_49:
  if (v86)
  {
    uint64_t result = v83;
    uint64_t v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v88)
  {
    uint64_t result = v87;
    uint64_t v87 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v92)
  {
    uint64_t result = v91;
    unint64_t v91 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v94)
  {
    uint64_t result = v93;
    uint64_t v93 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v96)
  {
    uint64_t result = v95;
    uint64_t v95 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v98)
  {
    uint64_t result = v97;
    uint64_t v97 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19885A4A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,WTF::StringImpl *a35,char a36)
{
  if (*(unsigned char *)(v36 - 152))
  {
    uint64_t v38 = *(WTF::StringImpl **)(v36 - 160);
    *(void *)(v36 - 160) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, a2);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v36 - 136))
  {
    uint64_t v39 = *(WTF::StringImpl **)(v36 - 144);
    *(void *)(v36 - 144) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, a2);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v36 - 120))
  {
    uint64_t v40 = *(WTF::StringImpl **)(v36 - 128);
    *(void *)(v36 - 128) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, a2);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v36 - 104))
  {
    uint64_t v41 = *(WTF::StringImpl **)(v36 - 112);
    *(void *)(v36 - 112) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, a2);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 < v5 || v3 - v5 <= 7)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      char v25 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v4);
        a2 = v25;
        uint64_t v16 = *v25;
        unint64_t v15 = v25[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned __int16 v7 = (unint64_t *)(v4 + v5);
  uint64_t v8 = v4 + v5 + 8;
  a2[2] = v8;
  if (!v4)
  {
    unint64_t v15 = v3;
    uint64_t v16 = 0;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (!v18 || !v15) {
      goto LABEL_24;
    }
    char v19 = a2;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
    goto LABEL_38;
  }
  unint64_t v9 = *v7;
  if (!*v7)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    goto LABEL_17;
  }
  if ((v9 & 0x8000000000000000) == 0)
  {
    unint64_t v10 = ((v8 + 1) & 0xFFFFFFFFFFFFFFFELL) - v4;
    unint64_t v11 = 2 * v9;
    if (v3 < v10 || v3 - v10 < v11)
    {
      *a2 = 0;
      a2[1] = 0;
      uint64_t v20 = a2[3];
      if (!v20 || !v3) {
        goto LABEL_24;
      }
      char v19 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v4);
LABEL_38:
      a2 = v19;
      goto LABEL_24;
    }
    unint64_t v13 = (__int16 *)(v4 + v10);
    a2[2] = v4 + v10 + v11;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = v9;
    if (v9 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19885A884);
    }
    uint64_t result = WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v2 + 8) = v9;
    *(void *)uint64_t v2 = result;
    do
    {
      __int16 v14 = *v13++;
      *(_WORD *)uint64_t result = v14;
      result += 2;
      v11 -= 2;
    }
    while (v11);
LABEL_17:
    *(unsigned char *)(v2 + 16) = 1;
    return result;
  }
LABEL_24:
  uint64_t v22 = *a2;
  uint64_t v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    int v24 = a2;
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v22);
      a2 = v24;
      uint64_t v21 = v24[1];
      uint64_t result = v24[3];
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  *(unsigned char *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result && v21)
  {
    unsigned int v23 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v23();
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 16));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 20));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 40);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 56);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 72);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 88);
}

uint64_t IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v59 = 0;
      uint64_t v56 = *v8;
      uint64_t v9 = v5;
      goto LABEL_8;
    }
    unint64_t v34 = v4;
    uint64_t v35 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (v36)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v5);
        uint64_t v35 = *(void *)a1;
        unint64_t v34 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v37 = *((void *)a1 + 3);
  if (v37 && v34)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v37 + 16))(v37, v35, v34);
    uint64_t v56 = 0;
    uint64_t v9 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v59 = 1;
    uint64_t v5 = *(void *)a1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v56 = 0;
    int v59 = 1;
  }
LABEL_8:
  unint64_t v10 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v10 && v4 - v10 > 7)
  {
    uint64_t v12 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v12 + 1;
    if (v5)
    {
      int v58 = 0;
      uint64_t v55 = *v12;
      goto LABEL_15;
    }
    unint64_t v38 = v4;
    uint64_t v39 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v5);
        uint64_t v39 = *(void *)a1;
        unint64_t v38 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v38 = 0;
        uint64_t v39 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v41 = *((void *)a1 + 3);
  if (v41 && v38)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
    uint64_t v55 = 0;
    uint64_t v9 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v58 = 1;
    uint64_t v5 = *(void *)a1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v55 = 0;
    int v58 = 1;
  }
LABEL_15:
  unint64_t v13 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 < v13 || v4 - v13 <= 3)
  {
    unint64_t v42 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v5);
        uint64_t v9 = *(void *)a1;
        unint64_t v42 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v42 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    __int16 v14 = (int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v14 + 1;
    if (v5)
    {
      int v57 = 0;
      int v15 = *v14;
      LODWORD(v54) = v15;
      HIDWORD(v54) = v15 & 0xFFFFFF00;
      goto LABEL_19;
    }
    unint64_t v42 = v4;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v44 = *((void *)a1 + 3);
  if (v44 && v42)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v9, v42);
    uint64_t v54 = 0;
    uint64_t v9 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v57 = 1;
    uint64_t v5 = *(void *)a1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v54 = 0;
    int v57 = 1;
  }
LABEL_19:
  unint64_t v16 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 < v16 || v4 - v16 <= 3)
  {
    unint64_t v45 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v46 = *((void *)a1 + 3);
    if (v46)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v5);
        uint64_t v9 = *(void *)a1;
        unint64_t v45 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v45 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v17 = (int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v17 + 1;
    if (v5)
    {
      int v18 = 0;
      int v19 = *v17;
      unsigned int v20 = v19 & 0xFFFFFF00;
      int v21 = v19;
      goto LABEL_23;
    }
    unint64_t v45 = v4;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v47 = *((void *)a1 + 3);
  if (v47 && v45)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v47 + 16))(v47, v9, v45);
    unsigned int v20 = 0;
    int v21 = 0;
    uint64_t v9 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v18 = 1;
    uint64_t v5 = *(void *)a1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v20 = 0;
    int v21 = 0;
    int v18 = 1;
  }
LABEL_23:
  unint64_t v22 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v22 || v4 - v22 <= 7)
  {
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v50 = *((void *)a1 + 3);
    if (v50)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v5);
        uint64_t v49 = *(void *)a1;
        unint64_t v48 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v48 = 0;
        uint64_t v49 = 0;
      }
    }
  }
  else
  {
    unsigned int v23 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v23 + 1;
    if (v5)
    {
      int v24 = 0;
      uint64_t v25 = *v23;
      goto LABEL_27;
    }
    unint64_t v48 = v4;
    uint64_t v49 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v51 = *((void *)a1 + 3);
  if (v51 && v48)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v51 + 16))(v51, v49, v48);
    uint64_t v25 = 0;
    uint64_t v9 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v24 = 1;
    uint64_t v5 = *(void *)a1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v25 = 0;
    int v24 = 1;
  }
LABEL_27:
  unint64_t v26 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 < v26 || v4 - v26 <= 3)
  {
    unint64_t v28 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (v52)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 16))(v52, v5);
        uint64_t v9 = *(void *)a1;
        unint64_t v28 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    unint64_t v27 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v27 + 1;
    unint64_t v28 = v4;
    if (v5)
    {
      int v29 = 0;
      unsigned int v30 = *v27 & 0xFFFFFF00;
      int v31 = *v27;
      goto LABEL_31;
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v53 = *((void *)a1 + 3);
  if (v53 && v28) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v53 + 16))(v53, v9, v28);
  }
  unsigned int v30 = 0;
  int v31 = 0;
  int v29 = 1;
LABEL_31:
  IPC::Decoder::decode<std::optional<double>>(a1, &v66);
  IPC::Decoder::decode<std::optional<double>>(a1, &v63);
  IPC::Decoder::decode<std::optional<double>>(a1, &v60);
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (!*(void *)a1)
  {
LABEL_45:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 96) = 0;
    return result;
  }
  if (v59
    || v58
    || v57
    || v18
    || v24
    || v29
    || !v68
    || (*(void *)&v71[4] = v66, v71[12] = v67, !v65)
    || (*(void *)((char *)&v70 + 7) = v63, HIBYTE(v70) = v64, !v62)
    || (*(void *)((char *)&v69 + 7) = v60, HIBYTE(v69) = v61, !v33))
  {
    __break(1u);
    goto LABEL_45;
  }
  *(void *)a2 = v56;
  *(void *)(a2 + 8) = v55;
  *(_DWORD *)(a2 + 16) = v54 | HIDWORD(v54);
  *(_DWORD *)(a2 + 20) = v21 | v20;
  *(void *)(a2 + 24) = v25;
  *(_DWORD *)(a2 + 32) = v31 | v30;
  *(void *)(a2 + 36) = *(void *)v71;
  *(void *)(a2 + 41) = *(void *)&v71[5];
  *(_OWORD *)(a2 + 49) = v70;
  *(_OWORD *)(a2 + 65) = v69;
  *(_DWORD *)(a2 + 88) = result;
  *(unsigned char *)(a2 + 92) = BYTE4(result);
  *(unsigned char *)(a2 + 96) = 1;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NavigationPreloadState,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v4 <= v6) {
    goto LABEL_14;
  }
  unsigned __int16 v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unsigned __int16 v7 = v4;
    uint64_t v14 = 0;
    goto LABEL_15;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2) {
    goto LABEL_17;
  }
  int v8 = 0;
  char v9 = 1;
  while (1)
  {
    char v10 = v7 ? v9 : 0;
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v19);
    if (!*(void *)a1) {
      break;
    }
    if (!v8 && v20)
    {
      unint64_t v13 = v19;
      *(unsigned char *)a2 = v10;
      *(void *)(a2 + 8) = v13;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
LABEL_14:
    unsigned __int16 v7 = 0;
    uint64_t v14 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a1;
        unsigned __int16 v7 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        unsigned __int16 v7 = 0;
        uint64_t v14 = 0;
      }
    }
LABEL_15:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v16 + 16))(v16, v14, v7);
        LODWORD(v7) = 0;
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      LODWORD(v7) = 0;
    }
LABEL_17:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      int v18 = (int)v7;
      if (v4) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
      }
      char v9 = 0;
      int v8 = 1;
      LODWORD(v7) = v18;
    }
    else
    {
      char v9 = 0;
      int v8 = 1;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v20)
  {
    uint64_t result = v19;
    int v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, (char *)a2);
  char v5 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 2));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 3));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
}

IPC::Decoder *IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_41;
  }
  unsigned __int16 v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v20 = v4;
    uint64_t v21 = 0;
    goto LABEL_42;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    int v9 = 0;
    __int16 v10 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v24 = v2[3];
    if (!v24)
    {
      uint64_t v5 = 0;
      __int16 v11 = 0;
      unint64_t v4 = 0;
      goto LABEL_46;
    }
    if (!v4)
    {
      uint64_t v5 = 0;
      __int16 v11 = 0;
LABEL_46:
      int v9 = 1;
LABEL_47:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v25 = v2[3];
      if (v25)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v5);
          uint64_t v26 = *v2;
          unint64_t v4 = v2[1];
        }
        else
        {
          uint64_t v26 = 0;
        }
      }
      else
      {
        uint64_t v26 = 0;
        unint64_t v4 = 0;
      }
LABEL_49:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v27 = v2[3];
      if (v27)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v26);
          uint64_t v5 = *v2;
          unint64_t v4 = v2[1];
        }
        else
        {
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v4 = 0;
      }
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v5);
    __int16 v10 = 0;
    uint64_t v5 = *v2;
    unint64_t v4 = v2[1];
    int v9 = 1;
LABEL_5:
    if (v8) {
      __int16 v11 = v10;
    }
    else {
      __int16 v11 = 0;
    }
    if (v4 <= v2[2] - v5) {
      goto LABEL_47;
    }
    uint64_t v12 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v12 + 1);
    if (!v5)
    {
      uint64_t v26 = 0;
      goto LABEL_49;
    }
    unsigned int v13 = *v12;
    if (v13 < 6)
    {
      unsigned int v14 = v13 | 0x100;
      goto LABEL_12;
    }
LABEL_51:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v28 = v2[3];
    if (v28 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v5);
    }
    unsigned int v14 = 0;
LABEL_12:
    unsigned __int16 v15 = IPC::Decoder::decode<WebCore::UserStyleLevel>(v2);
    int v16 = IPC::Decoder::decode<WebCore::UserStyleLevel>(v2);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v31);
    uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v29);
    if (!*v2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      goto LABEL_29;
    }
    if (!v9 && v14 > 0xFF && v15 > 0xFFu && (unsigned __int16)v16 > 0xFFu)
    {
      if (v32)
      {
        uint64_t v2 = (uint64_t *)v31;
        int v31 = 0;
        if (v30) {
          break;
        }
      }
    }
    __break(1u);
LABEL_41:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v22 = v2[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v21 = *v2;
        uint64_t v20 = v2[1];
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
LABEL_42:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v23 = v2[3];
    if (v23 && v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21, v20);
      unsigned int v8 = 0;
      uint64_t v5 = *v2;
      unint64_t v4 = v2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v8 = 0;
    }
  }
  uint64_t result = v29;
  int v29 = 0;
  *(_DWORD *)a2 = (unsigned __int16)(v11 | ((_WORD)v14 << 8)) | (v15 << 16) | (v16 << 24);
  if (v2) {
    *(_DWORD *)v2 += 2;
  }
  *(void *)(a2 + 8) = v2;
  if (result)
  {
    int v19 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(void *)(a2 + 16) = result;
    *(unsigned char *)(a2 + 24) = 1;
    if (v19)
    {
      *(_DWORD *)uint64_t result = v19;
      if (!v2) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v18);
      if (!v2) {
        goto LABEL_29;
      }
    }
LABEL_26:
    if (*(_DWORD *)v2 == 2) {
      uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy((WTF::StringImpl *)v2, v18);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  else
  {
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
    if (v2) {
      goto LABEL_26;
    }
  }
LABEL_29:
  if (v30)
  {
    uint64_t result = v29;
    int v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v32)
  {
    uint64_t result = v31;
    int v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (IPC::Decoder *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19885B760(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::LoginStatus,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 16));
  char v5 = *(unsigned char *)(a2 + 17);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::LoginStatus,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v28);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v26);
  LOWORD(v24[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v24);
  int v4 = BYTE1(v24[0]);
  if (!BYTE1(v24[0])) {
    goto LABEL_26;
  }
  while (1)
  {
    unint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *(void *)a1;
    unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
    if (v5 <= v7)
    {
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v21 = *((void *)a1 + 3);
      if (v21)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
          uint64_t v20 = *(void *)a1;
          unint64_t v19 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v19 = 0;
          uint64_t v20 = 0;
        }
      }
      goto LABEL_29;
    }
    unsigned int v8 = (unsigned __int8 *)(v6 + v7);
    *((void *)a1 + 2) = v8 + 1;
    if (!v6)
    {
      unint64_t v19 = v5;
      uint64_t v20 = 0;
LABEL_29:
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v22 = *((void *)a1 + 3);
      if (v22)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
          uint64_t v6 = *(void *)a1;
          unint64_t v5 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
        }
      }
      goto LABEL_30;
    }
    unsigned int v9 = *v8;
    if (v9 < 3)
    {
      unsigned int v10 = v9 | 0x100;
      goto LABEL_6;
    }
LABEL_30:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23 && v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v6);
    }
    unsigned int v10 = 0;
LABEL_6:
    IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
    char v12 = v11;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a1);
    if (!*(void *)a1) {
      break;
    }
    if (v29 && v27 && v4 && v10 > 0xFF && v12 && (_BYTE)v14)
    {
      uint64_t result = (WTF::StringImpl *)WebCore::LoginStatus::LoginStatus();
      long long v15 = v24[1];
      *(_OWORD *)a2 = v24[0];
      *(_OWORD *)(a2 + 16) = v15;
      *(void *)(a2 + 32) = v25;
      *(unsigned char *)(a2 + 40) = 1;
      goto LABEL_14;
    }
    __break(1u);
LABEL_26:
    uint64_t v16 = *(void *)a1;
    uint64_t v17 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18 && v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_14:
  if (v27)
  {
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v29)
  {
    uint64_t result = v28;
    uint64_t v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19885BAE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18)
{
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 12));
  char v5 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v23);
  uint64_t v4 = IPC::Decoder::decode<unsigned int>(a1);
  uint64_t v5 = IPC::Decoder::decode<unsigned int>(a1);
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8) {
    goto LABEL_19;
  }
  unsigned int v9 = (unsigned __int8 *)(v7 + v8);
  *((void *)a1 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v16 = v6;
    uint64_t v17 = 0;
    goto LABEL_20;
  }
  unsigned int v10 = *v9;
  if (v10 >= 3) {
    goto LABEL_21;
  }
  for (unsigned int i = v10 | 0x100; ; unsigned int i = 0)
  {
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v21);
    if (!*(void *)a1) {
      break;
    }
    if (v24)
    {
      unsigned int v14 = v23;
      uint64_t v23 = 0;
      if ((v4 & 0xFF00000000) != 0 && (v5 & 0xFF00000000) != 0 && i > 0xFF && v22)
      {
        long long v15 = v21;
        *(void *)a2 = v14;
        *(_DWORD *)(a2 + 8) = v4;
        *(_DWORD *)(a2 + 12) = v5;
        *(unsigned char *)(a2 + 16) = i;
        *(void *)(a2 + 24) = v15;
        *(unsigned char *)(a2 + 32) = 1;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_19:
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        uint64_t v17 = *(void *)a1;
        unint64_t v16 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
LABEL_20:
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v19 = *((void *)a1 + 3);
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        uint64_t v7 = *(void *)a1;
        unint64_t v6 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_21:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v7);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v22)
  {
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_12:
  if (v24)
  {
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19885BE14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::encode(void *a1, _DWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 1);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 2);

  return IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 3);
}

uint64_t IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);

  return IPC::Encoder::operator<<<BOOL>(a1, a2 + 3);
}

unint64_t IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v32 = a1[3];
    if (v32)
    {
      long long v89 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        a1 = v89;
        uint64_t v31 = *v89;
        unint64_t v30 = v89[1];
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_38;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    unint64_t v30 = v1;
    uint64_t v31 = 0;
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33)
    {
      char v88 = a1;
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31, v30);
        unsigned int v6 = 0;
        a1 = v88;
        uint64_t v2 = *v88;
        unint64_t v1 = v88[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_40;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    int v7 = 0;
    int v8 = 1;
    goto LABEL_5;
  }
LABEL_40:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v34 = a1[3];
  if (!v34)
  {
    int v8 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
    goto LABEL_42;
  }
  unsigned int v77 = v6;
  uint64_t v87 = a1;
  if (!v1)
  {
    int v8 = 0;
    unint64_t v34 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    unsigned int v10 = (unsigned __int8 *)a1[3];
    if (v10)
    {
      int v76 = v7;
      int v67 = v8;
      char v86 = a1;
      if (v34)
      {
        (*(void (**)(unsigned __int8 *, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v34);
        LODWORD(v10) = 0;
        a1 = v86;
        uint64_t v2 = *v86;
        unint64_t v1 = v86[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        LODWORD(v10) = 0;
      }
      int v8 = v67;
      int v7 = v76;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_44;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v34 + 16))(v34, v2);
  int v8 = 0;
  a1 = v87;
  uint64_t v2 = *v87;
  unint64_t v1 = v87[1];
  int v7 = 1;
  uint64_t v5 = v87[2];
  unsigned int v6 = v77;
LABEL_5:
  if (!v6) {
    int v8 = 0;
  }
  unint64_t v9 = v5 - v2;
  if (v1 <= v9)
  {
    int v68 = v7;
    int v59 = v8;
    unint64_t v34 = 0;
    uint64_t v36 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v78 = a1;
    if (v36 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
      a1 = v78;
      uint64_t v2 = *v78;
      unint64_t v34 = v78[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    int v8 = v59;
    int v7 = v68;
    goto LABEL_42;
  }
  unsigned int v10 = (unsigned __int8 *)(v2 + v9);
  uint64_t v11 = v2 + v9 + 1;
  a1[2] = v11;
  if (!v2)
  {
    unint64_t v34 = v1;
    goto LABEL_42;
  }
  LODWORD(v10) = *v10;
  if (v10 < 2)
  {
    int v12 = 0;
    int v13 = 1;
    goto LABEL_11;
  }
LABEL_44:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v35 = a1[3];
  if (!v35)
  {
    int v13 = 0;
    uint64_t v2 = 0;
    int v12 = 1;
    goto LABEL_46;
  }
  int v58 = (int)v10;
  int v75 = v7;
  int v66 = v8;
  long long v85 = a1;
  if (!v1)
  {
    int v13 = 0;
    unint64_t v35 = 0;
    uint64_t v2 = 0;
    int v12 = 1;
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    long long v15 = (unsigned __int8 *)a1[3];
    if (v15)
    {
      int v51 = v13;
      int v57 = v12;
      int v74 = v7;
      int v65 = v8;
      long long v84 = a1;
      if (v35)
      {
        (*(void (**)(unsigned __int8 *, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v2, v35);
        LODWORD(v15) = 0;
        a1 = v84;
        uint64_t v2 = *v84;
        unint64_t v1 = v84[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        LODWORD(v15) = 0;
      }
      int v12 = v57;
      int v8 = v65;
      int v7 = v74;
      int v13 = v51;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_48;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v35 + 16))(v35, v2);
  int v13 = 0;
  a1 = v85;
  uint64_t v2 = *v85;
  unint64_t v1 = v85[1];
  int v12 = 1;
  uint64_t v11 = v85[2];
  LODWORD(v10) = v58;
  int v8 = v66;
  int v7 = v75;
LABEL_11:
  if (!v10) {
    int v13 = 0;
  }
  unint64_t v14 = v11 - v2;
  if (v1 <= v14)
  {
    int v46 = v13;
    int v52 = v12;
    int v69 = v7;
    int v60 = v8;
    unint64_t v35 = 0;
    uint64_t v37 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    char v79 = a1;
    if (v37 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
      a1 = v79;
      uint64_t v2 = *v79;
      unint64_t v35 = v79[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    int v12 = v52;
    int v8 = v60;
    int v7 = v69;
    int v13 = v46;
    goto LABEL_46;
  }
  long long v15 = (unsigned __int8 *)(v2 + v14);
  uint64_t v16 = v2 + v14 + 1;
  a1[2] = v16;
  if (!v2)
  {
    unint64_t v35 = v1;
    goto LABEL_46;
  }
  LODWORD(v15) = *v15;
  if (v15 < 2)
  {
    int v17 = 0;
    int v18 = 1;
    goto LABEL_17;
  }
LABEL_48:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v23 = a1[3];
  if (!v23)
  {
    int v18 = 0;
    uint64_t v2 = 0;
    int v17 = 1;
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21) {
      goto LABEL_71;
    }
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    goto LABEL_52;
  }
  int v45 = (int)v15;
  int v50 = v13;
  int v56 = v12;
  int v73 = v7;
  int v64 = v8;
  uint64_t v83 = a1;
  if (!v1)
  {
    int v18 = 0;
    uint64_t v23 = 0;
    uint64_t v2 = 0;
    int v17 = 1;
    goto LABEL_50;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v2);
  int v18 = 0;
  a1 = v83;
  uint64_t v2 = *v83;
  unint64_t v1 = v83[1];
  int v17 = 1;
  uint64_t v16 = v83[2];
  int v12 = v56;
  int v8 = v64;
  int v7 = v73;
  LODWORD(v15) = v45;
  int v13 = v50;
LABEL_17:
  if (!v15) {
    int v18 = 0;
  }
  unint64_t v19 = v16 - v2;
  if (v1 <= v19)
  {
    int v39 = v18;
    int v42 = v17;
    int v47 = v13;
    int v53 = v12;
    int v70 = v7;
    int v61 = v8;
    uint64_t v23 = 0;
    uint64_t v38 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v80 = a1;
    if (v38 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
      a1 = v80;
      uint64_t v2 = *v80;
      uint64_t v23 = v80[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    int v12 = v53;
    int v8 = v61;
    int v7 = v70;
    int v17 = v42;
    int v13 = v47;
    int v18 = v39;
    goto LABEL_50;
  }
  uint64_t v20 = (unsigned __int8 *)(v2 + v19);
  uint64_t v21 = (uint64_t)(v20 + 1);
  a1[2] = v20 + 1;
  if (!v2)
  {
    uint64_t v23 = v1;
    goto LABEL_50;
  }
  unsigned int v22 = *v20;
  if (v22 > 1) {
    goto LABEL_52;
  }
  uint64_t v23 = v22 != 0;
  if (v7) {
    goto LABEL_70;
  }
  uint64_t v21 = 0;
  if (v12) {
    goto LABEL_70;
  }
LABEL_24:
  if (v17 || v21)
  {
LABEL_70:
    while (1)
    {
      __break(1u);
LABEL_71:
      int v41 = v18;
      int v44 = v17;
      int v49 = v13;
      int v55 = v12;
      int v72 = v7;
      int v63 = v8;
      char v82 = a1;
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v2, v23);
        a1 = v82;
        uint64_t v2 = *v82;
        unint64_t v1 = v82[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      int v12 = v55;
      int v8 = v63;
      int v7 = v72;
      int v17 = v44;
      int v13 = v49;
      int v18 = v41;
LABEL_52:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v28 = a1[3];
      if (!v28) {
        break;
      }
      int v40 = v18;
      int v43 = v17;
      int v48 = v13;
      int v54 = v12;
      unsigned int v71 = v7;
      int v62 = v8;
      uint64_t v81 = a1;
      if (!v1)
      {
        uint64_t v28 = 0;
        break;
      }
      a1 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v2);
      uint64_t v28 = *v81;
      if (!*v81) {
        break;
      }
      int v12 = v54;
      int v8 = v62;
      int v17 = v43;
      int v13 = v48;
      int v18 = v40;
      uint64_t v23 = v71;
      if (!v71)
      {
        uint64_t v21 = 1;
        if (!v54) {
          goto LABEL_24;
        }
      }
    }
    unsigned int v27 = 0;
  }
  else
  {
    if (v23) {
      int v24 = 0x1000000;
    }
    else {
      int v24 = 0;
    }
    if (v18) {
      int v25 = 0x10000;
    }
    else {
      int v25 = 0;
    }
    if (v13) {
      int v26 = 256;
    }
    else {
      int v26 = 0;
    }
    unsigned int v27 = v25 | v8 | v26 | v24;
    uint64_t v28 = 1;
  }
  return v27 | (unint64_t)(v28 << 32);
}

WTF *IPC::ArgumentCoder<WebCore::Path,void>::encode(IPC::Encoder *a1, WebCore::Path *this)
{
  WebCore::Path::segments((uint64_t *)&v5, this);
  IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

void sub_19885C6B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::Path,void>::encode(uint64_t *a1, WebCore::Path *this)
{
  uint64_t result = WebCore::Path::segments((uint64_t *)&v18, this);
  uint64_t v5 = v20;
  uint64_t v6 = a1[2];
  unint64_t v7 = *a1 + v6;
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v9 = v8 >= v7;
  unint64_t v10 = v8 - v7;
  if (v9)
  {
    unint64_t v11 = v10 + v6;
    unint64_t v12 = v11 + 8;
    if (v11 > 0xFFFFFFFFFFFFFFF7 || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v11) = v20;
      a1[2] = v12;
      uint64_t v5 = v20;
    }
  }
  unint64_t v14 = v18;
  if (v5)
  {
    uint64_t v15 = 56 * v5;
    do
    {
      uint64_t v16 = *((unsigned __int8 *)v14 + 52);
      unint64_t v17 = a1[2];
      if (v17 >= a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(unsigned char *)(*a1 + v17) = v16;
        a1[2] = v17 + 1;
      }
      uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, v14, v16);
      unint64_t v14 = (WTF *)((char *)v14 + 56);
      v15 -= 56;
    }
    while (v15);
    unint64_t v14 = v18;
  }
  if (v14)
  {
    int v18 = 0;
    int v19 = 0;
    return (uint64_t *)WTF::fastFree(v14, v4);
  }
  return result;
}

void sub_19885C7C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebCore::Path,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, (uint64_t)&v9);
  if (!v11)
  {
    uint64_t v6 = (void *)*a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result && v7 != 0) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(void *)result + 16))(result, v6);
    }
  }
  if (*a1)
  {
    if (!v11) {
      __break(1u);
    }
    WebCore::Path::Path();
    uint64_t result = (WTF *)std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v13);
    a3[72] = 1;
    if (v14 != -1) {
      uint64_t result = (WTF *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(&v12, v13);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v11)
  {
    uint64_t result = v9;
    if (v9)
    {
      BOOL v9 = 0;
      int v10 = 0;
      return (WTF *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_19885C914(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, int a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a12)
  {
    if (a9) {
      WTF::fastFree(a9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ViewportArguments,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 20));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 24));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 28));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 32));
  char v6 = *(unsigned char *)(a2 + 36);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 37));
}

uint64_t IPC::ArgumentCoder<WebCore::ViewportArguments,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_23;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v25 = v4;
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  unsigned int v8 = *v7;
  if (v8 >= 4) {
    goto LABEL_25;
  }
  for (unsigned int i = v8 | 0x100; ; unsigned int i = 0)
  {
    uint64_t v34 = IPC::Decoder::decode<float>(a1);
    uint64_t v9 = IPC::Decoder::decode<float>(a1);
    uint64_t v10 = IPC::Decoder::decode<float>(a1);
    uint64_t v11 = IPC::Decoder::decode<float>(a1);
    uint64_t v12 = IPC::Decoder::decode<float>(a1);
    uint64_t v13 = IPC::Decoder::decode<float>(a1);
    uint64_t v14 = IPC::Decoder::decode<float>(a1);
    uint64_t v15 = IPC::Decoder::decode<float>(a1);
    uint64_t result = IPC::Decoder::decode<WebCore::WritingDirection>(a1);
    unsigned __int16 v17 = result;
    unint64_t v4 = a1[1];
    uint64_t v18 = *a1;
    unint64_t v19 = a1[2] - *a1;
    if (v4 <= v19) {
      break;
    }
    unsigned int v20 = (unsigned __int8 *)(v18 + v19);
    a1[2] = (uint64_t)(v20 + 1);
    if (!v18)
    {
      uint64_t v30 = v4;
      uint64_t v31 = 0;
      goto LABEL_28;
    }
    unsigned int v21 = *v20;
    if (v21 > 1) {
      goto LABEL_29;
    }
    int v22 = 0;
    BOOL v23 = v21 != 0;
LABEL_9:
    if (i > 0xFF
      && (v34 & 0xFF00000000) != 0
      && (v9 & 0xFF00000000) != 0
      && (v10 & 0xFF00000000) != 0
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && (v15 & 0xFF00000000) != 0
      && v17 > 0xFFu
      && !v22)
    {
      *(unsigned char *)a2 = i;
      *(_DWORD *)(a2 + 4) = v34;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v10;
      *(_DWORD *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 20) = v12;
      *(_DWORD *)(a2 + 24) = v13;
      *(_DWORD *)(a2 + 28) = v14;
      *(_DWORD *)(a2 + 32) = v15;
      *(unsigned char *)(a2 + 36) = v17;
      char v24 = 1;
      *(unsigned char *)(a2 + 37) = v23;
      goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *a1;
        uint64_t v25 = a1[1];
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
LABEL_24:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v28 = a1[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        uint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_25:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v5);
    }
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v32 = a1[3];
  if (v32)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      uint64_t v31 = *a1;
      uint64_t v30 = a1[1];
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
  }
LABEL_28:
  unint64_t v4 = 0;
  uint64_t v18 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v33 = a1[3];
  if (v33)
  {
    if (v30)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31, v30);
      uint64_t v18 = *a1;
      unint64_t v4 = a1[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v18 = 0;
    }
  }
LABEL_29:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v4)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v18);
      if (*a1)
      {
        BOOL v23 = 0;
        int v22 = 1;
        goto LABEL_9;
      }
    }
  }
  char v24 = 0;
  *(unsigned char *)a2 = 0;
LABEL_21:
  *(unsigned char *)(a2 + 40) = v24;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 32));
  uint64_t v5 = *(void *)(a2 + 48);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  return IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 64));
}

unint64_t IPC::ArgumentCoder<WebCore::ElementContext,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v10);
  unint64_t v4 = IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>((IPC::Decoder *)a1);
  char v6 = v5;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((IPC::Decoder *)a1, (uint64_t)&v13);
  unint64_t result = IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>((uint64_t *)a1);
  if (!*a1) {
    goto LABEL_9;
  }
  if (!v11 || !v6 || !v15 || (*(_OWORD *)&v12[8] = v13, *(void *)&v12[24] = v14, !v8))
  {
    __break(1u);
LABEL_9:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    return result;
  }
  *(_OWORD *)a2 = v10;
  *(void *)(a2 + 16) = v4;
  long long v9 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
  *(_OWORD *)(a2 + 40) = v9;
  *(void *)(a2 + 64) = result;
  *(unsigned char *)(a2 + 80) = 1;
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 80));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 96));
}

uint64_t IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)v27);
  uint64_t result = IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v19);
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7) {
    goto LABEL_11;
  }
  unint64_t v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (unint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v15 = v5;
    unint64_t v16 = 0;
    goto LABEL_12;
  }
  unsigned int v9 = *v8;
  if (v9 > 1) {
    goto LABEL_13;
  }
  int v10 = 0;
  for (BOOL i = v9 != 0; ; BOOL i = 0)
  {
    if (v29)
    {
      long long v23 = v27[2];
      long long v24 = v27[3];
      *(void *)&long long v25 = v28;
      long long v21 = v27[0];
      long long v22 = v27[1];
      if (v20)
      {
        long long v26 = v19;
        if (!v10)
        {
          long long v12 = v24;
          *(_OWORD *)(a2 + 32) = v23;
          *(_OWORD *)(a2 + 48) = v12;
          long long v13 = v26;
          *(_OWORD *)(a2 + 64) = v25;
          *(_OWORD *)(a2 + 80) = v13;
          long long v14 = v22;
          *(_OWORD *)a2 = v21;
          *(_OWORD *)(a2 + 16) = v14;
          *(unsigned char *)(a2 + 96) = i;
          *(unsigned char *)(a2 + 112) = 1;
          return result;
        }
      }
    }
    __break(1u);
LABEL_11:
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v17 = a1[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v17 + 16))(v17);
        unint64_t v16 = *a1;
        unint64_t v15 = a1[1];
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v16 = 0;
      }
    }
LABEL_12:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v18 = a1[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        unint64_t v6 = *a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (!result) {
      break;
    }
    if (!v5) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
    if (!*a1) {
      break;
    }
    int v10 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 112) = 0;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(IPC::Encoder *a1, WebCore::ResourceRequest *this)
{
  WebCore::ResourceRequest::getRequestDataToSerialize((uint64_t *)&v50, this);
  v65[0] = v64;
  IPC::Encoder::operator<<<BOOL>(a1, v65);
  if (!v65[0])
  {
    if (!v64)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)&v50);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v58);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)&v58[5]);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v59);
      IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, (uint64_t)&v60);
      IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, (uint64_t)&v61);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v62);
      char v4 = v62[16];
      unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D5F0);
      }
      *unint64_t v5 = v4;
      char v66 = v62[17];
      IPC::Encoder::operator<<<BOOL>(a1, &v66);
      char v66 = v62[18];
      IPC::Encoder::operator<<<BOOL>(a1, &v66);
      char v66 = v62[19];
      IPC::Encoder::operator<<<BOOL>(a1, &v66);
      unsigned __int8 v7 = v63;
      unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D610);
      }
      *unint64_t v8 = (v7 & 2) != 0;
      unsigned __int8 v10 = v63;
      char v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D630);
      }
      *char v11 = v10 & 1;
      unsigned __int8 v13 = v63;
      long long v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D650);
      }
      *long long v14 = (v13 & 4) != 0;
      unsigned __int8 v16 = v63;
      unint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v18)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D670);
      }
      *unint64_t v17 = (v16 & 8) != 0;
      unsigned __int8 v19 = v63;
      char v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D690);
      }
      *char v20 = (v19 & 0x10) != 0;
      unsigned __int8 v22 = v63;
      long long v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D6B0);
      }
      *long long v23 = (v22 & 0x20) != 0;
      unsigned __int8 v25 = v63;
      long long v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v27)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D6D0);
      }
      *long long v26 = (v25 & 0x40) != 0;
      unsigned int v28 = v63;
      char v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v30)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D6F0);
      }
      unsigned int v31 = v28 >> 7;
LABEL_13:
      *char v29 = v31;
      goto LABEL_14;
    }
    goto LABEL_40;
  }
  if (v65[0] == 1)
  {
    if (v64 == 1)
    {
      IPC::encodeObjectDirectly<NSURLRequest>(a1, v50);
      IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v51);
      if (v52)
      {
        unint64_t v35 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
        if (!v36)
        {
LABEL_44:
          __break(0xC471u);
          JUMPOUT(0x19885D734);
        }
        *unint64_t v35 = 1;
        if (!v52)
        {
          std::__throw_bad_optional_access[abi:sn180100]();
          goto LABEL_43;
        }
        char v66 = v51[2];
        IPC::Encoder::operator<<<BOOL>(a1, &v66);
      }
      else
      {
        char v66 = 0;
        IPC::Encoder::operator<<<BOOL>(a1, &v66);
      }
      char v37 = v53;
      uint64_t v38 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v39)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D754);
      }
      *uint64_t v38 = v37;
      char v40 = v54;
      int v41 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D774);
      }
      *int v41 = v40;
      char v43 = v55;
      int v44 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v45)
      {
        __break(0xC471u);
        JUMPOUT(0x19885D794);
      }
      unsigned char *v44 = v43;
      char v46 = v56;
      int v47 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v48 || (*v47 = v46, LOBYTE(v31) = v57, char v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1), !v49))
      {
        __break(0xC471u);
        JUMPOUT(0x19885D5B0);
      }
      goto LABEL_13;
    }
LABEL_40:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_14:
  if (v64 != -1) {
    ((void (*)(char *, NSURLRequest **))off_1EE9B4638[v64])(&v66, &v50);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)this + 20);
  char v32 = *((unsigned char *)this + 184);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x19885D5D0);
  }
  *uint64_t result = (v32 & 0x10) != 0;
  return result;
}

void sub_19885D7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  if (a29 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B4638[a29])(v29 - 34, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ResourceRequest,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = a1;
  uint64_t v457 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8)
  {
    unint64_t v168 = 0;
    uint64_t v169 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v170 = *((void *)a1 + 3);
    if (v170)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v170 + 16))(v170, v7, v6);
        uint64_t v169 = *(void *)v4;
        unint64_t v168 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v168 = 0;
        uint64_t v169 = 0;
      }
    }
    goto LABEL_234;
  }
  uint64_t v9 = (unsigned char *)(v7 + v8);
  *((void *)a1 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v168 = v6;
    uint64_t v169 = 0;
LABEL_234:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v171 = *((void *)v4 + 3);
    if (v171 && v168) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v171 + 16))(v171, v169);
    }
    goto LABEL_235;
  }
  if (*v9 >= 2u)
  {
LABEL_235:
    LOBYTE(v418) = 0;
    unsigned __int8 v427 = 0;
LABEL_236:
    IPC::Decoder::markInvalid(v4);
    goto LABEL_143;
  }
  int v397 = a1;
  uint64_t v398 = a2;
  if (*v9)
  {
    char v123 = (_DWORD *)objc_opt_class();
    char v453 = v123;
    if (v123) {
      CFRetain(v123);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v428, (CFTypeRef *)&v453, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)v4 + 7, (void **)&v428);
    IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLRequest>(v4, (uint64_t)&cf);
    LODWORD(v3) = v402;
    if ((_BYTE)v402)
    {
      CFTypeRef v2 = cf;
      if (cf)
      {
        CFRetain(cf);
        CFRelease(v2);
      }
    }
    else
    {
      CFTypeRef v2 = 0;
    }
    if (v428) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v428, v124);
    }
    CFTypeRef v31 = v453;
    char v453 = 0;
    if (!v31) {
      goto LABEL_175;
    }
    goto LABEL_232;
  }
  IPC::Decoder::decode<WTF::URL>(a1, &v453);
  IPC::Decoder::decode<WTF::URL>(v4, &v449);
  unint64_t v10 = *((void *)v4 + 1);
  uint64_t v11 = *(void *)v4;
  unint64_t v12 = ((*((void *)v4 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v4;
  if (v10 >= v12 && v10 - v12 > 7)
  {
    long long v14 = (uint64_t *)(v11 + v12);
    *((void *)v4 + 2) = v14 + 1;
    if (v11)
    {
      int v395 = 0;
      uint64_t v15 = *v14;
      goto LABEL_12;
    }
    unint64_t v177 = v10;
    uint64_t v178 = 0;
  }
  else
  {
    unint64_t v177 = 0;
    uint64_t v178 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v179 = *((void *)v4 + 3);
    if (v179)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v179 + 16))(v179, v11, v10);
        uint64_t v178 = *(void *)v4;
        unint64_t v177 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v177 = 0;
        uint64_t v178 = 0;
      }
    }
  }
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v15 = 0;
  uint64_t v180 = *((void *)v4 + 3);
  if (v180 && v177) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v180 + 16))(v180, v178);
  }
  int v395 = 1;
LABEL_12:
  IPC::Decoder::decode<WTF::String>(v4, (uint64_t)&v447);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)v445, (uint64_t *)v4);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, v16, (uint64_t)v443);
  unint64_t v17 = *((void *)v4 + 1);
  uint64_t v18 = *(void *)v4;
  unint64_t v19 = *((void *)v4 + 2) - *(void *)v4;
  if (v17 <= v19)
  {
    unint64_t v181 = 0;
    uint64_t v182 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v183 = *((void *)v4 + 3);
    if (v183)
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v183 + 16))(v183);
        uint64_t v182 = *(void *)v4;
        unint64_t v181 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v181 = 0;
        uint64_t v182 = 0;
      }
    }
    goto LABEL_245;
  }
  char v20 = (unsigned __int8 *)(v18 + v19);
  uint64_t v21 = v18 + v19 + 1;
  *((void *)v4 + 2) = v21;
  if (!v18)
  {
    unint64_t v181 = v17;
    uint64_t v182 = 0;
LABEL_245:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v184 = *((void *)v4 + 3);
    if (v184 && v181) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v184 + 16))(v184, v182, v181);
    }
    goto LABEL_246;
  }
  unsigned int v22 = *v20;
  if (v22 < 6)
  {
    int v392 = 0;
    goto LABEL_16;
  }
LABEL_246:
  IPC::Decoder::markInvalid(v4);
  LOBYTE(v22) = 0;
  unint64_t v17 = *((void *)v4 + 1);
  uint64_t v21 = *((void *)v4 + 2);
  int v392 = 1;
  uint64_t v18 = *(void *)v4;
LABEL_16:
  char v385 = v22;
  unint64_t v23 = v21 - v18;
  if (v17 <= v23)
  {
    unint64_t v185 = 0;
    uint64_t v186 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v187 = *((void *)v4 + 3);
    if (v187)
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v187 + 16))(v187);
        uint64_t v186 = *(void *)v4;
        unint64_t v185 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v185 = 0;
        uint64_t v186 = 0;
      }
    }
    goto LABEL_248;
  }
  uint64_t v24 = (unsigned __int8 *)(v18 + v23);
  uint64_t v25 = v18 + v23 + 1;
  *((void *)v4 + 2) = v25;
  if (!v18)
  {
    unint64_t v185 = v17;
    uint64_t v186 = 0;
LABEL_248:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v188 = *((void *)v4 + 3);
    if (v188 && v185) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v188 + 16))(v188, v186, v185);
    }
    goto LABEL_249;
  }
  unsigned int v26 = *v24;
  if (v26 < 3)
  {
    int v389 = 0;
    goto LABEL_20;
  }
LABEL_249:
  IPC::Decoder::markInvalid(v4);
  LOBYTE(v26) = 0;
  unint64_t v17 = *((void *)v4 + 1);
  uint64_t v25 = *((void *)v4 + 2);
  int v389 = 1;
  uint64_t v18 = *(void *)v4;
LABEL_20:
  char v384 = v26;
  unint64_t v27 = v25 - v18;
  if (v17 <= v27)
  {
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v189 = *((void *)v4 + 3);
    if (v189)
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v189 + 16))(v189);
        uint64_t v30 = *(void *)v4;
        unint64_t v29 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v29 = 0;
        uint64_t v30 = 0;
      }
    }
    goto LABEL_251;
  }
  unsigned int v28 = (unsigned __int8 *)(v18 + v27);
  *((void *)v4 + 2) = v18 + v27 + 1;
  unint64_t v29 = v17;
  uint64_t v30 = v18;
  if (!v18)
  {
LABEL_251:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v190 = *((void *)v4 + 3);
    if (v190 && v29) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v190 + 16))(v190, v30, v29);
    }
    goto LABEL_252;
  }
  unsigned int v383 = *v28;
  if (v383 < 5)
  {
    int v387 = 0;
    goto LABEL_24;
  }
LABEL_252:
  IPC::Decoder::markInvalid(v4);
  LOBYTE(v383) = 0;
  int v387 = 1;
LABEL_24:
  CFTypeRef v31 = (CFTypeRef)IPC::ArgumentCoder<WebCore::ResourceRequestRequester,void>::decode<IPC::Decoder>(v4);
  CFTypeRef v2 = v31;
  if ((unsigned __int16)v31 <= 0xFFu) {
    CFTypeRef v31 = (CFTypeRef)IPC::Decoder::markInvalid(v4);
  }
  unint64_t v32 = *((void *)v4 + 1);
  uint64_t v33 = *(char **)v4;
  unint64_t v34 = *((void *)v4 + 2) - *(void *)v4;
  if (v32 <= v34)
  {
    unint64_t v191 = 0;
    uint64_t v192 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v193 = *((void *)v4 + 3);
    if (v193)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v193 + 16))(v193);
        uint64_t v192 = *(void *)v4;
        unint64_t v191 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v191 = 0;
        uint64_t v192 = 0;
      }
    }
    goto LABEL_254;
  }
  unint64_t v35 = &v33[v34];
  uint64_t v36 = (uint64_t)&v33[v34 + 1];
  *((void *)v4 + 2) = v36;
  if (!v33)
  {
    unint64_t v191 = v32;
    uint64_t v192 = 0;
LABEL_254:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v194 = *((void *)v4 + 3);
    if (v194 && v191)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v194 + 16))(v194, v192, v191);
      unsigned int v37 = 0;
      uint64_t v33 = *(char **)v4;
      unint64_t v32 = *((void *)v4 + 1);
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v37 = 0;
    }
    goto LABEL_256;
  }
  unsigned int v37 = *v35;
  if (v37 < 2)
  {
    int v38 = 0;
    int v39 = 1;
    goto LABEL_30;
  }
LABEL_256:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v195 = *((void *)v4 + 3);
  if (!v195 || !v32)
  {
    int v40 = 0;
    unint64_t v196 = 0;
    uint64_t v33 = 0;
    int v38 = 1;
    goto LABEL_258;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v195 + 16))(v195, v33);
  int v39 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v38 = 1;
  uint64_t v36 = *((void *)v4 + 2);
LABEL_30:
  if (v37) {
    int v40 = v39;
  }
  else {
    int v40 = 0;
  }
  unint64_t v41 = v36 - (void)v33;
  if (v32 <= v41)
  {
    int v324 = v38;
    int v325 = v40;
    unint64_t v196 = 0;
    uint64_t v326 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (v32 && v326)
    {
      (*(void (**)(uint64_t))(*(void *)v326 + 16))(v326);
      uint64_t v33 = *(char **)v4;
      unint64_t v196 = *((void *)v4 + 1);
      int v40 = v325;
      int v38 = v324;
    }
    else
    {
      uint64_t v33 = 0;
    }
    goto LABEL_258;
  }
  uint64_t v42 = &v33[v41];
  uint64_t v43 = (uint64_t)&v33[v41 + 1];
  *((void *)v4 + 2) = v43;
  if (!v33)
  {
    unint64_t v196 = v32;
LABEL_258:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v197 = *((void *)v4 + 3);
    if (v197)
    {
      int v249 = v38;
      CFTypeRef v250 = v2;
      int v251 = v40;
      if (v196)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v197 + 16))(v197, v33, v196);
        unsigned int v44 = 0;
        uint64_t v33 = *(char **)v4;
        unint64_t v32 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v44 = 0;
      }
      int v40 = v251;
      CFTypeRef v2 = v250;
      int v38 = v249;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v44 = 0;
    }
    goto LABEL_260;
  }
  unsigned int v44 = *v42;
  if (v44 < 2)
  {
    int v45 = 0;
    unsigned int v46 = 1;
    goto LABEL_37;
  }
LABEL_260:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v198 = *((void *)v4 + 3);
  if (!v198)
  {
    unint64_t v47 = 0;
    unint64_t v199 = 0;
    uint64_t v33 = 0;
    int v45 = 1;
    goto LABEL_262;
  }
  int v242 = v38;
  CFTypeRef v243 = v2;
  int v244 = v40;
  if (!v32)
  {
    unint64_t v47 = 0;
    unint64_t v199 = 0;
    uint64_t v33 = 0;
    int v45 = 1;
    CFTypeRef v2 = v243;
LABEL_262:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v200 = *((void *)v4 + 3);
    if (v200)
    {
      int v257 = v45;
      CFTypeRef v3 = (CFTypeRef)v47;
      int v258 = v38;
      CFTypeRef v259 = v2;
      int v260 = v40;
      if (v199)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v200 + 16))(v200, v33, v199);
        unsigned int v51 = 0;
        uint64_t v33 = *(char **)v4;
        unint64_t v32 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v51 = 0;
      }
      int v40 = v260;
      CFTypeRef v2 = v259;
      int v38 = v258;
      unint64_t v47 = (unint64_t)v3;
      int v45 = v257;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v51 = 0;
    }
    goto LABEL_264;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v198 + 16))(v198, v33);
  unsigned int v46 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v45 = 1;
  uint64_t v43 = *((void *)v4 + 2);
  int v40 = v244;
  CFTypeRef v2 = v243;
  int v38 = v242;
LABEL_37:
  if (v44) {
    unint64_t v47 = v46;
  }
  else {
    unint64_t v47 = 0;
  }
  unint64_t v48 = v43 - (void)v33;
  if (v32 <= v48)
  {
    LODWORD(v3) = v45;
    unint64_t v320 = v47;
    int v321 = v38;
    int v322 = v40;
    unint64_t v199 = 0;
    uint64_t v323 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (v32 && v323)
    {
      (*(void (**)(uint64_t))(*(void *)v323 + 16))(v323);
      uint64_t v33 = *(char **)v4;
      unint64_t v199 = *((void *)v4 + 1);
      int v40 = v322;
      int v38 = v321;
      unint64_t v47 = v320;
      int v45 = (int)v3;
    }
    else
    {
      uint64_t v33 = 0;
    }
    goto LABEL_262;
  }
  uint64_t v49 = &v33[v48];
  uint64_t v50 = (uint64_t)&v33[v48 + 1];
  *((void *)v4 + 2) = v50;
  if (!v33)
  {
    unint64_t v199 = v32;
    goto LABEL_262;
  }
  unsigned int v51 = *v49;
  if (v51 < 2)
  {
    int v52 = 0;
    int v53 = 1;
    goto LABEL_44;
  }
LABEL_264:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v201 = *((void *)v4 + 3);
  if (!v201)
  {
    int v54 = 0;
    unint64_t v202 = 0;
    uint64_t v33 = 0;
    int v52 = 1;
    goto LABEL_266;
  }
  int v245 = v45;
  CFTypeRef v3 = (CFTypeRef)v47;
  int v246 = v38;
  CFTypeRef v247 = v2;
  int v248 = v40;
  if (!v32)
  {
    int v54 = 0;
    unint64_t v202 = 0;
    uint64_t v33 = 0;
    int v52 = 1;
    CFTypeRef v2 = v247;
LABEL_266:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v203 = *((void *)v4 + 3);
    if (v203)
    {
      int v265 = v52;
      int v266 = v54;
      int v267 = v45;
      CFTypeRef v3 = (CFTypeRef)v47;
      int v268 = v38;
      CFTypeRef v269 = v2;
      int v270 = v40;
      if (v202)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v203 + 16))(v203, v33, v202);
        unsigned int v58 = 0;
        uint64_t v33 = *(char **)v4;
        unint64_t v32 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v58 = 0;
      }
      int v40 = v270;
      CFTypeRef v2 = v269;
      int v38 = v268;
      unint64_t v47 = (unint64_t)v3;
      int v45 = v267;
      int v54 = v266;
      int v52 = v265;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v58 = 0;
    }
    goto LABEL_268;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v201 + 16))(v201, v33);
  int v53 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v52 = 1;
  uint64_t v50 = *((void *)v4 + 2);
  int v40 = v248;
  CFTypeRef v2 = v247;
  int v38 = v246;
  unint64_t v47 = (unint64_t)v3;
  int v45 = v245;
LABEL_44:
  if (v51) {
    int v54 = v53;
  }
  else {
    int v54 = 0;
  }
  unint64_t v55 = v50 - (void)v33;
  if (v32 <= v55)
  {
    int v314 = v52;
    int v315 = v54;
    LODWORD(v3) = v45;
    unint64_t v316 = v47;
    int v317 = v38;
    int v318 = v40;
    unint64_t v202 = 0;
    uint64_t v319 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (v32 && v319)
    {
      (*(void (**)(uint64_t))(*(void *)v319 + 16))(v319);
      uint64_t v33 = *(char **)v4;
      unint64_t v202 = *((void *)v4 + 1);
      int v40 = v318;
      int v38 = v317;
      unint64_t v47 = v316;
      int v45 = (int)v3;
      int v54 = v315;
      int v52 = v314;
    }
    else
    {
      uint64_t v33 = 0;
    }
    goto LABEL_266;
  }
  char v56 = &v33[v55];
  uint64_t v57 = (uint64_t)&v33[v55 + 1];
  *((void *)v4 + 2) = v57;
  if (!v33)
  {
    unint64_t v202 = v32;
    goto LABEL_266;
  }
  unsigned int v58 = *v56;
  if (v58 < 2)
  {
    int v59 = 0;
    int v60 = 1;
    goto LABEL_51;
  }
LABEL_268:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v204 = *((void *)v4 + 3);
  if (!v204)
  {
    int v61 = 0;
    unint64_t v205 = 0;
    uint64_t v33 = 0;
    int v59 = 1;
    goto LABEL_270;
  }
  int v361 = v52;
  int v252 = v54;
  int v253 = v45;
  unint64_t v254 = v47;
  LODWORD(v3) = v38;
  CFTypeRef v255 = v2;
  int v256 = v40;
  if (!v32)
  {
    int v61 = 0;
    unint64_t v205 = 0;
    uint64_t v33 = 0;
    int v59 = 1;
    CFTypeRef v2 = v255;
LABEL_270:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v206 = *((void *)v4 + 3);
    if (v206)
    {
      int v364 = v52;
      int v374 = v61;
      int v275 = v54;
      int v276 = v45;
      unint64_t v277 = v47;
      LODWORD(v3) = v38;
      CFTypeRef v278 = v2;
      int v279 = v40;
      if (v205)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v206 + 16))(v206, v33, v205);
        unsigned int v65 = 0;
        uint64_t v33 = *(char **)v4;
        unint64_t v32 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v65 = 0;
      }
      int v40 = v279;
      CFTypeRef v2 = v278;
      int v38 = (int)v3;
      unint64_t v47 = v277;
      int v45 = v276;
      int v54 = v275;
      int v52 = v364;
      int v61 = v374;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v65 = 0;
    }
    goto LABEL_272;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v204 + 16))(v204, v33);
  int v60 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v59 = 1;
  uint64_t v57 = *((void *)v4 + 2);
  int v40 = v256;
  CFTypeRef v2 = v255;
  int v38 = (int)v3;
  unint64_t v47 = v254;
  int v45 = v253;
  int v54 = v252;
  int v52 = v361;
LABEL_51:
  if (v58) {
    int v61 = v60;
  }
  else {
    int v61 = 0;
  }
  unint64_t v62 = v57 - (void)v33;
  if (v32 <= v62)
  {
    int v382 = v61;
    int v308 = v52;
    int v309 = v54;
    int v310 = v45;
    CFTypeRef v3 = (CFTypeRef)v47;
    int v311 = v38;
    int v312 = v40;
    unint64_t v205 = 0;
    uint64_t v313 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (v32 && v313)
    {
      (*(void (**)(uint64_t))(*(void *)v313 + 16))(v313);
      uint64_t v33 = *(char **)v4;
      unint64_t v205 = *((void *)v4 + 1);
    }
    else
    {
      uint64_t v33 = 0;
    }
    int v40 = v312;
    int v38 = v311;
    unint64_t v47 = (unint64_t)v3;
    int v45 = v310;
    int v54 = v309;
    int v52 = v308;
    int v61 = v382;
    goto LABEL_270;
  }
  unsigned __int8 v63 = &v33[v62];
  uint64_t v64 = (uint64_t)&v33[v62 + 1];
  *((void *)v4 + 2) = v64;
  if (!v33)
  {
    unint64_t v205 = v32;
    goto LABEL_270;
  }
  unsigned int v65 = *v63;
  if (v65 < 2)
  {
    int v66 = 0;
    int v67 = 1;
    goto LABEL_58;
  }
LABEL_272:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v207 = *((void *)v4 + 3);
  if (!v207)
  {
    int v68 = 0;
    unint64_t v208 = 0;
    uint64_t v33 = 0;
    int v66 = 1;
    goto LABEL_274;
  }
  int v362 = v52;
  int v372 = v61;
  int v343 = v54;
  int v261 = v45;
  unint64_t v262 = v47;
  int v263 = v38;
  CFTypeRef v3 = v2;
  int v264 = v40;
  if (!v32)
  {
    int v68 = 0;
    unint64_t v208 = 0;
    uint64_t v33 = 0;
    int v66 = 1;
    CFTypeRef v2 = v3;
    goto LABEL_397;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v207 + 16))(v207, v33);
  int v67 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v66 = 1;
  uint64_t v64 = *((void *)v4 + 2);
  int v40 = v264;
  CFTypeRef v2 = v3;
  int v38 = v263;
  unint64_t v47 = v262;
  int v45 = v261;
  int v54 = v343;
  int v52 = v362;
  int v61 = v372;
LABEL_58:
  if (v65) {
    int v68 = v67;
  }
  else {
    int v68 = 0;
  }
  unint64_t v69 = v64 - (void)v33;
  if (v32 <= v69)
  {
    int v360 = v68;
    int v362 = v52;
    int v372 = v61;
    int v351 = v54;
    int v304 = v45;
    unint64_t v305 = v47;
    LODWORD(v3) = v38;
    int v306 = v40;
    unint64_t v208 = 0;
    uint64_t v307 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (!v32 || !v307)
    {
      uint64_t v33 = 0;
LABEL_274:
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v209 = *((void *)v4 + 3);
      if (v209)
      {
        int v354 = v68;
        int v366 = v52;
        int v376 = v61;
        int v346 = v54;
        int v283 = v45;
        unint64_t v284 = v47;
        int v285 = v38;
        CFTypeRef v3 = v2;
        int v286 = v40;
        if (v208)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v209 + 16))(v209, v33, v208);
          unsigned int v72 = 0;
          uint64_t v33 = *(char **)v4;
          unint64_t v32 = *((void *)v4 + 1);
        }
        else
        {
          unint64_t v32 = 0;
          uint64_t v33 = 0;
          unsigned int v72 = 0;
        }
        int v40 = v286;
        CFTypeRef v2 = v3;
        int v38 = v285;
        unint64_t v47 = v284;
        int v45 = v283;
        int v54 = v346;
        int v68 = v354;
        int v52 = v366;
        int v61 = v376;
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v72 = 0;
      }
      goto LABEL_276;
    }
    (*(void (**)(uint64_t))(*(void *)v307 + 16))(v307);
    uint64_t v33 = *(char **)v4;
    unint64_t v208 = *((void *)v4 + 1);
    int v40 = v306;
    int v38 = (int)v3;
    unint64_t v47 = v305;
    int v45 = v304;
    int v54 = v351;
    int v68 = v360;
LABEL_397:
    int v52 = v362;
    int v61 = v372;
    goto LABEL_274;
  }
  int v70 = &v33[v69];
  uint64_t v71 = (uint64_t)&v33[v69 + 1];
  *((void *)v4 + 2) = v71;
  if (!v33)
  {
    unint64_t v208 = v32;
    goto LABEL_274;
  }
  unsigned int v72 = *v70;
  if (v72 < 2)
  {
    int v73 = 0;
    int v74 = 1;
    goto LABEL_65;
  }
LABEL_276:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v210 = *((void *)v4 + 3);
  if (!v210)
  {
    int v75 = 0;
    unint64_t v211 = 0;
    uint64_t v33 = 0;
    int v73 = 1;
    goto LABEL_278;
  }
  int v352 = v68;
  int v363 = v52;
  int v373 = v61;
  int v344 = v54;
  int v271 = v45;
  unint64_t v272 = v47;
  int v273 = v38;
  CFTypeRef v3 = v2;
  int v274 = v40;
  if (!v32)
  {
    int v75 = 0;
    unint64_t v211 = 0;
    uint64_t v33 = 0;
    int v73 = 1;
    CFTypeRef v2 = v3;
LABEL_278:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v212 = *((void *)v4 + 3);
    if (v212)
    {
      int v339 = v75;
      int v348 = v54;
      int v356 = v68;
      int v368 = v52;
      int v378 = v61;
      int v290 = v45;
      unint64_t v291 = v47;
      int v292 = v38;
      CFTypeRef v3 = v2;
      int v293 = v40;
      if (v211)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v212 + 16))(v212, v33, v211);
        unsigned int v79 = 0;
        uint64_t v33 = *(char **)v4;
        unint64_t v32 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v79 = 0;
      }
      int v40 = v293;
      CFTypeRef v2 = v3;
      int v38 = v292;
      unint64_t v47 = v291;
      int v45 = v290;
      int v54 = v348;
      int v68 = v356;
      int v52 = v368;
      int v61 = v378;
      int v75 = v339;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v79 = 0;
    }
    goto LABEL_280;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v210 + 16))(v210, v33);
  int v74 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v73 = 1;
  uint64_t v71 = *((void *)v4 + 2);
  int v40 = v274;
  CFTypeRef v2 = v3;
  int v38 = v273;
  unint64_t v47 = v272;
  int v45 = v271;
  int v54 = v344;
  int v68 = v352;
  int v52 = v363;
  int v61 = v373;
LABEL_65:
  if (v72) {
    int v75 = v74;
  }
  else {
    int v75 = 0;
  }
  unint64_t v76 = v71 - (void)v33;
  if (v32 <= v76)
  {
    int v342 = v75;
    int v350 = v54;
    int v359 = v68;
    int v371 = v52;
    int v381 = v61;
    int v300 = v45;
    unint64_t v301 = v47;
    LODWORD(v3) = v38;
    int v302 = v40;
    unint64_t v211 = 0;
    uint64_t v303 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (v32 && v303)
    {
      (*(void (**)(uint64_t))(*(void *)v303 + 16))(v303);
      uint64_t v33 = *(char **)v4;
      unint64_t v211 = *((void *)v4 + 1);
      int v40 = v302;
      int v38 = (int)v3;
      unint64_t v47 = v301;
      int v45 = v300;
      int v54 = v350;
      int v52 = v371;
      int v61 = v381;
    }
    else
    {
      uint64_t v33 = 0;
    }
    int v68 = v359;
    int v75 = v342;
    goto LABEL_278;
  }
  unsigned int v77 = &v33[v76];
  uint64_t v78 = (uint64_t)&v33[v76 + 1];
  *((void *)v4 + 2) = v78;
  if (!v33)
  {
    unint64_t v211 = v32;
    goto LABEL_278;
  }
  unsigned int v79 = *v77;
  if (v79 < 2)
  {
    int v80 = 0;
    int v81 = 1;
    goto LABEL_72;
  }
LABEL_280:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v213 = *((void *)v4 + 3);
  if (!v213)
  {
    int v82 = 0;
    unint64_t v214 = 0;
    uint64_t v33 = 0;
    int v80 = 1;
    goto LABEL_282;
  }
  int v337 = v75;
  int v345 = v54;
  int v353 = v68;
  int v365 = v38;
  int v375 = v61;
  int v280 = v52;
  int v281 = v45;
  unsigned int v334 = v47;
  CFTypeRef v3 = v2;
  int v282 = v40;
  if (!v32)
  {
    int v82 = 0;
    unint64_t v214 = 0;
    uint64_t v33 = 0;
    int v80 = 1;
    CFTypeRef v2 = v3;
    unint64_t v47 = v47;
LABEL_282:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v215 = *((void *)v4 + 3);
    if (v215)
    {
      int v332 = v82;
      unsigned int v335 = v47;
      int v340 = v75;
      int v357 = v68;
      int v369 = v52;
      int v379 = v61;
      int v294 = v54;
      int v295 = v45;
      LODWORD(v3) = v38;
      int v296 = v40;
      if (v214)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v215 + 16))(v215, v33, v214);
        uint64_t v33 = *(char **)v4;
        unint64_t v32 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
      }
      int v40 = v296;
      int v38 = (int)v3;
      unint64_t v47 = v335;
      int v75 = v340;
      int v45 = v295;
      int v54 = v294;
      int v52 = v369;
      int v61 = v379;
      int v68 = v357;
      int v82 = v332;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
    }
    goto LABEL_284;
  }
  CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v213 + 16))(v213, v33);
  int v81 = 0;
  uint64_t v33 = *(char **)v4;
  unint64_t v32 = *((void *)v4 + 1);
  int v80 = 1;
  uint64_t v78 = *((void *)v4 + 2);
  int v40 = v282;
  CFTypeRef v2 = v3;
  int v38 = v365;
  int v61 = v375;
  unint64_t v47 = v334;
  int v75 = v337;
  int v45 = v281;
  int v54 = v345;
  int v68 = v353;
  int v52 = v280;
LABEL_72:
  if (v79) {
    int v82 = v81;
  }
  else {
    int v82 = 0;
  }
  unint64_t v83 = v78 - (void)v33;
  if (v32 <= v83)
  {
    int v333 = v82;
    unsigned int v336 = v47;
    int v341 = v75;
    int v349 = v54;
    int v358 = v68;
    int v370 = v52;
    int v380 = v61;
    int v297 = v45;
    LODWORD(v3) = v38;
    int v298 = v40;
    unint64_t v214 = 0;
    uint64_t v299 = *((void *)v4 + 3);
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    if (v32 && v299)
    {
      (*(void (**)(uint64_t))(*(void *)v299 + 16))(v299);
      uint64_t v33 = *(char **)v4;
      unint64_t v214 = *((void *)v4 + 1);
      int v40 = v298;
      int v38 = (int)v3;
      unint64_t v47 = v336;
      int v45 = v297;
      int v54 = v349;
      int v52 = v370;
      int v61 = v380;
    }
    else
    {
      uint64_t v33 = 0;
      unint64_t v47 = v47;
    }
    int v68 = v358;
    int v75 = v341;
    int v82 = v333;
    goto LABEL_282;
  }
  long long v84 = &v33[v83];
  *((void *)v4 + 2) = v84 + 1;
  if (!v33)
  {
    unint64_t v214 = v32;
    goto LABEL_282;
  }
  unsigned int v85 = *v84;
  if (v85 > 1)
  {
LABEL_284:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v216 = *((void *)v4 + 3);
    if (!v216) {
      goto LABEL_285;
    }
    if (!v32) {
      goto LABEL_285;
    }
    int v331 = v82;
    int v338 = v75;
    int v347 = v45;
    int v355 = v68;
    int v367 = v52;
    int v377 = v61;
    int v287 = v54;
    unint64_t v288 = v47;
    LODWORD(v3) = v38;
    int v289 = v40;
    CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, char *))(*(void *)v216 + 16))(v216, v33);
    int v45 = v347;
    int v68 = v355;
    int v52 = v367;
    int v61 = v377;
    int v75 = v338;
    int v82 = v331;
    if (!*(void *)v4)
    {
LABEL_285:
      LOBYTE(cf) = 0;
      char v416 = 0;
      int v108 = 1;
      a2 = v398;
LABEL_125:
      if (v444) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v443, v33);
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](v445);
      if (v448)
      {
        uint64_t v110 = v447;
        uint64_t v447 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2) {
            WTF::StringImpl::destroy(v110, v109);
          }
          else {
            *(_DWORD *)v110 -= 2;
          }
        }
      }
      if (v452)
      {
        char v111 = v449;
        char v449 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2) {
            WTF::StringImpl::destroy(v111, v109);
          }
          else {
            *(_DWORD *)v111 -= 2;
          }
        }
      }
      if (v456)
      {
        char v112 = (WTF::StringImpl *)v453;
        char v453 = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 2) {
            WTF::StringImpl::destroy(v112, v109);
          }
          else {
            *(_DWORD *)v112 -= 2;
          }
        }
      }
      if (!v108 || (IPC::Decoder::markInvalid(v4), (char v114 = v416) != 0))
      {
        std::__variant_detail::__alt<0ul,WebCore::ResourceRequestBase::RequestData>::__alt[abi:sn180100]<WebCore::ResourceRequestBase::RequestData>((uint64_t)&v418, (uint64_t)&cf);
        unsigned int v426 = 0;
        char v114 = 1;
      }
      else
      {
        LOBYTE(v418) = 0;
      }
      unsigned __int8 v427 = v114;
      std::__optional_destruct_base<WebCore::ResourceRequestBase::RequestData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v113);
      int v115 = v427;
      goto LABEL_142;
    }
    int v40 = v289;
    int v38 = (int)v3;
    unint64_t v47 = v288;
    int v54 = v287;
    BOOL v87 = 0;
    int v86 = 1;
    goto LABEL_79;
  }
  int v86 = 0;
  BOOL v87 = v85 != 0;
LABEL_79:
  if (v456
    && v452
    && !v395
    && v448
    && v446[16]
    && v444
    && !v392
    && !v389
    && !v387
    && (unsigned __int16)v2 > 0xFFu
    && !v38
    && !v45
    && !v52
    && !v59
    && !v66
    && !v73
    && !v80
    && !v86)
  {
    char v390 = (char)v2;
    int v393 = v40;
    char v88 = (WTF::StringImpl *)v453;
    if (v453) {
      *v453 += 2;
    }
    uint64_t v428 = v88;
    long long v429 = v454;
    long long v430 = v455;
    long long v89 = v449;
    if (v449) {
      *(_DWORD *)v449 += 2;
    }
    LODWORD(v3) = v82;
    int v90 = v75;
    int v91 = v68;
    int v92 = v61;
    int v93 = v54;
    CFTypeRef v2 = (CFTypeRef)v47;
    char v431 = v89;
    long long v432 = v450;
    long long v433 = v451;
    uint64_t v434 = v15;
    char v94 = v447;
    if (v447) {
      *(_DWORD *)v447 += 2;
    }
    *(void *)&long long v435 = v94;
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)((char *)&v435 + 8), (WTF::ASCIILiteral *)v445);
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v437, (WTF::ASCIILiteral *)v446);
    uint64_t v95 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v439, (uint64_t)v443);
    a2 = v398;
    LOBYTE(v441) = v385;
    BYTE1(v441) = v384;
    BYTE2(v441) = v383;
    HIBYTE(v441) = v390;
    if (v393) {
      char v97 = 2;
    }
    else {
      char v97 = 0;
    }
    if (v93) {
      char v98 = 4;
    }
    else {
      char v98 = 0;
    }
    if (v92) {
      char v99 = 8;
    }
    else {
      char v99 = 0;
    }
    if (v91) {
      char v100 = 16;
    }
    else {
      char v100 = 0;
    }
    if (v90) {
      char v101 = 32;
    }
    else {
      char v101 = 0;
    }
    if (v3) {
      char v102 = 64;
    }
    else {
      char v102 = 0;
    }
    if (v87) {
      char v103 = 0x80;
    }
    else {
      char v103 = 0;
    }
    char v442 = v101 | v103 | v99 | v2 | v97 | v98 | v100 | v102;
    long long v402 = v429;
    long long v403 = v430;
    LODWORD(v429) = v429 & 0xFFFFFFFE;
    CFTypeRef cf = v428;
    uint64_t v404 = v431;
    long long v405 = v432;
    long long v406 = v433;
    LODWORD(v432) = v432 & 0xFFFFFFFE;
    long long v104 = v435;
    long long v435 = 0uLL;
    long long v408 = v104;
    uint64_t v105 = v436;
    uint64_t v436 = 0;
    uint64_t v407 = v434;
    uint64_t v409 = v105;
    uint64_t v106 = v437;
    uint64_t v437 = 0;
    uint64_t v410 = v106;
    *(void *)&long long v104 = v438;
    uint64_t v438 = 0;
    uint64_t v411 = v104;
    uint64_t v107 = v439;
    uint64_t v439 = 0;
    uint64_t v412 = v107;
    *(void *)&long long v104 = v440;
    uint64_t v440 = 0;
    uint64_t v413 = v104;
    char v415 = v442;
    int v414 = v441;
    char v416 = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v95, v96);
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v437);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)((char *)&v435 + 8));
    char v4 = v397;
    char v431 = 0;
    uint64_t v428 = 0;
    int v108 = 0;
    goto LABEL_125;
  }
  while (1)
  {
LABEL_231:
    __break(1u);
LABEL_232:
    CFRelease(v31);
LABEL_175:
    if (!v3) {
      IPC::Decoder::markInvalid(v4);
    }
    CFTypeRef v31 = (CFTypeRef)IPC::Decoder::decode<std::optional<BOOL>>(v4);
    int v396 = (int)v31;
    unint64_t v125 = *((void *)v4 + 1);
    uint64_t v126 = *(void *)v4;
    unint64_t v127 = *((void *)v4 + 2) - *(void *)v4;
    if (v125 <= v127)
    {
      unint64_t v217 = 0;
      uint64_t v218 = 0;
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      char v219 = v4;
      uint64_t v220 = *((void *)v4 + 3);
      if (v220)
      {
        if (v125)
        {
          (*(void (**)(uint64_t))(*(void *)v220 + 16))(v220);
          uint64_t v218 = *(void *)v4;
          unint64_t v217 = *((void *)v4 + 1);
        }
        else
        {
          unint64_t v217 = 0;
          uint64_t v218 = 0;
        }
      }
      goto LABEL_291;
    }
    char v128 = (unsigned __int8 *)(v126 + v127);
    *((void *)v4 + 2) = v128 + 1;
    if (!v126)
    {
      char v219 = v4;
      unint64_t v217 = v125;
      uint64_t v218 = 0;
LABEL_291:
      unint64_t v125 = 0;
      uint64_t v126 = 0;
      *(void *)char v219 = 0;
      *((void *)v219 + 1) = 0;
      char v4 = v219;
      uint64_t v221 = *((void *)v219 + 3);
      if (v221)
      {
        if (v217)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v221 + 16))(v221, v218, v217);
          uint64_t v126 = *(void *)v219;
          unint64_t v125 = *((void *)v219 + 1);
        }
        else
        {
          unint64_t v125 = 0;
          uint64_t v126 = 0;
        }
      }
      goto LABEL_292;
    }
    unsigned int v129 = *v128;
    if (v129 < 2)
    {
      if (v129)
      {
        CFTypeRef v31 = (CFTypeRef)IPC::ArgumentCoder<WebCore::ResourceRequestRequester,void>::decode<IPC::Decoder>(v4);
        __int16 v130 = (__int16)v31;
        if ((unsigned __int16)v31 <= 0xFFu)
        {
          CFTypeRef v31 = (CFTypeRef)IPC::Decoder::markInvalid(v4);
          unsigned int v131 = 0;
        }
        else
        {
          unsigned int v131 = 0x10000;
        }
        if ((v130 & 0xFF00) != 0) {
          int v132 = v130;
        }
        else {
          int v132 = 0;
        }
        int v391 = 256;
      }
      else
      {
        int v132 = 0;
        int v391 = 0;
        unsigned int v131 = 0x10000;
      }
      goto LABEL_187;
    }
LABEL_292:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    CFTypeRef v31 = (CFTypeRef)*((void *)v4 + 3);
    if (v31 && v125) {
      CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(CFTypeRef, uint64_t))(*(void *)v31 + 16))(v31, v126);
    }
    unsigned int v131 = 0;
    int v132 = 0;
    int v391 = 0;
LABEL_187:
    if (!HIWORD(v131)) {
      CFTypeRef v31 = (CFTypeRef)IPC::Decoder::markInvalid(v4);
    }
    unint64_t v133 = *((void *)v4 + 1);
    uint64_t v134 = *(void *)v4;
    unint64_t v135 = *((void *)v4 + 2) - *(void *)v4;
    int v394 = v132;
    if (v133 <= v135)
    {
      unint64_t v222 = 0;
      uint64_t v223 = 0;
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      char v224 = v4;
      uint64_t v225 = *((void *)v4 + 3);
      if (v225)
      {
        if (v133)
        {
          (*(void (**)(uint64_t))(*(void *)v225 + 16))(v225);
          uint64_t v223 = *(void *)v4;
          unint64_t v222 = *((void *)v4 + 1);
        }
        else
        {
          unint64_t v222 = 0;
          uint64_t v223 = 0;
        }
      }
      goto LABEL_295;
    }
    char v136 = (unsigned __int8 *)(v134 + v135);
    uint64_t v137 = v134 + v135 + 1;
    *((void *)v4 + 2) = v137;
    if (!v134)
    {
      char v224 = v4;
      unint64_t v222 = v133;
      uint64_t v223 = 0;
LABEL_295:
      *(void *)char v224 = 0;
      *((void *)v224 + 1) = 0;
      char v4 = v224;
      uint64_t v226 = *((void *)v224 + 3);
      if (v226 && v222)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v226 + 16))(v226, v223, v222);
        unsigned int v138 = 0;
        uint64_t v134 = *(void *)v4;
        unint64_t v133 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v133 = 0;
        uint64_t v134 = 0;
        unsigned int v138 = 0;
      }
      goto LABEL_297;
    }
    unsigned int v138 = *v136;
    if (v138 < 2)
    {
      int v139 = 0;
      char v140 = 1;
      goto LABEL_193;
    }
LABEL_297:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v227 = v4;
    uint64_t v228 = *((void *)v4 + 3);
    if (!v228 || !v133)
    {
      unint64_t v229 = 0;
      uint64_t v134 = 0;
      char v386 = 0;
      int v388 = 1;
LABEL_299:
      *(void *)uint64_t v227 = 0;
      *((void *)v227 + 1) = 0;
      char v4 = v227;
      uint64_t v230 = *((void *)v227 + 3);
      if (v230 && v229)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v230 + 16))(v230, v134, v229);
        unsigned int v145 = 0;
        uint64_t v134 = *(void *)v227;
        unint64_t v133 = *((void *)v227 + 1);
      }
      else
      {
        unint64_t v133 = 0;
        uint64_t v134 = 0;
        unsigned int v145 = 0;
      }
      goto LABEL_301;
    }
    CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v228 + 16))(v228, v134);
    char v140 = 0;
    uint64_t v134 = *(void *)v4;
    unint64_t v133 = *((void *)v4 + 1);
    int v139 = 1;
    uint64_t v137 = *((void *)v4 + 2);
LABEL_193:
    if (v138) {
      char v141 = v140;
    }
    else {
      char v141 = 0;
    }
    unint64_t v142 = v137 - v134;
    if (v133 <= v142)
    {
      char v386 = v141;
      int v388 = v139;
      unint64_t v229 = 0;
      uint64_t v327 = *((void *)v4 + 3);
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v227 = v4;
      if (v133 && v327)
      {
        (*(void (**)(uint64_t))(*(void *)v327 + 16))(v327);
        uint64_t v134 = *(void *)v4;
        unint64_t v229 = *((void *)v4 + 1);
      }
      else
      {
        uint64_t v134 = 0;
      }
      goto LABEL_299;
    }
    uint64_t v143 = (unsigned __int8 *)(v134 + v142);
    uint64_t v144 = v134 + v142 + 1;
    *((void *)v4 + 2) = v144;
    if (!v134)
    {
      char v386 = v141;
      int v388 = v139;
      uint64_t v227 = v4;
      unint64_t v229 = v133;
      goto LABEL_299;
    }
    unsigned int v145 = *v143;
    if (v145 < 2)
    {
      int v146 = 0;
      char v147 = 1;
      goto LABEL_200;
    }
    char v386 = v141;
    int v388 = v139;
LABEL_301:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    long long v231 = v4;
    uint64_t v232 = *((void *)v4 + 3);
    if (!v232 || !v133)
    {
      char v148 = 0;
      unint64_t v233 = 0;
      uint64_t v134 = 0;
      int v146 = 1;
LABEL_303:
      *(void *)long long v231 = 0;
      *((void *)v231 + 1) = 0;
      char v4 = v231;
      uint64_t v234 = *((void *)v231 + 3);
      if (v234 && v233)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v234 + 16))(v234, v134, v233);
        unsigned int v152 = 0;
        uint64_t v134 = *(void *)v231;
        unint64_t v133 = *((void *)v231 + 1);
      }
      else
      {
        unint64_t v133 = 0;
        uint64_t v134 = 0;
        unsigned int v152 = 0;
      }
      goto LABEL_305;
    }
    CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v232 + 16))(v232, v134);
    char v147 = 0;
    uint64_t v134 = *(void *)v4;
    unint64_t v133 = *((void *)v4 + 1);
    int v146 = 1;
    uint64_t v144 = *((void *)v4 + 2);
    char v141 = v386;
    int v139 = v388;
LABEL_200:
    if (v145) {
      char v148 = v147;
    }
    else {
      char v148 = 0;
    }
    unint64_t v149 = v144 - v134;
    if (v133 <= v149)
    {
      char v386 = v141;
      int v388 = v139;
      unint64_t v233 = 0;
      uint64_t v328 = *((void *)v4 + 3);
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      long long v231 = v4;
      if (v133 && v328)
      {
        (*(void (**)(uint64_t))(*(void *)v328 + 16))(v328);
        uint64_t v134 = *(void *)v4;
        unint64_t v233 = *((void *)v4 + 1);
      }
      else
      {
        uint64_t v134 = 0;
      }
      goto LABEL_303;
    }
    char v150 = (unsigned __int8 *)(v134 + v149);
    uint64_t v151 = v134 + v149 + 1;
    *((void *)v4 + 2) = v151;
    if (!v134)
    {
      char v386 = v141;
      int v388 = v139;
      long long v231 = v4;
      unint64_t v233 = v133;
      goto LABEL_303;
    }
    unsigned int v152 = *v150;
    if (v152 < 2)
    {
      int v153 = 0;
      char v154 = 1;
      goto LABEL_207;
    }
    char v386 = v141;
    int v388 = v139;
LABEL_305:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v235 = *((void *)v4 + 3);
    if (!v235 || !v133)
    {
      char v155 = 0;
      unint64_t v236 = 0;
      uint64_t v134 = 0;
      int v153 = 1;
LABEL_307:
      *(void *)int v397 = 0;
      *((void *)v397 + 1) = 0;
      char v4 = v397;
      uint64_t v237 = *((void *)v397 + 3);
      if (v237 && v236)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v237 + 16))(v237, v134, v236);
        unsigned int v159 = 0;
        uint64_t v134 = *(void *)v397;
        unint64_t v133 = *((void *)v397 + 1);
      }
      else
      {
        unint64_t v133 = 0;
        uint64_t v134 = 0;
        unsigned int v159 = 0;
      }
      goto LABEL_309;
    }
    CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v235 + 16))(v235, v134);
    char v154 = 0;
    char v4 = v397;
    uint64_t v134 = *(void *)v397;
    unint64_t v133 = *((void *)v397 + 1);
    int v153 = 1;
    uint64_t v151 = *((void *)v397 + 2);
    char v141 = v386;
    int v139 = v388;
LABEL_207:
    if (v152) {
      char v155 = v154;
    }
    else {
      char v155 = 0;
    }
    unint64_t v156 = v151 - v134;
    if (v133 <= v156)
    {
      char v386 = v141;
      int v388 = v139;
      unint64_t v236 = 0;
      uint64_t v329 = *((void *)v4 + 3);
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      if (v133 && v329)
      {
        (*(void (**)(uint64_t))(*(void *)v329 + 16))(v329);
        uint64_t v134 = *(void *)v397;
        unint64_t v236 = *((void *)v397 + 1);
      }
      else
      {
        uint64_t v134 = 0;
      }
      goto LABEL_307;
    }
    uint64_t v157 = (unsigned __int8 *)(v134 + v156);
    uint64_t v158 = v134 + v156 + 1;
    *((void *)v4 + 2) = v158;
    if (!v134)
    {
      char v386 = v141;
      int v388 = v139;
      unint64_t v236 = v133;
      goto LABEL_307;
    }
    unsigned int v159 = *v157;
    if (v159 < 2)
    {
      int v160 = 0;
      char v161 = 1;
      goto LABEL_214;
    }
    char v386 = v141;
    int v388 = v139;
LABEL_309:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v238 = *((void *)v4 + 3);
    if (!v238 || !v133)
    {
      char v162 = 0;
      unint64_t v239 = 0;
      uint64_t v134 = 0;
      int v160 = 1;
LABEL_311:
      *(void *)int v397 = 0;
      *((void *)v397 + 1) = 0;
      char v4 = v397;
      uint64_t v240 = *((void *)v397 + 3);
      if (v240 && v239)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v240 + 16))(v240, v134, v239);
        uint64_t v134 = *(void *)v397;
        unint64_t v133 = *((void *)v397 + 1);
      }
      else
      {
        unint64_t v133 = 0;
        uint64_t v134 = 0;
      }
      goto LABEL_313;
    }
    CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v238 + 16))(v238, v134);
    char v161 = 0;
    char v4 = v397;
    uint64_t v134 = *(void *)v397;
    unint64_t v133 = *((void *)v397 + 1);
    int v160 = 1;
    uint64_t v158 = *((void *)v397 + 2);
    char v141 = v386;
    int v139 = v388;
LABEL_214:
    if (v159) {
      char v162 = v161;
    }
    else {
      char v162 = 0;
    }
    unint64_t v163 = v158 - v134;
    if (v133 <= v163)
    {
      char v386 = v141;
      int v388 = v139;
      unint64_t v239 = 0;
      uint64_t v330 = *((void *)v4 + 3);
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      if (v133 && v330)
      {
        (*(void (**)(uint64_t))(*(void *)v330 + 16))(v330);
        uint64_t v134 = *(void *)v397;
        unint64_t v239 = *((void *)v397 + 1);
      }
      else
      {
        uint64_t v134 = 0;
      }
      goto LABEL_311;
    }
    uint64_t v164 = (unsigned __int8 *)(v134 + v163);
    *((void *)v4 + 2) = v164 + 1;
    if (!v134)
    {
      char v386 = v141;
      int v388 = v139;
      unint64_t v239 = v133;
      goto LABEL_311;
    }
    unsigned int v165 = *v164;
    if (v165 <= 1)
    {
      int v166 = 0;
      BOOL v167 = v165 != 0;
      goto LABEL_221;
    }
    char v386 = v141;
    int v388 = v139;
LABEL_313:
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v241 = *((void *)v4 + 3);
    if (!v241) {
      break;
    }
    if (!v133) {
      break;
    }
    CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v241 + 16))(v241, v134);
    if (!*(void *)v4) {
      break;
    }
    BOOL v167 = 0;
    int v166 = 1;
    char v141 = v386;
    int v139 = v388;
LABEL_221:
    if (v3 && (v396 & 0xFF0000) != 0 && (v394 | v131 | v391) >> 16 && !v139 && !v146 && !v153 && !v160 && !v166)
    {
      CFTypeRef v418 = v2;
      __int16 v419 = v396;
      __int16 v420 = v394 | v131 | v391;
      char v421 = v141;
      char v422 = v148;
      char v423 = v155;
      char v424 = v162;
      BOOL v425 = v167;
      int v115 = 1;
      unsigned int v426 = 1;
      a2 = v398;
      goto LABEL_230;
    }
  }
  if (v3 && v2) {
    CFRelease(v2);
  }
  IPC::Decoder::markInvalid(v4);
  a2 = v398;
  int v115 = 0;
  LOBYTE(v418) = 0;
LABEL_230:
  unsigned __int8 v427 = v115;
LABEL_142:
  if (!v115) {
    goto LABEL_236;
  }
LABEL_143:
  CFTypeRef v31 = IPC::Decoder::decode<WTF::String>(v4, (uint64_t)&v428);
  unint64_t v116 = *((void *)v4 + 1);
  __int16 v117 = *(WTF::StringImpl **)v4;
  unint64_t v118 = *((void *)v4 + 2) - *(void *)v4;
  if (v116 <= v118)
  {
    unint64_t v172 = 0;
    uint64_t v173 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v174 = *((void *)v4 + 3);
    if (v174)
    {
      if (v116)
      {
        (*(void (**)(uint64_t))(*(void *)v174 + 16))(v174);
        uint64_t v173 = *(void *)v4;
        unint64_t v172 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v172 = 0;
        uint64_t v173 = 0;
      }
    }
    goto LABEL_238;
  }
  int v119 = (unsigned __int8 *)v117 + v118;
  *((void *)v4 + 2) = v119 + 1;
  if (!v117)
  {
    unint64_t v172 = v116;
    uint64_t v173 = 0;
LABEL_238:
    unint64_t v116 = 0;
    __int16 v117 = 0;
    *(void *)char v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v175 = *((void *)v4 + 3);
    if (v175)
    {
      if (v172)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v175 + 16))(v175, v173, v172);
        __int16 v117 = *(WTF::StringImpl **)v4;
        unint64_t v116 = *((void *)v4 + 1);
      }
      else
      {
        unint64_t v116 = 0;
        __int16 v117 = 0;
      }
    }
    goto LABEL_239;
  }
  unsigned int v120 = *v119;
  if (v120 <= 1)
  {
    int v121 = 0;
    char v4 = (IPC::Decoder *)(v120 != 0);
LABEL_147:
    if (!v427) {
      goto LABEL_231;
    }
    v399[0] = 0;
    int v400 = -1;
    CFTypeRef v2 = (CFTypeRef)v426;
    if (v426 != -1)
    {
      CFTypeRef v31 = (CFTypeRef)((uint64_t (*)(_DWORD **, unsigned char *, CFTypeRef *))off_1EE9B4648[v426])(&v453, v399, &v418);
      int v400 = (int)v2;
    }
    if (!(_BYTE)v429 || v121) {
      goto LABEL_231;
    }
    WebCore::ResourceRequest::fromResourceRequestData();
    WebCore::ResourceRequestBase::ResourceRequestBase(a2, (uint64_t)&cf);
    *(void *)(a2 + 192) = v417;
    *(unsigned char *)(a2 + 200) = 1;
    uint64_t v417 = 0;
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&cf);
    if (v400 != -1) {
      ((void (*)(_DWORD **, unsigned char *))off_1EE9B4638[v400])(&v453, v399);
    }
    int v400 = -1;
    goto LABEL_155;
  }
LABEL_239:
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v176 = *((void *)v4 + 3);
  if (v176)
  {
    if (v116)
    {
      CFTypeRef v31 = (CFTypeRef)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v176 + 16))(v176, v117);
      if (*(void *)v4)
      {
        char v4 = 0;
        int v121 = 1;
        goto LABEL_147;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 200) = 0;
LABEL_155:
  if ((_BYTE)v429)
  {
    uint64_t v122 = v428;
    uint64_t v428 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2) {
        WTF::StringImpl::destroy(v122, v117);
      }
      else {
        *(_DWORD *)v122 -= 2;
      }
    }
  }
  if (v427)
  {
    if (v426 != -1) {
      ((void (*)(CFTypeRef *, CFTypeRef *))off_1EE9B4638[v426])(&cf, &v418);
    }
  }
}

void sub_19885FD58(_Unwind_Exception *a1)
{
  if (v2)
  {
    if (v1) {
      CFRelease(v1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19885FEC4()
{
}

void sub_19885FEDC()
{
}

void sub_19885FEE4()
{
}

void sub_19885FEF4()
{
}

void sub_19885FEFC()
{
}

void sub_19885FF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,char a41)
{
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&a41);
  if (a39 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B4638[a39])(v41 - 160, &a20);
  }
  a39 = -1;
  JUMPOUT(0x19885FF4CLL);
}

void sub_19885FF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  if (a39 == -1) {
    JUMPOUT(0x19885FF44);
  }
  JUMPOUT(0x19885FF3CLL);
}

uint64_t IPC::ArgumentCoder<WebCore::ResourceError::IPCData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::encodeObjectDirectly<NSError>(a1, *(NSError **)(a2 + 8));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::ResourceError::IPCData,void>::decode(uint64_t a1, IPC::Decoder *a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::ResourceErrorBaseType>(a2);
  if (!*(void *)a2) {
    goto LABEL_9;
  }
  char v5 = v4;
  if (v4 <= 0xFFu) {
    goto LABEL_10;
  }
  if (!(_BYTE)v4)
  {
LABEL_9:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSError>>((uint64_t)&cf, (const void ***)a2);
  unsigned __int16 v6 = IPC::Decoder::decode<BOOL>(a2);
  if (!*(void *)a2) {
    goto LABEL_11;
  }
  if (v9 && v6 > 0xFFu)
  {
    CFTypeRef v7 = cf;
    *(unsigned char *)a1 = v5;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 24) = 1;
    return;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v9)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1988600D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ResourceErrorBaseType>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::ResourceErrorBaseType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

void IPC::Decoder::decode<WTF::RetainPtr<NSError>>(uint64_t a1, const void ***a2)
{
  IPC::ArgumentCoder<WTF::RetainPtr<NSError>,void>::decode<NSError,NSError*>(a1, a2);
  if (!*(unsigned char *)(a1 + 8))
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
}

void IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(IPC::Encoder *a1, WebCore::ResourceError *this)
{
  WebCore::ResourceError::ipcData(&v4, this);
  IPC::ArgumentCoder<std::optional<WebCore::ResourceError::IPCData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceError::IPCData>>(a1, (uint64_t)&v4);
  if (v6)
  {
    CFTypeRef v3 = cf;
    CFTypeRef cf = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
}

void sub_1988601EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, char a12)
{
  if (a12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ResourceError,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(unsigned __int8 **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *(unsigned __int8 **)a1;
        unint64_t v14 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_24;
  }
  CFTypeRef v7 = &v5[v6];
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_24:
    unint64_t v4 = 0;
    char v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        char v5 = *(unsigned __int8 **)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_25;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2)
  {
LABEL_25:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18 && v4) {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v18 + 16))(v18, v5);
    }
    goto LABEL_26;
  }
  if (!v7)
  {
    char v28 = 0;
    unsigned __int8 v31 = 0;
    unsigned __int8 v32 = 1;
    goto LABEL_6;
  }
  IPC::Decoder::decode<WebCore::ResourceError::IPCData>((uint64_t)&v19, a1);
  if (!v22)
  {
LABEL_26:
    char v28 = 0;
    unsigned __int8 v32 = 0;
    IPC::Decoder::markInvalid(a1);
    CFTypeRef v7 = *(unsigned __int8 **)a1;
    if (!*(void *)a1)
    {
      int v12 = 0;
      goto LABEL_29;
    }
    __break(1u);
LABEL_28:
    int v12 = 1;
LABEL_29:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    goto LABEL_14;
  }
  unint64_t v29 = v20;
  char v30 = v21;
  LODWORD(v7) = 1;
  unsigned __int8 v31 = 1;
  char v28 = (char)v19;
  unsigned __int8 v32 = 1;
LABEL_6:
  if (!*(void *)a1) {
    goto LABEL_28;
  }
  WebCore::ResourceError::fromIPCData();
  unint64_t v8 = v19;
  unint64_t v19 = 0;
  *(void *)a2 = v8;
  WTF::URL::URL(a2 + 8, (uint64_t *)&v20);
  unint64_t v10 = v20;
  *(void *)(a2 + 48) = v23;
  *(_DWORD *)(a2 + 56) = v24;
  *(_WORD *)(a2 + 60) = v25;
  *(void *)(a2 + 64) = v26;
  *(unsigned char *)(a2 + 72) = v27;
  *(unsigned char *)(a2 + 80) = 1;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  char v20 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v19;
  unint64_t v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  int v12 = v32;
  LODWORD(v7) = v31;
LABEL_14:
  if (v12 && v7)
  {
    unsigned __int8 v13 = v29;
    unint64_t v29 = 0;
    if (v13) {
      CFRelease(v13);
    }
  }
}

void sub_1988604B4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  unint64_t v6 = *v3;
  *CFTypeRef v3 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)va, a2);
  if (*(unsigned char *)(v4 - 24) && *(unsigned char *)(v4 - 32))
  {
    CFTypeRef v7 = *(const void **)(v4 - 48);
    *(void *)(v4 - 48) = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  _Unwind_Resume(a1);
}

void WebCore::ResourceError::~ResourceError(WebCore::ResourceError *this, WTF::StringImpl *a2)
{
  CFTypeRef v3 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

unsigned char *IPC::ArgumentCoder<WebCore::WindowFeatures,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (uint64_t)(a2 + 4));
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (uint64_t)(a2 + 12));
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (uint64_t)(a2 + 20));
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (uint64_t)(a2 + 28));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 36);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 38);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 40);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 42);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 44);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 46);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 50);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 52);

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 54);
}

uint64_t IPC::ArgumentCoder<WebCore::WindowFeatures,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5) {
    goto LABEL_26;
  }
  a1[2] = v4 + v5 + 1;
  if (!v4)
  {
    uint64_t v23 = v3;
    uint64_t v24 = 0;
    goto LABEL_27;
  }
  unsigned int v6 = *(unsigned __int8 *)(v4 + v5);
  if (v6 >= 2) {
    goto LABEL_29;
  }
  int v38 = 0;
  for (char i = 1; ; char i = 0)
  {
    if (!v6) {
      char i = 0;
    }
    char v37 = i;
    uint64_t v8 = IPC::Decoder::decode<std::optional<float>>(a1);
    char v36 = v9;
    uint64_t v10 = IPC::Decoder::decode<std::optional<float>>(a1);
    char v35 = v11;
    uint64_t v12 = IPC::Decoder::decode<std::optional<float>>(a1);
    char v34 = v13;
    uint64_t v14 = IPC::Decoder::decode<std::optional<float>>(a1);
    char v33 = v15;
    int v16 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v17 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v18 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v19 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v20 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v32 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v31 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v30 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    int v29 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
    if (!*a1) {
      break;
    }
    if (!v38)
    {
      LOBYTE(v39) = v37;
      if (v36)
      {
        DWORD1(v39) = v8;
        BYTE8(v39) = BYTE4(v8);
        if (v35)
        {
          HIDWORD(v39) = v10;
          LOBYTE(v40) = BYTE4(v10);
          if (v34)
          {
            DWORD1(v40) = v12;
            BYTE8(v40) = BYTE4(v12);
            if (v33)
            {
              HIDWORD(v40) = v14;
              v41[0] = BYTE4(v14);
              if ((v16 & 0xFF0000) != 0)
              {
                *(_WORD *)&v41[4] = v16;
                if ((v17 & 0xFF0000) != 0)
                {
                  *(_WORD *)&v41[6] = v17;
                  if ((v18 & 0xFF0000) != 0)
                  {
                    *(_WORD *)&v41[8] = v18;
                    if ((v19 & 0xFF0000) != 0)
                    {
                      *(_WORD *)&v41[10] = v19;
                      if ((v20 & 0xFF0000) != 0)
                      {
                        *(_WORD *)&v41[12] = v20;
                        if ((v32 & 0xFF0000) != 0)
                        {
                          *(_WORD *)&v41[14] = v32;
                          if ((v31 & 0xFF0000) != 0)
                          {
                            *(_WORD *)&v41[16] = v31;
                            if ((v30 & 0xFF0000) != 0)
                            {
                              *(_WORD *)&v41[18] = v30;
                              if ((v29 & 0xFF0000) != 0)
                              {
                                *(_WORD *)&v41[20] = v29;
                                if ((result & 0xFF0000) != 0)
                                {
                                  *(_WORD *)&v41[22] = result;
                                  *(_WORD *)&v41[24] = 0;
                                  *(_OWORD *)a2 = v39;
                                  *(_OWORD *)(a2 + 16) = v40;
                                  *(_OWORD *)(a2 + 32) = *(_OWORD *)v41;
                                  *(_OWORD *)(a2 + 42) = *(_OWORD *)&v41[10];
                                  v42[0] = 0;
                                  *(void *)(a2 + 64) = 0;
                                  v42[1] = 0;
                                  *(void *)(a2 + 72) = 0;
                                  *(unsigned char *)(a2 + 80) = 1;
                                  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v22);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_26:
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *a1;
        uint64_t v23 = a1[1];
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26 && v23)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24, v23);
      unsigned int v6 = 0;
      uint64_t v4 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      unsigned int v6 = 0;
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27)
    {
      if (v3) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v4);
      }
    }
    int v38 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));
}

unsigned int *IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    uint64_t v8 = (int *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      int v9 = 0;
      int v10 = *v8;
      unsigned int v41 = v10 & 0xFFFFFF00;
      int v11 = v10;
      uint64_t v12 = v5;
      goto LABEL_8;
    }
    uint64_t v12 = v4;
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v35 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v36 = a1[3];
    if (v36)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
        uint64_t v35 = *a1;
        uint64_t v12 = a1[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v35 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v37 = a1[3];
  if (!v37)
  {
    uint64_t v12 = 0;
LABEL_43:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v41 = 0;
    int v11 = 0;
    int v9 = 1;
    goto LABEL_8;
  }
  if (!v12) {
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35, v12);
  unsigned int v41 = 0;
  int v11 = 0;
  uint64_t v12 = *a1;
  unint64_t v4 = a1[1];
  int v9 = 1;
  uint64_t v5 = *a1;
LABEL_8:
  unint64_t v13 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 >= v13 && v4 - v13 > 3)
  {
    char v15 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v15 + 1);
    unint64_t v16 = v4;
    if (v5)
    {
      int v17 = 0;
      unsigned int v18 = *v15 & 0xFFFFFF00;
      int v19 = *v15;
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v38 = a1[3];
    if (v38)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        uint64_t v12 = *a1;
        unint64_t v16 = a1[1];
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v12 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v39 = a1[3];
  if (v39 && v16) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v12, v16);
  }
  unsigned int v18 = 0;
  int v19 = 0;
  int v17 = 1;
LABEL_15:
  LOWORD(v42) = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v42);
  int v20 = BYTE1(v42);
  if (BYTE1(v42))
  {
    char v21 = v42;
  }
  else
  {
    uint64_t v30 = *a1;
    uint64_t v31 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v32 = a1[3];
    if (v32 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
    }
    char v21 = 0;
  }
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v46);
  unint64_t v23 = a1[1];
  if (!v47)
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    uint64_t v33 = *a1;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v34 = a1[3];
    if (!v34) {
      goto LABEL_37;
    }
    if (!v23)
    {
      uint64_t v28 = 0;
      uint64_t v27 = 0;
      goto LABEL_37;
    }
    uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v33);
    unint64_t v23 = a1[1];
  }
  uint64_t v24 = (char *)*a1;
  unint64_t v25 = a1[2] - *a1;
  if (v23 <= v25)
  {
    uint64_t v28 = 0;
    uint64_t v40 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = 0;
    if (v40 && v23)
    {
      (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
      uint64_t v27 = *a1;
      uint64_t v28 = a1[1];
    }
LABEL_37:
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result) {
      goto LABEL_51;
    }
    goto LABEL_38;
  }
  uint64_t v26 = &v24[v25];
  a1[2] = (uint64_t)(v26 + 1);
  if (!v24)
  {
    uint64_t v28 = v23;
    uint64_t v27 = 0;
    goto LABEL_37;
  }
  uint64_t v27 = *v26;
  if (v27 > 1) {
    goto LABEL_38;
  }
  uint64_t v28 = 0;
  BOOL v29 = v27 != 0;
  if (v9) {
    goto LABEL_50;
  }
LABEL_22:
  if (v17 || !v20 || (uint64_t v27 = v47) == 0 || v28)
  {
LABEL_50:
    while (1)
    {
      __break(1u);
LABEL_51:
      if (v28)
      {
        (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(void *)result + 16))(result, v27, v28);
        uint64_t v24 = (char *)*a1;
        unint64_t v23 = a1[1];
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
LABEL_38:
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = (unsigned int *)a1[3];
      if (!result) {
        break;
      }
      if (!v23) {
        break;
      }
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, char *))(*(void *)result + 16))(result, v24);
      if (!*a1) {
        break;
      }
      BOOL v29 = 0;
      uint64_t v28 = 1;
      if (!v9) {
        goto LABEL_22;
      }
    }
    *a2 = 0;
    a2[32] = 0;
  }
  else
  {
    LODWORD(v42) = v11 | v41;
    HIDWORD(v42) = v19 | v18;
    char v43 = v21;
    WebCore::Color::Color((WebCore::Color *)&v44, &v46);
    BOOL v45 = v29;
    *(void *)a2 = v42;
    a2[8] = v43;
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    a2[24] = v45;
    a2[32] = 1;
    if ((v44 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v24);
      }
    }
  }
  if (v47 && (v46.m_colorAndFlags & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v46.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v46.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v24);
    }
  }
  return result;
}

void sub_198860FA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16 && (a15 & 0x8000000000000) != 0)
  {
    int v17 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  unint64_t v4 = (atomic_uint *)a2[2];

  return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, v4);
}

void IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v11);
  if (*(void *)a1)
  {
    if (v16)
    {
      uint64_t v5 = v15;
      char v15 = 0;
      if (v14)
      {
        unint64_t v6 = v13;
        unint64_t v13 = 0;
        if (v12)
        {
          CFTypeRef v7 = v11;
          *(void *)a2 = v5;
          *(void *)(a2 + 8) = v6;
          *(void *)(a2 + 16) = v7;
          *(unsigned char *)(a2 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v12)
  {
    int v10 = v11;
    int v11 = 0;
    if (v10) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v4);
    }
  }
LABEL_6:
  if (v14)
  {
    uint64_t v8 = v13;
    unint64_t v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  if (v16)
  {
    int v9 = v15;
    char v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_198861174(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::SharedBuffer,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      CFTypeRef v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 8));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 24));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 40));
  char v5 = a2[56];
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(char **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v38 = *((void *)a1 + 3);
    if (v38)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        uint64_t v37 = *(char **)a1;
        unint64_t v36 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
      }
    }
    goto LABEL_33;
  }
  CFTypeRef v7 = &v5[v6];
  uint64_t v8 = (uint64_t)&v5[v6 + 1];
  *((void *)a1 + 2) = v8;
  if (!v5)
  {
    unint64_t v36 = v4;
    uint64_t v37 = 0;
LABEL_33:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39 && v36)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
      unsigned int v9 = 0;
      char v5 = *(char **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v5 = 0;
      unsigned int v9 = 0;
    }
    goto LABEL_35;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
LABEL_35:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v40 = *((void *)a1 + 3);
  if (!v40 || !v4)
  {
    char v12 = 0;
    unint64_t v41 = 0;
    char v5 = 0;
    int v10 = 1;
LABEL_37:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v42 = *((void *)a1 + 3);
    if (v42 && v41)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v42 + 16))(v42, v5, v41);
      unsigned int v15 = 0;
      char v5 = *(char **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v5 = 0;
      unsigned int v15 = 0;
    }
    goto LABEL_39;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v40 + 16))(v40, v5);
  char v11 = 0;
  char v5 = *(char **)a1;
  unint64_t v4 = *((void *)a1 + 1);
  int v10 = 1;
  uint64_t v8 = *((void *)a1 + 2);
LABEL_5:
  if (v9) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unint64_t v13 = v8 - (void)v5;
  if (v4 <= v13)
  {
    unint64_t v41 = 0;
    uint64_t v45 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v45 && v4)
    {
      (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
      char v5 = *(char **)a1;
      unint64_t v41 = *((void *)a1 + 1);
    }
    else
    {
      char v5 = 0;
    }
    goto LABEL_37;
  }
  char v14 = &v5[v13];
  *((void *)a1 + 2) = v14 + 1;
  if (!v5)
  {
    unint64_t v41 = v4;
    goto LABEL_37;
  }
  unsigned int v15 = *v14;
  if (v15 < 2)
  {
    int v16 = 0;
    char v17 = 1;
    goto LABEL_12;
  }
LABEL_39:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v43 = *((void *)a1 + 3);
  if (v43 && v4) {
    (*(void (**)(uint64_t, char *))(*(void *)v43 + 16))(v43, v5);
  }
  char v17 = 0;
  int v16 = 1;
LABEL_12:
  if (v15) {
    char v18 = v17;
  }
  else {
    char v18 = 0;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v57);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v19, (uint64_t)&v54);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v20, (uint64_t)&v51);
  unint64_t v22 = *((void *)a1 + 1);
  unint64_t v23 = *(char **)a1;
  unint64_t v24 = *((void *)a1 + 2) - *(void *)a1;
  if (v22 <= v24)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44)
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v27 = *(char **)a1;
        unint64_t v26 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0;
      }
    }
LABEL_42:
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      goto LABEL_62;
    }
    goto LABEL_43;
  }
  unint64_t v25 = &v23[v24];
  *((void *)a1 + 2) = v25 + 1;
  if (!v23)
  {
    unint64_t v26 = v22;
    uint64_t v27 = 0;
    goto LABEL_42;
  }
  unint64_t v26 = *v25;
  if (v26 > 2) {
    goto LABEL_43;
  }
  uint64_t v27 = (char *)(v26 | 0x100);
  if (v10) {
    goto LABEL_61;
  }
LABEL_19:
  LOBYTE(v46) = v12;
  if (v16) {
    goto LABEL_61;
  }
  HIBYTE(v46) = v18;
  if (!v59) {
    goto LABEL_61;
  }
  v47[1] = 0;
  uint64_t v28 = v57;
  uint64_t v29 = v58;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  if (!v56) {
    goto LABEL_61;
  }
  uint64_t v30 = v54;
  uint64_t v31 = v55;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  if (!v53) {
    goto LABEL_61;
  }
  uint64_t v32 = v51;
  uint64_t v33 = v52;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v27 > 0xFF)
  {
    char v50 = v26;
    *(_WORD *)a2 = v46;
    *(void *)(a2 + 8) = v28;
    *(void *)(a2 + 16) = v29;
    v47[0] = 0;
    v48[0] = 0;
    *(void *)(a2 + 24) = v30;
    v48[1] = 0;
    *(void *)(a2 + 32) = v31;
    v49[0] = 0;
    *(void *)(a2 + 40) = v32;
    v49[1] = 0;
    *(void *)(a2 + 48) = v33;
    *(unsigned char *)(a2 + 56) = v26;
    *(unsigned char *)(a2 + 64) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v23);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v34);
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v35);
  }
  else
  {
LABEL_61:
    while (1)
    {
      __break(1u);
LABEL_62:
      if (v26)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)result + 16))(result, v27, v26);
        unint64_t v23 = *(char **)a1;
        unint64_t v22 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v23 = 0;
      }
LABEL_43:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t result = *((void *)a1 + 3);
      if (!result) {
        break;
      }
      if (!v22) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v23);
      if (!*(void *)a1) {
        break;
      }
      unint64_t v26 = 0;
      uint64_t v27 = 0;
      if (!v10) {
        goto LABEL_19;
      }
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
  }
  if (v53) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v23);
  }
  if (v56) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v23);
  }
  if (v59) {
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v23);
  }
  return result;
}

void sub_1988617D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a20) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  }
  if (a26) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  }
  if (*(unsigned char *)(v26 - 56)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26 - 72, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 1);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 2));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::GrammarDetail,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v13);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  if (!*(void *)a1) {
    goto LABEL_15;
  }
  if (!v17 || !v15 || (uint64_t v7 = v13, v8 = v14, v13 = 0, v14 = 0, !v12))
  {
    __break(1u);
LABEL_15:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
    goto LABEL_6;
  }
  unsigned int v9 = v11;
  char v11 = 0;
  *(_OWORD *)a2 = v16;
  v10[0] = 0;
  v10[1] = 0;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v9;
  *(unsigned char *)(a2 + 40) = 1;
  _OWORD v10[2] = 0;
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
LABEL_6:
  if (v12)
  {
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v15) {
    return (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v6);
  }
  return result;
}

void sub_19886197C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebCore::CharacterRange>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CharacterRange,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a2 + 16);
  char v6 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 8));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, v4);
  IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WTF::OptionSet<WebKit::DocumentEditingContextRequest::Options>>(a1);
  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v17);
  IPC::Decoder::decode<WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, (uint64_t)&v14);
  uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v12);
  if (!*a1) {
    goto LABEL_16;
  }
  if (v4 <= 0xFFu
    || (v10[0] = v4, !v18)
    || (*(_OWORD *)&unsigned char v10[8] = v17, !v16)
    || (uint64_t v7 = v14, v8 = v15, v14 = 0, v15 = 0, !v13))
  {
    __break(1u);
LABEL_16:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_7;
  }
  unsigned int v9 = v12;
  void v11[2] = 0;
  char v12 = 0;
  *(_OWORD *)a2 = *(_OWORD *)v10;
  v11[0] = 0;
  v11[1] = 0;
  *(void *)(a2 + 16) = *(void *)&v10[16];
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v9;
  *(unsigned char *)(a2 + 48) = 1;
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v6);
LABEL_7:
  if (v13)
  {
    uint64_t result = v12;
    char v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v16) {
    return (WTF::StringImpl *)WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
  }
  return result;
}

void sub_198861BBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19) {
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198861C48(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)&v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  LOBYTE(v5) = *(unsigned char *)(a2 + 25);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v19 = v5;
    int v20 = 0;
    goto LABEL_25;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_29;
  }
  if (v9)
  {
    uint64_t v10 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a1);
    if (!v11) {
      goto LABEL_28;
    }
    uint64_t v12 = v10;
    int v13 = 0;
    uint64_t v2 = 1;
  }
  else
  {
    int v13 = 0;
    uint64_t v2 = 0;
    uint64_t v12 = 0;
  }
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v28);
    unsigned __int16 v14 = IPC::Decoder::decode<WTF::OptionSet<WebKit::DocumentEditingContextRequest::Options>>((uint64_t *)a1);
    __int16 v30 = 0;
    unint64_t result = (WTF::StringImpl *)IPC::Decoder::operator>><BOOL>(a1, &v30);
    int v17 = HIBYTE(v30);
    if (HIBYTE(v30))
    {
      char v18 = v30;
    }
    else
    {
      char v16 = *(WTF::StringImpl **)a1;
      unint64_t v5 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
      if (result)
      {
        int v27 = v17;
        if (v5) {
          unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v16);
        }
        char v18 = 0;
        int v17 = v27;
      }
      else
      {
        char v18 = 0;
      }
    }
    if (!*(void *)a1) {
      break;
    }
    if (!v13 && v29 && v14 > 0xFFu && v17)
    {
      unint64_t result = v28;
      if (v28) {
        *(_DWORD *)v28 += 2;
      }
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v12;
      *(void *)(a2 + 16) = v2;
      *(unsigned char *)(a2 + 24) = v18;
      *(unsigned char *)(a2 + 25) = v14;
      *(unsigned char *)(a2 + 32) = 1;
      goto LABEL_18;
    }
    __break(1u);
LABEL_24:
    unint64_t v19 = 0;
    int v20 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v21 = *((void *)a1 + 3);
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        int v20 = *(WTF::StringImpl **)a1;
        unint64_t v19 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        int v20 = 0;
      }
    }
LABEL_25:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
LABEL_28:
        uint64_t v6 = *(WTF::StringImpl **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_29:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23 && v5) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v23 + 16))(v23, v6);
    }
    unint64_t v24 = *(WTF::StringImpl **)a1;
    uint64_t v25 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26 && v25) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v24);
    }
    uint64_t v12 = 0;
    int v13 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (!v29) {
    return result;
  }
  unint64_t result = v28;
LABEL_18:
  uint64_t v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198861FA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v5 = *a2;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v5);
  int v5 = a2[1];
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v5);
  int v5 = a2[2];
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v5);
  int v5 = a2[3];
  return IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v5);
}

unint64_t IPC::ArgumentCoder<WebCore::LayoutRect,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::Decoder::decode<WebCore::LayoutPoint>(a1);
  char v6 = v5;
  unint64_t result = IPC::Decoder::decode<WebCore::LayoutPoint>(a1);
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

void IPC::ArgumentCoder<WebCore::BlobPart,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>(a1, (uint64_t)v6);
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, (uint64_t)v6);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v4);
    a2[48] = 1;
    if (v5 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v9, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
  if (v8)
  {
    if (v7 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v7])(v4, v6);
    }
  }
}

void sub_198862190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a14])(v23 - 17, &a9);
  }
  if (a23)
  {
    if (a21 != -1) {
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a21])(&a9, &a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 48)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198862238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 48))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 40);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned char *)(a2 + 8);
  char v6 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(a1, v4);
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(a1, (unsigned char *)(a2 + 976));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 1944));
  return IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 1952));
}

uint64_t IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_21;
  }
  int v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v42 = v4;
    uint64_t v43 = 0;
    goto LABEL_22;
  }
  unsigned int v8 = *v7;
  if (v8 >= 3) {
    goto LABEL_23;
  }
  for (unsigned int i = v8 | 0x100; ; unsigned int i = 0)
  {
    IPC::Decoder::decode<WebCore::MediaConstraints>(v2, (uint64_t)v75);
    IPC::Decoder::decode<WebCore::MediaConstraints>(v2, (uint64_t)v70);
    unint64_t v10 = v2[1];
    uint64_t v11 = *v2;
    unint64_t v12 = v2[2] - *v2;
    if (v10 <= v12)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v49 = v2[3];
      if (v49)
      {
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
          uint64_t v48 = *v2;
          uint64_t v47 = v2[1];
        }
        else
        {
          uint64_t v47 = 0;
          uint64_t v48 = 0;
        }
      }
      goto LABEL_26;
    }
    uint64_t v13 = (unsigned __int8 *)(v11 + v12);
    v2[2] = (uint64_t)(v13 + 1);
    if (!v11)
    {
      uint64_t v47 = v10;
      uint64_t v48 = 0;
LABEL_26:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v50 = v2[3];
      if (v50 && v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48, v47);
        unsigned int v14 = 0;
        uint64_t v11 = *v2;
        unint64_t v10 = v2[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
        unsigned int v14 = 0;
      }
      goto LABEL_28;
    }
    unsigned int v14 = *v13;
    if (v14 < 2)
    {
      int v15 = 0;
      char v16 = 1;
      goto LABEL_9;
    }
LABEL_28:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v51 = v2[3];
    if (v51 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v11);
    }
    char v16 = 0;
    int v15 = 1;
LABEL_9:
    char v17 = v14 ? v16 : 0;
    unint64_t v18 = IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>((IPC::Decoder *)v2);
    if (!*v2) {
      break;
    }
    if (i > 0xFF)
    {
      char v52 = i;
      if (v79)
      {
        unint64_t v20 = v18;
        char v21 = (char)v19;
        uint64_t v2 = (uint64_t *)&v52;
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v53, (uint64_t)v75);
        uint64_t v22 = v76;
        uint64_t v76 = 0;
        uint64_t v58 = v22;
        uint64_t v23 = v77;
        uint64_t v77 = 0;
        uint64_t v59 = v23;
        char v60 = v78;
        if (v74)
        {
          uint64_t v2 = &v58;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v61, (uint64_t)v70);
          uint64_t v24 = v71;
          uint64_t v71 = 0;
          uint64_t v66 = v24;
          uint64_t v25 = v72;
          uint64_t v72 = 0;
          uint64_t v67 = v25;
          char v68 = v73;
          if (!v15)
          {
            LOBYTE(v69) = v17;
            if (v21)
            {
              *((void *)&v69 + 1) = v20;
              *(unsigned char *)a2 = v52;
              WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a2 + 8, (uint64_t)v53);
              uint64_t v26 = v58;
              uint64_t v58 = 0;
              *(void *)(a2 + 952) = v26;
              uint64_t v27 = v59;
              uint64_t v59 = 0;
              *(void *)(a2 + 960) = v27;
              *(unsigned char *)(a2 + 968) = v60;
              WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a2 + 976, (uint64_t)v61);
              uint64_t v28 = v66;
              uint64_t v66 = 0;
              *(void *)(a2 + 1920) = v28;
              uint64_t v29 = v67;
              uint64_t v67 = 0;
              *(void *)(a2 + 1928) = v29;
              *(unsigned char *)(a2 + 1936) = v68;
              *(_OWORD *)(a2 + 1944) = v69;
              *(unsigned char *)(a2 + 1960) = 1;
              WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v30);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v31);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v32);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v33);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v34);
              WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v35);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57, v36);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v37);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v38);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v39);
              goto LABEL_19;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_21:
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v44 = v2[3];
    if (v44)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v43 = *v2;
        uint64_t v42 = v2[1];
      }
      else
      {
        uint64_t v42 = 0;
        uint64_t v43 = 0;
      }
    }
LABEL_22:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v45 = v2[3];
    if (v45)
    {
      if (v42)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43, v42);
        uint64_t v5 = *v2;
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_23:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v46 = v2[3];
    if (v46 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v5);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 1960) = 0;
LABEL_19:
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v70, v19);
  return std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v75, v40);
}

void sub_198862764(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x7B0], a2);
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xB80], v3);
  _Unwind_Resume(a1);
}

void sub_198862840()
{
}

uint64_t IPC::Decoder::decode<WebCore::MediaConstraints>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaConstraints,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 968))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988628B8(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebCore::MediaTrackConstraintSetMap,void>::encode(IPC::Encoder *a1, unsigned char *a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)a2);
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)(a2 + 56));
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)(a2 + 112));
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)(a2 + 168));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 224));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 312));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 400));
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 488);
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 512);
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 536);
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 560));
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 616));
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 672));
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 728));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 784));
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 872);
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 896);

  return IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 920);
}

unsigned char *IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>(unsigned char *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        uint64_t v22 = *a2;
        uint64_t v21 = a2[1];
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_19;
  }
  unsigned int v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v21 = v6;
    uint64_t v22 = 0;
LABEL_19:
    unint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v21);
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_20;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[48] = 0;
    goto LABEL_14;
  }
  unsigned __int16 v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
  uint64_t v11 = IPC::Decoder::decode<std::optional<int>>(a2);
  char v13 = v12;
  uint64_t v14 = IPC::Decoder::decode<std::optional<int>>(a2);
  char v16 = v15;
  uint64_t v17 = IPC::Decoder::decode<std::optional<int>>(a2);
  char v19 = v18;
  uint64_t result = (unsigned char *)IPC::Decoder::decode<std::optional<int>>(a2);
  if (*a2)
  {
    if (v10 <= 0xFFu)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (!(_BYTE)v10)
    {
      if (v13 && v16 && v19 && v20)
      {
        v3[8] = 0;
        *(void *)(v3 + 12) = v11;
        *(void *)(v3 + 20) = v14;
        *(void *)(v3 + 28) = v17;
        *((_DWORD *)v3 + 9) = result;
        v3[40] = BYTE4(result);
        *(void *)unint64_t v3 = &unk_1EE9B4688;
        v3[48] = 1;
LABEL_14:
        v3[56] = 1;
        return result;
      }
      goto LABEL_16;
    }
  }
LABEL_17:
  unint64_t v6 = a2[1];
LABEL_20:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v25 = a2[3];
  if (v25 && v6) {
    (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
  }
  *unint64_t v3 = 0;
  v3[56] = 0;
  uint64_t v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned char *)a2[3];
  if (result && v26)
  {
    uint64_t v27 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v27();
  }
  return result;
}

unsigned char *IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(unsigned char *result, IPC::Decoder *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_19;
  }
  unsigned int v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_19:
    unint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_20;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[80] = 0;
    goto LABEL_14;
  }
  unsigned __int16 v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
  IPC::Decoder::decode<std::optional<double>>(a2, &v28);
  IPC::Decoder::decode<std::optional<double>>(a2, &v26);
  IPC::Decoder::decode<std::optional<double>>(a2, &v24);
  uint64_t result = IPC::Decoder::decode<std::optional<double>>(a2, &v22);
  if (*(void *)a2)
  {
    if (v10 <= 0xFFu)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (v10 == 1)
    {
      if (v29 && v27 && v25 && v23)
      {
        *(void *)uint64_t v21 = *((void *)&v24 + 1);
        *(_OWORD *)&v21[8] = v22;
        long long v18 = v28;
        long long v19 = v26;
        *(_OWORD *)char v20 = v24;
        *(void *)&v20[9] = *(void *)&v21[1];
        v3[8] = 1;
        *((_OWORD *)v3 + 1) = v18;
        *((_OWORD *)v3 + 2) = v19;
        *((_OWORD *)v3 + 3) = *(_OWORD *)v20;
        *(_OWORD *)(v3 + 57) = *(_OWORD *)&v21[1];
        *(void *)unint64_t v3 = &unk_1EE9B4700;
        v3[80] = 1;
LABEL_14:
        v3[88] = 1;
        return result;
      }
      goto LABEL_16;
    }
  }
LABEL_17:
  unint64_t v6 = *((void *)a2 + 1);
LABEL_20:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v15 = *((void *)a2 + 3);
  if (v15 && v6) {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
  }
  *unint64_t v3 = 0;
  v3[88] = 0;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (unsigned char *)*((void *)a2 + 3);
  if (result && v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v17();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>(uint64_t result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *(void *)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_17;
  }
  unsigned int v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_17:
    unint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_18;
  }
  if (!v9)
  {
    *(unsigned char *)uint64_t result = 0;
    *(unsigned char *)(result + 16) = 0;
    goto LABEL_12;
  }
  unsigned __int16 v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
  int v11 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  if (*(void *)a2)
  {
    if (v10 <= 0xFFu)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if (v10 == 2)
    {
      if ((v11 & 0xFF0000) != 0 && (result & 0xFF0000) != 0)
      {
        *(unsigned char *)(v3 + 8) = 2;
        *(void *)uint64_t v3 = &unk_1EE9B4750;
        *(_DWORD *)(v3 + 9) = (unsigned __int16)v11 | ((unsigned __int16)result << 16);
        *(unsigned char *)(v3 + 16) = 1;
LABEL_12:
        *(unsigned char *)(v3 + 24) = 1;
        return result;
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  unint64_t v6 = *((void *)a2 + 1);
LABEL_18:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v16 = *((void *)a2 + 3);
  if (v16 && v6) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  *(unsigned char *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 24) = 0;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v17)
  {
    long long v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
LABEL_23:
    unint64_t v25 = 0;
    long long v26 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v27 = *((void *)a2 + 3);
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        long long v26 = *(char **)a2;
        unint64_t v25 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v25 = 0;
        long long v26 = 0;
      }
    }
    goto LABEL_24;
  }
  unsigned int v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v25 = v6;
    long long v26 = 0;
LABEL_24:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v28 = *((void *)a2 + 3);
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        uint64_t v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_25;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (!v9)
    {
      LOBYTE(v33) = 0;
      char v39 = 0;
      std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((unsigned char *)a1, (uint64_t)&v33);
      char v19 = 1;
LABEL_19:
      *(unsigned char *)(a1 + 56) = v19;
      uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v13);
      goto LABEL_20;
    }
    unsigned __int16 v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v11, (uint64_t)&v49);
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v12, (uint64_t)&v46);
    if (*(void *)a2)
    {
      if (v10 <= 0xFFu)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      if (v10 == 3)
      {
        uint64_t v40 = &unk_1EE9B46D8;
        char v41 = 3;
        if (v51 && v48)
        {
          char v43 = 3;
          uint64_t v14 = v49;
          uint64_t v49 = 0;
          uint64_t v15 = v46;
          uint64_t v46 = 0;
          char v34 = 3;
          uint64_t v33 = &unk_1EE9B53F8;
          uint64_t v35 = v14;
          v44[1] = 0;
          uint64_t v16 = v50;
          uint64_t v50 = 0;
          uint64_t v36 = v16;
          v45[0] = 0;
          uint64_t v37 = v15;
          v45[1] = 0;
          uint64_t v17 = v47;
          uint64_t v47 = 0;
          uint64_t v38 = v17;
          char v39 = 1;
          v44[0] = 0;
          uint64_t v42 = &unk_1EE9B53F8;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v13);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v18);
LABEL_13:
          if (v48) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v13);
          }
          if (v51) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v13);
          }
          if (v39
            || (uint64_t v13 = *(char **)a2,
                uint64_t v31 = *((void *)a2 + 1),
                *(void *)a2 = 0,
                *((void *)a2 + 1) = 0,
                (uint64_t v32 = *((void *)a2 + 3)) != 0)
            && v31
            && ((*(void (**)(uint64_t, char *))(*(void *)v32 + 16))(v32, v13), v39))
          {
            *(unsigned char *)(a1 + 8) = v34;
            *(void *)a1 = &unk_1EE9B53F8;
            uint64_t v20 = v35;
            uint64_t v35 = 0;
            *(void *)(a1 + 16) = v20;
            uint64_t v21 = v36;
            uint64_t v36 = 0;
            *(void *)(a1 + 24) = v21;
            uint64_t v22 = v37;
            uint64_t v37 = 0;
            *(void *)(a1 + 32) = v22;
            uint64_t v23 = v38;
            uint64_t v38 = 0;
            *(void *)(a1 + 40) = v23;
            char v19 = 1;
            *(unsigned char *)(a1 + 48) = 1;
          }
          else
          {
            char v19 = 0;
            *(unsigned char *)a1 = 0;
          }
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    LOBYTE(v33) = 0;
    char v39 = 0;
    goto LABEL_13;
  }
LABEL_25:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v5);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
LABEL_20:
  if (!*(unsigned char *)(a1 + 56))
  {
    char v29 = *(char **)a2;
    uint64_t v30 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v30) {
        return (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v29);
      }
    }
  }
  return result;
}

void sub_198863600(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);

  return IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::encode(a1, (uint64_t)(a2 + 8));
}

unsigned char *IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unsigned __int8 *)a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6) {
    goto LABEL_53;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    uint64_t v43 = (uint64_t)v4;
    uint64_t v44 = 0;
    goto LABEL_54;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v47 = a1[3];
    if (!v47 || !v4)
    {
      char v12 = 0;
      uint64_t v48 = 0;
      uint64_t v5 = 0;
      int v10 = 1;
LABEL_58:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v49 = a1[3];
      if (v49 && v48)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v5, v48);
        unsigned int v16 = 0;
        uint64_t v5 = *a1;
        uint64_t v4 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_60;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v5);
    char v11 = 0;
    uint64_t v5 = *a1;
    uint64_t v4 = (unsigned __int8 *)a1[1];
    int v10 = 1;
    uint64_t v8 = a1[2];
LABEL_5:
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    unint64_t v13 = v8 - v5;
    if ((unint64_t)v4 <= v13)
    {
      uint64_t v48 = 0;
      uint64_t v53 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v53 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
        uint64_t v5 = *a1;
        uint64_t v48 = a1[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_58;
    }
    uint64_t v14 = (unsigned __int8 *)(v5 + v13);
    uint64_t v15 = v5 + v13 + 1;
    a1[2] = v15;
    if (!v5)
    {
      uint64_t v48 = (uint64_t)v4;
      goto LABEL_58;
    }
    unsigned int v16 = *v14;
    if (v16 < 2)
    {
      int v17 = 0;
      char v18 = 1;
      goto LABEL_12;
    }
LABEL_60:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v50 = a1[3];
    if (!v50 || !v4)
    {
      char v19 = 0;
      uint64_t v21 = 0;
      uint64_t v5 = 0;
      int v17 = 1;
      goto LABEL_62;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v5);
    char v18 = 0;
    uint64_t v5 = *a1;
    uint64_t v4 = (unsigned __int8 *)a1[1];
    int v17 = 1;
    uint64_t v15 = a1[2];
LABEL_12:
    if (v16) {
      char v19 = v18;
    }
    else {
      char v19 = 0;
    }
    unint64_t v20 = v15 - v5;
    if ((unint64_t)v4 <= v20)
    {
      uint64_t v21 = 0;
      uint64_t v54 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v54 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
        uint64_t v5 = *a1;
        uint64_t v21 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_62;
    }
    uint64_t v21 = (unsigned __int8 *)(v5 + v20);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v5)
    {
      uint64_t v21 = v4;
LABEL_62:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v51 = a1[3];
      if (v51)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v51 + 16))(v51, v5, v21);
          LODWORD(v21) = 0;
          uint64_t v5 = *a1;
          uint64_t v4 = (unsigned __int8 *)a1[1];
        }
        else
        {
          uint64_t v4 = 0;
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        LODWORD(v21) = 0;
      }
      goto LABEL_64;
    }
    LODWORD(v21) = *v21;
    if (v21 < 2)
    {
      int v22 = 0;
      char v23 = 1;
      goto LABEL_19;
    }
LABEL_64:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v52 = a1[3];
    if (v52)
    {
      int v55 = (int)v21;
      if (v4) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 16))(v52, v5);
      }
      char v23 = 0;
      int v22 = 1;
      LODWORD(v21) = v55;
    }
    else
    {
      char v23 = 0;
      int v22 = 1;
    }
LABEL_19:
    if (v21) {
      char v24 = v23;
    }
    else {
      char v24 = 0;
    }
    IPC::Decoder::decode<WebCore::MediaDecodingConfiguration>(a1, (uint64_t)&v72);
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 168) = 0;
      return std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v72, v25);
    }
    if (!v10 && !v17 && !v22 && v87) {
      break;
    }
    __break(1u);
LABEL_53:
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v45 = a1[3];
    if (v45)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
        uint64_t v44 = *a1;
        uint64_t v43 = a1[1];
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
      }
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v46 = a1[3];
    if (v46 && v43)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44, v43);
      unsigned int v9 = 0;
      uint64_t v5 = *a1;
      uint64_t v4 = (unsigned __int8 *)a1[1];
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
  }
  LOBYTE(v56) = v12;
  HIBYTE(v56) = v19;
  LOBYTE(v57) = 0;
  char v60 = 0;
  int v31 = v75;
  if (v75)
  {
    uint64_t v32 = v72;
    uint64_t v72 = 0;
    uint64_t v57 = v32;
    long long v58 = v73;
    long long v59 = v74;
    uint64_t v26 = 1;
    char v60 = 1;
  }
  LOBYTE(v61) = 0;
  char v64 = 0;
  int v33 = v79;
  if (v79)
  {
    uint64_t v27 = v76;
    uint64_t v26 = v77;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v61 = v27;
    uint64_t v62 = v26;
    v63[0] = v78[0];
    *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v78 + 10);
    char v64 = 1;
  }
  LOBYTE(v65) = 0;
  unsigned __int8 v67 = 0;
  int v34 = v82;
  if (v82)
  {
    uint64_t v65 = v80;
    LODWORD(v27) = v81;
    unsigned int v28 = HIDWORD(v81);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    unint64_t v66 = __PAIR64__(v28, v27);
    int v35 = 1;
    unsigned __int8 v67 = 1;
  }
  else
  {
    int v35 = 0;
  }
  LOBYTE(v68) = 0;
  char v70 = 0;
  int v36 = v85;
  if (v85)
  {
    uint64_t v68 = v83;
    unsigned int v29 = v84;
    unsigned int v30 = HIDWORD(v84);
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    unint64_t v69 = __PAIR64__(v30, v29);
    char v70 = 1;
  }
  __int16 v37 = v86;
  __int16 v71 = v86;
  *(_WORD *)a2 = v56;
  *(unsigned char *)(a2 + 2) = v24;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v31)
  {
    uint64_t v38 = v57;
    uint64_t v57 = 0;
    *(void *)(a2 + 8) = v38;
    *(_OWORD *)(a2 + 16) = v58;
    *(_OWORD *)(a2 + 32) = v59;
    *(unsigned char *)(a2 + 48) = 1;
  }
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  if (v33)
  {
    uint64_t v39 = v61;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    *(void *)(a2 + 56) = v39;
    *(void *)(a2 + 64) = v26;
    *(_OWORD *)(a2 + 72) = v63[0];
    *(_OWORD *)(a2 + 82) = *(_OWORD *)((char *)v63 + 10);
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  if (v34)
  {
    uint64_t v40 = v65;
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    *(void *)(a2 + 112) = v40;
    *(_DWORD *)(a2 + 120) = v27;
    *(_DWORD *)(a2 + 124) = v28;
    *(unsigned char *)(a2 + 128) = 1;
  }
  *(unsigned char *)(a2 + 136) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  if (v36)
  {
    uint64_t v41 = v68;
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    *(void *)(a2 + 136) = v41;
    *(_DWORD *)(a2 + 144) = v29;
    *(_DWORD *)(a2 + 148) = v30;
    *(unsigned char *)(a2 + 152) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v25);
    int v35 = v67;
  }
  *(_WORD *)(a2 + 160) = v37;
  *(unsigned char *)(a2 + 168) = 1;
  if (v35) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v25);
  }
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, (WTF::StringImpl *)v25);
  if (v60 && v57)
  {
    if (*(_DWORD *)v57 == 2) {
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v25);
    }
    else {
      *(_DWORD *)v57 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v72, v25);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaDecodingConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::decode((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 160))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198863D48(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::MediaCapabilitiesEncodingInfo,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);

  return IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::encode(a1, (uint64_t)(a2 + 8));
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaEncodingConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::decode((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 160))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198863E24(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::FormDataElement,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>>(v6, a2);
  if (*(void *)a2)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, (uint64_t)v6);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v4);
    a1[48] = 1;
    if (v5 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9B4768[v5])(&v9, v4);
    }
  }
  else
  {
    *a1 = 0;
    a1[48] = 0;
  }
  if (v8)
  {
    if (v7 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9B4768[v7])(v4, v6);
    }
  }
}

void sub_198863EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9B4768[a14])(v23 - 17, &a9);
  }
  if (a23)
  {
    if (a21 != -1) {
      ((void (*)(uint64_t *, char *))off_1EE9B4768[a21])(&a9, &a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>>(unsigned char *a1, IPC::Decoder *a2)
{
  if (!a1[48]) {
    IPC::Decoder::markInvalid(a2);
  }
}

void sub_198863FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 48))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 40);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B4768[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t v4 = (WebCore::ResourceResponseBase *)(a2 + 208);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, v4);

  return IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(a1, (uint64_t)(a2 + 464));
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  __int16 v27 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v27);
  int v4 = HIBYTE(v27);
  if (!HIBYTE(v27)) {
    goto LABEL_23;
  }
  for (char i = v27; ; char i = 0)
  {
    IPC::Decoder::decode<WebCore::ResourceRequest>(v2, (uint64_t)v90);
    IPC::Decoder::decode<WebCore::ResourceResponse>(v2, &v68);
    IPC::Decoder::decode<WebCore::NetworkLoadMetrics>((uint64_t *)v2, (uint64_t)v61);
    if (!*(void *)v2)
    {
      *a2 = 0;
      a2[592] = 0;
      goto LABEL_21;
    }
    if (v4)
    {
      LOBYTE(v27) = i;
      if (v92)
      {
        uint64_t v2 = (IPC::Decoder *)v28;
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v28, (uint64_t)v90);
        int v7 = v91;
        int v91 = 0;
        CFTypeRef v29 = v7;
        if (v89)
        {
          long long v31 = v69;
          long long v32 = v70;
          long long v8 = v73;
          long long v73 = 0u;
          long long v9 = v74;
          long long v74 = 0u;
          LODWORD(v69) = v69 & 0xFFFFFFFE;
          uint64_t v10 = v68;
          uint64_t v11 = v71;
          uint64_t v68 = 0;
          uint64_t v71 = 0;
          uint64_t v30 = v10;
          uint64_t v33 = v11;
          uint64_t v34 = v72;
          long long v35 = v8;
          long long v36 = v9;
          *(void *)&long long v8 = v75;
          uint64_t v75 = 0;
          uint64_t v37 = v8;
          uint64_t v12 = v76;
          uint64_t v76 = 0;
          uint64_t v38 = v12;
          *(void *)&long long v8 = v77;
          uint64_t v77 = 0;
          uint64_t v39 = v8;
          uint64_t v13 = v78;
          uint64_t v78 = 0;
          uint64_t v40 = v13;
          LOBYTE(v41) = 0;
          char v42 = 0;
          if (v80)
          {
            uint64_t v23 = v79;
            uint64_t v79 = 0;
            uint64_t v41 = v23;
            char v42 = 1;
          }
          long long v46 = v84;
          long long v47 = v85;
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v86;
          *(_DWORD *)&void v48[15] = *(_DWORD *)&v86[15];
          long long v43 = v81;
          long long v44 = v82;
          long long v45 = v83;
          uint64_t v14 = v87;
          char v87 = 0;
          CFTypeRef cf = v14;
          char v50 = v88;
          if (v67) {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_23:
    uint64_t v24 = *(void *)v2;
    uint64_t v25 = *((void *)v2 + 1);
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v26 = *((void *)v2 + 3);
    if (v26 && v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
    }
  }
  uint64_t v56 = v62;
  uint64_t v57 = v63;
  uint64_t v15 = v66;
  uint64_t v59 = v65;
  long long v53 = v61[2];
  long long v54 = v61[3];
  long long v55 = v61[4];
  long long v51 = v61[0];
  long long v52 = v61[1];
  long long v58 = v64;
  uint64_t v63 = 0;
  unint64_t v66 = 0;
  char v60 = v15;
  WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)a2, (uint64_t)&v27);
  a2[592] = 1;
  int v17 = v60;
  char v60 = 0;
  if (v17) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v17);
  }
  char v18 = v57;
  uint64_t v57 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v30, v16);
  CFTypeRef v20 = v29;
  CFTypeRef v29 = 0;
  if (v20) {
    CFRelease(v20);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v28);
LABEL_21:
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v6);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v68, v21);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v90);
}

void sub_198864350(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  long long v69 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)STACK[0x248];
  STACK[0x248] = 0;
  if (v69) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v69);
  }
  long long v70 = (WTF::StringImpl *)STACK[0x228];
  STACK[0x228] = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2) {
      WTF::StringImpl::destroy(v70, a2);
    }
    else {
      *(_DWORD *)v70 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v66, a2);
  if (a34) {
    CFRelease(a34);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v65);
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x250], v71);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&STACK[0x2D8], v72);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)(v67 - 256));
  _Unwind_Resume(a1);
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::Decoder::decode<WebCore::NetworkLoadMetrics>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 128)) {
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198864434(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::ContentType,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ContentType,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v14);
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v11 = *((void *)a1 + 3);
    if (v11)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t v10 = *(WTF::StringImpl **)a1;
        uint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
LABEL_13:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  long long v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    uint64_t v9 = v5;
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_14;
  }
  uint64_t v10 = (WTF::StringImpl *)v15;
  if (v15)
  {
    unint64_t result = (WTF::StringImpl *)WebCore::ContentType::ContentType((WebCore::ContentType *)&v12, (const WTF::String *)&v14);
    *(void *)a2 = v12;
    *(unsigned char *)(a2 + 8) = v13;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_20:
      if (v9)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v10, v9);
        uint64_t v6 = *(WTF::StringImpl **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
LABEL_14:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
      if (!result) {
        break;
      }
      if (!v5) {
        break;
      }
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v6);
      if (!*(void *)a1) {
        break;
      }
      uint64_t v9 = v15;
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (v15)
  {
    unint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198864674(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 40);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 56);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 72);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 88));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 96));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 104));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 112));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 120));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 121));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 122));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 123));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 124));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = (unint64_t *)a1;
  IPC::Decoder::decode<WTF::AtomString>(a1, &v314);
  IPC::Decoder::decode<WebCore::IntRect>(v2, (uint64_t)&v312);
  IPC::Decoder::decode<WTF::AtomString>((IPC::Decoder *)v2, &v310);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v308);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v4, (uint64_t)&v305);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v5, (uint64_t)&v302);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v6, (uint64_t)&v299);
  unint64_t v12 = v2[1];
  char v13 = (char *)*v2;
  unint64_t v14 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
  if (v12 < v14 || v12 - v14 <= 7) {
    goto LABEL_89;
  }
  unsigned __int8 v15 = &v13[v14];
  v2[2] = (unint64_t)(v15 + 8);
  if (!v13)
  {
    unint64_t v18 = v12;
    unint64_t v75 = 0;
    goto LABEL_90;
  }
  int v16 = 0;
  uint64_t v17 = *(void *)v15;
  unint64_t v18 = (unint64_t)v13;
  while (1)
  {
    unint64_t v19 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v13;
    if (v12 < v19 || v12 - v19 <= 7)
    {
      unint64_t v18 = 0;
      unint64_t v78 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v79 = v2[3];
      if (v79)
      {
        uint64_t v178 = v17;
        int v179 = v16;
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v79 + 16))(v79);
          unint64_t v78 = *v2;
          unint64_t v18 = v2[1];
        }
        else
        {
          unint64_t v18 = 0;
          unint64_t v78 = 0;
        }
        int v16 = v179;
        uint64_t v17 = v178;
      }
    }
    else
    {
      CFTypeRef v20 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (unint64_t)(v20 + 1);
      if (v13)
      {
        int v21 = 0;
        uint64_t v22 = *v20;
        goto LABEL_9;
      }
      unint64_t v18 = v12;
      unint64_t v78 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v80 = v2[3];
    if (v80)
    {
      uint64_t v145 = v17;
      int v146 = v16;
      if (v18)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v80 + 16))(v80, v78, v18);
        uint64_t v22 = 0;
        unint64_t v18 = *v2;
        unint64_t v12 = v2[1];
        int v21 = 1;
        char v13 = (char *)*v2;
      }
      else
      {
        unint64_t v12 = 0;
        char v13 = 0;
        uint64_t v22 = 0;
        int v21 = 1;
      }
      int v16 = v146;
      uint64_t v17 = v145;
    }
    else
    {
      unint64_t v18 = 0;
      unint64_t v12 = 0;
      char v13 = 0;
      uint64_t v22 = 0;
      int v21 = 1;
    }
LABEL_9:
    unint64_t v23 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v13;
    if (v12 < v23 || v12 - v23 <= 7)
    {
      unint64_t v18 = 0;
      unint64_t v81 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v82 = v2[3];
      if (v82)
      {
        uint64_t v180 = v17;
        int v181 = v21;
        uint64_t v182 = v22;
        int v183 = v16;
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v82 + 16))(v82);
          unint64_t v81 = *v2;
          unint64_t v18 = v2[1];
        }
        else
        {
          unint64_t v18 = 0;
          unint64_t v81 = 0;
        }
        int v16 = v183;
        uint64_t v22 = v182;
        int v21 = v181;
        uint64_t v17 = v180;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (unint64_t)(v24 + 1);
      if (v13)
      {
        uint64_t v8 = 0;
        uint64_t v7 = *v24;
        goto LABEL_13;
      }
      unint64_t v18 = v12;
      unint64_t v81 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v83 = v2[3];
    if (v83)
    {
      uint64_t v147 = v17;
      int v148 = v21;
      uint64_t v149 = v22;
      int v150 = v16;
      if (v18)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v83 + 16))(v83, v81, v18);
        uint64_t v7 = 0;
        unint64_t v18 = *v2;
        unint64_t v12 = v2[1];
        uint64_t v8 = 1;
        char v13 = (char *)*v2;
      }
      else
      {
        unint64_t v12 = 0;
        char v13 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = 1;
      }
      int v16 = v150;
      uint64_t v22 = v149;
      int v21 = v148;
      uint64_t v17 = v147;
    }
    else
    {
      unint64_t v18 = 0;
      unint64_t v12 = 0;
      char v13 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 1;
    }
LABEL_13:
    unint64_t v25 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v13;
    if (v12 < v25 || v12 - v25 <= 7)
    {
      unint64_t v18 = 0;
      unint64_t v84 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v85 = v2[3];
      if (v85)
      {
        uint64_t v184 = v17;
        uint64_t v185 = v8;
        uint64_t v186 = v7;
        int v187 = v21;
        uint64_t v188 = v22;
        int v189 = v16;
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v85 + 16))(v85);
          unint64_t v84 = *v2;
          unint64_t v18 = v2[1];
        }
        else
        {
          unint64_t v18 = 0;
          unint64_t v84 = 0;
        }
        int v16 = v189;
        uint64_t v22 = v188;
        int v21 = v187;
        uint64_t v7 = v186;
        uint64_t v8 = v185;
        uint64_t v17 = v184;
      }
    }
    else
    {
      uint64_t v26 = (void *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      __int16 v27 = (char *)(v26 + 1);
      v2[2] = (unint64_t)(v26 + 1);
      if (v13)
      {
        uint64_t v10 = 0;
        uint64_t v9 = *v26;
        goto LABEL_17;
      }
      unint64_t v18 = v12;
      unint64_t v84 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v86 = v2[3];
    if (!v86)
    {
      uint64_t v9 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      uint64_t v10 = 1;
      goto LABEL_102;
    }
    uint64_t v151 = v17;
    uint64_t v152 = v8;
    uint64_t v153 = v7;
    int v154 = v21;
    uint64_t v155 = v22;
    int v156 = v16;
    if (!v18)
    {
      uint64_t v9 = 0;
      char v13 = 0;
      uint64_t v10 = 1;
LABEL_102:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v87 = v2[3];
      if (v87)
      {
        uint64_t v290 = v17;
        uint64_t v171 = v10;
        uint64_t v172 = v9;
        uint64_t v173 = v8;
        uint64_t v174 = v7;
        int v175 = v21;
        uint64_t v176 = v22;
        int v177 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v87 + 16))(v87, v13, v18);
          unsigned int v31 = 0;
          unint64_t v18 = *v2;
          unint64_t v12 = v2[1];
        }
        else
        {
          unint64_t v12 = 0;
          unsigned int v31 = 0;
        }
        int v16 = v177;
        uint64_t v22 = v176;
        int v21 = v175;
        uint64_t v7 = v174;
        uint64_t v8 = v173;
        uint64_t v9 = v172;
        uint64_t v10 = v171;
        uint64_t v17 = v290;
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v18 = 0;
        unsigned int v31 = 0;
      }
      goto LABEL_104;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v86 + 16))(v86, v84, v18);
    uint64_t v9 = 0;
    char v13 = (char *)*v2;
    unint64_t v12 = v2[1];
    __int16 v27 = (char *)v2[2];
    uint64_t v10 = 1;
    unint64_t v18 = *v2;
    int v16 = v156;
    uint64_t v22 = v155;
    int v21 = v154;
    uint64_t v7 = v153;
    uint64_t v8 = v152;
    uint64_t v17 = v151;
LABEL_17:
    unint64_t v28 = v27 - v13;
    if (v12 <= v28)
    {
      uint64_t v190 = v17;
      uint64_t v191 = v10;
      uint64_t v192 = v9;
      uint64_t v193 = v8;
      uint64_t v194 = v7;
      int v195 = v21;
      uint64_t v196 = v22;
      int v197 = v16;
      unint64_t v18 = 0;
      unint64_t v198 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v198 && v12)
      {
        (*(void (**)(unint64_t))(*(void *)v198 + 16))(v198);
        char v13 = (char *)*v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        char v13 = 0;
      }
      int v16 = v197;
      uint64_t v22 = v196;
      int v21 = v195;
      uint64_t v7 = v194;
      uint64_t v8 = v193;
      uint64_t v9 = v192;
      uint64_t v10 = v191;
      uint64_t v17 = v190;
      goto LABEL_102;
    }
    CFTypeRef v29 = &v13[v28];
    uint64_t v30 = (uint64_t)&v13[v28 + 1];
    v2[2] = v30;
    if (!v13)
    {
      unint64_t v18 = v12;
      goto LABEL_102;
    }
    unsigned int v31 = *v29;
    if (v31 < 2)
    {
      uint64_t v11 = 0;
      char v32 = 1;
      goto LABEL_21;
    }
LABEL_104:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v88 = v2[3];
    if (!v88)
    {
      char v33 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      uint64_t v11 = 1;
      goto LABEL_106;
    }
    uint64_t v286 = v17;
    uint64_t v132 = v10;
    uint64_t v248 = v9;
    uint64_t v133 = v8;
    uint64_t v134 = v7;
    int v135 = v21;
    uint64_t v136 = v22;
    int v137 = v16;
    if (!v12)
    {
      char v33 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      uint64_t v11 = 1;
      goto LABEL_177;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v88 + 16))(v88, v18);
    char v32 = 0;
    char v13 = (char *)*v2;
    unint64_t v12 = v2[1];
    uint64_t v30 = v2[2];
    uint64_t v11 = 1;
    unint64_t v18 = *v2;
    int v16 = v137;
    uint64_t v22 = v136;
    int v21 = v135;
    uint64_t v7 = v134;
    uint64_t v8 = v133;
    uint64_t v9 = v248;
    uint64_t v10 = v132;
    uint64_t v17 = v286;
LABEL_21:
    if (v31) {
      char v33 = v32;
    }
    else {
      char v33 = 0;
    }
    unint64_t v34 = v30 - (void)v13;
    if (v12 <= v34)
    {
      uint64_t v286 = v17;
      uint64_t v199 = v11;
      uint64_t v200 = v10;
      uint64_t v201 = v9;
      uint64_t v202 = v8;
      uint64_t v203 = v7;
      int v204 = v21;
      uint64_t v205 = v22;
      int v206 = v16;
      unint64_t v18 = 0;
      unint64_t v207 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v207 && v12)
      {
        (*(void (**)(unint64_t))(*(void *)v207 + 16))(v207);
        char v13 = (char *)*v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        char v13 = 0;
      }
      int v16 = v206;
      uint64_t v22 = v205;
      int v21 = v204;
      uint64_t v7 = v203;
      uint64_t v8 = v202;
      uint64_t v9 = v201;
      uint64_t v10 = v200;
      uint64_t v11 = v199;
LABEL_177:
      uint64_t v17 = v286;
LABEL_106:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v89 = v2[3];
      if (v89)
      {
        uint64_t v289 = v17;
        unsigned int v259 = v11;
        uint64_t v164 = v10;
        uint64_t v165 = v9;
        uint64_t v166 = v8;
        uint64_t v167 = v7;
        int v168 = v21;
        uint64_t v169 = v22;
        int v170 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v89 + 16))(v89, v13, v18);
          unsigned int v37 = 0;
          unint64_t v18 = *v2;
          unint64_t v12 = v2[1];
        }
        else
        {
          unint64_t v12 = 0;
          unsigned int v37 = 0;
        }
        int v16 = v170;
        uint64_t v22 = v169;
        int v21 = v168;
        uint64_t v7 = v167;
        uint64_t v8 = v166;
        uint64_t v9 = v165;
        uint64_t v10 = v164;
        uint64_t v11 = v259;
        uint64_t v17 = v289;
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v18 = 0;
        unsigned int v37 = 0;
      }
      goto LABEL_108;
    }
    long long v35 = &v13[v34];
    uint64_t v36 = (uint64_t)&v13[v34 + 1];
    v2[2] = v36;
    if (!v13)
    {
      unint64_t v18 = v12;
      goto LABEL_106;
    }
    unsigned int v37 = *v35;
    if (v37 < 2)
    {
      int v38 = 0;
      char v39 = 1;
      goto LABEL_28;
    }
LABEL_108:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v90 = v2[3];
    if (!v90)
    {
      char v40 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      int v38 = 1;
      goto LABEL_110;
    }
    uint64_t v284 = v17;
    unsigned int v255 = v11;
    uint64_t v117 = v10;
    uint64_t v118 = v9;
    uint64_t v119 = v8;
    uint64_t v120 = v7;
    int v121 = v21;
    uint64_t v122 = v22;
    int v123 = v16;
    if (!v12)
    {
      char v40 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      int v38 = 1;
      uint64_t v11 = v11;
      goto LABEL_182;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v90 + 16))(v90, v18);
    char v39 = 0;
    char v13 = (char *)*v2;
    unint64_t v12 = v2[1];
    uint64_t v36 = v2[2];
    unint64_t v18 = *v2;
    int v16 = v123;
    uint64_t v22 = v122;
    int v21 = v121;
    int v38 = 1;
    uint64_t v7 = v120;
    uint64_t v8 = v119;
    uint64_t v9 = v118;
    uint64_t v10 = v117;
    uint64_t v11 = v255;
    uint64_t v17 = v284;
LABEL_28:
    if (v37) {
      char v40 = v39;
    }
    else {
      char v40 = 0;
    }
    unint64_t v41 = v36 - (void)v13;
    if (v12 <= v41)
    {
      uint64_t v284 = v17;
      int v266 = v38;
      char v276 = v40;
      uint64_t v208 = v11;
      uint64_t v209 = v10;
      uint64_t v210 = v9;
      uint64_t v211 = v8;
      uint64_t v212 = v7;
      int v213 = v21;
      uint64_t v214 = v22;
      int v215 = v16;
      unint64_t v18 = 0;
      unint64_t v216 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v216 && v12)
      {
        (*(void (**)(unint64_t))(*(void *)v216 + 16))(v216);
        char v13 = (char *)*v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        char v13 = 0;
      }
      int v16 = v215;
      uint64_t v22 = v214;
      int v21 = v213;
      uint64_t v7 = v212;
      uint64_t v8 = v211;
      uint64_t v9 = v210;
      uint64_t v10 = v209;
      uint64_t v11 = v208;
      int v38 = v266;
      char v40 = v276;
LABEL_182:
      uint64_t v17 = v284;
LABEL_110:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v91 = v2[3];
      if (v91)
      {
        uint64_t v288 = v17;
        int v265 = v38;
        char v275 = v40;
        unsigned int v258 = v11;
        uint64_t v157 = v10;
        uint64_t v158 = v9;
        uint64_t v159 = v8;
        uint64_t v160 = v7;
        int v161 = v21;
        uint64_t v162 = v22;
        int v163 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v91 + 16))(v91, v13, v18);
          unsigned int v44 = 0;
          unint64_t v18 = *v2;
          unint64_t v12 = v2[1];
        }
        else
        {
          unint64_t v12 = 0;
          unsigned int v44 = 0;
        }
        int v16 = v163;
        uint64_t v22 = v162;
        int v21 = v161;
        uint64_t v7 = v160;
        uint64_t v8 = v159;
        uint64_t v9 = v158;
        uint64_t v10 = v157;
        uint64_t v11 = v258;
        int v38 = v265;
        char v40 = v275;
        uint64_t v17 = v288;
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v18 = 0;
        unsigned int v44 = 0;
      }
      goto LABEL_112;
    }
    char v42 = &v13[v41];
    uint64_t v43 = (uint64_t)&v13[v41 + 1];
    v2[2] = v43;
    if (!v13)
    {
      unint64_t v18 = v12;
      goto LABEL_110;
    }
    unsigned int v44 = *v42;
    if (v44 < 2)
    {
      int v45 = 0;
      char v46 = 1;
      goto LABEL_35;
    }
LABEL_112:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v92 = v2[3];
    if (!v92)
    {
      char v47 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      int v45 = 1;
      goto LABEL_114;
    }
    uint64_t v283 = v17;
    char v272 = v40;
    unsigned int v254 = v11;
    uint64_t v111 = v10;
    uint64_t v246 = v9;
    uint64_t v112 = v8;
    uint64_t v113 = v7;
    int v114 = v21;
    uint64_t v115 = v22;
    int v116 = v16;
    if (!v12)
    {
      unint64_t v18 = 0;
      char v13 = 0;
      int v45 = 1;
      char v47 = 0;
      uint64_t v11 = v11;
      goto LABEL_187;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v92 + 16))(v92, v18);
    char v46 = 0;
    char v13 = (char *)*v2;
    unint64_t v12 = v2[1];
    uint64_t v43 = v2[2];
    unint64_t v18 = *v2;
    int v16 = v116;
    uint64_t v22 = v115;
    int v21 = v114;
    int v45 = 1;
    uint64_t v7 = v113;
    uint64_t v8 = v112;
    uint64_t v9 = v246;
    uint64_t v10 = v111;
    uint64_t v11 = v254;
    char v40 = v272;
    uint64_t v17 = v283;
LABEL_35:
    if (v44) {
      char v47 = v46;
    }
    else {
      char v47 = 0;
    }
    unint64_t v48 = v43 - (void)v13;
    if (v12 <= v48)
    {
      uint64_t v283 = v17;
      int v242 = v45;
      char v250 = v47;
      int v267 = v38;
      char v277 = v40;
      uint64_t v217 = v11;
      uint64_t v218 = v10;
      uint64_t v219 = v9;
      uint64_t v220 = v8;
      uint64_t v221 = v7;
      int v222 = v21;
      uint64_t v223 = v22;
      int v224 = v16;
      unint64_t v18 = 0;
      unint64_t v225 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v225 && v12)
      {
        (*(void (**)(unint64_t))(*(void *)v225 + 16))(v225);
        char v13 = (char *)*v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        char v13 = 0;
      }
      int v16 = v224;
      uint64_t v22 = v223;
      int v21 = v222;
      uint64_t v7 = v221;
      uint64_t v8 = v220;
      uint64_t v9 = v219;
      uint64_t v10 = v218;
      uint64_t v11 = v217;
      int v38 = v267;
      char v40 = v277;
      int v45 = v242;
      char v47 = v250;
LABEL_187:
      uint64_t v17 = v283;
LABEL_114:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v93 = v2[3];
      if (v93)
      {
        uint64_t v287 = v17;
        int v241 = v45;
        char v249 = v47;
        int v264 = v38;
        char v274 = v40;
        unsigned int v257 = v11;
        uint64_t v138 = v10;
        uint64_t v139 = v9;
        uint64_t v140 = v8;
        uint64_t v141 = v7;
        int v142 = v21;
        uint64_t v143 = v22;
        int v144 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v93 + 16))(v93, v13, v18);
          unsigned int v51 = 0;
          unint64_t v18 = *v2;
          unint64_t v12 = v2[1];
        }
        else
        {
          unint64_t v12 = 0;
          unsigned int v51 = 0;
        }
        int v16 = v144;
        uint64_t v22 = v143;
        int v21 = v142;
        uint64_t v7 = v141;
        uint64_t v8 = v140;
        uint64_t v9 = v139;
        uint64_t v10 = v138;
        uint64_t v11 = v257;
        int v38 = v264;
        char v40 = v274;
        int v45 = v241;
        char v47 = v249;
        uint64_t v17 = v287;
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v18 = 0;
        unsigned int v51 = 0;
      }
      goto LABEL_116;
    }
    uint64_t v49 = &v13[v48];
    uint64_t v50 = (uint64_t)&v13[v48 + 1];
    v2[2] = v50;
    if (!v13)
    {
      unint64_t v18 = v12;
      goto LABEL_114;
    }
    unsigned int v51 = *v49;
    if (v51 < 2)
    {
      int v52 = 0;
      char v53 = 1;
      goto LABEL_42;
    }
LABEL_116:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v94 = v2[3];
    if (!v94)
    {
      char v54 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      int v52 = 1;
      goto LABEL_118;
    }
    uint64_t v282 = v17;
    int v239 = v45;
    char v245 = v47;
    int v262 = v38;
    char v271 = v40;
    unsigned int v253 = v11;
    uint64_t v104 = v10;
    uint64_t v105 = v9;
    uint64_t v106 = v8;
    uint64_t v107 = v7;
    int v108 = v21;
    uint64_t v109 = v22;
    int v110 = v16;
    if (!v12)
    {
      char v54 = 0;
      unint64_t v18 = 0;
      char v13 = 0;
      int v52 = 1;
      uint64_t v11 = v11;
      int v38 = v262;
      int v45 = v239;
      char v47 = v245;
LABEL_192:
      uint64_t v17 = v282;
      goto LABEL_118;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v94 + 16))(v94, v18);
    char v53 = 0;
    char v13 = (char *)*v2;
    unint64_t v12 = v2[1];
    uint64_t v50 = v2[2];
    int v52 = 1;
    unint64_t v18 = *v2;
    int v16 = v110;
    uint64_t v22 = v109;
    int v21 = v108;
    uint64_t v7 = v107;
    uint64_t v8 = v106;
    uint64_t v9 = v105;
    uint64_t v10 = v104;
    uint64_t v11 = v253;
    int v38 = v262;
    char v40 = v271;
    int v45 = v239;
    char v47 = v245;
    uint64_t v17 = v282;
LABEL_42:
    if (v51) {
      char v54 = v53;
    }
    else {
      char v54 = 0;
    }
    unint64_t v55 = v50 - (void)v13;
    if (v12 <= v55)
    {
      uint64_t v282 = v17;
      char v260 = v54;
      int v268 = v38;
      int v237 = v52;
      int v243 = v45;
      char v251 = v47;
      char v278 = v40;
      uint64_t v226 = v11;
      uint64_t v227 = v10;
      uint64_t v228 = v9;
      uint64_t v229 = v8;
      uint64_t v230 = v7;
      int v231 = v21;
      uint64_t v232 = v22;
      int v233 = v16;
      unint64_t v18 = 0;
      unint64_t v234 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v234 && v12)
      {
        (*(void (**)(unint64_t))(*(void *)v234 + 16))(v234);
        char v13 = (char *)*v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        char v13 = 0;
      }
      int v16 = v233;
      uint64_t v22 = v232;
      int v21 = v231;
      uint64_t v7 = v230;
      uint64_t v8 = v229;
      uint64_t v9 = v228;
      uint64_t v10 = v227;
      uint64_t v11 = v226;
      int v38 = v268;
      char v40 = v278;
      int v45 = v243;
      char v47 = v251;
      int v52 = v237;
      char v54 = v260;
      goto LABEL_192;
    }
    uint64_t v56 = &v13[v55];
    v2[2] = (unint64_t)(v56 + 1);
    if (!v13) {
      break;
    }
    unsigned int v57 = *v56;
    if (v57 > 1) {
      goto LABEL_120;
    }
    int v58 = 0;
    BOOL v59 = v57 != 0;
LABEL_49:
    if (v315)
    {
      char v60 = v314;
      int v314 = 0;
      if (v313)
      {
        uint64_t v2 = (unint64_t *)&v312;
        if (v311)
        {
          uint64_t v61 = v310;
          int v310 = 0;
          if (v309)
          {
            uint64_t v62 = v308;
            int v308 = 0;
            if (v307)
            {
              uint64_t v63 = v305;
              uint64_t v291 = v305;
              unsigned int v64 = v306;
              unsigned int v65 = HIDWORD(v306);
              uint64_t v305 = 0;
              uint64_t v306 = 0;
              unint64_t v292 = __PAIR64__(v65, v64);
              if (v304)
              {
                int v280 = v61;
                unint64_t v66 = a2;
                uint64_t v67 = v302;
                int v293 = v302;
                unint64_t v12 = v303;
                a2 = (unsigned char *)HIDWORD(v303);
                int v302 = 0;
                uint64_t v303 = 0;
                unint64_t v294 = __PAIR64__(a2, v12);
                if (v301)
                {
                  CFTypeRef v269 = v60;
                  BOOL v279 = v59;
                  uint64_t v68 = v299;
                  uint64_t v295 = v299;
                  unsigned int v69 = v300;
                  unsigned int v70 = HIDWORD(v300);
                  uint64_t v299 = 0;
                  uint64_t v300 = 0;
                  unint64_t v296 = __PAIR64__(v70, v69);
                  if (!v16)
                  {
                    *(void *)&long long v297 = v17;
                    if (!v21)
                    {
                      *((void *)&v297 + 1) = v22;
                      if (!v8)
                      {
                        *(void *)int v298 = v7;
                        if (!v10)
                        {
                          *(void *)&v298[8] = v9;
                          if (!v11)
                          {
                            v298[16] = v33;
                            if (!v38)
                            {
                              v298[17] = v40;
                              if (!v45)
                              {
                                v298[18] = v47;
                                if (!v52)
                                {
                                  v298[19] = v54;
                                  if (!v58)
                                  {
                                    *(_OWORD *)(v66 + 8) = v312;
                                    unint64_t v292 = 0;
                                    unint64_t v294 = 0;
                                    unint64_t v296 = 0;
                                    long long v71 = *(_OWORD *)v298;
                                    *(_OWORD *)(v66 + 88) = v297;
                                    v298[20] = v279;
                                    *(void *)unint64_t v66 = v269;
                                    uint64_t v291 = 0;
                                    *((void *)v66 + 3) = v280;
                                    *((void *)v66 + 4) = v62;
                                    *((void *)v66 + 5) = v63;
                                    *((_DWORD *)v66 + 12) = v64;
                                    *((_DWORD *)v66 + 13) = v65;
                                    int v293 = 0;
                                    *((void *)v66 + 7) = v67;
                                    *((_DWORD *)v66 + 16) = v12;
                                    *((_DWORD *)v66 + 17) = a2;
                                    uint64_t v295 = 0;
                                    *((void *)v66 + 9) = v68;
                                    *((_DWORD *)v66 + 20) = v69;
                                    *((_DWORD *)v66 + 21) = v70;
                                    *(_OWORD *)(v66 + 104) = v71;
                                    *(void *)(v66 + 117) = *(void *)&v298[13];
                                    v66[128] = 1;
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v295, v67);
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v293, v72);
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v291, v73);
                                    unint64_t result = 0;
                                    goto LABEL_66;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_89:
    unint64_t v18 = 0;
    unint64_t v75 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v76 = v2[3];
    if (v76)
    {
      if (v12)
      {
        (*(void (**)(unint64_t))(*(void *)v76 + 16))(v76);
        unint64_t v75 = *v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v75 = 0;
      }
    }
LABEL_90:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v77 = v2[3];
    if (!v77)
    {
      unint64_t v18 = 0;
      goto LABEL_92;
    }
    if (v18)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v77 + 16))(v77, v75, v18, v7, v8, v9, v10, v11);
      uint64_t v17 = 0;
      unint64_t v18 = *v2;
      unint64_t v12 = v2[1];
      int v16 = 1;
      char v13 = (char *)*v2;
    }
    else
    {
LABEL_92:
      unint64_t v12 = 0;
      char v13 = 0;
      uint64_t v17 = 0;
      int v16 = 1;
    }
  }
  unint64_t v18 = v12;
LABEL_118:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v95 = v2[3];
  if (v95)
  {
    uint64_t v285 = v17;
    char v256 = v54;
    int v263 = v38;
    int v236 = v52;
    int v240 = v45;
    char v247 = v47;
    char v273 = v40;
    uint64_t v124 = v11;
    uint64_t v125 = v10;
    uint64_t v126 = v9;
    uint64_t v127 = v8;
    uint64_t v128 = v7;
    int v129 = v21;
    uint64_t v130 = v22;
    int v131 = v16;
    if (v18)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v95 + 16))(v95, v13, v18);
      unint64_t v18 = *v2;
      unint64_t v12 = v2[1];
    }
    else
    {
      unint64_t v12 = 0;
    }
    int v16 = v131;
    uint64_t v22 = v130;
    int v21 = v129;
    uint64_t v7 = v128;
    uint64_t v8 = v127;
    uint64_t v9 = v126;
    uint64_t v10 = v125;
    uint64_t v11 = v124;
    int v38 = v263;
    char v40 = v273;
    int v45 = v240;
    char v47 = v247;
    int v52 = v236;
    char v54 = v256;
    uint64_t v17 = v285;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v18 = 0;
  }
LABEL_120:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t result = (WTF::StringImpl *)v2[3];
  if (result)
  {
    if (v12)
    {
      uint64_t v281 = v17;
      char v252 = v54;
      int v261 = v38;
      int v235 = v52;
      int v238 = v45;
      char v244 = v47;
      char v270 = v40;
      uint64_t v96 = v11;
      uint64_t v97 = v10;
      uint64_t v98 = v9;
      uint64_t v99 = v8;
      uint64_t v100 = v7;
      int v101 = v21;
      uint64_t v102 = v22;
      int v103 = v16;
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t))(*(void *)result
                                                                                                 + 16))(result, v18);
      int v16 = v103;
      uint64_t v22 = v102;
      int v21 = v101;
      int v38 = v261;
      char v40 = v270;
      int v45 = v238;
      char v47 = v244;
      int v52 = v235;
      char v54 = v252;
      uint64_t v17 = v281;
      if (*v2)
      {
        uint64_t v7 = v100;
        uint64_t v8 = v99;
        uint64_t v9 = v98;
        uint64_t v10 = v97;
        uint64_t v11 = v96;
        BOOL v59 = 0;
        int v58 = 1;
        goto LABEL_49;
      }
    }
  }
  *a2 = 0;
  a2[128] = 0;
LABEL_66:
  if (v301) {
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v299, v13);
  }
  if (v304) {
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v302, v13);
  }
  if (v307) {
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v305, v13);
  }
  if (v309)
  {
    unint64_t result = v308;
    int v308 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v311)
  {
    unint64_t result = v310;
    int v310 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v315)
  {
    unint64_t result = v314;
    int v314 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198865C48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a34) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a32, a2);
  }
  if (a40) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a36, a2);
  }
  if (*(unsigned char *)(v40 - 168)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v40 - 184, a2);
  }
  if (*(unsigned char *)(v40 - 152))
  {
    char v42 = *(WTF::StringImpl **)(v40 - 160);
    *(void *)(v40 - 160) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v40 - 136))
  {
    uint64_t v43 = *(WTF::StringImpl **)(v40 - 144);
    *(void *)(v40 - 144) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v40 - 96))
  {
    unsigned int v44 = *(WTF::StringImpl **)(v40 - 104);
    *(void *)(v40 - 104) = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebCore::PlatformTimeRanges,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v8);
  if (*(void *)a1)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    unint64_t result = (WTF *)WebCore::PlatformTimeRanges::PlatformTimeRanges();
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (v10)
  {
    unint64_t result = v8;
    if (v8)
    {
      uint64_t v8 = 0;
      int v9 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_198865DE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, char a15)
{
  if (a15)
  {
    if (a12) {
      WTF::fastFree(a12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198865E80(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    char v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  int v4 = *(_DWORD *)(a2 + 24);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

void *IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    uint64_t v6 = (int *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      int v8 = *v6;
      unsigned int v9 = v8 & 0xFFFFFF00;
      int v10 = v8;
      uint64_t v11 = v3;
      goto LABEL_8;
    }
    unint64_t v34 = v2;
    uint64_t v35 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v30 = (unsigned int *)result[3];
    if (v30) {
      goto LABEL_62;
    }
  }
  while (1)
  {
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      uint64_t v104 = result;
      uint64_t v113 = a2;
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v35, v34);
        unsigned int v9 = 0;
        int v10 = 0;
        unint64_t result = v104;
        a2 = v113;
        uint64_t v11 = *v104;
        unint64_t v2 = v104[1];
        int v7 = 1;
        uint64_t v3 = *v104;
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v9 = 0;
        int v10 = 0;
        int v7 = 1;
      }
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v2 = 0;
      unsigned int v9 = 0;
      int v10 = 0;
      int v7 = 1;
    }
LABEL_8:
    unint64_t v12 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      unint64_t v14 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v14 + 1;
      if (v3)
      {
        int v15 = 0;
        int v16 = *v14;
        unsigned int v17 = v16 & 0xFFFFFF00;
        int v18 = v16;
        goto LABEL_15;
      }
      unint64_t v36 = v2;
    }
    else
    {
      unint64_t v36 = 0;
      uint64_t v11 = 0;
      *unint64_t result = 0;
      result[1] = 0;
      uint64_t v37 = result[3];
      if (v37)
      {
        int v92 = v7;
        int v100 = v10;
        unsigned int v84 = v9;
        uint64_t v109 = result;
        uint64_t v119 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v3);
          unint64_t result = v109;
          a2 = v119;
          uint64_t v11 = *v109;
          unint64_t v36 = v109[1];
        }
        else
        {
          unint64_t v36 = 0;
          uint64_t v11 = 0;
        }
        unsigned int v9 = v84;
        int v7 = v92;
        int v10 = v100;
      }
    }
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v88 = v7;
      int v96 = v10;
      unsigned int v80 = v9;
      uint64_t v105 = result;
      uint64_t v114 = a2;
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v11, v36);
        unsigned int v17 = 0;
        int v18 = 0;
        unint64_t result = v105;
        a2 = v114;
        uint64_t v11 = *v105;
        unint64_t v2 = v105[1];
        int v15 = 1;
        uint64_t v3 = *v105;
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v17 = 0;
        int v18 = 0;
        int v15 = 1;
      }
      unsigned int v9 = v80;
      int v7 = v88;
      int v10 = v96;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v2 = 0;
      unsigned int v17 = 0;
      int v18 = 0;
      int v15 = 1;
    }
LABEL_15:
    unint64_t v19 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v19 || v2 - v19 <= 3)
    {
      unint64_t v38 = 0;
      uint64_t v11 = 0;
      *unint64_t result = 0;
      result[1] = 0;
      uint64_t v39 = result[3];
      if (v39)
      {
        unsigned int v71 = v17;
        int v77 = v15;
        int v65 = v18;
        int v93 = v7;
        int v101 = v10;
        unsigned int v85 = v9;
        int v110 = result;
        uint64_t v120 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v3);
          unint64_t result = v110;
          a2 = v120;
          uint64_t v11 = *v110;
          unint64_t v38 = v110[1];
        }
        else
        {
          unint64_t v38 = 0;
          uint64_t v11 = 0;
        }
        unsigned int v9 = v85;
        int v7 = v93;
        int v10 = v101;
        int v18 = v65;
        unsigned int v17 = v71;
        int v15 = v77;
      }
    }
    else
    {
      CFTypeRef v20 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v20 + 1;
      if (v3)
      {
        int v21 = 0;
        int v22 = *v20;
        unsigned int v23 = v22 & 0xFFFFFF00;
        int v24 = v22;
        goto LABEL_19;
      }
      unint64_t v38 = v2;
    }
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      unsigned int v68 = v17;
      int v74 = v15;
      int v62 = v18;
      int v89 = v7;
      int v97 = v10;
      unsigned int v81 = v9;
      uint64_t v106 = result;
      uint64_t v115 = a2;
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v11, v38);
        unsigned int v23 = 0;
        int v24 = 0;
        unint64_t result = v106;
        a2 = v115;
        uint64_t v11 = *v106;
        unint64_t v2 = v106[1];
        int v21 = 1;
        uint64_t v3 = *v106;
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v23 = 0;
        int v24 = 0;
        int v21 = 1;
      }
      unsigned int v9 = v81;
      int v7 = v89;
      int v10 = v97;
      int v18 = v62;
      unsigned int v17 = v68;
      int v15 = v74;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v2 = 0;
      unsigned int v23 = 0;
      int v24 = 0;
      int v21 = 1;
    }
LABEL_19:
    unint64_t v25 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v25 || v2 - v25 <= 7)
    {
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      *unint64_t result = 0;
      result[1] = 0;
      uint64_t v42 = result[3];
      if (v42)
      {
        int v56 = v24;
        int v60 = v21;
        unsigned int v52 = v23;
        unsigned int v72 = v17;
        int v78 = v15;
        int v66 = v18;
        int v94 = v7;
        int v102 = v10;
        unsigned int v86 = v9;
        uint64_t v111 = result;
        uint64_t v121 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v3);
          unint64_t result = v111;
          a2 = v121;
          uint64_t v41 = *v111;
          unint64_t v40 = v111[1];
        }
        else
        {
          unint64_t v40 = 0;
          uint64_t v41 = 0;
        }
        unsigned int v9 = v86;
        int v7 = v94;
        int v10 = v102;
        int v18 = v66;
        unsigned int v17 = v72;
        int v15 = v78;
        unsigned int v23 = v52;
        int v24 = v56;
        int v21 = v60;
      }
    }
    else
    {
      uint64_t v26 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v26 + 1;
      if (v3)
      {
        int v27 = 0;
        uint64_t v28 = *v26;
        goto LABEL_23;
      }
      unint64_t v40 = v2;
      uint64_t v41 = 0;
    }
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v28 = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v54 = v24;
      int v58 = v21;
      unsigned int v50 = v23;
      unsigned int v69 = v17;
      int v75 = v15;
      int v63 = v18;
      int v90 = v7;
      int v98 = v10;
      unsigned int v82 = v9;
      uint64_t v107 = result;
      uint64_t v116 = a2;
      if (v40)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v3 + 16))(v3, v41, v40, 0.0);
        unint64_t result = v107;
        a2 = v116;
        uint64_t v11 = *v107;
        unint64_t v2 = v107[1];
        int v27 = 1;
        uint64_t v3 = *v107;
        unsigned int v9 = v82;
        int v7 = v90;
        int v10 = v98;
        int v18 = v63;
        unsigned int v17 = v69;
        int v15 = v75;
        unsigned int v23 = v50;
        int v24 = v54;
        int v21 = v58;
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        int v27 = 1;
      }
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v2 = 0;
      int v27 = 1;
    }
LABEL_23:
    unint64_t v29 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v29 || v2 - v29 <= 3)
    {
      unint64_t v31 = 0;
      uint64_t v11 = 0;
      *unint64_t result = 0;
      result[1] = 0;
      uint64_t v43 = result[3];
      if (v43)
      {
        int v49 = v27;
        unsigned int v53 = v23;
        uint64_t v47 = v28;
        int v57 = v24;
        int v61 = v21;
        unsigned int v73 = v17;
        int v79 = v15;
        int v67 = v18;
        int v95 = v7;
        int v103 = v10;
        unsigned int v87 = v9;
        uint64_t v112 = result;
        uint64_t v122 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v3);
          unint64_t result = v112;
          a2 = v122;
          uint64_t v11 = *v112;
          unint64_t v31 = v112[1];
        }
        else
        {
          unint64_t v31 = 0;
          uint64_t v11 = 0;
        }
        unsigned int v9 = v87;
        int v7 = v95;
        int v10 = v103;
        int v18 = v67;
        unsigned int v17 = v73;
        int v15 = v79;
        unsigned int v23 = v53;
        int v24 = v57;
        int v21 = v61;
        uint64_t v28 = v47;
        int v27 = v49;
      }
    }
    else
    {
      uint64_t v30 = (unsigned int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v30 + 1;
      unint64_t v31 = v2;
      if (v3)
      {
        int v32 = 0;
        uint64_t v3 = *v30;
        if (v7) {
          goto LABEL_61;
        }
        goto LABEL_27;
      }
    }
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v44 = result[3];
    if (!v44) {
      break;
    }
    if (!v31) {
      break;
    }
    int v48 = v27;
    int v45 = result;
    uint64_t v117 = a2;
    unsigned int v83 = v9;
    int v99 = v10;
    int v91 = v7;
    int v64 = v18;
    unsigned int v70 = v17;
    int v76 = v15;
    unsigned int v51 = v23;
    int v55 = v24;
    int v59 = v21;
    uint64_t v46 = v28;
    unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v11, v31);
    int v27 = v48;
    unsigned int v23 = v51;
    uint64_t v28 = v46;
    int v24 = v55;
    int v21 = v59;
    unsigned int v17 = v70;
    int v15 = v76;
    int v18 = v64;
    unsigned int v9 = v83;
    int v10 = v99;
    a2 = v117;
    if (!*v45) {
      break;
    }
    uint64_t v3 = 0;
    int v32 = 1;
    if (v91) {
      goto LABEL_61;
    }
LABEL_27:
    if (!v15 && !v21 && !v27 && !v32)
    {
      *(_DWORD *)a2 = v10 | v9;
      *(_DWORD *)(a2 + 4) = v18 | v17;
      *(_DWORD *)(a2 + 8) = v24 | v23;
      *(void *)(a2 + 16) = v28;
      char v33 = 1;
      *(_DWORD *)(a2 + 24) = v3;
      goto LABEL_32;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    int v108 = result;
    uint64_t v118 = a2;
    if (v2)
    {
      (*(void (**)(unsigned int *, uint64_t))(*(void *)v30 + 16))(v30, v3);
      unint64_t result = v108;
      a2 = v118;
      uint64_t v35 = *v108;
      unint64_t v34 = v108[1];
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v35 = 0;
    }
  }
  char v33 = 0;
  *(unsigned char *)a2 = 0;
LABEL_32:
  *(unsigned char *)(a2 + 32) = v33;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::SelectionGeometry,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v4;
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, (float *)v26);
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v7) {
    goto LABEL_15;
  }
  *uint64_t v6 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 33));
  LODWORD(v26[0]) = *(_DWORD *)(a2 + 36);
  IPC::Encoder::operator<<<int>(a1, (int *)v26);
  LODWORD(v26[0]) = *(_DWORD *)(a2 + 40);
  IPC::Encoder::operator<<<int>(a1, (int *)v26);
  LODWORD(v26[0]) = *(_DWORD *)(a2 + 44);
  IPC::Encoder::operator<<<int>(a1, (int *)v26);
  LODWORD(v26[0]) = *(_DWORD *)(a2 + 48);
  IPC::Encoder::operator<<<int>(a1, (int *)v26);
  char v8 = *(unsigned char *)(a2 + 52);
  unsigned int v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198866878);
  }
  *unsigned int v9 = v8;
  char v11 = *(unsigned char *)(a2 + 53);
  unint64_t v12 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x198866898);
  }
  *unint64_t v12 = v11;
  char v14 = *(unsigned char *)(a2 + 54);
  int v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1988668B8);
  }
  *int v15 = v14;
  char v17 = *(unsigned char *)(a2 + 55);
  int v18 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x1988668D8);
  }
  *int v18 = v17;
  char v20 = *(unsigned char *)(a2 + 56);
  int v21 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1988668F8);
  }
  *int v21 = v20;
  char v23 = *(unsigned char *)(a2 + 57);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v25)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198866858);
  }
  *unint64_t result = v23;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::SelectionGeometry,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatQuad>(a1, (uint64_t)v124);
  LOWORD(v122[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v122);
  int v4 = BYTE1(v122[0]);
  if (!BYTE1(v122[0])) {
    goto LABEL_41;
  }
  while (1)
  {
    unsigned __int16 v5 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
    uint64_t v6 = IPC::Decoder::decode<unsigned int>(a1);
    uint64_t v7 = IPC::Decoder::decode<unsigned int>(a1);
    uint64_t v8 = IPC::Decoder::decode<unsigned int>(a1);
    uint64_t v9 = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v10 = a1[1];
    unint64_t v11 = *a1;
    unint64_t v12 = a1[2] - *a1;
    if (v10 <= v12)
    {
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v37 = a1[3];
      if (v37)
      {
        uint64_t v121 = v9;
        if (v10)
        {
          (*(void (**)(unint64_t))(*(void *)v37 + 16))(v37);
          unint64_t v36 = *a1;
          unint64_t v35 = a1[1];
        }
        else
        {
          unint64_t v35 = 0;
          unint64_t v36 = 0;
        }
        uint64_t v9 = v121;
      }
      goto LABEL_44;
    }
    uint64_t v13 = (unsigned __int8 *)(v11 + v12);
    char v14 = v13 + 1;
    a1[2] = (unint64_t)(v13 + 1);
    if (!v11)
    {
      unint64_t v35 = v10;
      unint64_t v36 = 0;
LABEL_44:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v38 = a1[3];
      if (v38)
      {
        uint64_t v120 = v9;
        if (v35)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
          unint64_t v11 = *a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t v9 = v120;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_46;
    }
    unsigned int v15 = *v13;
    if (v15 < 2)
    {
      int v16 = 0;
      goto LABEL_6;
    }
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v39 = a1[3];
    if (!v39)
    {
      unint64_t v40 = 0;
      unint64_t v11 = 0;
      int v16 = 1;
      goto LABEL_48;
    }
    uint64_t v119 = v9;
    if (!v10)
    {
      unint64_t v40 = 0;
      unint64_t v11 = 0;
      int v16 = 1;
LABEL_48:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v41 = a1[3];
      if (v41)
      {
        int v103 = v16;
        uint64_t v118 = v9;
        if (v40)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v41 + 16))(v41, v11, v40);
          unint64_t v11 = *a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t v9 = v118;
        int v16 = v103;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v11);
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    int v16 = 1;
    char v14 = (unsigned __int8 *)a1[2];
    uint64_t v9 = v119;
LABEL_6:
    if (v10 <= (unint64_t)&v14[-v11])
    {
      int v89 = v16;
      uint64_t v104 = v9;
      unint64_t v40 = 0;
      unint64_t v54 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v54 && v10)
      {
        (*(void (**)(unint64_t))(*(void *)v54 + 16))(v54);
        unint64_t v11 = *a1;
        unint64_t v40 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t v9 = v104;
      int v16 = v89;
      goto LABEL_48;
    }
    char v17 = v14 + 1;
    a1[2] = (unint64_t)(v14 + 1);
    if (!v11)
    {
      unint64_t v40 = v10;
      goto LABEL_48;
    }
    unsigned int v18 = *v14;
    if (v18 < 2)
    {
      int v19 = 0;
      goto LABEL_10;
    }
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v42 = a1[3];
    if (!v42)
    {
      unint64_t v43 = 0;
      unint64_t v11 = 0;
      int v19 = 1;
      goto LABEL_52;
    }
    int v102 = v16;
    uint64_t v117 = v9;
    if (!v10)
    {
      unint64_t v43 = 0;
      unint64_t v11 = 0;
      int v19 = 1;
LABEL_52:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v44 = a1[3];
      if (v44)
      {
        int v88 = v19;
        int v101 = v16;
        uint64_t v116 = v9;
        if (v43)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v44 + 16))(v44, v11, v43);
          unint64_t v11 = *a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t v9 = v116;
        int v16 = v101;
        int v19 = v88;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_54;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v42 + 16))(v42, v11);
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    int v19 = 1;
    char v17 = (unsigned __int8 *)a1[2];
    uint64_t v9 = v117;
    int v16 = v102;
LABEL_10:
    if (v10 <= (unint64_t)&v17[-v11])
    {
      int v77 = v19;
      int v90 = v16;
      uint64_t v105 = v9;
      unint64_t v43 = 0;
      unint64_t v55 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v55 && v10)
      {
        (*(void (**)(unint64_t))(*(void *)v55 + 16))(v55);
        unint64_t v11 = *a1;
        unint64_t v43 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t v9 = v105;
      int v16 = v90;
      int v19 = v77;
      goto LABEL_52;
    }
    char v20 = v17 + 1;
    a1[2] = (unint64_t)(v17 + 1);
    if (!v11)
    {
      unint64_t v43 = v10;
      goto LABEL_52;
    }
    unsigned int v21 = *v17;
    if (v21 < 2)
    {
      int v22 = 0;
      goto LABEL_14;
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v45 = a1[3];
    if (!v45)
    {
      unint64_t v46 = 0;
      unint64_t v11 = 0;
      int v22 = 1;
      goto LABEL_56;
    }
    int v87 = v19;
    int v100 = v16;
    uint64_t v115 = v9;
    if (!v10)
    {
      unint64_t v46 = 0;
      unint64_t v11 = 0;
      int v22 = 1;
LABEL_56:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v47 = a1[3];
      if (v47)
      {
        int v76 = v22;
        int v86 = v19;
        int v99 = v16;
        uint64_t v114 = v9;
        if (v46)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v47 + 16))(v47, v11, v46);
          unint64_t v11 = *a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t v9 = v114;
        int v16 = v99;
        int v19 = v86;
        int v22 = v76;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_58;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v45 + 16))(v45, v11);
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    int v22 = 1;
    char v20 = (unsigned __int8 *)a1[2];
    uint64_t v9 = v115;
    int v16 = v100;
    int v19 = v87;
LABEL_14:
    if (v10 <= (unint64_t)&v20[-v11])
    {
      int v68 = v22;
      int v78 = v19;
      int v91 = v16;
      uint64_t v106 = v9;
      unint64_t v46 = 0;
      unint64_t v56 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v56 && v10)
      {
        (*(void (**)(unint64_t))(*(void *)v56 + 16))(v56);
        unint64_t v11 = *a1;
        unint64_t v46 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t v9 = v106;
      int v16 = v91;
      int v19 = v78;
      int v22 = v68;
      goto LABEL_56;
    }
    char v23 = v20 + 1;
    a1[2] = (unint64_t)(v20 + 1);
    if (!v11)
    {
      unint64_t v46 = v10;
      goto LABEL_56;
    }
    if (*v20 < 2u)
    {
      int v24 = 0;
      goto LABEL_18;
    }
LABEL_58:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v48 = a1[3];
    if (!v48)
    {
      unint64_t v49 = 0;
      unint64_t v11 = 0;
      int v24 = 1;
      goto LABEL_60;
    }
    int v75 = v22;
    int v85 = v19;
    int v98 = v16;
    uint64_t v113 = v9;
    if (!v10)
    {
      unint64_t v49 = 0;
      unint64_t v11 = 0;
      int v24 = 1;
LABEL_60:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v50 = a1[3];
      if (v50)
      {
        int v67 = v24;
        int v74 = v22;
        int v84 = v19;
        int v97 = v16;
        uint64_t v112 = v9;
        if (v49)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v50 + 16))(v50, v11, v49);
          unint64_t v11 = *a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t v9 = v112;
        int v16 = v97;
        int v19 = v84;
        int v22 = v74;
        int v24 = v67;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_62;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v48 + 16))(v48, v11);
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    int v24 = 1;
    char v23 = (unsigned __int8 *)a1[2];
    uint64_t v9 = v113;
    int v16 = v98;
    int v19 = v85;
    int v22 = v75;
LABEL_18:
    if (v10 <= (unint64_t)&v23[-v11])
    {
      int v62 = v24;
      int v69 = v22;
      int v79 = v19;
      int v92 = v16;
      uint64_t v107 = v9;
      unint64_t v49 = 0;
      unint64_t v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v57 && v10)
      {
        (*(void (**)(unint64_t))(*(void *)v57 + 16))(v57);
        unint64_t v11 = *a1;
        unint64_t v49 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t v9 = v107;
      int v16 = v92;
      int v19 = v79;
      int v22 = v69;
      int v24 = v62;
      goto LABEL_60;
    }
    uint64_t v25 = v23 + 1;
    a1[2] = (unint64_t)(v23 + 1);
    if (!v11)
    {
      unint64_t v49 = v10;
      goto LABEL_60;
    }
    unsigned int v26 = *v23;
    if (v26 < 2)
    {
      int v27 = 0;
      goto LABEL_22;
    }
LABEL_62:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v51 = a1[3];
    if (!v51)
    {
      unint64_t v52 = 0;
      unint64_t v11 = 0;
      int v27 = 1;
      goto LABEL_64;
    }
    int v66 = v24;
    int v73 = v22;
    int v83 = v19;
    int v96 = v16;
    uint64_t v111 = v9;
    if (!v10)
    {
      unint64_t v52 = 0;
      unint64_t v11 = 0;
      int v27 = 1;
      goto LABEL_64;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v51 + 16))(v51, v11);
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    int v27 = 1;
    uint64_t v25 = (unsigned __int8 *)a1[2];
    uint64_t v9 = v111;
    int v16 = v96;
    int v19 = v83;
    int v22 = v73;
    int v24 = v66;
LABEL_22:
    if (v10 <= (unint64_t)&v25[-v11]) {
      break;
    }
    a1[2] = (unint64_t)(v25 + 1);
    if (!v11)
    {
      unint64_t v52 = v10;
      goto LABEL_64;
    }
    if (*v25 > 1u) {
      goto LABEL_66;
    }
    int v28 = 0;
LABEL_26:
    if (v124[32]
      && v4
      && v5 > 0xFFu
      && (v6 & 0xFF00000000) != 0
      && (v7 & 0xFF00000000) != 0
      && (v8 & 0xFF00000000) != 0
      && (v9 & 0xFF00000000) != 0
      && !v16
      && !v19
      && !v22
      && !v24
      && !v27
      && !v28)
    {
      uint64_t result = WebCore::SelectionGeometry::SelectionGeometry();
      long long v30 = v122[3];
      *(_OWORD *)(a2 + 32) = v122[2];
      *(_OWORD *)(a2 + 48) = v30;
      *(_OWORD *)(a2 + 64) = v122[4];
      *(_DWORD *)(a2 + 80) = v123;
      long long v31 = v122[1];
      *(_OWORD *)a2 = v122[0];
      *(_OWORD *)(a2 + 16) = v31;
      *(unsigned char *)(a2 + 84) = 1;
      return result;
    }
    __break(1u);
LABEL_41:
    unint64_t v32 = *a1;
    unint64_t v33 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v34 = a1[3];
    if (v34)
    {
      if (v33) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32);
      }
    }
  }
  int v59 = v27;
  int v63 = v24;
  int v70 = v22;
  int v80 = v19;
  int v93 = v16;
  uint64_t v108 = v9;
  unint64_t v52 = 0;
  unint64_t v58 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v58 && v10)
  {
    (*(void (**)(unint64_t))(*(void *)v58 + 16))(v58);
    unint64_t v11 = *a1;
    unint64_t v52 = a1[1];
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v9 = v108;
  int v16 = v93;
  int v19 = v80;
  int v22 = v70;
  int v24 = v63;
  int v27 = v59;
LABEL_64:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v53 = a1[3];
  if (v53)
  {
    int v61 = v27;
    int v65 = v24;
    int v72 = v22;
    int v82 = v19;
    int v95 = v16;
    uint64_t v110 = v9;
    if (v52)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v53 + 16))(v53, v11, v52);
      unint64_t v11 = *a1;
      unint64_t v10 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
    }
    uint64_t v9 = v110;
    int v16 = v95;
    int v19 = v82;
    int v22 = v72;
    int v24 = v65;
    int v27 = v61;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
  }
LABEL_66:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v10)
    {
      int v60 = v27;
      uint64_t v109 = v9;
      int v94 = v16;
      int v81 = v19;
      int v71 = v22;
      int v64 = v24;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v11);
      int v27 = v60;
      int v24 = v64;
      int v22 = v71;
      int v19 = v81;
      int v16 = v94;
      uint64_t v9 = v109;
      if (*a1)
      {
        int v28 = 1;
        goto LABEL_26;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 84) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::encode(IPC::Encoder *a1, char *a2)
{
  int v4 = a2 + 24;
  char v6 = *a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 8));
  return IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, (uint64_t)&v14);
  uint64_t result = IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a1, (uint64_t)&v12);
  if (*a1)
  {
    if (v4 > 0xFFu)
    {
      if (v16)
      {
        uint64_t v7 = v14;
        uint64_t v8 = v15;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        if (v13)
        {
          long long v9 = v12;
          long long v11 = v12;
          *(unsigned char *)a2 = v4;
          v10[0] = 0;
          v10[1] = 0;
          *(void *)(a2 + 8) = v7;
          *(void *)(a2 + 16) = v8;
          *(_OWORD *)(a2 + 24) = v9;
          *(unsigned char *)(a2 + 40) = 1;
          uint64_t result = WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_6:
  if (v16) {
    return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
  }
  return result;
}

void sub_198867638(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 40)) {
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 56, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988676C4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2, v5);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 56);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  return IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 32, v6);
}

uint64_t IPC::ArgumentCoder<WebCore::ClientOrigin,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v14);
  if (!*a1) {
    goto LABEL_26;
  }
  if (!v17) {
    goto LABEL_32;
  }
  if (!v16)
  {
    if (v14[0] || v14[1] || v15) {
      goto LABEL_7;
    }
LABEL_26:
    *a2 = 0;
    a2[64] = 0;
    goto LABEL_22;
  }
  if (v16 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_32;
  }
LABEL_7:
  uint64_t result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v10);
  if (*a1)
  {
    if (!v13) {
      goto LABEL_32;
    }
    if (v12)
    {
      if (v12 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_32;
      }
LABEL_13:
      if (v17)
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v14);
        if (v13)
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v10);
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v6);
          uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 32), (uint64_t)v8);
          a2[64] = 1;
          if (v9 != -1) {
            uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v9])(&v5, v8);
          }
          int v9 = -1;
          if (v7 != -1) {
            uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v7])(&v5, v6);
          }
          goto LABEL_19;
        }
      }
LABEL_32:
      __break(1u);
    }
    if (v10[0] || v10[1] || v11) {
      goto LABEL_13;
    }
  }
  *a2 = 0;
  a2[64] = 0;
LABEL_19:
  if (v13 && v12 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v12])(v6, v10);
  }
LABEL_22:
  if (v17)
  {
    if (v16 != -1) {
      return ((uint64_t (*)(unsigned char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v16])(v6, v14);
    }
  }
  return result;
}

void sub_198867964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26)
{
  if (a26 && a24 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a24])(&a13, &a21);
  }
  if (*(unsigned char *)(v27 - 48))
  {
    uint64_t v28 = *(unsigned int *)(v26 + 24);
    if (v28 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v28])(&a13, v27 - 80);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198867A48()
{
}

void WebCore::SecurityOriginData::isNull(WebCore::SecurityOriginData *this)
{
  if (*((_DWORD *)this + 6) > 1u)
  {
    unint64_t v1 = (WebCore::ClientOrigin *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ClientOrigin::~ClientOrigin(v1);
  }
}

void WebCore::ClientOrigin::~ClientOrigin(WebCore::ClientOrigin *this)
{
  uint64_t v2 = *((unsigned int *)this + 14);
  if (v2 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v2])(&v4, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t v3 = *((unsigned int *)this + 6);
  if (v3 != -1) {
    ((void (*)(char *, WebCore::ClientOrigin *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v3])(&v5, this);
  }
  *((_DWORD *)this + 6) = -1;
}

void IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  char v5 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 8));
}

void IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2 = *((void *)a1 + 2);
  if (v2 >= *((void *)a1 + 1)
    || (*(unsigned char *)(*(void *)a1 + v2) = *(unsigned char *)a2, *((void *)a1 + 2) = v2 + 1, v2 + 1 >= *((void *)a1 + 1)))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v2 + 1) = *(unsigned char *)(a2 + 1);
    *((void *)a1 + 2) = v2 + 2;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 8));
}

void IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  char v5 = (char *)*a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6) {
    goto LABEL_16;
  }
  int v7 = &v5[v6];
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v15 = v4;
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_18;
  }
  int v9 = 0;
LABEL_5:
  if (v4 > a1[2] - (uint64_t)v5)
  {
    unint64_t v10 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v10 + 1);
    if (v5)
    {
      unsigned int v11 = *v10;
      if (v11 <= 4)
      {
        int v12 = 0;
        __int16 v13 = (_WORD)v11 << 8;
        goto LABEL_9;
      }
      goto LABEL_24;
    }
    uint64_t v21 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v20 + 16))(v20, v5);
        uint64_t v21 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        uint64_t v21 = 0;
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v4 = 0;
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v21);
    }
LABEL_24:
    char v5 = (char *)*a1;
    uint64_t v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      if (v23) {
        (*(void (**)(uint64_t, char *))(*(void *)v24 + 16))(v24, v5);
      }
    }
    __int16 v13 = 0;
    int v12 = 1;
LABEL_9:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a1, v5, (uint64_t)&cf);
    if (!*a1) {
      break;
    }
    if (!v9 && !v12 && v27)
    {
      CFTypeRef v14 = cf;
      *(_WORD *)a2 = v13 | v8;
      *(void *)(a2 + 8) = v14;
      *(unsigned char *)(a2 + 16) = 1;
      return;
    }
    __break(1u);
LABEL_16:
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        uint64_t v16 = *a1;
        uint64_t v15 = a1[1];
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
LABEL_17:
    unint64_t v4 = 0;
    char v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        char v5 = (char *)*a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
      }
    }
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v19 + 16))(v19, v5);
        LOWORD(v8) = 0;
        char v5 = (char *)*a1;
        unint64_t v4 = a1[1];
        int v9 = 1;
        goto LABEL_5;
      }
      char v5 = 0;
      LOWORD(v8) = 0;
    }
    else
    {
      char v5 = 0;
      LOWORD(v8) = 0;
      unint64_t v4 = 0;
    }
    int v9 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v27)
  {
    CFTypeRef v25 = cf;
    CFTypeRef cf = 0;
    if (v25) {
      CFRelease(v25);
    }
  }
}

void IPC::ArgumentCoder<WebCore::CertificateInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RetainPtr<__SecTrust *>>(a1, (uint64_t)&cf);
  if (*a1)
  {
    if (v6)
    {
      *(void *)a2 = cf;
      *(unsigned char *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    if (v6)
    {
      CFTypeRef v4 = cf;
      CFTypeRef cf = 0;
      if (v4) {
        CFRelease(v4);
      }
    }
  }
}

void IPC::Decoder::decode<WTF::RetainPtr<__SecTrust *>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<__SecTrust *>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
}

unsigned int *IPC::ArgumentCoder<WebCore::PasteboardCustomData::Entry,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  unsigned __int8 v5 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  return IPC::ArgumentCoder<std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>((unsigned int *)a1, a2 + 16, v5);
}

void IPC::ArgumentCoder<WebCore::PasteboardCustomData,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
  IPC::Decoder::decode<WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v7);
  if (*(void *)a1)
  {
    if (v10 && v8)
    {
      WebCore::PasteboardCustomData::PasteboardCustomData();
      WebCore::PasteboardCustomData::PasteboardCustomData();
      a2[24] = 1;
      WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)&v6);
      goto LABEL_5;
    }
    __break(1u);
  }
  *a2 = 0;
  a2[24] = 0;
LABEL_5:
  if (v8) {
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v4);
  }
  if (v10)
  {
    unsigned __int8 v5 = v9;
    int v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
}

void sub_1988680C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)&a9);
  if (a14) {
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v16);
  }
  if (*(unsigned char *)(v14 - 24))
  {
    uint64_t v17 = *(WTF::StringImpl **)(v14 - 32);
    *(void *)(v14 - 32) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198868190(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  uint64_t v4 = *(void *)(a2 + 8);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, a2 + 48);
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *(void *)(a2 + 32);
    return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, a2 + 48);
  if (!*(unsigned char *)(a2 + 40))
  {
    __break(1u);
LABEL_10:
    a1[1] = 0;
    return result;
  }
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 8;
    if (v10 <= 0xFFFFFFFFFFFFFFF7 && v11 <= a1[1])
    {
      *(void *)(*a1 + v10) = *(void *)(a2 + 32);
      a1[2] = v11;
      return result;
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::PositionedGlyphs>(a1, (uint64_t)v18);
  unint64_t v5 = a1[1];
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v11 = 0;
    unint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (v15)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v15 + 16))(v15);
        unint64_t v10 = *a1;
        unint64_t v11 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v10 = 0;
      }
    }
LABEL_12:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v4 = a1[3];
    if (v4) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  unint64_t v9 = (unint64_t *)&v6[v7];
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v11 = v5;
    unint64_t v10 = 0;
    goto LABEL_12;
  }
  unint64_t v10 = *v9;
  if (*v9 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    unint64_t v11 = v19;
    if (v19)
    {
      WebCore::DecomposedGlyphs::create();
      uint64_t v12 = v17;
      uint64_t v17 = 0;
      *(void *)a2 = v12;
      *(unsigned char *)(a2 + 8) = 1;
      WTF::Ref<WebCore::DecomposedGlyphs,WTF::RawPtrTraits<WebCore::DecomposedGlyphs>,WTF::DefaultRefDerefTraits<WebCore::DecomposedGlyphs>>::~Ref(&v17, v13);
      return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v6);
    }
LABEL_18:
    while (1)
    {
      __break(1u);
LABEL_19:
      if (!v11) {
        break;
      }
      uint64_t v4 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v4 + 16))(v4, v10, v11);
      unint64_t v6 = (char *)*a1;
      if (!*a1)
      {
        unint64_t v5 = a1[1];
        goto LABEL_13;
      }
    }
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v16 = a1[3];
  if (v16)
  {
    if (v5)
    {
      uint64_t v4 = (*(uint64_t (**)(unint64_t, char *))(*(void *)v16 + 16))(v16, v6);
      if (*a1)
      {
        unint64_t v11 = v19;
        goto LABEL_18;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v6);
}

void sub_19886847C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 32));
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 64));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)(a2 + 72));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)(a2 + 80));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)(a2 + 88));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 96));
  char v5 = *(unsigned char *)(a2 + 104);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 106));
}

uint64_t IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v68);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v66);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v64);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v61);
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    unint64_t v9 = (int *)(v6 + v7);
    a1[2] = (unint64_t)(v9 + 1);
    if (v6)
    {
      int v10 = 0;
      int v11 = *v9;
      goto LABEL_8;
    }
    unint64_t v31 = v5;
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v33 = a1[3];
    if (v33)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v6, v5);
        unint64_t v32 = *a1;
        unint64_t v31 = a1[1];
      }
      else
      {
        unint64_t v31 = 0;
        unint64_t v32 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v34 = a1[3];
  if (v34 && v31) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32);
  }
  int v11 = 0;
  int v10 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((uint64_t *)a1, &v59);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((uint64_t *)a1, &v57);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((uint64_t *)a1, &v55);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v53);
  unint64_t v12 = a1[1];
  if (!v54)
  {
    unint64_t v35 = *a1;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v36 = a1[3];
    if (!v36 || !v12)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *a1;
LABEL_75:
      unint64_t v37 = 0;
      unint64_t v38 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v39 = a1[3];
      if (v39)
      {
        if (v12)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v13);
          unint64_t v38 = *a1;
          unint64_t v37 = a1[1];
        }
        else
        {
          unint64_t v37 = 0;
          unint64_t v38 = 0;
        }
      }
      goto LABEL_76;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v36 + 16))(v36, v35);
    unint64_t v12 = a1[1];
  }
  unint64_t v13 = *a1;
  unint64_t v14 = a1[2] - *a1;
  if (v12 <= v14) {
    goto LABEL_75;
  }
  unint64_t v15 = (unsigned __int8 *)(v13 + v14);
  a1[2] = (unint64_t)(v15 + 1);
  if (!v13)
  {
    unint64_t v37 = v12;
    unint64_t v38 = 0;
LABEL_76:
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v40 = a1[3];
    if (v40)
    {
      if (v37)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v40 + 16))(v40, v38, v37);
        unint64_t v13 = *a1;
        unint64_t v12 = a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_77;
  }
  unsigned int v16 = *v15;
  if (v16 < 4)
  {
    unsigned int v17 = v16 | 0x100;
    goto LABEL_13;
  }
LABEL_77:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v41 = a1[3];
  if (v41 && v12) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v41 + 16))(v41, v13);
  }
  unsigned int v17 = 0;
LABEL_13:
  uint64_t result = IPC::Decoder::decode<unsigned short>(a1);
  __int16 v20 = result;
  BOOL v21 = (result & 0xC000) != 0 || (result & 0xFF0000) == 0;
  if (v21)
  {
    unsigned __int8 v19 = (void *)*a1;
    unint64_t v42 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result)
    {
      if (v42) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v19);
      }
    }
  }
  if (!*a1)
  {
    *a2 = 0;
    a2[112] = 0;
    goto LABEL_44;
  }
  unint64_t v22 = v69;
  if (v69)
  {
    unint64_t v22 = (unint64_t)&v64;
    v43[0] = v68;
    if (v67)
    {
      v43[1] = v66;
      if (v65)
      {
        v43[2] = v64;
        unint64_t v22 = v63;
        if (v63)
        {
          unint64_t v22 = (unint64_t)v61;
          unint64_t v44 = v61;
          uint64_t v23 = v62;
          int v61 = 0;
          uint64_t v62 = 0;
          uint64_t v45 = v23;
          if (!v10)
          {
            int v46 = v11;
            unint64_t v22 = v60;
            if (v60)
            {
              uint64_t v24 = (_DWORD *)v59;
              uint64_t v59 = 0;
              unint64_t v47 = v24;
              unint64_t v22 = v58;
              if (v58)
              {
                CFTypeRef v25 = (_DWORD *)v57;
                uint64_t v57 = 0;
                unint64_t v48 = v25;
                unint64_t v22 = v56;
                if (v56)
                {
                  uint64_t v26 = (_DWORD *)v55;
                  uint64_t v55 = 0;
                  unint64_t v49 = v26;
                  unint64_t v22 = v54;
                  if (v54)
                  {
                    WebCore::Color::Color();
                    if (v17 > 0xFF)
                    {
                      char v51 = v17;
                      if (!v21)
                      {
                        __int16 v52 = v20;
                        WebCore::TextIndicatorData::TextIndicatorData((uint64_t)a2, v43);
                        a2[112] = 1;
                        if ((v50 & 0x8000000000000) != 0)
                        {
                          long long v30 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
                          if (atomic_fetch_add((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                          {
                            atomic_store(1u, v30);
                            WTF::fastFree((WTF *)v30, v19);
                          }
                        }
                        char v27 = v49;
                        unint64_t v49 = 0;
                        if (v27)
                        {
                          if (v27[2] == 1) {
                            (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
                          }
                          else {
                            --v27[2];
                          }
                        }
                        uint64_t v28 = v48;
                        unint64_t v48 = 0;
                        if (v28)
                        {
                          if (v28[2] == 1) {
                            (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
                          }
                          else {
                            --v28[2];
                          }
                        }
                        unint64_t v29 = v47;
                        unint64_t v47 = 0;
                        if (v29)
                        {
                          if (v29[2] == 1) {
                            (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
                          }
                          else {
                            --v29[2];
                          }
                        }
                        uint64_t result = (uint64_t)v44;
                        if (v44)
                        {
                          unint64_t v44 = 0;
                          LODWORD(v45) = 0;
                          uint64_t result = WTF::fastFree((WTF *)result, v19);
                        }
LABEL_44:
                        if (!v54) {
                          goto LABEL_46;
                        }
                        unint64_t v22 = v53;
                        if ((v53 & 0x8000000000000) == 0) {
                          goto LABEL_46;
                        }
                        goto LABEL_66;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __break(1u);
LABEL_66:
  uint64_t result = v22 & 0xFFFFFFFFFFFFLL;
  if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = WTF::fastFree((WTF *)result, v19);
  }
LABEL_46:
  if (v56)
  {
    uint64_t result = v55;
    uint64_t v55 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else {
        --*(_DWORD *)(result + 8);
      }
    }
  }
  if (v58)
  {
    uint64_t result = v57;
    uint64_t v57 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else {
        --*(_DWORD *)(result + 8);
      }
    }
  }
  if (v60)
  {
    uint64_t result = v59;
    uint64_t v59 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else {
        --*(_DWORD *)(result + 8);
      }
    }
  }
  if (v63)
  {
    uint64_t result = (uint64_t)v61;
    if (v61)
    {
      int v61 = 0;
      LODWORD(v62) = 0;
      return WTF::fastFree((WTF *)result, v19);
    }
  }
  return result;
}

void sub_198868BC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_DWORD *a26,char a27,_DWORD *a28,char a29,_DWORD *a30,char a31)
{
  if (a25)
  {
    if ((a24 & 0x8000000000000) != 0)
    {
      unint64_t v33 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, a2);
      }
    }
  }
  if (a27 && a26)
  {
    if (a26[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a26 + 8))(a26);
    }
    else {
      --a26[2];
    }
  }
  if (a29 && a28)
  {
    if (a28[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a28 + 8))(a28);
    }
    else {
      --a28[2];
    }
  }
  if (a31 && a30)
  {
    if (a30[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a30 + 8))(a30);
    }
    else {
      --a30[2];
    }
  }
  if (*(unsigned char *)(v31 - 136))
  {
    unint64_t v34 = *(WTF **)(v31 - 152);
    if (v34)
    {
      *(void *)(v31 - 152) = 0;
      *(_DWORD *)(v31 - 144) = 0;
      WTF::fastFree(v34, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(IPC::Encoder *a1, unsigned char *a2)
{
  IPC::ArgumentCoder<WebCore::MediaTrackConstraintSetMap,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 944));

  return IPC::Encoder::operator<<<BOOL>(a1, a2 + 960);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaConstraints,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)a1;
  IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(v50, a1);
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>((void *)v2);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    if (v4 < 0x456)
    {
      if (v4)
      {
        unsigned int v7 = 944 * v4;
        uint64_t v8 = WTF::fastMalloc((WTF *)(944 * v4));
        LODWORD(v52) = v7 / 0x3B0;
        uint64_t v51 = v8;
        do
        {
          IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(v39, (uint64_t *)v2);
          if (!(_BYTE)v44) {
            goto LABEL_21;
          }
          if (HIDWORD(v52) == v52)
          {
            WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaTrackConstraintSetMap>((uint64_t)&v51, (unint64_t)v39);
          }
          else
          {
            WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v51 + 944 * HIDWORD(v52), (uint64_t)v39);
            ++HIDWORD(v52);
          }
          std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v10);
          --v6;
        }
        while (v6);
        uint64_t v11 = v51;
        unsigned int v13 = v52;
        unsigned int v12 = HIDWORD(v52);
      }
      else
      {
        unsigned int v12 = 0;
        unsigned int v13 = 0;
        uint64_t v11 = 0;
      }
      uint64_t v51 = 0;
      uint64_t v47 = v11;
LABEL_14:
      uint64_t v52 = 0;
      unint64_t v48 = __PAIR64__(v12, v13);
      char v49 = 1;
      uint64_t v14 = WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
      goto LABEL_23;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(v39, (uint64_t *)v2);
      if (!(_BYTE)v44) {
        break;
      }
      if (HIDWORD(v52) == v52)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaTrackConstraintSetMap>((uint64_t)&v51, (unint64_t)v39);
      }
      else
      {
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v51 + 944 * HIDWORD(v52), (uint64_t)v39);
        ++HIDWORD(v52);
      }
      std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v15);
      if (!--v6)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v51, HIDWORD(v52));
        uint64_t v16 = v51;
        uint64_t v51 = 0;
        uint64_t v47 = v16;
        unsigned int v13 = v52;
        unsigned int v12 = HIDWORD(v52);
        goto LABEL_14;
      }
    }
LABEL_21:
    LOBYTE(v47) = 0;
    char v49 = 0;
    std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v9);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v17);
  }
  else
  {
    LOBYTE(v47) = 0;
    char v49 = 0;
  }
  uint64_t v18 = *(char **)v2;
  unint64_t v19 = *(void *)(v2 + 8);
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v14 = *(void *)(v2 + 24);
  if (v14) {
    goto LABEL_35;
  }
LABEL_23:
  while (1)
  {
    unint64_t v19 = *(void *)(v2 + 8);
    uint64_t v18 = *(char **)v2;
    unint64_t v20 = *(void *)(v2 + 16) - *(void *)v2;
    if (v19 <= v20) {
      break;
    }
    BOOL v21 = &v18[v20];
    *(void *)(v2 + 16) = v21 + 1;
    if (!v18)
    {
      unint64_t v34 = v19;
      unint64_t v35 = 0;
      goto LABEL_38;
    }
    unsigned int v22 = *v21;
    if (v22 > 1) {
      goto LABEL_39;
    }
    uint64_t v2 = 0;
    BOOL v23 = v22 != 0;
LABEL_27:
    if (v50[944])
    {
      uint64_t v14 = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v39, (uint64_t)v50);
      if (v49)
      {
        uint64_t v24 = v47;
        uint64_t v47 = 0;
        uint64_t v44 = v24;
        unint64_t v25 = v48;
        unint64_t v48 = 0;
        unint64_t v45 = v25;
        if (!v2)
        {
          BOOL v46 = v23;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a2, (uint64_t)v39);
          uint64_t v26 = v44;
          uint64_t v44 = 0;
          *(void *)(a2 + 944) = v26;
          unint64_t v27 = v45;
          unint64_t v45 = 0;
          *(void *)(a2 + 952) = v27;
          *(unsigned char *)(a2 + 960) = v46;
          *(unsigned char *)(a2 + 968) = 1;
          WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v28);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v29);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v30);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v31);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v32);
          goto LABEL_31;
        }
      }
    }
    __break(1u);
LABEL_35:
    if (v19) {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v14 + 16))(v14, v18);
    }
  }
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v36 = *(void *)(v2 + 24);
  if (v36)
  {
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
      unint64_t v35 = *(char **)v2;
      unint64_t v34 = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = 0;
    }
  }
LABEL_38:
  unint64_t v19 = 0;
  uint64_t v18 = 0;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v37 = *(void *)(v2 + 24);
  if (v37)
  {
    if (v34)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v37 + 16))(v37, v35, v34);
      uint64_t v18 = *(char **)v2;
      unint64_t v19 = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v19 = 0;
      uint64_t v18 = 0;
    }
  }
LABEL_39:
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v38 = *(void *)(v2 + 24);
  if (v38)
  {
    if (v19)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v38 + 16))(v38, v18);
      if (*(void *)v2)
      {
        BOOL v23 = 0;
        uint64_t v2 = 1;
        goto LABEL_27;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 968) = 0;
LABEL_31:
  if (v49) {
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v18);
  }
  return std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v18);
}

void sub_1988692AC(_Unwind_Exception *a1, void *a2)
{
  if (LOBYTE(STACK[0x3E0])) {
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3D0], a2);
  }
  std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x3E8], a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(unsigned char *a1, uint64_t *a2)
{
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>(v152, a2);
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>(v148, a2);
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>(v144, a2);
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>(v140, a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v134, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v128, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v122, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v118, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v114, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v110, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v108, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v106, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v104, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v102, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v95, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v90, (IPC::Decoder *)a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v85, (IPC::Decoder *)a2);
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v80, (IPC::Decoder *)a2);
  if (!*a2) {
    goto LABEL_76;
  }
  LOBYTE(v12) = 0;
  char v15 = 0;
  LOBYTE(v16) = 0;
  char v19 = 0;
  LOBYTE(v20) = 0;
  char v23 = 0;
  LOBYTE(v24) = 0;
  char v27 = 0;
  LOBYTE(v28) = 0;
  char v33 = 0;
  LOBYTE(v34) = 0;
  char v39 = 0;
  LOBYTE(v40) = 0;
  char v45 = 0;
  LOBYTE(v46) = 0;
  char v49 = 0;
  LOBYTE(v50) = 0;
  char v53 = 0;
  LOBYTE(v54) = 0;
  char v57 = 0;
  v58[0] = 0;
  v58[48] = 0;
  v59[0] = 0;
  v59[48] = 0;
  v60[0] = 0;
  v60[48] = 0;
  v61[0] = 0;
  v61[48] = 0;
  LOBYTE(v62) = 0;
  char v67 = 0;
  LOBYTE(v68) = 0;
  char v71 = 0;
  LOBYTE(v72) = 0;
  char v75 = 0;
  LOBYTE(v76) = 0;
  char v79 = 0;
  if (!v155) {
    goto LABEL_75;
  }
  if (v154)
  {
    char v13 = v152[8];
    v14[0] = v153[0];
    *(_OWORD *)((char *)v14 + 13) = *(_OWORD *)((char *)v153 + 13);
    unsigned int v12 = &unk_1EE9B4688;
    char v15 = 1;
  }
  if (!v151) {
    goto LABEL_75;
  }
  if (v150)
  {
    char v17 = v148[8];
    v18[0] = v149[0];
    *(_OWORD *)((char *)v18 + 13) = *(_OWORD *)((char *)v149 + 13);
    uint64_t v16 = &unk_1EE9B4688;
    char v19 = 1;
  }
  if (!v147) {
    goto LABEL_75;
  }
  if (v146)
  {
    char v21 = v144[8];
    v22[0] = v145[0];
    *(_OWORD *)((char *)v22 + 13) = *(_OWORD *)((char *)v145 + 13);
    unint64_t v20 = &unk_1EE9B4688;
    char v23 = 1;
  }
  if (!v143) {
    goto LABEL_75;
  }
  if (v142)
  {
    char v25 = v140[8];
    v26[0] = v141[0];
    *(_OWORD *)((char *)v26 + 13) = *(_OWORD *)((char *)v141 + 13);
    uint64_t v24 = &unk_1EE9B4688;
    char v27 = 1;
  }
  if (!v139) {
    goto LABEL_75;
  }
  if (v138)
  {
    char v29 = v134[8];
    *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)((char *)v137 + 9);
    long long v30 = v135;
    long long v31 = v136;
    v32[0] = v137[0];
    uint64_t v28 = &unk_1EE9B4700;
    char v33 = 1;
  }
  if (!v133) {
    goto LABEL_75;
  }
  if (v132)
  {
    char v35 = v128[8];
    long long v36 = v129;
    long long v37 = v130;
    v38[0] = v131[0];
    *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)((char *)v131 + 9);
    unint64_t v34 = &unk_1EE9B4700;
    char v39 = 1;
  }
  if (!v127) {
    goto LABEL_75;
  }
  if (v126)
  {
    char v41 = v122[8];
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v125 + 9);
    long long v42 = v123;
    long long v43 = v124;
    v44[0] = v125[0];
    uint64_t v40 = &unk_1EE9B4700;
    char v45 = 1;
  }
  if (!v121) {
    goto LABEL_75;
  }
  if (v120)
  {
    char v47 = v118[8];
    BOOL v46 = &unk_1EE9B4750;
    int v48 = v119;
    char v49 = 1;
  }
  if (!v117) {
    goto LABEL_75;
  }
  if (v116)
  {
    char v51 = v114[8];
    uint64_t v50 = &unk_1EE9B4750;
    int v52 = v115;
    char v53 = 1;
  }
  if (!v113) {
    goto LABEL_75;
  }
  if (v112)
  {
    char v55 = v110[8];
    unsigned __int8 v54 = &unk_1EE9B4750;
    int v56 = v111;
    char v57 = 1;
  }
  if (!v109) {
    goto LABEL_75;
  }
  uint64_t result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v58, (uint64_t)v108);
  if (!v107) {
    goto LABEL_75;
  }
  uint64_t result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v59, (uint64_t)v106);
  if (!v105) {
    goto LABEL_75;
  }
  uint64_t result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v60, (uint64_t)v104);
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v61, (uint64_t)v102);
  if (!v101) {
    goto LABEL_75;
  }
  if (v67 == v100)
  {
    if (v67)
    {
      char v63 = v96;
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v99 + 9);
      long long v64 = v97;
      long long v65 = v98;
      v66[0] = v99[0];
    }
  }
  else if (v67)
  {
    char v67 = 0;
  }
  else
  {
    char v63 = v96;
    *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v99 + 9);
    long long v64 = v97;
    long long v65 = v98;
    v66[0] = v99[0];
    uint64_t v62 = &unk_1EE9B4700;
    char v67 = 1;
  }
  if (!v94) {
    goto LABEL_75;
  }
  if (v71 == v93)
  {
    if (v71)
    {
      char v69 = v91;
      int v70 = v92;
    }
  }
  else if (v71)
  {
    char v71 = 0;
  }
  else
  {
    char v69 = v91;
    long long v68 = &unk_1EE9B4750;
    int v70 = v92;
    char v71 = 1;
  }
  if (!v89) {
    goto LABEL_75;
  }
  if (v75 == v88)
  {
    if (v75)
    {
      char v73 = v86;
      int v74 = v87;
    }
  }
  else if (v75)
  {
    char v75 = 0;
  }
  else
  {
    char v73 = v86;
    int v72 = &unk_1EE9B4750;
    int v74 = v87;
    char v75 = 1;
  }
  if (!v84)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    *a1 = 0;
    a1[944] = 0;
    goto LABEL_65;
  }
  if (v79 == v83)
  {
    if (v79)
    {
      char v77 = v81;
      int v78 = v82;
    }
  }
  else if (v79)
  {
    char v79 = 0;
  }
  else
  {
    char v77 = v81;
    int v76 = &unk_1EE9B4750;
    int v78 = v82;
    char v79 = 1;
  }
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)a1, (uint64_t)&v12);
  a1[944] = 1;
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v7);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, v8);
  uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v9);
LABEL_65:
  if (v103) {
    uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v102, v5);
  }
  if (v105) {
    uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v104, v5);
  }
  if (v107) {
    uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v106, v5);
  }
  if (v109) {
    uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v108, v5);
  }
  if (!a1[944])
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v11) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v10);
      }
    }
  }
  return result;
}

void sub_198869B7C(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PromisedAttachmentInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v10, a1);
  if (!*(void *)a1)
  {
LABEL_13:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (!v14 || (unint64_t v6 = v13, v13 = 0, !v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  v9[0] = 0;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  v9[1] = 0;
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
LABEL_5:
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
LABEL_6:
  if (v14)
  {
    uint64_t result = v13;
    char v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198869D2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 24))
  {
    unint64_t v4 = *(WTF::StringImpl **)(v2 - 32);
    *(void *)(v2 - 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RecentSearch,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  if (*(void *)a1)
  {
    if (v8)
    {
      unint64_t v6 = v7;
      uint64_t v7 = 0;
      if ((_BYTE)v5)
      {
        *(void *)a2 = v6;
        *(void *)(a2 + 8) = result;
        *(unsigned char *)(a2 + 16) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v8)
  {
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198869E08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 17));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 24));
  return IPC::VectorArgumentCoder<false,WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);
}

uint64_t IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v65);
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *(char **)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8)
  {
    unint64_t v41 = 0;
    long long v42 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        long long v42 = *(char **)a1;
        unint64_t v41 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v41 = 0;
        long long v42 = 0;
      }
    }
    goto LABEL_45;
  }
  unint64_t v9 = &v7[v8];
  uint64_t v10 = (uint64_t)&v7[v8 + 1];
  *((void *)a1 + 2) = v10;
  if (!v7)
  {
    unint64_t v41 = v6;
    long long v42 = 0;
LABEL_45:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44 && v41)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
      unsigned int v11 = 0;
      uint64_t v7 = *(char **)a1;
      unint64_t v6 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      unsigned int v11 = 0;
    }
    goto LABEL_47;
  }
  unsigned int v11 = *v9;
  if (v11 < 2)
  {
    int v12 = 0;
    char v13 = 1;
    goto LABEL_5;
  }
LABEL_47:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (!v45 || !v6)
  {
    unint64_t v46 = 0;
    uint64_t v7 = 0;
    char v60 = 0;
    int v61 = 1;
LABEL_49:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v47 = *((void *)a1 + 3);
    if (v47 && v46)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v47 + 16))(v47, v7, v46);
      unsigned int v17 = 0;
      uint64_t v7 = *(char **)a1;
      unint64_t v6 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      unsigned int v17 = 0;
    }
    goto LABEL_51;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v45 + 16))(v45, v7);
  char v13 = 0;
  uint64_t v7 = *(char **)a1;
  unint64_t v6 = *((void *)a1 + 1);
  int v12 = 1;
  uint64_t v10 = *((void *)a1 + 2);
LABEL_5:
  if (v11) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unint64_t v15 = v10 - (void)v7;
  char v60 = v14;
  int v61 = v12;
  if (v6 <= v15)
  {
    unint64_t v46 = 0;
    uint64_t v58 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v58 && v6)
    {
      (*(void (**)(uint64_t))(*(void *)v58 + 16))(v58);
      uint64_t v7 = *(char **)a1;
      unint64_t v46 = *((void *)a1 + 1);
    }
    else
    {
      uint64_t v7 = 0;
    }
    goto LABEL_49;
  }
  uint64_t v16 = &v7[v15];
  *((void *)a1 + 2) = v16 + 1;
  if (!v7)
  {
    unint64_t v46 = v6;
    goto LABEL_49;
  }
  unsigned int v17 = *v16;
  if (v17 < 2)
  {
    uint64_t v18 = 0;
    char v19 = 1;
    goto LABEL_12;
  }
LABEL_51:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v48 = *((void *)a1 + 3);
  if (v48 && v6) {
    (*(void (**)(uint64_t, char *))(*(void *)v48 + 16))(v48, v7);
  }
  char v19 = 0;
  uint64_t v18 = 1;
LABEL_12:
  if (v17) {
    char v20 = v19;
  }
  else {
    char v20 = 0;
  }
  uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v59 = v22;
  unint64_t v23 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v24)
  {
    LOBYTE(v62) = 0;
    char v64 = 0;
    goto LABEL_31;
  }
  uint64_t v2 = (WTF::StringImpl *)v23;
  int v72 = 0;
  uint64_t v73 = 0;
  if (v23 < 0x2AAA)
  {
    if (v23)
    {
      unsigned int v25 = 96 * v23;
      uint64_t v26 = WTF::fastMalloc((WTF *)(96 * v23));
      LODWORD(v73) = v25 / 0x60;
      int v72 = (WTF::StringImpl *)v26;
      uint64_t v3 = &v68;
      do
      {
        IPC::Decoder::decode<WebCore::TextManipulationToken>((uint64_t)&v67, a1);
        if (!v71) {
          goto LABEL_30;
        }
        unsigned int v28 = HIDWORD(v73);
        if (HIDWORD(v73) == v73)
        {
          WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationToken>((uint64_t)&v72, (unint64_t)&v67);
        }
        else
        {
          long long v30 = v72;
          long long v31 = (void *)((char *)v72 + 96 * HIDWORD(v73));
          *long long v31 = v67;
          uint64_t v32 = *((void *)&v67 + 1);
          *((void *)&v67 + 1) = 0;
          v31[1] = v32;
          std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)(v31 + 2), (uint64_t)&v68);
          *((unsigned char *)v30 + 96 * v28 + 88) = v70;
          ++HIDWORD(v73);
        }
        std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67, v29);
        uint64_t v2 = (WTF::StringImpl *)((char *)v2 - 1);
      }
      while (v2);
      char v33 = v72;
      LODWORD(v2) = v73;
      LODWORD(v3) = HIDWORD(v73);
    }
    else
    {
      LODWORD(v3) = 0;
      char v33 = 0;
    }
    int v72 = 0;
    uint64_t v62 = v33;
    LODWORD(v73) = 0;
    LODWORD(v63) = v2;
    goto LABEL_28;
  }
  do
  {
    IPC::Decoder::decode<WebCore::TextManipulationToken>((uint64_t)&v67, a1);
    if (!v71)
    {
LABEL_30:
      LOBYTE(v62) = 0;
      char v64 = 0;
      std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67, v27);
      WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v38);
LABEL_31:
      char v35 = *(char **)a1;
      uint64_t v36 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t result = *((void *)a1 + 3);
      if (result) {
        goto LABEL_42;
      }
      goto LABEL_32;
    }
    uint64_t v49 = v18;
    unsigned int v50 = HIDWORD(v73);
    if (HIDWORD(v73) == v73)
    {
      WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationToken>((uint64_t)&v72, (unint64_t)&v67);
    }
    else
    {
      int v52 = v72;
      char v53 = (void *)((char *)v72 + 96 * HIDWORD(v73));
      *char v53 = v67;
      uint64_t v54 = *((void *)&v67 + 1);
      *((void *)&v67 + 1) = 0;
      v53[1] = v54;
      uint64_t v3 = (long long *)(v53 + 1);
      std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v3 + 8, (uint64_t)&v68);
      *((unsigned char *)v52 + 96 * v50 + 88) = v70;
      ++HIDWORD(v73);
    }
    uint64_t result = std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67, v51);
    uint64_t v2 = (WTF::StringImpl *)((char *)v2 - 1);
    uint64_t v18 = v49;
  }
  while (v2);
  unsigned int v55 = HIDWORD(v73);
  uint64_t v2 = v72;
  if (v73 <= HIDWORD(v73)) {
    goto LABEL_70;
  }
  int v56 = v72;
  if (!HIDWORD(v73)) {
    goto LABEL_63;
  }
  if (HIDWORD(v73) >= 0x2AAAAAB)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v57 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v73)));
    LODWORD(v73) = 96 * v55 / 0x60;
    int v72 = (WTF::StringImpl *)v57;
    int v56 = v2;
    if ((WTF::StringImpl *)v57 != v2)
    {
      WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v2, (WTF::StringImpl *)((char *)v2 + 96 * v55), v57);
      int v56 = v72;
    }
LABEL_63:
    if (v2)
    {
      if (v56 == v2)
      {
        int v72 = 0;
        LODWORD(v73) = 0;
      }
      WTF::fastFree(v2, v24);
      uint64_t v2 = v72;
    }
    else
    {
      uint64_t v2 = v56;
    }
LABEL_70:
    int v72 = 0;
    uint64_t v62 = v2;
    LODWORD(v2) = v73;
    LODWORD(v3) = HIDWORD(v73);
    LODWORD(v73) = 0;
    LODWORD(v63) = v2;
    LODWORD(v18) = v49;
LABEL_28:
    HIDWORD(v73) = 0;
    HIDWORD(v63) = v3;
    char v64 = 1;
    uint64_t result = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v24);
    int v37 = 0;
    if (*(void *)a1)
    {
      while (1)
      {
        if (v66)
        {
          long long v67 = v65;
          if (!v61)
          {
            LOBYTE(v68) = v60;
            if (!v18)
            {
              BYTE1(v68) = v20;
              if (v59)
              {
                *((void *)&v68 + 1) = v21;
                if (!v37)
                {
                  char v39 = v62;
                  uint64_t v62 = 0;
                  uint64_t v63 = 0;
                  long long v40 = v68;
                  *(_OWORD *)a2 = v67;
                  *(_OWORD *)(a2 + 16) = v40;
                  v69[0] = 0;
                  v69[1] = 0;
                  *(void *)(a2 + 32) = v39;
                  *(_DWORD *)(a2 + 40) = v2;
                  *(_DWORD *)(a2 + 44) = v3;
                  *(unsigned char *)(a2 + 48) = 1;
                  WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, v35);
                  return WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v35);
                }
              }
            }
          }
        }
        __break(1u);
LABEL_42:
        if (v36) {
          uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v35);
        }
LABEL_32:
        if (!*(void *)a1) {
          break;
        }
        int v37 = 1;
      }
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 48) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 48) = 0;
      return WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v35);
    }
  }
  return result;
}

void sub_19886A538(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 104, v14);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::TextManipulationToken,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::TextManipulationTokenInfo>,void>::encode<IPC::Encoder,std::optional<WebCore::TextManipulationTokenInfo> const&>(a1, a2 + 16);

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 88));
}

void IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode(IPC::Encoder *a1, WebCore::AuthenticationChallengeBase *this)
{
  uint64_t v4 = WebCore::AuthenticationChallengeBase::protectionSpace(this);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v4);
  LODWORD(cf) = *(_DWORD *)(v4 + 16);
  IPC::Encoder::operator<<<int>(a1, (int *)&cf);
  LOBYTE(cf) = *(unsigned char *)(v4 + 20);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&cf);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v4 + 8));
  LOBYTE(cf) = *(unsigned char *)(v4 + 21);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&cf);
  WebCore::ProtectionSpace::getPlatformDataToSerialize((uint64_t *)&cf, (WebCore::ProtectionSpace *)v4);
  LODWORD(v4) = v15;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19886A7A8);
    }
    *uint64_t v5 = 1;
    if (!v15)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
LABEL_18:
      JUMPOUT(0x19886A788);
    }
    IPC::encodeObjectDirectly<NSURLProtectionSpace>(a1, (objc_object *)cf);
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19886A7C8);
    }
    *uint64_t v5 = 0;
  }
  if (v15)
  {
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  unint64_t v8 = (WebCore::Credential *)WebCore::AuthenticationChallengeBase::proposedCredential(this);
  IPC::ArgumentCoder<WebCore::Credential,void>::encode(a1, v8);
  int v9 = WebCore::AuthenticationChallengeBase::previousFailureCount(this);
  uint64_t v10 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v11 <= 3)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  *uint64_t v10 = v9;
  uint64_t v12 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse(this);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, v12);
  char v13 = (WebCore::ResourceError *)WebCore::AuthenticationChallengeBase::error(this);

  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, v13);
}

void sub_19886A7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::decode@<X0>(const void ***a1@<X0>, uint64_t a2@<X8>)
{
  v88[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v78);
  uint64_t v4 = IPC::Decoder::decode<unsigned int>(a1);
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = (char *)a1[2] - (char *)*a1;
  if (v5 <= v7) {
    goto LABEL_79;
  }
  unint64_t v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (const void **)(v8 + 1);
  if (!v6)
  {
    unint64_t v53 = v5;
    uint64_t v54 = 0;
    goto LABEL_80;
  }
  int v9 = *v8;
  if ((v9 - 1) >= 8) {
    goto LABEL_81;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v75);
    unint64_t v5 = (unint64_t)a1[1];
    unint64_t v11 = *a1;
    unint64_t v12 = (char *)a1[2] - (char *)*a1;
    if (v5 <= v12)
    {
      unint64_t v58 = 0;
      char v59 = 0;
      *a1 = 0;
      a1[1] = 0;
      char v60 = a1[3];
      if (v60)
      {
        if (v5)
        {
          (*((void (**)(const void **))*v60 + 2))(v60);
          char v59 = *a1;
          unint64_t v58 = (unint64_t)a1[1];
        }
        else
        {
          unint64_t v58 = 0;
          char v59 = 0;
        }
      }
    }
    else
    {
      char v13 = (unsigned __int8 *)v11 + v12;
      uint64_t v14 = (uint64_t)v11 + v12 + 1;
      a1[2] = (const void **)v14;
      if (v11)
      {
        int v15 = 0;
        uint64_t v16 = *v13;
        if ((v16 - 1) < 9 || v16 == 100) {
          goto LABEL_8;
        }
        goto LABEL_67;
      }
      unint64_t v58 = v5;
      char v59 = 0;
    }
    unint64_t v11 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    int v61 = a1[3];
    if (v61)
    {
      if (v58)
      {
        (*((void (**)(const void **, const void **, unint64_t))*v61 + 2))(v61, v59, v58);
        unint64_t v11 = *a1;
        unint64_t v5 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v5 = 0;
      }
    }
LABEL_67:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v44 = a1[3];
    if (!v44 || !v5)
    {
      uint64_t v16 = 0;
      unint64_t v45 = 0;
      unint64_t v11 = 0;
      int v15 = 1;
LABEL_69:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v46 = a1[3];
      if (v46 && v45)
      {
        (*((void (**)(const void **, const void **, unint64_t))*v46 + 2))(v46, v11, v45);
        unint64_t v11 = *a1;
        unint64_t v5 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_71;
    }
    (*((void (**)(const void **, const void **))*v44 + 2))(v44, v11);
    uint64_t v16 = 0;
    unint64_t v11 = *a1;
    unint64_t v5 = (unint64_t)a1[1];
    int v15 = 1;
    uint64_t v14 = (uint64_t)a1[2];
LABEL_8:
    unint64_t v17 = v14 - (void)v11;
    if (v5 <= v17)
    {
      unint64_t v45 = 0;
      char v70 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v5 && v70)
      {
        (*((void (**)(const void **))*v70 + 2))(v70);
        unint64_t v11 = *a1;
        unint64_t v45 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v11 = 0;
      }
      goto LABEL_69;
    }
    uint64_t v18 = (unsigned __int8 *)v11 + v17;
    a1[2] = (const void **)(v18 + 1);
    if (!v11)
    {
      unint64_t v45 = v5;
      goto LABEL_69;
    }
    unsigned int v19 = *v18;
    if (v19 < 2)
    {
      if (!v19)
      {
        unint64_t v23 = 0;
        char v24 = 1;
        goto LABEL_25;
      }
      char v20 = (const void *)objc_opt_class();
      v88[0] = v20;
      if (v20) {
        CFRetain(v20);
      }
      WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v81, v88, 1);
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a1 + 7, &v81);
      IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLProtectionSpace>((uint64_t *)a1, (uint64_t)cf);
      int v22 = LOBYTE(cf[1]);
      if (LOBYTE(cf[1]))
      {
        unint64_t v23 = (void *)cf[0];
        if (cf[0])
        {
          CFRetain(cf[0]);
          CFRelease(v23);
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      if (v81) {
        WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v81, v21);
      }
      CFTypeRef v25 = v88[0];
      v88[0] = 0;
      if (v25)
      {
        CFRelease(v25);
        if (v22)
        {
LABEL_23:
          if (*a1)
          {
            char v24 = 0;
            unsigned int v19 = 0;
            goto LABEL_25;
          }
          if (v23)
          {
            CFRelease(v23);
            unint64_t v11 = *a1;
            goto LABEL_106;
          }
LABEL_105:
          unint64_t v11 = 0;
          goto LABEL_106;
        }
      }
      else if (v22)
      {
        goto LABEL_23;
      }
      unint64_t v11 = 0;
      char v51 = *a1;
      unsigned int v50 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      int v52 = a1[3];
      if (v52)
      {
        if (!v50) {
          goto LABEL_105;
        }
        (*((void (**)(const void **, const void **))*v52 + 2))(v52, v51);
        unint64_t v11 = *a1;
        if (*a1) {
          goto LABEL_78;
        }
      }
LABEL_106:
      char v69 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v47 = a1[3];
      if (!v47 || !v69) {
        goto LABEL_72;
      }
      goto LABEL_102;
    }
LABEL_71:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v47 = a1[3];
    if (!v47 || !v5) {
      goto LABEL_72;
    }
LABEL_102:
    (*((void (**)(const void **, const void **))*v47 + 2))(v47, v11);
LABEL_72:
    uint64_t v26 = (WTF::StringImpl *)*a1;
    uint64_t v48 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v49 = a1[3];
    if (!v49 || !v48 || ((*((void (**)(const void **, WTF::StringImpl *))*v49 + 2))(v49, v26), !*a1))
    {
      LOBYTE(v84) = 0;
      char v87 = 0;
      int v29 = 1;
      goto LABEL_42;
    }
    unint64_t v23 = 0;
    char v24 = 1;
    unsigned int v19 = 1;
LABEL_25:
    if (!v79 || (v4 & 0xFF00000000) == 0 || i <= 0xFF || !v76 || v15 || v19) {
      goto LABEL_78;
    }
    LOBYTE(v81) = 0;
    char v82 = 0;
    if ((v24 & 1) == 0)
    {
      char v81 = (const void **)v23;
      char v82 = 1;
      unint64_t v23 = 0;
    }
    MEMORY[0x199732A10](cf, &v78, v4, i, &v75, v16, &v81);
    long long v84 = *(_OWORD *)cf;
    v85[0] = v72[0];
    *(_DWORD *)((char *)v85 + 3) = *(_DWORD *)((char *)v72 + 3);
    uint64_t v86 = v73;
    char v87 = 1;
    uint64_t v73 = 0;
    cf[0] = 0;
    cf[1] = 0;
    if (v82)
    {
      char v27 = v81;
      char v81 = 0;
      if (v27) {
        CFRelease(v27);
      }
    }
    if (v23) {
      char v28 = v24;
    }
    else {
      char v28 = 1;
    }
    if ((v28 & 1) == 0) {
      CFRelease(v23);
    }
    int v29 = 0;
LABEL_42:
    if (v76)
    {
      long long v30 = v75;
      char v75 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v26);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    if (!v79) {
      goto LABEL_51;
    }
    long long v31 = v78;
    int v78 = 0;
    if (!v31) {
      goto LABEL_51;
    }
    if (*(_DWORD *)v31 != 2)
    {
      *(_DWORD *)v31 -= 2;
LABEL_51:
      if (!v29) {
        goto LABEL_54;
      }
      goto LABEL_87;
    }
    WTF::StringImpl::destroy(v31, v26);
    if (!v29) {
      goto LABEL_54;
    }
LABEL_87:
    uint64_t v62 = *a1;
    uint64_t v63 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    char v64 = a1[3];
    if (v64 && v63) {
      (*((void (**)(const void **, const void **))*v64 + 2))(v64, v62);
    }
LABEL_54:
    IPC::Decoder::decode<WebCore::Credential>((uint64_t *)a1, (uint64_t)&v81);
    uint64_t v32 = *a1;
    unint64_t v33 = (unint64_t)a1[1];
    unint64_t v34 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a1;
    if (v33 < v34 || v33 - v34 <= 3)
    {
      unint64_t v65 = 0;
      char v66 = 0;
      *a1 = 0;
      a1[1] = 0;
      long long v67 = a1[3];
      if (v67)
      {
        if (v33)
        {
          (*((void (**)(const void **))*v67 + 2))(v67);
          char v66 = *a1;
          unint64_t v65 = (unint64_t)a1[1];
        }
        else
        {
          unint64_t v65 = 0;
          char v66 = 0;
        }
      }
    }
    else
    {
      char v35 = (_DWORD *)((char *)v32 + v34);
      a1[2] = (const void **)(v35 + 1);
      if (v32)
      {
        int v36 = 0;
        uint64_t v4 = *v35 & 0xFFFFFF00;
        int v37 = *v35;
        goto LABEL_58;
      }
      unint64_t v65 = v33;
      char v66 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    long long v68 = a1[3];
    if (v68 && v65) {
      (*((void (**)(const void **, const void **))*v68 + 2))(v68, v66);
    }
    uint64_t v4 = 0;
    int v37 = 0;
    int v36 = 1;
LABEL_58:
    IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)a1, &v78);
    IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)a1, (uint64_t)&v75);
    if (!*a1) {
      break;
    }
    if (v87 && v83 && !v36 && v80 && v77)
    {
      WebCore::AuthenticationChallenge::AuthenticationChallenge((WebCore::AuthenticationChallenge *)cf, (const WebCore::ProtectionSpace *)&v84, (const WebCore::Credential *)&v81, v37 | v4, (const WebCore::ResourceResponse *)&v78, (const WebCore::ResourceError *)&v75);
      WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(a2, (uint64_t)cf);
      *(_OWORD *)(a2 + 416) = v74;
      *(unsigned char *)(a2 + 432) = 1;
      long long v74 = 0uLL;
      WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)cf, v39);
      goto LABEL_65;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    unint64_t v53 = 0;
    uint64_t v54 = 0;
    *a1 = 0;
    a1[1] = 0;
    unsigned int v55 = a1[3];
    if (v55)
    {
      if (v5)
      {
        (*((void (**)(const void **))*v55 + 2))(v55);
        uint64_t v54 = *a1;
        unint64_t v53 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v53 = 0;
        uint64_t v54 = 0;
      }
    }
LABEL_80:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    int v56 = a1[3];
    if (v56)
    {
      if (v53)
      {
        (*((void (**)(const void **, const void **, unint64_t))*v56 + 2))(v56, v54, v53);
        uint64_t v6 = *a1;
        unint64_t v5 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_81:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v57 = a1[3];
    if (v57 && v5) {
      (*((void (**)(const void **, const void **))*v57 + 2))(v57, v6);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 432) = 0;
LABEL_65:
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v38);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v78, v40);
  std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v81, v41);
  return std::__optional_destruct_base<WebCore::ProtectionSpace,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v84, v42);
}

void sub_19886B0C0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::ProtectionSpace,false>::~__optional_destruct_base[abi:sn180100](v2 - 144, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebCore::DragData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  LODWORD(v5) = *(_DWORD *)a2;
  IPC::Encoder::operator<<<int>(a1, (int *)&v5);
  LODWORD(v5) = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<int>(a1, (int *)&v5);
  LODWORD(v5) = *(_DWORD *)(a2 + 8);
  IPC::Encoder::operator<<<int>(a1, (int *)&v5);
  LODWORD(v5) = *(_DWORD *)(a2 + 12);
  IPC::Encoder::operator<<<int>(a1, (int *)&v5);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
  LOBYTE(v5) = *(unsigned char *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  LOBYTE(v5) = *(unsigned char *)(a2 + 25);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  LOBYTE(v5) = *(unsigned char *)(a2 + 48);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  long long v5 = *(_OWORD *)(a2 + 56);
  return IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)&v5);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::DragData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v55);
  uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  int v6 = v5;
  uint64_t v7 = v5;
  if (!(_BYTE)v5) {
    goto LABEL_30;
  }
  while (1)
  {
    unint64_t v53 = result;
    int v54 = v6;
    unint64_t v8 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    int v10 = (int)v9;
    uint64_t v11 = v9;
    if (!(_BYTE)v9)
    {
      int v9 = *(char **)a1;
      uint64_t v28 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v29 = *((void *)a1 + 3);
      if (v29)
      {
        if (v28)
        {
          long long v30 = v8;
          (*(void (**)(void, char *))(*(void *)v29 + 16))(*((void *)a1 + 3), v9);
          unint64_t v8 = v30;
        }
      }
    }
    char v51 = v8;
    int v52 = v10;
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)v49);
    int v6 = IPC::Decoder::decode<WTF::OptionSet<WebCore::DragOperation>>((uint64_t *)a1);
    unint64_t v12 = *((void *)a1 + 1);
    char v13 = *(char **)a1;
    unint64_t v14 = *((void *)a1 + 2) - *(void *)a1;
    if (v12 <= v14)
    {
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v33 = *((void *)a1 + 3);
      if (v33)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
          uint64_t v32 = *(char **)a1;
          unint64_t v31 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v31 = 0;
          uint64_t v32 = 0;
        }
      }
      goto LABEL_37;
    }
    int v15 = &v13[v14];
    *((void *)a1 + 2) = v15 + 1;
    if (!v13)
    {
      unint64_t v31 = v12;
      uint64_t v32 = 0;
LABEL_37:
      unint64_t v12 = 0;
      char v13 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v34 = *((void *)a1 + 3);
      if (v34)
      {
        if (v31)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
          char v13 = *(char **)a1;
          unint64_t v12 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v12 = 0;
          char v13 = 0;
        }
      }
      goto LABEL_38;
    }
    unsigned int v16 = *v15;
    if (v16 < 0x10)
    {
      unsigned int v17 = v16 | 0x100;
      goto LABEL_7;
    }
LABEL_38:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v35 = *((void *)a1 + 3);
    if (!v35)
    {
      char v13 = 0;
      unsigned int v17 = 0;
      unint64_t v12 = 0;
      goto LABEL_40;
    }
    if (!v12)
    {
      char v13 = 0;
      unsigned int v17 = 0;
LABEL_40:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v36 = *((void *)a1 + 3);
      if (v36)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v36 + 16))(v36, v13);
          int v37 = *(char **)a1;
          unint64_t v12 = *((void *)a1 + 1);
        }
        else
        {
          int v37 = 0;
        }
      }
      else
      {
        int v37 = 0;
        unint64_t v12 = 0;
      }
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v35 + 16))(v35, v13);
    unsigned int v17 = 0;
    char v13 = *(char **)a1;
    unint64_t v12 = *((void *)a1 + 1);
LABEL_7:
    if (v12 <= *((void *)a1 + 2) - (void)v13) {
      goto LABEL_40;
    }
    uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v18 + 1;
    if (!v13)
    {
      int v37 = 0;
LABEL_42:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v38 = *((void *)a1 + 3);
      if (v38)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v38 + 16))(v38, v37);
          char v13 = *(char **)a1;
          unint64_t v12 = *((void *)a1 + 1);
        }
        else
        {
          char v13 = 0;
        }
      }
      else
      {
        char v13 = 0;
        unint64_t v12 = 0;
      }
      goto LABEL_44;
    }
    unsigned int v19 = *v18;
    if (v19 < 8)
    {
      unsigned int v20 = v19 | 0x100;
      goto LABEL_11;
    }
LABEL_44:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39 && v12) {
      (*(void (**)(uint64_t, char *))(*(void *)v39 + 16))(v39, v13);
    }
    unsigned int v20 = 0;
LABEL_11:
    uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, &v47);
    if (!*(void *)a1) {
      break;
    }
    if (v56 && v7 && v11 && v50 && (unsigned __int16)v6 > 0xFFu && v17 > 0xFF && v20 > 0xFF && v48)
    {
      WebCore::DragData::DragData();
      *(_OWORD *)a2 = *(_OWORD *)v40;
      *(_OWORD *)(a2 + 10) = *(_OWORD *)&v40[10];
      *(void *)(a2 + 32) = v41;
      uint64_t v22 = v42;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      *(void *)(a2 + 40) = v22;
      *(_OWORD *)(a2 + 48) = v43;
      *(unsigned char *)(a2 + 64) = v44;
      *(void *)(a2 + 72) = v45;
      *(unsigned char *)(a2 + 80) = v46;
      *(unsigned char *)(a2 + 88) = 1;
      uint64_t v45 = 0;
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v23);
      goto LABEL_21;
    }
    __break(1u);
LABEL_30:
    char v24 = *(char **)a1;
    uint64_t v25 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26 && v25)
    {
      char v27 = result;
      (*(void (**)(void, char *))(*(void *)v26 + 16))(*((void *)a1 + 3), v24);
      uint64_t result = v27;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 88) = 0;
LABEL_21:
  if (v50) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v21);
  }
  if (v56)
  {
    uint64_t result = v55;
    unsigned int v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19886B7AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  if (a28) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, a2);
  }
  if (*(unsigned char *)(v28 - 72))
  {
    long long v30 = *(WTF::StringImpl **)(v28 - 80);
    *(void *)(v28 - 80) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::DragOperation>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DictationAlternative,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 1);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2 + 2);
}

uint64_t IPC::ArgumentCoder<WebCore::DictationAlternative,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v7);
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  uint64_t v6 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  LOBYTE(v6) = v8;
  if (!v8 || !v5)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = result;
  LOBYTE(v6) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 24) = v6;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::UserStyleSheet,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 48);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 64);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 80));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 81));
  long long v5 = *(_OWORD *)(a2 + 88);
  return IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, (uint64_t)&v5);
}

uint64_t IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v5 = *a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = a2[1];
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = a2[2];
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  char v8 = a2[3];
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = a2[4];
  IPC::Encoder::operator<<<BOOL>(a1, &v9);
  char v10 = a2[5];
  IPC::Encoder::operator<<<BOOL>(a1, &v10);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 6);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 7);
  char v11 = a2[8];
  IPC::Encoder::operator<<<BOOL>(a1, &v11);
  char v12 = a2[9];
  IPC::Encoder::operator<<<BOOL>(a1, &v12);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 10);
  char v13 = a2[11];
  return IPC::Encoder::operator<<<BOOL>(a1, &v13);
}

void *IPC::ArgumentCoder<WebCore::NotificationResources,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>(a1, &v7);
  uint64_t v5 = *a1;
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
    LOBYTE(v5) = 1;
    *(_DWORD *)uint64_t result = 1;
    char v6 = v7;
    char v7 = 0;
    result[1] = v6;
    *(void *)a2 = result;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = v5;
  if (v8)
  {
    uint64_t result = v7;
    char v7 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
  }
  return result;
}

void sub_19886BB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, char a10)
{
  if (a10 && a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 8))(a9);
    }
    else {
      --a9[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::Length>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    uint64_t v62 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v63 = a2[3];
    if (v63)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v63 + 16))(v63, v5, v4);
        uint64_t v62 = a2[1];
      }
      else
      {
        uint64_t v62 = 0;
      }
    }
    goto LABEL_70;
  }
  char v7 = (unsigned __int8 *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v62 = v4;
LABEL_70:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v64 = a2[3];
    if (!v64 || !v62) {
      goto LABEL_4;
    }
    unint64_t v65 = *(void (**)(void))(*(void *)v64 + 16);
    goto LABEL_73;
  }
  LODWORD(v8) = *v7;
  if (v8 > 0xC) {
    goto LABEL_4;
  }
  if (v8 < 2)
  {
LABEL_75:
    int v82 = v8;
    char v83 = 1;
    uint64_t result = MEMORY[0x19973ABE0](&v75, v79);
    *(_DWORD *)a1 = 0;
    *(unsigned char *)(a1 + 6) = 0;
    int v66 = v76;
    *(unsigned char *)(a1 + 4) = v76;
    *(unsigned char *)(a1 + 5) = v77;
    if ((v66 - 2) >= 9)
    {
      if (v66 != 11) {
        goto LABEL_80;
      }
    }
    else
    {
      int v67 = v78;
      *(unsigned char *)(a1 + 6) = v78;
      if (v67)
      {
        *(_DWORD *)a1 = v75;
LABEL_80:
        *(unsigned char *)(a1 + 8) = 1;
        return result;
      }
    }
    *(_DWORD *)a1 = v75;
    goto LABEL_80;
  }
  if (v8 != 2)
  {
    switch(v8)
    {
      case 3:
        uint64_t v22 = IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v23;
        unint64_t v17 = a2[1];
        uint64_t v18 = *a2;
        unint64_t v24 = a2[2] - *a2;
        if (v17 > v24)
        {
          uint64_t v25 = (unsigned __int8 *)(v18 + v24);
          a2[2] = (uint64_t)(v25 + 1);
          if (v18)
          {
            unsigned int v26 = *v25;
            if (v26 < 2)
            {
              if (!(_BYTE)v8) {
                goto LABEL_55;
              }
              uint64_t v80 = v22;
              BOOL v81 = v26 != 0;
              LODWORD(v8) = 3;
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          goto LABEL_97;
        }
        break;
      case 4:
        uint64_t v27 = IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v28;
        unint64_t v17 = a2[1];
        uint64_t v18 = *a2;
        unint64_t v29 = a2[2] - *a2;
        if (v17 > v29)
        {
          long long v30 = (unsigned __int8 *)(v18 + v29);
          a2[2] = (uint64_t)(v30 + 1);
          if (v18)
          {
            unsigned int v31 = *v30;
            if (v31 < 2)
            {
              if (!(_BYTE)v8) {
                goto LABEL_55;
              }
              uint64_t v80 = v27;
              BOOL v81 = v31 != 0;
              LODWORD(v8) = 4;
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          goto LABEL_97;
        }
        break;
      case 5:
        uint64_t v32 = IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v33;
        unint64_t v17 = a2[1];
        uint64_t v18 = *a2;
        unint64_t v34 = a2[2] - *a2;
        if (v17 > v34)
        {
          uint64_t v35 = (unsigned __int8 *)(v18 + v34);
          a2[2] = (uint64_t)(v35 + 1);
          if (v18)
          {
            unsigned int v36 = *v35;
            if (v36 < 2)
            {
              if (!(_BYTE)v8) {
                goto LABEL_55;
              }
              uint64_t v80 = v32;
              BOOL v81 = v36 != 0;
              LODWORD(v8) = 5;
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          goto LABEL_97;
        }
        break;
      case 6:
        uint64_t v37 = IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v38;
        unint64_t v17 = a2[1];
        uint64_t v18 = *a2;
        unint64_t v39 = a2[2] - *a2;
        if (v17 > v39)
        {
          long long v40 = (unsigned __int8 *)(v18 + v39);
          a2[2] = (uint64_t)(v40 + 1);
          if (v18)
          {
            unsigned int v41 = *v40;
            if (v41 < 2)
            {
              if (!(_BYTE)v8) {
                goto LABEL_55;
              }
              uint64_t v80 = v37;
              BOOL v81 = v41 != 0;
              LODWORD(v8) = 6;
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          goto LABEL_97;
        }
        break;
      case 7:
        uint64_t v42 = IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v43;
        unint64_t v17 = a2[1];
        uint64_t v18 = *a2;
        unint64_t v44 = a2[2] - *a2;
        if (v17 > v44)
        {
          uint64_t v45 = (unsigned __int8 *)(v18 + v44);
          a2[2] = (uint64_t)(v45 + 1);
          if (v18)
          {
            unsigned int v46 = *v45;
            if (v46 < 2)
            {
              if (!(_BYTE)v8) {
                goto LABEL_55;
              }
              uint64_t v80 = v42;
              BOOL v81 = v46 != 0;
              LODWORD(v8) = 7;
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          goto LABEL_97;
        }
        break;
      case 8:
        uint64_t v47 = IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v48;
        unint64_t v17 = a2[1];
        uint64_t v18 = *a2;
        unint64_t v49 = a2[2] - *a2;
        if (v17 > v49)
        {
          char v50 = (unsigned __int8 *)(v18 + v49);
          a2[2] = (uint64_t)(v50 + 1);
          if (v18)
          {
            unsigned int v51 = *v50;
            if (v51 < 2)
            {
              if (!(_BYTE)v8) {
                goto LABEL_55;
              }
              uint64_t v80 = v47;
              BOOL v81 = v51 != 0;
              LODWORD(v8) = 8;
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          goto LABEL_97;
        }
        break;
      default:
        goto LABEL_56;
    }
LABEL_82:
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v70 = a2[3];
    if (v70)
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
        uint64_t v69 = *a2;
        uint64_t v68 = a2[1];
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v69 = 0;
      }
    }
    goto LABEL_83;
  }
  uint64_t v15 = IPC::Decoder::decode<std::variant<float,int>>(a2);
  LODWORD(v8) = v16;
  unint64_t v17 = a2[1];
  uint64_t v18 = *a2;
  unint64_t v19 = a2[2] - *a2;
  if (v17 <= v19) {
    goto LABEL_82;
  }
  unsigned int v20 = (unsigned __int8 *)(v18 + v19);
  a2[2] = (uint64_t)(v20 + 1);
  if (v18)
  {
    unsigned int v21 = *v20;
    if (v21 < 2)
    {
      if ((_BYTE)v8)
      {
        uint64_t v80 = v15;
        BOOL v81 = v21 != 0;
        LODWORD(v8) = 2;
      }
      else
      {
        while (1)
        {
LABEL_55:
          while (1)
          {
            __break(1u);
LABEL_56:
            if (v8 != 9) {
              break;
            }
            uint64_t v52 = IPC::Decoder::decode<std::variant<float,int>>(a2);
            LODWORD(v8) = v53;
            unint64_t v17 = a2[1];
            uint64_t v18 = *a2;
            unint64_t v54 = a2[2] - *a2;
            if (v17 <= v54) {
              goto LABEL_82;
            }
            unsigned int v55 = (unsigned __int8 *)(v18 + v54);
            a2[2] = (uint64_t)(v55 + 1);
            if (!v18) {
              goto LABEL_97;
            }
            unsigned int v56 = *v55;
            if (v56 >= 2) {
              goto LABEL_84;
            }
            if ((_BYTE)v8)
            {
              uint64_t v80 = v52;
              BOOL v81 = v56 != 0;
              LODWORD(v8) = 9;
              goto LABEL_75;
            }
          }
          if (v8 == 11) {
            goto LABEL_75;
          }
          if (v8 != 10) {
            break;
          }
          uint64_t v57 = IPC::Decoder::decode<std::variant<float,int>>(a2);
          LODWORD(v8) = v58;
          unint64_t v17 = a2[1];
          uint64_t v18 = *a2;
          unint64_t v59 = a2[2] - *a2;
          if (v17 <= v59) {
            goto LABEL_82;
          }
          char v60 = (unsigned __int8 *)(v18 + v59);
          a2[2] = (uint64_t)(v60 + 1);
          if (!v18) {
            goto LABEL_97;
          }
          unsigned int v61 = *v60;
          if (v61 >= 2) {
            goto LABEL_84;
          }
          if ((_BYTE)v8)
          {
            uint64_t v80 = v57;
            BOOL v81 = v61 != 0;
            LODWORD(v8) = 10;
            goto LABEL_75;
          }
        }
        LODWORD(v8) = 12;
      }
      goto LABEL_75;
    }
    goto LABEL_84;
  }
LABEL_97:
  uint64_t v68 = v17;
  uint64_t v69 = v18;
LABEL_83:
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v71 = a2[3];
  if (v71)
  {
    if (v68)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v71 + 16))(v71, v69, v68);
      uint64_t v18 = *a2;
      unint64_t v17 = a2[1];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
    }
  }
LABEL_84:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v72 = a2[3];
  if (!v72 || !v17) {
    goto LABEL_4;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v72 + 16))(v72, v18);
  if (*a2)
  {
    __break(1u);
    return result;
  }
  uint64_t v73 = a2[3];
  uint64_t v74 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (!v73 || !v74) {
    goto LABEL_4;
  }
  unint64_t v65 = *(void (**)(void))(*(void *)v73 + 16);
LABEL_73:
  v65();
LABEL_4:
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v11 = a2[3];
  if (v11)
  {
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      uint64_t v8 = *a2;
      if (*a2) {
        goto LABEL_55;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v12)
  {
    unint64_t v14 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v14();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TransformOperationType>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        uint64_t v2 = *v11;
        unint64_t v1 = v11[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 0x17) {
    return v5 | 0x100;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v2);
    }
    return 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 12));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 16));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 20));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 24));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 28));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 32));
  int v4 = *(_DWORD *)(a2 + 36);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

void *IPC::ArgumentCoder<AudioStreamBasicDescription,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    unint64_t v6 = (uint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      uint64_t v267 = *v6;
      uint64_t v8 = v3;
      goto LABEL_8;
    }
    unint64_t v57 = v2;
    uint64_t v58 = 0;
  }
  else
  {
    unint64_t v57 = 0;
    uint64_t v58 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v42 = result[3];
    if (v42) {
      goto LABEL_107;
    }
  }
  while (1)
  {
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v75 = result;
      uint64_t v76 = a2;
      if (v57)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(result[3], v58, v57);
        uint64_t v267 = 0;
        uint64_t result = v75;
        uint64_t v8 = *v75;
        unint64_t v2 = v75[1];
        int v7 = 1;
        uint64_t v3 = *v75;
        a2 = v76;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v267 = 0;
        int v7 = 1;
      }
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      uint64_t v267 = 0;
      int v7 = 1;
    }
LABEL_8:
    unint64_t v9 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v9 && v2 - v9 > 3)
    {
      uint64_t v11 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v11 + 1;
      if (v3)
      {
        int v12 = 0;
        int v13 = *v11;
        unsigned int v14 = v13 & 0xFFFFFF00;
        int v15 = v13;
        goto LABEL_15;
      }
      unint64_t v59 = v2;
    }
    else
    {
      unint64_t v59 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v60 = result[3];
      if (v60)
      {
        int v124 = v7;
        uint64_t v125 = result;
        uint64_t v126 = a2;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v60 + 16))(result[3], v3);
          uint64_t result = v125;
          uint64_t v8 = *v125;
          unint64_t v59 = v125[1];
          a2 = v126;
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v124;
      }
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v77 = v7;
      unsigned __int8 v78 = result;
      uint64_t v79 = a2;
      if (v59)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(result[3], v8, v59);
        unsigned int v14 = 0;
        int v15 = 0;
        uint64_t result = v78;
        uint64_t v8 = *v78;
        unint64_t v2 = v78[1];
        int v12 = 1;
        uint64_t v3 = *v78;
        a2 = v79;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v14 = 0;
        int v15 = 0;
        int v12 = 1;
      }
      int v7 = v77;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v14 = 0;
      int v15 = 0;
      int v12 = 1;
    }
LABEL_15:
    unint64_t v16 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v16 || v2 - v16 <= 3)
    {
      unint64_t v61 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v62 = result[3];
      if (v62)
      {
        int v127 = v12;
        int v128 = v15;
        unsigned int v129 = v14;
        int v130 = v7;
        int v131 = result;
        uint64_t v132 = a2;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v62 + 16))(result[3], v3);
          uint64_t result = v131;
          uint64_t v8 = *v131;
          unint64_t v61 = v131[1];
          a2 = v132;
        }
        else
        {
          unint64_t v61 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v130;
        unsigned int v14 = v129;
        int v15 = v128;
        int v12 = v127;
      }
    }
    else
    {
      unint64_t v17 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v17 + 1;
      if (v3)
      {
        int v18 = 0;
        int v19 = *v17;
        unsigned int v20 = v19 & 0xFFFFFF00;
        int v21 = v19;
        goto LABEL_19;
      }
      unint64_t v61 = v2;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v80 = v12;
      int v81 = v15;
      unsigned int v82 = v14;
      int v83 = v7;
      long long v84 = result;
      uint64_t v85 = a2;
      if (v61)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(result[3], v8, v61);
        unsigned int v20 = 0;
        int v21 = 0;
        uint64_t result = v84;
        uint64_t v8 = *v84;
        unint64_t v2 = v84[1];
        int v18 = 1;
        uint64_t v3 = *v84;
        a2 = v85;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v20 = 0;
        int v21 = 0;
        int v18 = 1;
      }
      int v7 = v83;
      unsigned int v14 = v82;
      int v15 = v81;
      int v12 = v80;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v20 = 0;
      int v21 = 0;
      int v18 = 1;
    }
LABEL_19:
    unint64_t v22 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v22 || v2 - v22 <= 3)
    {
      unint64_t v63 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v64 = result[3];
      if (v64)
      {
        int v133 = v18;
        int v134 = v21;
        unsigned int v135 = v20;
        int v136 = v12;
        int v137 = v15;
        unsigned int v138 = v14;
        int v139 = v7;
        uint64_t v140 = result;
        uint64_t v141 = a2;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v64 + 16))(result[3], v3);
          uint64_t result = v140;
          uint64_t v8 = *v140;
          unint64_t v63 = v140[1];
          a2 = v141;
        }
        else
        {
          unint64_t v63 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v139;
        unsigned int v14 = v138;
        int v15 = v137;
        int v12 = v136;
        unsigned int v20 = v135;
        int v21 = v134;
        int v18 = v133;
      }
    }
    else
    {
      int v23 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v23 + 1;
      if (v3)
      {
        int v24 = 0;
        int v25 = *v23;
        unsigned int v26 = v25 & 0xFFFFFF00;
        int v27 = v25;
        goto LABEL_23;
      }
      unint64_t v63 = v2;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v241 = v18;
      int v86 = v21;
      unsigned int v87 = v20;
      int v88 = v12;
      int v89 = v15;
      unsigned int v90 = v14;
      int v91 = v7;
      int v92 = result;
      uint64_t v93 = a2;
      if (v63)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v8, v63);
        unsigned int v26 = 0;
        int v27 = 0;
        uint64_t result = v92;
        uint64_t v8 = *v92;
        unint64_t v2 = v92[1];
        int v24 = 1;
        uint64_t v3 = *v92;
        a2 = v93;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v26 = 0;
        int v27 = 0;
        int v24 = 1;
      }
      int v7 = v91;
      unsigned int v14 = v90;
      int v15 = v89;
      int v12 = v88;
      unsigned int v20 = v87;
      int v21 = v86;
      int v18 = v241;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v26 = 0;
      int v27 = 0;
      int v24 = 1;
    }
LABEL_23:
    unint64_t v28 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v28 || v2 - v28 <= 3)
    {
      unint64_t v65 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v66 = result[3];
      if (v66)
      {
        int v253 = v24;
        unsigned int v262 = v26;
        int v142 = v18;
        int v143 = v21;
        unsigned int v144 = v20;
        int v145 = v12;
        int v146 = v15;
        unsigned int v147 = v14;
        int v148 = v7;
        uint64_t v149 = result;
        uint64_t v150 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 16))(v66, v3);
          uint64_t result = v149;
          uint64_t v8 = *v149;
          unint64_t v65 = v149[1];
          a2 = v150;
        }
        else
        {
          unint64_t v65 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v148;
        unsigned int v14 = v147;
        int v15 = v146;
        int v12 = v145;
        unsigned int v20 = v144;
        int v21 = v143;
        int v18 = v142;
        unsigned int v26 = v262;
        int v24 = v253;
      }
    }
    else
    {
      unint64_t v29 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v29 + 1;
      if (v3)
      {
        int v30 = 0;
        int v31 = *v29;
        unsigned int v32 = v31 & 0xFFFFFF00;
        int v33 = v31;
        goto LABEL_27;
      }
      unint64_t v65 = v2;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v242 = v18;
      int v249 = v24;
      unsigned int v257 = v26;
      int v192 = v21;
      unsigned int v196 = v20;
      int v94 = v12;
      int v95 = v15;
      unsigned int v96 = v14;
      int v97 = v7;
      long long v98 = result;
      uint64_t v99 = a2;
      if (v65)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v8, v65);
        unsigned int v32 = 0;
        int v33 = 0;
        uint64_t result = v98;
        uint64_t v8 = *v98;
        unint64_t v2 = v98[1];
        int v30 = 1;
        uint64_t v3 = *v98;
        a2 = v99;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v32 = 0;
        int v33 = 0;
        int v30 = 1;
      }
      int v7 = v97;
      unsigned int v14 = v96;
      int v15 = v95;
      int v12 = v94;
      int v21 = v192;
      unsigned int v20 = v196;
      int v18 = v242;
      int v24 = v249;
      unsigned int v26 = v257;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v32 = 0;
      int v33 = 0;
      int v30 = 1;
    }
LABEL_27:
    unint64_t v34 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v34 || v2 - v34 <= 3)
    {
      unint64_t v67 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v68 = result[3];
      if (v68)
      {
        int v237 = v30;
        int v223 = v33;
        int v254 = v24;
        unsigned int v263 = v26;
        int v151 = v18;
        int v152 = v21;
        unsigned int v153 = v20;
        int v154 = v12;
        int v155 = v15;
        unsigned int v156 = v14;
        int v157 = v7;
        uint64_t v158 = result;
        uint64_t v159 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 16))(v68, v3);
          uint64_t result = v158;
          uint64_t v8 = *v158;
          unint64_t v67 = v158[1];
          a2 = v159;
        }
        else
        {
          unint64_t v67 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v157;
        unsigned int v14 = v156;
        int v15 = v155;
        int v12 = v154;
        unsigned int v20 = v153;
        int v21 = v152;
        int v18 = v151;
        unsigned int v26 = v263;
        int v24 = v254;
        int v33 = v223;
        int v30 = v237;
      }
    }
    else
    {
      uint64_t v35 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v35 + 1;
      if (v3)
      {
        int v36 = 0;
        int v37 = *v35;
        unsigned int v38 = v37 & 0xFFFFFF00;
        int v39 = v37;
        goto LABEL_31;
      }
      unint64_t v67 = v2;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      unsigned int v227 = v32;
      int v233 = v30;
      int v219 = v33;
      int v243 = v18;
      unsigned int v258 = v26;
      int v100 = v21;
      unsigned int v101 = v20;
      int v102 = v12;
      int v103 = v15;
      unsigned int v104 = v14;
      int v105 = v7;
      uint64_t v106 = result;
      uint64_t v107 = a2;
      if (v67)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v8, v67);
        unsigned int v38 = 0;
        int v39 = 0;
        uint64_t result = v106;
        uint64_t v8 = *v106;
        unint64_t v2 = v106[1];
        int v36 = 1;
        uint64_t v3 = *v106;
        a2 = v107;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v38 = 0;
        int v39 = 0;
        int v36 = 1;
      }
      int v7 = v105;
      unsigned int v14 = v104;
      int v15 = v103;
      int v12 = v102;
      unsigned int v20 = v101;
      int v21 = v100;
      int v18 = v243;
      unsigned int v26 = v258;
      int v33 = v219;
      unsigned int v32 = v227;
      int v30 = v233;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v38 = 0;
      int v39 = 0;
      int v36 = 1;
    }
LABEL_31:
    unint64_t v40 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v40 || v2 - v40 <= 3)
    {
      unint64_t v69 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v70 = result[3];
      if (v70)
      {
        int v210 = v39;
        int v216 = v36;
        unsigned int v204 = v38;
        int v238 = v30;
        int v224 = v33;
        int v255 = v24;
        unsigned int v264 = v26;
        int v160 = v18;
        int v161 = v21;
        unsigned int v162 = v20;
        int v163 = v12;
        int v164 = v15;
        unsigned int v165 = v14;
        int v166 = v7;
        uint64_t v167 = result;
        uint64_t v168 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v70 + 16))(v70, v3);
          uint64_t result = v167;
          uint64_t v8 = *v167;
          unint64_t v69 = v167[1];
          a2 = v168;
        }
        else
        {
          unint64_t v69 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v166;
        unsigned int v14 = v165;
        int v15 = v164;
        int v12 = v163;
        unsigned int v20 = v162;
        int v21 = v161;
        int v18 = v160;
        unsigned int v26 = v264;
        int v24 = v255;
        int v33 = v224;
        int v30 = v238;
        unsigned int v38 = v204;
        int v39 = v210;
        int v36 = v216;
      }
    }
    else
    {
      unsigned int v41 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v41 + 1;
      if (v3)
      {
        uint64_t v42 = 0;
        int v43 = *v41;
        unsigned int v44 = v43 & 0xFFFFFF00;
        int v45 = v43;
        goto LABEL_35;
      }
      unint64_t v69 = v2;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      int v207 = v39;
      int v213 = v36;
      unsigned int v197 = v20;
      unsigned int v201 = v38;
      unsigned int v228 = v32;
      int v234 = v30;
      int v220 = v33;
      int v244 = v18;
      int v250 = v24;
      unsigned int v259 = v26;
      int v108 = v21;
      int v109 = v12;
      int v110 = v15;
      unsigned int v111 = v14;
      int v112 = v7;
      char v113 = result;
      uint64_t v114 = a2;
      if (v69)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v8, v69);
        unsigned int v44 = 0;
        int v45 = 0;
        uint64_t result = v113;
        uint64_t v8 = *v113;
        unint64_t v2 = v113[1];
        uint64_t v42 = 1;
        uint64_t v3 = *v113;
        a2 = v114;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v44 = 0;
        int v45 = 0;
        uint64_t v42 = 1;
      }
      int v7 = v112;
      unsigned int v14 = v111;
      int v15 = v110;
      int v12 = v109;
      unsigned int v20 = v197;
      unsigned int v38 = v201;
      int v21 = v108;
      int v18 = v244;
      int v24 = v250;
      unsigned int v26 = v259;
      int v33 = v220;
      unsigned int v32 = v228;
      int v30 = v234;
      int v39 = v207;
      int v36 = v213;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v44 = 0;
      int v45 = 0;
      uint64_t v42 = 1;
    }
LABEL_35:
    unint64_t v46 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v46 || v2 - v46 <= 3)
    {
      unint64_t v71 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v72 = result[3];
      if (v72)
      {
        unsigned int v190 = v42;
        unsigned int v184 = v44;
        int v187 = v45;
        int v211 = v39;
        int v217 = v36;
        unsigned int v205 = v38;
        unsigned int v231 = v32;
        int v239 = v30;
        int v225 = v33;
        int v247 = v18;
        unsigned int v265 = v26;
        int v169 = v21;
        unsigned int v170 = v20;
        int v171 = v12;
        int v172 = v15;
        unsigned int v173 = v14;
        int v174 = v7;
        int v175 = result;
        uint64_t v176 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 16))(v72, v3);
          uint64_t result = v175;
          uint64_t v8 = *v175;
          unint64_t v71 = v175[1];
          a2 = v176;
        }
        else
        {
          unint64_t v71 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v174;
        unsigned int v14 = v173;
        int v15 = v172;
        int v12 = v171;
        unsigned int v20 = v170;
        int v21 = v169;
        int v18 = v247;
        unsigned int v26 = v265;
        int v33 = v225;
        unsigned int v32 = v231;
        int v30 = v239;
        unsigned int v38 = v205;
        int v39 = v211;
        int v36 = v217;
        unsigned int v44 = v184;
        int v45 = v187;
        uint64_t v42 = v190;
      }
    }
    else
    {
      uint64_t v47 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v47 + 1;
      if (v3)
      {
        int v48 = 0;
        int v49 = *v47;
        unsigned int v50 = v49 & 0xFFFFFF00;
        int v51 = v49;
        goto LABEL_39;
      }
      unint64_t v71 = v2;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      unsigned int v188 = v42;
      int v193 = v21;
      unsigned int v183 = v44;
      int v208 = v39;
      int v214 = v36;
      unsigned int v198 = v20;
      unsigned int v202 = v38;
      unsigned int v229 = v32;
      int v235 = v30;
      int v221 = v33;
      int v245 = v18;
      int v251 = v24;
      unsigned int v260 = v26;
      int v115 = v12;
      int v116 = v15;
      unsigned int v117 = v14;
      int v118 = v7;
      int v119 = result;
      uint64_t v120 = a2;
      if (v71)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v8, v71);
        unsigned int v50 = 0;
        int v51 = 0;
        uint64_t result = v119;
        uint64_t v8 = *v119;
        unint64_t v2 = v119[1];
        int v48 = 1;
        uint64_t v3 = *v119;
        a2 = v120;
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v50 = 0;
        int v51 = 0;
        int v48 = 1;
      }
      int v7 = v118;
      unsigned int v14 = v117;
      int v15 = v116;
      int v12 = v115;
      int v21 = v193;
      unsigned int v20 = v198;
      int v18 = v245;
      int v24 = v251;
      unsigned int v26 = v260;
      int v33 = v221;
      unsigned int v32 = v229;
      int v30 = v235;
      unsigned int v38 = v202;
      int v39 = v208;
      int v36 = v214;
      unsigned int v44 = v183;
      uint64_t v42 = v188;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v2 = 0;
      unsigned int v50 = 0;
      int v51 = 0;
      int v48 = 1;
    }
LABEL_39:
    unint64_t v52 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v52 || v2 - v52 <= 3)
    {
      unint64_t v54 = 0;
      uint64_t v8 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v73 = result[3];
      if (v73)
      {
        unsigned int v191 = v42;
        int v195 = v21;
        unsigned int v185 = v44;
        int v212 = v39;
        int v218 = v36;
        unsigned int v200 = v20;
        unsigned int v206 = v38;
        unsigned int v232 = v32;
        int v240 = v30;
        int v226 = v33;
        int v248 = v18;
        int v256 = v24;
        unsigned int v266 = v26;
        int v177 = v12;
        int v178 = v15;
        unsigned int v179 = v14;
        int v180 = v7;
        int v181 = result;
        uint64_t v182 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v3);
          uint64_t result = v181;
          uint64_t v8 = *v181;
          unint64_t v54 = v181[1];
          a2 = v182;
        }
        else
        {
          unint64_t v54 = 0;
          uint64_t v8 = 0;
        }
        int v7 = v180;
        unsigned int v14 = v179;
        int v15 = v178;
        int v12 = v177;
        int v21 = v195;
        unsigned int v20 = v200;
        int v18 = v248;
        int v24 = v256;
        unsigned int v26 = v266;
        int v33 = v226;
        unsigned int v32 = v232;
        int v30 = v240;
        unsigned int v38 = v206;
        int v39 = v212;
        int v36 = v218;
        unsigned int v44 = v185;
        uint64_t v42 = v191;
      }
    }
    else
    {
      int v53 = (unsigned int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v53 + 1;
      unint64_t v54 = v2;
      if (v3)
      {
        int v55 = 0;
        uint64_t v3 = *v53;
        if (v7) {
          goto LABEL_106;
        }
        goto LABEL_43;
      }
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v74 = result[3];
    if (!v74) {
      break;
    }
    if (!v54) {
      break;
    }
    unsigned int v203 = v38;
    int v209 = v39;
    int v215 = v36;
    uint64_t v121 = v42;
    uint64_t v186 = result;
    uint64_t v252 = a2;
    int v230 = v15;
    int v236 = v7;
    unsigned int v222 = v14;
    int v189 = v12;
    int v194 = v21;
    unsigned int v199 = v20;
    int v246 = v18;
    unsigned int v261 = v26;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v74 + 16))(v74, v8, v54);
    uint64_t v42 = v121;
    int v39 = v209;
    int v36 = v215;
    unsigned int v20 = v199;
    unsigned int v38 = v203;
    unsigned int v26 = v261;
    int v18 = v246;
    int v12 = v189;
    int v21 = v194;
    unsigned int v14 = v222;
    int v15 = v230;
    a2 = v252;
    if (!*v186) {
      break;
    }
    uint64_t v3 = 0;
    int v55 = 1;
    if (v236) {
      goto LABEL_106;
    }
LABEL_43:
    if (!v12 && !v18 && !v24 && !v30 && !v36 && !v42 && !v48 && !v55)
    {
      *(void *)a2 = v267;
      *(_DWORD *)(a2 + 8) = v15 | v14;
      *(_DWORD *)(a2 + 12) = v21 | v20;
      *(_DWORD *)(a2 + 16) = v27 | v26;
      *(_DWORD *)(a2 + 20) = v33 | v32;
      *(_DWORD *)(a2 + 24) = v39 | v38;
      *(_DWORD *)(a2 + 28) = v45 | v44;
      char v56 = 1;
      *(_DWORD *)(a2 + 32) = v51 | v50;
      *(_DWORD *)(a2 + 36) = v3;
      goto LABEL_52;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    uint64_t v122 = result;
    uint64_t v123 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v3);
      uint64_t result = v122;
      uint64_t v58 = *v122;
      unint64_t v57 = v122[1];
      a2 = v123;
    }
    else
    {
      unint64_t v57 = 0;
      uint64_t v58 = 0;
    }
  }
  char v56 = 0;
  *(unsigned char *)a2 = 0;
LABEL_52:
  *(unsigned char *)(a2 + 40) = v56;
  return result;
}

void IPC::ArgumentCoder<WebCore::CAAudioStreamDescription,void>::decode(void *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<AudioStreamBasicDescription>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if (v10)
    {
      WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4, &v9);
      *(void *)a2 = MEMORY[0x1E4FB6B98] + 16;
      *(_OWORD *)(a2 + 24) = v5;
      *(_OWORD *)(a2 + 40) = v6;
      *(_OWORD *)(a2 + 56) = v7;
      *(_DWORD *)(a2 + 72) = v8;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&v4[8];
      *(unsigned char *)(a2 + 80) = 1;
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
  }
}

void *IPC::Decoder::decode<AudioStreamBasicDescription>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<AudioStreamBasicDescription,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::Gradient::RadialData,void>::encode(IPC::Encoder *a1, float *a2)
{
  unint64_t v4 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, a2);
  uint64_t v5 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v4, a2 + 2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v5, a2[4]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[5]);
  float v6 = a2[6];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v6);
}

uint64_t IPC::ArgumentCoder<WebCore::Gradient::RadialData,void>::decode(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  char v6 = v5;
  long long v7 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  char v9 = v8;
  uint64_t v10 = IPC::Decoder::decode<float>(a2);
  uint64_t v11 = IPC::Decoder::decode<float>(a2);
  uint64_t result = IPC::Decoder::decode<float>(a2);
  unint64_t v13 = *a2;
  if (!*a2) {
    goto LABEL_10;
  }
  if (!v6 || !v9 || (v10 & 0xFF00000000) == 0 || (v11 & 0xFF00000000) == 0 || (result & 0xFF00000000) == 0)
  {
    __break(1u);
LABEL_10:
    *(unsigned char *)a1 = 0;
    goto LABEL_8;
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v11;
  LOBYTE(v13) = 1;
  *(_DWORD *)(a1 + 24) = result;
LABEL_8:
  *(unsigned char *)(a1 + 28) = v13;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::Gradient,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 48;
  LOBYTE(v7) = *(_DWORD *)(a2 + 76);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v7);
  IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>((uint64_t *)a1, v4, v7);
  int v5 = *(_DWORD *)(a2 + 88);
  *(void *)&long long v7 = *(void *)(a2 + 80);
  DWORD2(v7) = v5;
  IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::encode(a1, (uint64_t)&v7);
  LOBYTE(v7) = *(unsigned char *)(a2 + 92);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v7);
  IPC::VectorArgumentCoder<false,WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 32);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v7);
}

void *IPC::ArgumentCoder<WebCore::Gradient,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 76);
  unint64_t v6 = a1[2];
  if (v6 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v6++) = v5;
    a1[2] = v6;
  }
  long long v7 = (_DWORD *)(a2 + 48);
  if (v5)
  {
    IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(a1, v7, v5);
    unint64_t v6 = a1[2];
  }
  else
  {
    if (*(_DWORD *)(a2 + 76))
    {
LABEL_73:
      uint64_t v29 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_74:
      IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(v29, BYTE4(v28));
      unint64_t v6 = a1[2];
      goto LABEL_32;
    }
    uint64_t v8 = *a1;
    unint64_t v9 = *a1 + v6;
    unint64_t v10 = (v9 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v11 = v10 >= v9;
    unint64_t v12 = v10 - v9;
    if (v11)
    {
      unint64_t v13 = v12 + v6;
      unint64_t v14 = v12 + v6 + 4;
      if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v8 + v13) = *v7;
        a1[2] = v14;
        uint64_t v8 = *a1;
        unint64_t v6 = v14;
      }
    }
    unint64_t v16 = (v8 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v17 = v16 - (v8 + v6);
    if (v16 >= v8 + v6)
    {
      unint64_t v18 = v16 - v8;
      unint64_t v19 = v17 + v6 + 4;
      if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v8 + v18) = *(_DWORD *)(a2 + 52);
        a1[2] = v19;
        uint64_t v8 = *a1;
        unint64_t v6 = v19;
      }
    }
    unint64_t v21 = (v8 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v22 = v21 - (v8 + v6);
    if (v21 >= v8 + v6)
    {
      unint64_t v23 = v21 - v8;
      unint64_t v24 = v22 + v6 + 4;
      if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v8 + v23) = *(_DWORD *)(a2 + 56);
        a1[2] = v24;
        uint64_t v8 = *a1;
        unint64_t v6 = v24;
      }
    }
    unsigned int v26 = (_DWORD *)((v8 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v8 + v6)
    {
      int v27 = (char *)v26 - v8;
      if ((unint64_t)v26 - v8 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *unsigned int v26 = *(_DWORD *)(a2 + 60);
        a1[2] = (uint64_t)(v27 + 4);
        unint64_t v6 = (unint64_t)(v27 + 4);
      }
    }
  }
  unint64_t v28 = *(void *)(a2 + 80);
  int v2 = *(_DWORD *)(a2 + 88);
  uint64_t v29 = HIDWORD(v28);
  if (v6 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v6++) = BYTE4(v28);
    a1[2] = v6;
  }
  if (BYTE4(v28) == 6)
  {
    if (HIDWORD(v28) == 6) {
      goto LABEL_32;
    }
    goto LABEL_73;
  }
  switch(BYTE4(v28))
  {
    case 0:
      if (HIDWORD(v28)) {
        goto LABEL_73;
      }
      goto LABEL_70;
    case 1:
      if (HIDWORD(v28) != 1) {
        goto LABEL_73;
      }
      goto LABEL_70;
    case 2:
      if (HIDWORD(v28) != 2) {
        goto LABEL_73;
      }
      goto LABEL_70;
    case 3:
      if (HIDWORD(v28) != 3) {
        goto LABEL_73;
      }
      break;
    case 4:
      if (HIDWORD(v28) != 4) {
        goto LABEL_73;
      }
LABEL_70:
      if (v6 >= a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(unsigned char *)(*a1 + v6++) = v28;
        a1[2] = v6;
      }
      break;
    case 5:
      if (HIDWORD(v28) != 5) {
        goto LABEL_73;
      }
      break;
    default:
      goto LABEL_74;
  }
LABEL_32:
  if (v6 < a1[1])
  {
    unint64_t v30 = v6 + 1;
    *(unsigned char *)(*a1 + v6) = v2;
    a1[2] = v6 + 1;
    if (v6 + 1 < a1[1])
    {
      v6 += 2;
      *(unsigned char *)(*a1 + v30) = *(unsigned char *)(a2 + 92);
      a1[2] = v6;
      goto LABEL_35;
    }
    ++v6;
  }
  a1[1] = 0;
LABEL_35:
  uint64_t v31 = *(unsigned int *)(a2 + 108);
  unint64_t v32 = *a1 + v6;
  unint64_t v33 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v11 = v33 >= v32;
  unint64_t v34 = v33 - v32;
  if (v11)
  {
    unint64_t v35 = v34 + v6;
    if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v35) = v31;
      a1[2] = v35 + 8;
      uint64_t v31 = *(unsigned int *)(a2 + 108);
    }
  }
  if (v31)
  {
    int v36 = *(_DWORD **)(a2 + 96);
    int v37 = &v36[4 * v31];
    do
    {
      uint64_t v38 = a1[2];
      unint64_t v39 = *a1 + v38;
      unint64_t v40 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v11 = v40 >= v39;
      unint64_t v41 = v40 - v39;
      if (v11)
      {
        unint64_t v42 = v41 + v38;
        unint64_t v43 = v42 + 4;
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v43 > a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_DWORD *)(*a1 + v42) = *v36;
          a1[2] = v43;
        }
      }
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v36 + 2));
      v36 += 4;
    }
    while (v36 != v37);
  }
  long long v46 = *(_OWORD *)(a2 + 32);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v46);
}

void *IPC::ArgumentCoder<WebCore::Gradient,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>>(a1, (uint64_t)v16);
  IPC::Decoder::decode<WebCore::ColorInterpolationMethod>((uint64_t *)a1);
  uint64_t v5 = v4;
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::LineCap>((uint64_t *)a1);
  IPC::Decoder::decode<WebCore::GradientColorStops>((uint64_t *)a1, (uint64_t)v14);
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v12);
  if (*a1)
  {
    if (v16[32] && (v5 & 0xFF00000000) != 0 && v6 > 0xFFu && v15 && v13)
    {
      WebCore::Gradient::create();
      uint64_t v9 = v11;
      uint64_t v11 = 0;
      *(void *)a2 = v9;
      *(unsigned char *)(a2 + 8) = 1;
      uint64_t result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v11, v10);
      goto LABEL_8;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
LABEL_8:
  if (v15) {
    return (void *)WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
  }
  return result;
}

void sub_19886DD14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a21) {
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::Decoder::decode<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::ColorInterpolationMethod>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::decode(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::GradientColorStops>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::GradientColorStops,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19886DEB4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 56)) {
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    int v7 = 1;
    uint64_t v8 = v6 - 1;
    *(void *)(v5 + 8) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v12 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      BOOL v10 = v12 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      if (v8) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v8) {
        return a1;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (!v10) {
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::SourceImage>(unsigned char *a1, uint64_t *a2)
{
  unint64_t v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a2;
        unint64_t v12 = a2[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
LABEL_19:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  uint64_t v9 = (uint64_t *)(v5 + v7);
  a2[2] = (uint64_t)(v9 + 1);
  if (!v5)
  {
    unint64_t v12 = v6;
    uint64_t v13 = 0;
    goto LABEL_19;
  }
  uint64_t v10 = *v9;
  if ((unint64_t)(v10 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_20:
    while (1)
    {
      *a2 = 0;
      a2[1] = 0;
      uint64_t v16 = a2[3];
      if (!v16) {
        break;
      }
      if (!v6) {
        break;
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v5);
      unint64_t v12 = *a2;
      if (!*a2) {
        break;
      }
      while (1)
      {
        __break(1u);
LABEL_28:
        if (!v12) {
          break;
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unint64_t v12 = *a2;
        if (!*a2)
        {
          uint64_t v5 = 0;
          unint64_t v6 = a2[1];
          goto LABEL_20;
        }
      }
      unint64_t v6 = 0;
      uint64_t v5 = 0;
    }
    *a1 = 0;
    a1[40] = 0;
    goto LABEL_22;
  }
  uint64_t v19 = v10;
  int v20 = 2;
  WebCore::SourceImage::SourceImage();
  std::optional<WebCore::SourceImage>::optional[abi:sn180100]<WebCore::SourceImage,0>((uint64_t)a1, (uint64_t)v21);
  if (v25)
  {
    if (v24 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9B4B40[v24])(&v26, &v23);
    }
    int v24 = -1;
  }
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9B4B40[v22])(&v26, v21);
  }
  int v22 = -1;
  uint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9B4B40[v20])(&v26, &v19);
  if (!a1[40])
  {
LABEL_22:
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v18) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
      }
    }
  }
  return result;
}

void sub_19886E230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, int a13, int a14, uint64_t a15, int a16, int a17, char a18)
{
  if (*(unsigned char *)(v18 + 40))
  {
    if (*(unsigned char *)(v18 + 32))
    {
      uint64_t v21 = *(unsigned int *)(v18 + 24);
      if (v21 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9B4B40[v21])(&a12, v18 + 16);
      }
      *(_DWORD *)(v18 + 24) = -1;
    }
    uint64_t v20 = *(unsigned int *)(v18 + 8);
    if (v20 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B4B40[v20])(&a12, v18);
    }
    *(_DWORD *)(v18 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::SourceBrush,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  unsigned __int8 v10 = *(_DWORD *)(a2 + 80);
  uint64_t result = (uint64_t *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
  if (!v10)
  {
    if (!*(_DWORD *)(a2 + 80)) {
      return result;
    }
LABEL_24:
    uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    if (v12 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9B4CA0[v12])(&v14, &v11);
    }
    _Unwind_Resume(v9);
  }
  if (v10 != 1) {
    return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>((uint64_t *)a1, *(void *)(a2 + 16), *(_DWORD *)(a2 + 80), v10);
  }
  if (*(_DWORD *)(a2 + 80) != 1) {
    goto LABEL_24;
  }
  int v5 = *(_DWORD *)(a2 + 24);
  if (v5) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v6 + 40))
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v11, v6);
    int v8 = 0;
    goto LABEL_10;
  }
  for (uint64_t i = *(void *)(v6 + 32); ; uint64_t i = *(void *)(a2 + 16))
  {
    uint64_t v11 = i;
    int v8 = 1;
LABEL_10:
    int v12 = v8;
    char v13 = v8;
    IPC::Encoder::operator<<<BOOL>(a1, &v13);
    if (v13 != 1) {
      break;
    }
    if (v12 == 1)
    {
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v11);
      goto LABEL_13;
    }
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_22:
    if (v5 != 1) {
      goto LABEL_24;
    }
  }
  if (v13) {
    goto LABEL_13;
  }
  if (v12) {
    goto LABEL_21;
  }
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, v11);
LABEL_13:
  if (v12 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9B4CA0[v12])(&v14, &v11);
  }
  return (uint64_t *)IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (double *)(a2 + 32));
}

void WebCore::SourceBrush::~SourceBrush(WebCore::SourceBrush *this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE9B40C0[v3])(&v6, (char *)this + 16);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v4 = *(void *)this;
  if ((*(void *)this & 0x8000000000000) != 0)
  {
    int v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

uint64_t IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 3);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 5);
  char v5 = a2[6];
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 7);
  char v6 = a2[8];
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

void *IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::decode(void *result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *result;
  unint64_t v3 = result[2] - *result;
  if (v1 <= v3)
  {
    unint64_t v61 = 0;
    uint64_t v62 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v63 = result[3];
    if (v63)
    {
      int v209 = result;
      if (v1)
      {
        (*(void (**)(void))(*(void *)v63 + 16))(result[3]);
        uint64_t result = v209;
        uint64_t v62 = *v209;
        unint64_t v61 = v209[1];
      }
      else
      {
        unint64_t v61 = 0;
        uint64_t v62 = 0;
      }
    }
    goto LABEL_65;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    unint64_t v61 = v1;
    uint64_t v62 = 0;
LABEL_65:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v64 = result[3];
    if (v64)
    {
      int v208 = result;
      if (v61)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v64 + 16))(result[3], v62, v61);
        unsigned int v6 = 0;
        uint64_t result = v208;
        uint64_t v2 = *v208;
        unint64_t v1 = v208[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_67;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    int v7 = 0;
    unsigned int v8 = 1;
    goto LABEL_5;
  }
LABEL_67:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v65 = result[3];
  if (!v65)
  {
    uint64_t v9 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
    goto LABEL_69;
  }
  int v207 = result;
  if (!v1)
  {
    uint64_t v9 = 0;
    unint64_t v65 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
LABEL_69:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v66 = result[3];
    if (v66)
    {
      int v204 = v7;
      uint64_t v205 = v9;
      unsigned int v206 = result;
      if (v65)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v66 + 16))(result[3], v2, v65);
        unsigned int v13 = 0;
        uint64_t result = v206;
        uint64_t v2 = *v206;
        unint64_t v1 = v206[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v13 = 0;
      }
      uint64_t v9 = v205;
      int v7 = v204;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v13 = 0;
    }
    goto LABEL_71;
  }
  (*(void (**)(void, uint64_t))(*(void *)v65 + 16))(result[3], v2);
  unsigned int v8 = 0;
  uint64_t result = v207;
  uint64_t v2 = *v207;
  unint64_t v1 = v207[1];
  int v7 = 1;
  uint64_t v5 = v207[2];
LABEL_5:
  if (v6) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v5 - v2;
  if (v1 <= v10)
  {
    int v88 = v7;
    uint64_t v89 = v9;
    unint64_t v65 = 0;
    uint64_t v90 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    int v91 = result;
    if (v90 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v90 + 16))(v90);
      uint64_t result = v91;
      uint64_t v2 = *v91;
      unint64_t v65 = v91[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    uint64_t v9 = v89;
    int v7 = v88;
    goto LABEL_69;
  }
  uint64_t v11 = (unsigned __int8 *)(v2 + v10);
  uint64_t v12 = v2 + v10 + 1;
  result[2] = v12;
  if (!v2)
  {
    unint64_t v65 = v1;
    goto LABEL_69;
  }
  unsigned int v13 = *v11;
  if (v13 < 2)
  {
    int v14 = 0;
    int v15 = 1;
    goto LABEL_12;
  }
LABEL_71:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v67 = result[3];
  if (!v67)
  {
    int v15 = 0;
    uint64_t v2 = 0;
    int v14 = 1;
    goto LABEL_73;
  }
  int v200 = v7;
  unsigned int v201 = v13;
  uint64_t v202 = v9;
  unsigned int v203 = result;
  if (!v1)
  {
    int v15 = 0;
    unint64_t v67 = 0;
    uint64_t v2 = 0;
    int v14 = 1;
LABEL_73:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v68 = result[3];
    if (v68)
    {
      int v194 = v14;
      int v195 = v7;
      int v196 = v15;
      unsigned int v197 = v13;
      uint64_t v198 = v9;
      unsigned int v199 = result;
      if (v67)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v68 + 16))(result[3], v2, v67);
        unsigned int v19 = 0;
        uint64_t result = v199;
        uint64_t v2 = *v199;
        unint64_t v1 = v199[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v19 = 0;
      }
      uint64_t v9 = v198;
      unsigned int v13 = v197;
      int v15 = v196;
      int v7 = v195;
      int v14 = v194;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v19 = 0;
    }
    goto LABEL_75;
  }
  (*(void (**)(void, uint64_t))(*(void *)v67 + 16))(result[3], v2);
  int v15 = 0;
  uint64_t result = v203;
  uint64_t v2 = *v203;
  unint64_t v1 = v203[1];
  int v14 = 1;
  uint64_t v12 = v203[2];
  uint64_t v9 = v202;
  unsigned int v13 = v201;
  int v7 = v200;
LABEL_12:
  unint64_t v16 = v12 - v2;
  if (v1 <= v16)
  {
    int v92 = v14;
    int v93 = v7;
    int v94 = v15;
    unsigned int v95 = v13;
    uint64_t v96 = v9;
    unint64_t v67 = 0;
    uint64_t v97 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    long long v98 = result;
    if (v97 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
      uint64_t result = v98;
      uint64_t v2 = *v98;
      unint64_t v67 = v98[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    uint64_t v9 = v96;
    unsigned int v13 = v95;
    int v15 = v94;
    int v7 = v93;
    int v14 = v92;
    goto LABEL_73;
  }
  uint64_t v17 = (unsigned __int8 *)(v2 + v16);
  uint64_t v18 = v2 + v16 + 1;
  result[2] = v18;
  if (!v2)
  {
    unint64_t v67 = v1;
    goto LABEL_73;
  }
  unsigned int v19 = *v17;
  if (v19 < 2)
  {
    int v20 = 0;
    int v21 = 1;
    goto LABEL_16;
  }
LABEL_75:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v69 = result[3];
  if (!v69)
  {
    int v21 = 0;
    uint64_t v2 = 0;
    int v20 = 1;
    goto LABEL_77;
  }
  unsigned int v187 = v19;
  int v188 = v14;
  int v189 = v7;
  int v190 = v15;
  unsigned int v191 = v13;
  uint64_t v192 = v9;
  int v193 = result;
  if (!v1)
  {
    int v21 = 0;
    unint64_t v69 = 0;
    uint64_t v2 = 0;
    int v20 = 1;
LABEL_77:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v70 = result[3];
    if (v70)
    {
      int v179 = v20;
      int v362 = v21;
      unsigned int v180 = v19;
      int v181 = v14;
      int v182 = v7;
      int v183 = v15;
      unsigned int v184 = v13;
      uint64_t v185 = v9;
      uint64_t v186 = result;
      if (v69)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v70 + 16))(v70, v2, v69);
        unsigned int v25 = 0;
        uint64_t result = v186;
        uint64_t v2 = *v186;
        unint64_t v1 = v186[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v25 = 0;
      }
      uint64_t v9 = v185;
      unsigned int v13 = v184;
      int v15 = v183;
      int v7 = v182;
      int v14 = v181;
      unsigned int v19 = v180;
      int v21 = v362;
      int v20 = v179;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v25 = 0;
    }
    goto LABEL_79;
  }
  (*(void (**)(void, uint64_t))(*(void *)v69 + 16))(result[3], v2);
  int v21 = 0;
  uint64_t result = v193;
  uint64_t v2 = *v193;
  unint64_t v1 = v193[1];
  int v20 = 1;
  uint64_t v18 = v193[2];
  uint64_t v9 = v192;
  unsigned int v13 = v191;
  int v15 = v190;
  int v7 = v189;
  int v14 = v188;
  unsigned int v19 = v187;
LABEL_16:
  unint64_t v22 = v18 - v2;
  if (v1 <= v22)
  {
    int v99 = v20;
    int v345 = v21;
    unsigned int v100 = v19;
    int v101 = v14;
    int v102 = v7;
    int v103 = v15;
    unsigned int v104 = v13;
    uint64_t v105 = v9;
    unint64_t v69 = 0;
    uint64_t v106 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v107 = result;
    if (v106 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v106 + 16))(v106);
      uint64_t result = v107;
      uint64_t v2 = *v107;
      unint64_t v69 = v107[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    uint64_t v9 = v105;
    unsigned int v13 = v104;
    int v15 = v103;
    int v7 = v102;
    int v14 = v101;
    unsigned int v19 = v100;
    int v21 = v345;
    int v20 = v99;
    goto LABEL_77;
  }
  uint64_t v23 = (unsigned __int8 *)(v2 + v22);
  uint64_t v24 = v2 + v22 + 1;
  result[2] = v24;
  if (!v2)
  {
    unint64_t v69 = v1;
    goto LABEL_77;
  }
  unsigned int v25 = *v23;
  if (v25 < 2)
  {
    int v26 = 0;
    char v27 = 1;
    goto LABEL_20;
  }
LABEL_79:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v71 = result[3];
  if (!v71)
  {
    char v27 = 0;
    uint64_t v2 = 0;
    int v26 = 1;
    goto LABEL_81;
  }
  unsigned int v344 = v25;
  int v171 = v20;
  int v361 = v21;
  unsigned int v172 = v19;
  int v173 = v14;
  int v174 = v7;
  int v175 = v15;
  unsigned int v176 = v13;
  uint64_t v177 = v9;
  int v178 = result;
  if (!v1)
  {
    char v27 = 0;
    unint64_t v71 = 0;
    uint64_t v2 = 0;
    int v26 = 1;
LABEL_81:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v72 = result[3];
    if (v72)
    {
      int v313 = v26;
      char v328 = v27;
      unsigned int v343 = v25;
      int v163 = v20;
      int v360 = v21;
      unsigned int v164 = v19;
      int v165 = v14;
      int v166 = v7;
      int v167 = v15;
      unsigned int v168 = v13;
      uint64_t v169 = v9;
      unsigned int v170 = result;
      if (v71)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v72 + 16))(v72, v2, v71);
        unsigned int v31 = 0;
        uint64_t result = v170;
        uint64_t v2 = *v170;
        unint64_t v1 = v170[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v31 = 0;
      }
      uint64_t v9 = v169;
      unsigned int v13 = v168;
      int v15 = v167;
      int v7 = v166;
      int v14 = v165;
      unsigned int v19 = v164;
      int v21 = v360;
      int v20 = v163;
      char v27 = v328;
      unsigned int v25 = v343;
      int v26 = v313;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v31 = 0;
    }
    goto LABEL_83;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v71 + 16))(v71, v2);
  char v27 = 0;
  uint64_t result = v178;
  uint64_t v2 = *v178;
  unint64_t v1 = v178[1];
  int v26 = 1;
  uint64_t v24 = v178[2];
  uint64_t v9 = v177;
  unsigned int v13 = v176;
  int v15 = v175;
  int v7 = v174;
  int v14 = v173;
  unsigned int v19 = v172;
  int v21 = v361;
  int v20 = v171;
  unsigned int v25 = v344;
LABEL_20:
  unint64_t v28 = v24 - v2;
  if (v1 <= v28)
  {
    int v299 = v26;
    char v314 = v27;
    unsigned int v329 = v25;
    int v108 = v20;
    int v346 = v21;
    unsigned int v109 = v19;
    int v110 = v14;
    int v111 = v7;
    int v112 = v15;
    unsigned int v113 = v13;
    uint64_t v114 = v9;
    unint64_t v71 = 0;
    uint64_t v115 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    int v116 = result;
    if (v115 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v115 + 16))(v115);
      uint64_t result = v116;
      uint64_t v2 = *v116;
      unint64_t v71 = v116[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    uint64_t v9 = v114;
    unsigned int v13 = v113;
    int v15 = v112;
    int v7 = v111;
    int v14 = v110;
    unsigned int v19 = v109;
    int v21 = v346;
    int v20 = v108;
    char v27 = v314;
    unsigned int v25 = v329;
    int v26 = v299;
    goto LABEL_81;
  }
  uint64_t v29 = (unsigned __int8 *)(v2 + v28);
  uint64_t v30 = v2 + v28 + 1;
  result[2] = v30;
  if (!v2)
  {
    unint64_t v71 = v1;
    goto LABEL_81;
  }
  unsigned int v31 = *v29;
  if (v31 < 2)
  {
    int v32 = 0;
    char v33 = 1;
    goto LABEL_24;
  }
LABEL_83:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v73 = result[3];
  if (!v73)
  {
    char v33 = 0;
    uint64_t v2 = 0;
    int v32 = 1;
    goto LABEL_85;
  }
  unsigned int v298 = v31;
  int v312 = v26;
  char v327 = v27;
  unsigned int v342 = v25;
  int v285 = v20;
  int v359 = v21;
  unsigned int v156 = v19;
  int v157 = v14;
  int v158 = v7;
  int v159 = v15;
  unsigned int v160 = v13;
  uint64_t v161 = v9;
  unsigned int v162 = result;
  if (!v1)
  {
    char v33 = 0;
    unint64_t v73 = 0;
    uint64_t v2 = 0;
    int v32 = 1;
LABEL_85:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v74 = result[3];
    if (v74)
    {
      char v272 = v33;
      int v284 = v20;
      unsigned int v297 = v31;
      int v311 = v26;
      char v326 = v27;
      unsigned int v341 = v25;
      int v358 = v21;
      unsigned int v150 = v19;
      int v260 = v14;
      int v151 = v7;
      int v152 = v15;
      unsigned int v153 = v13;
      uint64_t v154 = v9;
      int v155 = result;
      if (v73)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v74 + 16))(v74, v2, v73);
        unsigned int v36 = 0;
        uint64_t result = v155;
        uint64_t v2 = *v155;
        unint64_t v1 = v155[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v36 = 0;
      }
      uint64_t v9 = v154;
      unsigned int v13 = v153;
      int v15 = v152;
      int v7 = v151;
      int v14 = v260;
      char v33 = v272;
      unsigned int v19 = v150;
      int v21 = v358;
      int v20 = v284;
      unsigned int v31 = v297;
      char v27 = v326;
      unsigned int v25 = v341;
      int v26 = v311;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v36 = 0;
    }
    goto LABEL_87;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v73 + 16))(v73, v2);
  char v33 = 0;
  uint64_t result = v162;
  uint64_t v2 = *v162;
  unint64_t v1 = v162[1];
  int v32 = 1;
  uint64_t v30 = v162[2];
  uint64_t v9 = v161;
  unsigned int v13 = v160;
  int v15 = v159;
  int v7 = v158;
  int v14 = v157;
  unsigned int v19 = v156;
  int v21 = v359;
  int v20 = v285;
  unsigned int v31 = v298;
  char v27 = v327;
  unsigned int v25 = v342;
  int v26 = v312;
LABEL_24:
  unint64_t v34 = v30 - v2;
  if (v1 <= v34)
  {
    char v261 = v33;
    int v273 = v20;
    unsigned int v286 = v31;
    int v300 = v26;
    char v315 = v27;
    unsigned int v330 = v25;
    int v347 = v21;
    unsigned int v117 = v19;
    int v118 = v14;
    int v119 = v7;
    int v120 = v15;
    unsigned int v121 = v13;
    uint64_t v122 = v9;
    unint64_t v73 = 0;
    uint64_t v123 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    int v124 = result;
    if (v123 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v123 + 16))(v123);
      uint64_t result = v124;
      uint64_t v2 = *v124;
      unint64_t v73 = v124[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    uint64_t v9 = v122;
    unsigned int v13 = v121;
    int v15 = v120;
    int v7 = v119;
    int v14 = v118;
    unsigned int v19 = v117;
    int v21 = v347;
    int v20 = v273;
    unsigned int v31 = v286;
    char v27 = v315;
    unsigned int v25 = v330;
    int v26 = v300;
    char v33 = v261;
    goto LABEL_85;
  }
  unint64_t v35 = (unsigned __int8 *)(v2 + v34);
  result[2] = v35 + 1;
  if (!v2)
  {
    unint64_t v73 = v1;
    goto LABEL_85;
  }
  unsigned int v36 = *v35;
  if (v36 < 2)
  {
    int v37 = 0;
    char v38 = 1;
    goto LABEL_28;
  }
LABEL_87:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v75 = result[3];
  if (!v75)
  {
    uint64_t v2 = 0;
    char v38 = 0;
    unint64_t v1 = 0;
    int v37 = 1;
    goto LABEL_89;
  }
  char v271 = v33;
  int v283 = v20;
  unsigned int v296 = v31;
  int v310 = v26;
  char v325 = v27;
  unsigned int v340 = v25;
  int v357 = v21;
  unsigned int v249 = v19;
  int v259 = v14;
  int v146 = v7;
  int v239 = v15;
  unsigned int v147 = v13;
  uint64_t v148 = v9;
  uint64_t v149 = result;
  if (!v1)
  {
    uint64_t v2 = 0;
    char v38 = 0;
    int v37 = 1;
LABEL_89:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v76 = result[3];
    if (v76)
    {
      char v270 = v33;
      int v282 = v20;
      unsigned int v295 = v31;
      int v309 = v26;
      char v324 = v27;
      unsigned int v339 = v25;
      int v356 = v21;
      unsigned int v248 = v19;
      int v258 = v14;
      int v142 = v7;
      int v238 = v15;
      unsigned int v143 = v13;
      uint64_t v144 = v9;
      int v145 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 16))(v76, v2);
        uint64_t result = v145;
        uint64_t v77 = *v145;
        unint64_t v1 = v145[1];
      }
      else
      {
        uint64_t v77 = 0;
      }
      uint64_t v9 = v144;
      unsigned int v13 = v143;
      int v15 = v238;
      unsigned int v19 = v248;
      int v7 = v142;
      int v14 = v258;
      char v33 = v270;
      int v21 = v356;
      int v20 = v282;
      unsigned int v31 = v295;
      char v27 = v324;
      unsigned int v25 = v339;
      int v26 = v309;
    }
    else
    {
      uint64_t v77 = 0;
      unint64_t v1 = 0;
    }
    goto LABEL_91;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 16))(v75, v2);
  char v38 = 0;
  uint64_t result = v149;
  uint64_t v2 = *v149;
  unint64_t v1 = v149[1];
  int v37 = 1;
  uint64_t v9 = v148;
  unsigned int v13 = v147;
  int v15 = v239;
  unsigned int v19 = v249;
  int v7 = v146;
  int v14 = v259;
  char v33 = v271;
  int v21 = v357;
  int v20 = v283;
  unsigned int v31 = v296;
  char v27 = v325;
  unsigned int v25 = v340;
  int v26 = v310;
LABEL_28:
  if (v1 <= result[2] - v2) {
    goto LABEL_89;
  }
  unint64_t v39 = (unsigned __int8 *)result[2];
  result[2] = v39 + 1;
  if (!v2)
  {
    uint64_t v77 = 0;
LABEL_91:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v78 = result[3];
    if (v78)
    {
      char v269 = v33;
      int v281 = v20;
      unsigned int v294 = v31;
      int v308 = v26;
      char v323 = v27;
      unsigned int v338 = v25;
      int v355 = v21;
      unsigned int v247 = v19;
      int v257 = v14;
      int v138 = v7;
      int v237 = v15;
      unsigned int v139 = v13;
      uint64_t v140 = v9;
      uint64_t v141 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v78 + 16))(v78, v77);
        uint64_t result = v141;
        uint64_t v2 = *v141;
        unint64_t v1 = v141[1];
      }
      else
      {
        uint64_t v2 = 0;
      }
      uint64_t v9 = v140;
      unsigned int v13 = v139;
      int v15 = v237;
      unsigned int v19 = v247;
      int v7 = v138;
      int v14 = v257;
      char v33 = v269;
      int v21 = v355;
      int v20 = v281;
      unsigned int v31 = v294;
      char v27 = v323;
      unsigned int v25 = v338;
      int v26 = v308;
    }
    else
    {
      uint64_t v2 = 0;
      unint64_t v1 = 0;
    }
    goto LABEL_93;
  }
  unsigned int v40 = *v39;
  if (v40 < 3)
  {
    unsigned int v41 = v40 | 0x100;
    goto LABEL_32;
  }
LABEL_93:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v79 = result[3];
  if (!v79)
  {
    uint64_t v2 = 0;
    unsigned int v41 = 0;
    unint64_t v1 = 0;
    goto LABEL_95;
  }
  int v220 = v32;
  char v268 = v33;
  int v280 = v20;
  unsigned int v293 = v31;
  int v307 = v26;
  char v322 = v27;
  unsigned int v337 = v25;
  int v354 = v21;
  unsigned int v246 = v19;
  int v256 = v14;
  int v134 = v7;
  int v236 = v15;
  unsigned int v135 = v13;
  uint64_t v136 = v9;
  int v137 = result;
  if (!v1)
  {
    uint64_t v2 = 0;
    unsigned int v41 = 0;
    int v32 = v220;
LABEL_95:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v80 = result[3];
    if (v80)
    {
      int v219 = v32;
      char v267 = v33;
      int v279 = v20;
      unsigned int v292 = v31;
      int v306 = v26;
      char v321 = v27;
      unsigned int v336 = v25;
      int v353 = v21;
      unsigned int v245 = v19;
      int v255 = v14;
      int v130 = v7;
      int v235 = v15;
      unsigned int v131 = v13;
      uint64_t v132 = v9;
      int v133 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 16))(v80, v2);
        uint64_t result = v133;
        uint64_t v81 = *v133;
        unint64_t v1 = v133[1];
      }
      else
      {
        uint64_t v81 = 0;
      }
      uint64_t v9 = v132;
      unsigned int v13 = v131;
      int v15 = v235;
      unsigned int v19 = v245;
      int v7 = v130;
      int v14 = v255;
      char v33 = v267;
      int v21 = v353;
      int v20 = v279;
      unsigned int v31 = v292;
      char v27 = v321;
      unsigned int v25 = v336;
      int v26 = v306;
      int v32 = v219;
    }
    else
    {
      uint64_t v81 = 0;
      unint64_t v1 = 0;
    }
    goto LABEL_97;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 16))(v79, v2);
  unsigned int v41 = 0;
  uint64_t result = v137;
  uint64_t v2 = *v137;
  unint64_t v1 = v137[1];
  uint64_t v9 = v136;
  unsigned int v13 = v135;
  int v15 = v236;
  unsigned int v19 = v246;
  int v7 = v134;
  int v14 = v256;
  char v33 = v268;
  int v21 = v354;
  int v20 = v280;
  unsigned int v31 = v293;
  char v27 = v322;
  unsigned int v25 = v337;
  int v26 = v307;
  int v32 = v220;
LABEL_32:
  if (v1 <= result[2] - v2) {
    goto LABEL_95;
  }
  unint64_t v42 = (unsigned __int8 *)result[2];
  result[2] = v42 + 1;
  if (!v2)
  {
    uint64_t v81 = 0;
LABEL_97:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v82 = result[3];
    if (v82)
    {
      int v218 = v32;
      char v266 = v33;
      int v278 = v20;
      unsigned int v291 = v31;
      int v305 = v26;
      char v320 = v27;
      unsigned int v335 = v25;
      int v352 = v21;
      unsigned int v244 = v19;
      int v254 = v14;
      int v229 = v7;
      int v234 = v15;
      unsigned int v127 = v13;
      uint64_t v128 = v9;
      unsigned int v129 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v81);
        unsigned int v43 = 0;
        uint64_t result = v129;
        uint64_t v2 = *v129;
        unint64_t v1 = v129[1];
      }
      else
      {
        uint64_t v2 = 0;
        unsigned int v43 = 0;
      }
      uint64_t v9 = v128;
      unsigned int v13 = v127;
      int v7 = v229;
      int v15 = v234;
      unsigned int v19 = v244;
      int v14 = v254;
      int v21 = v352;
      int v20 = v278;
      unsigned int v31 = v291;
      char v27 = v320;
      unsigned int v25 = v335;
      int v26 = v305;
      char v33 = v266;
      int v32 = v218;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v43 = 0;
    }
    goto LABEL_99;
  }
  unsigned int v43 = *v42;
  if (v43 < 2)
  {
    int v44 = 0;
    char v45 = 1;
    goto LABEL_36;
  }
LABEL_99:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v83 = result[3];
  if (!v83)
  {
    uint64_t v2 = 0;
    char v45 = 0;
    unint64_t v1 = 0;
    int v44 = 1;
    goto LABEL_101;
  }
  char v265 = v33;
  int v277 = v20;
  unsigned int v290 = v31;
  int v304 = v26;
  char v319 = v27;
  unsigned int v334 = v25;
  int v351 = v21;
  unsigned int v243 = v19;
  int v253 = v14;
  int v228 = v7;
  int v233 = v15;
  unsigned int v217 = v13;
  uint64_t v224 = v9;
  int v213 = result;
  if (!v1)
  {
    uint64_t v2 = 0;
    char v45 = 0;
    int v44 = 1;
LABEL_101:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v84 = result[3];
    if (v84)
    {
      char v264 = v33;
      int v276 = v20;
      unsigned int v289 = v31;
      int v303 = v26;
      char v318 = v27;
      unsigned int v333 = v25;
      int v350 = v21;
      unsigned int v242 = v19;
      int v252 = v14;
      int v227 = v7;
      int v232 = v15;
      unsigned int v216 = v13;
      uint64_t v223 = v9;
      int v212 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 16))(v84, v2);
        uint64_t result = v212;
        uint64_t v85 = *v212;
        unint64_t v1 = v212[1];
      }
      else
      {
        uint64_t v85 = 0;
      }
      uint64_t v9 = v223;
      unsigned int v13 = v216;
      int v7 = v227;
      int v15 = v232;
      unsigned int v19 = v242;
      int v14 = v252;
      int v21 = v350;
      int v20 = v276;
      unsigned int v31 = v289;
      char v27 = v318;
      unsigned int v25 = v333;
      int v26 = v303;
      char v33 = v264;
    }
    else
    {
      uint64_t v85 = 0;
      unint64_t v1 = 0;
    }
    goto LABEL_103;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v2);
  char v45 = 0;
  uint64_t result = v213;
  uint64_t v2 = *v213;
  unint64_t v1 = v213[1];
  int v44 = 1;
  uint64_t v9 = v224;
  unsigned int v13 = v217;
  int v7 = v228;
  int v15 = v233;
  unsigned int v19 = v243;
  int v14 = v253;
  int v21 = v351;
  int v20 = v277;
  unsigned int v31 = v290;
  char v27 = v319;
  unsigned int v25 = v334;
  int v26 = v304;
  char v33 = v265;
LABEL_36:
  if (v1 <= result[2] - v2) {
    goto LABEL_101;
  }
  long long v46 = (unsigned __int8 *)result[2];
  result[2] = v46 + 1;
  if (!v2)
  {
    uint64_t v85 = 0;
LABEL_103:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v86 = result[3];
    if (v86)
    {
      char v263 = v33;
      int v275 = v20;
      unsigned int v288 = v31;
      int v302 = v26;
      char v317 = v27;
      unsigned int v332 = v25;
      int v349 = v21;
      unsigned int v241 = v19;
      int v251 = v14;
      int v226 = v7;
      int v231 = v15;
      unsigned int v215 = v13;
      uint64_t v222 = v9;
      int v211 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v85);
        uint64_t result = v211;
        uint64_t v2 = *v211;
        unint64_t v1 = v211[1];
      }
      else
      {
        uint64_t v2 = 0;
      }
      uint64_t v9 = v222;
      unsigned int v13 = v215;
      int v7 = v226;
      int v15 = v231;
      unsigned int v19 = v241;
      int v14 = v251;
      int v21 = v349;
      int v20 = v275;
      unsigned int v31 = v288;
      char v27 = v317;
      unsigned int v25 = v332;
      int v26 = v302;
      char v33 = v263;
    }
    else
    {
      uint64_t v2 = 0;
      unint64_t v1 = 0;
    }
    goto LABEL_105;
  }
  unsigned int v47 = *v46;
  if (v47 <= 3)
  {
    if (v7) {
      goto LABEL_220;
    }
    unsigned int v48 = v47 | 0x100;
LABEL_41:
    if (!v14 && !v20 && !v26 && !v32 && !v37 && v41 > 0xFF && !v44 && v48 > 0xFF) {
      goto LABEL_49;
    }
LABEL_220:
    __break(1u);
    return result;
  }
LABEL_105:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v87 = result[3];
  if (v87)
  {
    int v210 = v37;
    int v214 = v32;
    char v262 = v33;
    int v274 = v20;
    unsigned int v287 = v31;
    int v301 = v26;
    char v316 = v27;
    unsigned int v331 = v25;
    int v348 = v21;
    unsigned int v240 = v19;
    int v250 = v14;
    unsigned int v225 = v7;
    int v230 = v15;
    unsigned int v125 = v13;
    uint64_t v221 = v9;
    if (v1)
    {
      uint64_t v126 = result;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v2);
      if (*v126)
      {
        uint64_t v9 = v221;
        unsigned int v13 = v125;
        int v15 = v230;
        unsigned int v19 = v240;
        int v14 = v250;
        char v33 = v262;
        int v21 = v348;
        int v20 = v274;
        unsigned int v31 = v287;
        char v27 = v316;
        unsigned int v25 = v331;
        int v26 = v301;
        int v32 = v214;
        int v37 = v210;
        unsigned int v48 = v225;
        if (v225) {
          goto LABEL_220;
        }
        goto LABEL_41;
      }
    }
    uint64_t v9 = 0;
    unsigned int v13 = v125;
    int v15 = v230;
    unsigned int v19 = v240;
    int v21 = v348;
    char v27 = v316;
    unsigned int v25 = v331;
    unsigned int v31 = v287;
    char v33 = v262;
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_49:
  BOOL v49 = v19 != 0;
  BOOL v50 = v13 != 0;
  uint64_t v51 = 0x100000000000000;
  if ((v45 & (v43 != 0)) == 0) {
    uint64_t v51 = 0;
  }
  unint64_t v52 = v51 | ((unint64_t)v41 << 48);
  uint64_t v53 = 0x10000000000;
  if ((v38 & (v36 != 0)) == 0) {
    uint64_t v53 = 0;
  }
  uint64_t v54 = 0x100000000;
  if ((v33 & (v31 != 0)) == 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v53 | v54;
  uint64_t v56 = 0x1000000;
  if ((v27 & (v25 != 0)) == 0) {
    uint64_t v56 = 0;
  }
  unint64_t v57 = v52 | v55 | v56;
  BOOL v58 = (v21 & v49) == 0;
  uint64_t v59 = 0x10000;
  if (v58) {
    uint64_t v59 = 0;
  }
  BOOL v58 = (v15 & v50) == 0;
  uint64_t v60 = 256;
  if (v58) {
    uint64_t v60 = 0;
  }
  return (void *)(v9 | v59 | v60 | v57);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::TimingFunction,void>::encode(IPC::Encoder *a1, double *a2)
{
  if ((*(unsigned int (**)(double *))(*(void *)a2 + 24))(a2))
  {
    if ((*(unsigned int (**)(double *))(*(void *)a2 + 24))(a2) == 1)
    {
      char v6 = 1;
      IPC::Encoder::operator<<<BOOL>(a1, &v6);
      return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::CubicBezierTimingFunction,void>::encode(a1, (uint64_t)a2);
    }
    else if ((*(unsigned int (**)(double *))(*(void *)a2 + 24))(a2) == 2)
    {
      char v7 = 2;
      IPC::Encoder::operator<<<BOOL>(a1, &v7);
      return IPC::Encoder::operator<<<WebCore::StepsTimingFunction const&>(a1, (uint64_t)a2);
    }
    else
    {
      uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(double *))(*(void *)a2 + 24))(a2);
      if (result == 3)
      {
        char v8 = 3;
        IPC::Encoder::operator<<<BOOL>(a1, &v8);
        return (IPC::Encoder *)IPC::ArgumentCoder<API::Rect,void>::encode(a1, a2);
      }
    }
  }
  else
  {
    char v5 = 0;
    IPC::Encoder::operator<<<BOOL>(a1, &v5);
    return (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
  }
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::StepsTimingFunction const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v8 = *(_DWORD *)(a2 + 12);
  IPC::Encoder::operator<<<int>(a1, &v8);
  unsigned int v4 = *(unsigned __int16 *)(a2 + 16);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4 > 0xFF)
  {
    if (v6)
    {
      *char v5 = 1;
      char v9 = v4;
      IPC::Encoder::operator<<<BOOL>(a1, &v9);
      return a1;
    }
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19886FD0CLL);
  }
  if (!v6) {
    goto LABEL_7;
  }
  *char v5 = 0;
  return a1;
}

unint64_t IPC::ArgumentCoder<WebCore::TimingFunction,void>::decode(unint64_t result, unint64_t *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = a2[2];
  char v5 = (unsigned char *)*a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v65 = 0;
    uint64_t v66 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v67 = a2[3];
    if (v67)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v67 + 16))(v67);
        uint64_t v66 = (unsigned char *)*a2;
        unint64_t v65 = a2[1];
      }
      else
      {
        unint64_t v65 = 0;
        uint64_t v66 = 0;
      }
    }
    goto LABEL_104;
  }
  int v8 = &v5[v7];
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v65 = v6;
    uint64_t v66 = 0;
LABEL_104:
    unint64_t v6 = 0;
    char v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v68 = a2[3];
    if (v68)
    {
      if (v65)
      {
        (*(void (**)(unint64_t, unsigned char *, unint64_t))(*(void *)v68 + 16))(v68, v66, v65);
        char v5 = (unsigned char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_105;
  }
  unsigned int v9 = *v8;
  if (v9 >= 4)
  {
LABEL_105:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v6) {
      uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_106;
  }
  if (v9 == 2)
  {
    uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
    unint64_t v35 = result;
    unint64_t v36 = a2[1];
    char v5 = (unsigned char *)*a2;
    unint64_t v37 = a2[2] - *a2;
    if (v36 <= v37)
    {
      unint64_t v72 = 0;
      unint64_t v73 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v74 = a2[3];
      if (v74)
      {
        if (v36)
        {
          (*(void (**)(unint64_t))(*(void *)v74 + 16))(v74);
          unint64_t v73 = (unsigned char *)*a2;
          unint64_t v72 = a2[1];
        }
        else
        {
          unint64_t v72 = 0;
          unint64_t v73 = 0;
        }
      }
    }
    else
    {
      char v38 = &v5[v37];
      a2[2] = (unint64_t)(v38 + 1);
      if (v5)
      {
        if (*v38 < 2u)
        {
          if (!*v38)
          {
            int v42 = 0;
            int v43 = 0;
            unsigned int v41 = 0x10000;
LABEL_79:
            if (!HIWORD(v41))
            {
              char v5 = (unsigned char *)*a2;
              unint64_t v76 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              uint64_t result = a2[3];
              if (result)
              {
                if (v76)
                {
                  int v120 = v43;
                  uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *))(*(void *)result + 16))(result, v5);
                  int v43 = v120;
                }
              }
            }
            if (*a2)
            {
              if ((v35 & 0xFF00000000) == 0) {
                goto LABEL_158;
              }
              unsigned int v61 = v42 | v41 | v43;
              if (!HIWORD(v61)) {
                goto LABEL_158;
              }
              uint64_t result = WTF::fastMalloc((WTF *)0x18);
              *(_DWORD *)(result + 8) = 1;
              *(_DWORD *)(result + 12) = v35;
              *(void *)uint64_t result = &unk_1EE9B4558;
              *(_WORD *)(result + 16) = v61;
              goto LABEL_84;
            }
            unint64_t v77 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            uint64_t result = a2[3];
            if (!result) {
              goto LABEL_106;
            }
LABEL_151:
            if (!v77) {
              goto LABEL_106;
            }
            int v99 = *(uint64_t (**)(void))(*(void *)result + 16);
            goto LABEL_157;
          }
          if (v36 <= v38 + 1 - v5)
          {
            unint64_t v40 = 0;
            unsigned int v104 = 0;
            *a2 = 0;
            a2[1] = 0;
            unint64_t v105 = a2[3];
            if (v105)
            {
              (*(void (**)(unint64_t))(*(void *)v105 + 16))(v105);
              unint64_t v40 = 0;
              char v5 = (unsigned char *)*a2;
              unint64_t v112 = a2[1];
              unint64_t v113 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              unsigned int v104 = 0;
              if (v113)
              {
                if (v112)
                {
                  (*(void (**)(unint64_t, unsigned char *))(*(void *)v113 + 16))(v113, v5);
                  unsigned int v104 = (unsigned char *)*a2;
                  unint64_t v40 = a2[1];
                }
              }
            }
          }
          else
          {
            a2[2] = (unint64_t)(v38 + 2);
            unsigned int v39 = v38[1];
            if (v39 < 6)
            {
              LODWORD(v40) = v39 | 0x100;
              goto LABEL_49;
            }
            unint64_t v40 = v36;
            unsigned int v104 = v5;
          }
          *a2 = 0;
          a2[1] = 0;
          uint64_t result = a2[3];
          if (result)
          {
            if (!v40) {
              goto LABEL_49;
            }
            uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v104, v40);
          }
          LODWORD(v40) = 0;
LABEL_49:
          unsigned int v41 = (v40 > 0xFF) << 16;
          if (v40 >= 0x100) {
            int v42 = v40;
          }
          else {
            int v42 = 0;
          }
          int v43 = 256;
          goto LABEL_79;
        }
LABEL_114:
        *a2 = 0;
        a2[1] = 0;
        uint64_t result = a2[3];
        if (result && v36) {
          uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *))(*(void *)result + 16))(result, v5);
        }
        unsigned int v41 = 0;
        int v42 = 0;
        int v43 = 0;
        goto LABEL_79;
      }
      unint64_t v72 = v36;
      unint64_t v73 = 0;
    }
    unint64_t v36 = 0;
    char v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v75 = a2[3];
    if (v75)
    {
      if (v72)
      {
        (*(void (**)(unint64_t, unsigned char *, unint64_t))(*(void *)v75 + 16))(v75, v73, v72);
        char v5 = (unsigned char *)*a2;
        unint64_t v36 = a2[1];
      }
      else
      {
        unint64_t v36 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_114;
  }
  if (v9 == 1)
  {
    if (v6 <= v8 + 1 - v5)
    {
      unint64_t v69 = 0;
      uint64_t v70 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v71 = a2[3];
      if (v71)
      {
        (*(void (**)(unint64_t))(*(void *)v71 + 16))(v71);
        unint64_t v69 = 0;
        uint64_t v106 = (unsigned char *)*a2;
        unint64_t v107 = a2[1];
        unint64_t v108 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v70 = 0;
        if (v108)
        {
          if (v107)
          {
            (*(void (**)(unint64_t, unsigned char *))(*(void *)v108 + 16))(v108, v106);
            uint64_t v70 = (unsigned char *)*a2;
            unint64_t v69 = a2[1];
          }
        }
      }
    }
    else
    {
      a2[2] = (unint64_t)(v8 + 2);
      unsigned int v17 = v8[1];
      if (v17 < 5)
      {
        unsigned int v18 = v17 | 0x100;
        goto LABEL_20;
      }
      unint64_t v69 = v6;
      uint64_t v70 = v5;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v69)
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v70, v69);
      unsigned int v18 = 0;
      char v5 = (unsigned char *)*a2;
      unint64_t v6 = a2[1];
    }
    else
    {
      unint64_t v6 = 0;
      char v5 = 0;
      unsigned int v18 = 0;
    }
LABEL_20:
    unint64_t v19 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v6 < v19 || v6 - v19 <= 7)
    {
      unint64_t v78 = 0;
      uint64_t v79 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v80 = a2[3];
      if (v80)
      {
        if (v6)
        {
          (*(void (**)(unint64_t))(*(void *)v80 + 16))(v80);
          uint64_t v79 = (unsigned char *)*a2;
          unint64_t v78 = a2[1];
        }
        else
        {
          unint64_t v78 = 0;
          uint64_t v79 = 0;
        }
      }
    }
    else
    {
      int v20 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v20 + 1);
      if (v5)
      {
        int v21 = 0;
        uint64_t v22 = *v20;
        goto LABEL_24;
      }
      unint64_t v78 = v6;
      uint64_t v79 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v78)
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v79, v78);
      uint64_t v22 = 0;
      char v5 = (unsigned char *)*a2;
      unint64_t v6 = a2[1];
    }
    else
    {
      unint64_t v6 = 0;
      char v5 = 0;
      uint64_t v22 = 0;
    }
    int v21 = 1;
LABEL_24:
    unint64_t v23 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v6 < v23 || v6 - v23 <= 7)
    {
      unint64_t v81 = 0;
      uint64_t v82 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v83 = a2[3];
      if (v83)
      {
        int v111 = v21;
        if (v6)
        {
          (*(void (**)(unint64_t))(*(void *)v83 + 16))(v83);
          uint64_t v82 = (unsigned char *)*a2;
          unint64_t v81 = a2[1];
        }
        else
        {
          unint64_t v81 = 0;
          uint64_t v82 = 0;
        }
        int v21 = v111;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v24 + 1);
      if (v5)
      {
        int v25 = 0;
        uint64_t v26 = *v24;
        goto LABEL_28;
      }
      unint64_t v81 = v6;
      uint64_t v82 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      int v123 = v21;
      if (v81)
      {
        uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v82, v81);
        uint64_t v26 = 0;
        char v5 = (unsigned char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
        uint64_t v26 = 0;
      }
      int v25 = 1;
      int v21 = v123;
    }
    else
    {
      unint64_t v6 = 0;
      char v5 = 0;
      uint64_t v26 = 0;
      int v25 = 1;
    }
LABEL_28:
    unint64_t v27 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v6 < v27 || v6 - v27 <= 7)
    {
      unint64_t v84 = 0;
      uint64_t v85 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v86 = a2[3];
      if (v86)
      {
        int v118 = v25;
        int v125 = v21;
        if (v6)
        {
          (*(void (**)(unint64_t))(*(void *)v86 + 16))(v86);
          uint64_t v85 = (unsigned char *)*a2;
          unint64_t v84 = a2[1];
        }
        else
        {
          unint64_t v84 = 0;
          uint64_t v85 = 0;
        }
        int v25 = v118;
        int v21 = v125;
      }
    }
    else
    {
      unint64_t v28 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v28 + 1);
      if (v5)
      {
        int v29 = 0;
        uint64_t v30 = *v28;
        goto LABEL_32;
      }
      unint64_t v84 = v6;
      uint64_t v85 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v30 = 0;
    uint64_t result = a2[3];
    if (result)
    {
      int v117 = v25;
      int v124 = v21;
      if (v84)
      {
        uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v85, v84);
        char v5 = (unsigned char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
      int v29 = 1;
      int v25 = v117;
      int v21 = v124;
    }
    else
    {
      unint64_t v6 = 0;
      char v5 = 0;
      int v29 = 1;
    }
LABEL_32:
    unint64_t v31 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v6 < v31 || v6 - v31 <= 7)
    {
      unint64_t v87 = 0;
      int v88 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v89 = a2[3];
      if (v89)
      {
        int v115 = v29;
        int v119 = v25;
        int v126 = v21;
        if (v6)
        {
          (*(void (**)(unint64_t))(*(void *)v89 + 16))(v89);
          int v88 = (unsigned char *)*a2;
          unint64_t v87 = a2[1];
        }
        else
        {
          unint64_t v87 = 0;
          int v88 = 0;
        }
        int v25 = v119;
        int v21 = v126;
        int v29 = v115;
      }
    }
    else
    {
      int v32 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v32 + 1);
      if (v5)
      {
        int v33 = 0;
        uint64_t v34 = *v32;
        goto LABEL_36;
      }
      unint64_t v87 = v6;
      int v88 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (!result || !v87) {
      goto LABEL_106;
    }
    int v114 = v29;
    int v116 = v25;
    int v121 = v21;
    uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v88, v87);
    if (!*a2)
    {
LABEL_150:
      unint64_t v77 = a2[1];
      uint64_t result = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (!result) {
        goto LABEL_106;
      }
      goto LABEL_151;
    }
    int v33 = 1;
    uint64_t v34 = 0;
    int v25 = v116;
    int v21 = v121;
    int v29 = v114;
LABEL_36:
    if (v18 <= 0xFF || v21 || v25 || v29 || v33) {
      goto LABEL_158;
    }
    uint64_t result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(result + 8) = 1;
    *(void *)uint64_t result = &unk_1EE9B4520;
    *(void *)(result + 16) = v22;
    *(void *)(result + 24) = v26;
    *(void *)(result + 32) = v30;
    *(void *)(result + 40) = v34;
    *(unsigned char *)(result + 48) = v18;
    goto LABEL_84;
  }
  if (*v8)
  {
    unint64_t v44 = ((unint64_t)(v8 + 8) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    BOOL v46 = v6 < v44 || v6 - v44 < 8;
    if (v46)
    {
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = a2[3];
      if (result)
      {
        (*(void (**)(unint64_t))(*(void *)result + 16))(result);
        unint64_t v6 = 0;
        unsigned int v109 = (unsigned char *)*a2;
        unint64_t v110 = a2[1];
        uint64_t result = a2[3];
        *a2 = 0;
        a2[1] = 0;
        char v5 = 0;
        uint64_t v48 = 0;
        if (result && v110)
        {
          uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v109, v110);
          uint64_t v48 = 0;
          char v5 = (unsigned char *)*a2;
          unint64_t v6 = a2[1];
        }
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
        uint64_t v48 = 0;
      }
    }
    else
    {
      unsigned int v47 = (uint64_t *)&v5[v44];
      uint64_t v48 = *v47;
      a2[2] = (unint64_t)(v47 + 1);
    }
    unint64_t v49 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v6 < v49 || v6 - v49 <= 7)
    {
      unint64_t v90 = 0;
      int v91 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v92 = a2[3];
      if (v92)
      {
        if (v6)
        {
          (*(void (**)(unint64_t))(*(void *)v92 + 16))(v92);
          int v91 = (unsigned char *)*a2;
          unint64_t v90 = a2[1];
        }
        else
        {
          unint64_t v90 = 0;
          int v91 = 0;
        }
      }
    }
    else
    {
      BOOL v50 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v50 + 1);
      if (v5)
      {
        int v51 = 0;
        uint64_t v52 = *v50;
        goto LABEL_65;
      }
      unint64_t v90 = v6;
      int v91 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v52 = 0;
    uint64_t result = a2[3];
    if (result && v90)
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v91, v90);
      char v5 = (unsigned char *)*a2;
      unint64_t v6 = a2[1];
    }
    else
    {
      unint64_t v6 = 0;
      char v5 = 0;
    }
    int v51 = 1;
LABEL_65:
    unint64_t v53 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v6 < v53 || v6 - v53 <= 7)
    {
      unint64_t v93 = 0;
      int v94 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v95 = a2[3];
      if (v95)
      {
        if (v6)
        {
          (*(void (**)(unint64_t))(*(void *)v95 + 16))(v95);
          int v94 = (unsigned char *)*a2;
          unint64_t v93 = a2[1];
        }
        else
        {
          unint64_t v93 = 0;
          int v94 = 0;
        }
      }
    }
    else
    {
      uint64_t v54 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v54 + 1);
      if (v5)
      {
        int v55 = 0;
        uint64_t v56 = *v54;
LABEL_69:
        unint64_t v57 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
        if (v6 < v57 || v6 - v57 <= 7)
        {
          unint64_t v96 = 0;
          uint64_t v97 = 0;
          *a2 = 0;
          a2[1] = 0;
          unint64_t v98 = a2[3];
          if (v98)
          {
            int v127 = v55;
            if (v6)
            {
              (*(void (**)(unint64_t))(*(void *)v98 + 16))(v98);
              uint64_t v97 = (unsigned char *)*a2;
              unint64_t v96 = a2[1];
            }
            else
            {
              unint64_t v96 = 0;
              uint64_t v97 = 0;
            }
            int v55 = v127;
          }
        }
        else
        {
          BOOL v58 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
          a2[2] = (unint64_t)(v58 + 1);
          if (v5)
          {
            int v59 = 0;
            uint64_t v60 = *v58;
            if (v46) {
              goto LABEL_158;
            }
            goto LABEL_73;
          }
          unint64_t v96 = v6;
          uint64_t v97 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t result = a2[3];
        if (!result || !v96) {
          goto LABEL_106;
        }
        int v122 = v55;
        uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v97, v96);
        if (*a2)
        {
          int v59 = 1;
          uint64_t v60 = 0;
          int v55 = v122;
          if (v46) {
            goto LABEL_158;
          }
LABEL_73:
          if (v51 || v55 || v59) {
            goto LABEL_158;
          }
          uint64_t result = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)(result + 8) = 1;
          *(void *)uint64_t result = &unk_1EE9B4590;
          *(void *)(result + 16) = v48;
          *(void *)(result + 24) = v52;
          *(void *)(result + 32) = v56;
          *(void *)(result + 40) = v60;
LABEL_84:
          if (*a2)
          {
            *(void *)unint64_t v3 = result;
LABEL_101:
            *(unsigned char *)(v3 + 8) = 1;
            return result;
          }
          goto LABEL_159;
        }
        goto LABEL_150;
      }
      unint64_t v93 = v6;
      int v94 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v56 = 0;
    uint64_t result = a2[3];
    if (result && v93)
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *, unint64_t))(*(void *)result + 16))(result, v94, v93);
      char v5 = (unsigned char *)*a2;
      unint64_t v6 = a2[1];
    }
    else
    {
      unint64_t v6 = 0;
      char v5 = 0;
    }
    int v55 = 1;
    goto LABEL_69;
  }
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    LOBYTE(v128) = 0;
    char v131 = 0;
LABEL_91:
    char v5 = (unsigned char *)*a2;
    unint64_t v62 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v62) {
      uint64_t result = (*(uint64_t (**)(unint64_t, unsigned char *))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_92;
  }
  unint64_t v11 = result;
  int v134 = 0;
  uint64_t v135 = 0;
  if (result >= 0x10000)
  {
    int v101 = 0;
    LODWORD(v102) = 0;
    while (1)
    {
      uint64_t result = IPC::Decoder::decode<WebCore::LinearTimingFunction::Point>((uint64_t)&v132, a2, v10);
      if (!v133) {
        break;
      }
      if (v102 == v135)
      {
        uint64_t result = WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, v102 + 1, (unint64_t)&v132);
        int v103 = HIDWORD(v135);
        int v101 = v134;
        __n128 v10 = *(__n128 *)result;
        *((_OWORD *)v134 + HIDWORD(v135)) = *(_OWORD *)result;
      }
      else
      {
        __n128 v10 = v132;
        *((__n128 *)v101 + v102) = v132;
        int v103 = HIDWORD(v135);
      }
      uint64_t v102 = (v103 + 1);
      HIDWORD(v135) = v103 + 1;
      if (!--v11)
      {
        if (v135 > v102)
        {
          if (v103 == -1)
          {
            int v134 = 0;
            LODWORD(v135) = 0;
            uint64_t result = WTF::fastFree(v101, v5);
          }
          else
          {
            LODWORD(v135) = v103 + 1;
            uint64_t result = WTF::fastRealloc(v101, (void *)(16 * v102));
            int v134 = (WTF *)result;
          }
        }
        uint64_t v128 = v134;
        int v16 = v135;
        unsigned int v14 = HIDWORD(v135);
        goto LABEL_88;
      }
    }
    LOBYTE(v128) = 0;
    char v131 = 0;
    uint64_t v12 = v134;
    if (v134) {
      goto LABEL_90;
    }
    goto LABEL_91;
  }
  if (result)
  {
    uint64_t v12 = (WTF *)WTF::fastMalloc((WTF *)(16 * result));
    unsigned int v14 = 0;
    LODWORD(v135) = v11;
    int v134 = v12;
    while (1)
    {
      uint64_t result = IPC::Decoder::decode<WebCore::LinearTimingFunction::Point>((uint64_t)&v132, a2, v13);
      if (!v133) {
        break;
      }
      if (v14 == v135)
      {
        uint64_t result = WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, v14 + 1, (unint64_t)&v132);
        int v15 = HIDWORD(v135);
        uint64_t v12 = v134;
        __n128 v13 = *(__n128 *)result;
        *((_OWORD *)v134 + HIDWORD(v135)) = *(_OWORD *)result;
      }
      else
      {
        __n128 v13 = v132;
        *((__n128 *)v12 + v14) = v132;
        int v15 = HIDWORD(v135);
      }
      unsigned int v14 = v15 + 1;
      HIDWORD(v135) = v15 + 1;
      if (!--v11)
      {
        int v16 = v135;
        goto LABEL_87;
      }
    }
    LOBYTE(v128) = 0;
    char v131 = 0;
LABEL_90:
    int v134 = 0;
    LODWORD(v135) = 0;
    WTF::fastFree(v12, v5);
    goto LABEL_91;
  }
  unsigned int v14 = 0;
  int v16 = 0;
  uint64_t v12 = 0;
LABEL_87:
  uint64_t v128 = v12;
LABEL_88:
  int v129 = v16;
  unsigned int v130 = v14;
  char v131 = 1;
LABEL_92:
  unint64_t v63 = *a2;
  if (!*a2)
  {
    uint64_t v64 = 0;
    goto LABEL_95;
  }
  if (!v131)
  {
LABEL_158:
    __break(1u);
LABEL_159:
    *(unsigned char *)unint64_t v3 = 0;
    *(unsigned char *)(v3 + 8) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  uint64_t result = WebCore::LinearTimingFunction::create((uint64_t)&v128, (uint64_t *)&v132);
  uint64_t v64 = (_DWORD *)v132.n128_u64[0];
LABEL_95:
  if (v131)
  {
    uint64_t result = (unint64_t)v128;
    if (v128)
    {
      uint64_t v128 = 0;
      int v129 = 0;
      uint64_t result = WTF::fastFree((WTF *)result, v5);
    }
  }
  if (!v63)
  {
    unint64_t v100 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (!result || !v100) {
      goto LABEL_106;
    }
    int v99 = *(uint64_t (**)(void))(*(void *)result + 16);
LABEL_157:
    uint64_t result = v99();
    if (*a2) {
      goto LABEL_158;
    }
LABEL_106:
    *(unsigned char *)unint64_t v3 = 0;
    *(unsigned char *)(v3 + 8) = 0;
    return result;
  }
  if (*a2)
  {
    *(void *)unint64_t v3 = v64;
    goto LABEL_101;
  }
  *(unsigned char *)unint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 0;
  if (v64)
  {
    if (v64[2] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v64 + 16))(v64);
    }
    else {
      --v64[2];
    }
  }
  return result;
}