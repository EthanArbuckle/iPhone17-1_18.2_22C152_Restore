char *WTF::Detail::CallableWrapper<IPC::Connection::sendMessageImpl(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::call(uint64_t a1, void *a2)
{
  return IPC::Connection::sendOutgoingMessages(*(char **)(a1 + 8), a2);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::tiledBacking(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *((void *)this + 105);
}

void sub_1985F5154(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  unint64_t v5 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  unint64_t v6 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  unint64_t v7 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  unint64_t result = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  unint64_t v9 = a1[1];
  uint64_t v10 = *a1;
  unint64_t v11 = a1[2] - *a1;
  if (v9 <= v11) {
    goto LABEL_28;
  }
  v12 = (unsigned __int8 *)(v10 + v11);
  uint64_t v13 = v10 + v11 + 1;
  a1[2] = v13;
  if (!v10)
  {
    uint64_t v28 = v9;
    uint64_t v29 = 0;
    goto LABEL_29;
  }
  unsigned int v14 = *v12;
  if (v14 < 2)
  {
    int v15 = 0;
    char v16 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v32 = a1[3];
    if (!v32)
    {
      char v16 = 0;
      uint64_t v10 = 0;
      int v15 = 1;
      goto LABEL_33;
    }
    unsigned int v57 = v14;
    unint64_t v64 = result;
    if (!v9)
    {
      char v16 = 0;
      uint64_t v32 = 0;
      uint64_t v10 = 0;
      int v15 = 1;
LABEL_33:
      *a1 = 0;
      a1[1] = 0;
      v18 = (unsigned __int8 *)a1[3];
      if (v18)
      {
        int v50 = v15;
        char v56 = v16;
        unint64_t v63 = result;
        if (v32)
        {
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v10, v32);
          LODWORD(v18) = 0;
          uint64_t v10 = *a1;
          unint64_t v9 = a1[1];
        }
        else
        {
          unint64_t v9 = 0;
          uint64_t v10 = 0;
          LODWORD(v18) = 0;
        }
        unint64_t result = v63;
        int v15 = v50;
        char v16 = v56;
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v10);
    char v16 = 0;
    uint64_t v10 = *a1;
    unint64_t v9 = a1[1];
    int v15 = 1;
    uint64_t v13 = a1[2];
    unint64_t result = v64;
    unsigned int v14 = v57;
LABEL_5:
    if (!v14) {
      char v16 = 0;
    }
    unint64_t v17 = v13 - v10;
    if (v9 <= v17)
    {
      int v45 = v15;
      char v51 = v16;
      unint64_t v58 = result;
      uint64_t v32 = 0;
      uint64_t v36 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v36 && v9)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
        uint64_t v10 = *a1;
        uint64_t v32 = a1[1];
      }
      else
      {
        uint64_t v10 = 0;
      }
      unint64_t result = v58;
      int v15 = v45;
      char v16 = v51;
      goto LABEL_33;
    }
    v18 = (unsigned __int8 *)(v10 + v17);
    uint64_t v19 = v10 + v17 + 1;
    a1[2] = v19;
    if (!v10)
    {
      uint64_t v32 = v9;
      goto LABEL_33;
    }
    LODWORD(v18) = *v18;
    if (v18 < 2)
    {
      int v20 = 0;
      char v21 = 1;
      goto LABEL_11;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (!v33)
    {
      char v21 = 0;
      uint64_t v10 = 0;
      int v20 = 1;
      goto LABEL_37;
    }
    int v44 = (int)v18;
    int v49 = v15;
    char v55 = v16;
    unint64_t v62 = result;
    if (!v9)
    {
      char v21 = 0;
      uint64_t v33 = 0;
      uint64_t v10 = 0;
      int v20 = 1;
      goto LABEL_37;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v10);
    char v21 = 0;
    uint64_t v10 = *a1;
    unint64_t v9 = a1[1];
    int v20 = 1;
    uint64_t v19 = a1[2];
    unint64_t result = v62;
    int v15 = v49;
    char v16 = v55;
    LODWORD(v18) = v44;
LABEL_11:
    if (!v18) {
      char v21 = 0;
    }
    unint64_t v22 = v19 - v10;
    if (v9 <= v22) {
      break;
    }
    v23 = (unsigned __int8 *)(v10 + v22);
    a1[2] = (uint64_t)(v23 + 1);
    if (!v10)
    {
      uint64_t v33 = v9;
      goto LABEL_37;
    }
    unsigned int v24 = *v23;
    if (v24 > 1) {
      goto LABEL_39;
    }
    int v25 = 0;
    BOOL v26 = v24 != 0;
LABEL_17:
    if (HIDWORD(v4) && HIDWORD(v5) && HIDWORD(v6) && HIDWORD(v7) && HIDWORD(result) && !v15 && !v20 && !v25)
    {
      *(_DWORD *)a2 = v4;
      *(_DWORD *)(a2 + 4) = v5;
      *(_DWORD *)(a2 + 8) = v6;
      *(_DWORD *)(a2 + 12) = v7;
      *(_DWORD *)(a2 + 16) = result;
      *(unsigned char *)(a2 + 20) = v16;
      *(unsigned char *)(a2 + 21) = v21;
      char v27 = 1;
      *(unsigned char *)(a2 + 22) = v26;
      goto LABEL_26;
    }
    __break(1u);
LABEL_28:
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v30 = a1[3];
    if (v30)
    {
      unint64_t v66 = result;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
        uint64_t v29 = *a1;
        uint64_t v28 = a1[1];
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
      }
      unint64_t result = v66;
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v31 = a1[3];
    if (v31)
    {
      unint64_t v65 = result;
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29, v28);
        unsigned int v14 = 0;
        uint64_t v10 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
        unsigned int v14 = 0;
      }
      unint64_t result = v65;
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      unsigned int v14 = 0;
    }
  }
  char v38 = v21;
  int v41 = v20;
  int v46 = v15;
  char v52 = v16;
  unint64_t v59 = result;
  uint64_t v33 = 0;
  uint64_t v37 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v37 && v9)
  {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
    uint64_t v10 = *a1;
    uint64_t v33 = a1[1];
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t result = v59;
  int v15 = v46;
  char v16 = v52;
  char v21 = v38;
  int v20 = v41;
LABEL_37:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v34 = a1[3];
  if (v34)
  {
    char v40 = v21;
    int v43 = v20;
    int v48 = v15;
    char v54 = v16;
    unint64_t v61 = result;
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v10, v33);
      uint64_t v10 = *a1;
      unint64_t v9 = a1[1];
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    unint64_t result = v61;
    int v15 = v48;
    char v16 = v54;
    char v21 = v40;
    int v20 = v43;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
  }
LABEL_39:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v35 = a1[3];
  if (v35)
  {
    if (v9)
    {
      unint64_t v60 = result;
      int v47 = v15;
      char v53 = v16;
      char v39 = v21;
      int v42 = v20;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v10);
      char v21 = v39;
      int v20 = v42;
      int v15 = v47;
      char v16 = v53;
      unint64_t result = v60;
      if (*a1)
      {
        BOOL v26 = 0;
        int v25 = 1;
        goto LABEL_17;
      }
    }
  }
  char v27 = 0;
  *(unsigned char *)a2 = 0;
LABEL_26:
  *(unsigned char *)(a2 + 24) = v27;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebKitAXValueState>(uint64_t *a1)
{
  uint64_t v2 = IPC::Decoder::decode<unsigned int>(a1);
  BOOL v4 = (v2 & 0xFF00000000) == 0 || (v2 - 2) < 0xFFFFFFFC;
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v8 = a1[3];
    if (v8 && v7 != 0)
    {
      int v11 = v2;
      BOOL v10 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
      BOOL v4 = v10;
      LODWORD(v2) = v11;
    }
  }
  if (v4) {
    return 0;
  }
  else {
    return v2 | 0x100000000;
  }
}

int8x16_t WebKit::PlatformCALayerRemote::setName(int8x16_t *this, WTF::StringImpl **a2)
{
  WTF::String::operator=(this[5].i64, a2);
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(1uLL));
  this[4] = result;
  return result;
}

uint64_t *WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(WebKit::ResourceLoadStatisticsStore *this)
{
  v141[4] = *MEMORY[0x1E4F143B8];
  if ((_MergedGlobals_71 & 1) == 0)
  {
    v124[0] = "ObservedDomains";
    v124[1] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v120[0] = 0;
    v120[8] = 0;
    v121 = (WTF::StringImpl *)v129[0];
    char v122 = 0;
    char v123 = 0;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v129, (uint64_t)v124, (uint64_t *)&v121);
    v119[0] = "TopLevelDomains";
    v119[1] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v115[0] = 0;
    v115[8] = 0;
    v116 = v125;
    char v117 = 0;
    char v118 = 0;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v130, (uint64_t)v119, (uint64_t *)&v116);
    v114[0] = "StorageAccessUnderTopFrameDomains";
    v114[1] = 34;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v2 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS StorageAccessUnderTopFrameDomains_domainID_topLevelDomainID on StorageAccessUnderTopFrameDomains(domainID, topLevelDomainID)", &v109);
    v3 = v109;
    v109 = 0;
    char v111 = 1;
    uint64_t v110 = 0;
    v112[0] = v2;
    v112[1] = v3;
    char v113 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v131, (uint64_t)v114, (uint64_t *)v112);
    v108[0] = "TopFrameUniqueRedirectsTo";
    v108[1] = 26;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BOOL v4 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameUniqueRedirectsTo_sourceDomainID_toDomainID on TopFrameUniqueRedirectsTo(sourceDomainID, toDomainID)", &v103);
    unint64_t v5 = v103;
    v103 = 0;
    char v105 = 1;
    uint64_t v104 = 0;
    v106[0] = v4;
    v106[1] = v5;
    char v107 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v132, (uint64_t)v108, (uint64_t *)v106);
    v102[0] = "TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement";
    v102[1] = 56;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v6 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement_sourceDomainID_toDomainID on TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement(sourceDomainID, toDomainID)", &v97);
    uint64_t v7 = v97;
    v97 = 0;
    char v99 = 1;
    uint64_t v98 = 0;
    v100[0] = v6;
    v100[1] = v7;
    char v101 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v133, (uint64_t)v102, (uint64_t *)v100);
    v96[0] = "TopFrameUniqueRedirectsFrom";
    v96[1] = 28;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v8 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameUniqueRedirectsFrom_targetDomainID_fromDomainID on TopFrameUniqueRedirectsFrom(targetDomainID, fromDomainID)", &v91);
    unint64_t v9 = v91;
    v91 = 0;
    uint64_t v92 = 0;
    char v93 = 1;
    v94[0] = v8;
    v94[1] = v9;
    char v95 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v134, (uint64_t)v96, (uint64_t *)v94);
    v90[0] = "TopFrameLinkDecorationsFrom";
    v90[1] = 28;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BOOL v10 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameLinkDecorationsFrom_toDomainID_fromDomainID on TopFrameLinkDecorationsFrom(toDomainID, fromDomainID)", &v85);
    int v11 = v85;
    v85 = 0;
    uint64_t v86 = 0;
    char v87 = 1;
    v88[0] = v10;
    v88[1] = v11;
    char v89 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v135, (uint64_t)v90, (uint64_t *)v88);
    v84[0] = "TopFrameLoadedThirdPartyScripts";
    v84[1] = 32;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameLoadedThirdPartyScripts_topFrameDomainID_subresourceDomainID on TopFrameLoadedThirdPartyScripts(topFrameDomainID, subresourceDomainID)", &v79);
    uint64_t v13 = v79;
    v79 = 0;
    uint64_t v80 = 0;
    char v81 = 1;
    v82[0] = v12;
    v82[1] = v13;
    char v83 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v136, (uint64_t)v84, (uint64_t *)v82);
    v78[0] = "SubframeUnderTopFrameDomains";
    v78[1] = 29;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v14 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubframeUnderTopFrameDomains_subFrameDomainID_topFrameDomainID on SubframeUnderTopFrameDomains(subFrameDomainID, topFrameDomainID)", &v73);
    int v15 = v73;
    v73 = 0;
    uint64_t v74 = 0;
    char v75 = 1;
    v76[0] = v14;
    v76[1] = v15;
    char v77 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v137, (uint64_t)v78, (uint64_t *)v76);
    v72[0] = "SubresourceUnderTopFrameDomains";
    v72[1] = 32;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    char v16 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubresourceUnderTopFrameDomains_subresourceDomainID_topFrameDomainID on SubresourceUnderTopFrameDomains(subresourceDomainID, topFrameDomainID)", &v67);
    unint64_t v17 = v67;
    v67 = 0;
    uint64_t v68 = 0;
    char v69 = 1;
    v70[0] = v16;
    v70[1] = v17;
    char v71 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v138, (uint64_t)v72, (uint64_t *)v70);
    v66[0] = "SubresourceUniqueRedirectsTo";
    v66[1] = 29;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubresourceUniqueRedirectsTo_subresourceDomainID_toDomainID on SubresourceUniqueRedirectsTo(subresourceDomainID, toDomainID)", &v61);
    uint64_t v19 = v61;
    unint64_t v61 = 0;
    uint64_t v62 = 0;
    char v63 = 1;
    v64[0] = v18;
    v64[1] = v19;
    char v65 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v139, (uint64_t)v66, (uint64_t *)v64);
    v60[0] = "SubresourceUniqueRedirectsFrom";
    v60[1] = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v20 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubresourceUniqueRedirectsFrom_subresourceDomainID_fromDomainID on SubresourceUniqueRedirectsFrom(subresourceDomainID, fromDomainID)", &v55);
    char v21 = v55;
    char v55 = 0;
    uint64_t v56 = 0;
    char v57 = 1;
    v58[0] = v20;
    v58[1] = v21;
    char v59 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v140, (uint64_t)v60, (uint64_t *)v58);
    v54[0] = "OperatingDates";
    v54[1] = 15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v22 = v125;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS OperatingDates_year_month_monthDay on OperatingDates(year, month, monthDay)", &v49);
    v23 = v49;
    int v49 = 0;
    uint64_t v50 = 0;
    char v51 = 1;
    v52[0] = v22;
    v52[1] = v23;
    char v53 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v141, (uint64_t)v54, (uint64_t *)v52);
    WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(&v125, (uint64_t)v129, 13);
    uint64_t v24 = (uint64_t)v125;
    v125 = 0;
    qword_1EB359890 = v24;
    uint64_t v25 = v126;
    uint64_t v126 = 0;
    qword_1EB359898 = v25;
    LODWORD(v24) = v127;
    int v127 = 0;
    dword_1EB3598A0 = v24;
    byte_1EB3598A4 = v128;
    uint64_t v26 = 48;
    char v128 = 0;
    do
    {
      WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair((WTF::StringImpl **)&v129[v26]);
      v26 -= 4;
    }
    while (v26 != -4);
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v52);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50);
    uint64_t v28 = v49;
    int v49 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v27);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v58);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56);
    uint64_t v30 = v55;
    char v55 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v64);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62);
    uint64_t v32 = v61;
    unint64_t v61 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v70);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v68);
    uint64_t v34 = v67;
    v67 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v76);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
    uint64_t v36 = v73;
    v73 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v82);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80);
    char v38 = v79;
    v79 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v37);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v88);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86);
    char v40 = v85;
    v85 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v39);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v94);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v92);
    int v42 = v91;
    v91 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, v41);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v100);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v98);
    int v44 = v97;
    v97 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v43);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v106);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v104);
    int v46 = v103;
    v103 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v45);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v112);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v110);
    int v48 = v109;
    v109 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v47);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(&v116);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v115);
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(&v121);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
    _MergedGlobals_71 = 1;
  }
  return &qword_1EB359890;
}

WTF::StringImpl **std::pair<WTF::String,std::optional<WTF::String>>::~pair(WTF::StringImpl **a1)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 1));
  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair(WTF::StringImpl **a1)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 2));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  BOOL v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v10;
    }
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)a1 = 0;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a3 + 16))
  {
    uint64_t v8 = a3[1];
    a3[1] = 0;
    *(void *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

WTF::StringImpl *WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue@<X0>(const char *a1@<X1>, void *a2@<X8>)
{
  WTF::String::String((WTF::String *)&v6, a1);
  int8x16_t result = v6;
  if (v6)
  {
    WTF::StringImpl::replace();
    int8x16_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v76 = v3;
  IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(&v241, a2);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v154);
  unsigned __int16 v74 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2);
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>((uint64_t *)a2, (uint64_t)&cf);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v150);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v148);
  unsigned __int16 v73 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<WTF::URL>(a2, &v144);
  IPC::Decoder::decode<WTF::URL>(a2, &v140);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v138);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v136);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v134);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v132);
  unsigned __int16 v72 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v71 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>(a2, (uint64_t)&v235);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v130);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v128);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v126);
  unsigned __int16 v70 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v69 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v68 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v67 = IPC::Decoder::decode<BOOL>(a2);
  uint64_t v66 = IPC::Decoder::decode<unsigned int>(a2);
  unsigned __int16 v65 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v64 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v63 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v62 = IPC::Decoder::decode<BOOL>(a2);
  uint64_t v60 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  unint64_t v61 = v4;
  unsigned __int16 v59 = IPC::Decoder::decode<BOOL>(a2);
  int v58 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  unsigned __int16 v5 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v124);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v122);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v120);
  unsigned __int16 v6 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v7 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v8 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v9 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(a2);
  uint64_t v56 = IPC::Decoder::decode<unsigned long long>(a2);
  char v57 = v10;
  IPC::Decoder::decode<std::optional<double>>(a2, &v117);
  IPC::Decoder::decode<std::optional<double>>(a2, &v114);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v111);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v108);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v106);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v104);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v102);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v100);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v98);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v96);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v94);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v92);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v90);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v88);
  unsigned __int16 v11 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v12 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v13 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v14 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v84, a2);
  IPC::Decoder::decode<WebKit::ResourceLoadStatisticsParameters>((uint64_t)&v78, a2);
  if (*(void *)a2)
  {
    uint64_t v16 = (uint64_t)v76;
    if (!(_BYTE)v76) {
      goto LABEL_90;
    }
    v156[0] = v75;
    uint64_t v16 = v242;
    if (!v242) {
      goto LABEL_90;
    }
    long long v157 = v241;
    uint64_t v16 = v155;
    if (!v155) {
      goto LABEL_90;
    }
    uint64_t v17 = v154;
    uint64_t v154 = 0;
    uint64_t v158 = v17;
    uint64_t v16 = v74;
    if (v74 <= 0xFFu) {
      goto LABEL_90;
    }
    char v159 = v74;
    uint64_t v16 = v153;
    if (!v153) {
      goto LABEL_90;
    }
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    CFTypeRef v160 = v18;
    uint64_t v16 = v151;
    if (!v151) {
      goto LABEL_90;
    }
    uint64_t v19 = v150;
    uint64_t v150 = 0;
    uint64_t v161 = v19;
    uint64_t v16 = v149;
    if (!v149) {
      goto LABEL_90;
    }
    uint64_t v20 = v148;
    uint64_t v148 = 0;
    uint64_t v162 = v20;
    uint64_t v16 = v73;
    if (v73 <= 0xFFu) {
      goto LABEL_90;
    }
    char v163 = v73;
    uint64_t v16 = v147;
    if (!v147) {
      goto LABEL_90;
    }
    uint64_t v16 = (uint64_t)&v140;
    uint64_t v21 = v144;
    uint64_t v144 = 0;
    uint64_t v164 = v21;
    long long v165 = v145;
    long long v166 = v146;
    LODWORD(v145) = v145 & 0xFFFFFFFE;
    if (!v143) {
      goto LABEL_90;
    }
    uint64_t v22 = v140;
    uint64_t v140 = 0;
    uint64_t v167 = v22;
    long long v168 = v141;
    long long v169 = v142;
    LODWORD(v141) = v141 & 0xFFFFFFFE;
    uint64_t v16 = v139;
    if (!v139) {
      goto LABEL_90;
    }
    uint64_t v23 = v138;
    uint64_t v138 = 0;
    uint64_t v170 = v23;
    uint64_t v16 = v137;
    if (!v137) {
      goto LABEL_90;
    }
    uint64_t v24 = v136;
    uint64_t v136 = 0;
    v171 = v24;
    uint64_t v16 = v135;
    if (!v135) {
      goto LABEL_90;
    }
    uint64_t v25 = v134;
    uint64_t v134 = 0;
    uint64_t v172 = v25;
    uint64_t v16 = v133;
    if (!v133) {
      goto LABEL_90;
    }
    uint64_t v26 = v132;
    uint64_t v132 = 0;
    v173 = v26;
    uint64_t v16 = v72;
    if (v72 <= 0xFFu) {
      goto LABEL_90;
    }
    char v174 = v72;
    uint64_t v16 = v71;
    if (v71 <= 0xFFu) {
      goto LABEL_90;
    }
    char v175 = v71;
    uint64_t v16 = v240;
    if (!v240) {
      goto LABEL_90;
    }
    uint64_t v176 = v235;
    uint64_t v27 = v236;
    uint64_t v235 = 0;
    uint64_t v236 = 0;
    uint64_t v177 = v27;
    long long v28 = v237;
    long long v237 = 0uLL;
    long long v178 = v28;
    long long v179 = v238;
    long long v180 = v239;
    uint64_t v16 = v131;
    if (!v131) {
      goto LABEL_90;
    }
    uint64_t v29 = v130;
    uint64_t v130 = 0;
    uint64_t v181 = v29;
    uint64_t v16 = v129;
    if (!v129) {
      goto LABEL_90;
    }
    uint64_t v30 = v128;
    char v128 = 0;
    v182 = v30;
    uint64_t v16 = v127;
    if (!v127) {
      goto LABEL_90;
    }
    uint64_t v31 = v126;
    uint64_t v126 = 0;
    uint64_t v183 = v31;
    uint64_t v16 = v70;
    if (v70 <= 0xFFu) {
      goto LABEL_90;
    }
    char v184 = v70;
    uint64_t v16 = v69;
    if (v69 <= 0xFFu) {
      goto LABEL_90;
    }
    char v185 = v69;
    uint64_t v16 = v68;
    if (v68 <= 0xFFu) {
      goto LABEL_90;
    }
    char v186 = v68;
    uint64_t v16 = v67;
    if (v67 <= 0xFFu) {
      goto LABEL_90;
    }
    char v187 = v67;
    uint64_t v16 = v66;
    if ((v66 & 0xFF00000000) == 0) {
      goto LABEL_90;
    }
    int v188 = v66;
    uint64_t v16 = v65;
    if (v65 <= 0xFFu) {
      goto LABEL_90;
    }
    char v189 = v65;
    uint64_t v16 = v64;
    if (v64 <= 0xFFu) {
      goto LABEL_90;
    }
    char v190 = v64;
    uint64_t v16 = v63;
    if (v63 <= 0xFFu) {
      goto LABEL_90;
    }
    char v191 = v63;
    uint64_t v16 = v62;
    if (v62 <= 0xFFu) {
      goto LABEL_90;
    }
    char v192 = v62;
    uint64_t v16 = (uint64_t)v61;
    if (!(_BYTE)v61) {
      goto LABEL_90;
    }
    uint64_t v16 = (uint64_t)&v193;
    int v193 = v60;
    char v194 = BYTE4(v60);
    if (v59 <= 0xFFu) {
      goto LABEL_90;
    }
    char v195 = v59;
    if ((v58 & 0xFF0000) == 0) {
      goto LABEL_90;
    }
    __int16 v196 = v58;
    if (v5 <= 0xFFu) {
      goto LABEL_90;
    }
    char v197 = v5;
    if (!v125) {
      goto LABEL_90;
    }
    uint64_t v32 = v124;
    uint64_t v124 = 0;
    uint64_t v198 = v32;
    if (!v123) {
      goto LABEL_90;
    }
    uint64_t v33 = v122;
    uint64_t v122 = 0;
    uint64_t v199 = v33;
    if (!v121) {
      goto LABEL_90;
    }
    uint64_t v34 = v120;
    uint64_t v120 = 0;
    uint64_t v200 = v34;
    if (v6 <= 0xFFu) {
      goto LABEL_90;
    }
    char v201 = v6;
    if (v7 <= 0xFFu) {
      goto LABEL_90;
    }
    char v202 = v7;
    if (v8 <= 0xFFu) {
      goto LABEL_90;
    }
    char v203 = v8;
    if (v9 <= 0xFFu) {
      goto LABEL_90;
    }
    char v204 = v9;
    if (!v57) {
      goto LABEL_90;
    }
    uint64_t v205 = v56;
    if (!v119) {
      goto LABEL_90;
    }
    uint64_t v206 = v117;
    char v207 = v118;
    if (!v116) {
      goto LABEL_90;
    }
    uint64_t v208 = v114;
    char v209 = v115;
    if (!v113) {
      goto LABEL_90;
    }
    uint64_t v210 = v111;
    char v211 = v112;
    if (!v110) {
      goto LABEL_90;
    }
    uint64_t v212 = v108;
    char v213 = v109;
    if (!v107) {
      goto LABEL_90;
    }
    uint64_t v35 = v106;
    uint64_t v106 = 0;
    uint64_t v214 = v35;
    if (!v105) {
      goto LABEL_90;
    }
    uint64_t v36 = v104;
    uint64_t v104 = 0;
    v215 = v36;
    if (!v103) {
      goto LABEL_90;
    }
    uint64_t v37 = v102;
    uint64_t v102 = 0;
    uint64_t v216 = v37;
    if (!v101) {
      goto LABEL_90;
    }
    char v38 = v100;
    v100 = 0;
    v217 = v38;
    if (!v99) {
      goto LABEL_90;
    }
    uint64_t v39 = v98;
    uint64_t v98 = 0;
    uint64_t v218 = v39;
    if (!v97) {
      goto LABEL_90;
    }
    char v40 = v96;
    v96 = 0;
    v219 = v40;
    if (!v95) {
      goto LABEL_90;
    }
    uint64_t v41 = v94;
    uint64_t v94 = 0;
    uint64_t v220 = v41;
    if (!v93) {
      goto LABEL_90;
    }
    int v42 = v92;
    uint64_t v92 = 0;
    v221 = v42;
    if (!v91) {
      goto LABEL_90;
    }
    uint64_t v43 = v90;
    uint64_t v90 = 0;
    uint64_t v222 = v43;
    if (!v89) {
      goto LABEL_90;
    }
    int v44 = v88;
    v88 = 0;
    v223 = v44;
    if (v11 <= 0xFFu) {
      goto LABEL_90;
    }
    char v224 = v11;
    if (v12 <= 0xFFu) {
      goto LABEL_90;
    }
    char v225 = v12;
    if (v13 <= 0xFFu) {
      goto LABEL_90;
    }
    char v226 = v13;
    if (v14 <= 0xFFu) {
      goto LABEL_90;
    }
    char v227 = v14;
    if (!v87) {
      goto LABEL_90;
    }
    LOBYTE(v228) = 0;
    char v230 = 0;
    if (v86) {
      goto LABEL_91;
    }
    while (!v83)
    {
LABEL_90:
      __break(1u);
LABEL_91:
      uint64_t v228 = v84;
      uint64_t v55 = v85;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v229 = v55;
      char v230 = 1;
    }
    long long v45 = v78;
    long long v78 = 0u;
    *(_OWORD *)(v16 + 228) = v45;
    long long v46 = v80;
    long long v80 = 0u;
    long long v47 = v81;
    long long v81 = 0u;
    *(_DWORD *)((char *)v231 + 3) = *(_DWORD *)&v79[3];
    v231[0] = *(_DWORD *)v79;
    long long v232 = v46;
    long long v233 = v47;
    uint64_t v48 = v82;
    uint64_t v82 = 0;
    uint64_t v234 = v48;
    *(unsigned char *)(WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters((uint64_t)a1, (uint64_t)v156)
             + 608) = 1;
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v156, v49);
  }
  else
  {
    *a1 = 0;
    a1[608] = 0;
  }
  if (v83) {
    WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&v78, v15);
  }
  if (v87 && v86) {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v15);
  }
  if (v89) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v88);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90);
  if (v93) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v92);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94);
  if (v97) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v96);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v98);
  if (v101) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v100);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v102);
  if (v105) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v104);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v106);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v120);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v122);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v124);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126);
  if (v129) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v128);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v130);
  std::optional<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>::~optional((uint64_t)&v235, v50);
  if (v133) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v132);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134);
  if (v137) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v136);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v138);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v140, v51);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v144, v52);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v148);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v150);
  if (v153)
  {
    CFTypeRef v53 = cf;
    CFTypeRef cf = 0;
    if (v53) {
      CFRelease(v53);
    }
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v154);
}

void sub_1985F6C9C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,int a38,__int16 a39,const char **a40,__int16 a41,int a42,__int16 a43,uint64_t a44,const char **a45,__int16 a46,int a47,__int16 a48,uint64_t a49,const char **a50,__int16 a51,int a52,__int16 a53,uint64_t a54,const char **a55,__int16 a56,int a57,__int16 a58,uint64_t a59,const char **a60,__int16 a61,int a62,__int16 a63)
{
  WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&STACK[0x330], a2);
  if (a33) {
    WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&a25, v73);
  }
  if ((_BYTE)a39 && a37) {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a35, v73);
  }
  if ((_BYTE)a41) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a40);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a43);
  if ((_BYTE)a46) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a45);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a48);
  if ((_BYTE)a51) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a50);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a53);
  if ((_BYTE)a56) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a55);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a58);
  if ((_BYTE)a61) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a60);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a63);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a71);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x200]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x210]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x220]);
  if (LOBYTE(STACK[0x238])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x230]);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x240]);
  std::optional<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>::~optional(v71 - 224, v74);
  if (LOBYTE(STACK[0x258])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x250]);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x260]);
  if (LOBYTE(STACK[0x278])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x270]);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x280]);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x290], v75);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2C0], v76);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2F0]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x300]);
  if (LOBYTE(STACK[0x318]))
  {
    char v77 = (const void *)STACK[0x310];
    STACK[0x310] = 0;
    if (v77) {
      CFRelease(v77);
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_1985F6E40()
{
}

void sub_1985F6E48()
{
}

void sub_1985F6E50()
{
}

void sub_1985F6E58()
{
}

void sub_1985F6E60()
{
}

void sub_1985F6E68()
{
}

void sub_1985F6E70()
{
}

void sub_1985F6E78()
{
}

void sub_1985F6E80()
{
}

void sub_1985F6E88()
{
}

void sub_1985F6EB4()
{
}

void sub_1985F6EBC()
{
}

void sub_1985F6EC4()
{
}

void sub_1985F6F00()
{
}

void sub_1985F6F08()
{
}

void sub_1985F6F10()
{
}

void sub_1985F6F18()
{
}

void sub_1985F6F28()
{
}

void sub_1985F6F30()
{
}

void sub_1985F6F38()
{
}

void sub_1985F6F40()
{
}

void sub_1985F6F48()
{
}

void sub_1985F6F50()
{
}

void sub_1985F6F5C()
{
}

void sub_1985F6F64()
{
}

void sub_1985F6F6C()
{
}

void sub_1985F6F78()
{
}

uint64_t std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    v4[1] = a1;
    v4[0] = 0;
    v4[3] = a1;
    v4[2] = v4;
    unsigned __int16 v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)a1);
    if (v5) {
      WTF::StringImpl::deref(v5, v1);
    }
  }
  return a1;
}

WTF::StringImpl *WTF::StringImpl::deref(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  if (*(_DWORD *)this == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
  }
  *(_DWORD *)this -= 2;
  return this;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 13) = 0;
  uint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3) {
    BOOL v4 = *((_DWORD *)a2 + 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = 24 * v3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * v3));
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v7 + v8;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
    }
    while (v6 != v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = a2[1];
    unint64_t v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v12 >> 31) ^ v12;
    *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
    unint64_t v13 = *((unsigned int *)a2 + 2);
    if (v13)
    {
      uint64_t v14 = 0;
      for (unint64_t i = 0; i < v13; ++i)
      {
        uint64_t v16 = *a2;
        uint64_t v17 = *(WTF::StringImpl **)(*a2 + v14);
        if (v17)
        {
          *(_DWORD *)v17 += 2;
          uint64_t v21 = v17;
          v22[0] = 0;
          int v23 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v22, v16 + v14 + 8);
          WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, &v21);
          if (v23 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9D9C28[v23])(&v24, v22);
          }
          int v23 = -1;
          uint64_t v19 = v21;
          uint64_t v21 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v18);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          unint64_t v13 = *((unsigned int *)a2 + 2);
        }
        v14 += 24;
      }
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    int8x16_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9D9C28[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    int8x16_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9D9D68[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(WTF **)a1;
  uint64_t result = WTF::fastMalloc((WTF *)(24 * a2));
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = result;
    do
    {
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  unint64_t v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v12 >> 31) ^ v12;
  *(unsigned char *)(a1 + 20) = 0;
  if (v4)
  {
    unint64_t v13 = v5;
    do
    {
      if (*(void *)v13) {
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (WTF::StringImpl **)v13);
      }
      uint64_t v14 = *((unsigned int *)v13 + 4);
      if (v14 != -1) {
        ((void (*)(char *, char *))off_1EE9B4DF0[v14])(&v16, (char *)v13 + 8);
      }
      *((_DWORD *)v13 + 4) = -1;
      int v15 = *(WTF::StringImpl **)v13;
      *(void *)unint64_t v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v7);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      unint64_t v13 = (WTF *)((char *)v13 + 24);
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = v4 - 1;
  int v6 = *((_DWORD *)a1 + 4);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unsigned int v9 = (v8 ^ v6) & v5;
  uint64_t v10 = *a1;
  unint64_t v11 = (uint64_t *)(*a1 + 24 * v9);
  unint64_t v12 = (WTF::StringImpl *)*v11;
  if (*v11)
  {
    unsigned int v14 = 0;
    do
    {
      unsigned int v15 = *((_DWORD *)v12 + 4);
      if (v15 >= 0x100) {
        unsigned int v16 = v15 >> 8;
      }
      else {
        unsigned int v16 = WTF::StringImpl::hashSlowCase(v12);
      }
      unsigned int v17 = (v9 + v4 - ((v16 ^ v6) & v5)) & v5;
      if (v14 > v17)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>((uint64_t *)a2, v11);
        unsigned int v14 = v17;
      }
      unsigned int v9 = (v9 + 1) & v5;
      ++v14;
      uint64_t v10 = *a1;
      unint64_t v11 = (uint64_t *)(*a1 + 24 * v9);
      unint64_t v12 = (WTF::StringImpl *)*v11;
    }
    while (*v11);
  }
  WTF::String::operator=(v11, (uint64_t *)a2);

  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v10 + 24 * v9 + 8, (uint64_t)(a2 + 1));
}

WTF::StringImpl *WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  int v49 = a3;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8) || *(unsigned char *)(a1 + 20) && v8 <= 2 * (int)v7)
  {
    if (v8) {
      unsigned int v45 = 2 * v8;
    }
    else {
      unsigned int v45 = 8;
    }
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v45);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  unsigned int v9 = v8 - 1;
  int v10 = *(_DWORD *)(a1 + 16);
  unsigned int v11 = *((_DWORD *)*a2 + 4);
  if (v11 >= 0x100) {
    unsigned int v12 = v11 >> 8;
  }
  else {
    unsigned int v12 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v13 = (v12 ^ v10) & v9;
  uint64_t v14 = *(void *)a1;
  uint64_t v15 = *(void *)a1 + 24 * v13;
  unsigned int v16 = *(WTF **)v15;
  if (*(void *)v15)
  {
    uint64_t v47 = a4;
    uint64_t v48 = a2;
    unsigned int v17 = 0;
    while (1)
    {
      unsigned int v18 = *((_DWORD *)v16 + 4);
      int v19 = v18 >= 0x100 ? v18 >> 8 : WTF::StringImpl::hashSlowCase(v16);
      unsigned int v20 = (v13 + v8 - ((v19 ^ v10) & v9)) & v9;
      if (v17 > v20) {
        break;
      }
      if (v19 == v12)
      {
        char v43 = WTF::equal(*(WTF **)v15, *v48, a3);
        uint64_t v14 = *(void *)a1;
        if (v43)
        {
          uint64_t v44 = v14 + 24 * *(unsigned int *)(a1 + 8);
          *(void *)uint64_t v47 = v15;
          *(void *)(v47 + 8) = v44;
          *(unsigned char *)(v47 + 16) = 0;
          return (WTF::StringImpl *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v15 + 8, (uint64_t)a3);
        }
      }
      else
      {
        uint64_t v14 = *(void *)a1;
      }
      uint64_t v13 = (v13 + 1) & v9;
      ++v17;
      uint64_t v15 = v14 + 24 * v13;
      unsigned int v16 = *(WTF **)v15;
      if (!*(void *)v15)
      {
        if (v17 >= 0x80) {
          *(unsigned char *)(a1 + 20) = 1;
        }
        a4 = v47;
        a2 = v48;
        goto LABEL_42;
      }
    }
    if (v17 >= 0x80) {
      *(unsigned char *)(a1 + 20) = 1;
    }
    uint64_t v21 = *(WTF::StringImpl **)v15;
    *(void *)uint64_t v15 = 0;
    uint64_t v50 = v21;
    uint64_t v22 = v14 + 24 * v13;
    uint64_t v23 = v22 + 8;
    v51[0] = 0;
    int v52 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)v51, v22 + 8);
    unsigned int v27 = *(_DWORD *)(v22 + 16);
    uint64_t v26 = (_DWORD *)(v22 + 16);
    uint64_t v25 = v27;
    if (v27 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v25])(&v53, v23);
    }
    *uint64_t v26 = -1;
    long long v28 = *(WTF::StringImpl **)v15;
    *(void *)uint64_t v15 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v24);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 16) = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>(WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double> &&)::{lambda(void)#1}>((uint64_t *)v15, v48, (uint64_t *)&v49);
    unsigned int v30 = (v13 + 1) & v9;
    for (uint64_t i = *(void *)a1; ; uint64_t i = *(void *)a1)
    {
      uint64_t v32 = (uint64_t *)(i + 24 * v30);
      uint64_t v33 = (WTF::StringImpl *)*v32;
      if (!*v32) {
        break;
      }
      unsigned int v34 = *((_DWORD *)v33 + 4);
      if (v34 >= 0x100) {
        unsigned int v35 = v34 >> 8;
      }
      else {
        unsigned int v35 = WTF::StringImpl::hashSlowCase(v33);
      }
      ++v20;
      unsigned int v36 = (v30 + v8 - ((v35 ^ v10) & v9)) & v9;
      if (v20 > v36)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>((uint64_t *)&v50, v32);
        unsigned int v20 = v36;
      }
      unsigned int v30 = (v30 + 1) & v9;
    }
    uint64_t v37 = v50;
    uint64_t v50 = 0;
    char v38 = (WTF::StringImpl *)*v32;
    *uint64_t v32 = (uint64_t)v37;
    a4 = v47;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v29);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(i + 24 * v30 + 8, (uint64_t)v51);
    if (v52 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v52])(&v53, v51);
    }
    int v52 = -1;
    uint64_t result = v50;
    uint64_t v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
LABEL_42:
    uint64_t result = (WTF::StringImpl *)WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>(WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double> &&)::{lambda(void)#1}>((uint64_t *)v15, a2, (uint64_t *)&v49);
  }
  unsigned int v41 = *(_DWORD *)(a1 + 8);
  ++*(_DWORD *)(a1 + 12);
  uint64_t v42 = *(void *)a1 + 24 * v41;
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v42;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  uint64_t v5 = (uint64_t)(a1 + 1);
  unsigned int v9 = (WTF::StringImpl *)v4;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v10, (uint64_t)(a1 + 1));
  WTF::String::operator=(a1, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 1));
  uint64_t v7 = (WTF::StringImpl *)*a2;
  *a2 = (uint64_t)v9;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)(a2 + 1), (uint64_t)&v10);
  if (v11 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9B4DF0[v11])(&v12, &v10);
  }
  int v11 = -1;
  return 0;
}

void sub_1985F79A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1)
  {
    if (v3 != -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v3 != -1)
    {
LABEL_3:
      uint64_t v5 = result;
      return ((uint64_t (*)(uint64_t *))off_1EE9B52B8[v3])(&v5);
    }
    uint64_t v4 = result;
    uint64_t result = ((uint64_t (*)(char *))off_1EE9B4DF0[v2])(&v6);
    *(_DWORD *)(v4 + 8) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEbjdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSO_EEEDcSG_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == 1)
  {
    *a2 = *a3;
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4DF0[v5])(&v6, v4);
    }
    *(unsigned char *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_bjdEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1985F7B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B4DF0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4DF0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9B52D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t *WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(uint64_t *a1, WTF::StringImpl **a2)
{
  v5[2] = (uint64_t)a1;
  v5[1] = (uint64_t)a2;
  v5[4] = (uint64_t)v5;
  v5[3] = (uint64_t)a2;
  v5[6] = (uint64_t)v5;
  v5[5] = (uint64_t)a2;
  char v7 = a2;
  char v6 = *a2;
  if (v6) {
    WTF::StringImpl::ref(v6);
  }
  v5[0] = (uint64_t)v6;
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v5);
  uint64_t v8 = v5;
  v9[1] = v5;
  v9[0] = 0;
  v9[3] = v5;
  v9[2] = v9;
  uint64_t v10 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v5);
  if (v10) {
    WTF::StringImpl::deref(v10, v3);
  }
  return a1;
}

uint64_t *WTF::String::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(a1, a2);
  return a1;
}

uint64_t *WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(uint64_t *a1, uint64_t *a2)
{
  v5[2] = (uint64_t)a1;
  v5[1] = (uint64_t)a2;
  v5[4] = (uint64_t)v5;
  v5[3] = (uint64_t)a2;
  v5[6] = (uint64_t)v5;
  v5[5] = (uint64_t)a2;
  v5[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v5);
  uint64_t v5[7] = (uint64_t)v5;
  v6[1] = v5;
  v6[0] = 0;
  v6[3] = v5;
  v6[2] = v6;
  char v7 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v5);
  if (v7) {
    WTF::StringImpl::deref(v7, v3);
  }
  return a1;
}

uint64_t *WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(uint64_t *a1, uint64_t *a2)
{
  return std::swap[abi:sn180100]<JSC::ArrayBufferView *>(a1, a2);
}

uint64_t *std::swap[abi:sn180100]<JSC::ArrayBufferView *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  return result;
}

uint64_t WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(uint64_t *a1)
{
  v2[1] = a1;
  v2[0] = 0;
  v2[3] = a1;
  v2[2] = v2;
  return std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
}

uint64_t std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  return v2;
}

_DWORD *WTF::StringImpl::ref(_DWORD *this)
{
  *this += 2;
  return this;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>(WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double> &&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, uint64_t *a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v5 = *a3;
  v7[0] = 0;
  int v8 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)v7, v5);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 1), (uint64_t)v7);
  if (v8 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v8])(&v9, v7);
  }
  return result;
}

uint64_t *WTF::String::operator=(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(a1, a2);
  return a1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEbjdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSO_EEEDcSG_DpT0_(uint64_t *a1, void *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 8);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      double result = *a3;
      *a2 = *(void *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9B4DF0[v5])(&v7, v4);
  }
  double result = *a3;
  *(double *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 8) = 3;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEbjdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSO_EEEDcSG_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__assign_alt[abi:sn180100]<0ul,WTF::String,WTF::String>(*a1, a2, a3);
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__assign_alt[abi:sn180100]<0ul,WTF::String,WTF::String>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *((unsigned int *)result + 2);
  if (v4)
  {
    uint64_t v5 = result;
    if (v4 != -1) {
      double result = (uint64_t *)((uint64_t (*)(char *, uint64_t *))off_1EE9B4DF0[v4])(&v7, result);
    }
    uint64_t v6 = *a3;
    *a3 = 0;
    *uint64_t v5 = v6;
    *((_DWORD *)v5 + 2) = 0;
  }
  else
  {
    return WTF::String::operator=(a2, a3);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEbjdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSO_EEEDcSG_DpT0_(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__assign_alt[abi:sn180100]<2ul,unsigned int,unsigned int>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__assign_alt[abi:sn180100]<2ul,unsigned int,unsigned int>(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = (_DWORD *)result;
  uint64_t v5 = *(unsigned int *)(result + 8);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4DF0[v5])(&v6, result);
  }
  v4[2] = -1;
  *uint64_t v4 = *a3;
  v4[2] = 2;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CacheModel>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 1;
      goto LABEL_4;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v5 = 0;
  int v6 = 0;
LABEL_4:
  BOOL v7 = v5 < 3;
  unsigned int v8 = v5 | 0x100;
  if ((v6 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WTF::URL>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  double result = IPC::ArgumentCoder<WTF::URL,void>::decode(a1, a2);
  if (!a2[40])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    double result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::URL,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  double result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    MEMORY[0x19972E890](v6, &v7, 0);
    WTF::URL::URL((uint64_t)a2, (uint64_t *)v6);
    a2[40] = 1;
    double result = v6[0];
    v6[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  if (v8)
  {
    double result = v7;
    BOOL v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1985F8474(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v10 - 32);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  WTF::URL::URL(a1 + 80, (uint64_t *)(a2 + 80));
  WTF::URL::URL(a1 + 120, (uint64_t *)(a2 + 120));
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v9;
  uint64_t v10 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v10;
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 176) = v11;
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 184) = v12;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v13 = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(void *)(a1 + 208) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 216) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a1 + 220) = v13;
  uint64_t v14 = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(void *)(a1 + 224) = v14;
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(void *)(a1 + 232) = v15;
  long long v16 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v16;
  uint64_t v17 = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 272) = v17;
  uint64_t v18 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 280) = v18;
  uint64_t v19 = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(void *)(a1 + 288) = v19;
  long long v20 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v20;
  uint64_t v21 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a1 + 320) = v21;
  uint64_t v22 = *(void *)(a2 + 328);
  *(void *)(a2 + 328) = 0;
  *(void *)(a1 + 328) = v22;
  uint64_t v23 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a1 + 336) = v23;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  long long v24 = *(_OWORD *)(a2 + 360);
  long long v25 = *(_OWORD *)(a2 + 376);
  long long v26 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 401) = *(_OWORD *)(a2 + 401);
  *(_OWORD *)(a1 + 376) = v25;
  *(_OWORD *)(a1 + 392) = v26;
  *(_OWORD *)(a1 + 360) = v24;
  uint64_t v27 = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *(void *)(a1 + 424) = v27;
  uint64_t v28 = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  *(void *)(a1 + 432) = v28;
  uint64_t v29 = *(void *)(a2 + 440);
  *(void *)(a2 + 440) = 0;
  *(void *)(a1 + 440) = v29;
  uint64_t v30 = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  *(void *)(a1 + 448) = v30;
  uint64_t v31 = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = 0;
  *(void *)(a1 + 456) = v31;
  uint64_t v32 = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = 0;
  *(void *)(a1 + 464) = v32;
  uint64_t v33 = *(void *)(a2 + 472);
  *(void *)(a2 + 472) = 0;
  *(void *)(a1 + 472) = v33;
  uint64_t v34 = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  *(void *)(a1 + 480) = v34;
  uint64_t v35 = *(void *)(a2 + 488);
  *(void *)(a2 + 488) = 0;
  *(void *)(a1 + 488) = v35;
  uint64_t v36 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  *(void *)(a1 + 496) = v36;
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  if (*(unsigned char *)(a2 + 528))
  {
    *(void *)(a1 + 512) = 0;
    *(void *)(a1 + 520) = 0;
    uint64_t v45 = *(void *)(a2 + 512);
    *(void *)(a2 + 512) = 0;
    *(void *)(a1 + 512) = v45;
    LODWORD(v45) = *(_DWORD *)(a2 + 520);
    *(_DWORD *)(a2 + 520) = 0;
    *(_DWORD *)(a1 + 520) = v45;
    LODWORD(v45) = *(_DWORD *)(a2 + 524);
    *(_DWORD *)(a2 + 524) = 0;
    *(_DWORD *)(a1 + 524) = v45;
    *(unsigned char *)(a1 + 528) = 1;
  }
  uint64_t v37 = *(void *)(a2 + 536);
  *(void *)(a2 + 536) = 0;
  *(void *)(a1 + 536) = v37;
  uint64_t v38 = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(void *)(a1 + 544) = v38;
  LODWORD(v38) = *(_DWORD *)(a2 + 552);
  *(_DWORD *)(a1 + 555) = *(_DWORD *)(a2 + 555);
  *(_DWORD *)(a1 + 552) = v38;
  uint64_t v39 = *(void *)(a2 + 560);
  *(void *)(a2 + 560) = 0;
  *(void *)(a1 + 560) = v39;
  *(void *)(a1 + 568) = 0;
  uint64_t v40 = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  *(void *)(a1 + 568) = v40;
  *(void *)(a1 + 576) = 0;
  uint64_t v41 = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  *(void *)(a1 + 576) = v41;
  *(void *)(a1 + 584) = 0;
  uint64_t v42 = *(void *)(a2 + 584);
  *(void *)(a2 + 584) = 0;
  *(void *)(a1 + 584) = v42;
  uint64_t v43 = *(void *)(a2 + 592);
  *(void *)(a2 + 592) = 0;
  *(void *)(a1 + 592) = v43;
  return a1;
}

void sub_1985F8790(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v5 = *v3;
  WTF::StringImpl *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)v2[8];
  v2[8] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)v2[7];
  v2[7] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (const void *)v2[6];
  v2[6] = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (WTF::StringImpl *)v2[4];
  void v2[4] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<std::optional<double>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  double result = IPC::ArgumentCoder<std::optional<double>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<double>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2] - *result;
  if (v2 <= v4)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *double result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (v15)
    {
      uint64_t v22 = result;
      long long v25 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        double result = v22;
        a2 = v25;
        uint64_t v14 = *v22;
        unint64_t v13 = v22[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  uint64_t v6 = v3 + v4 + 1;
  result[2] = v6;
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_14:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *double result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (v16)
    {
      uint64_t v21 = result;
      long long v24 = a2;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        double result = v21;
        a2 = v24;
        uint64_t v3 = *v21;
        unint64_t v2 = v21[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v7 = *v5;
  if (v7 >= 2)
  {
LABEL_15:
    *double result = 0;
    result[1] = 0;
    double result = (void *)result[3];
    if (!result || !v2) {
      goto LABEL_20;
    }
    uint64_t v23 = a2;
    double result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v3);
    goto LABEL_18;
  }
  if (v7)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v8 || v2 - v8 <= 7)
    {
      *double result = 0;
      result[1] = 0;
      uint64_t v17 = result[3];
      if (!v17) {
        goto LABEL_20;
      }
      uint64_t v18 = result;
      uint64_t v23 = a2;
      (*(void (**)(void))(*(void *)v17 + 16))(result[3]);
      a2 = v23;
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      double result = (void *)v18[3];
      uint64_t *v18 = 0;
      v18[1] = 0;
      if (!result || !v20) {
        goto LABEL_20;
      }
      double result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v19);
LABEL_18:
      a2 = v23;
LABEL_20:
      char v12 = 0;
      *a2 = 0;
      goto LABEL_11;
    }
    uint64_t v10 = (uint64_t *)(v3 + v8);
    uint64_t v11 = *v10;
    result[2] = v10 + 1;
    *(void *)a2 = v11;
    char v12 = 1;
    a2[8] = 1;
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
    char v12 = 1;
  }
LABEL_11:
  a2[16] = v12;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v15 = IPC::Decoder::decode<unsigned long long>(a1);
  char v34 = v4;
  unsigned __int16 v5 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v6 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v7 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v33 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v32 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v31 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v30 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v29 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v28 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v27 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v26 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v25 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v24 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v23 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v22 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v21 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v20 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v19 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v18 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v17 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v16 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v39 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v38 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v37 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v36 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v35 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v8 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v9 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v10 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v11 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v12 = IPC::Decoder::decode<BOOL>(a1);
  uint64_t result = IPC::Decoder::decode<BOOL>(a1);
  uint64_t v14 = *a1;
  if (!*a1) {
    goto LABEL_38;
  }
  LOBYTE(v14) = v34;
  if (!v34) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v5;
  if (v5 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v6;
  if (v6 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v7;
  if (v7 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v33;
  if (v33 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v32;
  if (v32 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v31;
  if (v31 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v30;
  if (v30 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v29;
  if (v29 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v28;
  if (v28 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v27;
  if (v27 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v26;
  if (v26 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v25;
  if (v25 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v24;
  if (v24 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v23;
  if (v23 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v22;
  if (v22 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v21;
  if (v21 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v20;
  if (v20 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v19;
  if (v19 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v18;
  if (v18 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v17;
  if (v17 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v16;
  if (v16 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v39;
  if (v39 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v38;
  if (v38 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v37;
  if (v37 <= 0xFFu) {
    goto LABEL_37;
  }
  LOBYTE(v14) = v36;
  if (v36 <= 0xFFu
    || (LOBYTE(v14) = v35, v35 <= 0xFFu)
    || (LOBYTE(v14) = v8, v8 <= 0xFFu)
    || (LOBYTE(v14) = v9, v9 <= 0xFFu)
    || (LOBYTE(v14) = v10, v10 <= 0xFFu)
    || (LOBYTE(v14) = v11, v11 <= 0xFFu)
    || (LOBYTE(v14) = v12, v12 <= 0xFFu)
    || (LOBYTE(v14) = result, (unsigned __int16)result <= 0xFFu))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    *a2 = 0;
    goto LABEL_36;
  }
  *(void *)a2 = v15;
  a2[8] = v5;
  a2[9] = v6;
  a2[10] = v7;
  a2[11] = v33;
  a2[12] = v32;
  a2[13] = v31;
  a2[14] = v30;
  a2[15] = v29;
  a2[16] = v28;
  a2[17] = v27;
  a2[18] = v26;
  a2[19] = v25;
  a2[20] = v24;
  a2[21] = v23;
  a2[22] = v22;
  a2[23] = v21;
  a2[24] = v20;
  a2[25] = v19;
  a2[26] = v18;
  a2[27] = v17;
  a2[28] = v16;
  a2[29] = v39;
  a2[30] = v38;
  a2[31] = v37;
  a2[32] = v36;
  a2[33] = v35;
  a2[34] = v8;
  a2[35] = v9;
  a2[36] = v10;
  a2[37] = v11;
  a2[38] = v12;
  LOBYTE(v14) = 1;
  a2[39] = result;
LABEL_36:
  a2[40] = v14;
  return result;
}

uint64_t IPC::Decoder::decode<BOOL>(void *a1)
{
  unint64_t v1 = (unsigned __int8 *)a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if ((unint64_t)v1 <= v3)
  {
    char v4 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v15;
        uint64_t v9 = *v15;
        char v4 = (unsigned __int8 *)v15[1];
      }
      else
      {
        char v4 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_10;
  }
  char v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    char v4 = v1;
    uint64_t v9 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v14 = a1;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v11 + 16))(v11, v9, v4);
        LODWORD(v4) = 0;
        a1 = v14;
        uint64_t v2 = *v14;
        unint64_t v1 = (unsigned __int8 *)v14[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      LODWORD(v4) = 0;
    }
    goto LABEL_12;
  }
  LODWORD(v4) = *v4;
  if (v4 < 2)
  {
    int v5 = 256;
    int v6 = 1;
    goto LABEL_5;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    int v13 = (int)v4;
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v2);
    }
    int v6 = 0;
    int v5 = 0;
    LODWORD(v4) = v13;
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
LABEL_5:
  if (v4) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  return v5 | v7;
}

uint64_t std::optional<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    char v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 24))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

WTF *IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 64)) {
    return (WTF *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1985F91E4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::ResourceLoadStatisticsParameters>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::ResourceLoadStatisticsParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 64))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<__CFDictionary const*>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
}

void *IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(void *result, IPC::Decoder *a2)
{
  unint64_t v3 = result;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned __int16 v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_12;
  }
  if (v9)
  {
    *uint64_t result = 0;
    result[1] = 0;
    goto LABEL_8;
  }
  uint64_t result = IPC::Decoder::decode<WTF::UUID>(a2, (uint64_t)v16);
  if (v17)
  {
    uint64_t v10 = v16[1];
    void *v3 = v16[0];
    v3[1] = v10;
LABEL_8:
    *((unsigned char *)v3 + 16) = 1;
    return result;
  }
LABEL_12:
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 16) = 0;

  return (void *)IPC::Decoder::markInvalid(a2);
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else if ((_BYTE)result)
  {
    uint64_t result = IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v9);
    if (v11)
    {
      *(void *)a1 = v9;
      uint64_t v7 = v10;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      *(void *)(a1 + 8) = v7;
      char v8 = 1;
      *(unsigned char *)(a1 + 16) = 1;
      uint64_t result = WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
    }
    else
    {
      char v8 = 0;
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 24) = v8;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1, a2, (uint64_t)v6);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
  uint64_t v7 = result;
  if ((result & 0xFF00000000) != 0) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int>((uint64_t)a1, a2, a3, (uint64_t)&v7);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int>(uint64_t a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (!v8)
  {
    char v9 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a3 + 8) && *(unsigned char *)(a4 + 4))
  {
    *(void *)a1 = *(void *)a3;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)a4;
    *(void *)(a1 + 12) = result;
    char v9 = 1;
LABEL_5:
    *(unsigned char *)(a1 + 24) = v9;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<unsigned int>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<std::optional<unsigned int>,void>::decode<IPC::Decoder>(a1);
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<std::optional<unsigned int>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      unsigned __int16 v26 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        a1 = v26;
        uint64_t v16 = *v26;
        unint64_t v15 = v26[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    unint64_t v15 = v1;
    uint64_t v16 = 0;
LABEL_14:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18)
    {
      unsigned __int16 v25 = a1;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        a1 = v25;
        uint64_t v2 = *v25;
        unint64_t v1 = v25[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v6 = *v4;
  if (v6 >= 2)
  {
LABEL_15:
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      if (v1) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v2);
      }
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    return v12 | v13 | v11;
  }
  if (v6)
  {
    unint64_t v7 = ((v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v7 && v1 - v7 > 3)
    {
      char v9 = (int *)(v2 + v7);
      int v10 = *v9;
      a1[2] = v9 + 1;
      uint64_t v11 = v10 & 0xFFFFFF00;
      uint64_t v12 = v10;
      uint64_t v13 = 0x100000000;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      uint64_t v20 = a1[3];
      if (!v20)
      {
LABEL_20:
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        uint64_t v13 = 0x100000000;
        return v12 | v13 | v11;
      }
      unsigned __int16 v21 = a1;
      (*(void (**)(void))(*(void *)v20 + 16))(a1[3]);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = v21[3];
      uint64_t v13 = 0x100000000;
      *unsigned __int16 v21 = 0;
      v21[1] = 0;
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      if (v24 && v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
        goto LABEL_20;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  return v12 | v13 | v11;
}

uint64_t non-virtual thunk to'WebKit::PageClientImpl::isFullScreen(id *this)
{
  return WebKit::PageClientImpl::isFullScreen(this - 4);
}

__n128 __copy_helper_block_e8_32c102_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralEEUliE_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(a1 + 32) = v2;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t WebCore::GraphicsContext::paintingDisabled(WebCore::GraphicsContext *this)
{
  return 0;
}

void WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_1,void>::call(uint64_t a1)
{
}

uint64_t WebCore::GraphicsLayerCA::isGraphicsLayerCA(WebCore::GraphicsLayerCA *this)
{
  return 1;
}

void sub_1985F99E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *a2 + ~(*a2 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 8 * v20;
        goto LABEL_29;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *uint64_t v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      uint64_t v14 = v16;
    }
  }
  *uint64_t v14 = v9;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      __n128 result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4, v14);
      uint64_t v14 = result;
      uint64_t v21 = *v4;
      if (*v4) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  uint64_t v26 = v21 + 8 * v24;
  char v25 = 1;
LABEL_29:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v26;
  *(unsigned char *)(a3 + 16) = v25;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
        int v21 = 1;
        do
        {
          unsigned int v22 = v20;
          uint64_t v23 = *(void *)(v15 + 8 * v20);
          unsigned int v20 = (v20 + v21++) & v16;
        }
        while (v23);
        unint64_t v24 = (void *)(v15 + 8 * v22);
        *unint64_t v24 = v14;
        if (v13 == a3) {
          unint64_t v12 = v24;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_29(int a1, const char *a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  setenv(a2, string_ptr, 1);
  return 1;
}

uint64_t WebKit::RemoteScrollingCoordinator::coordinatesScrollingForFrameView(WebKit::RemoteScrollingCoordinator *this, const WebCore::LocalFrameView *a2)
{
  uint64_t result = WebCore::LocalFrameView::renderView(a2);
  if (result)
  {
    return MEMORY[0x1F4173E60]();
  }
  return result;
}

const char **IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)a2);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 8));
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(a1, (uint64_t *)(a2 + 40));
  char v209 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v209);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 96));
  char v4 = *(unsigned char *)(a2 + 104);
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FABA4);
  }
  *unsigned int v5 = v4;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 112));
  char v7 = *(unsigned char *)(a2 + 120);
  int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FABC4);
  }
  *int v8 = v7;
  IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)(a2 + 124));
  unint64_t v10 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 132));
  uint64_t v11 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v10, (float *)(a2 + 140));
  unint64_t v12 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v11, (float *)(a2 + 148));
  int v13 = *(unsigned __int8 *)(a2 + 172);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v13)
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB1C4);
    }
    *uint64_t v14 = 1;
    if (!*(unsigned char *)(a2 + 172)) {
      goto LABEL_203;
    }
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 156));
  }
  else
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB304);
    }
    *uint64_t v14 = 0;
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 176);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 184);
  char v16 = *(unsigned char *)(a2 + 192);
  unint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FABE4);
  }
  *unint64_t v17 = v16;
  char v19 = *(unsigned char *)(a2 + 193);
  unsigned int v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAC04);
  }
  *unsigned int v20 = v19;
  char v22 = *(unsigned char *)(a2 + 194);
  uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAC24);
  }
  unsigned char *v23 = v22;
  char v210 = *(unsigned char *)(a2 + 195);
  IPC::Encoder::operator<<<BOOL>(a1, &v210);
  char v25 = *(unsigned char *)(a2 + 196);
  uint64_t v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAC44);
  }
  *uint64_t v26 = v25;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 200));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 208));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 216));
  char v28 = *(unsigned char *)(a2 + 224);
  unsigned __int16 v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAC64);
  }
  *unsigned __int16 v29 = v28;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 244));
  unsigned int v31 = *(_DWORD *)(a2 + 244);
  if (v31)
  {
    uint64_t v32 = *(void *)(a2 + 232);
    uint64_t v33 = 312 * v31;
    do
    {
      IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(a1, v32);
      v32 += 312;
      v33 -= 312;
    }
    while (v33);
  }
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 248));
  char v34 = *(unsigned char *)(a2 + 256);
  unsigned __int16 v35 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v36)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAC84);
  }
  *unsigned __int16 v35 = v34;
  char v37 = *(unsigned char *)(a2 + 257);
  unsigned __int16 v38 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FACA4);
  }
  *unsigned __int16 v38 = v37;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 260));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 264));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 272));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 280));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 288));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 292));
  char v211 = *(unsigned char *)(a2 + 296);
  IPC::Encoder::operator<<<BOOL>(a1, &v211);
  char v40 = *(unsigned char *)(a2 + 297);
  uint64_t v41 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FACC4);
  }
  *uint64_t v41 = v40;
  char v43 = *(unsigned char *)(a2 + 298);
  uint64_t v44 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v45)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FACE4);
  }
  *uint64_t v44 = v43;
  char v46 = *(unsigned char *)(a2 + 299);
  uint64_t v47 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAD04);
  }
  *uint64_t v47 = v46;
  IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)(a2 + 300));
  IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)(a2 + 308));
  char v49 = *(unsigned char *)(a2 + 316);
  uint64_t v50 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAD24);
  }
  *uint64_t v50 = v49;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(a1, a2 + 320);
  char v212 = *(unsigned char *)(a2 + 332);
  IPC::Encoder::operator<<<BOOL>(a1, &v212);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 336);
  char v52 = *(unsigned char *)(a2 + 344);
  char v53 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAD44);
  }
  *char v53 = v52;
  char v213 = *(unsigned char *)(a2 + 345);
  IPC::Encoder::operator<<<BOOL>(a1, &v213);
  char v55 = *(unsigned char *)(a2 + 346);
  uint64_t v56 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v57)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAD64);
  }
  *uint64_t v56 = v55;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 352);
  char v58 = *(unsigned char *)(a2 + 368);
  unsigned __int16 v59 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v60)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAD84);
  }
  *unsigned __int16 v59 = v58;
  char v61 = *(unsigned char *)(a2 + 369);
  unsigned __int16 v62 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v63)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FADA4);
  }
  *unsigned __int16 v62 = v61;
  char v64 = *(unsigned char *)(a2 + 370);
  unsigned __int16 v65 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v66)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FADC4);
  }
  *unsigned __int16 v65 = v64;
  char v67 = *(unsigned char *)(a2 + 371);
  unsigned __int16 v68 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v69)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FADE4);
  }
  *unsigned __int16 v68 = v67;
  char v70 = *(unsigned char *)(a2 + 372);
  uint64_t v71 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v72)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAE04);
  }
  *uint64_t v71 = v70;
  unsigned __int16 v73 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 376));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v73, *(double *)(a2 + 384));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 392));
  unsigned __int16 v74 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 400));
  int v75 = *(unsigned __int8 *)(a2 + 448);
  v76 = (unsigned char *)IPC::Encoder::grow(v74, 1uLL, 1);
  if (v75)
  {
    if (!v77)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB1E4);
    }
    unsigned char *v76 = 1;
    if (!*(unsigned char *)(a2 + 448)) {
      goto LABEL_203;
    }
    IPC::ArgumentCoder<WebCore::ViewportArguments,void>::encode(a1, a2 + 408);
  }
  else
  {
    if (!v77)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB324);
    }
    unsigned char *v76 = 0;
  }
  long long v78 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 452));
  v79 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v78, (float *)(a2 + 460));
  long long v80 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v79, (float *)(a2 + 468));
  long long v81 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v80, (float *)(a2 + 476));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v81, *(float *)(a2 + 484));
  IPC::Encoder::operator<<<int>(a1, (int *)(a2 + 488));
  IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::encode(a1, (char *)(a2 + 492));
  char v82 = *(unsigned char *)(a2 + 495);
  char v83 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v84)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAE24);
  }
  *char v83 = v82;
  char v85 = *(unsigned char *)(a2 + 496);
  char v86 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v87)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAE44);
  }
  *char v86 = v85;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 504));
  char v88 = *(unsigned char *)(a2 + 512);
  char v89 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAE64);
  }
  *char v89 = v88;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 520);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 536);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 552);
  char v91 = *(unsigned char *)(a2 + 568);
  uint64_t v92 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v93)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAE84);
  }
  *uint64_t v92 = v91;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 569));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 570));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 576));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 584);
  uint64_t v94 = *(void *)(a2 + 600);
  if (v94) {
    int v95 = *(_DWORD *)(v94 - 12);
  }
  else {
    int v95 = 0;
  }
  v96 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v97 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAEA4);
  }
  _DWORD *v96 = v95;
  uint64_t v98 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a2 + 600));
  char v99 = v98;
  char v101 = v100;
  uint64_t v102 = *(void *)(a2 + 600);
  if (v102) {
    char v103 = (uint64_t *)(v102 + 16 * *(unsigned int *)(v102 - 4));
  }
  else {
    char v103 = 0;
  }
  if (v103 != v98)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v99);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v99 + 1);
      while (1)
      {
        v99 += 2;
        if (v99 == v101) {
          break;
        }
        if ((unint64_t)(*v99 + 1) > 1) {
          goto LABEL_51;
        }
      }
      char v99 = v101;
LABEL_51:
      ;
    }
    while (v99 != v103);
  }
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 608);
  int v104 = *(unsigned __int8 *)(a2 + 896);
  char v105 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v104)
  {
    if (!v106)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB204);
    }
    *char v105 = 1;
    if (!*(unsigned char *)(a2 + 896)) {
      goto LABEL_203;
    }
    IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::encode(a1, a2 + 624);
  }
  else
  {
    if (!v106)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB344);
    }
    *char v105 = 0;
  }
  char v107 = *(unsigned char *)(a2 + 904);
  uint64_t v108 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v109)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAEC4);
  }
  *uint64_t v108 = v107;
  char v110 = *(unsigned char *)(a2 + 905);
  uint64_t v111 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAEE4);
  }
  *uint64_t v111 = v110;
  char v113 = *(unsigned char *)(a2 + 906);
  uint64_t v114 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v115)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAF04);
  }
  *uint64_t v114 = v113;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 912));
  IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 920);
  IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 936);
  IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 952);
  IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 968);
  IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 984);
  int v116 = *(unsigned __int8 *)(a2 + 1032);
  uint64_t v117 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v116)
  {
    if (!v118)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB224);
    }
    *uint64_t v117 = 1;
    if (!*(unsigned char *)(a2 + 1032)) {
      goto LABEL_203;
    }
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 1000));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 1008));
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 1028));
    unsigned int v119 = *(_DWORD *)(a2 + 1028);
    if (v119)
    {
      uint64_t v120 = *(void *)(a2 + 1016);
      uint64_t v121 = 152 * v119;
      do
      {
        IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::encode(a1, v120);
        v120 += 152;
        v121 -= 152;
      }
      while (v121);
    }
  }
  else
  {
    if (!v118)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB364);
    }
    *uint64_t v117 = 0;
  }
  int v122 = *(unsigned __int8 *)(a2 + 1048);
  char v123 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v122)
  {
    if (!v124)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB244);
    }
    *char v123 = 1;
    if (!*(unsigned char *)(a2 + 1048)) {
      goto LABEL_203;
    }
    IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 1040));
  }
  else
  {
    if (!v124)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB384);
    }
    *char v123 = 0;
  }
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 1056);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 1072));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 1080);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 1096));
  char v125 = *(unsigned char *)(a2 + 1104);
  uint64_t v126 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v127)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAF24);
  }
  *uint64_t v126 = v125;
  char v128 = *(unsigned char *)(a2 + 1105);
  unsigned __int8 v129 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAF44);
  }
  *unsigned __int8 v129 = v128;
  int v131 = *(unsigned __int8 *)(a2 + 1136);
  uint64_t v132 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v131)
  {
    if (!v133)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB264);
    }
    *uint64_t v132 = 1;
    if (!*(unsigned char *)(a2 + 1136)) {
      goto LABEL_203;
    }
    int v134 = *(_DWORD *)(a2 + 1124);
    unsigned __int8 v135 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
    if (v136 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB284);
    }
    *unsigned __int8 v135 = v134;
    if (*(_DWORD *)(a2 + 1124))
    {
      uint64_t v137 = *(unsigned int *)(a2 + 1120);
      if (v137)
      {
        uint64_t v138 = 8 * v137;
        unsigned __int8 v139 = *(uint64_t **)(a2 + 1112);
        while (!*v139)
        {
          ++v139;
          v138 -= 8;
          if (!v138) {
            goto LABEL_90;
          }
        }
      }
      else
      {
        unsigned __int8 v139 = *(uint64_t **)(a2 + 1112);
      }
      uint64_t v206 = *(void *)(a2 + 1112) + 8 * v137;
LABEL_129:
      if (v139 != (uint64_t *)v206)
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v139);
        while (++v139 != (uint64_t *)v206)
        {
          if (*v139) {
            goto LABEL_129;
          }
        }
      }
    }
  }
  else
  {
    if (!v133)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB3A4);
    }
    *uint64_t v132 = 0;
  }
LABEL_90:
  int v140 = *(unsigned __int8 *)(a2 + 1148);
  long long v141 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v140)
  {
    if (!v142)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB2A4);
    }
    *long long v141 = 1;
    if (!*(unsigned char *)(a2 + 1148)) {
      goto LABEL_203;
    }
    IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 1144));
    IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 1146));
  }
  else
  {
    if (!v142)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB3C4);
    }
    *long long v141 = 0;
  }
  char v143 = *(unsigned char *)(a2 + 1150);
  uint64_t v144 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAF64);
  }
  *uint64_t v144 = v143;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 1152));
  char v146 = *(unsigned char *)(a2 + 1160);
  unsigned __int8 v147 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v148)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAF84);
  }
  *unsigned __int8 v147 = v146;
  char v149 = *(unsigned char *)(a2 + 1161);
  uint64_t v150 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v151)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAFA4);
  }
  *uint64_t v150 = v149;
  char v152 = *(unsigned char *)(a2 + 1162);
  unsigned __int8 v153 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v154)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAFC4);
  }
  *unsigned __int8 v153 = v152;
  char v155 = *(unsigned char *)(a2 + 1163);
  v156 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FAFE4);
  }
  unsigned char *v156 = v155;
  char v158 = *(unsigned char *)(a2 + 1164);
  char v159 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v160)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB004);
  }
  *char v159 = v158;
  char v161 = *(unsigned char *)(a2 + 1165);
  uint64_t v162 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v163)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB024);
  }
  *uint64_t v162 = v161;
  char v164 = *(unsigned char *)(a2 + 1166);
  long long v165 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v166)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB044);
  }
  *long long v165 = v164;
  char v167 = *(unsigned char *)(a2 + 1167);
  long long v168 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v169)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB064);
  }
  *long long v168 = v167;
  char v170 = *(unsigned char *)(a2 + 1168);
  v171 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v172)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB084);
  }
  unsigned char *v171 = v170;
  char v173 = *(unsigned char *)(a2 + 1169);
  char v174 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v175)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB0A4);
  }
  *char v174 = v173;
  char v176 = *(unsigned char *)(a2 + 1170);
  uint64_t v177 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v178)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB0C4);
  }
  *uint64_t v177 = v176;
  char v179 = *(unsigned char *)(a2 + 1171);
  long long v180 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v181)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB0E4);
  }
  *long long v180 = v179;
  char v182 = *(unsigned char *)(a2 + 1172);
  uint64_t v183 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB104);
  }
  *uint64_t v183 = v182;
  char v185 = *(unsigned char *)(a2 + 1173);
  char v186 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v187)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB124);
  }
  *char v186 = v185;
  char v188 = *(unsigned char *)(a2 + 1174);
  char v189 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v190)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB144);
  }
  *char v189 = v188;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 1175));
  char v191 = *(unsigned char *)(a2 + 1176);
  char v192 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v193)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB164);
  }
  *char v192 = v191;
  char v194 = *(unsigned char *)(a2 + 1177);
  char v195 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v196)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB184);
  }
  *char v195 = v194;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 1178));
  char v197 = *(unsigned char *)(a2 + 1179);
  uint64_t v198 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v199)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB1A4);
  }
  *uint64_t v198 = v197;
  char v214 = *(unsigned char *)(a2 + 1180);
  IPC::Encoder::operator<<<BOOL>(a1, &v214);
  int v200 = *(unsigned __int8 *)(a2 + 1392);
  char v201 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v200)
  {
    if (!v202)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FAACCLL);
    }
    goto LABEL_125;
  }
  if (!v202)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB2C4);
  }
  *char v201 = 1;
  if (!*(unsigned char *)(a2 + 1392)) {
    goto LABEL_203;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 1184));
  IPC::ArgumentCoder<WebKit::FrameTreeCreationParameters,void>::encode(a1, a2 + 1224);
  int v203 = *(unsigned __int8 *)(a2 + 1384);
  char v201 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v203)
  {
    if (!v204)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB3E4);
    }
LABEL_125:
    *char v201 = 0;
    goto LABEL_126;
  }
  if (!v204)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB2E4);
  }
  *char v201 = 1;
  if (*(unsigned char *)(a2 + 1384))
  {
    IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode(a1, a2 + 1264);
LABEL_126:
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, a2 + 1400);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 1424));
    uint64_t v215 = *(void *)(a2 + 1432);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v215);
    IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 1440);
    IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 1456);
    return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 1472));
  }
LABEL_203:
  char v207 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
  return (const char **)IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v207, v208);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::FloatPoint const&>(IPC::Encoder *a1, float *a2)
{
  return a1;
}

WTF *IPC::ArgumentCoder<WebKit::LayerProperties,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  char v4 = (double *)*a2;
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB998);
  }
  *(void *)uint64_t result = v4;
  char v7 = (double *)*a2;
  if (*a2)
  {
    uint64_t result = (WTF *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
    char v7 = (double *)*a2;
    if ((*a2 & 2) == 0)
    {
LABEL_4:
      if ((v7 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_46;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = (WTF *)IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(a1, (double **)a2 + 3);
  char v7 = (double *)*a2;
  if ((*a2 & 4) == 0)
  {
LABEL_5:
    if ((v7 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = (WTF *)IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(a1, (double **)a2 + 4);
  char v7 = (double *)*a2;
  if ((*a2 & 8) == 0)
  {
LABEL_6:
    if ((v7 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_53;
  }
LABEL_47:
  uint64_t v8 = a2[5];
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB9F8);
    }
    *(unsigned char *)uint64_t result = 1;
    uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (float *)a2[5]);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FBA38);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  char v7 = (double *)*a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_7:
    if ((v7 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = (WTF *)IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
  char v7 = (double *)*a2;
  if ((*a2 & 0x20) == 0)
  {
LABEL_8:
    if ((v7 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebKit::LayerProperties::AnimationChanges,void>::encode(a1, (uint64_t)(a2 + 8));
  char v7 = (double *)*a2;
  if ((*a2 & 0x40) == 0)
  {
LABEL_9:
    if ((v7 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(a1, (float *)a2 + 88);
  char v7 = (double *)*a2;
  if ((*a2 & 0x80) == 0)
  {
LABEL_10:
    if (((unsigned __int16)v7 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(a1, (float *)a2 + 91);
  char v7 = (double *)*a2;
  if ((*a2 & 0x100) == 0)
  {
LABEL_11:
    if (((unsigned __int16)v7 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2 + 94);
  char v7 = (double *)*a2;
  if ((*a2 & 0x200) == 0)
  {
LABEL_12:
    if (((unsigned __int16)v7 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2 + 98);
  char v7 = (double *)*a2;
  if ((*a2 & 0x400) == 0)
  {
LABEL_13:
    if (((unsigned __int16)v7 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebKit::RemoteLayerBackingStoreOrProperties,void>::encode(a1, (WebKit::RemoteLayerBackingStore **)a2 + 51);
  char v7 = (double *)*a2;
  if ((*a2 & 0x800) == 0)
  {
LABEL_14:
    if (((unsigned __int16)v7 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (a2[53])
  {
    unint64_t v10 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB9D8);
    }
    *unint64_t v10 = 1;
    uint64_t result = (WTF *)IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2[53]);
  }
  else
  {
    char v25 = 0;
    uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, &v25);
  }
  char v7 = (double *)*a2;
  if ((*a2 & 0x1000) == 0)
  {
LABEL_15:
    if (((unsigned __int16)v7 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)(a2 + 54));
  char v7 = (double *)*a2;
  if ((*a2 & 0x2000) == 0)
  {
LABEL_16:
    if (((unsigned __int16)v7 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits> const&>(a1, a2 + 63);
  char v7 = (double *)*a2;
  if ((*a2 & 0x4000) == 0)
  {
LABEL_17:
    if (((unsigned __int16)v7 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits> const&>(a1, a2 + 65);
  char v7 = (double *)*a2;
  if ((*a2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = (WTF *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)a2 + 67));
  char v7 = (double *)*a2;
  if ((*a2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = (WTF *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 136));
  char v7 = (double *)*a2;
  if ((*a2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = (WTF *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 137));
  char v7 = (double *)*a2;
  if ((*a2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v7 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = (WTF *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 138));
  char v7 = (double *)*a2;
  if ((*a2 & 0x80000) == 0)
  {
LABEL_22:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = (WTF *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 139));
  char v7 = (double *)*a2;
  if ((*a2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = (WTF *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 140));
  char v7 = (double *)*a2;
  if ((*a2 & 0x200000) == 0)
  {
LABEL_24:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 71));
  char v7 = (double *)*a2;
  if ((*a2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v7 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 72));
  char v7 = (double *)*a2;
  if ((*a2 & 0x800000) == 0)
  {
LABEL_26:
    if ((v7 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }
LABEL_75:
  char v12 = *((unsigned char *)a2 + 584);
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FB9B8);
  }
  *(unsigned char *)uint64_t result = v12;
  char v7 = (double *)*a2;
  if ((*a2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_77:
  char v21 = *((unsigned char *)a2 + 585);
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, &v21);
  char v7 = (double *)*a2;
  if ((*a2 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_79;
  }
LABEL_78:
  char v22 = *((unsigned char *)a2 + 586);
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, &v22);
  char v7 = (double *)*a2;
  if ((*a2 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }
LABEL_79:
  char v23 = *((unsigned char *)a2 + 587);
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, &v23);
  char v7 = (double *)*a2;
  if ((*a2 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = (WTF *)IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *((unsigned char *)a2 + 588));
  char v7 = (double *)*a2;
  if ((*a2 & 0x10000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }
LABEL_81:
  char v24 = *((unsigned char *)a2 + 589);
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, &v24);
  char v7 = (double *)*a2;
  if ((*a2 & 0x20000000) == 0)
  {
LABEL_32:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 590);
  char v7 = (double *)*a2;
  if ((*a2 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 591);
  char v7 = (double *)*a2;
  if ((*a2 & 0x80000000) == 0)
  {
LABEL_34:
    if (((unint64_t)v7 & 0x100000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 592);
  char v7 = (double *)*a2;
  if ((*a2 & 0x100000000) == 0)
  {
LABEL_35:
    if (((unint64_t)v7 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 593);
  char v7 = (double *)*a2;
  if ((*a2 & 0x200000000) == 0)
  {
LABEL_36:
    if (((unint64_t)v7 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 594);
  char v7 = (double *)*a2;
  if ((*a2 & 0x400000000) == 0)
  {
LABEL_37:
    if (((unint64_t)v7 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 595);
  char v7 = (double *)*a2;
  if ((*a2 & 0x800000000) == 0)
  {
LABEL_38:
    if (((unint64_t)v7 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 596);
  char v7 = (double *)*a2;
  if ((*a2 & 0x1000000000) == 0)
  {
LABEL_39:
    if (((unint64_t)v7 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 597);
  char v7 = (double *)*a2;
  if ((*a2 & 0x2000000000) == 0)
  {
LABEL_40:
    if (((unint64_t)v7 & 0x4000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 598);
  char v7 = (double *)*a2;
  if ((*a2 & 0x4000000000) == 0)
  {
LABEL_41:
    if (((unint64_t)v7 & 0x8000000000) == 0) {
      goto LABEL_42;
    }
LABEL_92:
    uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 600);
    if ((*a2 & 0x10000000000) == 0) {
      return result;
    }
    goto LABEL_93;
  }
LABEL_91:
  uint64_t result = (WTF *)IPC::Encoder::operator<<<BOOL>(a1, (char *)a2 + 599);
  char v7 = (double *)*a2;
  if ((*a2 & 0x8000000000) != 0) {
    goto LABEL_92;
  }
LABEL_42:
  if (((unint64_t)v7 & 0x10000000000) == 0) {
    return result;
  }
LABEL_93:
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 76));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 161));
  uint64_t v14 = *((unsigned int *)a2 + 161);
  if (v14)
  {
    uint64_t v15 = a2[79];
    uint64_t v16 = 24 * v14;
    do
    {
      IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, v15);
      v15 += 24;
      v16 -= 24;
    }
    while (v16);
  }
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 81));
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 84));
  int v17 = *((unsigned __int8 *)a2 + 720);
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v17)
  {
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FBA18);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*((unsigned char *)a2 + 720))
    {
      return IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 87));
    }
    else
    {
      char v19 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v19, v20);
    }
  }
  else
  {
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FBA58);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(IPC::Encoder *a1, float *a2)
{
  float v4 = a2[1];
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
  float v5 = a2[3];
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[2]);

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v5);
}

unint64_t IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(IPC::Encoder *a1, float a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v4 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(float *)unint64_t result = a2;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[1]);
  float v4 = a2[2];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::IntSize const&>(IPC::Encoder *a1, int *a2)
{
  int v6 = *a2;
  IPC::Encoder::operator<<<int>(a1, &v6);
  int v5 = a2[1];
  IPC::Encoder::operator<<<int>(a1, &v5);
  return a1;
}

unsigned char *IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(IPC::Encoder *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 4))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(this, &v7);
    if (*(unsigned char *)(a2 + 4))
    {
      return (unsigned char *)IPC::Encoder::operator<<<int>(this, (int *)a2);
    }
    else
    {
      uint64_t v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WebKit::RemoteLayerBackingStoreOrProperties,void>::encode(v6);
    }
  }
  else
  {
    unint64_t result = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FBC54);
    }
    *unint64_t result = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteLayerBackingStoreOrProperties,void>::encode(IPC::Encoder *a1, WebKit::RemoteLayerBackingStore **a2)
{
  if (*a2) {
    int v4 = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)*a2 + 72))(*a2);
  }
  else {
    int v4 = 0;
  }
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
    if (v4)
    {
      char v7 = *a2;
      return WebKit::RemoteLayerBackingStore::encode(v7, a1);
    }
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::ChangedLayers,void>::encode(a1, (void **)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 40);
  int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_34;
  }
  *int v5 = v4 == 0;
  if (!v4) {
    goto LABEL_3;
  }
  if (!*(void *)(a2 + 40))
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1985FC0A4);
  }
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 40));
LABEL_3:
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 60));
  uint64_t v7 = *(unsigned int *)(a2 + 60);
  if (v7)
  {
    uint64_t v13 = *(void *)(a2 + 48);
    for (uint64_t i = 80 * v7; i; i -= 80)
    {
      IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits> const&>(a1, (uint64_t *)v13);
      LOBYTE(v19) = *(unsigned char *)(v13 + 16);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v19);
      if (*(unsigned char *)(v13 + 48))
      {
        LOBYTE(v19) = 1;
        IPC::Encoder::operator<<<BOOL>(a1, (char *)&v19);
        if (!*(unsigned char *)(v13 + 48)) {
          goto LABEL_32;
        }
        IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::VideoElementData,void>::encode(a1, v13 + 24);
      }
      else
      {
        uint64_t v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1985FC0E4);
        }
        *uint64_t v15 = 0;
      }
      LOBYTE(v19) = *(_DWORD *)(v13 + 72);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v19);
      if ((_BYTE)v19)
      {
        IPC::ArgumentCoder<std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,0ul>(a1, v13 + 56, v19);
      }
      else if (*(_DWORD *)(v13 + 72))
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_32:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_33:
        __break(0xC471u);
        JUMPOUT(0x1985FC184);
      }
      v13 += 80;
    }
  }
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 64);
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 124));
  uint64_t v8 = *(unsigned int *)(a2 + 124);
  if (v8)
  {
    int v17 = *(uint64_t **)(a2 + 112);
    uint64_t v18 = 8 * v8;
    do
    {
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v17++);
      v18 -= 8;
    }
    while (v18);
  }
  int v19 = *(_DWORD *)(a2 + 128);
  IPC::Encoder::operator<<<int>(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 132);
  IPC::Encoder::operator<<<int>(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 136);
  IPC::Encoder::operator<<<int>(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 140);
  IPC::Encoder::operator<<<int>(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 144);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 148);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 152);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 156);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 160);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 164);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 168);
  IPC::Encoder::operator<<<int>(a1, &v19);
  int v19 = *(_DWORD *)(a2 + 172);
  IPC::Encoder::operator<<<int>(a1, &v19);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 176));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 184));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 192));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 200));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 208));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 216));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 224));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 232));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 240));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 248));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 256));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 264));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 266));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 267));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 268));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 269));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 270));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 271));
  int v9 = *(unsigned __int8 *)(a2 + 752);
  unint64_t v10 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v9)
  {
    if (!v11) {
      goto LABEL_33;
    }
    *unint64_t v10 = 1;
    if (!*(unsigned char *)(a2 + 752)) {
      goto LABEL_32;
    }
    IPC::ArgumentCoder<WebKit::EditorState,void>::encode(a1, a2 + 272);
  }
  else
  {
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FC0C4);
    }
    *unint64_t v10 = 0;
  }
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, a2 + 768);
  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 784));
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_1::operator() const(WTF::ASCIILiteral const&)::{lambda(int)#1}::operator() const(int)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v19 = v2;
      CFRetain(*(CFTypeRef *)(v2 - 8));
      uint64_t v5 = *(void *)(a1 + 24);
      if (!v5) {
        goto LABEL_32;
      }
      uint64_t v4 = (void *)(v5 - 1);
      if (v5 == 1)
      {
        uint64_t v6 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v6 = *(WTF::StringImpl **)v25;
      }
      char v24 = v6;
LABEL_7:
      uint64_t v7 = *(unsigned int *)(v19 + 68);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)(v19 + 56);
        uint64_t v9 = 8 * v7;
        while (1)
        {
          uint64_t v10 = *v8;
          uint64_t v11 = *(void *)(*v8 + 144);
          if (!v11 || !*(void *)(v11 + 352)) {
            goto LABEL_15;
          }
          xpc_connection_get_audit_token();
          uint64_t v12 = *(void *)(*v8 + 144);
          if (!v12 || !*(void *)(v12 + 352))
          {
            std::__throw_bad_optional_access[abi:sn180100]();
            __break(1u);
LABEL_32:
            uint64_t v6 = 0;
            char v24 = 0;
            goto LABEL_7;
          }
          xpc_connection_get_audit_token();
          *(_OWORD *)char v23 = *(_OWORD *)&v25[1];
          *(_OWORD *)&v23[15] = *(_OWORD *)&v25[16];
          char v22 = v25[0];
          if (WTF::hasEntitlement()) {
            break;
          }
LABEL_23:
          ++v8;
          v9 -= 8;
          if (!v9)
          {
            uint64_t v6 = v24;
            goto LABEL_25;
          }
        }
        uint64_t v10 = *v8;
LABEL_15:
        if (*(_DWORD *)(a1 + 40))
        {
          char v13 = 0;
          LOBYTE(v20) = 0;
        }
        else
        {
          uint64_t v20 = *(void *)(a1 + 32);
          char v13 = 1;
        }
        char v21 = v13;
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 2645;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v26 = v14;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, (uint64_t *)&v24);
        IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v14, (uint64_t)&v20);
        v25[0] = 0;
        v25[16] = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v26, 0, (uint64_t)v25, 1);
        if (v25[16])
        {
          uint64_t v15 = *(void *)v25;
          *(void *)char v25 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        uint64_t v16 = v26;
        uint64_t v26 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        goto LABEL_23;
      }
LABEL_25:
      char v24 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      CFRelease(*(CFTypeRef *)(v19 - 8));
    }
  }
}

void sub_1985FC420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t IPC::Encoder::encodeHeader(IPC::Encoder *this)
{
  IPC::Encoder::operator<<<unsigned char const&>(this, IPC::defaultMessageFlags);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(this, *(_WORD *)this);

  return IPC::Encoder::operator<<<unsigned long long &>(this, (uint64_t *)this + 1);
}

unint64_t IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(IPC::Encoder *a1, __int16 a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 2uLL, 2);
  if (v4 <= 1)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_WORD *)unint64_t result = a2;
  }
  return result;
}

uint64_t IPC::Encoder::operator<<<unsigned char const&>(IPC::Encoder *a1, char *a2)
{
  char v3 = *a2;
  unint64_t v4 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v5)
  {
    *unint64_t v4 = v3;
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(IPC::Encoder *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    int v6 = *(_DWORD *)(v3 + 4);
    uint64_t v7 = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
    if (v8 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FC750);
    }
    *uint64_t v7 = v6;
    uint64_t v9 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FC770);
    }
    *uint64_t v9 = (v5 & 4) != 0;
    uint64_t v11 = *a2;
    if ((v5 >> 2))
    {
      if (v11)
      {
        char v21 = *(const void **)(v11 + 8);
        unint64_t v13 = *(unsigned int *)(v11 + 4);
        uint64_t v12 = (void *)IPC::Encoder::grow(this, 1uLL, v13);
        if (v22 < v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1985FC7FCLL);
        }
        uint64_t v14 = v21;
      }
      else
      {
        uint64_t v12 = (void *)IPC::Encoder::grow(this, 1uLL, 0);
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      size_t v15 = v13;
    }
    else
    {
      if (v11)
      {
        uint64_t v18 = *(const void **)(v11 + 8);
        uint64_t v19 = *(unsigned int *)(v11 + 4);
        uint64_t v12 = (void *)IPC::Encoder::grow(this, 2uLL, 2 * v19);
        if (v20 < 2 * v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1985FC81CLL);
        }
        size_t v15 = 2 * v19;
      }
      else
      {
        uint64_t v12 = (void *)IPC::Encoder::grow(this, 2uLL, 0);
        size_t v15 = 0;
        uint64_t v18 = 0;
      }
      uint64_t v14 = v18;
    }
    return memcpy(v12, v14, v15);
  }
  else
  {
    unint64_t result = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
    if (v17 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FC790);
    }
    *unint64_t result = -1;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, const void *a2, size_t a3)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a3);
  if (a3)
  {
    uint64_t v7 = (void *)IPC::Encoder::grow(a1, 1uLL, a3);
    if (v8 < a3)
    {
      unint64_t result = 831;
      __break(0xC471u);
    }
    else
    {
      return (unint64_t)memcpy(v7, a2, a3);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v4 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = a2;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FC9B8);
    }
    *unint64_t result = 1;
    if (*((unsigned char *)a2 + 8))
    {
      uint64_t v7 = *a2;
      unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 8uLL, 8);
      if (v8 <= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1985FC9D8);
      }
      *(void *)unint64_t result = v7;
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FC9F8);
    }
    *unint64_t result = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v6);
      uint64_t v8 = v6[1];
      unint64_t result = IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v8);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::MarkableTraits> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_6;
  }
  *unint64_t result = v4 == 0;
  if (!v4) {
    return result;
  }
  if (!*a2)
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x1985FCB18);
  }
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2);
  uint64_t v7 = a2[1];
  return (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v7);
}

uint64_t IPC::ArgumentCoder<WebKit::ChangedLayers,void>::encode(IPC::Encoder *this, void **a2)
{
  if (*a2) {
    int v4 = *((_DWORD *)*a2 - 3);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
    uint64_t v8 = result;
    uint64_t v10 = v9;
    if (*a2) {
      uint64_t v11 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 != result)
    {
      do
      {
        long long v13 = *(_OWORD *)(*(void *)v8 + 16);
        IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(this, (uint64_t *)&v13);
        uint64_t v12 = *(void *)v8;
        v8 += 8;
        uint64_t result = (uint64_t)IPC::ArgumentCoder<WebKit::LayerProperties,void>::encode(this, (uint64_t *)(v12 + 64));
        while (v8 != v10)
        {
          if ((unint64_t)(*(void *)v8 + 1) > 1) {
            goto LABEL_12;
          }
          v8 += 8;
        }
        uint64_t v8 = v10;
LABEL_12:
        ;
      }
      while (v8 != v11);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2);
  uint64_t v5 = a2[1];
  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
}

uint64_t WebKit::RemoteLayerBackingStore::encode(WebKit::RemoteLayerBackingStore *this, IPC::Encoder *a2)
{
  char v4 = *((unsigned char *)this + 53);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a2, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  *uint64_t v5 = v4;
  char v7 = *((unsigned char *)this + 24);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a2, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FCEA8);
  }
  *uint64_t v8 = v7;
  LOBYTE(v19[0]) = 0;
  char v21 = 0;
  if (*((unsigned char *)this + 176))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v16, (unsigned int *)this + 26);
    std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>((uint64_t)v19, (uint64_t)v16);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, WebKit::RemoteLayerBackingStore *))(*(void *)this + 104))(v16, this);
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v19, (uint64_t)v16);
    if (!v18) {
      goto LABEL_7;
    }
  }
  if (v17 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v17]((int)&v22, (WTF::MachSendRight *)v16);
  }
LABEL_7:
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a2, (unint64_t)v19);
  v16[0] = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)this + 112))(this);
  v16[1] = v10;
  if ((_BYTE)v10)
  {
    uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a2, 1uLL, 1);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FCEC8);
    }
    *uint64_t v11 = 1;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a2, v16);
  }
  else
  {
    char v22 = 0;
    IPC::Encoder::operator<<<BOOL>(a2, &v22);
  }
  (*(void (**)(WebKit::RemoteLayerBackingStore *, IPC::Encoder *))(*(void *)this + 88))(this, a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a2, (uint64_t)this + 184);
  if (*((unsigned char *)this + 96))
  {
    long long v13 = (unsigned char *)IPC::Encoder::grow(a2, 1uLL, 1);
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FCEE8);
    }
    *long long v13 = 1;
    if (*((unsigned char *)this + 96))
    {
      uint64_t result = IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a2, (void *)this + 10);
      goto LABEL_14;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_26:
    JUMPOUT(0x1985FCE88);
  }
  LOBYTE(v16[0]) = 0;
  uint64_t result = IPC::Encoder::operator<<<BOOL>(a2, (char *)v16);
LABEL_14:
  if (v21)
  {
    if (v20 != -1) {
      return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v20]((int)v16, (WTF::MachSendRight *)v19);
    }
  }
  return result;
}

void sub_1985FCF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,char a34)
{
  if (a18 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[a18](v34 - 33, (WTF::MachSendRight *)&a10);
  }
  if (a34)
  {
    if (a32 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[a32](v34 - 34, (WTF::MachSendRight *)&a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::bufferSetIdentifier(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1) {
    return *(void *)(v1 + 24);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::frontBufferHandle@<X0>(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)this + 376);
  if (*((unsigned char *)this + 448))
  {
    uint64_t v4 = *((unsigned int *)this + 110);
    if (v4 != -1) {
      uint64_t result = off_1EE9C0238[v4]((int)&v5, (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)((char *)this + 376));
    }
    *((_DWORD *)this + 110) = -1;
    *((unsigned char *)this + 448) = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 24 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode(a1, v6);
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IntRect,void>::encode(IPC::Encoder *a1, void *a2)
{
  uint64_t v4 = HIDWORD(*a2);
  int v8 = *a2;
  IPC::Encoder::operator<<<int>(a1, &v8);
  int v8 = v4;
  IPC::Encoder::operator<<<int>(a1, &v8);
  unint64_t v5 = a2[1];
  unint64_t v6 = HIDWORD(v5);
  int v8 = v5;
  IPC::Encoder::operator<<<int>(a1, &v8);
  int v8 = v6;
  return IPC::Encoder::operator<<<int>(a1, &v8);
}

unsigned char *IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a1, a2 + 104);

  return IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a1, a2 + 128);
}

unsigned char *WebKit::RemoteLayerWithRemoteRenderingBackingStore::encodeBufferAndBackendInfos(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, IPC::Encoder *a2)
{
  if (*((unsigned char *)this + 336))
  {
    int v5 = *(_DWORD *)(*((void *)this + 40) + 84);
    uint64_t v8 = *((void *)this + 41);
    int v9 = v5;
    char v10 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    char v10 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, (uint64_t)&v8);
  if (*((unsigned char *)this + 352))
  {
    int v6 = *(_DWORD *)(*((void *)this + 40) + 84);
    uint64_t v8 = *((void *)this + 43);
    int v9 = v6;
    char v10 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    char v10 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, (uint64_t)&v8);
  if (*((unsigned char *)this + 368))
  {
    int v7 = *(_DWORD *)(*((void *)this + 40) + 84);
    uint64_t v8 = *((void *)this + 45);
    int v9 = v7;
    char v10 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    char v10 = 0;
  }
  return IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, (uint64_t)&v8);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FD32CLL);
    }
    *unint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
      int v7 = *(_DWORD *)(a2 + 8);
      return (unsigned char *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v7);
    }
    else
    {
      uint64_t v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::encode(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FD30CLL);
    }
    *unint64_t result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, a2);
  char v5 = *(unsigned char *)(a2 + 80);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WebKit::BufferIdentifierSet,void>::encode(a1, a2 + 88);
}

unsigned char *IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(IPC::Encoder *a1, unint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 72);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FD42CLL);
    }
    *unint64_t result = 1;
    if (*(unsigned char *)(a2 + 72))
    {
      unsigned __int8 v10 = *(_DWORD *)(a2 + 64);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
      return (unsigned char *)IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>(a1, a2, v10);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,0ul>(v7, v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FD44CLL);
    }
    *unint64_t result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,0ul>(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 64) == 1)
    {
      return IPC::Encoder::addAttachment(result, a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>(v3);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>(IPC::Encoder *a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,0ul>((uint64_t)a1, a2, a3);
  }
  else if (*(_DWORD *)(a2 + 64))
  {
    int v4 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v4, v5);
  }
  else
  {
    return IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(a1, a2);
  }
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a2 + 3);
  uint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3) {
    goto LABEL_27;
  }
  *(_DWORD *)uint64_t result = v4;
  if (*((_DWORD *)a2 + 3))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *((unsigned int *)a2 + 2);
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      for (uint64_t i = *a2; !*(void *)i; i += 24)
      {
        v9 -= 24;
        if (!v9) {
          return result;
        }
      }
    }
    else
    {
      uint64_t i = *a2;
    }
    uint64_t v11 = v7 + 24 * v8;
LABEL_10:
    if (i != v11)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)i);
      uint64_t v12 = (int *)(i + 8);
      char v13 = *(_DWORD *)(i + 16);
      uint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v13);
      switch(v13)
      {
        case 2:
          if (*(_DWORD *)(i + 16) == 2)
          {
            uint64_t result = IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *v12);
            goto LABEL_23;
          }
          goto LABEL_26;
        case 1:
          if (*(_DWORD *)(i + 16) == 1)
          {
            uint64_t result = IPC::Encoder::operator<<<BOOL>(a1, (char *)(i + 8));
            goto LABEL_23;
          }
          goto LABEL_26;
        case 0:
          if (!*(_DWORD *)(i + 16))
          {
            uint64_t result = (uint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(i + 8));
            goto LABEL_23;
          }
LABEL_26:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
          uint64_t result = 831;
          __break(0xC471u);
          return result;
      }
      if (v13 != 3) {
        goto LABEL_23;
      }
      if (*(_DWORD *)(i + 16) != 3) {
        goto LABEL_26;
      }
      uint64_t result = IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)v12);
LABEL_23:
      while (1)
      {
        i += 24;
        if (i == v11) {
          break;
        }
        if (*(void *)i) {
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, void **a2)
{
  int v4 = *a2;
  if (*a2) {
    LODWORD(v4) = *((_DWORD *)v4 - 3);
  }
  int v10 = (int)v4;
  IPC::Encoder::operator<<<int>(a1, &v10);
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  unint64_t v6 = result;
  uint64_t v8 = v7;
  if (*a2) {
    uint64_t v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((uint64_t *)v9 != result)
  {
    do
    {
      uint64_t result = (uint64_t *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      while (++v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_11;
        }
      }
      unint64_t v6 = v8;
LABEL_11:
      ;
    }
    while (v6 != (uint64_t *)v9);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = &v6[15 * v5];
    do
    {
      IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::encode(a1, v6);
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6 + 10);
      v6 += 15;
    }
    while (v6 != v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 24 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebKit::WebScriptMessageHandlerData,void>::encode(a1, v6);
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 120 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebKit::WebUserStyleSheetData,void>::encode(a1, v6);
      v6 += 15;
      v7 -= 120;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 104 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::WebUserScriptData,void>::encode(a1, v6);
      v6 += 13;
      v7 -= 104;
    }
    while (v7);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(IPC::Encoder *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(this, &v7);
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::Encoder::operator<<<WebCore::FloatPoint const&>(this, (float *)a2);
    }
    else
    {
      uint64_t v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v6);
    }
  }
  else
  {
    unint64_t result = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FD93CLL);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FD9E8);
    }
    *unint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
      uint64_t v8 = *(void *)(a2 + 8);
      return (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v8);
    }
    else
    {
      char v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FDA08);
    }
    *unint64_t result = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(IPC::Encoder *this, double **a2)
{
  if (*a2)
  {
    int v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FDA9CLL);
    }
    *int v4 = 1;
    uint64_t v6 = *a2;
    return IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(this, v6);
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(this, &v8);
  }
}

unint64_t IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(IPC::Encoder *a1, double *a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[5]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[6]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[7]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[8]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[9]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[10]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[11]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[12]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[13]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[14]);
  double v4 = a2[15];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(IPC::Encoder *a1, double a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v4 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(double *)unint64_t result = a2;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  WebCore::SharedMemory::createHandle();
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, (unint64_t)v5);
  if (v5[16]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[5]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[6]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[7]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[8]);
  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[9]);
}

void sub_1985FDCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(IPC::Encoder *this, unint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(this, &v8);
  }
  unint64_t v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v5) {
    goto LABEL_9;
  }
  *unint64_t v4 = 1;
  if (!*(unsigned char *)(a2 + 16))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_9:
    unint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  IPC::Encoder::addAttachment((uint64_t)this, a2);
  uint64_t v6 = *(void *)(a2 + 8);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, v6);
}

void *IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 40));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 48);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, (uint64_t *)(a2 + 64));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 72);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 88);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 104);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 120);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 136);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 152);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 168);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 184);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 200);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 216);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 232);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 248);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 264);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 280);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 296);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 312));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 320));
  int v4 = *(_DWORD *)(a2 + 328);
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE5FCLL);
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 332);
  char v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE61CLL);
  }
  *char v8 = v7;
  char v10 = *(unsigned char *)(a2 + 333);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE63CLL);
  }
  *uint64_t v11 = v10;
  char v13 = *(unsigned char *)(a2 + 334);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE65CLL);
  }
  *uint64_t v14 = v13;
  char v16 = *(unsigned char *)(a2 + 335);
  int v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE67CLL);
  }
  *int v17 = v16;
  char v19 = *(unsigned char *)(a2 + 336);
  int v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE69CLL);
  }
  *int v20 = v19;
  char v22 = *(unsigned char *)(a2 + 337);
  char v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE6BCLL);
  }
  unsigned char *v23 = v22;
  char v25 = *(unsigned char *)(a2 + 338);
  uint64_t v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE6DCLL);
  }
  *uint64_t v26 = v25;
  char v28 = *(unsigned char *)(a2 + 339);
  unsigned __int16 v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE6FCLL);
  }
  *unsigned __int16 v29 = v28;
  char v31 = *(unsigned char *)(a2 + 340);
  uint64_t v32 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE71CLL);
  }
  *uint64_t v32 = v31;
  char v34 = *(unsigned char *)(a2 + 341);
  unsigned __int16 v35 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v36)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE73CLL);
  }
  *unsigned __int16 v35 = v34;
  char v37 = *(unsigned char *)(a2 + 342);
  unsigned __int16 v38 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE75CLL);
  }
  *unsigned __int16 v38 = v37;
  LOBYTE(v112) = *(unsigned char *)(a2 + 343);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v112);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 344));
  IPC::Encoder::operator<<<int>(a1, (int *)(a2 + 352));
  IPC::Encoder::operator<<<int>(a1, (int *)(a2 + 356));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 360));
  IPC::Encoder::operator<<<int>(a1, (int *)(a2 + 368));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 376));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 384));
  char v40 = *(unsigned char *)(a2 + 392);
  uint64_t v41 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE77CLL);
  }
  *uint64_t v41 = v40;
  char v43 = *(unsigned char *)(a2 + 393);
  uint64_t v44 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v45)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE79CLL);
  }
  *uint64_t v44 = v43;
  char v46 = *(unsigned char *)(a2 + 394);
  uint64_t v47 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE7BCLL);
  }
  *uint64_t v47 = v46;
  uint64_t v49 = *(void *)(a2 + 400);
  uint64_t v50 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v49)
  {
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FE91CLL);
    }
    *uint64_t v50 = 1;
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(*(void *)(a2 + 400) + 16), *(void *)(*(void *)(a2 + 400) + 24));
  }
  else
  {
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FE95CLL);
    }
    *uint64_t v50 = 0;
  }
  uint64_t v52 = *(void *)(a2 + 408);
  if (v52) {
    int v53 = *(_DWORD *)(v52 - 12);
  }
  else {
    int v53 = 0;
  }
  uint64_t v54 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE7DCLL);
  }
  *uint64_t v54 = v53;
  uint64_t v56 = *(void *)(a2 + 408);
  if (!v56)
  {
    unsigned __int16 v59 = 0;
    uint64_t v57 = 0;
    goto LABEL_34;
  }
  uint64_t v57 = *(unsigned int *)(v56 - 4);
  char v58 = (void *)(v56 + 16 * v57);
  if (!*(_DWORD *)(v56 - 12))
  {
    unsigned __int16 v59 = (void *)(v56 + 16 * v57);
LABEL_34:
    char v58 = (void *)(v56 + 16 * v57);
    goto LABEL_35;
  }
  unsigned __int16 v59 = *(void **)(a2 + 408);
  if (v57)
  {
    uint64_t v60 = 16 * v57;
    unsigned __int16 v59 = *(void **)(a2 + 408);
    while ((unint64_t)(*v59 + 1) <= 1)
    {
      v59 += 2;
      v60 -= 16;
      if (!v60)
      {
        unsigned __int16 v59 = v58;
        break;
      }
    }
  }
LABEL_35:
  if (v56) {
    char v61 = (void *)(v56 + 16 * *(unsigned int *)(v56 - 4));
  }
  else {
    char v61 = 0;
  }
  while (v59 != v61)
  {
    IPC::ArgumentCoder<WebCore::ContentType,void>::encode(a1, (uint64_t)v59);
    unsigned __int16 v62 = v59 + 2;
    unsigned __int16 v59 = v58;
    if (v62 != v58)
    {
      unsigned __int16 v59 = v62;
      while ((unint64_t)(*v59 + 1) <= 1)
      {
        v59 += 2;
        if (v59 == v58)
        {
          unsigned __int16 v59 = v58;
          break;
        }
      }
    }
  }
  IPC::ArgumentCoder<__CFData const*,void>::encode(a1, *(CFTypeRef *)(a2 + 416));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 424);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 440));
  IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits> const&>(a1, (uint64_t *)(a2 + 448));
  char v63 = *(unsigned char *)(a2 + 456);
  char v64 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v65)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE7FCLL);
  }
  *char v64 = v63;
  int v66 = *(unsigned __int8 *)(a2 + 616);
  char v67 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v66)
  {
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FE93CLL);
    }
    unsigned char *v67 = 1;
    if (!*(unsigned char *)(a2 + 616))
    {
      uint64_t v111 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(v111);
    }
    IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::encode(a1, a2 + 464);
  }
  else
  {
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FE97CLL);
    }
    unsigned char *v67 = 0;
  }
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 624);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 640);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 656);
  char v69 = *(unsigned char *)(a2 + 672);
  char v70 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v71)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE81CLL);
  }
  *char v70 = v69;
  char v72 = *(unsigned char *)(a2 + 673);
  unsigned __int16 v73 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE83CLL);
  }
  unsigned char *v73 = v72;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 680);
  char v75 = *(unsigned char *)(a2 + 696);
  v76 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v77)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE85CLL);
  }
  unsigned char *v76 = v75;
  char v78 = *(unsigned char *)(a2 + 697);
  v79 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v80)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE87CLL);
  }
  unsigned char *v79 = v78;
  LOBYTE(v112) = *(unsigned char *)(a2 + 698);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v112);
  char v81 = *(unsigned char *)(a2 + 699);
  char v82 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v83)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE89CLL);
  }
  *char v82 = v81;
  uint64_t v84 = *(void *)(a2 + 704);
  if (v84) {
    int v85 = *(_DWORD *)(v84 - 12);
  }
  else {
    int v85 = 0;
  }
  char v86 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v87 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE8BCLL);
  }
  *char v86 = v85;
  uint64_t v88 = *(void *)(a2 + 704);
  if (v88)
  {
    if (*(_DWORD *)(v88 - 12))
    {
      uint64_t v89 = v88 + 16 * *(unsigned int *)(v88 - 4);
      uint64_t v112 = *(uint64_t **)(a2 + 704);
      uint64_t v113 = v89;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(&v112);
      char v91 = v112;
      uint64_t v90 = v113;
      uint64_t v88 = *(void *)(a2 + 704);
      goto LABEL_66;
    }
    uint64_t v92 = *(unsigned int *)(v88 - 4);
    char v91 = (uint64_t *)(v88 + 16 * v92);
  }
  else
  {
    char v91 = 0;
    uint64_t v92 = 0;
  }
  uint64_t v90 = v88 + 16 * v92;
LABEL_66:
  uint64_t v112 = v91;
  uint64_t v113 = v90;
  if (v88) {
    uint64_t v93 = (uint64_t *)(v88 + 16 * *(unsigned int *)(v88 - 4));
  }
  else {
    uint64_t v93 = 0;
  }
  if (v93 != v91)
  {
    do
    {
      IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)v91);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)v91 + 4);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)v91 + 5);
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v91 + 1));
      v112 += 2;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(&v112);
      char v91 = v112;
    }
    while (v112 != v93);
  }
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 712));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 720));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 728));
  IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)(a2 + 736));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 744));
  IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::encode(a1, a2 + 752);
  char v94 = *(unsigned char *)(a2 + 776);
  int v95 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v96)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE8DCLL);
  }
  *int v95 = v94;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 784));
  uint64_t v97 = *(void *)(a2 + 792);
  if (v97) {
    int v98 = *(_DWORD *)(v97 - 12);
  }
  else {
    int v98 = 0;
  }
  char v99 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v100 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FE8FCLL);
  }
  *char v99 = v98;
  uint64_t v102 = *(void *)(a2 + 792);
  if (!v102)
  {
    char v105 = 0;
    uint64_t v106 = 0;
LABEL_81:
    uint64_t v104 = v102 + 16 * v106;
    goto LABEL_82;
  }
  if (!*(_DWORD *)(v102 - 12))
  {
    uint64_t v106 = *(unsigned int *)(v102 - 4);
    char v105 = (uint64_t *)(v102 + 16 * v106);
    goto LABEL_81;
  }
  uint64_t v103 = v102 + 16 * *(unsigned int *)(v102 - 4);
  uint64_t v112 = *(uint64_t **)(a2 + 792);
  uint64_t v113 = v103;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v112, v100, v101);
  char v105 = v112;
  uint64_t v104 = v113;
  uint64_t v102 = *(void *)(a2 + 792);
LABEL_82:
  uint64_t v112 = v105;
  uint64_t v113 = v104;
  if (v102) {
    char v107 = (uint64_t *)(v102 + 16 * *(unsigned int *)(v102 - 4));
  }
  else {
    char v107 = 0;
  }
  if (v107 != v105)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v105);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v105 + 1);
      v112 += 2;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v112, v108, v109);
      char v105 = v112;
    }
    while (v112 != v107);
  }
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 800));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 808));
  return (void *)IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 816), *(unsigned int *)(a2 + 828));
}

void *WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(void *result)
{
  uint64_t v1 = (unsigned char *)result[1];
  if ((unsigned char *)*result != v1)
  {
    uint64_t v2 = (unsigned char *)(*result + 5);
    do
    {
      int v3 = *(_DWORD *)(v2 - 5);
      int v4 = *(v2 - 1);
      if (v3) {
        BOOL v5 = 0;
      }
      else {
        BOOL v5 = v4 == 0;
      }
      if (v5)
      {
        if (*v2) {
          return result;
        }
      }
      else
      {
        if (v3) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = v4 == 0;
        }
        if (v6 || !*v2) {
          return result;
        }
      }
      char v7 = v2 + 11;
      *unint64_t result = v2 + 11;
      v2 += 16;
    }
    while (v7 != v1);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::Color,void>::encode(IPC::Encoder *a1, WebCore::Color *this)
{
  WebCore::Color::data(v4, this);
  return IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(a1, (char *)v4);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(IPC::Encoder *a1, char *a2)
{
  int v4 = a2[28];
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FEB6CLL);
    }
    *unint64_t result = 1;
    if (!a2[28]) {
      goto LABEL_20;
    }
    char v7 = *a2;
    char v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FEB8CLL);
    }
    *char v8 = v7;
    char v10 = a2[1];
    uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FEBACLL);
    }
    *uint64_t v11 = v10;
    char v15 = *((_DWORD *)a2 + 6);
    unint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v15);
    if (!v15)
    {
      if (!*((_DWORD *)a2 + 6)) {
        return (unsigned char *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *((_DWORD *)a2 + 1));
      }
      goto LABEL_19;
    }
    if (v15 == 1)
    {
      if (*((_DWORD *)a2 + 6) == 1)
      {
        char v16 = a2[4];
        IPC::Encoder::operator<<<BOOL>(a1, &v16);
        IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 2));
        IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 3));
        IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 4));
        return (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 5));
      }
LABEL_19:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
      char v13 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v13, v14);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FEBCCLL);
    }
    *unint64_t result = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(IPC::Encoder *a1, int a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v4 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)unint64_t result = a2;
  }
  return result;
}

uint64_t IPC::Encoder::operator<<<BOOL>(IPC::Encoder *a1, char *a2)
{
  char v3 = *a2;
  unint64_t v4 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v5)
  {
    *unint64_t v4 = v3;
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::Encoder::grow(IPC::Encoder *this, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *((void *)this + 68);
  unint64_t v5 = (a2 + v4 - 1) / a2 * a2;
  size_t v6 = v5 + a3;
  size_t v7 = *((void *)this + 67);
  if (v7 >= v5 + a3) {
    goto LABEL_2;
  }
  unint64_t v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    size_t v7 = v11;
    v11 *= 2;
  }
  while (v7 < v6);
  uint64_t v12 = mmap(0, v7, 3, 4098, -1, 0);
  if (v12 == (void *)-1)
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  size_t v13 = *((void *)this + 68);
  if (*((void *)this + 67) < v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 >= v13)
  {
    int v14 = v12;
    memcpy(v12, *((const void **)this + 66), v13);
    char v15 = (char *)*((void *)this + 66);
    if (v15 != (char *)this + 16) {
      munmap(v15, *((void *)this + 67));
    }
    *((void *)this + 66) = v14;
    *((void *)this + 67) = v7;
    unint64_t v4 = *((void *)this + 68);
LABEL_2:
    size_t v8 = v7 - v4;
    if (v7 >= v4)
    {
      if (v5 - v4 == -1 || (BOOL v9 = v8 >= v5 - v4, v8 = v5 - v4, v9))
      {
        bzero((void *)(*((void *)this + 66) + v4), v8);
        *((void *)this + 68) = v6;
        if (*((void *)this + 67) >= v5) {
          return *((void *)this + 66) + v5;
        }
      }
    }
    goto LABEL_17;
  }
LABEL_18:
  unint64_t result = 831;
  __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        unint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        unint64_t v11 = v22;
        if (v22)
        {
          uint64_t v12 = (char *)(v22 + 5);
          *char v22 = 2;
          v11[1] = v9;
          *((void *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          uint64_t v20 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v20, (char *)v11 + 20);
          uint64_t v13 = v20;
          if (v20) {
            uint64_t v13 = *(unsigned int *)(v20 + 4);
          }
          int v14 = &v12[v13];
          uint64_t v21 = a4;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v21, &v12[v13]);
          uint64_t v15 = v21;
          if (v21) {
            uint64_t v15 = *(unsigned int *)(v21 + 4);
          }
          char v22 = a5;
          unint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v22, &v14[v15]);
        }
        goto LABEL_20;
      }
LABEL_12:
      unint64_t v11 = 0;
      goto LABEL_20;
    }
LABEL_13:
    unint64_t v11 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_20;
  }
  if (!result) {
    goto LABEL_13;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_12;
  }
  unint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  unint64_t v11 = v22;
  if (v22)
  {
    char v16 = v22 + 5;
    *char v22 = 2;
    v11[1] = v9;
    *((void *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    uint64_t v20 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v20, (char *)v11 + 20);
    uint64_t v17 = v20;
    if (v20) {
      uint64_t v17 = *(unsigned int *)(v20 + 4);
    }
    uint64_t v18 = (char *)v16 + 2 * v17;
    uint64_t v21 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v21, v18);
    uint64_t v19 = v21;
    if (v21) {
      uint64_t v19 = *(unsigned int *)(v21 + 4);
    }
    char v22 = a5;
    unint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v22, &v18[2 * v19]);
  }
LABEL_20:
  *a6 = v11;
  return result;
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(uint64_t *result, char *__dst)
{
  uint64_t v2 = *result;
  if (*result)
  {
    char v3 = *(char **)(v2 + 8);
    size_t v4 = *(unsigned int *)(v2 + 4);
    if ((*(unsigned char *)(v2 + 16) & 4) != 0)
    {
      if (v4)
      {
        if (v4 == 1) {
          *__dst = *v3;
        }
        else {
          return (uint64_t *)memcpy(__dst, v3, v4);
        }
      }
    }
    else
    {
      unint64_t v5 = &__dst[v4];
      if (v4 >= 0x10)
      {
        size_t v6 = &__dst[v4 & 0xFFFFFFF0];
        do
        {
          unsigned long long v7 = (unsigned __int128)vld2q_s8(v3);
          v3 += 32;
          *(_OWORD *)__dst = v7;
          __dst += 16;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        char v8 = *v3;
        v3 += 2;
        *__dst++ = v8;
      }
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    size_t v6 = *(const char ****)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  uint64_t v4 = a2[3];
  unint64_t result = (uint64_t *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)unint64_t result = 0;
      return result;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1985FF114);
  }
  if (!v6) {
    goto LABEL_8;
  }
  *(unsigned char *)unint64_t result = 1;
  uint64_t v7 = (void **)a2[3];

  return IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, v7);
}

void IPC::ArgumentCoder<__CFData const*,void>::encode(IPC::Encoder *a1, CFTypeRef cf)
{
  CFTypeRef cfa = cf;
  if (cf) {
    CFRetain(cf);
  }
  IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(a1, (WebKit::CoreIPCData *)&cfa);
  CFTypeRef v3 = cfa;
  CFTypeRef cfa = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1985FF18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(IPC::Encoder *a1, WebKit::CoreIPCData *this)
{
  WebKit::CoreIPCData::dataReference((CFIndex)this, (uint64_t)v4);
  return IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::encode<IPC::Encoder,std::optional<std::span<unsigned char const,18446744073709551615ul>>>(a1, (uint64_t)v4);
}

CFIndex WebKit::CoreIPCData::dataReference@<X0>(CFIndex this@<X0>, uint64_t a2@<X8>)
{
  CFDataRef v3 = *(const __CFData **)this;
  if (!*(void *)this)
  {
    char v5 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)this);
  this = CFDataGetLength(v3);
  if ((this & 0x8000000000000000) == 0)
  {
    *(void *)a2 = BytePtr;
    *(void *)(a2 + 8) = this;
    char v5 = 1;
LABEL_4:
    *(unsigned char *)(a2 + 16) = v5;
    return this;
  }
  __break(0xC471u);
  return this;
}

unint64_t IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::encode<IPC::Encoder,std::optional<std::span<unsigned char const,18446744073709551615ul>>>(IPC::Encoder *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FF308);
    }
    *uint64_t v4 = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v6 = *(const void **)a2;
      size_t v7 = *(void *)(a2 + 8);
      return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(this, v6, v7);
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<WebKit::UserData,void>::encode(v9);
    }
  }
  else
  {
    char v10 = 0;
    return IPC::Encoder::operator<<<BOOL>(this, &v10);
  }
}

void IPC::ArgumentCoder<WebKit::UserData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v5 = v3;
  IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(a1, &v5);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void sub_1985FF36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FFA28);
    }
    *uint64_t v5 = 0;
    return;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FF9E8);
  }
  *uint64_t v5 = 1;
  uint64_t v7 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 1)
  {
    LOBYTE(v25[0]) = 0;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(v7 + 28));
    uint64_t v13 = *(unsigned int *)(v7 + 28);
    if (v13)
    {
      uint64_t v14 = *(void *)(v7 + 16);
      uint64_t v15 = 8 * v13;
      do
      {
        IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(a1, v14);
        v14 += 8;
        v15 -= 8;
      }
      while (v15);
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 32)
  {
    LOBYTE(v25[0]) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    char v16 = *(unsigned char *)(v7 + 16);
    uint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FFA48);
    }
    goto LABEL_37;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 8)
  {
    LOBYTE(v25[0]) = 2;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    char v22 = *(const void **)(v7 + 16);
    size_t v23 = *(void *)(v7 + 24);
LABEL_45:
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v22, v23);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 9)
  {
    LOBYTE(v25[0]) = 3;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const&>(a1, (void **)(v7 + 16));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 33)
  {
    LOBYTE(v25[0]) = 4;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(v7 + 16));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 10)
  {
    LOBYTE(v25[0]) = 5;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, (WebCore::ResourceError *)(v7 + 16));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 11)
  {
    LOBYTE(v25[0]) = 6;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    *(_OWORD *)char v25 = *(_OWORD *)(v7 + 16);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)v25);
    uint64_t v26 = v25[1];
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v26);
    char v16 = *(unsigned char *)(v7 + 32);
    uint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FF980);
    }
    goto LABEL_37;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 12)
  {
    LOBYTE(v25[0]) = 7;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<WebKit::WebImage,void>::encode(a1, (WebKit::WebImage *)v7);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 13)
  {
    LOBYTE(v25[0]) = 8;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    v25[0] = *(WTF::StringImpl **)(v7 + 16);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)v25);
    v25[0] = *(WTF::StringImpl **)(v7 + 24);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)v25);
    char v16 = *(unsigned char *)(v7 + 32);
    uint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FF90CLL);
    }
LABEL_37:
    *uint64_t v17 = v16;
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 36)
  {
    LOBYTE(v25[0]) = 9;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::Encoder::operator<<<API::Point const&>(a1, v7);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 38)
  {
    LOBYTE(v25[0]) = 10;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<API::Rect,void>::encode(a1, (double *)v7);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 20)
  {
    LOBYTE(v25[0]) = 11;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    uint64_t v24 = *(void *)(v7 + 16);
    char v22 = *(const void **)(v24 + 8);
    size_t v23 = *(unsigned int *)(v24 + 20);
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 37)
  {
    LOBYTE(v25[0]) = 12;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::Encoder::operator<<<API::Point const&>(a1, v7);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 21)
  {
    LOBYTE(v25[0]) = 13;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    WTF::String::isolatedCopy();
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v25);
    uint64_t v9 = v25[0];
    v25[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 24)
  {
    LOBYTE(v25[0]) = 14;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    uint64_t v21 = (uint64_t *)(v7 + 16);
LABEL_43:
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v21);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 25)
  {
    LOBYTE(v25[0]) = 15;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(v7 + 16));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 26)
  {
    LOBYTE(v25[0]) = 16;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(v7 + 16));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 34)
  {
    LOBYTE(v25[0]) = 17;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    uint64_t v10 = *(void *)(v7 + 16);
    unint64_t v11 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
    if (v12 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FFA08);
    }
    *unint64_t v11 = v10;
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 35)
  {
    LOBYTE(v25[0]) = 18;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v7 + 16));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 27)
  {
    LOBYTE(v25[0]) = 19;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
    uint64_t v21 = (uint64_t *)(v7 + 48);
    goto LABEL_43;
  }
}

unint64_t IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, const void *a2, uint64_t a3)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a3);
  if (a3)
  {
    return IPC::Encoder::encodeSpan<unsigned long const,18446744073709551615ul>(a1, a2, a3);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);

  return IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);
}

uint64_t IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v5 = *(_DWORD *)a2;
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 8);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 12);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 16);
  IPC::Encoder::operator<<<int>(a1, &v5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 20));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 21));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 22));
}

unint64_t IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits> const&>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2) {
    int v4 = *(_DWORD *)(*a2 - 12);
  }
  else {
    int v4 = 0;
  }
  unint64_t result = IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)unint64_t result = v4;
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + (v8 << 6);
    if (*(_DWORD *)(v7 - 12))
    {
      uint64_t v10 = v7;
      if (v8)
      {
        uint64_t v11 = v8 << 6;
        uint64_t v10 = v7;
        while ((*(_DWORD *)v10 + 1) <= 1)
        {
          v10 += 64;
          v11 -= 64;
          if (!v11)
          {
            uint64_t v10 = v9;
            break;
          }
        }
      }
      if (!v7) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
    uint64_t v10 = v7 + (v8 << 6);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = v7 + (v8 << 6);
  if (!v7)
  {
LABEL_13:
    uint64_t v12 = 0;
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v12 = v7 + ((unint64_t)*(unsigned int *)(v7 - 4) << 6);
LABEL_18:
  while (v10 != v12)
  {
    IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(this, *(_DWORD *)v10);
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(this, (float *)(v10 + 8));
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(this, (float *)(v10 + 24));
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(this, (CFTypeRef *)(v10 + 40));
    IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(this, *(_DWORD *)(v10 + 48));
    IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(this, *(_DWORD *)(v10 + 52));
    IPC::Encoder::operator<<<BOOL>(this, (char *)(v10 + 56));
    IPC::Encoder::operator<<<BOOL>(this, (char *)(v10 + 57));
    IPC::Encoder::operator<<<BOOL>(this, (char *)(v10 + 58));
    unint64_t result = IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(this, *(float *)(v10 + 60));
    uint64_t v13 = v10 + 64;
    uint64_t v10 = v9;
    if (v13 != v9)
    {
      uint64_t v10 = v13;
      while ((*(_DWORD *)v10 + 1) <= 1)
      {
        v10 += 64;
        if (v10 == v9)
        {
          uint64_t v10 = v9;
          break;
        }
      }
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(IPC::Encoder *a1, CFTypeRef *a2)
{
  uint64_t v3 = (CGColorSpace *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  IPC::ArgumentCoder<CGColorSpace *,void>::encode(a1, v3);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_1985FFF7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<CGColorSpace *,void>::encode(IPC::Encoder *a1, CGColorSpace *a2)
{
  WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace((WebKit::CoreIPCCGColorSpace *)v4, a2);
  unsigned __int8 v6 = v5;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  unint64_t result = IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)v4, v6);
  if (v5 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                                                        + v5))(&v7, v4);
  return result;
}

void sub_19860000C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                           + a12))(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(a1, a2, a3);
  }
  else if (*(_DWORD *)(a2 + 8))
  {
    int v4 = (WebKit::PlatformCALayerRemote *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebKit::PlatformCALayerRemote::tiledBacking(v4);
  }
  else
  {
    char v5 = *(unsigned char *)a2;
    return (WTF::StringImpl *)IPC::Encoder::operator<<<BOOL>(a1, &v5);
  }
}

uint64_t WebKit::PlatformCALayerRemote::tiledBacking(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

float WebKit::PlatformCALayerRemote::bounds(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 110);
}

uint64_t WebCore::ChromeClient::isSVGImageChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::InitializeWebKit2(void)::$_0 &&>>()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] isMainThread];
  if ((v0 & 1) != 0 || (uint64_t v0 = WTF::linkedOnOrAfterSDKWithBehavior(), v0))
  {
    return WebKit::runInitializationCode((WebKit *)v0, v1);
  }
  else
  {
    uint64_t v3 = WTF::WorkQueue::main((WTF::WorkQueue *)v0);
    int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v4 = &unk_1EE9BF780;
    char v5 = v4;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 24))(v3, &v5);
    uint64_t result = (uint64_t)v5;
    char v5 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1986001A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<IPC::Connection::platformOpen(void)::$_2,void>::call(uint64_t a1)
{
}

uint64_t WebKit::WebChromeClient::allowedCompositingTriggers(WebKit::WebChromeClient *this)
{
  return 223;
}

uint64_t WebKit::applicationVisibleName(WebKit *this)
{
  uint64_t v1 = (void *)[MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v2 = (void *)[v1 infoDictionary];
  uint64_t v3 = [v2 objectForKeyedSubscript:*MEMORY[0x1E4F1CC48]];
  int v4 = (void *)[v1 infoDictionary];
  uint64_t result = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F1D008]];
  if (v3) {
    return v3;
  }
  return result;
}

void initializeMethods(_WKRemoteObjectInterface *a1, Protocol *a2)
{
  unsigned int outCount = 0;
  int v4 = protocol_copyProtocolList(a2, &outCount);
  unint64_t v5 = outCount;
  if (outCount)
  {
    unint64_t v6 = 0;
    do
    {
      char v7 = v4[v6];
      if (v7 != (Protocol *)&unk_1EEA54580)
      {
        initializeMethods(a1, v7);
        unint64_t v5 = outCount;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  free(v4);
  initializeMethods(a1, a2, 1);
  initializeMethods(a1, a2, 0);
}

void sub_198600650(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    WTF::fastFree((WTF *)(a21 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v24 = 0;
    int v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = *(unsigned int *)(v6 - 4);
        }
        char v23 = 0;
        uint64_t v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1) {
        uint64_t v24 = v14;
      }
      unsigned int v13 = (v13 + v25) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *uint64_t v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      uint64_t v14 = v24;
    }
  }
  *uint64_t v14 = v9;
  uint64_t v16 = *v4;
  if (*v4) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_11;
    }
LABEL_23:
    uint64_t result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(v4, v14);
    uint64_t v14 = result;
    uint64_t v18 = *v4;
    if (*v4) {
      unint64_t v21 = *(unsigned int *)(v18 - 4);
    }
    else {
      unint64_t v21 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v22 = v18 + 8 * v21;
  char v23 = 1;
LABEL_12:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v22;
  *(unsigned char *)(a3 + 16) = v23;
  return result;
}

{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  int v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v24 = 0;
    int v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = *(unsigned int *)(v6 - 4);
        }
        char v23 = 0;
        uint64_t v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1) {
        uint64_t v24 = v14;
      }
      unsigned int v13 = (v13 + v25) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *uint64_t v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      uint64_t v14 = v24;
    }
  }
  *uint64_t v14 = v9;
  uint64_t v16 = *v4;
  if (*v4) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_11;
    }
LABEL_16:
    uint64_t result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(v4, v14);
    uint64_t v14 = result;
    uint64_t v18 = *v4;
    if (*v4) {
      unint64_t v21 = *(unsigned int *)(v18 - 4);
    }
    else {
      unint64_t v21 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v22 = v18 + 8 * v21;
  char v23 = 1;
LABEL_12:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v22;
  *(unsigned char *)(a3 + 16) = v23;
  return result;
}

void initializeMethods(_WKRemoteObjectInterface *a1, Protocol *p, BOOL isRequiredMethod)
{
  BOOL v3 = isRequiredMethod;
  unsigned int outCount = 0;
  uint64_t v50 = protocol_copyMethodDescriptionList(p, isRequiredMethod, 1, &outCount);
  if (outCount)
  {
    uint64_t v7 = 0;
    p_methods = (uint64_t *)&a1->_methods;
    while (1)
    {
      name = (char *)v50[v7].name;
      *(_OWORD *)uint64_t v52 = 0u;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v51 = 0u;
      uint64_t v10 = *p_methods;
      if (*p_methods
        || (WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::expand(p_methods, 0), (uint64_t v10 = *p_methods) != 0))
      {
        int v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        int v11 = 0;
      }
      unint64_t v12 = (unint64_t)&name[~((void)name << 32)] ^ ((unint64_t)&name[~((void)name << 32)] >> 22);
      unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
      uint64_t v16 = (uint64_t *)(v10 + 56 * v15);
      uint64_t v17 = *v16;
      if (*v16)
      {
        uint64_t v18 = 0;
        int v19 = 1;
        while ((char *)v17 != name)
        {
          if (v17 == -1) {
            uint64_t v18 = v16;
          }
          unsigned int v15 = (v15 + v19) & v11;
          uint64_t v16 = (uint64_t *)(v10 + 56 * v15);
          uint64_t v17 = *v16;
          ++v19;
          if (!*v16)
          {
            if (v18)
            {
              v18[6] = 0;
              *((_OWORD *)v18 + 1) = 0u;
              *((_OWORD *)v18 + 2) = 0u;
              *(_OWORD *)uint64_t v18 = 0u;
              --*(_DWORD *)(*p_methods - 16);
              uint64_t v16 = v18;
            }
            goto LABEL_13;
          }
        }
        goto LABEL_31;
      }
LABEL_13:
      *uint64_t v16 = (uint64_t)name;
      uint64_t v20 = v51;
      uint64_t v55 = v51;
      unsigned int v21 = DWORD2(v51);
      unsigned int v22 = HIDWORD(v51);
      long long v51 = 0uLL;
      unint64_t v56 = __PAIR64__(v22, v21);
      long long v23 = *(_OWORD *)v52;
      v52[0] = 0;
      v52[1] = 0;
      *(_OWORD *)uint64_t v57 = v23;
      CFTypeRef v24 = cf[0];
      cf[0] = 0;
      uint64_t v58 = (uint64_t)v24;
      CFTypeRef v25 = cf[1];
      cf[1] = 0;
      uint64_t v59 = (uint64_t)v25;
      uint64_t v26 = *((unsigned int *)v16 + 5);
      uint64_t v27 = (WTF *)v16[1];
      if (v26)
      {
        BOOL v48 = v3;
        uint64_t v46 = 8 * v26;
        uint64_t v49 = v23;
        do
        {
          if (*(void *)v27)
          {
            WTF::fastFree((WTF *)(*(void *)v27 - 16), v6);
            *(void *)&long long v23 = v49;
          }
          uint64_t v27 = (WTF *)((char *)v27 + 8);
          v46 -= 8;
        }
        while (v46);
        uint64_t v27 = (WTF *)v16[1];
        BOOL v3 = v48;
      }
      if (v27)
      {
        v16[1] = 0;
        *((_DWORD *)v16 + 4) = 0;
        WTF::fastFree(v27, v6);
        uint64_t v20 = v55;
        unsigned int v21 = v56;
        unsigned int v22 = HIDWORD(v56);
        CFTypeRef v28 = v57[0];
      }
      else
      {
        CFTypeRef v28 = (CFTypeRef)v23;
      }
      v16[1] = v20;
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      *((_DWORD *)v16 + 4) = v21;
      *((_DWORD *)v16 + 5) = v22;
      v57[0] = 0;
      unsigned __int16 v29 = (const void *)v16[3];
      v16[3] = (uint64_t)v28;
      if (v29) {
        CFRelease(v29);
      }
      uint64_t v30 = *((unsigned int *)v16 + 11);
      char v31 = (WTF *)v16[4];
      if (v30)
      {
        uint64_t v47 = 8 * v30;
        do
        {
          if (*(void *)v31) {
            WTF::fastFree((WTF *)(*(void *)v31 - 16), v6);
          }
          char v31 = (WTF *)((char *)v31 + 8);
          v47 -= 8;
        }
        while (v47);
        char v31 = (WTF *)v16[4];
      }
      if (v31)
      {
        v16[4] = 0;
        *((_DWORD *)v16 + 10) = 0;
        WTF::fastFree(v31, v6);
      }
      v16[4] = (uint64_t)v57[1];
      uint64_t v32 = v58;
      v57[1] = 0;
      uint64_t v58 = 0;
      v16[5] = v32;
      uint64_t v33 = (const void *)v16[6];
      v16[6] = v59;
      if (v33) {
        CFRelease(v33);
      }
      uint64_t v59 = 0;
      WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57[1], v6);
      CFTypeRef v35 = v57[0];
      v57[0] = 0;
      if (v35) {
        CFRelease(v35);
      }
      WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v34);
      uint64_t v36 = *p_methods;
      int v37 = *p_methods ? *(_DWORD *)(v36 - 12) + 1 : 1;
      *(_DWORD *)(v36 - 12) = v37;
      uint64_t v38 = *p_methods;
      int v39 = *p_methods ? *(_DWORD *)(v38 - 12) : 0;
      uint64_t v40 = (*(_DWORD *)(v38 - 16) + v39);
      unint64_t v41 = *(unsigned int *)(v38 - 4);
      if (v41 > 0x400) {
        break;
      }
      if (3 * v41 <= 4 * v40) {
        goto LABEL_41;
      }
LABEL_31:
      CFTypeRef v42 = cf[1];
      cf[1] = 0;
      if (v42) {
        CFRelease(v42);
      }
      WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52[1], v6);
      CFTypeRef v44 = v52[0];
      v52[0] = 0;
      if (v44) {
        CFRelease(v44);
      }
      WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v43);
      uint64_t MethodTypeEncoding = _protocol_getMethodTypeEncoding();
      if (!MethodTypeEncoding) {
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Could not find method type encoding for method \"%s\"", sel_getName(name));
      }
      initializeMethod((MethodInfo *)(v16 + 1), p, (objc_selector *)name, (NSMethodSignature *)[MEMORY[0x1E4F1CA38] signatureWithObjCTypes:MethodTypeEncoding], 0);
      if (++v7 >= (unint64_t)outCount) {
        goto LABEL_52;
      }
    }
    if (v41 > 2 * v40) {
      goto LABEL_31;
    }
LABEL_41:
    uint64_t v16 = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::expand(p_methods, v16);
    goto LABEL_31;
  }
LABEL_52:
  free(v50);
}

void sub_198600C74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  MethodInfo::~MethodInfo((MethodInfo *)va1, a2);
  MethodInfo::~MethodInfo((MethodInfo *)va, v11);
  _Unwind_Resume(a1);
}

const char *initializeMethod(MethodInfo *a1, Protocol *a2, objc_selector *a3, NSMethodSignature *a4, int a5)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    CFTypeRef v25 = (const void *)[MEMORY[0x1E4F1CA18] invocationWithMethodSignature:a4];
    uint64_t v26 = v25;
    if (v25) {
      CFRetain(v25);
    }
    uint64_t v27 = (const void *)*((void *)a1 + 5);
    *((void *)a1 + 5) = v26;
    if (v27) {
      CFRelease(v27);
    }
    uint64_t v17 = (MethodInfo *)((char *)a1 + 24);
    unint64_t v16 = 1;
  }
  else
  {
    objc_method_description MethodDescription = protocol_getMethodDescription(a2, (SEL)a3, 1, 1);
    types = MethodDescription.types;
    if (!MethodDescription.name)
    {
      objc_method_description v28 = protocol_getMethodDescription(a2, (SEL)a3, 0, 1);
      types = v28.types;
      if (!v28.name) {
        types = 0;
      }
    }
    uint64_t v12 = [MEMORY[0x1E4F1CA38] signatureWithObjCTypes:types];
    unint64_t v13 = (const void *)[MEMORY[0x1E4F1CA18] invocationWithMethodSignature:v12];
    uint64_t v14 = v13;
    if (v13) {
      CFRetain(v13);
    }
    uint64_t v15 = (const void *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v14;
    if (v15) {
      CFRelease(v15);
    }
    unint64_t v16 = 2;
    uint64_t v17 = a1;
  }
  uint64_t result = [(NSMethodSignature *)a4 numberOfArguments];
  if (v16 < (unint64_t)result)
  {
    uint64_t v19 = result;
    char v20 = 0;
    do
    {
      uint64_t result = [(NSMethodSignature *)a4 getArgumentTypeAtIndex:v16];
      if (*result == 64)
      {
        if (result[1] == 63)
        {
          if (a5)
          {
            uint64_t v32 = (void *)MEMORY[0x1E4F1CA00];
            Name = protocol_getName(a2);
            objc_msgSend(v32, "raise:format:", *MEMORY[0x1E4F1C3C8], @"Blocks as arguments to the reply block of method (%s / %s) are not allowed", Name, sel_getName((SEL)a3));
          }
          if (v20)
          {
            uint64_t v30 = (void *)MEMORY[0x1E4F1CA00];
            char v31 = protocol_getName(a2);
            objc_msgSend(v30, "raise:format:", *MEMORY[0x1E4F1C3C8], @"Only one reply block is allowed per method (%s / %s)", v31, sel_getName((SEL)a3));
          }
          initializeMethod(a1, a2, a3, (NSMethodSignature *)[(NSMethodSignature *)a4 _signatureForBlockAtArgumentIndex:v16], 1);
          char v20 = 1;
        }
        uint64_t result = (const char *)[(NSMethodSignature *)a4 _classForObjectAtArgumentIndex:v16];
        if (result)
        {
          v34[0] = (uint64_t)result;
          uint64_t result = (const char *)WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v33, v34, 1);
          uint64_t v22 = *((unsigned int *)v17 + 3);
          if (v22 == *((_DWORD *)v17 + 2)) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v22 = *((unsigned int *)v17 + 3);
          if (v22 == *((_DWORD *)v17 + 2))
          {
LABEL_19:
            uint64_t result = (const char *)WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v22 + 1, (unint64_t)&v33);
            uint64_t v22 = *((unsigned int *)v17 + 3);
            uint64_t v23 = *(void *)v17;
            *(void *)(*(void *)v17 + 8 * v22) = 0;
            uint64_t v24 = *(void *)result;
            *(void *)uint64_t result = 0;
            goto LABEL_15;
          }
        }
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v22 = *((unsigned int *)v17 + 3);
        if (v22 == *((_DWORD *)v17 + 2)) {
          goto LABEL_19;
        }
      }
      uint64_t v23 = *(void *)v17;
      *(void *)(*(void *)v17 + 8 * v22) = 0;
      uint64_t v24 = v33;
      uint64_t v33 = 0;
LABEL_15:
      *(void *)(v23 + 8 * v22) = v24;
      ++*((_DWORD *)v17 + 3);
      if (v33) {
        uint64_t result = (const char *)WTF::fastFree((WTF *)(v33 - 16), v21);
      }
      ++v16;
    }
    while (v19 != (const char *)v16);
  }
  return result;
}

void sub_198600FB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_198601044(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  int v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    unint64_t v13 = (void *)v6;
    do
    {
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v14 = (void *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::lookupForReinsert(a1, v13);
        *uint64_t v14 = *v13;
        if (v13 == a3) {
          int v11 = v14;
        }
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::rehash(a1, v5, a2);
}

unint64_t WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      int v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = (void *)result;
        uint64_t v8 = 8 * v5;
        uint64_t v9 = v4;
        do
        {
          *unint64_t v7 = 0;
          uint64_t v10 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          *unint64_t v7 = v10;
          if (*(void *)v9) {
            uint64_t result = WTF::fastFree((WTF *)(*(void *)v9 - 16), v6);
          }
          ++v7;
          uint64_t v9 = (WTF *)((char *)v9 + 8);
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t *WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    unsigned int v3 = 0;
    int v4 = 0;
    goto LABEL_3;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
LABEL_4:
  uint64_t v6 = WTF::fastMalloc((WTF *)(56 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 56 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v59 = v3;
    uint64_t v56 = v2;
    do
    {
      char v61 = (uint64_t *)(v2 + 56 * v10);
      uint64_t v12 = *v61;
      if (*v61)
      {
        if (v12 != -1)
        {
          uint64_t v13 = *a1;
          uint64_t v60 = v11;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            unsigned int v21 = (uint64_t *)(v13 + 56 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (*v21);
          unsigned int v22 = v20;
          uint64_t v23 = v13 + 56 * v20;
          uint64_t v26 = *(const void **)(v23 + 48);
          CFTypeRef v25 = (void *)(v23 + 48);
          uint64_t v24 = v26;
          *CFTypeRef v25 = 0;
          if (v26) {
            CFRelease(v24);
          }
          uint64_t v27 = v13 + 56 * v22;
          objc_method_description v28 = (void *)(v27 + 32);
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 32, v7);
          uint64_t v32 = *(const void **)(v27 + 24);
          char v31 = (void *)(v27 + 24);
          uint64_t v30 = v32;
          *char v31 = 0;
          if (v32) {
            CFRelease(v30);
          }
          uint64_t v33 = v13 + 56 * v22;
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33 + 8, v29);
          *unsigned int v21 = *v61;
          uint64_t v35 = v2 + 56 * v10;
          *(void *)(v33 + 8) = 0;
          *(void *)(v33 + 16) = 0;
          uint64_t v37 = *(void *)(v35 + 8);
          uint64_t v36 = v35 + 8;
          *(void *)(v35 + 8) = 0;
          *(void *)(v33 + 8) = v37;
          int v38 = *(_DWORD *)(v35 + 16);
          *(_DWORD *)(v35 + 16) = 0;
          *(_DWORD *)(v33 + 16) = v38;
          int v39 = *(_DWORD *)(v35 + 20);
          *(_DWORD *)(v35 + 20) = 0;
          *(_DWORD *)(v33 + 20) = v39;
          uint64_t v41 = *(void *)(v35 + 24);
          uint64_t v40 = (const void **)(v35 + 24);
          *(void *)(v35 + 24) = 0;
          *char v31 = v41;
          *objc_method_description v28 = 0;
          v28[1] = 0;
          uint64_t v43 = *(void *)(v35 + 32);
          uint64_t v42 = v35 + 32;
          *(void *)uint64_t v42 = 0;
          *objc_method_description v28 = v43;
          int v44 = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v33 + 40) = v44;
          int v45 = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *(_DWORD *)(v33 + 44) = v45;
          uint64_t v46 = *(void *)(v42 + 16);
          *(void *)(v42 + 16) = 0;
          *CFTypeRef v25 = v46;
          uint64_t v47 = *(const void **)(v42 + 16);
          *(void *)(v42 + 16) = 0;
          if (v47) {
            CFRelease(v47);
          }
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v42, v34);
          uint64_t v49 = *v40;
          *uint64_t v40 = 0;
          if (v49) {
            CFRelease(v49);
          }
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36, v48);
          uint64_t v2 = v56;
          unint64_t v11 = v60;
          if (v61 == a2) {
            unint64_t v11 = v21;
          }
        }
      }
      else
      {
        uint64_t v50 = v2 + 56 * v10;
        long long v51 = *(const void **)(v50 + 48);
        *(void *)(v50 + 48) = 0;
        if (v51) {
          CFRelease(v51);
        }
        uint64_t v52 = v2 + 56 * v10;
        WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v52 + 32, v7);
        uint64_t v54 = *(const void **)(v52 + 24);
        *(void *)(v52 + 24) = 0;
        if (v54) {
          CFRelease(v54);
        }
        WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 56 * v10 + 8, v53);
      }
      ++v10;
    }
    while (v10 != v59);
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

uint64_t WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  int v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v6 = 8 * v3;
    do
    {
      if (*(void *)v4) {
        WTF::fastFree((WTF *)(*(void *)v4 - 16), a2);
      }
      int v4 = (WTF *)((char *)v4 + 8);
      v6 -= 8;
    }
    while (v6);
    int v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unint64_t classesForSelectorArgument(_WKRemoteObjectInterface *a1, objc_selector *a2, unint64_t a3, int a4)
{
  uint64_t v8 = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<objc_selector *>>,objc_selector *>((uint64_t)a1, (uint64_t)a2);
  uint64_t v9 = v8;
  if (a1) {
    uint64_t v10 = (uint64_t *)a1 + 7 * HIDWORD(a1[-1]._protocol);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 == v8) {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Interface does not contain selector \"%s\"", sel_getName((SEL)a2));
  }
  if (!a4)
  {
    unint64_t v11 = v9 + 1;
    unint64_t v12 = *((unsigned int *)v9 + 5);
    if (v12 <= a3)
    {
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Argument index %ld is out of range for selector \"%s\"", a3, sel_getName((SEL)a2));
      unint64_t v12 = *((unsigned int *)v9 + 5);
    }
    if (v12 > a3) {
      return *v11 + 8 * a3;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198601A0CLL);
  }
  if (!v9[6]) {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Selector \"%s\" does not have a reply block", sel_getName((SEL)a2));
  }
  unint64_t v11 = v9 + 4;
  unint64_t v14 = *((unsigned int *)v9 + 11);
  if (v14 <= a3)
  {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Argument index %ld is out of range for reply block of selector \"%s\"", a3, sel_getName((SEL)a2));
    unint64_t v14 = *((unsigned int *)v9 + 11);
  }
  if (v14 <= a3) {
    goto LABEL_16;
  }
  return *v11 + 8 * a3;
}

uint64_t *WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<objc_selector *>>,objc_selector *>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  unsigned int v7 = (uint64_t *)(a1 + 56 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v9) & v2;
      unsigned int v7 = (uint64_t *)(a1 + 56 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 56 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1)
{
  unint64_t v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  unint64_t v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

void sub_198601E34(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::PageConfiguration::Data::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (_DWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::BrowsingContextGroup,&API::PageConfiguration::Data::createBrowsingContextGroup>::get((uint64_t *)a2);
  ++*v5;
  unsigned int v6 = *(WebKit::BrowsingContextGroup **)a1;
  *(void *)a1 = v5;
  if (v6) {
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v6, v4);
  }
  uint64_t v7 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(a2 + 8));
  CFRetain(*(CFTypeRef *)(v7 + 8));
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  int v9 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get((WebKit::WebUserContentControllerProxy **)(a2 + 16));
  CFRetain(*((CFTypeRef *)v9 + 1));
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  unint64_t v11 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)(a2 + 24));
  CFRetain(*((CFTypeRef *)v11 + 1));
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v11;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::VisitedLinkStore,&API::PageConfiguration::Data::createVisitedLinkStore>::get((WebKit::VisitedLinkStore **)(a2 + 32));
  CFRetain(*((CFTypeRef *)v13 + 1));
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v13;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  unint64_t v15 = API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(a2 + 40));
  CFRetain(*((CFTypeRef *)v15 + 1));
  uint64_t v16 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v15;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = *(void *)(a2 + 48);
  if (v17) {
    CFRetain(*(CFTypeRef *)(v17 + 8));
  }
  uint64_t v18 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v17;
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  WTF::String::operator=((uint64_t *)(a1 + 56), (WTF::StringImpl **)(a2 + 56));
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  uint64_t v20 = *(void *)(a2 + 96);
  if (v20) {
    CFRetain(*(CFTypeRef *)(v20 + 8));
  }
  uint64_t v21 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v20;
  if (v21) {
    CFRelease(*(CFTypeRef *)(v21 + 8));
  }
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 104), (atomic_uint **)(a2 + 104));
  uint64_t v22 = *(void *)(a2 + 112);
  if (v22) {
    CFRetain(*(CFTypeRef *)(v22 + 8));
  }
  uint64_t v23 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v22;
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 120), (atomic_uint **)(a2 + 120));
  uint64_t v24 = (unsigned int *)(a1 + 128);
  CFTypeRef v25 = (WTF::StringImpl *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 168))
  {
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v26 = *(void *)v25;
      atomic_fetch_add((atomic_uint *volatile)(*(void *)v25 + 16), 1u);
      uint64_t v27 = *(void *)v24;
      *(void *)uint64_t v24 = v26;
      if (v27) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 16));
      }
      WTF::String::operator=((uint64_t *)(a1 + 136), (WTF::StringImpl **)(a2 + 136));
      WTF::String::operator=((uint64_t *)(a1 + 144), (WTF::StringImpl **)(a2 + 144));
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    }
  }
  else if (*(unsigned char *)(a1 + 168))
  {
    std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::reset[abi:sn180100](v24, v25);
  }
  else
  {
    std::construct_at[abi:sn180100]<API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo const&,API::PageConfiguration::OpenerInfo*>((uint64_t)v24, (uint64_t *)v25);
    *(unsigned char *)(a1 + 168) = 1;
  }
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 176), (atomic_uint **)(a2 + 176));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 184), (atomic_uint **)(a2 + 184));
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v28 = *(void *)(a2 + 200);
  if (v28) {
    CFRetain(*(CFTypeRef *)(a2 + 200));
  }
  unsigned __int16 v29 = *(const void **)(a1 + 200);
  *(void *)(a1 + 200) = v28;
  if (v29) {
    CFRelease(v29);
  }
  long long v30 = *(_OWORD *)(a2 + 208);
  long long v31 = *(_OWORD *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v30;
  *(_OWORD *)(a1 + 224) = v31;
  if (*(unsigned __int8 *)(a1 + 252) == *(unsigned __int8 *)(a2 + 252))
  {
    if (*(unsigned char *)(a1 + 252)) {
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    }
  }
  else if (*(unsigned char *)(a1 + 252))
  {
    *(unsigned char *)(a1 + 252) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(unsigned char *)(a1 + 252) = 1;
  }
  WTF::String::operator=((uint64_t *)(a1 + 256), (WTF::StringImpl **)(a2 + 256));
  uint64_t v32 = *(void *)(a2 + 264);
  if (v32) {
    CFRetain(*(CFTypeRef *)(a2 + 264));
  }
  uint64_t v33 = *(const void **)(a1 + 264);
  *(void *)(a1 + 264) = v32;
  if (v33) {
    CFRelease(v33);
  }
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 272), (unsigned __int8 *)(a2 + 272));
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  uint64_t v35 = *(void *)(a2 + 312);
  if (v35) {
    CFRetain(*(CFTypeRef *)(v35 + 8));
  }
  uint64_t v36 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = v35;
  if (v36) {
    CFRelease(*(CFTypeRef *)(v36 + 8));
  }
  uint64_t v37 = *(void *)(a2 + 320);
  if (!v37 || (uint64_t v38 = *(unsigned int *)(v37 - 12), !v38))
  {
    uint64_t v46 = 0;
    goto LABEL_85;
  }
  int v39 = (void *)(a2 + 320);
  unsigned int v40 = (v38 - 1) | ((v38 - 1) >> 1) | (((v38 - 1) | ((v38 - 1) >> 1)) >> 2);
  unsigned int v41 = v40 | (v40 >> 4) | ((v40 | (v40 >> 4)) >> 8);
  unint64_t v42 = (v41 | HIWORD(v41)) + 1;
  if (v42 > 0x400)
  {
    if (v42 > 2 * v38) {
      goto LABEL_59;
    }
  }
  else if (3 * v42 > 4 * v38)
  {
LABEL_53:
    double v43 = (double)v38;
    double v44 = (double)v42;
    double v45 = 0.604166667;
    goto LABEL_60;
  }
  LODWORD(v42) = 2 * v42;
  if (v42 <= 0x400) {
    goto LABEL_53;
  }
LABEL_59:
  double v43 = (double)v38;
  double v44 = (double)v42;
  double v45 = 0.416666667;
LABEL_60:
  if (v44 * v45 <= v43) {
    LODWORD(v42) = 2 * v42;
  }
  if (v42 <= 8) {
    unsigned int v47 = 8;
  }
  else {
    unsigned int v47 = v42;
  }
  BOOL v48 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v47 + 16));
  uint64_t v46 = v48 + 4;
  v48[2] = v47 - 1;
  v48[3] = v47;
  *BOOL v48 = 0;
  v48[1] = v38;
  uint64_t v49 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a2 + 320));
  uint64_t v50 = v49;
  long long v51 = v34;
  if (*v39) {
    uint64_t v52 = *v39 + 16 * *(unsigned int *)(*v39 - 4);
  }
  else {
    uint64_t v52 = 0;
  }
  if ((WTF::StringImpl **)v52 != v49)
  {
    do
    {
      int v53 = v48[2];
      unsigned int v54 = *((_DWORD *)*v50 + 4);
      if (v54 >= 0x100) {
        unsigned int v55 = v54 >> 8;
      }
      else {
        unsigned int v55 = WTF::StringImpl::hashSlowCase(*v50);
      }
      int v56 = 0;
      do
      {
        uint64_t v57 = v55 & v53;
        unsigned int v55 = ++v56 + v57;
      }
      while (*(void *)&v46[4 * v57]);
      uint64_t v58 = *v50;
      if (*v50) {
        *(_DWORD *)v58 += 2;
      }
      uint64_t v59 = (WTF::StringImpl **)&v46[4 * v57];
      uint64_t v60 = v50[1];
      ++*((_DWORD *)v60 + 2);
      char v61 = v59[1];
      *uint64_t v59 = v58;
      v59[1] = v60;
      if (v61)
      {
        if (*((_DWORD *)v61 + 2) == 1) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v61 + 8))(v61);
        }
        else {
          --*((_DWORD *)v61 + 2);
        }
      }
      while (1)
      {
        v50 += 2;
        if (v50 == (WTF::StringImpl **)v51) {
          break;
        }
        if ((unint64_t)*v50 + 1 > 1) {
          goto LABEL_84;
        }
      }
      uint64_t v50 = (WTF::StringImpl **)v51;
LABEL_84:
      ;
    }
    while (v50 != (WTF::StringImpl **)v52);
  }
LABEL_85:
  uint64_t v62 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = v46;
  if (v62) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v62, v34);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 328), a2 + 328);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(a1 + 344), (void **)(a2 + 344));
  char v63 = *(unsigned char *)(a2 + 354);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a2 + 352);
  *(unsigned char *)(a1 + 354) = v63;
  WTF::String::operator=((uint64_t *)(a1 + 360), (WTF::StringImpl **)(a2 + 360));
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>((WTF::StringImpl *)(a1 + 376), a2 + 376);
  uint64_t v64 = *(void *)(a2 + 408);
  *(_WORD *)(a1 + 416) = *(_WORD *)(a2 + 416);
  *(void *)(a1 + 408) = v64;
  WTF::String::operator=((uint64_t *)(a1 + 424), (WTF::StringImpl **)(a2 + 424));
  WTF::String::operator=((uint64_t *)(a1 + 432), (WTF::StringImpl **)(a2 + 432));
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((uint64_t *)(a1 + 440), (WTF::StringImpl **)(a2 + 440));
  long long v65 = *(_OWORD *)(a2 + 456);
  long long v66 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 485) = *(_OWORD *)(a2 + 485);
  *(_OWORD *)(a1 + 456) = v65;
  *(_OWORD *)(a1 + 472) = v66;
  WTF::String::operator=((uint64_t *)(a1 + 504), (WTF::StringImpl **)(a2 + 504));
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  return a1;
}

unsigned int **WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(unsigned int **a1, atomic_uint **a2)
{
  unint64_t v3 = *a2;
  if (*a2) {
    atomic_fetch_add(v3, 1u);
  }
  unint64_t v4 = *a1;
  *a1 = (unsigned int *)v3;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

API::WebsitePolicies *API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get(API::WebsitePolicies **a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v3 = (API::WebsitePolicies *)API::Object::newObject(0xB0uLL, 126);
    uint64_t result = API::WebsitePolicies::WebsitePolicies(v3);
    unint64_t v4 = *a1;
    *a1 = result;
    if (v4)
    {
      CFRelease(*((CFTypeRef *)v4 + 1));
      return *a1;
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(void *)a1 + 8 * v5), (WTF::StringImpl *)(*(void *)a1 + 8 * v4));
      a1[3] = v5;
    }
    else
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
      LODWORD(v5) = a1[3];
    }
    unsigned int v6 = *(WTF::StringImpl ***)a2;
    uint64_t v7 = *(uint64_t **)a1;
    if (v5)
    {
      uint64_t v15 = 8 * v5;
      do
      {
        WTF::String::operator=(v7++, v6++);
        v15 -= 8;
      }
      while (v15);
      unsigned int v6 = *(WTF::StringImpl ***)a2;
      unsigned int v8 = a1[3];
      uint64_t v7 = *(uint64_t **)a1;
    }
    else
    {
      unsigned int v8 = 0;
    }
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v8 != v9)
    {
      uint64_t v10 = &v7[v8];
      unint64_t v11 = &v6[v8];
      uint64_t v12 = 8 * v9 - 8 * v8;
      do
      {
        uint64_t v13 = *v11;
        if (*v11) {
          *(_DWORD *)v13 += 2;
        }
        *v10++ = (uint64_t)v13;
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    a1[3] = v9;
  }
  return a1;
}

uint64_t API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    API::PageConfiguration::Data::createWebProcessPool(0);
  }
  return result;
}

WebKit::WebUserContentControllerProxy *API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get(WebKit::WebUserContentControllerProxy **a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v3 = (WebKit::WebUserContentControllerProxy *)API::Object::newObject(0x70uLL, 104);
    uint64_t result = WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(v3);
    uint64_t v4 = *a1;
    *a1 = result;
    if (v4)
    {
      CFRelease(*((CFTypeRef *)v4 + 1));
      return *a1;
    }
  }
  return result;
}

WTF::StringImpl *std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>(WTF::StringImpl *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((unsigned char *)result + 24))
    {
      return (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::operator=((uint64_t)result, a2);
    }
  }
  else if (*((unsigned char *)result + 24))
  {
    return std::__optional_destruct_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::reset[abi:sn180100](result);
  }
  else
  {
    uint64_t result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)result, a2);
    *((unsigned char *)result + 24) = 1;
  }
  return result;
}

WebKit::VisitedLinkStore *API::PageConfiguration::Data::LazyInitializedRef<WebKit::VisitedLinkStore,&API::PageConfiguration::Data::createVisitedLinkStore>::get(WebKit::VisitedLinkStore **a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v3 = (WebKit::VisitedLinkStore *)API::Object::newObject(0x98uLL, 109);
    uint64_t result = WebKit::VisitedLinkStore::VisitedLinkStore(v3);
    uint64_t v4 = *a1;
    *a1 = result;
    if (v4)
    {
      CFRelease(*((CFTypeRef *)v4 + 1));
      return *a1;
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(WTF::StringImpl ***a1, void **a2)
{
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  unsigned int v6 = v4;
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  unint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      unsigned int v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
      uint64_t v9 = v8;
      unint64_t v11 = v10;
      uint64_t v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v12 != v8)
      {
        do
        {
          uint64_t v15 = v9;
          uint64_t v13 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, v9);
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v13, (WTF::StringImpl *)v9, &v15);
          while (++v9 != v11)
          {
            if ((unint64_t)*v9 + 1 > 1) {
              goto LABEL_11;
            }
          }
          uint64_t v9 = v11;
LABEL_11:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  unint64_t v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1) {
      goto LABEL_11;
    }
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    double v4 = (double)a1;
    double v5 = (double)v3;
    double v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400) {
    goto LABEL_4;
  }
LABEL_11:
  double v4 = (double)a1;
  double v5 = (double)v3;
  double v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4) {
    LODWORD(v3) = 2 * v3;
  }
  if (v3 <= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t API::PageConfiguration::Data::LazyInitializedRef<WebKit::BrowsingContextGroup,&API::PageConfiguration::Data::createBrowsingContextGroup>::get(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t result = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)uint64_t result = 1;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    double v4 = (WebKit::BrowsingContextGroup *)*a1;
    *a1 = result;
    if (v4)
    {
      WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v4, v3);
      return *a1;
    }
  }
  return result;
}

unsigned int *std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(unsigned int *result, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)result + 16) == a2[16])
  {
    if (*((unsigned char *)result + 16))
    {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result, (uint64_t)a2);
    }
  }
  else if (*((unsigned char *)result + 16))
  {
    uint64_t result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *((unsigned char *)result + 16) = 0;
  }
  else
  {
    uint64_t result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)result, (uint64_t)a2);
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

uint64_t *std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>(uint64_t *a1, WTF::StringImpl **a2)
{
  if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((unsigned char *)a1 + 8)) {
      return WTF::String::operator=(a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 8))
  {
    return (uint64_t *)std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)a1);
  }
  else
  {
    unsigned int v2 = *a2;
    if (*a2) {
      *(_DWORD *)v2 += 2;
    }
    *a1 = (uint64_t)v2;
    *((unsigned char *)a1 + 8) = 1;
  }
  return a1;
}

uint64_t *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 8 * (void)a3;
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1, a2++, a3, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_198602B28(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    uint64_t v14 = (WTF::StringImpl **)(v7 + 8 * (v10 & v8));
    uint64_t v15 = *v14;
    if (!*v14)
    {
      if (v11)
      {
        *unint64_t v11 = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v14 = v11;
      }
      uint64_t result = (WTF::StringImpl **)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v14, (WTF::StringImpl *)a2, &v27);
      uint64_t v21 = *a1;
      if (*a1) {
        int v22 = *(_DWORD *)(v21 - 12) + 1;
      }
      else {
        int v22 = 1;
      }
      *(_DWORD *)(v21 - 12) = v22;
      uint64_t v23 = *a1;
      if (*a1) {
        int v24 = *(_DWORD *)(v23 - 12);
      }
      else {
        int v24 = 0;
      }
      uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
      unint64_t v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25) {
          goto LABEL_23;
        }
      }
      else if (3 * v26 > 4 * v25)
      {
LABEL_23:
        uint64_t v20 = v23 + 8 * v26;
        char v19 = 1;
        goto LABEL_13;
      }
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v14);
      uint64_t v14 = result;
      uint64_t v23 = *a1;
      if (*a1) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
      goto LABEL_23;
    }
    if (v15 != (WTF *)-1) {
      break;
    }
    unint64_t v11 = (WTF::StringImpl **)(v7 + 8 * v13);
LABEL_9:
    unsigned int v10 = i + v13;
  }
  uint64_t result = (WTF::StringImpl **)WTF::equal(v15, *a2, a3);
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v17 = *a1;
  if (*a1) {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
  }
  else {
    uint64_t v18 = 0;
  }
  char v19 = 0;
  uint64_t v20 = v17 + 8 * v18;
LABEL_13:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + 16) = v19;
  return result;
}

{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    uint64_t v14 = (WTF::StringImpl **)(v7 + 8 * (v10 & v8));
    uint64_t v15 = *v14;
    if (!*v14)
    {
      if (v11)
      {
        *unint64_t v11 = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v14 = v11;
      }
      uint64_t v16 = *a2;
      *a2 = 0;
      uint64_t result = (WTF::StringImpl **)*v14;
      *uint64_t v14 = v16;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v18 = *a1;
      if (*a1) {
        char v19 = *(_DWORD *)(v18 - 12) + 1;
      }
      else {
        char v19 = 1;
      }
      *(_DWORD *)(v18 - 12) = v19;
      uint64_t v20 = *a1;
      if (*a1) {
        uint64_t v21 = *(_DWORD *)(v20 - 12);
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = (*(_DWORD *)(v20 - 16) + v21);
      uint64_t v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22) {
          goto LABEL_19;
        }
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_19:
        int v24 = v20 + 8 * v23;
        uint64_t v25 = 1;
        goto LABEL_20;
      }
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v14);
      uint64_t v14 = result;
      uint64_t v20 = *a1;
      if (*a1) {
        uint64_t v23 = *(unsigned int *)(v20 - 4);
      }
      else {
        uint64_t v23 = 0;
      }
      goto LABEL_19;
    }
    if (v15 == (WTF *)-1)
    {
      unint64_t v11 = (WTF::StringImpl **)(v7 + 8 * v13);
      goto LABEL_28;
    }
    uint64_t result = (WTF::StringImpl **)WTF::equal(v15, *a2, a3);
    if (result) {
      break;
    }
LABEL_28:
    unsigned int v10 = i + v13;
  }
  unint64_t v26 = *a1;
  if (*a1) {
    uint64_t v27 = *(unsigned int *)(v26 - 4);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v25 = 0;
  int v24 = v26 + 8 * v27;
LABEL_20:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 16) = v25;
  return result;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl ***a3)
{
  double v4 = **a3;
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t result = *a1;
  *a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unsigned int v13 = (WTF::StringImpl **)v6;
    do
    {
      if (*v13)
      {
        if (*v13 != (WTF::StringImpl *)-1)
        {
          uint64_t v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, v13);
          uint64_t v15 = *v14;
          *uint64_t v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = *v13;
          *unsigned int v13 = 0;
          *uint64_t v14 = v16;
          uint64_t v17 = *v13;
          *unsigned int v13 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v10);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          if (v13 == a3) {
            unint64_t v11 = v14;
          }
        }
      }
      else
      {
        *unsigned int v13 = 0;
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100) {
    unsigned int v5 = v4 >> 8;
  }
  else {
    unsigned int v5 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v6 = 0;
  do
  {
    uint64_t v7 = v5 & v3;
    unsigned int v5 = ++v6 + v7;
  }
  while (*(void *)(v2 + 8 * v7));
  return v2 + 8 * v7;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WebKit::WebUserContentControllerProxy *WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(WebKit::WebUserContentControllerProxy *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E5670;
  *((void *)this + 2) = &unk_1EE9B71B0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1EE9E5608;
  *((void *)this + 2) = &unk_1EE9E5638;
  *((void *)this + 6) = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  API::Array::create(&v5, (uint64_t *)this + 7);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v2);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  API::Array::create(&v5, (uint64_t *)this + 8);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v3);
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  {
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
  }
  uint64_t v7 = *((void *)this + 4);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebUserContentControllerProxy&>(&WebKit::webUserContentControllerProxies(void)::proxies, &v7, (uint64_t)this, (uint64_t)&v5);
  return this;
}

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WTF **)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      if (v8) {
        CFRelease(*(CFTypeRef *)(v8 + 8));
      }
      uint64_t v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

API::PageConfiguration *API::PageConfiguration::PageConfiguration(API::PageConfiguration *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E0628;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v2 = (PAL *)WTF::URL::invalidate((API::PageConfiguration *)((char *)this + 72));
  *((unsigned char *)this + 184) = 0;
  *((void *)this + 27) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((_WORD *)this + 104) = 0;
  IsSmallScreen = (API::PageConfiguration::Data *)PAL::currentUserInterfaceIdiomIsSmallScreen(v2);
  *((unsigned char *)this + 224) = IsSmallScreen ^ 1;
  *((unsigned char *)this + 225) = (_BYTE)IsSmallScreen;
  *((unsigned char *)this + 226) = (_BYTE)IsSmallScreen;
  *((unsigned char *)this + 227) = IsSmallScreen ^ 1;
  *((unsigned char *)this + 228) = API::PageConfiguration::Data::defaultDragLiftDelay(IsSmallScreen);
  *(_DWORD *)((char *)this + 229) = 16842752;
  *(_WORD *)((char *)this + 233) = 1;
  {
    char v4 = API::PageConfiguration::Data::defaultShouldDecidePolicyBeforeLoadingQuickLookPreview(void)::shouldDecide;
  }
  else
  {
    char v4 = WTF::linkedOnOrAfterSDKWithBehavior();
    API::PageConfiguration::Data::defaultShouldDecidePolicyBeforeLoadingQuickLookPreview(void)::shouldDecide = v4;
  }
  *((unsigned char *)this + 235) = v4;
  *((_WORD *)this + 118) = 257;
  *((unsigned char *)this + 238) = 1;
  *((unsigned char *)this + 248) = 0;
  *((unsigned char *)this + 256) = 0;
  *((unsigned char *)this + 264) = 0;
  *((unsigned char *)this + 268) = 0;
  *((unsigned char *)this + 304) = 0;
  *(_DWORD *)((char *)this + 239) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((unsigned char *)this + 288) = 0;
  *((unsigned char *)this + 312) = 1;
  if (WTF::linkedOnOrAfterSDKWithBehavior()) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = -1;
  }
  *((void *)this + 40) = v5;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 353) = 0u;
  *(_WORD *)((char *)this + 369) = 257;
  *((void *)this + 47) = 0;
  *((unsigned char *)this + 384) = 1;
  *((unsigned char *)this + 392) = 0;
  *((unsigned char *)this + 416) = 0;
  *((void *)this + 53) = 0x101000001000000;
  *((_WORD *)this + 216) = 0;
  *((unsigned char *)this + 464) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((unsigned char *)this + 456) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0x4014000000000000;
  *((void *)this + 62) = 0x101010000010001;
  *((_WORD *)this + 252) = 0;
  *((unsigned char *)this + 506) = 1;
  *(_WORD *)((char *)this + 511) = 0;
  *(_DWORD *)((char *)this + 507) = 0;
  *(_DWORD *)((char *)this + 513) = 65793;
  *((void *)this + 65) = 0;
  *((unsigned char *)this + 528) = 0;
  return this;
}

uint64_t API::Feature::Feature(uint64_t a1, _DWORD **a2, _DWORD **a3, char a4, char a5, _DWORD **a6, char a7, char a8)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DF3B0;
  uint64_t v16 = *a2;
  if (*a2) {
    *v16 += 2;
  }
  *(void *)(a1 + 16) = v16;
  uint64_t v17 = *a3;
  if (*a3) {
    *v17 += 2;
  }
  *(void *)(a1 + 24) = v17;
  uint64_t v18 = *a6;
  if (*a6) {
    *v18 += 2;
  }
  *(void *)(a1 + 32) = v18;
  *(unsigned char *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 41) = a5;
  *(unsigned char *)(a1 + 42) = a7;
  *(unsigned char *)(a1 + 43) = a8;
  return a1;
}

void WebKit::InitializeWebKit2(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::flag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&WebKit::flag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::InitializeWebKit2(void)::$_0 &&>>);
  }
}

uint64_t API::PageConfiguration::Data::defaultDragLiftDelay(API::PageConfiguration::Data *this)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"WebKitDebugDragLiftDelay");
  if (v1 == 1) {
    return 1;
  }
  else {
    return 2 * (v1 == 2);
  }
}

uint64_t WebKit::WebPreferences::platformGetUInt32UserValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, unsigned int *a3)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  uint64_t v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(*((WebKit **)this + 2), *((const WTF::String **)this + 3), *a2, v7));
  if (!result) {
    return result;
  }
  uint64_t v9 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  *a3 = [v9 intValue];
  return 1;
}

uint64_t WebKit::WebPreferences::platformGetStringUserValueForKey(WebKit **this, const WTF::String **a2, WTF::StringImpl **a3)
{
  if (this[2])
  {
    uint64_t v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    uint64_t result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(this[2], this[3], *a2, v7));
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      MEMORY[0x19972EAD0](&v15, v9);
      unint64_t v11 = v15;
      uint64_t v15 = 0;
      uint64_t v12 = *a3;
      *a3 = v11;
      if (v12)
      {
        int v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 != 2)
        {
LABEL_8:
          *(_DWORD *)uint64_t v12 = v13;
          return 1;
        }
        WTF::StringImpl::destroy(v12, v10);
        uint64_t v12 = v15;
        uint64_t v15 = 0;
        if (v12)
        {
          int v13 = *(_DWORD *)v12 - 2;
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, v14);
            return 1;
          }
          goto LABEL_8;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t WebKit::WebPreferences::platformGetDoubleUserValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, double *a3)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  uint64_t v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(*((WebKit **)this + 2), *((const WTF::String **)this + 3), *a2, v7));
  if (!result) {
    return result;
  }
  uint64_t v9 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  [v9 doubleValue];
  *(void *)a3 = v10;
  return 1;
}

uint64_t WebKit::setDebugBoolValueIfInUserDefaults(WebKit **this, const WTF::String **a2, const WTF::String *a3, const WTF::String **a4, const WTF::String *a5, WebKit::WebPreferencesStore *a6)
{
  uint64_t result = WebKit::debugUserDefaultsValue(this, a2, a3, a4, a5);
  if (result)
  {
    uint64_t v9 = (void *)result;
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      unsigned int v10 = [v9 BOOLValue];
      return WebKit::WebPreferencesStore::setBoolValueForKey(a5, a4, v10);
    }
  }
  return result;
}

uint64_t WebKit::debugUserDefaultsValue(WebKit **this, const WTF::String **a2, const WTF::String *a3, const WTF::String **a4, const WTF::String *a5)
{
  unsigned int v10 = objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults", a3, a4, a5);
  unint64_t v11 = *this;
  if (!*this
    || !*((_DWORD *)v11 + 1)
    || (uint64_t result = objc_msgSend(v10, "objectForKey:", WebKit::makeKey(v11, *a2, *a4, v9))) == 0)
  {
    if (*(void *)a3) {
      int v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v13 = &stru_1EEA10550;
    }
    if (*a4) {
      uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v14 = &stru_1EEA10550;
    }
    uint64_t v15 = [(__CFString *)v13 stringByAppendingString:v14];
    return [v10 objectForKey:v15];
  }
  return result;
}

uint64_t WebKit::WebPreferences::platformGetBoolUserValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, BOOL *a3)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  uint64_t v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(*((WebKit **)this + 2), *((const WTF::String **)this + 3), *a2, v7));
  if (!result) {
    return result;
  }
  uint64_t v9 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  *a3 = [v9 BOOLValue];
  return 1;
}

__CFString *WebKit::makeKey(WebKit *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  if (this) {
    *(_DWORD *)this += 2;
  }
  int v13 = this;
  if (a2) {
    *(_DWORD *)a2 += 2;
  }
  uint64_t v12 = a2;
  if (a3) {
    *(_DWORD *)a3 += 2;
  }
  unint64_t v11 = a3;
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v13, (uint64_t *)&v12, (uint64_t *)&v11, &v14);
  if (v14)
  {
    uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
    uint64_t v6 = v14;
    uint64_t v14 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v5 = &stru_1EEA10550;
  }
  uint64_t v7 = v11;
  unint64_t v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  int v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v4);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v5;
}

void sub_1986039CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::makeString<WTF::String,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v8 = *a2;
  uint64_t v9 = v5;
  uint64_t v7 = *a3;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v9, &v8, &v7, a4);
  if (!*a4) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)result) {
    int v6 = *(_DWORD *)(v5 + 4);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    int v8 = *(_DWORD *)(v7 + 4);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = *a3;
  if (*a3) {
    int v10 = *(_DWORD *)(v9 + 4);
  }
  else {
    int v10 = 0;
  }
  if (((v10 | v8) & 0x80000000) == 0)
  {
    BOOL v11 = __OFADD__(v8, v10);
    int v12 = v8 + v10;
    BOOL v13 = v11;
    if ((v6 & 0x80000000) == 0 && !v13)
    {
      uint64_t result = (v6 + v12);
      if (!__OFADD__(v6, v12))
      {
        if (!v5 || (*(unsigned char *)(v5 + 16) & 4) != 0)
        {
          if (v7)
          {
            unsigned int v15 = *(_DWORD *)(v7 + 16);
            int v14 = (v15 >> 2) & 1;
            if (!v9 || (v15 & 4) == 0) {
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v5, v7, (_DWORD *)v9, a4);
            }
          }
          else if (!v9)
          {
            int v14 = 1;
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v5, v7, (_DWORD *)v9, a4);
          }
          int v14 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
        }
        else
        {
          int v14 = 0;
        }
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v5, v7, (_DWORD *)v9, a4);
      }
    }
  }
  *a4 = 0;
  return result;
}

void API::Array::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = API::Object::newObject(0x20uLL, 1);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(void *)uint64_t v4 = &unk_1EE9D1E78;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v5 = *a1;
  *a1 = 0;
  *(void *)(v4 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(v4 + 28) = v5;
  *a2 = v4;
}

uint64_t API::Object::newObject(size_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v5 = WKNSArray;
      goto LABEL_77;
    case 8:
      uint64_t v5 = WKNSData;
      goto LABEL_77;
    case 9:
      uint64_t v5 = WKNSDictionary;
      goto LABEL_77;
    case 11:
      uint64_t v5 = _WKFrameHandle;
      goto LABEL_77;
    case 17:
      uint64_t v5 = _WKResourceLoadInfo;
      goto LABEL_77;
    case 18:
      uint64_t v5 = WKSecurityOrigin;
      goto LABEL_77;
    case 22:
      uint64_t v5 = _WKTargetedElementInfo;
      goto LABEL_77;
    case 23:
      uint64_t v5 = _WKTargetedElementRequest;
      goto LABEL_77;
    case 28:
      uint64_t v5 = WKUserScript;
      goto LABEL_77;
    case 29:
      uint64_t v5 = _WKUserStyleSheet;
      goto LABEL_77;
    case 32:
    case 33:
    case 34:
    case 35:
      uint64_t v4 = [WKNSNumber alloc];
      v4->_type = a2;
      goto LABEL_79;
    case 40:
      uint64_t v5 = _WKApplicationManifest;
      goto LABEL_77;
    case 41:
      uint64_t v5 = _WKAttachment;
      goto LABEL_77;
    case 42:
      uint64_t v5 = _WKAutomationSession;
      goto LABEL_77;
    case 43:
      uint64_t v5 = WKBackForwardList;
      goto LABEL_77;
    case 44:
      uint64_t v5 = WKBackForwardListItem;
      goto LABEL_77;
    case 47:
      uint64_t v5 = WKContentRuleList;
      goto LABEL_77;
    case 48:
      uint64_t v5 = _WKContentRuleListAction;
      goto LABEL_77;
    case 49:
      uint64_t v5 = WKContentRuleListStore;
      goto LABEL_77;
    case 50:
      uint64_t v5 = WKContentWorld;
      goto LABEL_77;
    case 51:
      uint64_t v5 = WKContextMenuElementInfo;
      goto LABEL_77;
    case 53:
      uint64_t v5 = _WKCustomHeaderFields;
      goto LABEL_77;
    case 54:
      uint64_t v5 = _WKDataTask;
      goto LABEL_77;
    case 55:
      uint64_t v5 = _WKInspectorDebuggableInfo;
      goto LABEL_77;
    case 56:
      uint64_t v5 = WKDownload;
      goto LABEL_77;
    case 57:
      uint64_t v5 = _WKFeature;
      goto LABEL_77;
    case 60:
      uint64_t v5 = WKFrameInfo;
      goto LABEL_77;
    case 62:
      uint64_t v5 = _WKFrameTreeNode;
      goto LABEL_77;
    case 66:
      uint64_t v5 = WKHTTPCookieStore;
      goto LABEL_77;
    case 67:
      uint64_t v5 = _WKHitTestResult;
      goto LABEL_77;
    case 68:
      uint64_t v5 = _WKGeolocationPosition;
      goto LABEL_77;
    case 71:
      uint64_t v5 = _WKInspector;
      goto LABEL_77;
    case 72:
      uint64_t v5 = _WKInspectorConfiguration;
      goto LABEL_77;
    case 76:
      uint64_t v5 = WKNavigation;
      goto LABEL_77;
    case 77:
      uint64_t v5 = WKNavigationAction;
      goto LABEL_77;
    case 78:
      uint64_t v5 = WKNavigationData;
      goto LABEL_77;
    case 79:
      uint64_t v5 = WKNavigationResponse;
      goto LABEL_77;
    case 87:
      uint64_t v5 = WKWebViewConfiguration;
      goto LABEL_77;
    case 89:
      uint64_t v5 = WKProcessPool;
      goto LABEL_77;
    case 90:
      uint64_t v5 = _WKProcessPoolConfiguration;
      goto LABEL_77;
    case 92:
      uint64_t v5 = WKPreferences;
      goto LABEL_77;
    case 95:
      uint64_t v5 = _WKResourceLoadStatisticsFirstParty;
      goto LABEL_77;
    case 96:
      uint64_t v5 = _WKResourceLoadStatisticsThirdParty;
      goto LABEL_77;
    case 103:
      uint64_t v5 = WKURLSchemeTaskImpl;
      goto LABEL_77;
    case 104:
      uint64_t v5 = WKUserContentController;
      goto LABEL_77;
    case 105:
      uint64_t v5 = _WKUserInitiatedAction;
      goto LABEL_77;
    case 109:
      uint64_t v5 = _WKVisitedLinkStore;
      goto LABEL_77;
    case 110:
      uint64_t v5 = WKWebExtension;
      goto LABEL_77;
    case 111:
      uint64_t v5 = WKWebExtensionAction;
      goto LABEL_77;
    case 112:
      uint64_t v5 = WKWebExtensionCommand;
      goto LABEL_77;
    case 113:
      uint64_t v5 = WKWebExtensionContext;
      goto LABEL_77;
    case 114:
      uint64_t v5 = WKWebExtensionController;
      goto LABEL_77;
    case 115:
      uint64_t v5 = WKWebExtensionControllerConfiguration;
      goto LABEL_77;
    case 116:
      uint64_t v5 = WKWebExtensionDataRecord;
      goto LABEL_77;
    case 117:
      uint64_t v5 = WKWebExtensionMatchPattern;
      goto LABEL_77;
    case 118:
      uint64_t v5 = WKWebExtensionMessagePort;
      goto LABEL_77;
    case 120:
      uint64_t v5 = _WKWebPushDaemonConnection;
      goto LABEL_77;
    case 121:
      uint64_t v5 = _WKWebPushMessage;
      goto LABEL_77;
    case 122:
      uint64_t v5 = _WKWebPushSubscriptionData;
      goto LABEL_77;
    case 123:
      uint64_t v5 = WKWebsiteDataRecord;
      goto LABEL_77;
    case 124:
      uint64_t v5 = WKWebsiteDataStore;
      goto LABEL_77;
    case 125:
      uint64_t v5 = _WKWebsiteDataStoreConfiguration;
      goto LABEL_77;
    case 126:
      uint64_t v5 = WKWebpagePreferences;
      goto LABEL_77;
    case 127:
      uint64_t v5 = WKWindowFeatures;
      goto LABEL_77;
    case 128:
      uint64_t v5 = _WKWebAuthenticationAssertionResponse;
      goto LABEL_77;
    case 129:
      uint64_t v5 = _WKWebAuthenticationPanel;
      goto LABEL_77;
    case 132:
      uint64_t v5 = WKWebProcessPlugInController;
      goto LABEL_77;
    case 135:
      uint64_t v5 = WKWebProcessPlugInCSSStyleDeclarationHandle;
      goto LABEL_77;
    case 137:
      uint64_t v5 = WKWebProcessPlugInFrame;
      goto LABEL_77;
    case 138:
      uint64_t v5 = WKWebProcessPlugInHitTestResult;
      goto LABEL_77;
    case 139:
      uint64_t v5 = WKWebProcessPlugInNodeHandle;
      goto LABEL_77;
    case 140:
      uint64_t v5 = WKWebProcessPlugInBrowserContextController;
      goto LABEL_77;
    case 143:
      uint64_t v5 = WKWebProcessPlugInRangeHandle;
      goto LABEL_77;
    case 144:
      uint64_t v5 = WKWebProcessPlugInScriptWorld;
LABEL_77:
      Instance = (WKNSNumber *)[v5 alloc];
      break;
    default:
      int v6 = (objc_class *)objc_opt_class();
      Instance = (WKNSNumber *)class_createInstance(v6, a1);
      break;
  }
  uint64_t v4 = Instance;
LABEL_79:
  uint64_t result = [(WKNSNumber *)v4 _apiObject];
  *(void *)(result + 8) = v4;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebUserContentControllerProxy&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_30;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 24), a3 + 16);
  uint64_t v21 = *(atomic_uint **)(a3 + 24);
  atomic_fetch_add(v21, 1u);
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_23:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_23;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_30:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

uint64_t WebCore::GraphicsContext::detectingContentfulPaint(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::appliesPageScale(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 11) & 1;
}

uint64_t WebKit::PageClientImpl::isFullScreen(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if ([WeakRetained hasFullScreenWindowController])
  {
    uint64_t v2 = objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "isFullScreen");
    if (!WeakRetained) {
      return v2;
    }
    goto LABEL_5;
  }
  uint64_t v2 = 0;
  if (WeakRetained) {
LABEL_5:
  }
    CFRelease(WeakRetained);
  return v2;
}

void sub_198604380(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **__copy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__1(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 40), (uint64_t **)(a2 + 40));
}

uint64_t **__copy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 40), (uint64_t **)(a2 + 40));
}

uint64_t **__copy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 40), (uint64_t **)(a2 + 40));
}

char *___ZN3IPC10Connection20initializeSendSourceEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(char **)(a1 + 32);
  if (*((void *)result + 40)) {
    return IPC::Connection::resumeSendSource((IPC::Connection *)result, a2);
  }
  return result;
}

uint64_t WebKit::GraphicsLayerCARemote::filtersCanBeComposited(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F416FBA8](a2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::dispatchIncomingMessages(void)::$_0,void>::call(uint64_t a1)
{
}

atomic_uchar *__destroy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__0(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar **)*((void *)result + 5);
  *((void *)result + 5) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  }
  return result;
}

void WebKit::LogChannels::logLevelString(void *a1@<X8>)
{
  *a1 = 0;
}

unint64_t IPC::ArgumentCoder<WebCore::LayoutPoint,void>::decode(uint64_t *a1)
{
  unint64_t v2 = IPC::Decoder::decode<WebCore::LayoutUnit>(a1);
  unint64_t v3 = IPC::Decoder::decode<WebCore::LayoutUnit>(a1);
  if (!*a1) {
    return 0;
  }
  if ((v2 & 0xFF00000000) == 0 || (v3 & 0xFF00000000) == 0)
  {
    __break(1u);
    return 0;
  }
  return v2 | ((unint64_t)v3 << 32);
}

unint64_t IPC::Decoder::decode<WebCore::LayoutUnit>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Rotate,void>::decode(a1);
  if (!HIDWORD(result))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::Rotate,void>::decode(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = (unsigned int *)(v2 + v3);
    a1[2] = (uint64_t)(v5 + 1);
    if (!v2)
    {
      unint64_t v7 = v1;
      uint64_t v8 = 0;
      goto LABEL_10;
    }
    return *v5 | 0x100000000;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9) {
      goto LABEL_14;
    }
LABEL_10:
    while (1)
    {
      uint64_t v2 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v10 = a1[3];
      if (!v10) {
        break;
      }
      uint64_t v11 = a1;
      if (!v7) {
        return 0;
      }
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      uint64_t v2 = *v11;
      if (!*v11) {
        return v2;
      }
      __break(1u);
LABEL_14:
      unint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  return v2;
}

uint64_t WebKit::WebPageDebuggable::type(WebKit::WebPageDebuggable *this)
{
  return 5;
}

unsigned int *WebKit::WebPageProxy::initializeWebPage(unsigned int *this, const WebKit::Site *a2)
{
  if (!*((unsigned char *)this + 801))
  {
    uint64_t v2 = (uint64_t)this;
    if (*((unsigned char *)this + 800))
    {
      uint64_t v4 = *((void *)this + 5);
      if (v4) {
        uint64_t v5 = *(void *)(v4 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
      uint64_t v6 = *(void *)(v2 + 256);
      atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
      (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 16))(v53, v5, v6);
      WebKit::WebPageProxy::setDrawingArea((WebKit::DrawingAreaProxy **)v2, (WebKit::DrawingAreaProxy **)v53);
      unint64_t v7 = v53[0];
      v53[0] = 0;
      if (v7) {
        (*(void (**)(uint64_t *))(*v7 + 8))(v7);
      }
      if (v6) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
      }
      uint64_t v8 = (Inspector::RemoteInspector *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 1600))(v5);
      Inspector::RemoteInspector::singleton(v8);
      uint64_t v9 = *(_DWORD **)(*(void *)(v2 + 48) + 520);
      if (v9)
      {
        *v9 += 2;
        v55[0] = (uint64_t)v9;
        uint64_t v10 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v2 + 312));
        atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
        uint64_t v56 = *(void *)(*(void *)(v2 + 312) + 24);
        uint64_t v11 = (uint64_t *)(*(void *)(v2 + 32) + 760);
        unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v12 = 364;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 66) = (char *)v12 + 16;
        *((void *)v12 + 67) = 512;
        *((void *)v12 + 68) = 0;
        *((void *)v12 + 70) = 0;
        *((void *)v12 + 69) = 0;
        IPC::Encoder::encodeHeader(v12);
        v48[0] = v12;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v56);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, v11);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, v55);
        LOBYTE(v53[0]) = 0;
        LOBYTE(v54) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, v48, 0, (uint64_t)v53, 1);
        if ((_BYTE)v54)
        {
          unint64_t v14 = v53[0];
          v53[0] = 0;
          if (v14) {
            (*(void (**)(uint64_t *))(*v14 + 8))(v14);
          }
        }
        unsigned int v15 = v48[0];
        v48[0] = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v13);
          WTF::fastFree(v43, v44);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
        uint64_t v17 = (WTF::StringImpl *)v55[0];
        v55[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 312) + 400);
      if (v18)
      {
        int v19 = (unsigned int *)(v18 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v18 + 16), 1u);
        uint64_t v20 = *(void *)(v2 + 1408);
        if (v20)
        {
          v48[0] = *(WTF::StringImpl **)(*(void *)(v2 + 312) + 24);
          v55[0] = *(void *)(*(void *)(v20 + 32) + 760);
          uint64_t v56 = *(void *)(*(void *)(v2 + 32) + 760);
          v53[0] = (uint64_t *)v48;
          v53[1] = v55;
          unsigned int v54 = &v56;
          WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::CloneSessionStorageForWebPage>(v18, v53);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v19);
      }
      uint64_t v21 = *(void *)(v2 + 1408);
      *(void *)(v2 + 1408) = 0;
      if (v21) {
        CFRelease(*(CFTypeRef *)(v21 + 8));
      }
      uint64_t v22 = *(atomic_uint **)(v2 + 256);
      atomic_fetch_add(v22 + 4, 1u);
      WebKit::BrowsingContextGroup::ensureProcessForSite(*(WebKit::BrowsingContextGroup **)(v2 + 1416), a2, v22, *(const WebKit::WebPreferences **)(v2 + 272), v53);
      int v23 = v53[0];
      uint64_t v24 = (WebCore::Process *)WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v25 = WebCore::Process::identifier(v24);
      uint64_t v26 = API::Object::newObject(0x1C8uLL, 59);
      uint64_t v27 = WebKit::WebFrameProxy::WebFrameProxy(v26, v2, v23, (uint64_t)v24, v25, 1);
      uint64_t v29 = *(void *)(v2 + 328);
      *(void *)(v2 + 328) = v27;
      if (v29) {
        CFRelease(*(CFTypeRef *)(v29 + 8));
      }
      WTF::RefCounted<WebKit::FrameProcess>::deref((WebKit::FrameProcess *)v23, v28);
      uint64_t v31 = *(void *)(v2 + 272);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v31 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v30))WebKit::BrowsingContextGroup::addPage(*(WebKit::BrowsingContextGroup **)(v2 + 1416), (WebKit::WebPageProxy *)v2); {
      uint64_t v32 = *(void *)(v2 + 256);
      }
      uint64_t v33 = *(void *)(v2 + 32) + 1928;
      uint64_t v34 = *(void *)(v2 + 232);
      uint64_t v35 = *(void *)(v2 + 328);
      uint64_t v36 = *(void *)(v35 + 272);
      uint64_t v37 = *(void *)(v35 + 280);
      LOBYTE(v48[0]) = 0;
      char v52 = 0;
      uint64_t v56 = 0;
      WebKit::WebPageProxy::creationParameters((void *)v2, (WebKit::WebProcessProxy *)v22, v34, v36, v37, (uint64_t)v48, 0, (uint64_t)&v56, (uint64_t)v53);
      v55[0] = v33;
      v55[1] = (uint64_t)v53;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>(v32, (uint64_t)v55, 0, 0);
      WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v53);
      if (v52)
      {
        if (v51[120]) {
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v51, v38);
        }
        WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v38);
        uint64_t v46 = v49;
        uint64_t v49 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, v45);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
        unsigned int v47 = v48[0];
        v48[0] = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v45);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
      }
      uint64_t v39 = WTF::fastMalloc((WTF *)0x38);
      *(void *)uint64_t v39 = &unk_1EE9D9808;
      *(void *)(v39 + 8) = 0;
      *(_OWORD *)(v39 + 16) = 0u;
      *(_OWORD *)(v39 + 32) = 0u;
      *(void *)(v39 + 48) = 0;
      std::unique_ptr<WebKit::WebPageProxyFrameLoadStateObserver>::reset[abi:sn180100]((WebKit::WebPageProxyFrameLoadStateObserver **)(*(void *)(v2 + 32) + 2592), (WebKit::WebPageProxyFrameLoadStateObserver *)v39);
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(*(void *)(v2 + 328) + 208, *(unsigned int **)(*(void *)(v2 + 32) + 2592), (uint64_t)v53);
      WebKit::WebProcessProxy::addVisitedLinkStoreUser((uint64_t *)v22, *(unsigned int **)(v2 + 304), *(void *)(*(void *)(v2 + 32) + 760));
      {
        BOOL v42 = dword_1EB35A4E4 == 0;
      }
      else
      {
        qword_1EB35A4F0 = 0;
        WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
        unk_1EB35A4E0 = 0u;
        BOOL v42 = 1;
      }
      *(unsigned char *)(v2 + 1376) = v42;
      WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v40, v41);
      *(unsigned char *)(v2 + 1377) = dword_1EB359C94 == 0;
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v22 + 4);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::sharedPreferencesForWebProcess(WebKit::BrowsingContextGroup **this, IPC::Connection *a2)
{
  WebKit::BrowsingContextGroup::ensureProcessForConnection(this[177], a2, (atomic_uint **)this, this[34], &v6);
  uint64_t v2 = v6;
  uint64_t v3 = *((void *)v6 + 2) + 1080;
  uint64_t v6 = 0;
  WTF::RefCounted<WebKit::FrameProcess>::deref(v2, v4);
  return v3;
}

WebKit::FrameProcess *WTF::RefCounted<WebKit::FrameProcess>::deref(WebKit::FrameProcess *result, WTF::StringImpl *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::FrameProcess::~FrameProcess(result, a2);
    return (WebKit::FrameProcess *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebKit::BrowsingContextGroup::ensureProcessForConnection@<X0>(WebKit::BrowsingContextGroup *this@<X0>, IPC::Connection *a2@<X1>, atomic_uint **a3@<X2>, const WebKit::WebPreferences *a4@<X3>, WebKit::FrameProcess **a5@<X8>)
{
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_29;
  }
  unint64_t v13 = (WTF **)*((void *)this + 2);
  if (!v13)
  {
    uint64_t v17 = 0;
    LODWORD(v14) = 0;
    goto LABEL_16;
  }
  uint64_t v14 = *((unsigned int *)v13 - 1);
  unsigned int v15 = &v13[3 * v14];
  if (!*((_DWORD *)v13 - 3))
  {
    uint64_t v17 = &v13[3 * v14];
LABEL_16:
    unsigned int v15 = &v13[3 * v14];
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!v14)
  {
    uint64_t v17 = (WTF **)*((void *)this + 2);
LABEL_17:
    v13 += 3 * *((unsigned int *)v13 - 1);
    goto LABEL_18;
  }
  uint64_t v16 = 24 * v14;
  while (1)
  {
    uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v13, v11, v12);
    if ((result & 1) == 0 && *v13 != (WTF *)-1) {
      break;
    }
    v13 += 3;
    v16 -= 24;
    if (!v16)
    {
      unint64_t v13 = v15;
      break;
    }
  }
  uint64_t v17 = v13;
  unint64_t v13 = (WTF **)*((void *)this + 2);
  if (v13) {
    goto LABEL_17;
  }
LABEL_18:
  if (v13 == v17)
  {
LABEL_29:
    uint64_t v21 = a3[32];
    WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a3, (uint64_t *)&v27);
    MEMORY[0x19972E890](v28, &v27, 0);
    WebKit::Site::Site((WebKit::Site *)&v29, (const WTF::URL *)v28);
    uint64_t v22 = (WebKit::FrameProcess *)WTF::fastMalloc((WTF *)0x30);
    *a5 = WebKit::FrameProcess::FrameProcess(v22, v21, this, (const WebKit::Site *)&v29, a4);
    uint64_t v24 = v30;
    uint64_t v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = v29;
    uint64_t v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v23);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v28[0];
    v28[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v23);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t result = (uint64_t)v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  while (1)
  {
    uint64_t v18 = v17[2];
    if (v18)
    {
      int v19 = (WebKit::FrameProcess *)*((void *)v18 + 1);
      if (v19)
      {
        if (*(IPC::Connection **)(*((void *)v19 + 2) + 144) == a2) {
          break;
        }
      }
    }
    uint64_t v20 = v17 + 3;
    uint64_t v17 = v15;
    if (v20 != v15)
    {
      uint64_t v17 = v20;
      while (1)
      {
        uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v17, v11, v12);
        if ((result & 1) == 0 && *v17 != (WTF *)-1) {
          break;
        }
        v17 += 3;
        if (v17 == v15)
        {
          uint64_t v17 = v15;
          break;
        }
      }
    }
    if (v17 == v13) {
      goto LABEL_29;
    }
  }
  ++*(_DWORD *)v19;
  *a5 = v19;
  return result;
}

WebKit::Site *WebKit::Site::Site(WebKit::Site *this, const WTF::URL *a2)
{
  WTF::URL::protocol(a2);
  if ((v4 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebKit::Site *)((char *)this + 8), a2);
  return this;
}

WebCore::RegistrableDomain *WebCore::RegistrableDomain::RegistrableDomain(WebCore::RegistrableDomain *this, const WTF::URL *a2)
{
  WTF::URL::host(a2);
  if ((v3 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  WebCore::RegistrableDomain::registrableDomainFromHost((WebCore::RegistrableDomain *)&v8, v9);
  if (v9[0] && *(_DWORD *)(v9[0] + 4))
  {
    *(void *)this = v9[0];
    v9[0] = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v7 = (WTF::StringImpl *)v9[0];
    *(void *)this = v9[1];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v4);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return this;
}

void sub_198605158(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::RegistrableDomain::registrableDomainFromHost@<X0>(WebCore::RegistrableDomain *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::PublicSuffixStore::singleton(this);
  uint64_t result = (uint64_t *)WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    if (!*a2 || !*(_DWORD *)(*a2 + 4)) {
      return WTF::String::operator=(a2, (WTF::StringImpl **)this);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t result = (uint64_t *)*a2;
    *a2 = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198605284(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::FrameProcess *WebKit::FrameProcess::FrameProcess(WebKit::FrameProcess *this, atomic_uint *a2, WebKit::BrowsingContextGroup *a3, const WebKit::Site *a4, const WebKit::WebPreferences *a5)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  atomic_fetch_add(a2 + 4, 1u);
  *((void *)this + 2) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  uint64_t v10 = (atomic_uint *)*((void *)a3 + 1);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *((void *)this + 3) = v10;
  uint64_t v11 = *(_DWORD **)a4;
  if (*(void *)a4) {
    *v11 += 2;
  }
  *((void *)this + 4) = v11;
  unint64_t v12 = (_DWORD *)*((void *)a4 + 1);
  if (v12) {
    *v12 += 2;
  }
  *((void *)this + 5) = v12;
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v9))
  {
    WebKit::BrowsingContextGroup::addFrameProcess(a3, this);
  }
  else
  {
    uint64_t v14 = (unsigned int *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
  }
  return this;
}

unsigned int *WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  if (!*(void *)result)
  {
    uint64_t v3 = (unsigned int **)result;
    uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = a2;
    uint64_t result = *v3;
    void *v3 = (unsigned int *)v5;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebPageProxy::currentURL@<X0>(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t *)WebKit::PageLoadState::activeURL((unsigned __int8 *)(*((void *)this + 4) + 1000), a2);
  if (!*a2 || !*(_DWORD *)(*a2 + 4))
  {
    uint64_t v5 = *((void *)this + 83);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      if (*(void *)(v6 + 8) && *(unsigned char *)(v5 + 48))
      {
        unint64_t v7 = *(void *)(v5 + 40);
        if (v7 >= *(unsigned int *)(v5 + 36))
        {
          __break(0xC471u);
        }
        else
        {
          uint64_t v8 = *(void *)(*(void *)(v5 + 24) + 8 * v7);
          if (v8)
          {
            return WTF::String::operator=(a2, (WTF::StringImpl **)(v8 + 56));
          }
        }
      }
    }
  }
  return result;
}

void sub_198605588(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::PageLoadState::activeURL@<X0>(unsigned __int8 *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  if (v3 || (uint64_t v3 = (_DWORD *)*((void *)this + 9)) != 0 && v3[1])
  {
LABEL_9:
    *v3 += 2;
    goto LABEL_10;
  }
  if (*this - 1 < 2)
  {
    uint64_t v3 = (_DWORD *)*((void *)this + 4);
    if (!v3) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*this)
  {
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  if (v3) {
    goto LABEL_9;
  }
LABEL_10:
  *a2 = v3;
  return this;
}

void sub_1986056B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::URL *WTF::URL::URL(WTF::URL *this)
{
  return this;
}

{
  WTF::URL::URL(this);
  return this;
}

void *WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(void *a1)
{
  return a1;
}

void *WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>::WeakPtrFactory(void *result)
{
  *uint64_t result = 0;
  return result;
}

void WebKit::FrameProcess::~FrameProcess(WebKit::FrameProcess *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      WebKit::BrowsingContextGroup::removeFrameProcess(v4, (uint64_t)this);
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    unint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9B9030;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

unsigned int **WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  if (*a1)
  {
    *((void *)*a1 + 1) = 0;
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::WebPageProxyFrameLoadStateObserver *std::unique_ptr<WebKit::WebPageProxyFrameLoadStateObserver>::reset[abi:sn180100](WebKit::WebPageProxyFrameLoadStateObserver **a1, WebKit::WebPageProxyFrameLoadStateObserver *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebPageProxyFrameLoadStateObserver::~WebPageProxyFrameLoadStateObserver(result, a2);
    return (WebKit::WebPageProxyFrameLoadStateObserver *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::WebPage::updatePreferences(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  WebKit::WebPage::updatePreferencesGenerated(a2, a2);
  uint64_t v4 = *(void *)(*((void *)this + 6) + 112);
  WebKit::WebPage::updateSettingsGenerated(a2, (const WebKit::WebPreferencesStore *)v4, v5);
  if ((*(unsigned char *)(v4 + 664) & 0x10) == 0)
  {
    unint64_t v7 = qword_1EB358000;
    if (os_log_type_enabled((os_log_t)qword_1EB358000, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)this + 5);
      *(_DWORD *)buf = 134218240;
      *(void *)uint64_t v93 = this;
      *(_WORD *)&v93[8] = 2048;
      *(void *)&v93[10] = v8;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::updatePreferences: acceleratedCompositingEnabled setting was false. WebKit cannot function in this mode; changing setting to true",
        buf,
        0x16u);
    }
    WebCore::Settings::setAcceleratedCompositingEnabled((WebCore::Settings *)v4);
  }
  uint64_t v9 = &WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key;
    goto LABEL_99;
  while (1)
  {
    uint64_t v10 = (uint64_t *)(v4 + 664);
    if (WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, v6))
    {
      uint64_t v13 = *(void *)(v4 + 712);
      uint64_t v12 = *(void *)(v4 + 720);
      uint64_t v15 = *(void *)(v4 + 680);
      uint64_t v14 = *(void *)(v4 + 688);
      uint64_t v17 = *v10;
      uint64_t v16 = *(void *)(v4 + 672);
      uint64_t v18 = *(void *)(v4 + 704);
      uint64_t v19 = *(void *)(v4 + 696) | 4;
LABEL_15:
      uint64_t v24 = 2;
      goto LABEL_17;
    }
    {
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, v11);
    uint64_t v22 = 4;
    if (!BoolValueForKey) {
      uint64_t v22 = 0;
    }
    *(void *)(v4 + 696) = *(void *)(v4 + 696) & 0xFFFFFFFFFFFFFFFBLL | v22;
    {
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    int v23 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, v21);
    uint64_t v13 = *(void *)(v4 + 712);
    uint64_t v12 = *(void *)(v4 + 720);
    uint64_t v19 = *(void *)(v4 + 696);
    uint64_t v18 = *(void *)(v4 + 704);
    uint64_t v15 = *(void *)(v4 + 680);
    uint64_t v14 = *(void *)(v4 + 688);
    uint64_t v17 = *v10;
    uint64_t v16 = *(void *)(v4 + 672);
    if (v23) {
      goto LABEL_15;
    }
    uint64_t v24 = 0;
LABEL_17:
    *uint64_t v10 = v17;
    *(void *)(v4 + 672) = v16;
    *(void *)(v4 + 680) = v15;
    *(void *)(v4 + 688) = v14;
    *(void *)(v4 + 696) = v19 & 0xFFFFFFFFFFFFFFFDLL | v24;
    *(void *)(v4 + 704) = v18;
    *(void *)(v4 + 712) = v13;
    *(void *)(v4 + 720) = v12;
    {
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    *(unsigned char *)(v4 + 560) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key) != 0;
    {
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
    }
    *(unsigned char *)(v4 + 549) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key) != 0;
    {
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
    }
    *(_DWORD *)(v4 + 424) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key);
    {
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
    WebCore::Settings::setStorageBlockingPolicy();
    {
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    *(unsigned char *)(v4 + 369) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key);
    {
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
    }
    *(unsigned char *)(v4 + 616) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key);
    {
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v25 = (WebCore::DatabaseManager *)WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key);
    *(unsigned char *)(v4 + 520) = (_BYTE)v25;
    uint64_t v27 = (WebCore::DatabaseManager *)WebCore::DatabaseManager::singleton(v25);
    {
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, v26);
    WebCore::DatabaseManager::setIsAvailable(v27);
    {
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
    }
    *((unsigned char *)this + 187) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, v28);
    {
      WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v30 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, v29);
    if (*((unsigned __int8 *)this + 1826) != v30)
    {
      *((unsigned char *)this + 1826) = v30;
      WebKit::WebPage::updateThrottleState(this);
    }
    {
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    *((unsigned char *)this + 198) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, v31);
    {
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    *((unsigned char *)this + 200) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, v32);
    {
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v34 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, v33);
    unint64_t v36 = 0x8000000000000000;
    if (!v34) {
      unint64_t v36 = 0;
    }
    *(void *)(v4 + 712) = v36 & 0x8000000000000000 | *(void *)(v4 + 712) & 0x7FFFFFFFFFFFFFFFLL;
    if (*((unsigned char *)this + 1185))
    {
      char v37 = 1;
    }
    else
    {
      {
        WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
      }
      char v37 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, v35);
    }
    *((unsigned char *)this + 1185) = v37;
    *((unsigned char *)this + 1169) = v37;
    {
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, v35))WebKit::disableServiceWorkerEntitlementTestingOverride = 1;
    {
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v39 = *((unsigned __int8 *)this + 2249);
    if (WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, v38))
    {
      char HasServiceWorkerEntitlement = WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(this);
      if (!v39 && (HasServiceWorkerEntitlement & 1) == 0) {
        *(void *)(v4 + 696) &= ~0x8000000uLL;
      }
    }
    {
      WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    *((unsigned char *)this + 195) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, v40);
    {
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v43 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, v42);
    uint64_t v45 = 0x80000000000000;
    if (!v43) {
      uint64_t v45 = 0;
    }
    *(void *)(v4 + 688) = *(void *)(v4 + 688) & 0xFF7FFFFFFFFFFFFFLL | v45;
    uint64_t v46 = *((void *)this + 9);
    if (v46) {
      (*(void (**)(uint64_t, const WebKit::WebPreferencesStore *))(*(void *)v46 + 104))(v46, a2);
    }
    {
      char v81 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v81);
    }
    uint64_t v47 = WebKit::WebProcess::singleton(void)::process;
    {
      WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BOOL v48 = (WebCore *)WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key, v44);
    *(unsigned char *)(v47 + 760) = (_BYTE)v48;
    uint64_t v49 = (WebCore::PlatformStrategies *)WebCore::platformStrategies(v48);
    atomic_store(*((unsigned char *)this + 193), (unsigned __int8 *)(WebCore::PlatformStrategies::mediaStrategy(v49) + 9));
    {
      char v82 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v82);
    }
    WebKit::RemoteMediaPlayerManager::setUseGPUProcess(*(WebKit::RemoteMediaPlayerManager **)(WebKit::WebProcess::singleton(void)::process + 384), *((unsigned __int8 *)this + 193));
    {
      uint64_t v83 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v83);
    }
    WebKit::RemoteImageDecoderAVFManager::setUseGPUProcess(*(WebKit::RemoteImageDecoderAVFManager **)(WebKit::WebProcess::singleton(void)::process + 392), *((unsigned char *)this + 193));
    {
      uint64_t v84 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v84);
    }
    uint64_t v50 = WebKit::WebProcess::singleton(void)::process;
    *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 761) = *((unsigned char *)this + 191);
    char v51 = *((unsigned char *)this + 192);
    if (v51) {
      char v51 = *((unsigned char *)this + 113) == 0;
    }
    int v52 = *((unsigned __int8 *)this + 193);
    *(unsigned char *)(v50 + 762) = v51;
    WebKit::WebProcess::setUseGPUProcessForMedia((uint64_t *)v50, v52 != 0);
    {
      int v85 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v85);
    }
    unsigned int v54 = (WebKit *)WebKit::WebProcess::singleton(void)::process;
    *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 764) = *((unsigned char *)this + 194);
    int isParentProcessAFullWebBrowser = WebKit::isParentProcessAFullWebBrowser(v54, v53);
    unint64_t v56 = *(void *)(v4 + 704);
    if (isParentProcessAFullWebBrowser)
    {
      uint64_t v57 = *(void *)(v4 + 712);
      uint64_t v59 = *(void *)(v4 + 688);
      uint64_t v58 = *(void *)(v4 + 696);
      uint64_t v61 = *(void *)(v4 + 672);
      uint64_t v60 = *(void *)(v4 + 680);
      uint64_t v62 = *(void *)(v4 + 720) | 0x20000000;
      *uint64_t v10 = *v10;
      *(void *)(v4 + 672) = v61;
      *(void *)(v4 + 680) = v60;
      *(void *)(v4 + 688) = v59;
      *(void *)(v4 + 696) = v58;
      *(void *)(v4 + 704) = v56;
      *(void *)(v4 + 712) = v57;
      *(void *)(v4 + 720) = v62;
    }
    char v63 = (WebCore::DeprecatedGlobalSettings *)WebCore::PlatformMediaSessionManager::setAlternateWebMPlayerEnabled((WebCore::PlatformMediaSessionManager *)(v56 >> 63));
    uint64_t v64 = WebCore::DeprecatedGlobalSettings::shared(v63);
    long long v65 = (WebCore::DeprecatedGlobalSettings *)WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v64 + 30));
    uint64_t v66 = WebCore::DeprecatedGlobalSettings::shared(v65);
    WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v66 + 31));
    {
      WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v68 = (WebCore::PlatformMediaSessionManager *)WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, v67);
    WebCore::PlatformMediaSessionManager::setSWVPDecodersAlwaysEnabled(v68);
    {
      char v86 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v86);
    }
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 619)) {
      break;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_99:
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    *((unsigned char *)v9 + 1048) = 1;
  }
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 618)) {
    WebKit::WebPage::adjustSettingsForLockdownMode((WebKit::WebPage *)v4, a2, v69);
  }
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  *((unsigned char *)this + 2256) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, v69);
  uint64_t v70 = *(void *)(v4 + 672);
  if ((v70 & 0x1000000000000000) != 0)
  {
    uint64_t v72 = *(void *)(v4 + 712);
    uint64_t v71 = *(void *)(v4 + 720);
    uint64_t v74 = *(void *)(v4 + 680);
    uint64_t v73 = *(void *)(v4 + 688);
    uint64_t v75 = *(void *)(v4 + 704) | 0x800;
    uint64_t v76 = *(void *)(v4 + 696) | 0x2000000000000;
    *uint64_t v10 = *v10;
    *(void *)(v4 + 672) = v70;
    *(void *)(v4 + 680) = v74;
    *(void *)(v4 + 688) = v73;
    *(void *)(v4 + 696) = v76;
    *(void *)(v4 + 704) = v75;
    *(void *)(v4 + 712) = v72;
    *(void *)(v4 + 720) = v71;
  }
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 20, buf);
  uint64_t v77 = *((void *)this + 20);
  if (v77)
  {
    uint64_t v79 = *(unsigned int *)(v77 - 4);
    uint64_t v78 = v77 + 8 * v79;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v79 = 0;
  }
  unint64_t v87 = (char *)this + 160;
  uint64_t v88 = v78;
  uint64_t v89 = v78;
  uint64_t v90 = v78;
  uint64_t v91 = v77 + 8 * v79;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v87);
  while (*(void *)&v93[4] != v88)
  {
    WebKit::PluginView::didChangeSettings(*(WebKit::PluginView **)(**(void **)&v93[4] + 8));
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  return WebCore::Page::settingsDidChange(*((WebCore::Page **)this + 6));
}

uint64_t WebKit::valueForKey<unsigned int>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6 = (unsigned int *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if (((unsigned int *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 8)) == v6 || v6[4] != 2)
    && ((uint64_t v6 = (unsigned int *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v7), (unsigned int *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8)) == v6)|| v6[4] != 2)&& ((v8 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)v6), uint64_t v6 = (unsigned int *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a3, v9), (unsigned int *)(*v8 + 24 * *((unsigned int *)v8 + 2)) == v6)|| v6[4] != 2))
  {
    return 0;
  }
  else
  {
    return v6[2];
  }
}

void *WebKit::WebPreferences::setICECandidateFilteringEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferencesStore::setBoolValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, unsigned int a3)
{
  char v3 = a3;
  uint64_t v6 = WebKit::valueForKey<BOOL>((uint64_t)this, (uint64_t)this + 24, a2) ^ a3;
  if (v6 == 1)
  {
    v9[0] = v3;
    int v10 = 1;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)v9, (uint64_t)v8);
    if (v10 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v10])(v8, v9);
    }
  }
  return v6;
}

double WebKit::valueForKey<double>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if (*(void *)a1 + 24 * *(unsigned int *)(a1 + 8) != v6 && *(_DWORD *)(v6 + 16) == 3) {
    return *(double *)(v6 + 8);
  }
  uint64_t v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v7);
  if (*(void *)a2 + 24 * *(unsigned int *)(a2 + 8) != v6 && *(_DWORD *)(v6 + 16) == 3) {
    return *(double *)(v6 + 8);
  }
  uint64_t v8 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)v6);
  uint64_t v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a3, v9);
  double result = 0.0;
  if (*v8 + 24 * *((unsigned int *)v8 + 2) != v6 && *(_DWORD *)(v6 + 16) == 3) {
    return *(double *)(v6 + 8);
  }
  return result;
}

BOOL WebKit::valueForKey<BOOL>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if ((*(void *)a1 + 24 * *(unsigned int *)(a1 + 8) == v6 || *(_DWORD *)(v6 + 16) != 1)
    && ((uint64_t v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v7), *(void *)a2 + 24 * *(unsigned int *)(a2 + 8) == v6)|| *(_DWORD *)(v6 + 16) != 1)&& ((v8 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)v6), uint64_t v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a3, v9), *v8 + 24 * *((unsigned int *)v8 + 2) == v6)|| *(_DWORD *)(v6 + 16) != 1))
  {
    return 0;
  }
  else
  {
    return *(unsigned char *)(v6 + 8) != 0;
  }
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (!*a1) {
    return 24 * v4;
  }
  int v7 = v4 - 1;
  int v8 = *((_DWORD *)a1 + 4);
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
  {
    unsigned int v10 = v9 >> 8;
  }
  else
  {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
    uint64_t v3 = *a1;
  }
  unsigned int v13 = (v10 ^ v8) & v7;
  uint64_t v11 = (WTF **)(v3 + 24 * v13);
  uint64_t v14 = *v11;
  if (*v11)
  {
    int v15 = -1;
    while (1)
    {
      unsigned int v16 = *((_DWORD *)v14 + 4);
      int v17 = v16 >= 0x100 ? v16 >> 8 : WTF::StringImpl::hashSlowCase(v14);
      if (++v15 > ((v13 + v4 - ((v17 ^ v8) & v7)) & v7)) {
        break;
      }
      if (v17 == v10)
      {
        char v18 = WTF::equal(*v11, *a2, a3);
        uint64_t v3 = *a1;
        if (v18) {
          return (uint64_t)v11;
        }
      }
      else
      {
        uint64_t v3 = *a1;
      }
      unsigned int v13 = (v13 + 1) & v7;
      uint64_t v11 = (WTF **)(v3 + 24 * v13);
      uint64_t v14 = *v11;
      if (!*v11) {
        return v3 + 24 * *((unsigned int *)a1 + 2);
      }
    }
    uint64_t v3 = *a1;
  }
  return v3 + 24 * *((unsigned int *)a1 + 2);
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;

  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (!*a1) {
    return 24 * v4;
  }
  int v7 = v4 - 1;
  int v8 = *((_DWORD *)a1 + 4);
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
  {
    unsigned int v10 = v9 >> 8;
  }
  else
  {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
    uint64_t v3 = *a1;
  }
  uint64_t v11 = (v10 ^ v8) & v7;
  uint64_t v12 = (WTF **)(v3 + 24 * v11);
  unsigned int v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = -1;
    while (1)
    {
      int v15 = *((_DWORD *)v13 + 4);
      unsigned int v16 = v15 >= 0x100 ? v15 >> 8 : WTF::StringImpl::hashSlowCase(v13);
      if (++v14 > ((v11 + v4 - ((v16 ^ v8) & v7)) & v7)) {
        break;
      }
      if (v16 == v10)
      {
        int v17 = WTF::equal(*v12, *a2, a3);
        uint64_t v3 = *a1;
        if (v17) {
          return (uint64_t)v12;
        }
      }
      else
      {
        uint64_t v3 = *a1;
      }
      uint64_t v11 = (v11 + 1) & v7;
      uint64_t v12 = (WTF **)(v3 + 24 * v11);
      unsigned int v13 = *v12;
      if (!*v12) {
        return v3 + 24 * *((unsigned int *)a1 + 2);
      }
    }
    uint64_t v3 = *a1;
  }
  return v3 + 24 * *((unsigned int *)a1 + 2);
}

uint64_t WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(WebKit::WebPage *this)
{
  if (WebKit::disableServiceWorkerEntitlementTestingOverride) {
    return 0;
  }
    return WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(void)const::hasEntitlement != 0;
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  char hasEntitlement = WTF::hasEntitlement();
  uint64_t result = 1;
  if ((hasEntitlement & 1) == 0)
  {
    {
      uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v4);
    }
    uint64_t result = WTF::hasEntitlement();
  }
  WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(void)const::char hasEntitlement = result;
  return result;
}

uint64_t WebCore::PlatformStrategies::mediaStrategy(WebCore::PlatformStrategies *this)
{
  uint64_t v2 = (std::once_flag::_State_type *)((char *)this + 24);
  uint64_t v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>);
  }
  return *((void *)this + 4);
}

uint64_t WebKit::WebPage::updatePreferencesGenerated(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(this);
  int BoolValueForKey = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v3, v4);
  uint64_t v6 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setMockScrollbarsEnabled(BoolValueForKey);
  int v7 = WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(v6);
  unsigned int v9 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v7, v8);
  char v10 = (char)v9;
  uint64_t v11 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v9);
  *((unsigned char *)v11 + 18) = v10;
  uint64_t v12 = WebKit::WebPreferencesKey::webMParserEnabledKey(v11);
  uint64_t v14 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v12, v13);
  char v15 = (char)v14;
  unsigned int v16 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v14);
  *((unsigned char *)v16 + 29) = v15;
  int v17 = WebKit::WebPreferencesKey::isAVFoundationEnabledKey(v16);
  uint64_t v19 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v17, v18);
  uint64_t v20 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(v19);
  uint64_t v21 = WebKit::WebPreferencesKey::attachmentElementEnabledKey(v20);
  int v23 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v21, v22);
  char v24 = (char)v23;
  uint64_t v25 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v23);
  *((unsigned char *)v25 + 25) = v24;
  uint64_t v26 = WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(v25);
  unint64_t v28 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v26, v27);
  char v29 = (char)v28;
  int v30 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v28);
  *((unsigned char *)v30 + 33) = v29;
  uint64_t v31 = WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(v30);
  uint64_t v33 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v31, v32);
  char v34 = (char)v33;
  uint64_t v35 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v33);
  *((unsigned char *)v35 + 21) = v34;
  unint64_t v36 = WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(v35);
  uint64_t v38 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v36, v37);
  char v39 = (char)v38;
  unsigned int v40 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v38);
  *((unsigned char *)v40 + 17) = v39;
  unsigned int v41 = WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(v40);
  int v43 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v41, v42);
  double v44 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled(v43);
  uint64_t v45 = WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(v44);
  uint64_t v47 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v45, v46);
  char v48 = (char)v47;
  uint64_t v49 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v47);
  *((unsigned char *)v49 + 22) = v48;
  uint64_t v50 = WebKit::WebPreferencesKey::modelDocumentEnabledKey(v49);
  int v52 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v50, v51);
  char v53 = (char)v52;
  unsigned int v54 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v52);
  *((unsigned char *)v54 + 34) = v53;
  unsigned int v55 = WebKit::WebPreferencesKey::opusDecoderEnabledKey(v54);
  uint64_t v57 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v55, v56);
  uint64_t v58 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setOpusDecoderEnabled(v57);
  uint64_t v59 = WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(v58);
  uint64_t v61 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v59, v60);
  char v62 = (char)v61;
  char v63 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v61);
  *((unsigned char *)v63 + 27) = v62;
  uint64_t v64 = WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(v63);
  uint64_t v66 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v64, v65);
  char v67 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setVorbisDecoderEnabled(v66);
  uint64_t v68 = WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(v67);
  uint64_t v70 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v68, v69);
  LOBYTE(v2) = (_BYTE)v70;
  uint64_t result = WebCore::DeprecatedGlobalSettings::shared(v70);
  *(unsigned char *)(result + 26) = (_BYTE)v2;
  return result;
}

uint64_t *WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::attachmentElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isAVFoundationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::modelDocumentEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::opusDecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webMParserEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key;
}

uint64_t WebKit::updateSharedPreferencesForWebProcess(unsigned char *a1, WebKit::WebPreferencesStore *this, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key, a3)&& !a1[8])
  {
    uint64_t v6 = 1;
    a1[8] = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, v5)&& !a1[9])
  {
    uint64_t v6 = 1;
    a1[9] = 1;
  }
  {
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key, v7)&& !a1[10])
  {
    uint64_t v6 = 1;
    a1[10] = 1;
  }
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, v8)&& !a1[11])
  {
    uint64_t v6 = 1;
    a1[11] = 1;
  }
  {
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key, v9)&& !a1[12])
  {
    uint64_t v6 = 1;
    a1[12] = 1;
  }
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, v10)&& !a1[13])
  {
    uint64_t v6 = 1;
    a1[13] = 1;
  }
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v11)&& !a1[14])
  {
    uint64_t v6 = 1;
    a1[14] = 1;
  }
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, v12)&& !a1[15])
  {
    uint64_t v6 = 1;
    a1[15] = 1;
  }
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, v13)&& !a1[16])
  {
    uint64_t v6 = 1;
    a1[16] = 1;
  }
  {
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key, v14)&& !a1[17])
  {
    uint64_t v6 = 1;
    a1[17] = 1;
  }
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, v15)&& !a1[18])
  {
    uint64_t v6 = 1;
    a1[18] = 1;
  }
  {
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key, v16)&& !a1[19])
  {
    uint64_t v6 = 1;
    a1[19] = 1;
  }
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, v17)&& !a1[20])
  {
    uint64_t v6 = 1;
    a1[20] = 1;
  }
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v18)&& !a1[21])
  {
    uint64_t v6 = 1;
    a1[21] = 1;
  }
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v19)&& !a1[22])
  {
    uint64_t v6 = 1;
    a1[22] = 1;
  }
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, v20)&& !a1[23])
  {
    uint64_t v6 = 1;
    a1[23] = 1;
  }
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v21)&& !a1[24])
  {
    uint64_t v6 = 1;
    a1[24] = 1;
  }
  {
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key, v22)&& !a1[25])
  {
    uint64_t v6 = 1;
    a1[25] = 1;
  }
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, v23)&& !a1[26])
  {
    uint64_t v6 = 1;
    a1[26] = 1;
  }
  {
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key, v24)&& !a1[27])
  {
    uint64_t v6 = 1;
    a1[27] = 1;
  }
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, v25)&& !a1[28])
  {
    uint64_t v6 = 1;
    a1[28] = 1;
  }
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, v26)&& !a1[29])
  {
    uint64_t v6 = 1;
    a1[29] = 1;
  }
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v27)&& !a1[30])
  {
    uint64_t v6 = 1;
    a1[30] = 1;
  }
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, v28)&& !a1[31])
  {
    uint64_t v6 = 1;
    a1[31] = 1;
  }
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, v29)&& !a1[32])
  {
    uint64_t v6 = 1;
    a1[32] = 1;
  }
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, v30)&& !a1[33])
  {
    uint64_t v6 = 1;
    a1[33] = 1;
  }
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, v31)&& !a1[34])
  {
    uint64_t v6 = 1;
    a1[34] = 1;
  }
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, v32)&& !a1[35])
  {
    uint64_t v6 = 1;
    a1[35] = 1;
  }
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, v33)&& !a1[36])
  {
    uint64_t v6 = 1;
    a1[36] = 1;
  }
  {
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key, v34)&& !a1[37])
  {
    uint64_t v6 = 1;
    a1[37] = 1;
  }
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, v35)&& !a1[38])
  {
    uint64_t v6 = 1;
    a1[38] = 1;
  }
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, v36)&& !a1[39])
  {
    uint64_t v6 = 1;
    a1[39] = 1;
  }
  return v6;
}

uint64_t WebKit::WebPreferencesStore::getBoolValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  {
    WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
  }
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&WebKit::BOOLTestRunnerOverridesMap(void)::map, a2, a3);
  {
    uint64_t v6 = WebKit::BOOLTestRunnerOverridesMap(void)::map;
    if (WebKit::BOOLTestRunnerOverridesMap(void)::map) {
      uint64_t v6 = WebKit::BOOLTestRunnerOverridesMap(void)::map
    }
         + 16 * *(unsigned int *)(WebKit::BOOLTestRunnerOverridesMap(void)::map - 4);
  }
  else
  {
    uint64_t v6 = 0;
    WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
  }
  if ((WTF *)v6 != v5) {
    return *((unsigned __int8 *)v5 + 8);
  }

  return WebKit::valueForKey<BOOL>((uint64_t)this, (uint64_t)this + 24, a2);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  uint64_t v5 = *a1;
  if (!result)
  {
    if (v5) {
      return (WTF *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

void WebKit::RemoteImageDecoderAVFManager::setUseGPUProcess(WebKit::RemoteImageDecoderAVFManager *this, char a2)
{
  if (a2)
  {
    WebCore::ImageDecoder::clearFactories(this);
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = &unk_1EE9EF7D8;
    v4[1] = WebKit::RemoteImageDecoderAVF::supportsMediaType;
    v7[0] = v4;
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9EF800;
    v5[1] = WebKit::RemoteImageDecoderAVF::canDecodeType;
    v7[1] = v5;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9EF828;
    v6[1] = this;
    v7[2] = v6;
    WebCore::ImageDecoder::installFactory();
    WebCore::ImageDecoder::ImageDecoderFactory::~ImageDecoderFactory((WebCore::ImageDecoder::ImageDecoderFactory *)v7);
  }
  else
  {
    MEMORY[0x1F416CED0](this);
  }
}

void WebCore::ImageDecoder::ImageDecoderFactory::~ImageDecoderFactory(WebCore::ImageDecoder::ImageDecoderFactory *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

uint64_t WebKit::RemoteMediaPlayerManager::setUseGPUProcess(WebKit::RemoteMediaPlayerManager *this, int a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v3 = &unk_1EE9ED940;
    v3[1] = this;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v6 = (uint64_t)v3;
  WebCore::RemoteMediaPlayerSupport::setRegisterRemotePlayerCallback();
  uint64_t result = v6;
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (a2)
  {
    WebCore::SampleBufferDisplayLayer::setCreator();
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setNativeImageCreator();
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2622;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::encode(v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::BrowsingContextGroup::ensureProcessForSite@<X0>(WebKit::BrowsingContextGroup *this@<X0>, const WebKit::Site *a2@<X1>, atomic_uint *a3@<X2>, const WebKit::WebPreferences *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *((void *)a2 + 1);
  if (!v10 || !*(_DWORD *)(v10 + 4) || (MEMORY[0x19972E990]() & 1) != 0) {
    goto LABEL_10;
  }
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v11)&& (uint64_t result = WebKit::BrowsingContextGroup::processForSite(this, (const WTF::StringImpl **)a2)) != 0&& *(void *)(*(void *)(result + 16) + 176) == *((void *)a3 + 22))
  {
    ++*(_DWORD *)result;
  }
  else
  {
LABEL_10:
    unsigned int v13 = (WebKit::FrameProcess *)WTF::fastMalloc((WTF *)0x30);
    uint64_t result = (uint64_t)WebKit::FrameProcess::FrameProcess(v13, a3, this, a2, a4);
  }
  *a5 = result;
  return result;
}

void WebKit::WebProcessProxy::addVisitedLinkStoreUser(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 78;
  unsigned int v7 = *((_DWORD *)a1 + 158);
  *((_DWORD *)a1 + 158) = v7 + 1;
  if (v7 > *((_DWORD *)a1 + 159)) {
    WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(a1 + 78), a2);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 6, (uint64_t)(a2 + 4));
  unsigned int v9 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v9, 1u);
  atomic_fetch_add(v9, 1u);
  uint64_t v50 = (WTF *)v9;
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  uint64_t v10 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, 0), (uint64_t v10 = *v6) != 0))
  {
    int v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    int v11 = 0;
  }
  unsigned int v13 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(&v50);
  uint64_t v14 = 0;
  int v15 = 1;
  uint64_t v16 = (unsigned int *)v50;
  while (1)
  {
    unsigned int v17 = v13 & v11;
    uint64_t v18 = v10 + 16 * v17;
    uint64_t v19 = *(unsigned int **)v18;
    if (*(void *)v18 != -1) {
      break;
    }
    uint64_t v14 = (void *)(v10 + 16 * v17);
LABEL_15:
    unsigned int v13 = v15 + v17;
    ++v15;
  }
  if (!v19)
  {
    if (v14)
    {
      *uint64_t v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v18 = (uint64_t)v14;
    }
    uint64_t v50 = 0;
    uint64_t v20 = *(unsigned int **)v18;
    *(void *)uint64_t v18 = v16;
    if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v12);
    }
    uint64_t v21 = *(void *)(v18 + 8);
    *(void *)(v18 + 8) = 0;
    if (v21) {
      WTF::fastFree((WTF *)(v21 - 16), v12);
    }
    uint64_t v22 = *v6;
    if (*v6) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v26 = *v6;
    if (*v6) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
      {
LABEL_31:
        uint64_t v18 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, (unsigned int **)v18);
        uint64_t v26 = *v6;
        if (*v6) {
          unint64_t v29 = *(unsigned int *)(v26 - 4);
        }
        else {
          unint64_t v29 = 0;
        }
      }
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_31;
    }
    uint64_t v30 = v26 + 16 * v29;
    uint64_t v16 = (unsigned int *)v50;
    goto LABEL_38;
  }
  if (v19 != (unsigned int *)v50) {
    goto LABEL_15;
  }
  uint64_t v24 = *v6;
  if (*v6) {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v30 = v24 + 16 * v25;
LABEL_38:
  uint64_t v50 = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v12);
  }
  uint64_t v50 = (WTF *)v6;
  uint64_t v51 = v18;
  uint64_t v52 = v30;
  uint64_t v31 = *v6;
  if (*v6)
  {
    uint64_t v32 = *(unsigned int *)(v31 - 4);
    uint64_t v33 = v31 + 16 * v32;
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v32 = 0;
  }
  uint64_t v53 = v33;
  uint64_t v54 = v31 + 16 * v32;
  int v55 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v50);
  uint64_t v35 = (uint64_t *)(v51 + 8);
  uint64_t v34 = *(void *)(v51 + 8);
  if (v34
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v51 + 8), 0), (uint64_t v34 = *v35) != 0))
  {
    int v36 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    int v36 = 0;
  }
  unint64_t v37 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
  unint64_t v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
  unsigned int v40 = v36 & ((v39 >> 31) ^ v39);
  unsigned int v41 = (uint64_t *)(v34 + 8 * v40);
  uint64_t v42 = *v41;
  if (*v41)
  {
    int v43 = 0;
    int v44 = 1;
    while (v42 != a3)
    {
      if (v42 == -1) {
        int v43 = v41;
      }
      unsigned int v40 = (v40 + v44) & v36;
      unsigned int v41 = (uint64_t *)(v34 + 8 * v40);
      uint64_t v42 = *v41;
      ++v44;
      if (!*v41)
      {
        if (v43)
        {
          *int v43 = 0;
          --*(_DWORD *)(*v35 - 16);
          unsigned int v41 = v43;
        }
        goto LABEL_53;
      }
    }
LABEL_62:
    if (*(_DWORD *)(v34 - 12) == 1) {
      WebKit::VisitedLinkStore::addProcess((WebKit::VisitedLinkStore *)a2, (WebKit::WebProcessProxy *)a1);
    }
  }
  else
  {
LABEL_53:
    *unsigned int v41 = a3;
    uint64_t v45 = *v35;
    if (*v35) {
      int v46 = *(_DWORD *)(v45 - 12) + 1;
    }
    else {
      int v46 = 1;
    }
    *(_DWORD *)(v45 - 12) = v46;
    uint64_t v34 = *v35;
    if (*v35) {
      int v47 = *(_DWORD *)(v34 - 12);
    }
    else {
      int v47 = 0;
    }
    uint64_t v48 = (*(_DWORD *)(v34 - 16) + v47);
    unint64_t v49 = *(unsigned int *)(v34 - 4);
    if (v49 > 0x400)
    {
      if (v49 > 2 * v48) {
        goto LABEL_62;
      }
    }
    else if (3 * v49 > 4 * v48)
    {
      goto LABEL_62;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v35, v41);
    uint64_t v34 = *v35;
    if (*v35) {
      goto LABEL_62;
    }
  }
}

void WebKit::VisitedLinkStore::addProcess(WebKit::VisitedLinkStore *this, WebKit::WebProcessProxy *a2)
{
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)this + 48, (unsigned int *)a2, (uint64_t)v5);
  if (v6)
  {
    uint64_t v4 = *((void *)this + 4);
    v7[0] = 156;
    v7[1] = v4;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)a2 + 20, (unsigned __int8 *)v7, (uint64_t)this + 16, v5);
    if (*((_DWORD *)this + 18)) {
      WebKit::VisitedLinkStore::sendStoreHandleToProcess(this, a2);
    }
  }
}

unsigned int *WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  uint64_t v20 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  int v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  int v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

void WebKit::PageClientImpl::createDrawingAreaProxy(id *this@<X0>, WebKit::WebProcessProxy *a2@<X1>, void *a3@<X8>)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  if (WeakRetained)
  {
    unsigned int v6 = WeakRetained;
    [WeakRetained _createDrawingAreaProxy:a2];
    CFRelease(v6);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_198608B50(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebFrameProxy::WebFrameProxy(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)&long long v30 = a4;
  *((void *)&v30 + 1) = a5;
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9D8C68;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  int v10 = *(atomic_uint **)(a2 + 24);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *(void *)(a1 + 24) = v10;
  ++*a3;
  *(void *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 40) = 2;
  *(void *)(a1 + 48) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 48));
  *(void *)(a1 + 88) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 88));
  *(void *)(a1 + 128) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 128));
  *(void *)(a1 + 168) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 168));
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = v30;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 336));
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(unsigned char *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 441) = a6;
  *(unsigned char *)(a1 + 444) = 0;
  *(unsigned char *)(a1 + 452) = 0;
  {
    uint64_t v11 = WebKit::allFrames(void)::map;
    if (WebKit::allFrames(void)::map)
    {
LABEL_6:
      int v12 = *(_DWORD *)(v11 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    WebKit::allFrames(void)::map = 0;
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand();
  uint64_t v11 = WebKit::allFrames(void)::map;
  if (WebKit::allFrames(void)::map) {
    goto LABEL_6;
  }
  int v12 = 0;
LABEL_7:
  unsigned int v31 = -1640531527;
  __int16 v32 = 0;
  char v33 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v31, &v30);
  unsigned int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31) & v12;
  uint64_t v14 = (unint64_t *)(v11 + 24 * v13);
  unint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  if (*(_OWORD *)v14 == 0)
  {
LABEL_15:
    *(_OWORD *)uint64_t v14 = v30;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
    uint64_t v20 = *(atomic_uint **)(a1 + 16);
    atomic_fetch_add(v20, 1u);
    uint64_t v21 = (unsigned int *)v14[2];
    v14[2] = (unint64_t)v20;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v19);
    }
    if (WebKit::allFrames(void)::map) {
      int v22 = *(_DWORD *)(WebKit::allFrames(void)::map - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(WebKit::allFrames(void)::map - 12) = v22;
    if (WebKit::allFrames(void)::map) {
      int v23 = *(_DWORD *)(WebKit::allFrames(void)::map - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(WebKit::allFrames(void)::map - 16) + v23);
    unint64_t v25 = *(unsigned int *)(WebKit::allFrames(void)::map - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_26;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_26;
    }
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand();
    goto LABEL_26;
  }
  unsigned int v17 = 0;
  int v18 = 1;
  while (__PAIR128__(v15, v16) != v30)
  {
    if (v15 == -1) {
      unsigned int v17 = v14;
    }
    unsigned int v13 = (v13 + v18) & v12;
    uint64_t v14 = (unint64_t *)(v11 + 24 * v13);
    unint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    ++v18;
    if (*(_OWORD *)v14 == 0)
    {
      if (v17)
      {
        v17[1] = 0;
        v17[2] = 0;
        *unsigned int v17 = 0;
        --*(_DWORD *)(WebKit::allFrames(void)::map - 16);
        uint64_t v14 = v17;
      }
      goto LABEL_15;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
  int v27 = *(atomic_uint **)(a1 + 16);
  atomic_fetch_add(v27, 1u);
  uint64_t v28 = (unsigned int *)v14[2];
  v14[2] = (unint64_t)v27;
  if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v28);
    WTF::fastFree((WTF *)v28, v26);
  }
LABEL_26:
  ++dword_1EB35A740;
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      unint64_t v15 = (unsigned int **)(v6 + 16 * v13);
      unint64_t v16 = *v15;
      if (*v15 != (unsigned int *)-1)
      {
        if (v16)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v20 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((void *)(v6 + 16 * v13));
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            int v20 = ++v21 + v22;
          }
          while (*(void *)(v18 + 16 * v22));
          uint64_t v23 = v18 + 16 * v22;
          unint64_t v25 = (void *)(v23 + 8);
          uint64_t v24 = *(void *)(v23 + 8);
          if (v24)
          {
            WTF::fastFree((WTF *)(v24 - 16), v10);
            uint64_t v26 = *(unsigned int **)v23;
            *(void *)uint64_t v23 = 0;
            if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
          }
          int v27 = *v15;
          *unint64_t v15 = 0;
          *(void *)uint64_t v23 = v27;
          uint64_t v28 = v6 + 16 * v13;
          *unint64_t v25 = 0;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          *unint64_t v25 = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          if (v30) {
            WTF::fastFree((WTF *)(v30 - 16), v10);
          }
          unsigned int v31 = *v15;
          *unint64_t v15 = 0;
          if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v10);
          }
          if (v15 == a3) {
            uint64_t v14 = v23;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(v6 + 16 * v13 + 8);
          if (v17)
          {
            WTF::fastFree((WTF *)(v17 - 16), v10);
            unint64_t v16 = *v15;
          }
          *unint64_t v15 = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::allFrames(void)::map;
  if (WebKit::allFrames(void)::map)
  {
    unsigned int v3 = *(_DWORD *)(WebKit::allFrames(void)::map - 4);
    int v4 = *(_DWORD *)(WebKit::allFrames(void)::map - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * a1 + 16));
  WebKit::allFrames(void)::map = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(WebKit::allFrames(void)::map - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
    while (1)
    {
      uint64_t v9 = v2 + 24 * v7;
      if (*(void *)(v9 + 8) != -1)
      {
        if (*(_OWORD *)v9 == 0)
        {
          uint64_t v12 = v2 + 24 * v7;
          uint64_t v13 = *(atomic_uint **)(v12 + 16);
          *(void *)(v12 + 16) = 0;
          if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = WebKit::allFrames(void)::map;
          if (WebKit::allFrames(void)::map) {
            unsigned int v11 = *(_DWORD *)(WebKit::allFrames(void)::map - 8);
          }
          else {
            unsigned int v11 = 0;
          }
          unsigned int v24 = -1640531527;
          __int16 v25 = 0;
          char v26 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v24, (void *)(v2 + 24 * v7));
          int v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v24);
          int v15 = 0;
          do
          {
            unsigned int v16 = v14 & v11;
            uint64_t v17 = (_OWORD *)(v10 + 24 * (v14 & v11));
            int v14 = ++v15 + (v14 & v11);
          }
          while (*v17 != 0);
          uint64_t v18 = v10 + 24 * v16;
          int v21 = *(unsigned int **)(v18 + 16);
          int v20 = (void *)(v18 + 16);
          unsigned int v19 = v21;
          *int v20 = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v19);
            WTF::fastFree((WTF *)v19, v6);
          }
          *uint64_t v17 = *(_OWORD *)v9;
          uint64_t v22 = v2 + 24 * v7;
          uint64_t v23 = *(void *)(v22 + 16);
          *(void *)(v22 + 16) = 0;
          *int v20 = v23;
          uint64_t v13 = *(atomic_uint **)(v22 + 16);
          *(void *)(v22 + 16) = 0;
          if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        atomic_store(1u, (unsigned int *)v13);
        WTF::fastFree((WTF *)v13, v6);
      }
LABEL_18:
      if (++v7 == v8) {
        goto LABEL_25;
      }
    }
  }
  if (v2)
  {
LABEL_25:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand()
{
  if (WebKit::allFrames(void)::map && (int v0 = *(_DWORD *)(WebKit::allFrames(void)::map - 4)) != 0) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::allFrames(void)::map - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(8u);
  }
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (WebKit::LayerProperties **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WebKit::LayerProperties *)-1) {
        std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100](v4, 0);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::LayerProperties *std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100](WebKit::LayerProperties **a1, WebKit::LayerProperties *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LayerProperties::~LayerProperties(result);
    return (WebKit::LayerProperties *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
}

uint64_t WebCore::ScrollingTreeNode::isRootOfHostedSubtree(WebCore::ScrollingTreeNode *this)
{
  return 0;
}

float WebKit::PlatformCALayerRemote::contentsScale(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 153);
}

uint64_t WebCore::ChromeClient::fetchCustomFixedPositionLayoutRect(WebCore::ChromeClient *this, IntRect *a2)
{
  return 0;
}

void WebKit::PlatformCALayerRemote::setAcceleratesDrawing(WebKit::PlatformCALayerRemote *this, char a2)
{
  *((unsigned char *)this + 824) = a2;
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_E3__1vJEE4callEv(uint64_t a1)
{
  WTF::initializeMainThread((WTF *)a1);
  _CFPrefsSetDirectModeEnabled();
  _CFPrefsSetReadOnly();
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(a1 + 24), *(void *)(a1 + 16));
  if (_MergedGlobals_63)
  {
    if (HIDWORD(qword_1EB3592E0))
    {
      return WTF::overrideUserPreferredLanguages();
    }
  }
  else
  {
    qword_1EB3592D8 = 0;
    qword_1EB3592E0 = 0;
    _MergedGlobals_63 = 1;
  }
  return result;
}

id *WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::repositionScrollingLayers(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  uint64_t result = (id *)*((void *)this + 12);
  if (result) {
    return (id *)WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(result);
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c574_ZTSKZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS4_33SupportsObjectIdentifierNullStateE1EEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISO_EEEENS4_11DefaultHashISM_EENS4_10HashTraitsISM_EENSU_ISR_EENS4_15HashTableTraitsEEEE3__0(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
}

void WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(xdict, "message-name", "update-launch-services-database-message");
    xpc_dictionary_set_value(xdict, "launch-services-database", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), xdict);
    if (xdict)
    {
    }
  }
}

void sub_1986095AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t Inspector::RemoteInspectionTarget::automaticInspectionAllowed(Inspector::RemoteInspectionTarget *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::invalidatingImagesWithAsyncDecodes(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::DisplayList::Recorder::hasPlatformContext(WebCore::DisplayList::Recorder *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::customSublayers(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

uint64_t WebKit::WebPageDebuggable::nameOverride(WebKit::WebPageDebuggable *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setNeedsDisplay(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return MEMORY[0x1F416DE60](*((void *)this + 105));
}

CGAffineTransform *WebKit::PlatformCALayerRemote::enumerateRectsBeingDrawn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteLayerBackingStore::enumerateRectsBeingDrawn(*(void *)(a1 + 472), a2, a3);
}

IPC::Encoder **WTF::Detail::CallableWrapper<WebKit::WebPage::updateThrottleState(void)::$_0,void>::call(uint64_t a1)
{
  {
    byte_1EB35A9A0 = 0;
    WebKit::WebServiceWorkerProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F4AB8;
  }
  return WebKit::WebServiceWorkerProvider::updateThrottleState((WebKit::WebServiceWorkerProvider *)&WebKit::WebServiceWorkerProvider::singleton(void)::provider, *(unsigned __int8 *)(a1 + 8));
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<IPC::Connection::SyncMessageState::processIncomingMessage(IPC::Connection&,WTF::UniqueRef<IPC::Decoder> &)::$_0,void>::call(atomic_uchar *volatile **result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *((void *)v1 + 2);
  if (!v2) {
    return result;
  }
  char v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 3), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v2 + 3);
  }
  unsigned int v5 = (uint64_t *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    unsigned int v6 = *(_DWORD *)(v4 - 8);
    unint64_t v7 = ((unint64_t)v1 + ~((void)v1 << 32)) ^ (((unint64_t)v1 + ~((void)v1 << 32)) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
    unsigned int v11 = *(atomic_uchar *volatile **)(v4 + 8 * v10);
    if (v11 != v1)
    {
      int v44 = 1;
      while (v11)
      {
        uint64_t v10 = (v10 + v44) & v6;
        unsigned int v11 = *(atomic_uchar *volatile **)(v4 + 8 * v10);
        ++v44;
        if (v11 == v1) {
          goto LABEL_6;
        }
      }
      uint64_t v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_6:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      uint64_t v12 = *(atomic_uchar *volatile **)(v4 + 8 * v10);
      *(void *)(v4 + 8 * v10) = -1;
      if (v12)
      {
        char v13 = 0;
        atomic_uchar *volatile v14 = *v12;
        atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
        if (v13) {
          MEMORY[0x19972E8D0](v14);
        }
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t v16 = v15 - 1;
        *((void *)v14 + 1) = v15 - 1;
        if (v15 == 1)
        {
          uint64_t v47 = *((void *)v14 + 2);
          uint64_t v18 = *((void *)v14 + 3);
          *((void *)v14 + 3) = 0;
          BOOL v17 = v47 == 0;
        }
        else
        {
          BOOL v17 = 0;
          uint64_t v18 = 0;
        }
        int v19 = 1;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
        if (v19 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v14);
        }
        if (!v16)
        {
          uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v20 = &unk_1EE9B37E8;
          *(void *)(v20 + 8) = v14;
          *(void *)(v20 + 16) = v18;
          *(unsigned char *)(v20 + 24) = v17;
          v49[0] = (IPC::Decoder *)v20;
          WTF::ensureOnMainRunLoop();
          int v21 = v49[0];
          v49[0] = 0;
          if (v21) {
            (*(void (**)(IPC::Decoder *))(*(void *)v21 + 8))(v21);
          }
        }
      }
      ++*(_DWORD *)(*v5 - 16);
      uint64_t v22 = *v5;
      if (*v5) {
        int v23 = *(_DWORD *)(v22 - 12) - 1;
      }
      else {
        int v23 = -1;
      }
      *(_DWORD *)(v22 - 12) = v23;
      uint64_t v24 = *v5;
      if (*v5)
      {
        unsigned int v25 = 6 * *(_DWORD *)(v24 - 12);
        unsigned int v26 = *(_DWORD *)(v24 - 4);
        if (v25 < v26 && v26 >= 9) {
          WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::rehash((uint64_t *)(v2 + 8), v26 >> 1);
        }
      }
    }
  }
  *(_OWORD *)unint64_t v49 = 0u;
  long long v50 = 0u;
  unint64_t v29 = *(void *)(v2 + 48);
  uint64_t v28 = *(void *)(v2 + 56);
  if (v29 == v28)
  {
    *(void *)(v2 + 48) = 0;
    *(void *)(v2 + 56) = 0;
    uint64_t v30 = *(atomic_uchar *volatile ***)(v2 + 64);
    *(void *)(v2 + 64) = 0;
    unint64_t v31 = v29;
    *(_DWORD *)(v2 + 72) = 0;
  }
  else
  {
    do
    {
      __int16 v32 = (atomic_uchar *volatile *)(*(void *)(v2 + 64) + 24 * v29);
      if (*(atomic_uchar *volatile **)v32 == v1) {
        char v33 = (IPC::Decoder **)(v2 + 16);
      }
      else {
        char v33 = v49;
      }
      WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((atomic_uchar *volatile **)v33, v32);
      unint64_t v34 = *(unsigned int *)(v2 + 72);
      v29 += v34 + 1;
      do
        v29 -= v34;
      while (v29 >= v34);
    }
    while (v28 != v29);
    unint64_t v29 = *(void *)(v2 + 48);
    unint64_t v31 = *(void *)(v2 + 56);
    uint64_t v35 = v50;
    int v36 = DWORD2(v50);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)v49;
    uint64_t v30 = *(atomic_uchar *volatile ***)(v2 + 64);
    *(void *)(v2 + 64) = v35;
    *(_DWORD *)(v2 + 72) = v36;
    if (v29 > v31)
    {
      unsigned int v48 = v34;
      WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v30, &v30[3 * v31]);
      unint64_t v37 = &v30[3 * v29];
      unint64_t v38 = &v30[3 * v48];
      goto LABEL_35;
    }
  }
  unint64_t v37 = &v30[3 * v29];
  unint64_t v38 = &v30[3 * v31];
LABEL_35:
  uint64_t result = WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v37, v38);
  if (v30) {
    uint64_t result = (atomic_uchar *volatile **)WTF::fastFree((WTF *)v30, v39);
  }
  int v40 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 3), (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
  if (v40 != 1) {
    uint64_t result = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 3));
  }
  uint64_t v41 = *(void *)(v2 + 16);
  for (uint64_t i = *(void *)(v2 + 24); v41 != i; uint64_t i = *(void *)(v2 + 24))
  {
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::takeFirst((uint64_t)v49, v2 + 16);
    IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch((uint64_t **)v49);
    int v43 = v49[1];
    v49[1] = 0;
    if (v43)
    {
      IPC::Decoder::~Decoder(v43);
      WTF::fastFree(v45, v46);
    }
    uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v49);
    uint64_t v41 = *(void *)(v2 + 16);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned long long>>(IPC::Decoder *a1)
{
  unint64_t v2 = IPC::ArgumentCoder<std::tuple<double>,void>::decode<IPC::Decoder>(a1);
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

unint64_t IPC::Decoder::decode<std::tuple<double>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<double>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<double>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = (uint64_t *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v6 = *v5;
      unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFF00;
      uint64_t v8 = v6;
      return v7 | v8;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      atomic_uchar *volatile v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  uint64_t v8 = 0;
  unint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13)
  {
    if (v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
    }
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  return v7 | v8;
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = (uint64_t *)(a1 + 16);
  if (v2) {
    return (uint64_t *)WTF::CompletionHandler<void ()(void)>::operator()(result);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::allowsBackingStoreDetaching(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this + 890) >> 2) & 1;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_0,void,BOOL>::call(IPC::Encoder *result, char a2)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  if (v3)
  {
    uint64_t v5 = *(uint64_t **)(v2 + 72);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(void *)(*v5 + 136);
      if (v8 && *(unsigned char *)(v8 + 104) || *(void *)(v7 + 144))
      {
        char v14 = a2;
        unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v9 = 2647;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 66) = (char *)v9 + 16;
        *((void *)v9 + 67) = 512;
        *((void *)v9 + 68) = 0;
        *((void *)v9 + 70) = 0;
        *((void *)v9 + 69) = 0;
        IPC::Encoder::encodeHeader(v9);
        BOOL v17 = v9;
        IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v9, &v14);
        LOBYTE(v15) = 0;
        char v16 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v17, 0, (uint64_t)&v15, 1);
        if (v16)
        {
          uint64_t v11 = v15;
          uint64_t v15 = 0;
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
        }
        unint64_t result = v17;
        BOOL v17 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          unint64_t result = (IPC::Encoder *)WTF::fastFree(v12, v13);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_198609D60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::accessibilityWebProcessTokenReceived(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
  [WeakRetained _setAccessibilityWebProcessToken:v6];
  if (v6) {
    CFRelease(v6);
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198609E58(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GPUProcess::resolveBookmarkDataForCacheDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
  char v5 = 0;
  uint64_t v4 = 0;
  [MEMORY[0x1E4F1CB10] URLByResolvingBookmarkData:v3 options:256 relativeToURL:0 bookmarkDataIsStale:&v5 error:&v4];
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198609F00(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::registerUIProcessAccessibilityTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 264);
  uint64_t v4 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
  [v3 setRemoteTokenData:v4];
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198609F98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::registerUIProcessAccessibilityTokens(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v5 = *(void *)(result + 256);
      v6[0] = (const void **)v8;
      v6[1] = (const void **)v7;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterUIProcessAccessibilityTokens>(v5, v6, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterUIProcessAccessibilityTokens>(uint64_t a1, const void ***a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2348;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **a2, (size_t)(*a2)[1]);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, *a2[1], (size_t)a2[1][1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_19860A214(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<IPC::WorkQueueMessageReceiverQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EEA10048;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v4);
}

{
  uint64_t v3;

  *(void *)a1 = &unk_1EEA10048;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::FunctionDispatcherQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10098;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

{
  *(void *)a1 = &unk_1EEA10098;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::SyncMessageState::processIncomingMessage(IPC::Connection&,WTF::UniqueRef<IPC::Decoder> &)::$_0,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchIncomingMessages(void)::$_0,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA102C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_1,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageImpl(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_2,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF *___ZN3IPC10Connection12platformOpenEv_block_invoke()
{
  mach_msg_return_t v3;
  void *v4;
  mach_msg_header_t *v5;
  mach_msg_id_t msgh_id;
  uint64_t v8;
  unint64_t msgh_size;
  uint64_t *v10;
  uint64_t msgh_bits;
  unint64_t v12;
  mach_msg_size_t *p_msgh_size;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Decoder *v22;
  IPC::Decoder *v23;
  IPC::Decoder *v24;
  WTF *result;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  NSObject *v34;
  unsigned int v35;
  char *v36;
  int v37;
  NSObject *v38;
  NSObject *v39;
  IPC::Decoder *v40;
  mach_msg_header_t *msg;
  mach_msg_size_t rcv_size[2];
  mach_msg_header_t v43[173];
  unsigned char v44[4];
  void *v45;
  int v46;
  unsigned int v47;
  unsigned char buf[22];
  __int16 v49;
  int v50;
  uint64_t v51;

  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 32);
  msg = v43;
  mach_port_name_t v2 = *(_DWORD *)(v1 + 328);
  *(int32x2_t *)rcv_size = vdup_n_s32(0x1044u);
  uint64_t v3 = mach_msg(v43, 2310, 0, 0x1044u, v2, 0, 0);
  if (v3 == 268451843) {
    goto LABEL_40;
  }
  if (v3 == 268451844)
  {
    WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)&msg, v43[0].msgh_size + 68);
    uint64_t v5 = msg;
    uint64_t v3 = mach_msg(msg, 2310, 0, rcv_size[1], v2, 0, 0);
  }
  else
  {
    uint64_t v5 = v43;
  }
  if (!v5 || v3) {
    goto LABEL_40;
  }
  msgh_id = v5->msgh_id;
  if (msgh_id != 230297018 && msgh_id != 230301114)
  {
    if (msgh_id == 70) {
      IPC::Connection::connectionDidClose((IPC::Connection *)v1);
    }
    goto LABEL_40;
  }
  uint64_t v8 = rcv_size[1];
  msgh_size = v5->msgh_size;
  if (msgh_size > rcv_size[1])
  {
    uint64_t v30 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = msgh_size;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v8;
    unint64_t v31 = "createMessageDecoder: msgh_size is greater than bufferSize (header->msgh_size: %lu, bufferSize: %lu)";
LABEL_44:
    __int16 v32 = v30;
    char v33 = 22;
LABEL_53:
    _os_log_fault_impl(&dword_1985F2000, v32, OS_LOG_TYPE_FAULT, v31, buf, v33);
    goto LABEL_40;
  }
  if ((v5->msgh_bits & 0x80000000) == 0)
  {
    if (msgh_size >= 0x18)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      IPC::Decoder::create((WTF *)(msgh_size - 24), &v5[1], (uint64_t *)buf, &v40);
      uint64_t v10 = (uint64_t *)buf;
      goto LABEL_31;
    }
    uint64_t v30 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = msgh_size;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 24;
    unint64_t v31 = "createMessageDecoder: Overflow when computing bodySize (header->msgh_size: %lu, sizeof(mach_msg_header_t): %lu)";
    goto LABEL_44;
  }
  msgh_bits = v5[1].msgh_bits;
  if (!msgh_bits) {
    goto LABEL_40;
  }
  uint64_t v12 = 12 * msgh_bits + 28;
  if (v12 > rcv_size[1])
  {
    unint64_t v38 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = msgh_bits;
    unint64_t v31 = "createMessageDecoder: Overflow when computing sizeWithPortDescriptors (numberOfPortDescriptors: %lu)";
    __int16 v32 = v38;
    char v33 = 12;
    goto LABEL_53;
  }
  p_msgh_size = &v5[1].msgh_size;
  uint64_t v45 = 0;
  int v46 = 0;
  char v14 = msgh_bits - (msgh_id == 230301114);
  uint64_t v47 = v14;
  if (v14)
  {
    if (v14 >> 30)
    {
LABEL_70:
      __break(0xC471u);
      JUMPOUT(0x19860ACF8);
    }
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
    int v46 = v14;
    uint64_t v45 = v15;
    if (v47) {
      bzero(v15, 4 * v47);
    }
    while (!*((unsigned char *)p_msgh_size + 11))
    {
      WTF::MachSendRight::adopt((WTF::MachSendRight *)*p_msgh_size);
      WTF::MachSendRight::MachSendRight();
      if (v47 <= (int)v14 - 1) {
        goto LABEL_70;
      }
      WTF::MachSendRight::operator=();
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v44);
      p_msgh_size += 3;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
      if (!--v14) {
        goto LABEL_24;
      }
    }
    goto LABEL_67;
  }
LABEL_24:
  if (msgh_id == 230301114)
  {
    char v17 = p_msgh_size[2];
    if (HIBYTE(v17) == 1)
    {
      uint64_t v18 = *(void *)p_msgh_size;
      int v19 = p_msgh_size[3];
      p_msgh_size[2] = v17 & 0xFFFFFF00;
      uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v20 = &unk_1EEA0FEA8;
      *(void *)buf = v20;
      IPC::Decoder::create(v18, v19, (uint64_t *)buf, (uint64_t *)&v45, &v40);
      int v21 = *(void *)buf;
      *(void *)buf = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      goto LABEL_30;
    }
    goto LABEL_67;
  }
  uint64_t v16 = v5->msgh_size;
  if (v16 < v12)
  {
    unint64_t v39 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_fault_impl(&dword_1985F2000, v39, OS_LOG_TYPE_FAULT, "createMessageDecoder: Overflow when computing bodySize (header->msgh_size: %lu, sizeWithPortDescriptors: %lu)", buf, 0x16u);
    }
LABEL_67:
    int v40 = 0;
    goto LABEL_30;
  }
  IPC::Decoder::create((WTF *)(v16 - v12), p_msgh_size, (uint64_t *)&v45, &v40);
LABEL_30:
  uint64_t v10 = (uint64_t *)&v45;
LABEL_31:
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v4);
  if (!v40) {
    goto LABEL_40;
  }
  if (*((_WORD *)v40 + 25) != 2868)
  {
    if (qword_1EB35A440 != -1) {
      dispatch_once(&qword_1EB35A440, &__block_literal_global_45);
    }
    if (byte_1EB35A40A)
    {
      unint64_t v34 = qword_1EB3588C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3588C0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = *((unsigned __int16 *)v40 + 25);
        if (v35 >= 0xEF4) {
          uint64_t v35 = 3828;
        }
        int v36 = (&IPC::Detail::messageDescriptions)[3 * v35];
        unint64_t v37 = *(_DWORD *)(v1 + 328);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v1;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v36;
        unint64_t v49 = 1024;
        long long v50 = v37;
        _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "Connection::processIncomingMessage(%p) received %{public}s from port 0x%08x", buf, 0x1Cu);
      }
    }
    uint64_t v22 = v40;
    int v40 = 0;
    *(void *)buf = v22;
    IPC::Connection::processIncomingMessage(v1, (IPC::Decoder **)buf);
    int v23 = *(IPC::Decoder **)buf;
    *(void *)buf = 0;
    if (v23)
    {
      IPC::Decoder::~Decoder(v23);
      WTF::fastFree(v28, v29);
    }
    goto LABEL_38;
  }
  if (!*(unsigned char *)(v1 + 72))
  {
    IPC::Decoder::takeLastAttachment(v40, buf);
    if (buf[4])
    {
      *(unsigned char *)(v1 + 72) = 1;
      if ((*(_DWORD *)buf + 1) < 2)
      {
LABEL_59:
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
        goto LABEL_38;
      }
      *(_DWORD *)(v1 + 312) = WTF::MachSendRight::leakSendRight((WTF::MachSendRight *)buf);
      IPC::Connection::initializeSendSource((IPC::Connection *)v1);
    }
    else
    {
      IPC::Connection::connectionDidClose((IPC::Connection *)v1);
    }
    if (!buf[4]) {
      goto LABEL_38;
    }
    goto LABEL_59;
  }
  IPC::Connection::connectionDidClose((IPC::Connection *)v1);
LABEL_38:
  uint64_t v24 = v40;
  int v40 = 0;
  if (v24)
  {
    IPC::Decoder::~Decoder(v24);
    WTF::fastFree(v26, v27);
  }
LABEL_40:
  unint64_t result = (WTF *)msg;
  if (v43 != msg)
  {
    if (msg)
    {
      msg = 0;
      rcv_size[0] = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

void sub_19860AD04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Decoder *a10, WTF *a11, int a12)
{
  if (a10)
  {
    IPC::Decoder::~Decoder(a10);
    WTF::fastFree(v14, v15);
  }
  if (v12 != a11)
  {
    if (a11) {
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::processIncomingMessage(uint64_t a1, IPC::Decoder **a2)
{
  uint64_t v4 = *a2;
  unsigned int v5 = *((unsigned __int16 *)*a2 + 25);
  if (v5 == 2872)
  {
    char v23 = 0;
    *a2 = 0;
    uint64_t v24 = (atomic_uchar *)(a1 + 240);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 240), (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](a1 + 240);
    }
    uint64_t v25 = *(unsigned int *)(a1 + 260);
    uint64_t v26 = v25 + 1;
    uint64_t v27 = (32 * v25) | 0x18;
    while (v27 != 24)
    {
      uint64_t v28 = *(void *)(a1 + 248);
      uint64_t v29 = *(void *)(v28 + v27 - 56);
      --v26;
      v27 -= 32;
      if (v29 == *((void *)v4 + 8))
      {
        std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(v28 + v27 - 16), v4);
        char v30 = 0;
        uint64_t v31 = *(void *)(a1 + 16);
        __int16 v32 = (atomic_uchar *)(v31 + 3);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v31 + 3), (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
        if (v30) {
          MEMORY[0x19972E8D0](v31 + 3);
        }
        uint64_t v33 = *(void *)(v31 + 48);
        uint64_t v34 = *(void *)(v31 + 56);
        uint64_t v35 = v31 + 48;
        if (v33 == v34)
        {
          uint64_t v36 = 0;
          char v37 = 0;
          unint64_t v38 = 0;
        }
        else
        {
          uint64_t v63 = WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::last(v35);
          unint64_t v38 = *(void *)(v63 + 16) & 0xFFFFFFFFFFFFFF00;
          uint64_t v36 = *(void *)(v63 + 16);
          char v37 = 1;
        }
        int v39 = 1;
        atomic_compare_exchange_strong_explicit(v32, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
        if (v39 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v32);
        }
        int v40 = (char *)(v28 + v27);
        *((void *)v40 - 1) = v38 | v36;
        *int v40 = v37;
        if (*(_DWORD *)(a1 + 260) == v26)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
          uint64_t v41 = *(WTF::BinarySemaphore **)(a1 + 16);
          if (v41) {
            WTF::BinarySemaphore::signal(v41);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
        }
        uint64_t v4 = 0;
        break;
      }
    }
    int v42 = 1;
    atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
    if (v42 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 240));
    }
    if (v4)
    {
      IPC::Decoder::~Decoder(v4);
      WTF::fastFree(v43, v44);
    }
  }
  else
  {
    if (v5 >= 0xEF4) {
      unsigned int v6 = 3828;
    }
    else {
      unsigned int v6 = v5;
    }
    int v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
    if (v7 != 255 && (v7 || *((void *)v4 + 8) != 0))
    {
      char v9 = 0;
      uint64_t v10 = (atomic_uchar *)(a1 + 226);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 226), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
      if (v9) {
        MEMORY[0x19972E8D0](a1 + 226);
      }
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
      if (!*(void *)(a1 + 16)) {
        goto LABEL_26;
      }
      uint64_t v11 = *a2;
      unsigned int v12 = *((unsigned __int16 *)*a2 + 25);
      if (v12 >= 0xEF4) {
        unsigned int v12 = 3828;
      }
      if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v12 + 2]) == 213)
      {
        uint64_t v21 = *((void *)v11 + 8);
        if (v21 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19860B284);
        }
        IPC::Connection::takeAsyncReplyHandlerWithDispatcherWithLockHeld(a1, v21, &v69);
        uint64_t v22 = v69;
        if (v69)
        {
          uint64_t v61 = *a2;
          *a2 = 0;
          uint64_t v68 = v61;
          uint64_t v69 = 0;
          (*(void (**)(uint64_t, IPC::Decoder **))(*(void *)v22 + 16))(v22, &v68);
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v68);
          uint64_t v62 = v69;
          uint64_t v69 = 0;
          if (v62) {
            (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
          }
          goto LABEL_26;
        }
        uint64_t v11 = *a2;
      }
      uint64_t v13 = IPC::MessageReceiveQueueMap::get((IPC::MessageReceiveQueueMap *)(a1 + 144), v11);
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, IPC::Decoder **))(*(void *)v13 + 16))(v13, a1, a2);
        goto LABEL_26;
      }
      if (*((unsigned __int16 *)*a2 + 25) >= 0xE09u)
      {
        char v48 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 264), (unsigned __int8 *)&v48, 1u, memory_order_acquire, memory_order_acquire);
        if (v48) {
          MEMORY[0x19972E8D0](a1 + 264);
        }
        unint64_t v49 = (uint64_t *)(a1 + 272);
        uint64_t v51 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 272));
        uint64_t v52 = v50;
        uint64_t v53 = *(void *)(a1 + 272);
        if (v53) {
          uint64_t v54 = (void *)(v53 + 16 * *(unsigned int *)(v53 - 4));
        }
        else {
          uint64_t v54 = 0;
        }
        if (v54 != v51)
        {
          do
          {
            uint64_t v65 = *(void *)(a1 + 280);
            if (v65) {
              (*(void (**)(uint64_t))(*(void *)v65 + 48))(v65);
            }
            (*(void (**)(uint64_t, void *))(*(void *)v65 + 32))(v65, v51 + 1);
            (*(void (**)(uint64_t))(*(void *)v65 + 56))(v65);
            v51 += 2;
            if (v51 == v52)
            {
LABEL_102:
              uint64_t v51 = v52;
            }
            else
            {
              while ((unint64_t)(*v51 + 1) <= 1)
              {
                v51 += 2;
                if (v51 == v52) {
                  goto LABEL_102;
                }
              }
            }
          }
          while (v51 != v54);
          uint64_t v53 = *v49;
        }
        if (v53)
        {
          *unint64_t v49 = 0;
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v53, v50);
        }
        int v55 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 264), (unsigned __int8 *)&v55, 0, memory_order_release, memory_order_relaxed);
        if (v55 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 264));
        }
      }
      char v14 = *(unsigned __int16 **)(a1 + 232);
      if (!v14)
      {
        uint64_t v15 = *a2;
        goto LABEL_20;
      }
      uint64_t v15 = *a2;
      if (!*((void *)v14 + 3))
      {
        unsigned int v45 = *((unsigned __int16 *)v15 + 25);
        if (*v14 == v45 && *((void *)v14 + 1) == *((void *)v15 + 8))
        {
          *a2 = 0;
          std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*(void *)(a1 + 232) + 24), v15);
LABEL_58:
          WTF::Condition::notifyOne((WTF::Condition *)(a1 + 225));
          goto LABEL_26;
        }
        int v56 = *((_DWORD *)v14 + 4);
        if (v45 >= 0xE09 && (*((_DWORD *)v14 + 4) & 2) != 0)
        {
          char v64 = IPC::Connection::SyncMessageState::processIncomingMessage(*(void *)(a1 + 16), a1, a2);
          if (v64) {
            goto LABEL_58;
          }
          char v14 = *(unsigned __int16 **)(a1 + 232);
          int v56 = *((_DWORD *)v14 + 4);
          uint64_t v15 = *a2;
        }
        if ((v56 & 1) != 0 && *((unsigned __int16 *)v15 + 25) >= 0xE09u)
        {
          *((unsigned char *)v14 + 20) = 1;
          WTF::Condition::notifyOne((WTF::Condition *)(a1 + 225));
          uint64_t v58 = *a2;
          *a2 = 0;
          char v67 = v58;
          IPC::Connection::enqueueIncomingMessage(a1, (uint64_t *)&v67);
          std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v67);
LABEL_26:
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
          int v20 = 1;
          atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
          if (v20 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 226));
          }
          return;
        }
      }
LABEL_20:
      if (((*((unsigned char *)v15 + 48) & 3) != 2
         || ((unsigned int v46 = *((unsigned __int16 *)v15 + 25), v46 >= 0xEF4)
           ? (unsigned int v60 = 3828)
           : (unsigned int v60 = *((unsigned __int16 *)v15 + 25)),
             (*((unsigned char *)&IPC::Detail::messageDescriptions + 24 * v60 + 17) & 2) != 0))
        && ((*((unsigned char *)v15 + 48) & 1) == 0
         || ((unsigned int v46 = *((unsigned __int16 *)v15 + 25), v46 >= 0xEF4)
           ? (unsigned int v47 = 3828)
           : (unsigned int v47 = *((unsigned __int16 *)v15 + 25)),
             (*((unsigned char *)&IPC::Detail::messageDescriptions + 24 * v47 + 17) & 1) != 0 || *((unsigned char *)v15 + 49))))
      {
        if ((IPC::Connection::SyncMessageState::processIncomingMessage(*(void *)(a1 + 16), a1, a2) & 1) == 0)
        {
          uint64_t v16 = *a2;
          *a2 = 0;
          uint64_t v66 = v16;
          IPC::Connection::enqueueIncomingMessage(a1, (uint64_t *)&v66);
          char v17 = v66;
          uint64_t v66 = 0;
          if (v17)
          {
            IPC::Decoder::~Decoder(v17);
            WTF::fastFree(v18, v19);
          }
        }
      }
      else
      {
        IPC::Connection::dispatchDidReceiveInvalidMessage(a1, v46, *((_DWORD *)v15 + 18));
      }
      goto LABEL_26;
    }
    int v59 = *((_DWORD *)v4 + 18);
    IPC::Connection::dispatchDidReceiveInvalidMessage(a1, v5, v59);
  }
}

uint64_t IPC::MessageReceiveQueueMap::get(IPC::MessageReceiveQueueMap *this, const IPC::Decoder *a2)
{
  unsigned int v3 = *((unsigned __int16 *)a2 + 25);
  if (v3 >= 0xEF4) {
    unsigned int v3 = 3828;
  }
  int v4 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v3 + 2]);
  uint64_t v5 = *((void *)this + 1);
  if (!v5) {
    goto LABEL_9;
  }
  int v6 = *(_DWORD *)(v5 - 8);
  unsigned int v7 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  unsigned int v8 = v6 & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16));
  char v9 = (unsigned __int8 *)(v5 + 24 * v8);
  int v10 = *v9;
  if (v10 != v4)
  {
    int v11 = 1;
    while ((_BYTE)v10)
    {
      unsigned int v8 = (v8 + v11) & v6;
      char v9 = (unsigned __int8 *)(v5 + 24 * v8);
      int v10 = *v9;
      ++v11;
      if (v10 == v4) {
        goto LABEL_8;
      }
    }
    char v9 = (unsigned __int8 *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  }
LABEL_8:
  if ((unsigned __int8 *)(v5 + 24 * *(unsigned int *)(v5 - 4)) != v9)
  {
    uint64_t v24 = *((unsigned int *)v9 + 4);
    if (v24 != -1)
    {
      uint64_t v25 = (char *)(v9 + 8);
      goto LABEL_31;
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = *(void *)this;
    if (*(void *)this)
    {
      uint64_t v14 = *((void *)a2 + 8);
      unsigned int v15 = *(_DWORD *)(v12 - 8);
      uint64_t v16 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(v4, v14) & v15;
      char v17 = (unsigned __int8 *)(v12 + 32 * v16);
      int v18 = *v17;
      uint64_t v19 = *((void *)v17 + 1);
      if (v18 != v4 || v19 != v14)
      {
        int v21 = 1;
        while ((_BYTE)v18 || v19)
        {
          uint64_t v16 = (v16 + v21) & v15;
          char v17 = (unsigned __int8 *)(v12 + 32 * v16);
          int v18 = *v17;
          uint64_t v19 = *((void *)v17 + 1);
          ++v21;
          if (v18 == v4 && v19 == v14) {
            goto LABEL_26;
          }
        }
        char v17 = (unsigned __int8 *)(v12 + 32 * *(unsigned int *)(v12 - 4));
      }
LABEL_26:
      if ((unsigned __int8 *)(v12 + 32 * *(unsigned int *)(v12 - 4)) != v17)
      {
        uint64_t v23 = *((unsigned int *)v17 + 6);
        if (v23 != -1)
        {
          uint64_t v29 = &v28;
          return ((uint64_t (*)(char **, unsigned __int8 *))off_1EEA10358[v23])(&v29, v17 + 16);
        }
        goto LABEL_36;
      }
    }
    if (!*((unsigned char *)this + 32)) {
      return 0;
    }
    uint64_t v24 = *((unsigned int *)this + 6);
    if (v24 != -1)
    {
      uint64_t v25 = (char *)this + 16;
LABEL_31:
      uint64_t v29 = &v28;
      return ((uint64_t (*)(char **, char *))off_1EEA10358[v24])(&v29, v25);
    }
  }
LABEL_36:
  int v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::Decoder::create(v26, v27);
}

uint64_t IPC::Decoder::create@<X0>(WTF *this@<X1>, const void *a2@<X0>, uint64_t *a3@<X2>, IPC::Decoder **a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  WTF::tryFastMalloc(this);
  uint64_t v8 = *(void *)__dst;
  if (*(void *)__dst)
  {
    memcpy(*(void **)__dst, a2, (size_t)this);
  }
  else
  {
    int v11 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__dst = 134217984;
      *(void *)&__dst[4] = this;
      _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, "Decoder::copyBuffer: tryFastMalloc(%lu) failed", __dst, 0xCu);
    }
  }
  char v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v9 = &unk_1EEA10378;
  *(void *)__dst = v9;
  IPC::Decoder::create(v8, (unint64_t)this, (uint64_t *)__dst, a3, a4);
  uint64_t result = *(void *)__dst;
  if (*(void *)__dst) {
    return (*(uint64_t (**)(void))(**(void **)__dst + 8))(*(void *)__dst);
  }
  return result;
}

void IPC::Decoder::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, IPC::Decoder **a5@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
    int v11 = (IPC::Decoder *)v10;
    *(void *)uint64_t v10 = a1;
    *(void *)(v10 + 8) = a2;
    *(void *)(v10 + 16) = a1;
    uint64_t v12 = *a3;
    *a3 = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 24) = v12;
    uint64_t v13 = *a4;
    *a4 = 0;
    *(void *)(v10 + 32) = v13;
    LODWORD(v13) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(v10 + 40) = v13;
    LODWORD(v13) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(v10 + 44) = v13;
    *(_DWORD *)(v10 + 48) = 250937344;
    *(void *)(v10 + 56) = 0;
    *(_DWORD *)(v10 + 72) = -1;
    uint64_t v14 = *(void *)v10;
    if ((*(void *)v10 & 7) != 0)
    {
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      uint64_t v29 = *(void *)(v10 + 24);
      if (!v29) {
        goto LABEL_39;
      }
LABEL_33:
      if (!a2) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
    if (a2 <= *(void *)(v10 + 16) - v14)
    {
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      uint64_t v30 = *(void *)(v10 + 24);
      if (!v30) {
        goto LABEL_39;
      }
      if (!a2) {
        goto LABEL_19;
      }
      (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      uint64_t v14 = *(void *)v11;
      a2 = *((void *)v11 + 1);
    }
    else
    {
      unsigned int v15 = *(unsigned __int8 **)(v10 + 16);
      uint64_t v16 = v15 + 1;
      *(void *)(v10 + 16) = v15 + 1;
      if (v14)
      {
        unsigned int v17 = *v15;
        if (v17 < 0x10)
        {
          *(unsigned char *)(v10 + 48) = v17;
          unint64_t v18 = ((unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFFELL) - v14;
          if (a2 < v18 || a2 - v18 <= 1)
          {
            *(void *)uint64_t v10 = 0;
            *(void *)(v10 + 8) = 0;
            uint64_t v33 = *(void *)(v10 + 24);
            if (!v33
              || ((*(void (**)(uint64_t))(*(void *)v33 + 16))(v33),
                  uint64_t v36 = *(void *)v11,
                  uint64_t v37 = *((void *)v11 + 1),
                  uint64_t v38 = *((void *)v11 + 3),
                  *(void *)int v11 = 0,
                  *((void *)v11 + 1) = 0,
                  !v38))
            {
              *(void *)int v11 = 0;
              *((void *)v11 + 1) = 0;
              goto LABEL_39;
            }
            if (!v37) {
              goto LABEL_39;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
            a2 = *((void *)v11 + 1);
LABEL_46:
            uint64_t v29 = *((void *)v11 + 3);
            *(void *)int v11 = 0;
            *((void *)v11 + 1) = 0;
            if (!v29 || !a2) {
              goto LABEL_39;
            }
LABEL_34:
            __int16 v32 = *(void (**)(void))(*(void *)v29 + 16);
LABEL_35:
            v32();
            goto LABEL_19;
          }
          int v20 = (unsigned __int16 *)(v14 + v18);
          unsigned int v23 = *v20;
          int v21 = v20 + 1;
          __int16 v22 = v23;
          *(void *)(v10 + 16) = v21;
          if (v23 >= 0xEF5) {
            goto LABEL_46;
          }
          *(_WORD *)(v10 + 50) = v22;
          unint64_t v24 = (((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
          if (a2 < v24 || a2 - v24 <= 7)
          {
            *(void *)uint64_t v10 = 0;
            *(void *)(v10 + 8) = 0;
            uint64_t v34 = *(void *)(v10 + 24);
            if (v34)
            {
              (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
              uint64_t v39 = *((void *)v11 + 1);
              uint64_t v40 = *((void *)v11 + 3);
              *(void *)int v11 = 0;
              *((void *)v11 + 1) = 0;
              if (v40)
              {
                if (v39)
                {
                  __int16 v32 = *(void (**)(void))(*(void *)v40 + 16);
                  goto LABEL_35;
                }
              }
            }
LABEL_39:
            *a5 = 0;
            IPC::Decoder::~Decoder(v11);
            WTF::fastFree(v11, v35);
            return;
          }
          uint64_t v27 = v14 + v24 + 8;
          uint64_t v26 = *(void *)(v14 + v24);
          *(void *)(v10 + 16) = v27;
          if (v26 == -1) {
            IPC::Decoder::markInvalid((IPC::Decoder *)v10);
          }
          else {
            *(void *)(v10 + 64) = v26;
          }
LABEL_19:
          if (*(void *)v11)
          {
            *a5 = v11;
            return;
          }
          goto LABEL_39;
        }
        goto LABEL_32;
      }
    }
    uint64_t v31 = *((void *)v11 + 3);
    *(void *)int v11 = 0;
    *((void *)v11 + 1) = 0;
    if (!v31 || !a2) {
      goto LABEL_39;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v14, a2);
    a2 = *((void *)v11 + 1);
LABEL_32:
    uint64_t v29 = *((void *)v11 + 3);
    *(void *)int v11 = 0;
    *((void *)v11 + 1) = 0;
    if (!v29) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
  char v28 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    int v41 = 134217984;
    unint64_t v42 = a2;
    _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "Decoder::create() called with a null buffer (buffer size: %lu)", (uint8_t *)&v41, 0xCu);
  }
  *a5 = 0;
}

uint64_t IPC::Connection::SyncMessageState::processIncomingMessage(uint64_t a1, uint64_t a2, IPC::Decoder **a3)
{
  if (*((unsigned char *)*a3 + 48)) {
    int v3 = 1;
  }
  else {
    int v3 = *((unsigned char *)*a3 + 48) & 2;
  }
  if (!v3) {
    return 0;
  }
  if (v3 == 2 && !atomic_load(&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount)) {
    return 0;
  }
  char v8 = 0;
  char v9 = (atomic_uchar *)(a1 + 3);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 3), (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](a1 + 3);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a2);
  int v11 = (uint64_t *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10
    || (WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::expand((uint64_t *)(a1 + 8)),
        (uint64_t v10 = *v11) != 0))
  {
    int v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unint64_t v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  unsigned int v17 = (void *)(v10 + 8 * v16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v33 = 0;
    int v34 = 1;
    while (v18 != a2)
    {
      if (v18 == -1) {
        uint64_t v33 = v17;
      }
      unsigned int v16 = (v16 + v34) & v12;
      unsigned int v17 = (void *)(v10 + 8 * v16);
      uint64_t v18 = *v17;
      ++v34;
      if (!*v17)
      {
        if (v33)
        {
          *uint64_t v33 = 0;
          --*(_DWORD *)(*v11 - 16);
          unsigned int v17 = v33;
        }
        goto LABEL_13;
      }
    }
    char v46 = 0;
    atomic_uchar *volatile v47 = *(atomic_uchar *volatile *)a2;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a2, (unsigned __int8 *)&v46, 1u, memory_order_acquire, memory_order_acquire);
    if (v46) {
      MEMORY[0x19972E8D0](v47);
    }
    uint64_t v48 = *((void *)v47 + 1);
    uint64_t v49 = v48 - 1;
    *((void *)v47 + 1) = v48 - 1;
    if (v48 == 1)
    {
      uint64_t v55 = *((void *)v47 + 2);
      uint64_t v51 = *((void *)v47 + 3);
      *((void *)v47 + 3) = 0;
      BOOL v50 = v55 == 0;
    }
    else
    {
      BOOL v50 = 0;
      uint64_t v51 = 0;
    }
    int v52 = 1;
    atomic_compare_exchange_strong_explicit(v47, (unsigned __int8 *)&v52, 0, memory_order_release, memory_order_relaxed);
    if (v52 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v47);
    }
    if (!v49)
    {
      uint64_t v53 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v53 = &unk_1EE9B37E8;
      *(void *)(v53 + 8) = v47;
      *(void *)(v53 + 16) = v51;
      *(unsigned char *)(v53 + 24) = v50;
      uint64_t v57 = (atomic_uchar *volatile *)v53;
      WTF::ensureOnMainRunLoop();
      uint64_t v54 = v57;
      uint64_t v57 = 0;
      if (v54) {
        (*((void (**)(atomic_uchar *volatile *))*v54 + 1))(v54);
      }
    }
    char v25 = 1;
    goto LABEL_20;
  }
LABEL_13:
  *unsigned int v17 = a2;
  uint64_t v19 = *v11;
  if (*v11) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *v11;
  if (*v11) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_19;
    }
LABEL_62:
    WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::expand((uint64_t *)(a1 + 8));
    goto LABEL_19;
  }
  if (3 * v24 <= 4 * v23) {
    goto LABEL_62;
  }
LABEL_19:
  char v25 = 0;
LABEL_20:
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a2 + 104));
  if ((*((unsigned char *)*a3 + 48) & 8) != 0 && *(void *)(a2 + 112) != *(void *)(a2 + 120))
  {
    do
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (atomic_uchar *volatile *)a2);
      uint64_t v37 = *(void *)(a2 + 112);
      if (v37 == *(void *)(a2 + 120))
      {
        __break(0xC471u);
        JUMPOUT(0x19860C09CLL);
      }
      uint64_t v38 = *(void *)(a2 + 128);
      uint64_t v39 = *(IPC::Decoder **)(v38 + 8 * v37);
      *(void *)(v38 + 8 * v37) = 0;
      uint64_t v58 = v39;
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(*(void *)(a2 + 128) + 8 * v37));
      uint64_t v40 = *(void *)(a2 + 112);
      if (v40 == *(unsigned int *)(a2 + 136) - 1) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v40 + 1;
      }
      *(void *)(a2 + 112) = v41;
      uint64_t IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((atomic_uchar *volatile **)(a1 + 48), (atomic_uchar *volatile *)&v57);
      unint64_t v42 = v58;
      uint64_t v58 = 0;
      if (v42)
      {
        IPC::Decoder::~Decoder(v42);
        WTF::fastFree(v43, v44);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v57);
    }
    while (*(void *)(a2 + 112) != *(void *)(a2 + 120));
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (atomic_uchar *volatile *)a2);
  uint64_t v26 = *a3;
  *a3 = 0;
  uint64_t v58 = v26;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((atomic_uchar *volatile **)(a1 + 48), (atomic_uchar *volatile *)&v57);
  uint64_t v27 = v58;
  uint64_t v58 = 0;
  if (v27)
  {
    IPC::Decoder::~Decoder(v27);
    WTF::fastFree(v35, v36);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v57);
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 3));
  }
  if ((v25 & 1) == 0)
  {
    uint64_t v29 = *(void *)(a1 + 80);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (atomic_uchar *volatile *)a2);
    uint64_t v30 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v30 = &unk_1EEA10120;
    uint64_t v31 = v56;
    int v56 = 0;
    uint64_t v57 = (atomic_uchar *volatile *)v30;
    *(void *)(v30 + 8) = v31;
    (*(void (**)(uint64_t, atomic_uchar *volatile **))(*(void *)v29 + 16))(v29, &v57);
    __int16 v32 = v57;
    uint64_t v57 = 0;
    if (v32) {
      (*((void (**)(atomic_uchar *volatile *))*v32 + 1))(v32);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v56);
  }
  WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)a1);
  return 1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3, uint64_t a4, int a5)
{
  uint64_t result = WTF::isMainRunLoop((WTF *)a1);
  if ((result & 1) == 0)
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
    unint64_t v15 = *a2;
    *a2 = 0;
    int v16 = *(unsigned __int8 *)(a4 + 16);
    if (*(unsigned char *)(a4 + 16))
    {
      uint64_t v17 = *(void *)a4;
      uint64_t v5 = *(void *)(a4 + 8);
      *(void *)a4 = 0;
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v35 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v35 = &unk_1EE9D5728;
    *(void *)(v35 + 8) = a1;
    *(void *)(v35 + 16) = v15;
    *(unsigned char *)(v35 + 24) = a3;
    *(unsigned char *)(v35 + 32) = 0;
    *(unsigned char *)(v35 + 48) = 0;
    if (v16)
    {
      *(void *)(v35 + 32) = v17;
      *(void *)(v35 + 40) = v5;
      *(unsigned char *)(v35 + 48) = 1;
      uint64_t v17 = 0;
    }
    *(unsigned char *)(v35 + 56) = a5;
    int v59 = (IPC::Encoder *)v35;
    WTF::callOnMainRunLoop();
    uint64_t v36 = v59;
    int v59 = 0;
    if (v36)
    {
      (*(void (**)(IPC::Encoder *))(*(void *)v36 + 8))(v36);
      if (!v16) {
        return 1;
      }
    }
    else if (!v16)
    {
      return 1;
    }
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    return 1;
  }
  if (*(unsigned char *)(a4 + 16))
  {
    if ((uint64_t v14 = *(void *)(a1 + 136)) != 0 && *(unsigned char *)(v14 + 104) || *(void *)(a1 + 144))
    {
      if (a5)
      {
        uint64_t v18 = *(void *)a4;
        *(void *)a4 = 0;
        unsigned int v19 = *(unsigned __int16 *)*a2;
        if (v19 >= 0xEF4) {
          unsigned int v19 = 3828;
        }
        int v20 = &(&IPC::Detail::messageDescriptions)[3 * v19];
        uint64_t v21 = *v20;
        uint64_t v22 = (uint64_t)v20[1];
        uint64_t v23 = WTF::fastMalloc((WTF *)0x28);
        WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v23, a1 + 200, v21, v22, 0, 1);
        uint64_t result = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t result = &unk_1EE9D5750;
        *(void *)(result + 8) = v23;
        *(void *)(result + 16) = v18;
        if (!*(unsigned char *)(a4 + 16)) {
          goto LABEL_54;
        }
        uint64_t v24 = *(void *)a4;
        *(void *)a4 = result;
        if (v24) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
      }
    }
  }
  uint64_t v25 = *(void *)(a1 + 136);
  if (v25 && *(unsigned char *)(v25 + 104))
  {
    uint64_t v26 = *a2;
    *a2 = 0;
    int v59 = v26;
    char v60 = a3;
    LOBYTE(v61) = 0;
    char v63 = 0;
    int v27 = *(unsigned __int8 *)(a4 + 16);
    if (*(unsigned char *)(a4 + 16))
    {
      uint64_t v28 = *(void *)a4;
      uint64_t v13 = *(void *)(a4 + 8);
      *(void *)a4 = 0;
      uint64_t v61 = v28;
      uint64_t v62 = v13;
      int v29 = 1;
      char v63 = 1;
    }
    else
    {
      int v29 = 0;
    }
    uint64_t v37 = (uint64_t *)(a1 + 120);
    uint64_t v38 = *(unsigned int *)(a1 + 132);
    if (v38 == *(_DWORD *)(a1 + 128))
    {
      unint64_t v39 = WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v59);
      unsigned int v40 = *(_DWORD *)(a1 + 132);
      uint64_t v41 = *(void *)(a1 + 120);
      uint64_t v42 = v41 + 40 * v40;
      uint64_t v43 = *(void *)v39;
      *(void *)unint64_t v39 = 0;
      *(void *)uint64_t v42 = v43;
      LOBYTE(v43) = *(unsigned char *)(v39 + 8);
      *(unsigned char *)(v42 + 32) = 0;
      int v44 = (unsigned char *)(v42 + 32);
      *(v44 - 24) = v43;
      *(v44 - 16) = 0;
      if (*(unsigned char *)(v39 + 32))
      {
        uint64_t v45 = *(void *)(v39 + 16);
        *(void *)(v39 + 16) = 0;
        *((void *)v44 - 2) = v45;
        *(void *)(v41 + 40 * v40 + 24) = *(void *)(v39 + 24);
        *int v44 = 1;
      }
      ++*(_DWORD *)(a1 + 132);
      if (!v63) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v46 = *v37;
      uint64_t v47 = *v37 + 40 * v38;
      int v59 = 0;
      *(void *)uint64_t v47 = v26;
      *(unsigned char *)(v47 + 8) = a3;
      *(unsigned char *)(v47 + 16) = 0;
      uint64_t v48 = (void *)(v47 + 16);
      *(unsigned char *)(v47 + 32) = 0;
      uint64_t v49 = (unsigned char *)(v47 + 32);
      if (v27)
      {
        uint64_t v50 = v61;
        uint64_t v61 = 0;
        *uint64_t v48 = v50;
        *(void *)(v46 + 40 * v38 + 24) = v13;
        *uint64_t v49 = 1;
      }
      ++*(_DWORD *)(a1 + 132);
      if (!v29) {
        goto LABEL_42;
      }
    }
    uint64_t v51 = v61;
    uint64_t v61 = 0;
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
LABEL_42:
    int v52 = v59;
    int v59 = 0;
    if (v52)
    {
      IPC::Encoder::~Encoder(v52, v12);
      WTF::fastFree(v53, v54);
    }
    return 1;
  }
  if (*(void *)(a1 + 144))
  {
    if (*(unsigned char *)(a4 + 16))
    {
      uint64_t result = WebKit::AuxiliaryProcessProxy::protectedConnection((WebKit::AuxiliaryProcessProxy *)a1, (atomic_uchar *volatile **)&v59);
      if (!*(unsigned char *)(a4 + 16)) {
        goto LABEL_54;
      }
      uint64_t v30 = (os_unfair_lock_s *)v59;
      uint64_t v31 = *(void *)a4;
      uint64_t v32 = *(void *)(a4 + 8);
      *(void *)a4 = 0;
      v58[0] = v31;
      v58[1] = v32;
      int v33 = IPC::Connection::sendMessageWithAsyncReply(v30, a2, v58, a3, 0);
      uint64_t v34 = v58[0];
      v58[0] = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
    }
    else
    {
      WebKit::AuxiliaryProcessProxy::protectedConnection((WebKit::AuxiliaryProcessProxy *)a1, (atomic_uchar *volatile **)&v59);
      int v33 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)a2, a3, 0);
    }
    uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
    if (!v33) {
      return 1;
    }
  }
  if (!*(unsigned char *)(a4 + 16) || !*(void *)a4) {
    return 0;
  }
  uint64_t result = WTF::RunLoop::current((WTF::RunLoop *)result);
  if (*(unsigned char *)(a4 + 16))
  {
    uint64_t v55 = *(void *)a4;
    *(void *)a4 = 0;
    int v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v56 = &unk_1EE9D5778;
    *((void *)v56 + 1) = v55;
    int v59 = v56;
    WTF::RunLoop::dispatch();
    uint64_t v57 = v59;
    int v59 = 0;
    if (v57) {
      (*(void (**)(IPC::Encoder *))(*(void *)v57 + 8))(v57);
    }
    return 0;
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t IPC::Connection::sendMessageImpl(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 33));
  if ((v4 & 1) == 0) {
    return 1;
  }
  char v5 = BYTE4(a4);
  isMainRunLoop = (WTF::MonotonicTime *)WTF::isMainRunLoop((WTF *)a1);
  if (isMainRunLoop)
  {
    if (*(_DWORD *)(a1 + 92))
    {
      uint64_t v48 = *a2;
      if (*(unsigned __int16 *)*a2 <= 0xE08uLL
        && LOBYTE((&IPC::Detail::messageDescriptions)[3 * *(unsigned __int16 *)*a2 + 2]) != 212
        && (a3 & 4) == 0)
      {
        char v82 = 0;
        IPC::Connection::createSyncMessageEncoder(3828, *(void *)(v48 + 8), (uint64_t *)&v82, &v81);
        uint64_t v50 = v81;
        IPC::Encoder::setFullySynchronousModeForTesting((uint64_t)v81);
        IPC::Encoder::wrapForTesting(v50, a2);
        IPC::Connection::sendSyncMessage(a1, (uint64_t)v82, (uint64_t *)&v81, 0, (uint64_t)__s2, INFINITY);
        if (*(_DWORD *)&__s2[8])
        {
          if (*(_DWORD *)&__s2[8] != 1)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_110;
          }
          uint64_t v32 = __s2[0];
        }
        else
        {
          uint64_t v32 = 0;
        }
        ((void (*)(char *, unsigned char *))off_1EEA100B0[*(unsigned int *)&__s2[8]])(&v83, __s2);
        std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v81, v72);
        return v32;
      }
    }
  }
  if ((a3 & 1) != 0 && (!*(unsigned char *)(a1 + 34) || *(_DWORD *)(a1 + 88)))
  {
    int v34 = 1;
  }
  else
  {
    if ((a3 & 2) == 0) {
      goto LABEL_6;
    }
    int v34 = 2;
  }
  isMainRunLoop = (WTF::MonotonicTime *)IPC::Encoder::setShouldDispatchMessageWhenWaitingForSyncReply(*a2, v34);
LABEL_6:
  char v10 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 184), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    isMainRunLoop = (WTF::MonotonicTime *)MEMORY[0x19972E8D0](a1 + 184);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v12 = *(void *)(a1 + 200);
  if (!v11)
  {
    uint64_t v37 = *(unsigned int *)(a1 + 216);
    if (v12)
    {
      if (v12 != v37 - 1)
      {
        unint64_t v13 = 0;
        uint64_t v14 = *(void *)(a1 + 200);
        goto LABEL_10;
      }
    }
    else if (v37)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      goto LABEL_10;
    }
    goto LABEL_45;
  }
  unint64_t v13 = *(void *)(a1 + 192);
  uint64_t v14 = *(void *)(a1 + 200);
  if (v12 + 1 == v11)
  {
    LODWORD(v37) = *(_DWORD *)(a1 + 216);
LABEL_45:
    uint64_t v38 = v37;
    unint64_t v39 = ((unint64_t)v37 >> 2) + v37;
    if (v39 <= 0xF) {
      unint64_t v39 = 15;
    }
    if (v39 < 0x1FFFFFFF)
    {
      unsigned int v40 = *(char **)(a1 + 208);
      int v41 = v39 + 1;
      uint64_t v42 = (char *)WTF::fastMalloc((WTF *)(8 * (v39 + 1)));
      *(_DWORD *)(a1 + 216) = v41;
      *(void *)(a1 + 208) = v42;
      unint64_t v44 = *(void *)(a1 + 192);
      unint64_t v43 = *(void *)(a1 + 200);
      if (v44 > v43)
      {
        memcpy(v42, v40, 8 * v43);
        uint64_t v46 = *(void *)(a1 + 192);
        uint64_t v47 = v46 - v38 + *(unsigned int *)(a1 + 216);
        isMainRunLoop = (WTF::MonotonicTime *)memcpy((void *)(*(void *)(a1 + 208) + 8 * v47), &v40[8 * v46], 8 * v38 - 8 * v46);
        *(void *)(a1 + 192) = v47;
      }
      else
      {
        isMainRunLoop = (WTF::MonotonicTime *)memcpy(&v42[8 * v44], &v40[8 * v44], 8 * v43 - 8 * v44);
      }
      if (v40)
      {
        if (*(char **)(a1 + 208) == v40)
        {
          *(void *)(a1 + 208) = 0;
          *(_DWORD *)(a1 + 216) = 0;
        }
        isMainRunLoop = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v40, v45);
      }
      unint64_t v13 = *(void *)(a1 + 192);
      uint64_t v14 = *(void *)(a1 + 200);
      goto LABEL_10;
    }
LABEL_110:
    __break(0xC471u);
    JUMPOUT(0x19860CDB4);
  }
LABEL_10:
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 208);
  uint64_t v18 = *a2;
  *a2 = 0;
  *(void *)(v17 + 8 * v14) = v18;
  uint64_t v19 = *(unsigned int *)(a1 + 216);
  if (v14 == v19 - 1) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = v14 + 1;
  }
  *(void *)(a1 + 200) = v20;
  if (v13 <= v20) {
    uint64_t v19 = 0;
  }
  unint64_t v21 = v20 + v19 - v13;
  if (!*(void *)(a1 + 48))
  {
    unsigned int v22 = 0;
    goto LABEL_22;
  }
  unsigned int v22 = 0;
  if (v21 < 0x81) {
    goto LABEL_22;
  }
  uint64_t v75 = v12;
  unint64_t v76 = v20 + v19 - v13;
  uint64_t v74 = v11;
  uint64_t v23 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(isMainRunLoop);
  if (v25 - *(double *)(a1 + 56) < 20.0)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    unsigned int v22 = 0;
    goto LABEL_22;
  }
  char v82 = 0;
  uint64_t v77 = *(void *)(a1 + 200);
  if (*(void *)(a1 + 192) == v77)
  {
    WTF::MonotonicTime::now(v23);
    unsigned int v79 = 0;
    uint64_t v80 = 0;
    *(void *)(a1 + 56) = v26;
    goto LABEL_20;
  }
  unint64_t v52 = *(void *)(a1 + 192);
  unsigned int v79 = 0;
  uint64_t v80 = 0;
  do
  {
    unint64_t v78 = v52;
    unsigned int v53 = **(unsigned __int16 **)(*(void *)(a1 + 208) + 8 * v52);
    if (v53 >= 0xEF4) {
      unsigned int v53 = 3828;
    }
    *(_OWORD *)__s2 = *(_OWORD *)&(&IPC::Detail::messageDescriptions)[3 * v53];
    uint64_t v54 = (uint64_t)v82;
    if (v82
      || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,unsigned int,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)&v82, 0), (uint64_t v54 = (uint64_t)v82) != 0))
    {
      int v55 = *(_DWORD *)(v54 - 8);
    }
    else
    {
      int v55 = 0;
    }
    unsigned int v56 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v24) & v55;
    uint64_t v57 = v54 + 24 * v56;
    uint64_t v58 = *(void *)v57;
    if (!*(void *)v57) {
      goto LABEL_90;
    }
    uint64_t v59 = 0;
    int v60 = 1;
    uint64_t v61 = *(const char **)__s2;
    do
    {
      if (v58 == -1)
      {
        uint64_t v59 = v57;
      }
      else if (v61)
      {
        uint64_t v58 = strcmp((const char *)v58, v61);
        if (!v58) {
          goto LABEL_98;
        }
      }
      else if (!v58)
      {
        goto LABEL_98;
      }
      unsigned int v56 = (v56 + v60) & v55;
      uint64_t v57 = v54 + 24 * v56;
      uint64_t v58 = *(void *)v57;
      ++v60;
    }
    while (*(void *)v57);
    if (v59)
    {
      *(void *)uint64_t v59 = 0;
      *(void *)(v59 + 8) = 0;
      *(void *)(v59 + 16) = 0;
      --*(_DWORD *)(v54 - 16);
      *(_OWORD *)uint64_t v59 = *(_OWORD *)__s2;
      *(_DWORD *)(v59 + 16) = 0;
      int v62 = *(_DWORD *)(v54 - 12) + 1;
      *(_DWORD *)(v54 - 12) = v62;
    }
    else
    {
LABEL_90:
      *(_OWORD *)uint64_t v57 = *(_OWORD *)__s2;
      *(_DWORD *)(v57 + 16) = 0;
      int v62 = *(_DWORD *)(v54 - 12) + 1;
      *(_DWORD *)(v54 - 12) = v62;
      uint64_t v59 = v57;
    }
    uint64_t v63 = (*(_DWORD *)(v54 - 16) + v62);
    unint64_t v64 = *(unsigned int *)(v54 - 4);
    if (v64 > 0x400)
    {
      if (v64 <= 2 * v63)
      {
LABEL_97:
        uint64_t v58 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,unsigned int,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)&v82, (long long *)v59);
        uint64_t v57 = v58;
        goto LABEL_98;
      }
    }
    else if (3 * v64 <= 4 * v63)
    {
      goto LABEL_97;
    }
    uint64_t v57 = v59;
LABEL_98:
    unsigned int v65 = *(_DWORD *)(v57 + 16) + 1;
    *(_DWORD *)(v57 + 16) = v65;
    unint64_t v66 = *(unsigned int *)(a1 + 216);
    unint64_t v52 = v78 + v66 + 1;
    do
      v52 -= v66;
    while (v52 >= v66);
    unsigned int v67 = v79;
    uint64_t v68 = v80;
    if (v65 > v79) {
      uint64_t v68 = *(void *)__s2;
    }
    uint64_t v80 = v68;
    if (v65 > v79) {
      unsigned int v67 = v65;
    }
    unsigned int v79 = v67;
  }
  while (v77 != v52);
  uint64_t v69 = (uint64_t)v82;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v58);
  *(void *)(a1 + 56) = v71;
  if (v69) {
    WTF::fastFree((WTF *)(v69 - 16), v70);
  }
LABEL_20:
  int v15 = 1;
  uint64_t v11 = v74;
  uint64_t v12 = v75;
  unint64_t v21 = v76;
  uint64_t v16 = v80;
  unsigned int v22 = v79;
LABEL_22:
  int v27 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 184), (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 184));
  }
  if (v15)
  {
    uint64_t v51 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      unsigned int v73 = IPC::Connection::remoteProcessID((IPC::Connection *)a1);
      *(_DWORD *)__s2 = 134218754;
      *(void *)&__s2[4] = v21;
      *(_WORD *)&__s2[12] = 1024;
      *(_DWORD *)&__s2[14] = v73;
      __int16 v85 = 1024;
      unsigned int v86 = v22;
      __int16 v87 = 2082;
      uint64_t v88 = v16;
      _os_log_error_impl(&dword_1985F2000, v51, OS_LOG_TYPE_ERROR, "Connection::sendMessage(): Too many messages (%zu) in the queue to remote PID: %d (most common: %u %{public}s messages), notifying client", __s2, 0x22u);
    }
    (*(void (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  }
  if (v11 == v12)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)__s2, (atomic_uchar *volatile *)a1);
    if (!v5)
    {
      uint64_t v28 = *(void *)(a1 + 64);
      (*(void (**)(uint64_t))(*(void *)v28 + 48))(v28);
      int v29 = (void *)WTF::fastMalloc((WTF *)0x10);
      *int v29 = &unk_1EEA10170;
      uint64_t v30 = *(void *)__s2;
      *(void *)__s2 = 0;
      v29[1] = v30;
      char v82 = v29;
      (*(void (**)(uint64_t, void **))(*(void *)v28 + 32))(v28, &v82);
      goto LABEL_28;
    }
LABEL_38:
    uint64_t v28 = *(void *)(a1 + 64);
    (*(void (**)(uint64_t))(*(void *)v28 + 48))(v28);
    uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v35 = &unk_1EEA10170;
    uint64_t v36 = *(void *)__s2;
    *(void *)__s2 = 0;
    v35[1] = v36;
    char v82 = v35;
    WTF::WorkQueueBase::dispatchWithQOS();
LABEL_28:
    uint64_t v31 = (uint64_t)v82;
    char v82 = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    (*(void (**)(uint64_t))(*(void *)v28 + 56))(v28);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)__s2);
  }
  else if (v5)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)__s2, (atomic_uchar *volatile *)a1);
    goto LABEL_38;
  }
  return 0;
}

void IPC::Connection::enqueueIncomingMessage(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 360));
  if ((v4 & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 100))
    {
      unint64_t v12 = *(void *)(a1 + 112);
      unint64_t v13 = *(void *)(a1 + 120);
      if (v12 > v13) {
        v13 += *(unsigned int *)(a1 + 136);
      }
      if ((v13 - v12) >> 4 >= 0xC35)
      {
        atomic_store(1u, (unsigned __int8 *)(a1 + 360));
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, (atomic_uchar *volatile *)a1);
        IPC::Connection::dispatchToClientWithIncomingMessagesLock<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0>(*(void **)(a1 + 16), (uint64_t *)&v18);
        uint64_t v11 = &v18;
LABEL_9:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v11);
        return;
      }
    }
    WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append((uint64_t *)(a1 + 112), a2);
    if (!*(unsigned char *)(a1 + 100))
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (!v5) {
        return;
      }
      uint64_t v6 = *(void *)(v5 + 80);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, (atomic_uchar *volatile *)a1);
      uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
      char v8 = &unk_1EEA10298;
      goto LABEL_6;
    }
    unint64_t v14 = *(void *)(a1 + 112);
    unint64_t v15 = *(void *)(a1 + 120);
    if (v14 > v15) {
      v15 += *(unsigned int *)(a1 + 136);
    }
    if (v15 - v14 == 1)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      if (v16)
      {
        uint64_t v6 = *(void *)(v16 + 80);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, (atomic_uchar *volatile *)a1);
        uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
        char v8 = &unk_1EEA10270;
LABEL_6:
        *(void *)uint64_t v7 = v8;
        char v9 = v17;
        uint64_t v17 = 0;
        uint64_t v18 = (atomic_uchar *volatile *)v7;
        *(void *)(v7 + 8) = v9;
        (*(void (**)(uint64_t, atomic_uchar *volatile **))(*(void *)v6 + 16))(v6, &v18);
        char v10 = v18;
        uint64_t v18 = 0;
        if (v10) {
          (*((void (**)(atomic_uchar *volatile *))*v10 + 1))(v10);
        }
        uint64_t v11 = &v17;
        goto LABEL_9;
      }
    }
  }
}

atomic_uchar *volatile **WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(atomic_uchar *volatile **a1)
{
  mach_port_name_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v12 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + 3) = 0;
      BOOL v7 = v12 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return a1;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v13 = v10;
    WTF::ensureOnMainRunLoop();
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return a1;
}

atomic_uchar *volatile **WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(atomic_uchar *volatile **a1, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  atomic_uchar *volatile v5 = *a2;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  ++*((void *)v5 + 1);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  *a1 = a2;
  return a1;
}

uint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append(uint64_t *result, uint64_t *a2)
{
  char v3 = result;
  uint64_t v4 = result[1];
  if (*result)
  {
    if (v4 + 1 != *result) {
      goto LABEL_3;
    }
    goto LABEL_9;
  }
  uint64_t v8 = *((unsigned int *)result + 6);
  if (v4)
  {
    if (v4 == v8 - 1) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!v8)
    {
LABEL_9:
      uint64_t result = WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::expandCapacity(result);
      uint64_t v4 = v3[1];
      goto LABEL_3;
    }
    uint64_t v4 = 0;
  }
LABEL_3:
  uint64_t v5 = v3[2];
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(v5 + 8 * v4) = v6;
  if (v4 == *((unsigned int *)v3 + 6) - 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  v3[1] = v7;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::protectedConnection@<X0>(WebKit::AuxiliaryProcessProxy *this@<X0>, atomic_uchar *volatile **a2@<X8>)
{
  mach_port_name_t v2 = (atomic_uchar *volatile *)*((void *)this + 18);
  if (v2) {
    return (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(a2, v2);
  }
  uint64_t result = 130;
  __break(0xC471u);
  return result;
}

void IPC::Decoder::takeLastAttachment(IPC::Decoder *this@<X0>, unsigned char *a2@<X8>)
{
  if (*((_DWORD *)this + 11))
  {
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)this + 32);
    WTF::MachSendRight::MachSendRight();
    a2[4] = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
  }
  else
  {
    IPC::Decoder::markInvalid(this);
    *a2 = 0;
    a2[4] = 0;
  }
}

void WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 12) || (WTF::MachSendRight::MachSendRight(), uint64_t v2 = *(unsigned int *)(a1 + 12), !v2))
  {
    __break(0xC471u);
    JUMPOUT(0x19860D2B0);
  }
  int v3 = v2 - 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(*(void *)a1 + 4 * (v2 - 1)));
  *(_DWORD *)(a1 + 12) = v3;
}

uint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 6);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    int v3 = result;
    uint64_t v4 = (char *)result[2];
    int v5 = v2 + 1;
    uint64_t v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    *((_DWORD *)v3 + 6) = v5;
    v3[2] = (uint64_t)v6;
    unint64_t v7 = v3[1];
    if (*v3 > v7)
    {
      memcpy(v6, v4, 8 * v7);
      uint64_t v9 = *v3 - v1 + *((unsigned int *)v3 + 6);
      uint64_t result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v9), &v4[8 * *v3], 8 * v1 - 8 * *v3);
      uint64_t *v3 = v9;
    }
    else
    {
      uint64_t result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    }
    if (v4)
    {
      if ((char *)v3[2] == v4)
      {
        v3[2] = 0;
        *((_DWORD *)v3 + 6) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v8);
    }
  }
  return result;
}

atomic_uchar *volatile **WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(atomic_uchar *volatile **result, atomic_uchar *volatile *a2)
{
  int v3 = result;
  uint64_t v4 = result[1];
  if (*result)
  {
    if ((atomic_uchar *volatile *)((char *)v4 + 1) != *result) {
      goto LABEL_11;
    }
    LODWORD(v5) = *((_DWORD *)result + 6);
  }
  else
  {
    uint64_t v5 = *((unsigned int *)result + 6);
    if (v4)
    {
      if (v4 != (atomic_uchar *volatile *)(v5 - 1)) {
        goto LABEL_11;
      }
    }
    else if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v6 = v5;
  unint64_t v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF) {
    unint64_t v7 = 15;
  }
  if (v7 >= 0xAAAAAAA)
  {
    __break(0xC471u);
    JUMPOUT(0x19860D560);
  }
  uint64_t v8 = (atomic_uchar *volatile **)result[2];
  int v9 = 24 * v7 + 24;
  uint64_t v10 = (atomic_uchar *volatile **)WTF::fastMalloc((WTF *)(24 * v7 + 24));
  *((_DWORD *)v3 + 6) = (v9 & 0xFFFFFFF8) / 0x18;
  v3[2] = (atomic_uchar *volatile *)v10;
  unint64_t v11 = (unint64_t)v3[1];
  if ((unint64_t)*v3 > v11)
  {
    WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(v8, &v8[3 * v11], v10);
    uint64_t v18 = (atomic_uchar *volatile *)((char *)*v3 + *((unsigned int *)v3 + 6) - v6);
    uint64_t result = WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(&v8[3 * (void)*v3], &v8[3 * v6], (atomic_uchar *volatile **)&v3[2][3 * (void)v18]);
    uint64_t *v3 = v18;
  }
  else
  {
    uint64_t result = WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(&v8[3 * (void)*v3], &v8[3 * v11], &v10[3 * (void)*v3]);
  }
  if (v8)
  {
    if (v3[2] == (atomic_uchar *volatile *)v8)
    {
      v3[2] = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    uint64_t result = (atomic_uchar *volatile **)WTF::fastFree((WTF *)v8, v12);
  }
  uint64_t v4 = v3[1];
LABEL_11:
  uint64_t v13 = &v3[2][3 * (void)v4];
  unint64_t v14 = *a2;
  *a2 = 0;
  *uint64_t v13 = v14;
  uint64_t v15 = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  *((void *)v13 + 1) = v15;
  v13[2] = a2[2];
  uint64_t v16 = v3[1];
  if (v16 == (atomic_uchar *volatile *)(*((unsigned int *)v3 + 6) - 1)) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = (atomic_uchar *volatile *)((char *)v16 + 1);
  }
  v3[1] = v17;
  return result;
}

atomic_uchar *volatile **WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(atomic_uchar *volatile **result, atomic_uchar *volatile **a2, atomic_uchar *volatile **a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      unint64_t v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      a3[2] = v5[2];
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)v5 + 1);
      uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

void IPC::Connection::takeAsyncReplyHandlerWithDispatcherWithLockHeld(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
    *a3 = 0;
  }
  else {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 304), &v6, a3);
  }
}

void *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>,WTF::DefaultHash>,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2);
  uint64_t v6 = *a1;
  if (*a1) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if ((void *)v6 == result)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = result[1];
    result[1] = 0;
    uint64_t result = (void *)WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::remove(a1, result);
  }
  *a3 = v7;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>,WTF::DefaultHash>,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a1, *a2);
  if (!result) {
    return v2 + 16 * *(unsigned int *)(v2 - 4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_0,IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,IPC::MessageReceiveQueue *,std::unique_ptr<std::__variant_detail::_Trait>> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t IPC::Encoder::setShouldDispatchMessageWhenWaitingForSyncReply(uint64_t result, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v2 = *(unsigned char **)(result + 528);
      char v3 = *v2 & 0xFC | 1;
LABEL_3:
      *uint64_t v2 = v3;
      return result;
    case 2:
      uint64_t v2 = *(unsigned char **)(result + 528);
      char v3 = *v2 & 0xFC | 2;
      goto LABEL_3;
    case 0:
      uint64_t v2 = *(unsigned char **)(result + 528);
      char v3 = *v2 & 0xFC;
      goto LABEL_3;
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteRenderingBackendProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = v5;
    uint64_t v10 = (uint64_t *)v4;
    do
    {
      if (*v10 != -1)
      {
        if (*v10)
        {
          WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::reinsert(*a1, v10);
          unint64_t v11 = (atomic_uchar *volatile *)*v10;
          *uint64_t v10 = 0;
          if (v11) {
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v11);
          }
        }
        else
        {
          *uint64_t v10 = 0;
        }
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::rehash(a1, v3);
}

unint64_t WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = 40 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        uint64_t v8 = 0;
        uint64_t v9 = 40 * v4;
        do
        {
          uint64_t v10 = v7 + v8;
          unint64_t v11 = (char *)v3 + v8;
          uint64_t v12 = *(void *)((char *)v3 + v8);
          *(void *)((char *)v3 + v8) = 0;
          *(void *)uint64_t v10 = v12;
          *(unsigned char *)(v10 + 8) = *((unsigned char *)v3 + v8 + 8);
          *(unsigned char *)(v10 + 16) = 0;
          *(unsigned char *)(v10 + 32) = 0;
          if (*((unsigned char *)v3 + v8 + 32))
          {
            uint64_t v13 = *((void *)v11 + 2);
            *((void *)v11 + 2) = 0;
            *(void *)(v10 + 16) = v13;
            *(void *)(v10 + 24) = *((void *)v11 + 3);
            *(unsigned char *)(v10 + 32) = 1;
            if (v11[32])
            {
              uint64_t v14 = *((void *)v11 + 2);
              *((void *)v11 + 2) = 0;
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
              }
            }
          }
          uint64_t result = (uint64_t)std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)((char *)v3 + v8), v6);
          v8 += 40;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **IPC::FunctionDispatcherQueue::enqueueMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2);
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)&long long v13 = v6;
  *((void *)&v13 + 1) = v7;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EEA10098;
  *(void *)(v8 + 8) = v12;
  long long v9 = v13;
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0;
  *(_OWORD *)(v8 + 16) = v9;
  uint64_t v14 = v8;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v14);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)&v13);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
}

uint64_t IPC::WorkQueueMessageReceiverQueue::enqueueMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a2);
  uint64_t v7 = *a3;
  *a3 = 0;
  unint64_t v20 = v7;
  uint64_t v8 = *(void *)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v8 + 16));
  uint64_t v21 = v8;
  long long v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *long long v9 = &unk_1EEA10048;
  v9[1] = v19;
  uint64_t v10 = v20;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v9[2] = v10;
  uint64_t v11 = v21;
  uint64_t v21 = 0;
  unsigned int v22 = v9;
  v9[3] = v11;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, &v22);
  long long v13 = v22;
  unsigned int v22 = 0;
  if (v13) {
    (*(void (**)(void *))(*v13 + 8))(v13);
  }
  uint64_t v14 = v21;
  uint64_t v21 = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 16), v12);
  }
  uint64_t v15 = v20;
  unint64_t v20 = 0;
  if (v15)
  {
    IPC::Decoder::~Decoder(v15);
    WTF::fastFree(v17, v18);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
}

void *___ZL21dlsym_callback_notifyPKc_block_invoke(uint64_t a1)
{
  xpc_object_t empty = xpc_dictionary_create_empty();
  unint64_t v3 = empty;
  if (empty)
  {
    xpc_dictionary_set_string(empty, "symbol", *(const char **)(a1 + 32));
    xpc_dictionary_set_string(v3, "executable_path", byte_1EB3592E8);
  }
  else
  {
    WTFLogAlways();
  }
  return v3;
}

BOOL WebKit::WebLocalFrameLoaderClient::allowScript(WebKit::WebLocalFrameLoaderClient *this, int a2)
{
  if (!a2) {
    return 0;
  }
  if (*((void *)this + 5)) {
    uint64_t v2 = WTF::RefPtr<WebKit::PluginView,WTF::RawPtrTraits<WebKit::PluginView>,WTF::DefaultRefDerefTraits<WebKit::PluginView>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 == 0;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_1::operator() const(WTF::ASCIILiteral const&)::{lambda(int)#1}::operator() const(int)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D10A0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WebKit::RemoteScrollingCoordinator::scheduleTreeStateCommit(WebKit::RemoteScrollingCoordinator *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 19) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(void))(**(void **)(v2 + 72) + 264))();
}

uint64_t __copy_helper_block_e8_32c574_ZTSKZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS4_33SupportsObjectIdentifierNullStateE1EEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISO_EEEENS4_11DefaultHashISM_EENS4_10HashTraitsISM_EENSU_ISR_EENS4_15HashTableTraitsEEEE3__0(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 32, a2 + 32);
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerRepaintCount(uint64_t a1)
{
  return *(unsigned int *)(a1 - 428);
}

void sub_19860DFB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t WebKit::PlatformCALayerRemote::setPosition(int8x16_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  a1[26].i32[2] = *(_DWORD *)(a2 + 8);
  a1[26].i64[0] = v2;
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x40uLL));
  a1[4] = result;
  return result;
}

void WebKit::PlatformCALayerRemote::setOpaque(WebKit::PlatformCALayerRemote *this, char a2)
{
  *((unsigned char *)this + 660) = a2;
  *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x800000000uLL));
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::needsDisplay(WebKit::PlatformCALayerRemote *this)
{
  int8x16_t result = (WebKit::RemoteLayerBackingStore *)*((void *)this + 59);
  if (result) {
    return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStore::needsDisplay(result);
  }
  return result;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
}
  }

BOOL WebKit::WebLocalFrameLoaderClient::hasHTMLView(WebKit::WebLocalFrameLoaderClient *this)
{
  return *((unsigned char *)this + 50) == 0;
}

float WebKit::PlatformCALayerRemote::position(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 104);
}

void *__copy_helper_block_e8_32c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(void *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 32);
  result[4] = v2;
  if (v2) {
    return v2;
  }
  return result;
}

IPC::Encoder **WTF::Detail::CallableWrapper<IPC::FunctionDispatcherQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return IPC::Connection::dispatchMessageReceiverMessage(*(void *)(a1 + 8), *(void *)(a1 + 24), (unsigned __int16 **)(a1 + 16));
}

uint64_t WebKit::PlatformCALayerRemote::layerPool(WebKit::PlatformCALayerRemote *this)
{
  uint64_t v1 = *((void *)this + 104);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2) {
    return v2 + 96;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::PlatformCALayerRemote::superlayer(WebKit::PlatformCALayerRemote *this)
{
  uint64_t v1 = *((void *)this + 101);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void sub_19860E328(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Timer::fired(WebCore::Timer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 16))();
}

void WebKit::PlatformCALayerRemote::setContentsScale(WebKit::PlatformCALayerRemote *this, float a2)
{
  if (*((unsigned char *)this + 12) != 3)
  {
    *((float *)this + 153) = a2;
    *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x20000uLL));
    WebKit::PlatformCALayerRemote::updateBackingStore(this);
  }
}

uint64_t WebKit::WebChromeClient::preferredScrollbarOverlayStyle(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(unsigned __int16 *)(v2 + 1821);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::Color>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::Color>(a1, v6);
  char v4 = v7;
  if (v7)
  {
    WebCore::Color::Color();
    char v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return std::optional<WebCore::Color>::~optional((uint64_t)v6, v3);
}

void IPC::ArgumentCoder<WebCore::DisplayList::SetState,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::decode(a1, v10);
  if (!v11)
  {
    char v4 = (void *)*a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0) {
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v4);
    }
  }
  if (*a1)
  {
    if (!v11) {
      __break(1u);
    }
    MEMORY[0x19972FAF0](v9, v10);
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)a2, (uint64_t)v9);
    a2[344] = 1;
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v9, v5);
  }
  else
  {
    *a2 = 0;
    a2[344] = 0;
  }
  if (v11) {
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v10, v4);
  }
}

void sub_19860E548(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (LOBYTE(STACK[0x2B0])) {
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)&a52, a2);
  }
  _Unwind_Resume(a1);
}

void sub_19860E578()
{
}

void IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::decode(&v225, a1);
  if (!v228)
  {
    uint64_t v83 = *v2;
    uint64_t v84 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v85 = v2[3];
    if (v85 && v84 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v85 + 16))(v85, v83);
    }
  }
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::decode(&v221, v2);
  if (!v224)
  {
    uint64_t v87 = *v2;
    uint64_t v88 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v89 = v2[3];
    if (v89)
    {
      if (v88) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v89 + 16))(v89, v87);
      }
    }
  }
  unint64_t v3 = v2[1];
  uint64_t v4 = *v2;
  unint64_t v5 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v92 = v2[3];
    if (v92)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v92 + 16))(v92);
        uint64_t v91 = *v2;
        uint64_t v90 = v2[1];
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v91 = 0;
      }
    }
    goto LABEL_159;
  }
  uint64_t v7 = (unsigned int *)(v4 + v5);
  v2[2] = (uint64_t)(v7 + 1);
  if (!v4)
  {
    uint64_t v90 = v3;
    uint64_t v91 = 0;
LABEL_159:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v93 = v2[3];
    if (v93)
    {
      if (v90)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v93 + 16))(v93, v91, v90);
        uint64_t v4 = *v2;
        unint64_t v3 = v2[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_160;
  }
  uint64_t v8 = *v7;
  if (v8 < 0x20000)
  {
    unint64_t v178 = v8 | 0x100000000;
    goto LABEL_11;
  }
LABEL_160:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v94 = v2[3];
  if (v94)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v94 + 16))(v94, v4);
      unint64_t v178 = 0;
      uint64_t v4 = *v2;
      unint64_t v3 = v2[1];
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v4 = 0;
  unint64_t v178 = 0;
LABEL_11:
  unint64_t v9 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
  if (v3 < v9 || v3 - v9 <= 3)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v102 = v2[3];
    if (v102)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v102 + 16))(v102);
        uint64_t v101 = *v2;
        uint64_t v100 = v2[1];
      }
      else
      {
        uint64_t v100 = 0;
        uint64_t v101 = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = (int *)((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v2[2] = (uint64_t)(v10 + 1);
    if (v4)
    {
      int v176 = *v10;
      int v177 = 0;
      goto LABEL_15;
    }
    uint64_t v100 = v3;
    uint64_t v101 = 0;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v103 = v2[3];
  if (v103 && v100) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v103 + 16))(v103, v101, v100);
  }
  int v176 = 0;
  int v177 = 1;
LABEL_15:
  unsigned __int16 v175 = IPC::Decoder::decode<WebCore::RotationDirection>(v2);
  unint64_t v11 = v2[1];
  uint64_t v12 = *v2;
  unint64_t v13 = v2[2] - *v2;
  if (v11 <= v13)
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v97 = v2[3];
    if (v97)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
        uint64_t v96 = *v2;
        uint64_t v95 = v2[1];
      }
      else
      {
        uint64_t v95 = 0;
        uint64_t v96 = 0;
      }
    }
    goto LABEL_164;
  }
  uint64_t v14 = (unsigned __int8 *)(v12 + v13);
  v2[2] = (uint64_t)(v14 + 1);
  if (!v12)
  {
    uint64_t v95 = v11;
    uint64_t v96 = 0;
LABEL_164:
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v98 = v2[3];
    if (v98)
    {
      if (v95)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v98 + 16))(v98, v96, v95);
        uint64_t v12 = *v2;
        unint64_t v11 = v2[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_165;
  }
  unsigned int v173 = *v14;
  if (v173 < 6)
  {
    int v174 = 0;
    goto LABEL_19;
  }
LABEL_165:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v99 = v2[3];
  if (v99 && v11) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v99 + 16))(v99, v12);
  }
  LOBYTE(v173) = 0;
  int v174 = 1;
LABEL_19:
  int v15 = IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(v2);
  unint64_t v16 = v2[1];
  int v172 = v15;
  if ((v15 & 0xFF0000) == 0)
  {
    uint64_t v104 = *v2;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v105 = v2[3];
    if (!v105 || !v16)
    {
      unint64_t v16 = 0;
      uint64_t v17 = *v2;
LABEL_172:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v106 = v2[3];
      if (v106)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v106 + 16))(v106, v17);
          uint64_t v107 = *v2;
          unint64_t v16 = v2[1];
        }
        else
        {
          uint64_t v107 = 0;
        }
      }
      else
      {
        uint64_t v107 = 0;
        unint64_t v16 = 0;
      }
      goto LABEL_174;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v105 + 16))(v105, v104);
    unint64_t v16 = v2[1];
  }
  uint64_t v17 = *v2;
  unint64_t v18 = v2[2] - *v2;
  if (v16 <= v18) {
    goto LABEL_172;
  }
  uint64_t v19 = (unsigned __int8 *)(v17 + v18);
  v2[2] = (uint64_t)(v19 + 1);
  if (!v17)
  {
    uint64_t v107 = 0;
LABEL_174:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v108 = v2[3];
    if (v108)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v108 + 16))(v108, v107);
        uint64_t v17 = *v2;
        unint64_t v16 = v2[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v16 = 0;
    }
LABEL_176:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v109 = v2[3];
    if (v109 && v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v109 + 16))(v109, v17);
    }
    goto LABEL_177;
  }
  unsigned int v20 = *v19;
  if (v20 >= 2) {
    goto LABEL_176;
  }
  if (v20) {
    goto LABEL_136;
  }
  LOBYTE(v187) = 0;
  char v190 = 0;
  std::optional<WebCore::GraphicsDropShadow>::optional[abi:sn180100]((uint64_t)&v180, &v187);
LABEL_25:
  char v185 = 1;
  if (v190)
  {
    if ((v189[0] & 0x8000000000000) != 0)
    {
      unsigned int v79 = (unsigned int *)(v189[0] & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v189[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v79);
        WTF::fastFree((WTF *)v79, v21);
      }
    }
  }
  while (1)
  {
    unint64_t v22 = v2[1];
    if (!v185)
    {
      uint64_t v110 = *v2;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v111 = v2[3];
      if (!v111 || !v22)
      {
        unint64_t v22 = 0;
        uint64_t v23 = *v2;
LABEL_180:
        uint64_t v112 = 0;
        uint64_t v113 = 0;
        *uint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v114 = v2[3];
        if (v114)
        {
          if (v22)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v114 + 16))(v114, v23);
            uint64_t v113 = *v2;
            uint64_t v112 = v2[1];
          }
          else
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
          }
        }
LABEL_181:
        unint64_t v22 = 0;
        uint64_t v23 = 0;
        *uint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v115 = v2[3];
        if (v115)
        {
          if (v112)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v115 + 16))(v115, v113, v112);
            uint64_t v23 = *v2;
            unint64_t v22 = v2[1];
          }
          else
          {
            unint64_t v22 = 0;
            uint64_t v23 = 0;
          }
        }
LABEL_182:
        *uint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v116 = v2[3];
        if (v116 && v22) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v116 + 16))(v116, v23);
        }
LABEL_183:
        v217[0] = 0;
        char v220 = 0;
        goto LABEL_33;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v111 + 16))(v111, v110);
      unint64_t v22 = v2[1];
    }
    uint64_t v23 = *v2;
    unint64_t v24 = v2[2] - *v2;
    if (v22 <= v24) {
      goto LABEL_180;
    }
    double v25 = (unsigned __int8 *)(v23 + v24);
    v2[2] = (uint64_t)(v25 + 1);
    if (!v23)
    {
      uint64_t v112 = v22;
      uint64_t v113 = 0;
      goto LABEL_181;
    }
    unsigned int v26 = *v25;
    if (v26 >= 2) {
      goto LABEL_182;
    }
    if (v26)
    {
      IPC::Decoder::decode<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>((unsigned int *)&v187, (unint64_t *)v2);
      if (!v192) {
        goto LABEL_183;
      }
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v217, (uint64_t)&v187);
      char v219 = 1;
    }
    else
    {
      LOBYTE(v187) = 0;
      char v192 = 0;
      std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::optional[abi:sn180100](v217, (uint64_t)&v187);
    }
    char v220 = 1;
    if (v192 && v191 != -1) {
      ((void (*)(unsigned char **, uint64_t *))off_1EE9B40F0[v191])(&v186, &v187);
    }
LABEL_33:
    uint64_t v27 = v2[1];
    if (v220)
    {
      unint64_t v28 = v2[1];
    }
    else
    {
      unint64_t v28 = 0;
      uint64_t v117 = *v2;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v118 = v2[3];
      if (v118)
      {
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v118 + 16))(v118, v117, v27);
          unint64_t v28 = v2[1];
        }
        else
        {
          unint64_t v28 = 0;
        }
      }
    }
    int v29 = (char *)*v2;
    unint64_t v30 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
    if (v28 < v30 || v28 - v30 <= 3)
    {
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v121 = v2[3];
      if (v121)
      {
        if (v28)
        {
          (*(void (**)(uint64_t))(*(void *)v121 + 16))(v121);
          uint64_t v120 = *v2;
          uint64_t v119 = v2[1];
        }
        else
        {
          uint64_t v119 = 0;
          uint64_t v120 = 0;
        }
      }
    }
    else
    {
      uint64_t v31 = &v29[v30];
      uint64_t v32 = (uint64_t)&v29[v30 + 4];
      v2[2] = v32;
      if (v29)
      {
        int v170 = *(_DWORD *)v31;
        int v171 = 0;
        goto LABEL_39;
      }
      uint64_t v119 = v28;
      uint64_t v120 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v122 = v2[3];
    if (!v122)
    {
      int v170 = 0;
      uint64_t v119 = 0;
LABEL_190:
      int v29 = 0;
      int v171 = 1;
LABEL_191:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v123 = v2[3];
      if (v123 && v119)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v123 + 16))(v123, v29, v119);
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
      }
      goto LABEL_193;
    }
    if (!v119)
    {
      int v170 = 0;
      goto LABEL_190;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122 + 16))(v122, v120, v119);
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v170 = 0;
    int v171 = 1;
    uint64_t v32 = v2[2];
LABEL_39:
    unint64_t v33 = v32 - (void)v29;
    if (v28 <= v33)
    {
      uint64_t v119 = 0;
      uint64_t v149 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v149 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v149 + 16))(v149);
        int v29 = (char *)*v2;
        uint64_t v119 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_191;
    }
    int v34 = &v29[v33];
    uint64_t v35 = (uint64_t)&v29[v33 + 1];
    v2[2] = v35;
    if (!v29)
    {
      uint64_t v119 = v28;
      goto LABEL_191;
    }
    unsigned int v168 = *v34;
    if (v168 < 5)
    {
      int v169 = 0;
      goto LABEL_43;
    }
LABEL_193:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v124 = v2[3];
    if (!v124 || !v28)
    {
      uint64_t v125 = 0;
      int v29 = 0;
      LOBYTE(v168) = 0;
      int v169 = 1;
LABEL_195:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v126 = v2[3];
      if (v126 && v125)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v126 + 16))(v126, v29, v125);
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
      }
      goto LABEL_197;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v124 + 16))(v124, v29);
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    LOBYTE(v168) = 0;
    int v169 = 1;
    uint64_t v35 = v2[2];
LABEL_43:
    unint64_t v36 = v35 - (void)v29;
    if (v28 <= v36)
    {
      uint64_t v125 = 0;
      uint64_t v157 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v157 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v157 + 16))(v157);
        int v29 = (char *)*v2;
        uint64_t v125 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_195;
    }
    uint64_t v37 = &v29[v36];
    uint64_t v38 = (uint64_t)&v29[v36 + 1];
    v2[2] = v38;
    if (!v29)
    {
      uint64_t v125 = v28;
      goto LABEL_195;
    }
    unsigned int v166 = *v37;
    if (v166 < 4)
    {
      int v167 = 0;
      goto LABEL_47;
    }
LABEL_197:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v127 = v2[3];
    if (!v127 || !v28)
    {
      uint64_t v128 = 0;
      int v29 = 0;
      LOBYTE(v166) = 0;
      int v167 = 1;
LABEL_199:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v129 = v2[3];
      if (v129 && v128)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v129 + 16))(v129, v29, v128);
        unsigned int v42 = 0;
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
        unsigned int v42 = 0;
      }
      goto LABEL_201;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v127 + 16))(v127, v29);
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    LOBYTE(v166) = 0;
    int v167 = 1;
    uint64_t v38 = v2[2];
LABEL_47:
    unint64_t v39 = v38 - (void)v29;
    if (v28 <= v39)
    {
      uint64_t v128 = 0;
      uint64_t v156 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v156 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v156 + 16))(v156);
        int v29 = (char *)*v2;
        uint64_t v128 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_199;
    }
    unsigned int v40 = &v29[v39];
    uint64_t v41 = (uint64_t)&v29[v39 + 1];
    v2[2] = v41;
    if (!v29)
    {
      uint64_t v128 = v28;
      goto LABEL_199;
    }
    unsigned int v42 = *v40;
    if (v42 < 2)
    {
      int v165 = 0;
      char v43 = 1;
      goto LABEL_51;
    }
LABEL_201:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v130 = v2[3];
    if (!v130 || !v28)
    {
      uint64_t v131 = 0;
      int v29 = 0;
      char v164 = 0;
      int v165 = 1;
LABEL_203:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v132 = v2[3];
      if (v132 && v131)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v132 + 16))(v132, v29, v131);
        unsigned int v47 = 0;
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
        unsigned int v47 = 0;
      }
      goto LABEL_205;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v130 + 16))(v130, v29);
    char v43 = 0;
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v165 = 1;
    uint64_t v41 = v2[2];
LABEL_51:
    if (!v42) {
      char v43 = 0;
    }
    char v164 = v43;
    unint64_t v44 = v41 - (void)v29;
    if (v28 <= v44)
    {
      uint64_t v131 = 0;
      uint64_t v155 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v155 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v155 + 16))(v155);
        int v29 = (char *)*v2;
        uint64_t v131 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_203;
    }
    uint64_t v45 = &v29[v44];
    uint64_t v46 = (uint64_t)&v29[v44 + 1];
    v2[2] = v46;
    if (!v29)
    {
      uint64_t v131 = v28;
      goto LABEL_203;
    }
    unsigned int v47 = *v45;
    if (v47 < 2)
    {
      int v163 = 0;
      char v48 = 1;
      goto LABEL_57;
    }
LABEL_205:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v133 = v2[3];
    if (!v133 || !v28)
    {
      uint64_t v134 = 0;
      int v29 = 0;
      char v162 = 0;
      int v163 = 1;
LABEL_207:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v135 = v2[3];
      if (v135 && v134)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v135 + 16))(v135, v29, v134);
        unsigned int v52 = 0;
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
        unsigned int v52 = 0;
      }
      goto LABEL_209;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v133 + 16))(v133, v29);
    char v48 = 0;
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v163 = 1;
    uint64_t v46 = v2[2];
LABEL_57:
    if (!v47) {
      char v48 = 0;
    }
    char v162 = v48;
    unint64_t v49 = v46 - (void)v29;
    if (v28 <= v49)
    {
      uint64_t v134 = 0;
      uint64_t v154 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v154 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v154 + 16))(v154);
        int v29 = (char *)*v2;
        uint64_t v134 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_207;
    }
    uint64_t v50 = &v29[v49];
    uint64_t v51 = (uint64_t)&v29[v49 + 1];
    v2[2] = v51;
    if (!v29)
    {
      uint64_t v134 = v28;
      goto LABEL_207;
    }
    unsigned int v52 = *v50;
    if (v52 < 2)
    {
      int v161 = 0;
      char v53 = 1;
      goto LABEL_63;
    }
LABEL_209:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v136 = v2[3];
    if (!v136 || !v28)
    {
      uint64_t v137 = 0;
      int v29 = 0;
      char v160 = 0;
      int v161 = 1;
LABEL_211:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v138 = v2[3];
      if (v138 && v137)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v138 + 16))(v138, v29, v137);
        unsigned int v57 = 0;
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
        unsigned int v57 = 0;
      }
      goto LABEL_213;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v136 + 16))(v136, v29);
    char v53 = 0;
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v161 = 1;
    uint64_t v51 = v2[2];
LABEL_63:
    if (!v52) {
      char v53 = 0;
    }
    char v160 = v53;
    unint64_t v54 = v51 - (void)v29;
    if (v28 <= v54)
    {
      uint64_t v137 = 0;
      uint64_t v153 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v153 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v153 + 16))(v153);
        int v29 = (char *)*v2;
        uint64_t v137 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_211;
    }
    int v55 = &v29[v54];
    uint64_t v56 = (uint64_t)&v29[v54 + 1];
    v2[2] = v56;
    if (!v29)
    {
      uint64_t v137 = v28;
      goto LABEL_211;
    }
    unsigned int v57 = *v55;
    if (v57 < 2)
    {
      int v159 = 0;
      char v58 = 1;
      goto LABEL_69;
    }
LABEL_213:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v139 = v2[3];
    if (!v139 || !v28)
    {
      char v59 = 0;
      uint64_t v140 = 0;
      int v29 = 0;
      int v159 = 1;
LABEL_215:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v141 = v2[3];
      if (v141 && v140)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v141 + 16))(v141, v29, v140);
        unsigned int v63 = 0;
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
        unsigned int v63 = 0;
      }
      goto LABEL_217;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v139 + 16))(v139, v29);
    char v58 = 0;
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v159 = 1;
    uint64_t v56 = v2[2];
LABEL_69:
    if (v57) {
      char v59 = v58;
    }
    else {
      char v59 = 0;
    }
    unint64_t v60 = v56 - (void)v29;
    if (v28 <= v60)
    {
      uint64_t v140 = 0;
      uint64_t v152 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v152 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v152 + 16))(v152);
        int v29 = (char *)*v2;
        uint64_t v140 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_215;
    }
    uint64_t v61 = &v29[v60];
    uint64_t v62 = (uint64_t)&v29[v60 + 1];
    v2[2] = v62;
    if (!v29)
    {
      uint64_t v140 = v28;
      goto LABEL_215;
    }
    unsigned int v63 = *v61;
    if (v63 < 2)
    {
      int v64 = 0;
      char v65 = 1;
      goto LABEL_76;
    }
LABEL_217:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v142 = v2[3];
    if (!v142 || !v28)
    {
      char v66 = 0;
      uint64_t v143 = 0;
      int v29 = 0;
      int v64 = 1;
LABEL_219:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v144 = v2[3];
      if (v144 && v143)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v144 + 16))(v144, v29, v143);
        unsigned int v70 = 0;
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
        unsigned int v70 = 0;
      }
      goto LABEL_221;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v142 + 16))(v142, v29);
    char v65 = 0;
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v64 = 1;
    uint64_t v62 = v2[2];
LABEL_76:
    if (v63) {
      char v66 = v65;
    }
    else {
      char v66 = 0;
    }
    unint64_t v67 = v62 - (void)v29;
    if (v28 <= v67)
    {
      uint64_t v143 = 0;
      uint64_t v151 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v151 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v151 + 16))(v151);
        int v29 = (char *)*v2;
        uint64_t v143 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_219;
    }
    uint64_t v68 = &v29[v67];
    uint64_t v69 = (uint64_t)&v29[v67 + 1];
    v2[2] = v69;
    if (!v29)
    {
      uint64_t v143 = v28;
      goto LABEL_219;
    }
    unsigned int v70 = *v68;
    if (v70 < 2)
    {
      int v71 = 0;
      char v72 = 1;
      goto LABEL_83;
    }
LABEL_221:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v145 = v2[3];
    if (!v145 || !v28)
    {
      char v73 = 0;
      uint64_t v146 = 0;
      int v29 = 0;
      int v71 = 1;
LABEL_223:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v147 = v2[3];
      if (v147 && v146)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v147 + 16))(v147, v29, v146);
        int v29 = (char *)*v2;
        unint64_t v28 = v2[1];
      }
      else
      {
        unint64_t v28 = 0;
        int v29 = 0;
      }
      goto LABEL_225;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v145 + 16))(v145, v29);
    char v72 = 0;
    int v29 = (char *)*v2;
    unint64_t v28 = v2[1];
    int v71 = 1;
    uint64_t v69 = v2[2];
LABEL_83:
    if (v70) {
      char v73 = v72;
    }
    else {
      char v73 = 0;
    }
    unint64_t v74 = v69 - (void)v29;
    if (v28 <= v74)
    {
      uint64_t v146 = 0;
      uint64_t v150 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v150 && v28)
      {
        (*(void (**)(uint64_t))(*(void *)v150 + 16))(v150);
        int v29 = (char *)*v2;
        uint64_t v146 = v2[1];
      }
      else
      {
        int v29 = 0;
      }
      goto LABEL_223;
    }
    uint64_t v75 = &v29[v74];
    v2[2] = (uint64_t)(v75 + 1);
    if (!v29)
    {
      uint64_t v146 = v28;
      goto LABEL_223;
    }
    unsigned int v76 = *v75;
    if (v76 < 3)
    {
      uint64_t v2 = 0;
      goto LABEL_90;
    }
LABEL_225:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v148 = v2[3];
    if (!v148) {
      break;
    }
    if (!v28) {
      break;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v148 + 16))(v148, v29);
    if (!*v2) {
      break;
    }
    LOBYTE(v76) = 0;
    uint64_t v2 = (uint64_t *)1;
LABEL_90:
    LODWORD(v186) = 0;
    WebCore::GraphicsContextState::GraphicsContextState();
    if (!v228) {
      goto LABEL_135;
    }
    WebCore::Color::operator=();
    if (v191 == -1)
    {
      if (v227 != -1)
      {
LABEL_93:
        char v186 = v189;
        ((void (*)(unsigned char **))off_1EE9B4C88[v227])(&v186);
      }
    }
    else
    {
      if (v227 != -1) {
        goto LABEL_93;
      }
      ((void (*)(unsigned char **, void *))off_1EE9B40C0[v191])(&v186, v189);
      int v191 = -1;
    }
    if (!v224) {
      goto LABEL_135;
    }
    WebCore::Color::operator=();
    uint64_t v77 = v193;
    if (v194 == -1)
    {
      if (v223 != -1)
      {
LABEL_97:
        char v186 = v193;
        ((void (*)(unsigned char **))off_1EE9B4C88[v223])(&v186);
      }
    }
    else
    {
      if (v223 != -1) {
        goto LABEL_97;
      }
      ((void (*)(unsigned char **, unsigned char *))off_1EE9B40C0[v194])(&v186, v193);
      int v194 = -1;
    }
    if (HIDWORD(v178))
    {
      int v195 = v178;
      if (!v177)
      {
        int v196 = v176;
        if (v175 > 0xFFu)
        {
          char v197 = v175;
          if (!v174)
          {
            char v198 = v173;
            if ((v172 & 0xFF0000) != 0)
            {
              __int16 v199 = v172;
              if (v185)
              {
                if (v203 == v184)
                {
                  if (v203)
                  {
                    uint64_t v200 = v180;
                    int v201 = v181;
                    WebCore::Color::operator=();
                    uint64_t v202 = v183;
                  }
                }
                else if (v203)
                {
                  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::reset[abi:sn180100]((uint64_t)&v200, v77);
                }
                else
                {
                  uint64_t v200 = v180;
                  int v201 = v181;
                  WebCore::Color::Color();
                  uint64_t v202 = v183;
                  char v203 = 1;
                }
                if (v220)
                {
                  if (v206 == v219)
                  {
                    if (v206) {
                      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>>((uint64_t)v204, (uint64_t)v217);
                    }
                  }
                  else
                  {
                    if (v206)
                    {
                      if (v205 != -1) {
                        ((void (*)(unsigned char **, unsigned char *))off_1EE9B40F0[v205])(&v186, v204);
                      }
                      char v158 = 0;
                      int v205 = -1;
                    }
                    else
                    {
                      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v204, (uint64_t)v217);
                      char v158 = 1;
                    }
                    char v206 = v158;
                  }
                  if (!v171)
                  {
                    int v207 = v170;
                    if (!v169)
                    {
                      char v208 = v168;
                      if (!v167)
                      {
                        char v209 = v166;
                        if (!v165)
                        {
                          char v210 = v164;
                          if (!v163)
                          {
                            char v211 = v162;
                            if (!v161)
                            {
                              char v212 = v160;
                              if (!v159)
                              {
                                char v213 = v59;
                                if (!v64)
                                {
                                  char v214 = v66;
                                  if (!v71)
                                  {
                                    char v215 = v73;
                                    if (!v2)
                                    {
                                      char v216 = v76;
                                      WebCore::GraphicsContextState::GraphicsContextState((uint64_t)a2, (uint64_t)&v187);
                                      a2[344] = 1;
                                      WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)&v187, v78);
                                      goto LABEL_122;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_135:
    __break(1u);
LABEL_136:
    IPC::Decoder::decode<WebCore::GraphicsDropShadow>((uint64_t)&v187, (unint64_t *)v2);
    if (v190)
    {
      uint64_t v180 = v187;
      int v181 = v188;
      WebCore::Color::Color();
      uint64_t v183 = v189[1];
      char v184 = 1;
      goto LABEL_25;
    }
LABEL_177:
    LOBYTE(v180) = 0;
    char v185 = 0;
  }
  *a2 = 0;
  a2[344] = 0;
LABEL_122:
  if (v220 && v219 && v218 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1EE9B40F0[v218])(&v187, v217);
  }
  if (v185)
  {
    if (v184)
    {
      if ((v182 & 0x8000000000000) != 0)
      {
        uint64_t v80 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v80);
          WTF::fastFree((WTF *)v80, v29);
        }
      }
    }
  }
  if (v224)
  {
    if (v223 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_1EE9B40C0[v223])(&v187, &v222);
    }
    int v223 = -1;
    if ((v221 & 0x8000000000000) != 0)
    {
      char v81 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v221 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v81);
        WTF::fastFree((WTF *)v81, v29);
      }
    }
  }
  if (v228)
  {
    if (v227 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_1EE9B40C0[v227])(&v187, &v226);
    }
    int v227 = -1;
    if ((v225 & 0x8000000000000) != 0)
    {
      char v82 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v225 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v82);
        WTF::fastFree((WTF *)v82, v29);
      }
    }
  }
}

void sub_19860FE54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,char a28,int a29,__int16 a30,int a31,__int16 a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a44 && a42 != -1) {
    ((void (*)(__int16 *, __int16 *))off_1EE9B40F0[a42])(&a30, &a32);
  }
  if (a28)
  {
    if (a26)
    {
      if ((a24 & 0x8000000000000) != 0)
      {
        uint64_t v77 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v77);
          WTF::fastFree((WTF *)v77, a2);
        }
      }
    }
  }
  if (LOBYTE(STACK[0x2B8]))
  {
    uint64_t v73 = LODWORD(STACK[0x2B0]);
    if (v73 != -1) {
      ((void (*)(char *, unint64_t *))off_1EE9B40C0[v73])(&a71, &STACK[0x270]);
    }
    LODWORD(STACK[0x2B0]) = -1;
    unint64_t v74 = STACK[0x260];
    if ((STACK[0x260] & 0x8000000000000) != 0)
    {
      unsigned int v79 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v79);
        WTF::fastFree((WTF *)v79, a2);
      }
    }
  }
  if (*(unsigned char *)(v71 - 104))
  {
    uint64_t v75 = *(unsigned int *)(v71 - 112);
    if (v75 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B40C0[v75])(&a71, v71 - 176);
    }
    *(_DWORD *)(v71 - 112) = -1;
    uint64_t v76 = *(void *)(v71 - 192);
    if ((v76 & 0x8000000000000) != 0)
    {
      unint64_t v78 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v78);
        WTF::fastFree((WTF *)v78, a2);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsContextState::GraphicsContextState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebCore::Color::Color();
  std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100](v4 + 16, a2 + 16);
  WebCore::Color::Color();
  std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100](a1 + 104, a2 + 104);
  uint64_t v5 = *(void *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 176) = v5;
  std::optional<WebCore::GraphicsDropShadow>::optional[abi:sn180100](a1 + 192, (uint64_t *)(a2 + 192));
  std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::optional[abi:sn180100]((unsigned char *)(a1 + 232), a2 + 232);
  uint64_t v6 = *(void *)(a2 + 328);
  *(void *)(a1 + 333) = *(void *)(a2 + 333);
  *(void *)(a1 + 328) = v6;
  return a1;
}

void sub_198610130(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 224))
  {
    uint64_t v17 = *(void *)(v13 + 208);
    if ((v17 & 0x8000000000000) != 0)
    {
      unint64_t v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
  }
  uint64_t v19 = *(unsigned int *)(v13 + 168);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B40C0[v19])(&a12, v15);
  }
  *(_DWORD *)(v13 + 168) = -1;
  uint64_t v20 = *(void *)(v13 + 88);
  if ((v20 & 0x8000000000000) != 0)
  {
    uint64_t v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  uint64_t v22 = *(unsigned int *)(v13 + 80);
  if (v22 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B40C0[v22])(&a13, v14);
  }
  *(_DWORD *)(v13 + 80) = -1;
  if ((*(void *)v13 & 0x8000000000000) != 0)
  {
    uint64_t v23 = (unsigned int *)(*(void *)v13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 64);
  if (v3 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_1EE9B40D8[v3])(v5, a1, a2);
    *(_DWORD *)(a1 + 64) = v3;
  }
  return a1;
}

void sub_1986102A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 64);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B40C0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 64) = -1;
  _Unwind_Resume(exception_object);
}

unsigned char *std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::optional[abi:sn180100](unsigned char *result, uint64_t a2)
{
  *int8x16_t result = 0;
  result[88] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v2 = result;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)result, a2);
    int8x16_t result = v2;
    v2[88] = 1;
  }
  return result;
}

void sub_198610330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(a9 + 88))
  {
    uint64_t v14 = *(unsigned int *)(a9 + 80);
    if (v14 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B40F0[v14])(&a13, a9);
    }
    *(_DWORD *)(a9 + 80) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::GraphicsDropShadow>::optional[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v5 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(void *)a1 = v5;
    WebCore::Color::Color();
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_1986103F4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t v5 = *v3;
    if ((*v3 & 0x8000000000000) != 0)
    {
      uint64_t v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(*(void *)result + 64);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    if (v1 != -1) {
      int8x16_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B40C0[v1])(&v3, v2);
    }
    *(_DWORD *)(v2 + 64) = 0;
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::SourceBrush,void>::decode(unsigned char *a1, uint64_t *a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int8x16_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v43);
  if (!v44)
  {
    uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    int8x16_t result = (unsigned int *)a2[3];
    if (result && v19 != 0) {
      int8x16_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v18);
    }
  }
  unint64_t v5 = a2[1];
  uint64_t v6 = (unsigned char *)*a2;
  unint64_t v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        uint64_t v22 = *a2;
        unint64_t v21 = a2[1];
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_54;
  }
  uint64_t v8 = &v6[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v21 = v5;
    uint64_t v22 = 0;
LABEL_54:
    *a2 = 0;
    a2[1] = 0;
    int8x16_t result = (unsigned int *)a2[3];
    if (result && v21) {
      int8x16_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, unint64_t))(*(void *)result + 16))(result, v22, v21);
    }
    goto LABEL_55;
  }
  unsigned int v9 = *v8;
  if (v9 >= 3)
  {
LABEL_55:
    v63[0] = 0;
    char v66 = 0;
    goto LABEL_7;
  }
  if (!*v8)
  {
    int v65 = 0;
    char v66 = 1;
    goto LABEL_7;
  }
  if (v9 != 1) {
    goto LABEL_91;
  }
  if (v5 <= v8 + 1 - v6)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25)
    {
      (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
      uint64_t v37 = *a2;
      uint64_t v38 = a2[1];
      uint64_t v39 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v39)
      {
        if (v38) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37);
        }
      }
    }
  }
  else
  {
    uint64_t v10 = v8 + 2;
    a2[2] = (uint64_t)(v8 + 2);
    unsigned int v11 = v8[1];
    if (v11 < 2)
    {
      if (v11)
      {
        unint64_t v12 = ((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6;
        if (v5 < v12 || v5 - v12 <= 7)
        {
          unint64_t v33 = 0;
          int v34 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v35 = a2[3];
          if (v35)
          {
            (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
            unint64_t v33 = 0;
            uint64_t v40 = *a2;
            uint64_t v41 = a2[1];
            uint64_t v42 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            int v34 = 0;
            if (v42)
            {
              if (v41)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v42 + 16))(v42, v40, v41, 0);
                if (*a2) {
                  goto LABEL_90;
                }
                int v34 = 0;
                unint64_t v33 = a2[1];
              }
            }
          }
        }
        else
        {
          uint64_t v13 = *(void *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
          a2[2] = ((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((unint64_t)(v13 - 1) < 0xFFFFFFFFFFFFFFFELL)
          {
            uint64_t v52 = v13;
            int v14 = 1;
            int v53 = 1;
            goto LABEL_28;
          }
          unint64_t v33 = v5;
          int v34 = v6;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v36 = a2[3];
        if (v36 && v33) {
          (*(void (**)(uint64_t, unsigned char *, unint64_t))(*(void *)v36 + 16))(v36, v34, v33);
        }
        int v14 = 0;
      }
      else
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>((unint64_t *)a2, (uint64_t)&v45);
        int v14 = v46;
        if ((_BYTE)v46)
        {
          uint64_t v17 = v45;
          uint64_t v45 = 0;
          uint64_t v52 = v17;
          int v53 = 0;
          WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v45, v16);
          int v14 = 1;
          goto LABEL_28;
        }
      }
      LOBYTE(v52) = 0;
LABEL_28:
      char v54 = v14;
      if (v14) {
        goto LABEL_29;
      }
      goto LABEL_62;
    }
  }
  LOBYTE(v52) = 0;
  char v54 = 0;
LABEL_62:
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v28 = a2[3];
  if (v28 && v27) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
  }
LABEL_29:
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a2, (uint64_t)v50);
  int v15 = v51;
  if (!v51)
  {
    uint64_t v29 = *a2;
    uint64_t v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v31 = a2[3];
    if (v31)
    {
      if (v30) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
      }
    }
  }
  if (*a2)
  {
    if (!v54) {
      goto LABEL_90;
    }
    std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::__impl[abi:sn180100]((uint64_t)&v45, (uint64_t)&v52);
    if (!v15) {
      goto LABEL_90;
    }
    long long v47 = v50[0];
    long long v48 = v50[1];
    long long v49 = v50[2];
    std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::__impl[abi:sn180100]((uint64_t)&v56, (uint64_t)&v45);
    long long v58 = v47;
    long long v59 = v48;
    long long v60 = v49;
    char v61 = 1;
    if (v46 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9B4CA0[v46])(&v55, &v45);
    }
  }
  else
  {
    LOBYTE(v56) = 0;
    char v61 = 0;
  }
  if (v54 && v53 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9B4CA0[v53])(&v45, &v52);
  }
  if (!v61)
  {
    uint64_t v6 = (unsigned char *)*a2;
    uint64_t v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    int8x16_t result = (unsigned int *)a2[3];
    if (!result) {
      goto LABEL_55;
    }
    if (!v32) {
      goto LABEL_55;
    }
    int8x16_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned char *))(*(void *)result + 16))(result, v6);
    if (!v61) {
      goto LABEL_55;
    }
  }
  int8x16_t result = (unsigned int *)std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::__impl[abi:sn180100]((uint64_t)v64, (uint64_t)&v56);
  v64[1] = v58;
  v64[2] = v59;
  v64[3] = v60;
  int v65 = 1;
  char v66 = 1;
  if (v61 && v57 != -1) {
    int8x16_t result = (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9B4CA0[v57])(&v45, &v56);
  }
  while (1)
  {
LABEL_7:
    if (!v66)
    {
      uint64_t v6 = (unsigned char *)*a2;
      uint64_t v24 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      int8x16_t result = (unsigned int *)a2[3];
      if (result)
      {
        if (v24) {
          int8x16_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned char *))(*(void *)result + 16))(result, v6);
        }
      }
    }
    if (!*a2)
    {
      *a1 = 0;
      a1[88] = 0;
      goto LABEL_14;
    }
    if (v44 && v66) {
      break;
    }
LABEL_90:
    __break(1u);
LABEL_91:
    int8x16_t result = (unsigned int *)IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::decode<IPC::Decoder,0ul,1ul>((uint64_t)v63, a2);
  }
  WebCore::SourceBrush::SourceBrush();
  WebCore::Color::Color();
  int8x16_t result = (unsigned int *)std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100]((uint64_t)(a1 + 16), (uint64_t)&v58);
  a1[88] = 1;
  if (v62 != -1) {
    int8x16_t result = (unsigned int *)((uint64_t (*)(uint64_t *, long long *))off_1EE9B40C0[v62])(&v45, &v58);
  }
  int v62 = -1;
  if ((v56 & 0x8000000000000) != 0)
  {
    int8x16_t result = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      int8x16_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
LABEL_14:
  if (v66 && v65 != -1) {
    int8x16_t result = (unsigned int *)((uint64_t (*)(uint64_t *, _OWORD *))off_1EE9B40C0[v65])(&v56, v64);
  }
  if (v44 && (v43 & 0x8000000000000) != 0)
  {
    int8x16_t result = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void sub_198610B80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,int a32,int a33,char a34,int a35,int a36,__int16 a37,char a38,char a39,char a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a49 && a42 != -1) {
    ((void (*)(__int16 *, char *))off_1EE9B4CA0[a42])(&a12, &a40);
  }
  if (a10 && (a9 & 0x8000000000000) != 0)
  {
    uint64_t v50 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198610CDC()
{
}

unsigned int *IPC::Decoder::decode<WebCore::Color>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  int8x16_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    int8x16_t result = (unsigned int *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198610D54(_Unwind_Exception *a1, void *a2)
{
  std::optional<WebCore::Color>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *IPC::ArgumentCoder<WebCore::Color,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  int8x16_t result = (unsigned int *)IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::decode<IPC::Decoder>(a1, (uint64_t)v10);
  if (!v11)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    int8x16_t result = (unsigned int *)a1[3];
    if (result && v7 != 0) {
      int8x16_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  if (*a1)
  {
    if (v11)
    {
      WebCore::Color::Color();
      int8x16_t result = (unsigned int *)WebCore::Color::Color();
      a2[8] = 1;
      if ((*(void *)v9 & 0x8000000000000) != 0)
      {
        int8x16_t result = (unsigned int *)(*(void *)v9 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v5);
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void sub_198610E4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    uint64_t v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *int8x16_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *v2;
        unint64_t v10 = v2[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_11;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v10 = v4;
    uint64_t v11 = 0;
LABEL_11:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v13 = v2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *v2;
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      int8x16_t result = IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::decode(result, (uint64_t)v16);
      if (v17)
      {
        *(_OWORD *)a2 = *(_OWORD *)v16;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v16[12];
        char v9 = 1;
        *(unsigned char *)(a2 + 28) = 1;
      }
      else
      {
        uint64_t v14 = *v2;
        uint64_t v15 = v2[1];
        *uint64_t v2 = 0;
        v2[1] = 0;
        int8x16_t result = (uint64_t *)v2[3];
        if (result)
        {
          if (v15) {
            int8x16_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v14);
          }
        }
        char v9 = 0;
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 28) = 0;
      char v9 = 1;
    }
    *(unsigned char *)(a2 + 32) = v9;
    return result;
  }
LABEL_12:
  *uint64_t v2 = 0;
  v2[1] = 0;
  int8x16_t result = (uint64_t *)v2[3];
  if (result && v4) {
    int8x16_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

void *IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unsigned __int8 *)a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6) {
    goto LABEL_22;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    uint64_t v19 = (uint64_t)v4;
    uint64_t v20 = 0;
    goto LABEL_23;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (!v23 || !v4)
    {
      char v12 = 0;
      uint64_t v14 = 0;
      uint64_t v5 = 0;
      int v10 = 1;
      goto LABEL_27;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v5);
    char v11 = 0;
    uint64_t v5 = *a1;
    unint64_t v4 = (unsigned __int8 *)a1[1];
    int v10 = 1;
    uint64_t v8 = a1[2];
LABEL_5:
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    unint64_t v13 = v8 - v5;
    if ((unint64_t)v4 <= v13)
    {
      uint64_t v14 = 0;
      uint64_t v26 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v26 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t v5 = *a1;
        uint64_t v14 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_27;
    }
    uint64_t v14 = (unsigned __int8 *)(v5 + v13);
    a1[2] = (uint64_t)(v14 + 1);
    if (!v5)
    {
      uint64_t v14 = v4;
LABEL_27:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v24 = a1[3];
      if (v24)
      {
        if (v14)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v24 + 16))(v24, v5, v14);
          LODWORD(v14) = 0;
          uint64_t v5 = *a1;
          unint64_t v4 = (unsigned __int8 *)a1[1];
        }
        else
        {
          unint64_t v4 = 0;
          uint64_t v5 = 0;
        }
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
        LODWORD(v14) = 0;
      }
LABEL_29:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v25 = a1[3];
      if (v25)
      {
        int v27 = (int)v14;
        if (v4) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v5);
        }
        char v16 = 0;
        int v15 = 1;
        LODWORD(v14) = v27;
      }
      else
      {
        char v16 = 0;
        int v15 = 1;
      }
      goto LABEL_12;
    }
    LODWORD(v14) = *v14;
    if (v14 >= 2) {
      goto LABEL_29;
    }
    int v15 = 0;
    char v16 = 1;
LABEL_12:
    char v17 = v14 ? v16 : 0;
    int8x16_t result = IPC::Decoder::decode<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>>(a1, &v28);
    if (!*a1) {
      break;
    }
    if (!v10 && !v15 && v30)
    {
      *(_OWORD *)&v31[2] = v28;
      *(void *)&v31[18] = v29;
      *(unsigned char *)a2 = v12;
      *(unsigned char *)(a2 + 1) = v17;
      *(_OWORD *)(a2 + 2) = *(_OWORD *)v31;
      *(_OWORD *)(a2 + 12) = *(_OWORD *)&v31[10];
      *(unsigned char *)(a2 + 28) = 1;
      return result;
    }
    __break(1u);
LABEL_22:
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *a1;
        uint64_t v19 = a1[1];
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22 && v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20, v19);
      unsigned int v9 = 0;
      uint64_t v5 = *a1;
      unint64_t v4 = (unsigned __int8 *)a1[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

void *IPC::Decoder::decode<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v5, v4);
        uint64_t v11 = *a1;
        unint64_t v10 = a1[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v10 = v4;
    uint64_t v11 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
    }
    goto LABEL_8;
  }
  unint64_t v8 = *v7;
  if (v8 < 2)
  {
    int8x16_t result = IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder>(a1, v8, (uint64_t)a2);
    if (a2[24]) {
      return result;
    }
    goto LABEL_9;
  }
LABEL_8:
  *a2 = 0;
  a2[24] = 0;
LABEL_9:
  uint64_t v14 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  int8x16_t result = (void *)a1[3];
  if (result && v14)
  {
    int v15 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v15();
  }
  return result;
}

void *IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    return (void *)IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder,0ul>((uint64_t)result, a2, a3);
  }
  else
  {
    unint64_t v3 = result[1];
    uint64_t v4 = *result;
    unint64_t v5 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
    if (v3 >= v5 && v3 - v5 > 3)
    {
      uint64_t v7 = (_DWORD *)(v4 + v5);
      result[2] = v7 + 1;
      if (v4)
      {
        *(_DWORD *)a3 = *v7;
        *(_DWORD *)(a3 + 20) = 0;
        *(unsigned char *)(a3 + 24) = 1;
        return result;
      }
      unint64_t v8 = v3;
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      *int8x16_t result = 0;
      result[1] = 0;
      uint64_t v10 = result[3];
      if (v10)
      {
        uint64_t v14 = result;
        uint64_t v16 = a3;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v4, v3);
          int8x16_t result = v14;
          a3 = v16;
          uint64_t v9 = *v14;
          unint64_t v8 = v14[1];
        }
        else
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
        }
      }
    }
    *int8x16_t result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (!v11 || !v8) {
      goto LABEL_11;
    }
    uint64_t v15 = a3;
    uint64_t v12 = result;
    int8x16_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    if (!*v12)
    {
      uint64_t v13 = v12[1];
      int8x16_t result = (void *)v12[3];
      void *v12 = 0;
      v12[1] = 0;
      a3 = v15;
      if (result)
      {
        if (v13)
        {
          int8x16_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 16))(result, 0);
          a3 = v15;
        }
      }
LABEL_11:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
      return result;
    }
    __break(1u);
  }
  return result;
}

void WebCore::GraphicsContextState::~GraphicsContextState(WebCore::GraphicsContextState *this, void *a2)
{
  if (*((unsigned char *)this + 320))
  {
    uint64_t v11 = *((unsigned int *)this + 78);
    if (v11 != -1) {
      ((void (*)(char *, char *))off_1EE9B40F0[v11])(&v12, (char *)this + 232);
    }
    *((_DWORD *)this + 78) = -1;
  }
  if (*((unsigned char *)this + 224))
  {
    uint64_t v7 = *((void *)this + 26);
    if ((v7 & 0x8000000000000) != 0)
    {
      unint64_t v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  uint64_t v3 = *((unsigned int *)this + 42);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE9B40C0[v3])(&v13, (char *)this + 104);
  }
  *((_DWORD *)this + 42) = -1;
  uint64_t v4 = *((void *)this + 11);
  if ((v4 & 0x8000000000000) != 0)
  {
    uint64_t v9 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  uint64_t v5 = *((unsigned int *)this + 20);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EE9B40C0[v5])(&v14, (char *)this + 16);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v6 = *(void *)this;
  if ((*(void *)this & 0x8000000000000) != 0)
  {
    uint64_t v10 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

uint64_t IPC::Decoder::decode<WebCore::RotationDirection>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v18;
        uint64_t v10 = *v18;
        unint64_t v9 = v18[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v9 = v1;
    uint64_t v10 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      char v17 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        a1 = v17;
        uint64_t v2 = *v17;
        unint64_t v1 = v17[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    int v7 = 256;
    return v7 | v6;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  if (!v6)
  {
LABEL_9:
    int v7 = 0;
    return v7 | v6;
  }
  uint64_t v16 = a1;
  if (!v1)
  {
LABEL_14:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
  LODWORD(v6) = 0;
  uint64_t v13 = *v16;
  uint64_t v14 = v16[1];
  uint64_t v15 = v16[3];
  *uint64_t v16 = 0;
  v16[1] = 0;
  int v7 = 0;
  if (v15 && v14)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    goto LABEL_14;
  }
  return v7 | v6;
}

uint64_t IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      uint64_t v26 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        a1 = v26;
        uint64_t v14 = *v26;
        unint64_t v13 = v26[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  unsigned int v5 = v4 + 1;
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v13 = v1;
    uint64_t v14 = 0;
LABEL_12:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v25 = a1;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        a1 = v25;
        uint64_t v2 = *v25;
        unint64_t v1 = v25[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  if (v6 < 0xE)
  {
    int v7 = 0;
    goto LABEL_5;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  if (!v6)
  {
    uint64_t v2 = 0;
    int v7 = 1;
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10) {
      goto LABEL_27;
    }
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    goto LABEL_17;
  }
  uint64_t v24 = a1;
  if (!v1)
  {
    uint64_t v6 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
  uint64_t v6 = 0;
  a1 = v24;
  uint64_t v2 = *v24;
  unint64_t v1 = v24[1];
  int v7 = 1;
  unsigned int v5 = (unsigned __int8 *)v24[2];
LABEL_5:
  unint64_t v8 = &v5[-v2];
  if (v1 <= (unint64_t)v8)
  {
    int v18 = v7;
    uint64_t v6 = 0;
    uint64_t v17 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1;
    if (v17 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
      a1 = v21;
      uint64_t v2 = *v21;
      uint64_t v6 = v21[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    int v7 = v18;
    goto LABEL_15;
  }
  unint64_t v9 = &v8[v2];
  a1[2] = v9 + 1;
  if (!v2)
  {
    uint64_t v6 = v1;
    goto LABEL_15;
  }
  uint64_t v10 = *v9;
  if ((v10 - 1) > 0x11) {
    goto LABEL_17;
  }
  if (v7)
  {
    while (1)
    {
      __break(1u);
LABEL_27:
      int v20 = v7;
      uint64_t v23 = a1;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v2, v6);
        a1 = v23;
        uint64_t v2 = *v23;
        unint64_t v1 = v23[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      int v7 = v20;
LABEL_17:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v6 = a1[3];
      if (!v6)
      {
LABEL_18:
        LODWORD(v10) = 0;
        int v11 = 0;
        return v6 | (v10 << 8) | (v11 << 16);
      }
      unsigned int v19 = v7;
      uint64_t v22 = a1;
      if (!v1) {
        break;
      }
      a1 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
      uint64_t v6 = *v22;
      if (!*v22) {
        goto LABEL_18;
      }
      uint64_t v6 = v19;
    }
    LODWORD(v10) = 0;
    int v11 = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    int v11 = 1;
  }
  return v6 | (v10 << 8) | (v11 << 16);
}

uint64_t std::optional<WebCore::Color>::~optional(uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 8) && (*(void *)result & 0x8000000000000) != 0)
  {
    uint64_t v2 = (unsigned int *)(*(void *)result & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      uint64_t v3 = result;
      WTF::fastFree((WTF *)v2, a2);
      return v3;
    }
  }
  return result;
}

uint64_t WebKit::WebProcess::setDomainRelaxationForbiddenForURLScheme(WebKit::WebProcess *this, const WTF::String *a2, const WTF::String *a3)
{
  return WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme((WebCore::LegacySchemeRegistry *)1, (uint64_t)a2, a3);
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>(IPC::Decoder *a1, WebKit::NetworkProcess *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)v5);
  if (v5[8]) {
    WebKit::NetworkProcess::registerURLSchemeAsBypassingContentSecurityPolicy(a2, (const WTF::String *)v5);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t WebKit::NetworkProcess::registerURLSchemeAsBypassingContentSecurityPolicy(WebKit::NetworkProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(a2, a2);
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsSecure,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>(IPC::Decoder *a1, WebKit::NetworkProcess *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)v5);
  if (v5[8]) {
    WebKit::NetworkProcess::registerURLSchemeAsSecure(a2, (const WTF::String *)v5);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    *(void *)a2 = v6;
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    int8x16_t result = (IPC::Decoder *)IPC::Decoder::markInvalid(a1);
    char v5 = 0;
  }
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebKit::NetworkProcess::registerURLSchemeAsSecure(WebKit::NetworkProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(a2, a2);
}

void *__copy_helper_block_e8_40c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(void *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 40);
  result[5] = v2;
  if (v2) {
    return v2;
  }
  return result;
}

__n128 __copy_helper_block_e8_32c83_ZTSKZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerIncrementRepaintCount(uint64_t a1)
{
  unint64_t v1 = (_DWORD *)(a1 - 428);
  uint64_t result = (*(_DWORD *)(a1 - 428) + 1);
  _DWORD *v1 = result;
  return result;
}

IPC::Encoder **WTF::Detail::CallableWrapper<IPC::WorkQueueMessageReceiverQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return IPC::Connection::dispatchMessageReceiverMessage(*(void *)(a1 + 8), *(void *)(a1 + 24), (unsigned __int16 **)(a1 + 16));
}

uint64_t WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  return 1;
}

uint64_t WebKit::RemoteScrollingCoordinator::isRubberBandInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  if (!a2) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 160);
  if (result) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(result, v4) != 0;
  }
  return result;
}

char *___ZN3IPCL32shouldLogIncomingMessageHandlingEv_block_invoke()
{
  uint64_t result = getenv("WEBKIT_LOG_INCOMING_MESSAGES");
  byte_1EB35A40A = result != 0;
  return result;
}

uint64_t WebKit::RemoteScrollingTree::propagateSynchronousScrollingReasons(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2) {
    LOBYTE(v2) = *(_DWORD *)(v2 - 12) != 0;
  }
  *(unsigned char *)(result + 352) = v2;
  return result;
}

double WebKit::WebChromeClient::baseViewportLayoutSizeScaleFactor(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  double v3 = *(double *)(v2 + 1176);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

atomic_uchar *WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction(uint64_t a1)
{
  uint64_t result = **(atomic_uchar ***)(a1 + 16);
  int v2 = 1;
  atomic_compare_exchange_strong_explicit(result, (unsigned __int8 *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSKZ76__WKUserDefaults__notifyObserversOfChangeFromValuesForKeys_toValuesForKeys__E3__1(void *a1)
{
  int v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2) {
    CFRelease(v2);
  }
  double v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    CFRelease(v4);
  }
}

char *IPC::Connection::resumeSendSource(IPC::Connection *this, void *a2)
{
  double v3 = (WTF *)*((void *)this + 43);
  if (v3)
  {
    *((void *)this + 43) = 0;
    char v7 = v3;
    IPC::Connection::sendMessage((uint64_t *)this, (unsigned __int16 **)&v7);
    char v5 = v7;
    if (v7)
    {
      if (*((unsigned char *)v7 + 16))
      {
        uint64_t v6 = v7;
        mach_msg_destroy((mach_msg_header_t *)((char *)v7 + 20));
        char v5 = v6;
      }
      WTF::fastFree(v5, a2);
    }
  }

  return IPC::Connection::sendOutgoingMessages((char *)this, a2);
}

void sub_1986121C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*((unsigned char *)a10 + 16)) {
      mach_msg_destroy((mach_msg_header_t *)((char *)a10 + 20));
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v14);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v10);
  if (*(void *)a1)
  {
    if (v17)
    {
      uint64_t v4 = v16;
      uint64_t v16 = 0;
      if (v15)
      {
        char v5 = v14;
        uint64_t v14 = 0;
        if (v13)
        {
          uint64_t v6 = v12;
          uint64_t v12 = 0;
          if (v11)
          {
            char v7 = v10;
            uint64_t v10 = 0;
            *(void *)a2 = v4;
            *(void *)(a2 + 8) = v5;
            memset(v9, 0, sizeof(v9));
            *(void *)(a2 + 16) = v6;
            *(void *)(a2 + 24) = v7;
            *(unsigned char *)(a2 + 32) = 1;
            WebKit::GPUProcessSessionParameters::~GPUProcessSessionParameters((const char ***)v9);
            goto LABEL_7;
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
LABEL_7:
  if (v11) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v10);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12);
  if (v15) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16);
}

void sub_1986122F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  if (*(unsigned char *)(v7 - 40)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v7 - 48));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v7 - 32);
  _Unwind_Resume(a1);
}

void WebKit::GPUProcessSessionParameters::~GPUProcessSessionParameters(const char ***this)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 3);
  double v3 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 1);
  char v5 = *this;
  *this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

unsigned char *IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 24));
  for (uint64_t i = 0; i != 8; ++i)
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 32 + i));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 48));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 56));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  uint64_t v6 = (void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5) {
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else {
    int v7 = 0;
  }
  unint64_t v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    goto LABEL_16;
  }
  *unint64_t v8 = v7;
  uint64_t v11 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 72), v9, v10);
  uint64_t v12 = (uint64_t *)v11;
  v20[0] = v11;
  v20[1] = v13;
  if (*v6) {
    uint64_t v14 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 != v11)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v12);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v12 + 1));
      v20[0] += 24;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v20, v15, v16);
      uint64_t v12 = (uint64_t *)v20[0];
    }
    while (v20[0] != v14);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 88));
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 112);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 128);
  char v17 = *(unsigned char *)(a2 + 144);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x198612570);
  }
  *uint64_t result = v17;
  return result;
}

const char **IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(IPC::Encoder *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(this, &v7);
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(this, (const char ***)a2);
    }
    else
    {
      uint64_t v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (const char **)IPC::ArgumentCoder<std::tuple<WebKit::WebProcessDataStoreParameters>,void>::decode<IPC::Decoder>(v6);
    }
  }
  else
  {
    uint64_t result = (const char **)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1986125F8);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebProcessDataStoreParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::WebProcessDataStoreParameters>(a2, v4);
  if (v5)
  {
    WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters((uint64_t)a1, (uint64_t *)v4);
    int v3 = v5;
    a1[152] = 1;
    if (v3) {
      WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v4);
    }
  }
  else
  {
    *a1 = 0;
    a1[152] = 0;
  }
}

void WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(const char ***this)
{
  if (*((unsigned char *)this + 136)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 16);
  }
  if (*((unsigned char *)this + 120)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 14);
  }
  if (*((unsigned char *)this + 104)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 12);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 11);
  int v3 = (WTF::StringImpl *)this[10];
  this[10] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (uint64_t)this[9];
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v2);
  }
  unsigned __int8 v5 = (WTF::StringImpl **)this[8];
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 6);
  char v7 = (WTF::StringImpl *)this[5];
  this[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 3);
  unint64_t v9 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)this[1];
  this[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = v3;
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *(void *)(result + 16) = v4;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(result + 24) = v5;
  *(void *)(result + 32) = a2[4];
  uint64_t v6 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v6;
  uint64_t v7 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v7;
  *(unsigned char *)(result + 56) = *((unsigned char *)a2 + 56);
  *(void *)(result + 64) = 0;
  uint64_t v8 = a2[8];
  a2[8] = 0;
  *(void *)(result + 64) = v8;
  *(void *)(result + 72) = 0;
  uint64_t v9 = a2[9];
  a2[9] = 0;
  *(void *)(result + 72) = v9;
  uint64_t v10 = a2[10];
  a2[10] = 0;
  *(void *)(result + 80) = v10;
  uint64_t v11 = a2[11];
  a2[11] = 0;
  *(void *)(result + 88) = v11;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  if (*((unsigned char *)a2 + 104))
  {
    uint64_t v12 = a2[12];
    a2[12] = 0;
    *(void *)(result + 96) = v12;
    *(unsigned char *)(result + 104) = 1;
  }
  *(unsigned char *)(result + 112) = 0;
  *(unsigned char *)(result + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    uint64_t v13 = a2[14];
    a2[14] = 0;
    *(void *)(result + 112) = v13;
    *(unsigned char *)(result + 120) = 1;
  }
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  if (*((unsigned char *)a2 + 136))
  {
    uint64_t v14 = a2[16];
    a2[16] = 0;
    *(void *)(result + 128) = v14;
    *(unsigned char *)(result + 136) = 1;
  }
  *(unsigned char *)(result + 144) = *((unsigned char *)a2 + 144);
  return result;
}

void WebKit::WebsiteDataStore::parameters(WebKit::WebsiteDataStore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v268 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 32) = 1;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(unsigned char *)(a2 + 72) = 1;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(unsigned char *)(a2 + 104) = 0;
  char v210 = (_OWORD *)(a2 + 32);
  uint64_t v211 = a2 + 112;
  WTF::URL::invalidate((WTF::URL *)(a2 + 112));
  *(void *)(a2 + 152) = 0;
  WTF::URL::invalidate((WTF::URL *)(a2 + 152));
  *(unsigned char *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(unsigned char *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_WORD *)(a2 + 224) = 0;
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 312) = 0u;
  *(void *)(a2 + 328) = 0x100000000;
  *(_DWORD *)(a2 + 336) = 256;
  *(unsigned char *)(a2 + 340) = 0;
  *(unsigned char *)(a2 + 344) = 0;
  *(void *)(a2 + 348) = 0;
  *(_OWORD *)(a2 + 356) = 0u;
  *(void *)(a2 + 371) = 0;
  *(unsigned char *)(a2 + 379) = 2;
  *(unsigned char *)(a2 + 392) = 0;
  *(unsigned char *)(a2 + 400) = 0;
  *(unsigned char *)(a2 + 408) = 0;
  *(unsigned char *)(a2 + 416) = 0;
  *(unsigned char *)(a2 + 424) = 0;
  *(unsigned char *)(a2 + 432) = 0;
  *(unsigned char *)(a2 + 440) = 0;
  *(unsigned char *)(a2 + 448) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 456) = 0u;
  *(_DWORD *)(a2 + 536) = 257;
  *(unsigned char *)(a2 + 544) = 0;
  *(unsigned char *)(a2 + 560) = 0;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_WORD *)(a2 + 584) = 0;
  *(unsigned char *)(a2 + 586) = 1;
  *(_DWORD *)(a2 + 587) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(void *)(a2 + 624) = 0;
  *(unsigned char *)(a2 + 640) = 0;
  *(unsigned char *)(a2 + 648) = 0;
  *(unsigned char *)(a2 + 656) = 0;
  *(unsigned char *)(a2 + 664) = 0;
  *(unsigned char *)(a2 + 672) = 0;
  *(unsigned char *)(a2 + 680) = 0;
  *(unsigned char *)(a2 + 688) = 0;
  *(unsigned char *)(a2 + 696) = 0;
  uint64_t v4 = WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)this);
  uint64_t v5 = (WTF::StringImpl **)v4;
  uint64_t v6 = *(WTF::StringImpl **)(v4 + 112);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v229 = 0;
  char v230 = v6;
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v4, (uint64_t *)&v230, &v229, 1);
  uint64_t v8 = v5[13];
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  int v227 = 0;
  char v228 = v8;
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v7, (uint64_t *)&v228, &v227, 1);
  uint64_t v10 = v5[7];
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v225 = 0;
  uint64_t v226 = v10;
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v9, (uint64_t *)&v226, &v225, 1);
  uint64_t v11 = 0;
  unsigned __int8 v12 = atomic_load(WebKit::WebsiteDataStore::isAppBoundITPRelaxationEnabled);
  if (v12)
  {
    WebKit::WebsiteDataStore::appBoundDomainsIfInitialized(v233);
    if (LOBYTE(v233[1])) {
      uint64_t v11 = (WTF::StringImpl *)v233[0];
    }
    else {
      uint64_t v11 = 0;
    }
  }
  char v224 = 0;
  unsigned __int8 v13 = atomic_load(WebKit::hasInitializedManagedDomains);
  if (v13)
  {
    {
      WebKit::managedDomains(void)::managedDomains = 0;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(&v224, &WebKit::managedDomains(void)::managedDomains);
  }
  int v223 = 0;
  uint64_t v14 = (uint64_t)WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin((uint64_t *)this + 62);
  uint64_t v15 = (const WTF::URL *)v14;
  char v17 = v16;
  uint64_t v18 = *((void *)this + 62);
  char v209 = v5;
  if (v18) {
    uint64_t v19 = (const WTF::URL *)(v18 + 40 * *(unsigned int *)(v18 - 4));
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19 != (const WTF::URL *)v14)
  {
    do
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v215, v15);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v223, &v215, (uint64_t)v233);
      uint64_t v14 = (uint64_t)v215;
      char v215 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v20);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      while (1)
      {
        uint64_t v15 = (const WTF::URL *)((char *)v15 + 40);
        if (v15 == v17) {
          break;
        }
        uint64_t v14 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v15);
        if ((v14 & 1) == 0 && *(void *)v15 != -1) {
          goto LABEL_28;
        }
      }
      uint64_t v15 = v17;
LABEL_28:
      ;
    }
    while (v15 != v19);
  }
  uint64_t v22 = v229;
  uint64_t v21 = v230;
  uint64_t v229 = 0;
  char v230 = 0;
  char v215 = v21;
  char v216 = v22;
  if (*((unsigned char *)this + 265))
  {
    BOOL HaveTrackingPreventionEnabled = *((unsigned char *)this + 265) == 2;
  }
  else if (*(unsigned __int16 *)(*((void *)this + 26) + 528) >= 0x100u)
  {
    BOOL HaveTrackingPreventionEnabled = *(_WORD *)(*((void *)this + 26) + 528) != 0;
  }
  else
  {
    BOOL HaveTrackingPreventionEnabled = WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)v14);
  }
  v217[0] = HaveTrackingPreventionEnabled;
  v217[1] = *((void *)this + 34) != 0;
  v217[2] = 0;
  v217[3] = *((unsigned char *)this + 264);
  v217[4] = WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this);
  *(_WORD *)&v217[5] = 0;
  int v218 = 0;
  char v219 = v11;
  uint64_t v25 = v223;
  uint64_t v24 = v224;
  int v223 = 0;
  char v224 = 0;
  char v220 = v24;
  uint64_t v221 = v25;
  uint64_t v222 = 0;
  v233[0] = 1;
  memset(&v233[2], 0, 24);
  char v234 = 1;
  v238[0] = 0;
  uint64_t v235 = 0;
  long long v236 = 0u;
  char v237 = 0;
  WTF::URL::invalidate((WTF::URL *)v238);
  v239[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v239);
  char v246 = 0;
  *(_OWORD *)uint64_t v243 = 0u;
  *(_OWORD *)v244 = 0u;
  LOBYTE(v245) = 0;
  long long v240 = 0u;
  *(_OWORD *)long long v241 = 0u;
  __int16 v242 = 0;
  long long v248 = 0u;
  v247 = 0;
  *(void *)&long long v249 = 0x100000000;
  DWORD2(v249) = 256;
  BYTE12(v249) = 0;
  v250[0] = 0;
  memset(&v250[4], 0, 31);
  v250[35] = 2;
  LOBYTE(v251) = 0;
  BYTE8(v251) = 0;
  LOBYTE(v252) = 0;
  BYTE8(v252) = 0;
  v253[0] = 0;
  v253[8] = 0;
  v253[16] = 0;
  v253[24] = 0;
  long long v257 = 0u;
  long long v258 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  long long v254 = 0u;
  int v259 = 257;
  LOBYTE(v260) = 0;
  unsigned __int8 v262 = 0;
  long long v263 = 0u;
  LOWORD(v264[0]) = 0;
  BYTE2(v264[0]) = 1;
  *(_DWORD *)((char *)v264 + 3) = 0;
  v267 = 0;
  *(_OWORD *)v265 = 0u;
  long long v266 = 0u;
  v233[0] = *((void *)this + 3);
  uint64_t v26 = *((void *)this + 26);
  long long v27 = *(_OWORD *)(v26 + 32);
  LOBYTE(v233[2]) = v27;
  *(void *)((char *)&v233[2] + 1) = v27 >> 8;
  HIBYTE(v233[3]) = HIBYTE(v27);
  *(_WORD *)((char *)&v233[3] + 5) = HIDWORD(v27) >> 8;
  *(_DWORD *)((char *)&v233[3] + 1) = *((void *)&v27 + 1) >> 8;
  WTF::String::operator=(&v233[4], (WTF::StringImpl **)(v26 + 312));
  uint64_t v29 = *((void *)this + 26);
  char v234 = *(unsigned char *)(v29 + 410);
  __int16 v242 = *(_WORD *)(v29 + 408);
  char v30 = *(WTF::StringImpl **)(v29 + 496);
  if (v30) {
    *(_DWORD *)v30 += 2;
  }
  uint64_t v31 = *(void *)(v29 + 32);
  if (*(_OWORD *)(v29 + 32) == 0)
  {
    LOBYTE(v31) = 0;
    char v32 = 0;
  }
  else
  {
    *(void *)v231 = *(void *)(v29 + 33);
    *(void *)&v231[7] = *(void *)(v29 + 40);
    char v32 = 1;
  }
  unint64_t v33 = v243[0];
  if (v243[0])
  {
    v243[0] = 0;
    LODWORD(v243[1]) = 0;
    WTF::fastFree(v33, v28);
  }
  v243[0] = 0;
  v243[1] = 0;
  int v34 = v244[0];
  v244[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t v35 = v244[1];
  v244[1] = v30;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  LOBYTE(v245) = v31;
  *(void *)((char *)&v245 + 1) = *(void *)v231;
  *((void *)&v245 + 1) = *(void *)&v231[7];
  char v246 = v32;
  uint64_t v36 = v228;
  char v228 = 0;
  uint64_t v37 = v247;
  v247 = v36;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = v227;
  int v227 = 0;
  uint64_t v39 = (const char **)v248;
  *(void *)&long long v248 = v38;
  if (v39)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v39);
    WTF::fastFree(v203, v204);
  }
  uint64_t v40 = v226;
  uint64_t v226 = 0;
  uint64_t v41 = v241[0];
  v241[0] = v40;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t v42 = (WebKit::SandboxExtensionImpl *)v225;
  uint64_t v225 = 0;
  uint64_t v43 = (const char **)v241[1];
  v241[1] = v42;
  if (v43)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v43);
    WTF::fastFree(v205, v206);
  }
  WTF::String::operator=((uint64_t *)&v248 + 1, (WTF::StringImpl **)(*((void *)this + 26) + 320));
  uint64_t v45 = *((void *)this + 26);
  LOBYTE(v249) = *(unsigned char *)(v45 + 412);
  BYTE1(v249) = *(unsigned char *)(v45 + 288);
  BYTE2(v249) = *(unsigned char *)(v45 + 414);
  BYTE3(v249) = *(unsigned char *)(v45 + 289);
  DWORD1(v249) = *(_DWORD *)(v45 + 428);
  WORD4(v249) = *(_WORD *)(v45 + 415);
  int v46 = v215;
  char v215 = 0;
  long long v47 = (WTF::StringImpl *)v263;
  *(void *)&long long v263 = v46;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v44);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  long long v48 = v216;
  char v216 = 0;
  long long v49 = (const char **)*((void *)&v263 + 1);
  *((void *)&v263 + 1) = v48;
  if (v49)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v49);
    WTF::fastFree(v207, v208);
  }
  *(_DWORD *)((char *)v264 + 3) = *(_DWORD *)&v217[3];
  v264[0] = *(_DWORD *)v217;
  uint64_t v50 = v218;
  int v218 = 0;
  unsigned __int8 v51 = v265[0];
  v265[0] = v50;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v44);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  uint64_t v52 = v219;
  char v219 = 0;
  int v53 = (WTF::StringImpl **)v265[1];
  v265[1] = v52;
  if (v53) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v53, v44);
  }
  char v54 = v220;
  char v220 = 0;
  char v55 = (WTF::StringImpl **)v266;
  *(void *)&long long v266 = v54;
  if (v55) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v55, v44);
  }
  uint64_t v56 = v221;
  uint64_t v221 = 0;
  int v57 = (WTF::StringImpl **)*((void *)&v266 + 1);
  *((void *)&v266 + 1) = v56;
  if (v57) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v57, v44);
  }
  long long v58 = v222;
  uint64_t v222 = 0;
  long long v59 = v267;
  v267 = v58;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, v44);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
  uint64_t v60 = *((void *)this + 26);
  WORD5(v249) = *(_WORD *)(v60 + 418);
  uint64_t v61 = *(void *)(v60 + 420);
  HIDWORD(v249) = v61;
  v250[0] = BYTE4(v61);
  v250[4] = *(unsigned char *)(v60 + 417);
  v250[7] = *(unsigned char *)(v60 + 473);
  WTF::String::operator=((uint64_t *)&v250[8], (WTF::StringImpl **)(v60 + 480));
  WTF::String::operator=((uint64_t *)&v250[16], (WTF::StringImpl **)(*((void *)this + 26) + 488));
  WTF::String::operator=((uint64_t *)&v250[24], (WTF::StringImpl **)(*((void *)this + 26) + 496));
  v250[33] = WebKit::WebsiteDataStore::isBlobRegistryPartitioningEnabled(this);
  uint64_t v62 = *((void *)this + 26);
  v250[35] = *(unsigned char *)(v62 + 17);
  *(void *)&v250[40] = *(void *)(v62 + 216);
  uint64_t v63 = *(void *)(v62 + 232);
  *(void *)&long long v251 = *(void *)(v62 + 224);
  BYTE8(v251) = v63;
  uint64_t v64 = *(void *)(v62 + 248);
  *(void *)&long long v252 = *(void *)(v62 + 240);
  BYTE8(v252) = v64;
  uint64_t v65 = *(void *)(v62 + 264);
  *(void *)v253 = *(void *)(v62 + 256);
  v253[8] = v65;
  uint64_t v67 = *(void *)(v62 + 272);
  uint64_t v66 = *(void *)(v62 + 280);
  *(void *)&v253[16] = v67;
  v253[24] = v66;
  uint64_t v68 = WTF::String::operator=((uint64_t *)&v254, v209 + 10);
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v68, (uint64_t *)&v254, (const char ***)&v254 + 1, 1);
  uint64_t v69 = WTF::String::operator=((uint64_t *)&v255, v209 + 8);
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v69, (uint64_t *)&v255, (const char ***)&v255 + 1, 1);
  unsigned int v70 = WTF::String::operator=((uint64_t *)&v257, v209 + 6);
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v70, (uint64_t *)&v257, (const char ***)&v257 + 1, 1);
  uint64_t v71 = WTF::String::operator=((uint64_t *)&v256, v209 + 3);
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v71, (uint64_t *)&v256, (const char ***)&v256 + 1, 1);
  char v72 = WTF::String::operator=((uint64_t *)&v258, v209 + 16);
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v72, (uint64_t *)&v258, (const char ***)&v258 + 1, 1);
  uint64_t v74 = *((void *)this + 26);
  LOBYTE(v259) = *(unsigned char *)(v74 + 413);
  BYTE1(v259) = *((unsigned char *)this + 448);
  BYTE2(v259) = *((unsigned char *)this + 488);
  HIBYTE(v259) = *(unsigned char *)(v74 + 475);
  if (v262 == *((unsigned __int8 *)this + 480))
  {
    uint64_t v75 = (uint64_t *)((char *)this + 464);
    if ((uint64_t *)((char *)this + 464) != &v260 && v262)
    {
      unsigned int v76 = HIDWORD(v261);
      uint64_t v77 = *((unsigned int *)this + 119);
      if (HIDWORD(v261) <= v77)
      {
        if (v77 > v261)
        {
          WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v260, 0);
          WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v260, *((unsigned int *)this + 119));
          unsigned int v76 = HIDWORD(v261);
        }
        uint64_t v77 = v76;
      }
      else
      {
        uint64_t v78 = v260 + 32 * v77;
        uint64_t v79 = 32 * HIDWORD(v261) - 32 * v77;
        do
        {
          uint64_t v80 = *(WTF **)v78;
          if (*(void *)v78)
          {
            *(void *)uint64_t v78 = 0;
            *(_DWORD *)(v78 + 8) = 0;
            WTF::fastFree(v80, v73);
          }
          v78 += 32;
          v79 -= 32;
        }
        while (v79);
        HIDWORD(v261) = v77;
        unsigned int v76 = v77;
      }
      uint64_t v86 = *v75;
      if (v76)
      {
        uint64_t v87 = v86 + 32 * v77;
        uint64_t v88 = v260;
        do
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v88, v86);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)(v86 + 16);
          v86 += 32;
          v88 += 32;
        }
        while (v86 != v87);
        uint64_t v86 = *v75;
        unsigned int v76 = HIDWORD(v261);
      }
      uint64_t v89 = *((unsigned int *)this + 119);
      if (v76 != v89)
      {
        uint64_t v90 = v260 + 32 * v76;
        uint64_t v91 = v86 + 32 * v76;
        uint64_t v92 = 32 * v89 - 32 * v76;
        do
        {
          uint64_t v90 = std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>::pair[abi:sn180100](v90, v91)+ 32;
          v91 += 32;
          v92 -= 32;
        }
        while (v92);
        unsigned int v76 = *((_DWORD *)this + 119);
      }
      HIDWORD(v261) = v76;
    }
  }
  else if (v262)
  {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v260, v73);
    unsigned __int8 v262 = 0;
  }
  else
  {
    uint64_t v81 = *((unsigned int *)this + 119);
    uint64_t v260 = 0;
    LODWORD(v261) = 0;
    HIDWORD(v261) = v81;
    if (v81)
    {
      if (v81 >> 27)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v82 = WTF::fastMalloc((WTF *)(32 * v81));
      LODWORD(v261) = v81;
      uint64_t v260 = v82;
      uint64_t v83 = *((unsigned int *)this + 119);
      if (v83)
      {
        uint64_t v84 = *((void *)this + 58);
        uint64_t v85 = 32 * v83;
        do
        {
          uint64_t v82 = std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>::pair[abi:sn180100](v82, v84)+ 32;
          v84 += 32;
          v85 -= 32;
        }
        while (v85);
      }
    }
    unsigned __int8 v262 = 1;
  }
  long long v93 = *(_OWORD *)&v233[2];
  *char v210 = *(_OWORD *)v233;
  v210[1] = v93;
  uint64_t v94 = v233[4];
  v233[4] = 0;
  uint64_t v95 = *(WTF::StringImpl **)(a2 + 64);
  *(void *)(a2 + 64) = v94;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2) {
      WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v73);
    }
    else {
      *(_DWORD *)v95 -= 2;
    }
  }
  *(unsigned char *)(a2 + 72) = v234;
  uint64_t v96 = v235;
  uint64_t v235 = 0;
  uint64_t v97 = *(const void **)(a2 + 80);
  *(void *)(a2 + 80) = v96;
  if (v97) {
    CFRelease(v97);
  }
  uint64_t v98 = v236;
  *(void *)&long long v236 = 0;
  uint64_t v99 = *(WTF::StringImpl **)(a2 + 88);
  *(void *)(a2 + 88) = v98;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2) {
      WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v73);
    }
    else {
      *(_DWORD *)v99 -= 2;
    }
  }
  uint64_t v100 = *((void *)&v236 + 1);
  *((void *)&v236 + 1) = 0;
  uint64_t v101 = *(WTF::StringImpl **)(a2 + 96);
  *(void *)(a2 + 96) = v100;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2) {
      WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v73);
    }
    else {
      *(_DWORD *)v101 -= 2;
    }
  }
  *(unsigned char *)(a2 + 104) = v237;
  WTF::URL::operator=(v211, (uint64_t)v238);
  WTF::URL::operator=(a2 + 152, (uint64_t)v239);
  uint64_t v103 = v240;
  *(void *)&long long v240 = 0;
  uint64_t v104 = *(WTF::StringImpl **)(a2 + 192);
  *(void *)(a2 + 192) = v103;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2) {
      WTF::StringImpl::destroy(v104, v102);
    }
    else {
      *(_DWORD *)v104 -= 2;
    }
  }
  uint64_t v105 = (const char **)*((void *)&v240 + 1);
  *((void *)&v240 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 200), v105);
  uint64_t v107 = v241[0];
  v241[0] = 0;
  uint64_t v108 = *(WTF::StringImpl **)(a2 + 208);
  *(void *)(a2 + 208) = v107;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2) {
      WTF::StringImpl::destroy(v108, v106);
    }
    else {
      *(_DWORD *)v108 -= 2;
    }
  }
  uint64_t v109 = (const char **)v241[1];
  v241[1] = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 216), v109);
  *(_WORD *)(a2 + 224) = v242;
  uint64_t v111 = *(WTF **)(a2 + 240);
  if (v111)
  {
    *(void *)(a2 + 240) = 0;
    *(_DWORD *)(a2 + 248) = 0;
    WTF::fastFree(v111, v110);
  }
  *(WTF **)(a2 + 240) = v243[0];
  uint64_t v112 = v243[1];
  v243[0] = 0;
  v243[1] = 0;
  *(void *)(a2 + 248) = v112;
  uint64_t v113 = v244[0];
  v244[0] = 0;
  uint64_t v114 = *(WTF::StringImpl **)(a2 + 256);
  *(void *)(a2 + 256) = v113;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2) {
      WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v110);
    }
    else {
      *(_DWORD *)v114 -= 2;
    }
  }
  uint64_t v115 = v244[1];
  v244[1] = 0;
  uint64_t v116 = *(WTF::StringImpl **)(a2 + 264);
  *(void *)(a2 + 264) = v115;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2) {
      WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v110);
    }
    else {
      *(_DWORD *)v116 -= 2;
    }
  }
  *(_OWORD *)(a2 + 272) = v245;
  *(unsigned char *)(a2 + 288) = v246;
  uint64_t v117 = v247;
  v247 = 0;
  uint64_t v118 = *(WTF::StringImpl **)(a2 + 304);
  *(void *)(a2 + 304) = v117;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2) {
      WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v110);
    }
    else {
      *(_DWORD *)v118 -= 2;
    }
  }
  uint64_t v119 = (const char **)v248;
  *(void *)&long long v248 = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 312), v119);
  uint64_t v121 = *((void *)&v248 + 1);
  *((void *)&v248 + 1) = 0;
  uint64_t v122 = *(WTF::StringImpl **)(a2 + 320);
  *(void *)(a2 + 320) = v121;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2) {
      WTF::StringImpl::destroy(v122, v120);
    }
    else {
      *(_DWORD *)v122 -= 2;
    }
  }
  *(_OWORD *)(a2 + 328) = v249;
  uint64_t v123 = *(void *)&v250[8];
  *(void *)&v250[8] = 0;
  uint64_t v124 = *(WTF::StringImpl **)(a2 + 352);
  *(void *)(a2 + 344) = *(void *)v250;
  *(void *)(a2 + 352) = v123;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2) {
      WTF::StringImpl::destroy(v124, v120);
    }
    else {
      *(_DWORD *)v124 -= 2;
    }
  }
  uint64_t v125 = *(void *)&v250[16];
  *(void *)&v250[16] = 0;
  uint64_t v126 = *(WTF::StringImpl **)(a2 + 360);
  *(void *)(a2 + 360) = v125;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2) {
      WTF::StringImpl::destroy(v126, v120);
    }
    else {
      *(_DWORD *)v126 -= 2;
    }
  }
  uint64_t v127 = *(void *)&v250[24];
  *(void *)&v250[24] = 0;
  uint64_t v128 = *(WTF::StringImpl **)(a2 + 368);
  *(void *)(a2 + 368) = v127;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2) {
      WTF::StringImpl::destroy(v128, v120);
    }
    else {
      *(_DWORD *)v128 -= 2;
    }
  }
  long long v129 = *(_OWORD *)v253;
  *(_OWORD *)(a2 + 408) = v252;
  *(_OWORD *)(a2 + 424) = v129;
  *(_OWORD *)(a2 + 433) = *(_OWORD *)&v253[9];
  long long v130 = v251;
  *(_OWORD *)(a2 + 376) = *(_OWORD *)&v250[32];
  *(_OWORD *)(a2 + 392) = v130;
  uint64_t v131 = v254;
  *(void *)&long long v254 = 0;
  uint64_t v132 = *(WTF::StringImpl **)(a2 + 456);
  *(void *)(a2 + 456) = v131;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2) {
      WTF::StringImpl::destroy(v132, v120);
    }
    else {
      *(_DWORD *)v132 -= 2;
    }
  }
  uint64_t v133 = (const char **)*((void *)&v254 + 1);
  *((void *)&v254 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 464), v133);
  uint64_t v135 = v255;
  *(void *)&long long v255 = 0;
  uint64_t v136 = *(WTF::StringImpl **)(a2 + 472);
  *(void *)(a2 + 472) = v135;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2) {
      WTF::StringImpl::destroy(v136, v134);
    }
    else {
      *(_DWORD *)v136 -= 2;
    }
  }
  uint64_t v137 = (const char **)*((void *)&v255 + 1);
  *((void *)&v255 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 480), v137);
  uint64_t v139 = v256;
  *(void *)&long long v256 = 0;
  uint64_t v140 = *(WTF::StringImpl **)(a2 + 488);
  *(void *)(a2 + 488) = v139;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2) {
      WTF::StringImpl::destroy(v140, v138);
    }
    else {
      *(_DWORD *)v140 -= 2;
    }
  }
  uint64_t v141 = (const char **)*((void *)&v256 + 1);
  *((void *)&v256 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 496), v141);
  uint64_t v143 = v257;
  *(void *)&long long v257 = 0;
  uint64_t v144 = *(WTF::StringImpl **)(a2 + 504);
  *(void *)(a2 + 504) = v143;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2) {
      WTF::StringImpl::destroy(v144, v142);
    }
    else {
      *(_DWORD *)v144 -= 2;
    }
  }
  uint64_t v145 = (const char **)*((void *)&v257 + 1);
  *((void *)&v257 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 512), v145);
  uint64_t v147 = v258;
  *(void *)&long long v258 = 0;
  uint64_t v148 = *(WTF::StringImpl **)(a2 + 520);
  *(void *)(a2 + 520) = v147;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2) {
      WTF::StringImpl::destroy(v148, v146);
    }
    else {
      *(_DWORD *)v148 -= 2;
    }
  }
  uint64_t v149 = (WTF::StringImpl **)(a2 + 568);
  uint64_t v150 = (const char **)*((void *)&v258 + 1);
  *((void *)&v258 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 528), v150);
  *(_DWORD *)(a2 + 536) = v259;
  if (*(unsigned __int8 *)(a2 + 560) == v262)
  {
    if (*(unsigned char *)(a2 + 560))
    {
      uint64_t v152 = *(unsigned int *)(a2 + 556);
      uint64_t v153 = *(WTF **)(a2 + 544);
      if (v152)
      {
        uint64_t v154 = 32 * v152;
        do
        {
          uint64_t v155 = *(WTF **)v153;
          if (*(void *)v153)
          {
            *(void *)uint64_t v153 = 0;
            *((_DWORD *)v153 + 2) = 0;
            WTF::fastFree(v155, v151);
          }
          uint64_t v153 = (WTF *)((char *)v153 + 32);
          v154 -= 32;
        }
        while (v154);
        uint64_t v153 = *(WTF **)(a2 + 544);
      }
      if (v153)
      {
        *(void *)(a2 + 544) = 0;
        *(_DWORD *)(a2 + 552) = 0;
        WTF::fastFree(v153, v151);
      }
      uint64_t v156 = v260;
      uint64_t v260 = 0;
      *(void *)(a2 + 544) = v156;
      uint64_t v157 = v261;
      uint64_t v261 = 0;
      *(void *)(a2 + 552) = v157;
    }
  }
  else if (*(unsigned char *)(a2 + 560))
  {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 544, v151);
    *(unsigned char *)(a2 + 560) = 0;
  }
  else
  {
    uint64_t v158 = v260;
    uint64_t v260 = 0;
    *(void *)(a2 + 544) = v158;
    uint64_t v159 = v261;
    uint64_t v261 = 0;
    *(void *)(a2 + 552) = v159;
    *(unsigned char *)(a2 + 560) = 1;
  }
  char v160 = (WTF::StringImpl *)v263;
  *(void *)&long long v263 = 0;
  int v161 = *v149;
  *uint64_t v149 = v160;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2) {
      WTF::StringImpl::destroy(v161, (WTF::StringImpl *)v151);
    }
    else {
      *(_DWORD *)v161 -= 2;
    }
  }
  char v162 = (const char **)*((void *)&v263 + 1);
  *((void *)&v263 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 576), v162);
  *(_DWORD *)(a2 + 584) = v264[0];
  *(_DWORD *)(a2 + 587) = *(_DWORD *)((char *)v264 + 3);
  char v164 = v265[0];
  v265[0] = 0;
  int v165 = *(WTF::StringImpl **)(a2 + 592);
  *(void *)(a2 + 592) = v164;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2) {
      WTF::StringImpl::destroy(v165, v163);
    }
    else {
      *(_DWORD *)v165 -= 2;
    }
  }
  unsigned int v166 = v265[1];
  v265[1] = 0;
  int v167 = *(WTF::StringImpl ***)(a2 + 600);
  *(void *)(a2 + 600) = v166;
  if (v167) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v167, v163);
  }
  uint64_t v168 = v266;
  *(void *)&long long v266 = 0;
  int v169 = *(WTF::StringImpl ***)(a2 + 608);
  *(void *)(a2 + 608) = v168;
  if (v169) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v169, v163);
  }
  uint64_t v170 = *((void *)&v266 + 1);
  *((void *)&v266 + 1) = 0;
  int v171 = *(WTF::StringImpl ***)(a2 + 616);
  *(void *)(a2 + 616) = v170;
  if (v171) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v171, v163);
  }
  int v172 = v267;
  v267 = 0;
  unsigned int v173 = *(WTF::StringImpl **)(a2 + 624);
  *(void *)(a2 + 624) = v172;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2) {
      unsigned int v173 = (WTF::StringImpl *)WTF::StringImpl::destroy(v173, v163);
    }
    else {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (*((unsigned char *)this + 265))
  {
    BOOL v174 = *((unsigned char *)this + 265) == 2;
  }
  else if (*(unsigned __int16 *)(*((void *)this + 26) + 528) >= 0x100u)
  {
    BOOL v174 = *(_WORD *)(*((void *)this + 26) + 528) != 0;
  }
  else
  {
    BOOL v174 = WebKit::doesAppHaveTrackingPreventionEnabled(v173);
  }
  *(unsigned char *)(a2 + 584) = v174;
  unsigned __int16 v175 = (WebKit::WebsiteDataStore *)WebKit::WebsiteDataStore::platformSetNetworkParameters(this, (WebKit::WebsiteDataStoreParameters *)a2);
  *(_WORD *)(a2 + 349) = WebKit::WebsiteDataStore::useNetworkLoader(v175);
  uint64_t v177 = *((void *)this + 3);
  if ((v177 & 0x8000000000000000) == 0 || v177 == -1)
  {
    char v214 = 0;
    unint64_t v178 = WebKit::WebsiteDataStore::resolvedCookieStorageDirectory((WTF::StringImpl **)this, (WTF::StringImpl **)v231);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v178, (uint64_t *)v231, &v214, 1);
    uint64_t v180 = *(WTF::StringImpl **)v231;
    *(void *)v231 = 0;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2) {
        WTF::StringImpl::destroy(v180, v179);
      }
      else {
        *(_DWORD *)v180 -= 2;
      }
    }
    int v181 = *(unsigned __int8 *)(a2 + 648);
    uint64_t v182 = v214;
    char v214 = 0;
    if (v181)
    {
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 640), v182);
    }
    else
    {
      *(void *)(a2 + 640) = v182;
      *(unsigned char *)(a2 + 648) = 1;
    }
    char v213 = 0;
    uint64_t v183 = WebKit::WebsiteDataStore::resolvedContainerCachesNetworkingDirectory((WTF::StringImpl **)this, (WTF::StringImpl **)v231);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v183, (uint64_t *)v231, &v213, 1);
    char v185 = *(WTF::StringImpl **)v231;
    *(void *)v231 = 0;
    if (v185)
    {
      if (*(_DWORD *)v185 == 2) {
        WTF::StringImpl::destroy(v185, v184);
      }
      else {
        *(_DWORD *)v185 -= 2;
      }
    }
    int v186 = *(unsigned __int8 *)(a2 + 664);
    uint64_t v187 = v213;
    char v213 = 0;
    if (v186)
    {
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 656), v187);
    }
    else
    {
      *(void *)(a2 + 656) = v187;
      *(unsigned char *)(a2 + 664) = 1;
    }
    char v212 = 0;
    uint64_t v188 = WebKit::WebsiteDataStore::parentBundleDirectory((uint64_t)this, v231);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v188, (uint64_t *)v231, &v212, 0);
    char v190 = *(WTF::StringImpl **)v231;
    *(void *)v231 = 0;
    if (v190)
    {
      if (*(_DWORD *)v190 == 2) {
        WTF::StringImpl::destroy(v190, v189);
      }
      else {
        *(_DWORD *)v190 -= 2;
      }
    }
    int v191 = *(unsigned __int8 *)(a2 + 680);
    char v192 = v212;
    char v212 = 0;
    if (v191)
    {
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 672), v192);
    }
    else
    {
      *(void *)(a2 + 672) = v192;
      *(unsigned char *)(a2 + 680) = 1;
    }
    uint64_t v193 = *MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980])
    {
      int v194 = *(const char ***)(v193 + 8);
      unint64_t v195 = *(unsigned int *)(v193 + 4) | ((unint64_t)((*(_DWORD *)(v193 + 16) >> 2) & 1) << 32);
    }
    else
    {
      int v194 = 0;
      unint64_t v195 = 0x100000000;
    }
    WebKit::SandboxExtension::createHandleForTemporaryFile(v194, (const char **)v195, 1, (uint64_t)v231);
    if (v232)
    {
      int v197 = *(unsigned __int8 *)(a2 + 696);
      int v196 = *(const char ***)v231;
      *(void *)v231 = 0;
      if (v197)
      {
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 688), v196);
      }
      else
      {
        *(void *)(a2 + 688) = v196;
        *(unsigned char *)(a2 + 696) = 1;
      }
    }
    std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::SandboxExtensionHandle *)v231, (WTF::StringImpl *)v196);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v212);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v213);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v214);
  }
  WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v233, v176);
  WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&v215, v198);
  if (v223) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v223, v199);
  }
  if (v224) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v224, v199);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v225);
  if (v226)
  {
    if (*(_DWORD *)v226 == 2) {
      WTF::StringImpl::destroy(v226, v200);
    }
    else {
      *(_DWORD *)v226 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v227);
  if (v228)
  {
    if (*(_DWORD *)v228 == 2) {
      WTF::StringImpl::destroy(v228, v201);
    }
    else {
      *(_DWORD *)v228 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v229);
  if (v230)
  {
    if (*(_DWORD *)v230 == 2) {
      WTF::StringImpl::destroy(v230, v202);
    }
    else {
      *(_DWORD *)v230 -= 2;
    }
  }
}

void WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(uint64_t a1, uint64_t *a2, const char ***a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 4);
    if (v5)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v4 + 8), (WebKit::SandboxExtensionImpl *)(v5 | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32)), a4, (uint64_t)&v8);
      if (v9)
      {
        uint64_t v7 = v8;
        uint64_t v8 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a3, v7);
        if (v9) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
        }
      }
    }
  }
}

void WebKit::SandboxExtension::createHandleWithoutResolvingPath(WebKit::SandboxExtensionImpl *a1@<X0>, WebKit::SandboxExtensionImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v20[1] = a1;
  void v20[2] = a2;
  v20[0] = 0;
  WTF::StringView::utf8();
  if (v19) {
    uint64_t v6 = (char *)v19 + 16;
  }
  else {
    uint64_t v6 = 0;
  }
  v18[0] = 0;
  v18[32] = 0;
  WebKit::SandboxExtensionImpl::create((uint64_t)v6, a3, (uint64_t)v18, 2, (uint64_t *)buf);
  uint64_t v8 = (const char **)v20[0];
  v20[0] = *(WebKit::SandboxExtensionImpl **)buf;
  if (v8)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v8);
    WTF::fastFree(v13, v14);
  }
  char v9 = v19;
  uint64_t v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1) {
      WTF::fastFree(v9, v7);
    }
    else {
      --*(_DWORD *)v9;
    }
  }
  uint64_t v10 = v20[0];
  if (v20[0])
  {
    v20[0] = 0;
    *(void *)a4 = v10;
    char v11 = 1;
  }
  else
  {
    unsigned __int8 v12 = qword_1EB358488;
    if (os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_ERROR))
    {
      WTF::StringView::utf8();
      if (v19) {
        uint64_t v15 = (char *)v19 + 16;
      }
      else {
        uint64_t v15 = 0;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "Could not create a sandbox extension for '%s'", buf, 0xCu);
      char v17 = v19;
      uint64_t v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          WTF::fastFree(v17, v16);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
    }
    char v11 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 8) = v11;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v20);
}

void sub_198613EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, const char **a16)
{
}

void WebKit::SandboxExtensionImpl::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
  long long v11 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v11;
  int v16 = *(_DWORD *)(a3 + 32);
  WebKit::SandboxExtensionImpl::sandboxExtensionForType(v10, a1, a2, (uint64_t)v15, a4);
  *(void *)uint64_t v10 = v12;
  *(void *)(v10 + 8) = 0;
  if (v12 && *v12)
  {
    *a5 = v10;
  }
  else
  {
    *a5 = 0;
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl((const char **)v10);
    WTF::fastFree(v13, v14);
  }
}

void sub_198613FE8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtensionImpl::sandboxExtensionForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v5 = *MEMORY[0x1E4F14130];
  if ((a5 & 1) == 0) {
    unsigned int v5 = 0;
  }
  int v6 = *MEMORY[0x1E4F14118];
  if ((a5 & 2) == 0) {
    int v6 = 0;
  }
  switch(v6 | v5)
  {
    case 0u:
      uint64_t v7 = (uint64_t *)MEMORY[0x1E4F14000];
      goto LABEL_8;
    case 1u:
      uint64_t v7 = (uint64_t *)MEMORY[0x1E4F14008];
LABEL_8:
      uint64_t v8 = *v7;
      MEMORY[0x1F40CDE00](v8);
      break;
    case 2u:
      if (*(unsigned char *)(a4 + 32))
      {
        sandbox_extension_issue_mach_to_process();
      }
      else
      {
        MEMORY[0x1F40CDE40]("com.apple.webkit.extension.mach");
      }
      break;
    case 3u:
      if (*(unsigned char *)(a4 + 32))
      {
        sandbox_extension_issue_iokit_registry_entry_class_to_process();
      }
      else
      {
        MEMORY[0x1F40CDE30]("com.apple.webkit.extension.iokit");
      }
      break;
    case 4u:
      MEMORY[0x1F40CDE20](a2, v6 | v5);
      break;
    case 5u:
      if (*(unsigned char *)(a4 + 32)) {
        sandbox_extension_issue_file_to_process();
      }
      break;
    default:
      return;
  }
}

void WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters(WebKit::NetworkSessionCreationParameters *this, WTF::StringImpl *a2)
{
  WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::NetworkSessionCreationParameters *)((char *)this + 536), a2);
  if (*((unsigned char *)this + 528)) {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 512, v3);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 62);
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 60);
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 58);
  char v9 = (WTF::StringImpl *)*((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 56);
  long long v11 = (WTF::StringImpl *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 54);
  unsigned __int8 v13 = (WTF::StringImpl *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  int v16 = (WTF::StringImpl *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v12);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  char v17 = (WTF::StringImpl *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 35);
  uint64_t v19 = (WTF::StringImpl *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  int v20 = (WTF::StringImpl *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = (WTF::StringImpl *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = (WTF *)*((void *)this + 26);
  if (v22)
  {
    *((void *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v22, v18);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 23);
  uint64_t v24 = (WTF::StringImpl *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 21);
  uint64_t v26 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  long long v27 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  long long v28 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v25);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v25);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  char v30 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v25);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t v31 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v31) {
    CFRelease(v31);
  }
  char v32 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v25);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
}

void WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(const char ***this)
{
  if (*this)
  {
    (*this)[1] = 0;
    sandbox_extension_release();
  }
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this, 0);
}

void sub_198614524(_Unwind_Exception *a1)
{
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

const char **std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](const char ***a1, const char **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(result);
    return (const char **)WTF::fastFree(v4, v5);
  }
  return result;
}

const char **IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(IPC::Encoder *a1, const char ***a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v7 = (WebKit::SandboxExtensionImpl *)v3;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a2, 0);
  IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::SandboxExtensionImpl>>(a1, (const char ***)&v7);
  uint64_t result = (const char **)v7;
  uint64_t v7 = 0;
  if (result)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(result);
    return (const char **)WTF::fastFree(v5, v6);
  }
  return result;
}

void sub_1986145E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char **a10)
{
  if (a10)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::SandboxExtensionImpl>>(IPC::Encoder *a1, const char ***a2)
{
  uint64_t v4 = *a2;
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *uint64_t result = 0;
      return result;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1986146B4);
  }
  if (!v6) {
    goto LABEL_12;
  }
  *uint64_t result = 1;
  uint64_t v7 = **a2;
  if (v7) {
    size_t v8 = strlen(v7);
  }
  else {
    size_t v8 = 0;
  }

  return (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v7, v8);
}

void IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::unique_ptr<WebKit::SandboxExtensionImpl>>(a1, (uint64_t)&v9);
  if (*(void *)a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = v9;
    size_t v8 = 0;
    char v9 = 0;
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = 1;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v10)
  {
    unsigned int v5 = (const char **)v9;
    char v9 = 0;
    if (v5)
    {
      WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v5);
      WTF::fastFree(v6, v7);
    }
  }
}

void IPC::Decoder::decode<std::unique_ptr<WebKit::SandboxExtensionImpl>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 8)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1986147FC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)v1, 0);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v14 = *((void *)a1 + 3);
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v10 = *(void *)a1;
        uint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
    }
LABEL_12:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    char v9 = (void *)*((void *)a1 + 3);
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    uint64_t v11 = v4;
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_13;
  }
  if (!v8)
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
    return;
  }
  char v9 = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v19);
  if (!*(void *)a1)
  {
    IPC::Decoder::markInvalid(a1);
LABEL_17:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    return;
  }
  uint64_t v11 = v20;
  if (!v20)
  {
    __break(1u);
LABEL_19:
    if (v11)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*v9 + 16))(v9, v10, v11);
      uint64_t v5 = *(void *)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_13:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_17;
  }
  v18[0] = 0;
  v18[1] = 0;
  v16[0] = strndup(v19[0], (size_t)v19[1]);
  char v17 = 1;
  WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v18);
  unsigned __int8 v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  unsigned __int8 v13 = v16[0];
  v16[0] = 0;
  v16[1] = 0;
  void *v12 = v13;
  v12[1] = 0;
  *(void *)a2 = v12;
  *(unsigned char *)(a2 + 8) = 1;
  if (v17) {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v16);
  }
}

void sub_1986149F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char *a10, uint64_t a11, char a12)
{
  if (a12) {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(&a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(const char **this)
{
  uint64_t v2 = (char *)*this;
  if (*this)
  {
    size_t v3 = strlen(*this);
    memset_s(v2, v3, 0, v3);
    free((void *)*this);
  }
}

void *IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (v15)
    {
      int v16 = result;
      uint64_t v18 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t result = v16;
        a2 = v18;
        uint64_t v14 = *v16;
        unint64_t v13 = v16[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(v3 + v4);
  uint64_t v7 = v3 + v4 + 8;
  result[2] = v7;
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_22:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result || !v13) {
      goto LABEL_26;
    }
    uint64_t v17 = a2;
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t))(*result + 16))(result, v14, v13);
LABEL_31:
    a2 = v17;
LABEL_26:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_19;
  }
  unint64_t v8 = *v6;
  if (v8)
  {
    unint64_t v9 = v2 - (v7 - v3);
    if (v2 < v7 - v3 || v9 < v8)
    {
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t result = (void *)result[3];
      if (!result || !v2) {
        goto LABEL_26;
      }
      uint64_t v17 = a2;
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      goto LABEL_31;
    }
    result[2] = v7 + v8;
    if (v9 != -1 && v8 == -1) {
      goto LABEL_26;
    }
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  char v12 = 1;
LABEL_19:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

void WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters(WebKit::ResourceLoadStatisticsParameters *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (WTF::StringImpl **)*((void *)this + 6);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl **)*((void *)this + 5);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  unint64_t v6 = (WTF::StringImpl **)*((void *)this + 4);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 1);
  unint64_t v9 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
}

BOOL WebKit::doesAppHaveTrackingPreventionEnabled(WebKit *this)
{
  {
    uint64_t v1 = WebKit::itpQueue(void)::itpQueue;
    if (WebKit::itpQueue(void)::itpQueue)
    {
      unint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v2 = &unk_1EE9BEA30;
      unint64_t v6 = v2;
      (*(void (**)(uint64_t, void **))(*(void *)v1 + 24))(v1, &v6);
      uint64_t v3 = v6;
      unint64_t v6 = 0;
      if (v3) {
        (*(void (**)(void *))(*v3 + 8))(v3);
      }
    }
  }
  else
  {
    WebKit::itpQueue(void)::itpQueue = 0;
  }
  int v4 = atomic_load(WebKit::currentTrackingPreventionState);
  return v4 == 1;
}

void sub_198614E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebKit::SandboxExtensionHandle *std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](WebKit::SandboxExtensionHandle *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this);
  }
  return this;
}

uint64_t WebKit::WebsiteDataStore::parentBundleDirectory@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 24);
  if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundlePath"), "stringByStandardizingPath");
    JUMPOUT(0x19972EAD0);
  }
  int v4 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v4 += 2;
  }
  *a2 = v4;
  return this;
}

WTF **WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin(uint64_t *a1)
{
  uint64_t v1 = (WTF **)*a1;
  if (!*a1) {
    return 0;
  }
  if (*((_DWORD *)v1 - 3)) {
    return WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::makeConstIterator(a1, v1);
  }
  return &v1[5 * *((unsigned int *)v1 - 1)];
}

WTF::StringImpl **WebKit::WebsiteDataStore::resolvedContainerCachesNetworkingDirectory@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4 = this + 30;
  uint64_t v3 = this[30];
  if (v3) {
    goto LABEL_19;
  }
  uint64_t v5 = this[3];
  if (((unint64_t)v5 & 0x8000000000000000) != 0 && v5 != (WTF::StringImpl *)-1)
  {
    this = (WTF::StringImpl **)WTF::String::operator=((uint64_t *)this + 30, MEMORY[0x1E4F30980]);
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unint64_t v6 = v16;
  uint64_t v14 = v16;
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)&v14, &v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v7);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v15)
  {
    uint64_t v8 = *((void *)v15 + 1);
    unint64_t v9 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v8, v9, &v16);
  uint64_t v11 = v16;
  int v16 = 0;
  char v12 = *v4;
  *int v4 = v11;
  if (v12)
  {
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2) {
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v12, v10);
    char v12 = v16;
    int v16 = 0;
    if (!v12) {
      goto LABEL_14;
    }
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
LABEL_13:
    }
      *(_DWORD *)char v12 = v13;
  }
LABEL_14:
  this = (WTF::StringImpl **)v15;
  uint64_t v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_18:
  uint64_t v3 = *v4;
  if (*v4) {
LABEL_19:
  }
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void sub_1986150D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::platformSetNetworkParameters(WebKit::WebsiteDataStore *this, WebKit::WebsiteDataStoreParameters *a2)
{
  int v4 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  unint64_t v5 = (unint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
    goto LABEL_146;
  while (1)
  {
    unsigned __int16 v6 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, 0x100uLL);
    char v7 = v6;
    unint64_t v5 = v6;
    if (v6 <= 0xFFu) {
      goto LABEL_145;
    }
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned __int16 v8 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, 0x100uLL);
    unint64_t v5 = v8;
    if (v8 <= 0xFFu) {
      goto LABEL_145;
    }
    if ((_BYTE)v8)
    {
      char v9 = 1;
      goto LABEL_21;
    }
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v10 = NSString;
    WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key);
    char v11 = [v4 BOOLForKey:objc_msgSend(v10, "stringWithFormat:", @"InternalDebug%@", cf)];
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    if (v12)
    {
      CFRelease(v12);
      if (v11)
      {
LABEL_12:
        char v9 = 3;
        goto LABEL_21;
      }
    }
    else if (v11)
    {
      goto LABEL_12;
    }
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v13 = NSString;
    WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key);
    int v14 = [v4 BOOLForKey:objc_msgSend(v13, "stringWithFormat:", @"InternalDebug%@", cf)];
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    char v9 = v14 ? 2 : 0;
LABEL_21:
    int v16 = (WTF::StringImpl *)[v4 stringForKey:@"ITPManualPrevalentResource"];
    if (v16)
    {
      WTF::URL::URL((WTF::URL *)&v81);
      MEMORY[0x19972EAD0](v80, v16);
      MEMORY[0x19972E8B0](&cf, &v81, v80, 0);
      uint64_t v18 = v80[0];
      v80[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      uint64_t v19 = v81;
      uint64_t v81 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      if (v85) {
        goto LABEL_55;
      }
      WTF::URL::URL((WTF::URL *)v80);
      uint64_t result = CFStringGetLength((CFStringRef)v16);
      if ((result & 0x80000000) != 0 || (uint64_t v21 = (result + 7), __OFADD__(result, 7)))
      {
LABEL_147:
        uint64_t v79 = 0;
        __break(0xC471u);
        return result;
      }
      uint64_t result = (uint64_t)CFStringGetCStringPtr((CFStringRef)v16, 0x201u);
      if (result)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
        uint64_t v22 = v87[0];
        if (!v87[0]) {
          goto LABEL_147;
        }
        *(_DWORD *)v87[0] = 2;
        *((_DWORD *)v22 + 1) = v21;
        v22[1] = (char *)v22 + 20;
        v22[2] = (const char *)0x7074746800000004;
        *(_DWORD *)((char *)v22 + 23) = 791624304;
        CStringPtr = CFStringGetCStringPtr((CFStringRef)v16, 0x201u);
        size_t Length = CFStringGetLength((CFStringRef)v16);
        memcpy((char *)v22 + 27, CStringPtr, Length);
      }
      else
      {
        if (v21 > 0x7FFFFFEF) {
          goto LABEL_147;
        }
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20));
        uint64_t v22 = v87[0];
        if (!v87[0]) {
          goto LABEL_147;
        }
        *(_DWORD *)v87[0] = 2;
        *((_DWORD *)v22 + 1) = v21;
        v22[1] = (char *)v22 + 20;
        *((_DWORD *)v22 + 4) = 0;
        uint64_t v25 = "http://";
        for (uint64_t i = 20; i != 34; i += 2)
        {
          __int16 v27 = *(unsigned __int8 *)v25++;
          *(_WORD *)((char *)v22 + i) = v27;
        }
        v88.length = CFStringGetLength((CFStringRef)v16);
        v88.location = 0;
        CFStringGetCharacters((CFStringRef)v16, v88, (UniChar *)v22 + 17);
      }
      uint64_t v79 = (WTF::StringImpl *)v22;
      MEMORY[0x19972E8B0](&v81, v80, &v79, 0);
      WTF::URL::operator=((uint64_t)&cf, (uint64_t)&v81);
      uint64_t v29 = v81;
      uint64_t v81 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v28);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      char v30 = v79;
      uint64_t v79 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v28);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      uint64_t v31 = v80[0];
      v80[0] = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v28);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      if (v85)
      {
LABEL_55:
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v81, (const WTF::URL *)&cf);
        int v16 = v81;
      }
      else
      {
        int v16 = 0;
      }
      char v32 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v28);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
    }
    unint64_t v33 = (WebCore::IOSApplication *)[v4 BOOLForKey:@"WebKitLogCookieInformation"];
    char v34 = (char)v33;
    uint64_t v35 = *((void *)this + 26);
    uint64_t v36 = *(_DWORD **)(v35 + 328);
    if (v36) {
      *v36 += 2;
    }
    CFTypeRef cf = v36;
    long long v37 = *(_OWORD *)(v35 + 352);
    long long v85 = *(_OWORD *)(v35 + 336);
    long long v86 = v37;
    uint64_t v38 = *(WTF::StringImpl **)(v35 + 368);
    if (v38) {
      *(_DWORD *)v38 += 2;
    }
    uint64_t v81 = v38;
    uint64_t v39 = v35 + 368;
    long long v82 = *(_OWORD *)(v39 + 8);
    long long v83 = *(_OWORD *)(v39 + 24);
    isMobileSafaruint64_t i = (WebCore::IOSApplication *)WebCore::IOSApplication::isMobileSafari(v33);
    char v41 = (char)isMobileSafari;
    int v42 = isMobileSafari | WebCore::IOSApplication::isMiniBrowser(isMobileSafari);
    if ((v85 & 1) == 0 && v42)
    {
      MEMORY[0x19972EAD0](v87, [v4 stringForKey:@"WebKit2HTTPProxy"]);
      MEMORY[0x19972E890](v80, v87, 0);
      WTF::URL::operator=((uint64_t)&cf, (uint64_t)v80);
      char v44 = v80[0];
      v80[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, v43);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
      uint64_t v45 = (WTF::StringImpl *)v87[0];
      v87[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v43);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    if (v82) {
      int v46 = 0;
    }
    else {
      int v46 = v42;
    }
    if (v46 == 1)
    {
      MEMORY[0x19972EAD0](v87, [v4 stringForKey:@"WebKit2HTTPSProxy"]);
      MEMORY[0x19972E890](v80, v87, 0);
      WTF::URL::operator=((uint64_t)&v81, (uint64_t)v80);
      long long v48 = v80[0];
      v80[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, v47);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
      long long v49 = (WTF::StringImpl *)v87[0];
      v87[0] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2) {
          WTF::StringImpl::destroy(v49, v47);
        }
        else {
          *(_DWORD *)v49 -= 2;
        }
      }
    }
    int v4 = (void *)WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)this);
    v87[0] = 0;
    uint64_t v50 = (WTF::StringImpl *)v4[2];
    if (v50) {
      *(_DWORD *)v50 += 2;
    }
    uint64_t v79 = v50;
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)this, (uint64_t *)&v79, v87, 1);
    uint64_t v51 = *((void *)this + 26);
    uint64_t v52 = *(void *)(v51 + 504);
    if (v52) {
      CFRetain(*(CFTypeRef *)(v51 + 504));
    }
    int v53 = (const void *)*((void *)a2 + 10);
    *((void *)a2 + 10) = v52;
    if (v53) {
      CFRelease(v53);
    }
    WTF::String::operator=((uint64_t *)a2 + 11, (WTF::StringImpl **)(*((void *)this + 26) + 296));
    WTF::String::operator=((uint64_t *)a2 + 12, (WTF::StringImpl **)(*((void *)this + 26) + 304));
    *((unsigned char *)a2 + 104) = v34;
    WTF::URL::operator=((uint64_t)a2 + 112, (uint64_t)&cf);
    WTF::URL::operator=((uint64_t)a2 + 152, (uint64_t)&v81);
    uint64_t v79 = 0;
    char v55 = (WTF::StringImpl *)*((void *)a2 + 24);
    *((void *)a2 + 24) = v50;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v54);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    uint64_t v56 = v87[0];
    v87[0] = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)a2 + 25, v56);
    *((unsigned char *)a2 + 586) = v41;
    *((unsigned char *)a2 + 589) = v7 != 0;
    *((unsigned char *)a2 + 590) = v9;
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v80, (const WTF::URL *)(*((void *)this + 26) + 432));
    long long v58 = v80[0];
    v80[0] = 0;
    long long v59 = (WTF::StringImpl *)*((void *)a2 + 74);
    *((void *)a2 + 74) = v58;
    if (v59)
    {
      int v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 != 2) {
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v59, v57);
      long long v59 = v80[0];
      v80[0] = 0;
      if (!v59) {
        goto LABEL_101;
      }
      int v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v57);
      }
      else {
LABEL_100:
      }
        *(_DWORD *)long long v59 = v60;
    }
LABEL_101:
    uint64_t v61 = (WTF::StringImpl *)*((void *)a2 + 78);
    *((void *)a2 + 78) = v16;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, v57);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
    uint64_t v62 = (WTF::StringImpl *)v4[4];
    if (v62) {
      *(_DWORD *)v62 += 2;
    }
    uint64_t v78 = v62;
    WTF::FileSystemImpl::parentPath((uint64_t *)v80, (WTF::FileSystemImpl *)&v78, v57);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)this, (uint64_t *)v80, (const char ***)a2 + 2, 1);
    uint64_t v64 = v80[0];
    v80[0] = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, v63);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
    uint64_t v65 = (WTF **)((char *)this + 288);
    if (!*((_DWORD *)this + 75))
    {
      WTF::String::utf8();
      if (v77) {
        uint64_t v66 = (const UInt8 *)v77 + 16;
      }
      else {
        uint64_t v66 = 0;
      }
      if (v77) {
        CFIndex v67 = *((void *)v77 + 1);
      }
      else {
        CFIndex v67 = 0;
      }
      int v4 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v66, v67, 1u);
      uint64_t v68 = (const void *)CFHTTPCookieStorageCreateFromFile();
      WebKit::identifyingDataFromCookieStorage((uint64_t)v80);
      unsigned int v70 = *v65;
      if (*v65)
      {
        *((void *)this + 36) = 0;
        *((_DWORD *)this + 74) = 0;
        WTF::fastFree(v70, v69);
      }
      *((WTF::StringImpl **)this + 36) = v80[0];
      *((WTF::StringImpl **)this + 37) = v80[1];
      if (v68)
      {
        CFRelease(v68);
        if (v4) {
          goto LABEL_125;
        }
      }
      else
      {
        if (!v4) {
          goto LABEL_121;
        }
LABEL_125:
        CFRelease(v4);
      }
LABEL_121:
      uint64_t v71 = v77;
      uint64_t v77 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 1) {
          WTF::fastFree(v71, v69);
        }
        else {
          --*(_DWORD *)v71;
        }
      }
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a2, (uint64_t)this + 288);
    {
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned __int16 v72 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, 0x100uLL);
    unint64_t v5 = v72;
    if (v72 > 0xFFu) {
      break;
    }
LABEL_145:
    __break(1u);
LABEL_146:
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
    *(unsigned char *)(v5 + 1896) = 1;
  }
  *((unsigned char *)a2 + 376) = v72 != 0;
  uint64_t v74 = v78;
  uint64_t v78 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2) {
      WTF::StringImpl::destroy(v74, v73);
    }
    else {
      *(_DWORD *)v74 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v87);
  unsigned int v76 = v81;
  uint64_t v81 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2) {
      WTF::StringImpl::destroy(v76, v75);
    }
    else {
      *(_DWORD *)v76 -= 2;
    }
  }
  uint64_t result = (uint64_t)cf;
  CFTypeRef cf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v75);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198615B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf)
{
}

uint64_t WTF::URL::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | *(_DWORD *)(a2 + 8) & 1;
  *(_DWORD *)(a2 + 8) &= ~1u;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 8) & 2) != 0));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 8) & 4) != 0));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 8) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0x3F | (*(_DWORD *)(a2 + 8) >> 6 << 6);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t WebKit::optionalExperimentalFeatureEnabled(void *a1, unint64_t a2)
{
  id v4 = [NSString alloc];
  if (*a1) {
    unint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v5 = &stru_1EEA10550;
  }
  unsigned __int16 v6 = (const void *)[v4 initWithFormat:@"WebKitExperimental%@", v5];
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", v6))
  {
    unint64_t v7 = a2 >> 8;
    if (!v6) {
      return a2 | (v7 << 8);
    }
    goto LABEL_5;
  }
  LOBYTE(a2) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", v6);
  LODWORD(v7) = 1;
  if (v6) {
LABEL_5:
  }
    CFRelease(v6);
  return a2 | (v7 << 8);
}

void sub_198616018(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::identifyingDataFromCookieStorage(uint64_t a1@<X8>)
{
  CFDataRef IdentifyingData = (const __CFData *)CFHTTPCookieStorageCreateIdentifyingData();
  BytePtr = (char *)CFDataGetBytePtr(IdentifyingData);
  CFIndex Length = CFDataGetLength(IdentifyingData);
  if (Length < 0)
  {
    __break(0xC471u);
  }
  else
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a1, BytePtr, (WTF *)Length);
    if (IdentifyingData)
    {
      CFRelease(IdentifyingData);
    }
  }
}

void sub_1986160C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::useNetworkLoader(WebKit::WebsiteDataStore *this)
{
  isMobileSafaruint64_t i = (WebCore::IOSApplication *)WebCore::IOSApplication::isMobileSafari(this);
  if (isMobileSafari) {
    char isSafariViewService = 1;
  }
  else {
    char isSafariViewService = WebCore::IOSApplication::isSafariViewService(isMobileSafari);
  }
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  LOWORD(v3) = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, 0);
  int unified_http_enabled = BYTE1(v3);
  if (!BYTE1(v3))
  {
    uint64_t v3 = (WebCore *)WTF::linkedOnOrAfterSDKWithBehavior();
    if (!v3)
    {
      int unified_http_enabled = 0;
      return v3 | (unified_http_enabled << 8);
    }
    WebCore::applicationBundleIdentifier((uint64_t *)&v10, v3);
    char isRunningTest = WebKit::isRunningTest((WebKit *)&v10, v5);
    unsigned __int16 v8 = v10;
    uint64_t v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        if (isRunningTest) {
          goto LABEL_12;
        }
        goto LABEL_15;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (isRunningTest)
    {
LABEL_12:
      LOBYTE(v3) = 1;
      int unified_http_enabled = 1;
      return v3 | (unified_http_enabled << 8);
    }
LABEL_15:
    int unified_http_enabled = nw_settings_get_unified_http_enabled();
    LOBYTE(v3) = unified_http_enabled & isSafariViewService;
  }
  return v3 | (unified_http_enabled << 8);
}

void sub_1986161DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl ***WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(WTF::StringImpl ***a1, uint64_t *a2)
{
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v6, a2);
  id v4 = *a1;
  *a1 = v6;
  unsigned __int16 v6 = v4;
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  return a1;
}

unsigned int *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, (WTF::FastMalloc *)*(unsigned int *)(a2 + 12));
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, v4);
      uint64_t v6 = a1[3];
    }
    else
    {
      uint64_t v6 = 0;
    }
    memcpy((void *)(*(void *)a1 + v6), (const void *)(*(void *)a2 + v6), *(void *)a2 + *(unsigned int *)(a2 + 12) - (*(void *)a2 + v6));
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, void *a2)
{
  if (result[2] > (unint64_t)a2)
  {
    unint64_t v2 = result;
    if (result[3] > (unint64_t)a2) {
      result[3] = a2;
    }
    uint64_t result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      uint64_t result = (unsigned int *)WTF::fastRealloc((WTF *)result, a2);
      *(void *)unint64_t v2 = result;
    }
    else if (result)
    {
      *(void *)unint64_t v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebProcessDataStoreParameters>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::decode(a1, a2);
  if (!a2[152]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986163CC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 152)) {
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebChromeClient::graphicsLayerFactory(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 232))(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v4;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::graphicsLayerFactory(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return *((void *)this + 10);
}

unsigned int *WebKit::WebEditorClient::updateEditorStateAfterLayoutIfEditabilityChanged(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::updateEditorStateAfterLayoutIfEditabilityChanged((unsigned int *)(v2 - 16));
  }
  else {
    return WebKit::WebPage::updateEditorStateAfterLayoutIfEditabilityChanged(0);
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(unsigned __int8 ***)(a1 + 16);
  if ((a2 & 0x100) == 0) {
    atomic_store(0, *v2);
  }
  *v2[1] = a2 & 1;
  return 0;
}

int8x16_t WebKit::PlatformCALayerRemote::setAnchorPoint(uint64_t a1, uint64_t *a2)
{
  if (*(float *)a2 != *(float *)(a1 + 428)
    || *((float *)a2 + 1) != *(float *)(a1 + 432)
    || (result.i32[0] = *((_DWORD *)a2 + 2), *(float *)result.i32 != *(float *)(a1 + 436)))
  {
    uint64_t v3 = *a2;
    *(_DWORD *)(a1 + 436) = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 428) = v3;
    int8x16_t result = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x80uLL));
    *(int8x16_t *)(a1 + 64) = result;
  }
  return result;
}

uint64_t WebKit::defaultWriteRichTextDataWhenCopyingOrDragging(WebKit *this)
{
  return WebKit::isAsyncTextInputFeatureFlagEnabled(this) ^ 1;
}

uint64_t WebKit::isAsyncTextInputFeatureFlagEnabled(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB3596F8, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_1EB3596F8, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::isAsyncTextInputFeatureFlagEnabled(void)::$_0 &&>>);
  }
  return _MergedGlobals_64;
}

uint64_t WebKit::WebPageProxy::setMinimumUnobscuredSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (*(float *)a2 != *(float *)(v2 + 844) || *((float *)a2 + 1) != *(float *)(v2 + 848))
  {
    *(void *)(v2 + 844) = *(void *)a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        uint64_t v4 = *(void *)(this + 32);
        unsigned int v5 = (float *)(v4 + 844);
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMinimumUnobscuredSize>(*(void *)(this + 256), &v5, *(void *)(v4 + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setMaximumUnobscuredSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (*(float *)a2 != *(float *)(v2 + 816) || *((float *)a2 + 1) != *(float *)(v2 + 820))
  {
    *(void *)(v2 + 816) = *(void *)a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        uint64_t v4 = *(void *)(this + 32);
        unsigned int v5 = (float *)(v4 + 816);
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMaximumUnobscuredSize>(*(void *)(this + 256), &v5, *(void *)(v4 + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setDefaultUnobscuredSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (*(float *)a2 != *(float *)(v2 + 232) || *((float *)a2 + 1) != *(float *)(v2 + 236))
  {
    *(void *)(v2 + 232) = *(void *)a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        uint64_t v4 = *(void *)(this + 32);
        unsigned int v5 = (float *)(v4 + 232);
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDefaultUnobscuredSize>(*(void *)(this + 256), &v5, *(void *)(v4 + 1928), 0);
      }
    }
  }
  return this;
}

void sub_198617730(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::DrawingAreaProxy::setSize(int32x2_t *this, const IntSize *a2, int32x2_t *a3, double a4, int32x4_t a5)
{
  *(int32x2_t *)v5.i8 = this[7];
  *(IntSize *)a5.i8 = *a2;
  v5.u64[1] = (unint64_t)*a3;
  int32x4_t v6 = vceqq_s32(v5, a5);
  int v7 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v6, 0x1FuLL)), (int8x16_t)xmmword_1994F6FA0));
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(v6), 0xFuLL))) & 1) == 0)
  {
    this[7] = (int32x2_t)*a2;
    this[8] = vadd_s32(*a3, this[8]);
    (*(void (**)(int32x2_t *))(*(void *)this + 304))(this);
  }
  return (~v7 & 0xF) != 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMinimumUnobscuredSize>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  unsigned __int16 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v8 = 2451;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  CFTypeRef v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMaximumUnobscuredSize>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  unsigned __int16 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v8 = 2446;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  CFTypeRef v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDefaultUnobscuredSize>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  unsigned __int16 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v8 = 2423;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  CFTypeRef v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  float v4 = a2[1];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t WebKit::WebPageProxy::setViewportConfigurationViewLayoutSize(uint64_t this, const WebCore::FloatSize *a2, double a3, double a4)
{
  uint64_t v7 = this;
  *(void *)(*(void *)(this + 32) + 2132) = *(void *)a2;
  *(double *)(this + 1080) = a3;
  *(double *)(this + 1088) = a4;
  uint64_t v8 = *(void *)(this + 1192);
  if (v8)
  {
    uint64_t v10 = a2;
    double v11 = a3;
    double v12 = a4;
    this = IPC::MessageSender::send<Messages::WebPage::SetViewportConfigurationViewLayoutSize>(v8 + 16, (uint64_t)&v10);
  }
  if (!*(unsigned char *)(v7 + 801))
  {
    if (*(unsigned char *)(v7 + 800))
    {
      uint64_t v9 = *(void *)(v7 + 256);
      uint64_t v10 = a2;
      double v11 = a3;
      double v12 = a4;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportConfigurationViewLayoutSize>(v9, (uint64_t)&v10, *(void *)(*(void *)(v7 + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportConfigurationViewLayoutSize>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2483;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::FloatSize const&,double,double>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatSize const&,double,double>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  double v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_1986180AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::FloatSize const&,double,double>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatSize const&,double,double>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, *(float **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  double v4 = *(double *)(a2 + 16);

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void sub_1986186F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::setOrientationForMediaCapture(unsigned int *this, uint64_t a2, const WTF::StringImpl *a3)
{
  this[268] = a2;
  if (!*((unsigned char *)this + 801))
  {
    uint64_t v3 = this;
    if (*((unsigned char *)this + 800))
    {
      uint64_t v5 = *((void *)this + 32);
      uint64_t v6 = *(void *)(v5 + 768);
      if (v6)
      {
        *(_DWORD *)(v6 + 56) = a2;
        uint64_t v7 = *(unsigned int *)(v6 + 52);
        if (v7)
        {
          double v12 = *(uint64_t **)(v6 + 40);
          uint64_t v13 = 8 * v7;
          do
          {
            uint64_t v14 = *v12++;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, a2);
            v13 -= 8;
          }
          while (v13);
          uint64_t v5 = *((void *)v3 + 32);
        }
      }
      uint64_t v8 = *(void *)(*(void *)(v5 + 512) + 8);
      if (v8) {
        uint64_t v9 = v8 - 16;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void *)(v9 + 176);
      if (v10)
      {
        atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
        uint64_t v11 = *((void *)v3 + 34);
        {
          WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v11 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, a3))WebKit::GPUProcessProxy::setOrientationForMediaCapture(v10, a2); {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::GPUProcessProxy::setOrientationForMediaCapture(uint64_t this, int a2)
{
  int v3 = a2;
  if (*(_DWORD *)(this + 436) != a2)
  {
    *(_DWORD *)(this + 436) = a2;
    uint64_t v2 = &v3;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetOrientationForMediaCapture>(this, &v2, 0, 0);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setDeviceOrientation(WebKit::WebPageProxy *this, int a2)
{
  int v9 = a2;
  uint64_t result = *((void *)this + 165);
  if (result)
  {
    if (a2 == 90) {
      int v5 = 2;
    }
    else {
      int v5 = a2 == 180;
    }
    if (a2 == -90) {
      int v6 = 3;
    }
    else {
      int v6 = v5;
    }
    uint64_t result = WebKit::WebScreenOrientationManagerProxy::setCurrentOrientation(result, v6);
  }
  if (*((_DWORD *)this + 111) != a2)
  {
    *((_DWORD *)this + 111) = a2;
    if (!*((unsigned char *)this + 801))
    {
      if (*((unsigned char *)this + 800))
      {
        uint64_t v7 = *((void *)this + 32);
        uint64_t v8 = &v9;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDeviceOrientation>(v7, &v8, *(void *)(*((void *)this + 4) + 1928), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebScreenOrientationManagerProxy::setCurrentOrientation(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)(result + 24) = a2;
    if (*(unsigned char *)(result + 40))
    {
      uint64_t v3 = *(void *)(result + 16);
      uint64_t v4 = *(void *)(v3 + 256);
      v7[0] = a2;
      uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebScreenOrientationManager::OrientationDidChange>(v4, v7, *(void *)(*(void *)(v3 + 32) + 1928), 0);
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        v7[0] = 0;
        char v9 = 0;
        *(void *)(v2 + 32) = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v7);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
        if (v9)
        {
          uint64_t result = (uint64_t)v8;
          uint64_t v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::updateActivityState(void *a1, __int16 a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[5];
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  __int16 v6 = *(_WORD *)(a1[4] + 64);
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  *(_WORD *)(a1[4] + 64) &= ~a2;
  if ((a2 & 2) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 64))(v5)) {
    *(_WORD *)(a1[4] + 64) |= 2u;
  }
  if ((a2 & 1) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 56))(v5)) {
    *(_WORD *)(a1[4] + 64) |= 1u;
  }
  if ((a2 & 4) != 0)
  {
    unsigned int v7 = v6 & 4;
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
    int v9 = v8;
    if (v8) {
      *(_WORD *)(a1[4] + 64) |= 4u;
    }
    if ((v7 != 0) != v8)
    {
      uint64_t v10 = qword_1EB358730;
      if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = a1[4];
        uint64_t v12 = *(void *)(v11 + 760);
        uint64_t v13 = *(void *)(v11 + 1928);
        uint64_t v14 = *(void *)(a1[32] + 136);
        if (v14) {
          LODWORD(v14) = *(_DWORD *)(v14 + 108);
        }
        int v20 = 134219264;
        uint64_t v21 = a1;
        __int16 v22 = 2048;
        uint64_t v23 = v12;
        __int16 v24 = 2048;
        uint64_t v25 = v13;
        __int16 v26 = 1024;
        int v27 = v14;
        __int16 v28 = 1024;
        unsigned int v29 = v7 >> 2;
        __int16 v30 = 1024;
        int v31 = v9;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateActivityState: view visibility state changed %d -> %d", (uint8_t *)&v20, 0x32u);
      }
    }
  }
  if ((a2 & 8) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5)) {
    *(_WORD *)(a1[4] + 64) |= 8u;
  }
  if ((a2 & 0x10) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 104))(v5)) {
    *(_WORD *)(a1[4] + 64) |= 0x10u;
  }
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 112))(v5);
  if ((a2 & 0x20) != 0 && v15) {
    *(_WORD *)(a1[4] + 64) |= 0x20u;
  }
  if ((a2 & 0x40) != 0)
  {
    uint64_t v16 = a1[4];
    if ((*(unsigned char *)(v16 + 824) & 1) != 0 && (*(unsigned char *)(v16 + 904) & 1) == 0) {
      *(_WORD *)(v16 + 64) |= 0x40u;
    }
  }
  if ((a2 & 0x80) != 0)
  {
    uint64_t v17 = a1[4];
    if (*(void *)(v17 + 1016) || *(unsigned __int8 *)(v17 + 1000) <= 1u) {
      *(_WORD *)(v17 + 64) |= 0x80u;
    }
  }
  if ((a2 & 0x100) != 0)
  {
    uint64_t v18 = a1[4];
    if ((*(_DWORD *)(v18 + 824) & 0x1241800) != 0) {
      *(_WORD *)(v18 + 64) |= 0x100u;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 1600))(v5);
}

uint64_t WebKit::PageClientImpl::isViewVisible(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v3 = WeakRetained;
  if (WebKit::PageClientImpl::isViewInWindow(this) && ![v3 _isBackground]
    || ([v3 _isShowingVideoPictureInPicture] & 1) != 0)
  {
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = [v3 _mayAutomaticallyShowVideoPictureInPicture];
  }
  CFRelease(v3);
  return v4;
}

void sub_1986192FC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::PageClientImpl::isViewInWindow(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    uint64_t v4 = [WeakRetained window];
LABEL_4:
    CFRelease(v3);
    return v4 != 0;
  }
  id v3 = objc_loadWeakRetained(this + 5);
  uint64_t v4 = [v3 window];
  if (v3) {
    goto LABEL_4;
  }
  return v4 != 0;
}

void sub_198619374(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isViewWindowActive(id *this)
{
  if (WebKit::PageClientImpl::isViewVisible(this)) {
    return 1;
  }
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v2 = [WeakRetained _isRetainingActiveFocusedState];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_19861954C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isVisuallyIdle(id *this)
{
  return WebKit::PageClientImpl::isViewVisible(this) ^ 1;
}

uint64_t WebKit::PageClientImpl::isViewFocused(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (WebKit::PageClientImpl::isViewInWindow(this)
    && ([WeakRetained _isBackground] & 1) == 0
    && ([WeakRetained _contentViewIsFirstResponder] & 1) != 0)
  {
    uint64_t v3 = 1;
    if (!WeakRetained) {
      return v3;
    }
    goto LABEL_7;
  }
  uint64_t v3 = [WeakRetained _isRetainingActiveFocusedState];
  if (WeakRetained) {
LABEL_7:
  }
    CFRelease(WeakRetained);
  return v3;
}

void sub_1986195FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::updateApplicationBackgroundState(WebKit *this)
{
  {
    WebKit::allApplicationStateTrackers(void)::trackers = 0;
    *(void *)&dword_1EB35A600 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::allApplicationStateTrackers(void)::trackers, &v12);
  if (WebKit::allApplicationStateTrackers(void)::trackers)
  {
    uint64_t v1 = *(unsigned int *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
    uint64_t v2 = WebKit::allApplicationStateTrackers(void)::trackers + 8 * v1;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v1 = 0;
  }
  unsigned int v7 = &WebKit::allApplicationStateTrackers(void)::trackers;
  uint64_t v8 = v2;
  uint64_t v9 = v2;
  uint64_t v10 = v2;
  uint64_t v11 = WebKit::allApplicationStateTrackers(void)::trackers + 8 * v1;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  uint64_t v4 = v13;
  if (v13 == v8)
  {
    BOOL v6 = 1;
  }
  else
  {
    do
    {
      int v5 = *(unsigned __int8 *)(*(void *)(*(void *)v4 + 8) + 88);
      BOOL v6 = v5 != 0;
      if (!v5) {
        break;
      }
      uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
      uint64_t v4 = v13;
    }
    while (v13 != v8);
  }
  if (WebKit::updateApplicationBackgroundState(void)::s_isApplicationInBackground != v6)
  {
    WebKit::updateApplicationBackgroundState(void)::s_isApplicationInBackground = v6;
    return (void *)WebKit::ProcessAndUIAssertion::setProcessStateMonitorEnabled((WebKit::ProcessAndUIAssertion *)v6);
  }
  return result;
}

void WebKit::ApplicationStateTracker::setWindow(id *this, UIWindow *a2)
{
  uint64_t v4 = this + 2;
  id WeakRetained = (UIWindow *)objc_loadWeakRetained(this + 2);
  BOOL v6 = WeakRetained;
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if (v6 != a2)
  {
    id v7 = objc_loadWeakRetained(v4);
    if (v7)
    {
      CFRelease(v7);
      if (*((unsigned __int8 *)this + 48) - 1 <= 1) {
        WebKit::ApplicationStateTracker::setViewController(this, 0);
      }
    }
    objc_storeWeak(v4, a2);
    [this[5] setObservedWindow:a2];
    id v8 = objc_loadWeakRetained(v4);
    if (v8)
    {
      CFRelease(v8);
      uint64_t v10 = (WebKit *)WebKit::applicationType((WebKit *)a2, v9);
      *((unsigned char *)this + 48) = (_BYTE)v10;
      if ((v10 - 1) >= 2)
      {
        if (!v10)
        {
          WebKit::ApplicationStateTracker::setViewController(this, 0);
          WebKit::ApplicationStateTracker::setScene(this, (UIScene *)[(UIWindow *)a2 windowScene]);
        }
      }
      else
      {
        uint64_t v11 = (WebCore *)objc_loadWeakRetained(this + 1);
        if (v11)
        {
          uint64_t v12 = v11;
          CFRelease(v11);
          while (1)
          {
            uint64_t v14 = (UIViewController *)WebCore::viewController(v12, v13);
            if ([(UIViewController *)v14 _hostProcessIdentifier]) {
              break;
            }
            uint64_t v12 = (WebCore *)[(WebCore *)v12 superview];
            if (!v12) {
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          uint64_t v14 = 0;
        }
        WebKit::ApplicationStateTracker::setScene(this, 0);
        WebKit::ApplicationStateTracker::setViewController(this, v14);
      }
      WebKit::updateApplicationBackgroundState(v10);
    }
  }
}

void WebKit::ApplicationStateTracker::setViewController(id *this, UIViewController *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this + 4;
  id WeakRetained = (UIViewController *)objc_loadWeakRetained(this + 4);
  BOOL v6 = WeakRetained;
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if (v6 != a2)
  {
    WebKit::ApplicationStateTracker::removeAllObservers(this);
    objc_storeWeak(v4, a2);
    id v7 = objc_loadWeakRetained(v4);
    if (v7)
    {
      CFRelease(v7);
      id v8 = (WebKit::EndowmentStateTracker *)[(UIViewController *)a2 _hostProcessIdentifier];
      int v9 = (int)v8;
      *((unsigned char *)this + 88) = WebKit::EndowmentStateTracker::isApplicationForeground(v8) ^ 1;
      if (objc_msgSend((id)-[UIViewController _hostApplicationBundleIdentifier](a2, "_hostApplicationBundleIdentifier"), "isEqualToString:", @"com.apple.ios.StoreKitUIService"))*((unsigned char *)this + 88) = 0; {
      uint64_t v10 = qword_1EB358348;
      }
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        if (_UIApplicationIsExtension()) {
          uint64_t v11 = "Extension";
        }
        else {
          uint64_t v11 = "ViewService";
        }
        pid_t v12 = getpid();
        int v13 = *((unsigned __int8 *)this + 88);
        *(_DWORD *)buf = 136446978;
        __int16 v30 = v11;
        __int16 v31 = 1024;
        pid_t v32 = v12;
        __int16 v33 = 1024;
        int v34 = v9;
        __int16 v35 = 1024;
        int v36 = v13;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s has PID %d, host application PID=%d, isInBackground=%d", buf, 0x1Eu);
      }
      uint64_t v14 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3321888768;
      v25[2] = ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke;
      v25[3] = &__block_descriptor_56_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__0_e24_v16__0__NSNotification_8l;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
      int v15 = (atomic_uint *)*this;
      if (*this)
      {
        atomic_fetch_add(v15, 1u);
        __int16 v26 = this;
        atomic_fetch_add(v15, 1u);
      }
      else
      {
        __int16 v26 = this;
      }
      int v27 = (WTF *)v15;
      int v28 = v9;
      objc_storeWeak(this + 12, (id)[v14 addObserverForName:@"_UIViewServiceHostSceneDidEnterBackgroundNotification" object:a2 queue:0 usingBlock:v25]);
      if (v15 && atomic_fetch_add(v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v15);
        WTF::fastFree((WTF *)v15, v16);
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3321888768;
      v21[2] = ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke_37;
      v21[3] = &__block_descriptor_56_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__1_e24_v16__0__NSNotification_8l;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
      uint64_t v17 = (atomic_uint *)*this;
      if (*this)
      {
        atomic_fetch_add(v17, 1u);
        __int16 v22 = this;
        atomic_fetch_add(v17, 1u);
      }
      else
      {
        __int16 v22 = this;
      }
      uint64_t v23 = (WTF *)v17;
      int v24 = v9;
      objc_storeWeak(this + 13, (id)[v14 addObserverForName:@"_UIViewServiceHostSceneWillEnterForegroundNotification" object:a2 queue:0 usingBlock:v21]);
      if (v17 && atomic_fetch_add(v17, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v17);
        WTF::fastFree((WTF *)v17, v18);
      }
      uint64_t v19 = (unsigned int *)v23;
      uint64_t v23 = 0;
      if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v18);
      }
      int v20 = (unsigned int *)v27;
      int v27 = 0;
      if (v20)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v18);
        }
      }
    }
    else
    {
      *((unsigned char *)this + 88) = 1;
    }
  }
}

void sub_198619BE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21)
{
  if (a21)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a21);
      WTF::fastFree(a21, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::applicationType(WebKit *this, UIWindow *a2)
{
  if (_UIApplicationIsExtension()) {
    return 2;
  }
  return WTF::processHasEntitlement()
      && ([(WebKit *)this _isHostedInAnotherProcess] & 1) != 0;
}

uint64_t WebKit::WebPageProxy::insertionPointColorDidChange(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 32);
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 1144))(&v8, v3);
  int v9 = (WebCore::Color *)&v8;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetInsertionPointColor>(v4, &v9, *(void *)(*((void *)this + 4) + 1928), 0);
  if ((v8 & 0x8000000000000) != 0)
  {
    id v7 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
}

void sub_19861A060(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1600))(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetInsertionPointColor>(uint64_t a1, WebCore::Color **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2437;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  pid_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_19861A1D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteLayerTreeDrawingArea::*&)(void),WebKit::RemoteLayerTreeDrawingArea*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralE_block_invoke(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  uint32_t state = notify_get_state(token, &state64);
  uint64_t v4 = *(atomic_uint **)(a1 + 32);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  long long v8 = *(_OWORD *)(a1 + 40);
  uint64_t v5 = state64;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v6 = &unk_1EE9D10A0;
  *(void *)(v6 + 8) = v4;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = v5;
  *(_DWORD *)(v6 + 40) = state;
  uint64_t v9 = v6;
  WTF::callOnMainRunLoop();
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

void sub_19861A4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_19861B0C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteScrollingCoordinatorProxyIOS::hasActiveSnapPoint(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = *(WebCore::ScrollingTreeScrollingNode **)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v1 + 16));
  uint64_t v5 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(v2);
  unsigned int v6 = *(_DWORD *)(v4 + 20);
  if (v6)
  {
    if (*((unsigned char *)this + 116) && v6 <= *((_DWORD *)this + 28)) {
      return 0;
    }
  }
  else if (!*(_DWORD *)(v5 + 36))
  {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v5 + 36);
  return !v7 || !*((unsigned char *)this + 124) || v7 > *((_DWORD *)this + 30);
}

void sub_19861BA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t contentOffsetBoundedInValidRange(UIScrollView *a1, CGPoint a2)
{
  return [(UIScrollView *)a1 bounds];
}

BOOL WebKit::RemoteScrollingCoordinatorProxy::hasScrollableOrZoomedMainFrame(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  uint64_t v1 = *(unsigned char **)(*((void *)this + 3) + 16);
  if (!v1) {
    return 0;
  }
  if ((!WebCore::IOSApplication::isEventbrite(this) || WTF::linkedOnOrAfterSDKWithBehavior())
    && v1[250] == 1
    && v1[251] == 1)
  {
    return v1[406] != 0;
  }
  return 1;
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::updateScrollViewForOverscrollBehavior(void *a1, int a2, int a3, int a4)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  BOOL v9 = a2 != 2;
  if (isKindOfClass)
  {
    uint64_t result = [a1 _setBouncesInternal:v9 vertical:a3 != 2];
    if (!a4) {
      return result;
    }
  }
  else
  {
    [a1 setBouncesHorizontally:v9];
    uint64_t result = [a1 setBouncesVertically:a3 != 2];
    if (!a4) {
      return result;
    }
  }
  objc_msgSend(a1, "_wk_setTransfersHorizontalScrollingToParent:", a2 == 0);

  return objc_msgSend(a1, "_wk_setTransfersVerticalScrollingToParent:", a3 == 0);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::updateDebugIndicator(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 176);
  if (v1)
  {
    WebKit::RemoteLayerTreeDrawingAreaProxy::indicatorLocation(*(WebKit::RemoteLayerTreeDrawingAreaProxy **)(*(void *)(this + 40) + 8));
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v1, "setPosition:");
  }
  return this;
}

uint64_t WebKit::WebPageProxy::updateVisibleContentRects(uint64_t a1, long long *a2, int a3)
{
  uint64_t result = WebKit::operator==((uint64_t)a2, *(void *)(a1 + 32) + 2280);
  if (result) {
    BOOL v7 = a3 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    long long v8 = (_OWORD *)(*(void *)(a1 + 32) + 2280);
    long long v9 = *a2;
    long long v10 = a2[2];
    v8[1] = a2[1];
    void v8[2] = v10;
    *long long v8 = v9;
    long long v11 = a2[3];
    long long v12 = a2[4];
    long long v13 = a2[6];
    v8[5] = a2[5];
    v8[6] = v13;
    v8[3] = v11;
    v8[4] = v12;
    long long v14 = a2[7];
    long long v15 = a2[8];
    long long v16 = a2[9];
    *(_OWORD *)((char *)v8 + 156) = *(long long *)((char *)a2 + 156);
    v8[8] = v15;
    v8[9] = v16;
    v8[7] = v14;
    if (!*(unsigned char *)(a1 + 801))
    {
      if (*(unsigned char *)(a1 + 800))
      {
        uint64_t v17 = *(void *)(a1 + 256);
        uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 1928);
        v19[0] = &v18;
        v19[1] = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::ViewUpdateDispatcher::VisibleContentRectUpdate>(v17, (uint64_t)v19, 0, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::operator==(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 160) != *(double *)(a2 + 160)) {
    return 0;
  }
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4)) {
    return 0;
  }
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8) || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
    return 0;
  }
  if (*(float *)(a1 + 16) != *(float *)(a2 + 16) || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
    return 0;
  }
  uint64_t v4 = 0;
  if (*(float *)(a1 + 24) == *(float *)(a2 + 24) && *(float *)(a1 + 28) == *(float *)(a2 + 28))
  {
    uint64_t v7 = 0;
    do
    {
      float v8 = *(float *)(a1 + 32 + v7);
      float v9 = *(float *)(a2 + 32 + v7);
      BOOL v10 = v8 != v9 || v7 == 12;
      v7 += 4;
    }
    while (!v10);
    if (v8 != v9) {
      return 0;
    }
    if (*(float *)(a1 + 48) != *(float *)(a2 + 48) || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
    if (*(float *)(a1 + 56) != *(float *)(a2 + 56) || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
    if (*(float *)(a1 + 80) != *(float *)(a2 + 80) || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
    uint64_t v4 = 0;
    if (*(float *)(a1 + 88) == *(float *)(a2 + 88) && *(float *)(a1 + 92) == *(float *)(a2 + 92))
    {
      uint64_t v14 = 0;
      do
      {
        float v15 = *(float *)(a1 + 96 + v14);
        float v16 = *(float *)(a2 + 96 + v14);
        BOOL v17 = v15 != v16 || v14 == 12;
        v14 += 4;
      }
      while (!v17);
      if (v15 == v16)
      {
        uint64_t v18 = 0;
        do
        {
          float v19 = *(float *)(a1 + 112 + v18);
          float v20 = *(float *)(a2 + 112 + v18);
          BOOL v21 = v19 != v20 || v18 == 12;
          v18 += 4;
        }
        while (!v21);
        if (v19 == v20
          && *(float *)(a1 + 128) == *(float *)(a2 + 128)
          && *(float *)(a1 + 132) == *(float *)(a2 + 132)
          && *(float *)(a1 + 136) == *(float *)(a2 + 136)
          && *(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 168)
          && (*(unsigned char *)(a1 + 169) != 0) == (*(unsigned char *)(a2 + 169) != 0)
          && (*(unsigned char *)(a1 + 170) != 0) == (*(unsigned char *)(a2 + 170) != 0))
        {
          return (*(unsigned char *)(a1 + 171) == 0) ^ (*(unsigned char *)(a2 + 171) != 0);
        }
      }
      return 0;
    }
  }
  return v4;
}

void sub_19861D48C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v14 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19861D59C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ViewGestureController::setRenderTreeSize(uint64_t this, unint64_t a2)
{
  if (*(_DWORD *)(this + 24) == 1)
  {
    unint64_t v2 = *(void *)(this + 152);
    if (v2) {
      BOOL v3 = v2 >= a2;
    }
    else {
      BOOL v3 = 0;
    }
    if (!v3) {
      return WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(this + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)2, "outstanding event occurred: ", 29, 1);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::updateLayoutViewportParameters(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(_DWORD **)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 144);
  if (v2[30] == v3
    && v2[31] == HIDWORD(v3)
    && v2[207] == *(_DWORD *)(a2 + 152)
    && v2[208] == *(_DWORD *)(a2 + 156)
    && v2[202] == *(_DWORD *)(a2 + 160)
    && v2[203] == *(_DWORD *)(a2 + 164))
  {
    return 0;
  }
  *((void *)v2 + 15) = v3;
  *(void *)(*(void *)(a1 + 32) + 828) = *(void *)(a2 + 152);
  *(void *)(*(void *)(a1 + 32) + 808) = *(void *)(a2 + 160);
  return 1;
}

void sub_19861DE18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::ViewUpdateDispatcher::VisibleContentRectUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  float v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v8 = 1549;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::encode(v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  long long v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_19861E204(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 32));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 64));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 80));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 96));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 112));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 160));
  char v15 = *(unsigned char *)(a2 + 168);
  IPC::Encoder::operator<<<BOOL>(a1, &v15);
  char v4 = *(unsigned char *)(a2 + 169);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_7;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 170);
  float v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19861E3E8);
  }
  *float v8 = v7;
  char v10 = *(unsigned char *)(a2 + 171);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19861E3C8);
  }
  *uint64_t v11 = v10;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 128));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 132));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 136));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 144));
  uint64_t v14 = *(void *)(a2 + 152);
  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v14);
}

unint64_t IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[2]);
  float v4 = a2[3];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

void sub_19861E534(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t changeContentOffsetBoundedInValidRange(UIScrollView *a1)
{
  WebCore::FloatPoint::operator CGPoint();
  contentOffsetBoundedInValidRange(a1, v3);
  return -[UIScrollView setContentOffset:](a1, "setContentOffset:");
}

uint64_t WebKit::WebChromeClient::hasStablePageScaleFactor(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(unsigned __int8 *)(v2 + 1284);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

void sub_19861E708(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t WebKit::PlatformCALayerRemote::setBorderWidth(int8x16_t *this, int8x16_t result)
{
  if (*(float *)&this[38].i32[3] != *(float *)result.i32)
  {
    this[38].i32[3] = result.i32[0];
    uint64_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x80000uLL));
    this[4] = result;
  }
  return result;
}

const char *WebKit::WebCompiledContentRuleList::serializedActions(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((WebKit::WebCompiledContentRuleList **)this + 3), *((const char **)this + 4), *((void *)this + 5));
}

CFTypeRef __copy_helper_block_e8_32c89_ZTSKZ76__WKUserDefaults__notifyObserversOfChangeFromValuesForKeys_toValuesForKeys__E3__1(void *a1, void *a2)
{
  float v4 = (const void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_19861E7F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3) {
    CFRelease(v3);
  }
  float v4 = *(const void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::updateProcessAssertions(void)::$_0,void>::call()
{
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    unk_1EB35A750 = 0;
  }
  uint64_t v0 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v0 = &unk_1EE9DD1D8;
  uint64_t v2 = v0;
  WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v2);
  uint64_t result = (uint64_t)v2;
  uint64_t v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v9, (void **)a1);
  if (HIDWORD(v10))
  {
    uint64_t v5 = v9;
    uint64_t v6 = 8 * HIDWORD(v10);
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(void *)a1 + 8 * v3));
  }
  float v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

char *WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t a1, void **a2)
{
  if (*a2)
  {
    uint64_t v4 = *((unsigned int *)*a2 - 3);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19861EAE8);
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a1 + 8) = v4;
      *(void *)a1 = v5;
    }
  }
  uint64_t result = (char *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  if (*a2) {
    uint64_t v10 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if ((char *)v10 != result)
  {
    do
    {
      uint64_t v11 = *(void *)(*(void *)v7 + 8);
      if (v11)
      {
        uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v11 + 8), *(void *)(*(void *)v7 + 8));
        uint64_t v12 = *(atomic_uint **)(v11 + 8);
        if (v12) {
          atomic_fetch_add(v12, 1u);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(unsigned int *)(a1 + 12);
      *(void *)(*(void *)a1 + 8 * v13) = v12;
      *(_DWORD *)(a1 + 12) = v13 + 1;
      while (1)
      {
        v7 += 8;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*(void *)v7 + 1) > 1) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v9;
LABEL_18:
      ;
    }
    while (v7 != (char *)v10);
  }
  return result;
}

unsigned int *WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (unsigned int **)result;
    do
    {
      uint64_t result = *v3;
      const void *v3 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setAntialiasesEdges(int8x16_t *this, int a2)
{
  if (this[40].u8[14] != a2)
  {
    this[40].i8[14] = a2;
    int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20000000uLL));
    this[4] = result;
  }
  return result;
}

int8x16_t *WebKit::PlatformCALayerRemote::setBackingStoreAttached(int8x16_t *this, int a2)
{
  if (this[41].u8[0] != a2)
  {
    this[41].i8[0] = a2;
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x80000000uLL));
    if (a2)
    {
      return (int8x16_t *)(*(uint64_t (**)(void))(this->i64[0] + 72))();
    }
    else
    {
      uint64_t v2 = this[29].i64[1];
      this[29].i64[1] = 0;
      if (v2) {
        return (int8x16_t *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
    }
  }
  return this;
}

uint64_t IPC::ArgumentCoder<WebKit::WebPageGroupData,void>::decode(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v8);
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a2);
  uint64_t v6 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_7;
  }
  LOBYTE(v6) = v9;
  if (!v9 || (uint64_t v6 = v8, v8 = 0, !v5))
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  LOBYTE(v6) = 1;
LABEL_5:
  *(unsigned char *)(a1 + 16) = v6;
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8);
}

void sub_19861EDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  uint64_t v4 = v3;
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  if (v4) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::decode<IPC::Decoder>(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
  if ((result & 0xFF00000000) == 0)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return result;
  }
  int v5 = result;
  memset(v67, 0, 21);
  if (result)
  {
    int v6 = 0;
    long long v59 = v2;
    int v60 = result;
    uint64_t v61 = a1;
    while (1)
    {
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v65);
      if (!v66)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 24) = 0;
LABEL_88:
        uint64_t result = (uint64_t)v67[0];
        if (v67[0]) {
          return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v67[0], (WTF::StringImpl *)LODWORD(v67[1]));
        }
        return result;
      }
      uint64_t v7 = (const WTF::StringImpl *)v2[1];
      uint64_t v8 = (WTF::StringImpl *)*v2;
      unint64_t v9 = v2[2] - *v2;
      if ((unint64_t)v7 <= v9)
      {
        *uint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v52 = v2[3];
        if (!v52 || !v7) {
          goto LABEL_99;
        }
        (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
        goto LABEL_93;
      }
      uint64_t v10 = (unsigned __int8 *)v8 + v9;
      uint64_t v11 = (uint64_t)v8 + v9 + 1;
      v2[2] = v11;
      if (!v8) {
        goto LABEL_94;
      }
      unsigned int v12 = *v10;
      if (v12 > 3) {
        goto LABEL_99;
      }
      if (*v10)
      {
        if (v12 == 1)
        {
          if ((unint64_t)v7 <= v11 - (uint64_t)v8) {
            goto LABEL_98;
          }
          v2[2] = v10 + 2;
          unsigned int v13 = v10[1];
          if (v13 >= 2) {
            goto LABEL_94;
          }
          LOBYTE(v62) = v13 != 0;
          int v63 = 1;
          unsigned __int8 v64 = 1;
LABEL_13:
          uint64_t result = (uint64_t)v65;
          if ((unint64_t)v65 + 1 >= 2)
          {
            uint64_t v68 = &v62;
            int v15 = (int)v67[1];
            if (10 * (unint64_t)HIDWORD(v67[1]) >= 9 * (unint64_t)LODWORD(v67[1])
              || BYTE4(v67[2]) && LODWORD(v67[1]) <= 2 * HIDWORD(v67[1]))
            {
              if (LODWORD(v67[1])) {
                unsigned int v55 = 2 * LODWORD(v67[1]);
              }
              else {
                unsigned int v55 = 8;
              }
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v67, v55);
              int v15 = (int)v67[1];
              uint64_t result = (uint64_t)v65;
            }
            int v16 = (int)v67[2];
            unsigned int v17 = *(_DWORD *)(result + 16);
            if (v17 >= 0x100) {
              unsigned int v18 = v17 >> 8;
            }
            else {
              unsigned int v18 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
            }
            unsigned int v19 = v15 - 1;
            uint64_t v20 = (v18 ^ v16) & (v15 - 1);
            BOOL v21 = v67[0];
            __int16 v22 = (char *)v67[0] + 24 * v20;
            uint64_t v23 = *(WTF::StringImpl **)v22;
            if (*(void *)v22)
            {
              unsigned int v24 = 0;
              do
              {
                unsigned int v25 = *((_DWORD *)v23 + 4);
                if (v25 >= 0x100) {
                  unsigned int v26 = v25 >> 8;
                }
                else {
                  unsigned int v26 = WTF::StringImpl::hashSlowCase(v23);
                }
                unsigned int v27 = (v20 + v15 - ((v26 ^ v16) & v19)) & v19;
                if (v24 > v27)
                {
                  if (v24 >= 0x80) {
                    BYTE4(v67[2]) = 1;
                  }
                  int v28 = *(WTF::StringImpl **)v22;
                  *(void *)__int16 v22 = 0;
                  uint64_t v69 = v28;
                  uint64_t v29 = (uint64_t)v21 + 24 * v20 + 8;
                  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v70, v29);
                  __int16 v31 = (char *)v21 + 24 * v20;
                  unsigned int v34 = *((_DWORD *)v31 + 4);
                  __int16 v33 = v31 + 16;
                  uint64_t v32 = v34;
                  if (v34 != -1) {
                    ((void (*)(char *, uint64_t))off_1EE9B4DF0[v32])(&v72, v29);
                  }
                  *__int16 v33 = -1;
                  __int16 v35 = *(WTF::StringImpl **)v22;
                  *(void *)__int16 v22 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2) {
                      WTF::StringImpl::destroy(v35, v30);
                    }
                    else {
                      *(_DWORD *)v35 -= 2;
                    }
                  }
                  *(void *)__int16 v22 = 0;
                  *((void *)v22 + 1) = 0;
                  *((_DWORD *)v22 + 4) = 0;
                  WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>(WTF::String &&,std::variant<WTF::String,BOOL,unsigned int,double> &&)::{lambda(void)#1}>((uint64_t *)v22, (uint64_t *)&v65, (uint64_t *)&v68);
                  unsigned int v37 = (v20 + 1) & v19;
                  for (uint64_t i = v67[0]; ; uint64_t i = v67[0])
                  {
                    uint64_t v39 = (WTF::StringImpl **)((char *)i + 24 * v37);
                    uint64_t v40 = *v39;
                    if (!*v39) {
                      break;
                    }
                    unsigned int v41 = *((_DWORD *)v40 + 4);
                    if (v41 >= 0x100) {
                      unsigned int v42 = v41 >> 8;
                    }
                    else {
                      unsigned int v42 = WTF::StringImpl::hashSlowCase(v40);
                    }
                    unsigned int v43 = v27 + 1;
                    unsigned int v27 = (v37 + v15 - ((v42 ^ v16) & v19)) & v19;
                    if (v43 <= v27) {
                      unsigned int v27 = v43;
                    }
                    else {
                      std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>((uint64_t *)&v69, (uint64_t *)i + 3 * v37);
                    }
                    unsigned int v37 = (v37 + 1) & v19;
                  }
                  char v44 = v69;
                  uint64_t v69 = 0;
                  uint64_t v45 = *v39;
                  *uint64_t v39 = v44;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2) {
                      WTF::StringImpl::destroy(v45, v36);
                    }
                    else {
                      *(_DWORD *)v45 -= 2;
                    }
                  }
                  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)i + 24 * v37 + 8, (uint64_t)v70);
                  if (v71 != -1) {
                    ((void (*)(char *, char *))off_1EE9B4DF0[v71])(&v72, v70);
                  }
                  int v71 = -1;
                  uint64_t result = (uint64_t)v69;
                  uint64_t v69 = 0;
                  int v5 = v60;
                  a1 = v61;
                  uint64_t v2 = v59;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2) {
                      uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
                    }
                    else {
                      *(_DWORD *)result -= 2;
                    }
                  }
                  goto LABEL_67;
                }
                if (v26 == v18)
                {
                  uint64_t result = WTF::equal(*(WTF **)v22, v65, v7);
                  if (result)
                  {
                    int v5 = v60;
                    a1 = v61;
                    uint64_t v2 = v59;
                    goto LABEL_14;
                  }
                }
                BOOL v21 = v67[0];
                uint64_t v20 = (v20 + 1) & v19;
                ++v24;
                __int16 v22 = (char *)v67[0] + 24 * v20;
                uint64_t v23 = *(WTF::StringImpl **)v22;
              }
              while (*(void *)v22);
              if (v24 < 0x80) {
                goto LABEL_65;
              }
              BYTE4(v67[2]) = 1;
              int v5 = v60;
              a1 = v61;
            }
            else
            {
LABEL_65:
              int v5 = v60;
              a1 = v61;
            }
            uint64_t v2 = v59;
            uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>(WTF::String &&,std::variant<WTF::String,BOOL,unsigned int,double> &&)::{lambda(void)#1}>((uint64_t *)v22, (uint64_t *)&v65, (uint64_t *)&v68);
LABEL_67:
            int v14 = 0;
            ++HIDWORD(v67[1]);
          }
          else
          {
LABEL_14:
            *(unsigned char *)a1 = 0;
            *(unsigned char *)(a1 + 24) = 0;
            int v14 = 1;
          }
          if (v64 && v63 != -1) {
            uint64_t result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B4DF0[v63])(&v69, &v62);
          }
          goto LABEL_18;
        }
        uint64_t result = IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::decode<IPC::Decoder,0ul,1ul>((uint64_t)&v62, v2, *v10);
        int v46 = v64;
      }
      else
      {
        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v69);
        if (v70[0])
        {
          uint64_t v51 = v69;
          uint64_t v69 = 0;
          uint64_t v62 = v51;
          int v63 = 0;
          int v46 = 1;
        }
        else
        {
          int v46 = 0;
          LOBYTE(v62) = 0;
        }
        unsigned __int8 v64 = v46;
        uint64_t result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69);
      }
      if (!v46) {
LABEL_100:
      }
        uint64_t result = IPC::Decoder::markInvalid((IPC::Decoder *)v2);
      if (v64) {
        break;
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      int v14 = 1;
LABEL_18:
      if (v66)
      {
        uint64_t result = (uint64_t)v65;
        uint64_t v65 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v14) {
        goto LABEL_88;
      }
      if (++v6 == v5)
      {
        long long v47 = v67[0];
        long long v48 = v67[1];
        int v49 = (int)v67[2];
        char v50 = BYTE4(v67[2]);
        goto LABEL_76;
      }
    }
    if (v66) {
      goto LABEL_13;
    }
    __break(1u);
LABEL_98:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v54 = v2[3];
    if (v54)
    {
      (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
      uint64_t v56 = *v2;
      uint64_t v57 = v2[1];
      uint64_t v58 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v58)
      {
        if (v57)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v56);
LABEL_93:
          uint64_t v8 = (WTF::StringImpl *)*v2;
          uint64_t v7 = (const WTF::StringImpl *)v2[1];
LABEL_94:
          uint64_t v2 = v59;
          int v5 = v60;
          uint64_t v53 = v59[3];
          *long long v59 = 0;
          v59[1] = 0;
          a1 = v61;
          if (v53 && v7) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v8);
          }
        }
      }
    }
LABEL_99:
    LOBYTE(v62) = 0;
    unsigned __int8 v64 = 0;
    goto LABEL_100;
  }
  char v50 = 0;
  int v49 = 0;
  long long v47 = 0;
  long long v48 = 0;
LABEL_76:
  *(void *)a1 = v47;
  *(void *)(a1 + 8) = v48;
  *(_DWORD *)(a1 + 16) = v49;
  *(unsigned char *)(a1 + 20) = v50;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void sub_19861F4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16, int a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,WTF *a24,unsigned int a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28)
{
  if (a24) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(a24, (WTF::StringImpl *)a25);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebProcess::didReceiveWebProcessMessage(WebKit::WebProcess *this, atomic_uchar *volatile *a2, WTF::StringImpl **a3)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  int v6 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA35:
      IPC::Decoder::decode<WebKit::AccessibilityPreferences>((uint64_t *)a3, (uint64_t)v292);
      if (!(_BYTE)v293) {
        goto LABEL_433;
      }
      *(_OWORD *)v285 = *(_OWORD *)v292;
      *(WTF::StringImpl **)&v285[16] = v292[2];
      v285[24] = 1;
      WebKit::WebProcess::accessibilityPreferencesDidChange((uint64_t)this, (uint64_t)v285);
      return;
    case 0xA36:
      IPC::Decoder::decode<std::tuple<WebCore::MockMediaDevice>>((IPC::Decoder *)a3, v292);
      if ((_BYTE)v301) {
        WebKit::GPUProcess::addMockMediaDevice();
      }
      std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v292, v85);
      return;
    case 0xA37:
      uint64_t v79 = *((void *)this + 5);
      LOBYTE(v292[0]) = 0;
      IPC::Connection::send<Messages::WebProcessProxy::DidReceiveBackgroundResponsivenessPing>(v79, (uint64_t)v292, 0, 0, 0);
      return;
    case 0xA38:
      uint64_t v83 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v83 & 0xFF00000000) != 0)
      {
        WebKit::WebProcess::backlightLevelDidChange(this, *(float *)&v83);
      }
      return;
    case 0xA39:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a3, (uint64_t)v285);
      if (v285[16]
        && (IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v6, (uint64_t)v292),
            LOBYTE(v292[2])))
      {
        if (!v285[16]) {
          goto LABEL_526;
        }
        WebKit::WebProcess::bindAccessibilityFrameWithData((uint64_t)this, *(uint64_t *)v285, *(uint64_t *)&v285[8], (uint64_t)v292[0], (uint64_t)v292[1]);
      }
      else
      {
        uint64_t v126 = *v6;
        char v189 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        uint64_t v128 = v6[3];
        if (v128) {
          goto LABEL_371;
        }
      }
      return;
    case 0xA3A:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (LOBYTE(v292[2]))
      {
        uint64_t v94 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
        if (v95)
        {
          *(void *)v285 = v94;
          int v6 = (WTF::StringImpl **)&v285[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
          uint64_t v96 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v96 = &unk_1EEA0C278;
          *((void *)v96 + 1) = *(void *)v285;
          uint64_t v97 = *(void *)&v285[8];
          *(void *)&v285[8] = 0;
          *((void *)v96 + 2) = v97;
          v272[0] = v96;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
          if (!LOBYTE(v292[2])) {
            goto LABEL_526;
          }
          WebKit::WebProcess::clearCachedPage((uint64_t)this, (uint64_t)v292[0], (uint64_t)v292[1], (uint64_t *)v272);
          uint64_t v98 = v272[0];
          v272[0] = 0;
          if (v98) {
            goto LABEL_310;
          }
        }
      }
      return;
    case 0xA3B:
      WebCore::PlatformKeyboardEvent::setCurrentModifierState();
      return;
    case 0xA3C:
      v292[1] = 0;
      v292[0] = 0;
      WebCore::MockRealtimeMediaSourceCenter::setDevices();
      WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v292, v84);
      return;
    case 0xA3D:
      WebKit::WebProcess::clearResourceLoadStatistics(this);
      return;
    case 0xA3E:
      IPC::handleMessage<Messages::WebProcess::CreateWebPage,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebPageCreationParameters &&)>((IPC::Decoder *)a3, (uint64_t)this);
      return;
    case 0xA3F:
      uint64_t v116 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v117)
      {
        v292[0] = v116;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
        uint64_t v118 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v118 = &unk_1EEA0C188;
        *(WTF::StringImpl **)(v118 + 8) = v292[0];
        uint64_t v119 = v292[1];
        v292[1] = 0;
        *(void *)(v118 + 16) = v119;
        *(void *)v285 = v118;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
        WebKit::WebProcess::deleteAllCookies((uint64_t)this, (uint64_t *)v285);
        goto LABEL_220;
      }
      return;
    case 0xA40:
      uint64_t v60 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v60 & 0xFF00000000) == 0) {
        goto LABEL_354;
      }
      char v61 = v60;
      IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v6);
      if (!v62) {
        goto LABEL_354;
      }
      int v63 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (v64)
      {
        v292[0] = v63;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
        uint64_t v65 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v65 = &unk_1EEA0C0D8;
        *(WTF::StringImpl **)(v65 + 8) = v292[0];
        char v66 = v292[1];
        v292[1] = 0;
        *(void *)(v65 + 16) = v66;
        *(void *)v285 = v65;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
        WebKit::WebProcess::deleteWebsiteData(this, v61, (uint64_t *)v285);
LABEL_220:
        uint64_t v98 = *(WTF::StringImpl **)v285;
        *(void *)v285 = 0;
        if (v98) {
          goto LABEL_310;
        }
      }
      return;
    case 0xA41:
      uint64_t v71 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v71 & 0xFF00000000) != 0)
      {
        LODWORD(v3) = v71;
        IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)v6, v285);
        char v72 = v289;
        if ((_BYTE)v289)
        {
          LODWORD(v292[0]) = v3;
          unsigned __int8 v3 = v292;
          LOBYTE(v292[1]) = 0;
          LODWORD(v294) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v292[1], (uint64_t)v285);
          LOBYTE(v295) = 0;
          LODWORD(v298) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v295, (uint64_t)&v286);
          char v72 = 1;
        }
        else
        {
          LOBYTE(v292[0]) = 0;
        }
        BYTE8(v298) = v72;
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v285);
        if (BYTE8(v298)) {
          goto LABEL_380;
        }
      }
      else
      {
        LOBYTE(v292[0]) = 0;
        BYTE8(v298) = 0;
      }
      char v234 = *v6;
      uint64_t v235 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      long long v236 = v6[3];
      if (!v236) {
        return;
      }
      if (!v235) {
        return;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v236 + 16))(v236, v234);
      if (!BYTE8(v298)) {
        return;
      }
LABEL_380:
      uint64_t v198 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (v199)
      {
        *(void *)v285 = v198;
        int v6 = (WTF::StringImpl **)&v285[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
        uint64_t v200 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v200 = &unk_1EEA0C138;
        *((void *)v200 + 1) = *(void *)v285;
        uint64_t v201 = *(void *)&v285[8];
        *(void *)&v285[8] = 0;
        *((void *)v200 + 2) = v201;
        v272[0] = v200;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
        if (!BYTE8(v298)) {
          goto LABEL_526;
        }
        WebKit::WebProcess::deleteWebsiteDataForOrigin(this, (char)v292[0], (uint64_t)&v292[1], (uint64_t *)v272);
        uint64_t v202 = v272[0];
        v272[0] = 0;
        if (v202) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v202 + 8))(v202);
        }
      }
      if (BYTE8(v298))
      {
        if (v298 != -1) {
          ((void (*)(unsigned char *, WTF **))off_1EEA0C0F0[v298])(v285, &v295);
        }
        LODWORD(v298) = -1;
        if (v294 != -1) {
          ((void (*)(unsigned char *, WTF::StringImpl **))off_1EEA0C0F0[v294])(v285, &v292[1]);
        }
      }
      return;
    case 0xA42:
      uint64_t v106 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v106 & 0xFF00000000) == 0) {
        goto LABEL_349;
      }
      int v108 = v106;
      IPC::Decoder::decode<WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)v6, v107, (uint64_t)v285);
      if (!v285[16]) {
        goto LABEL_349;
      }
      LODWORD(v292[0]) = v108;
      unsigned __int8 v3 = &v292[1];
      v292[1] = *(WTF::StringImpl **)v285;
      uint64_t v110 = *(WTF::StringImpl **)&v285[8];
      *(void *)v285 = 0;
      *(void *)&v285[8] = 0;
      v292[2] = v110;
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v285, v109);
      LOBYTE(v293) = 1;
      uint64_t v111 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (!(_BYTE)v112) {
        goto LABEL_211;
      }
      *(void *)v285 = v111;
      int v6 = (WTF::StringImpl **)&v285[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
      uint64_t v113 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v113 = &unk_1EEA0C110;
      *((void *)v113 + 1) = *(void *)v285;
      uint64_t v114 = *(void *)&v285[8];
      *(void *)&v285[8] = 0;
      *((void *)v113 + 2) = v114;
      v272[0] = v113;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
      if (!(_BYTE)v293) {
        goto LABEL_526;
      }
      WebKit::WebProcess::deleteWebsiteDataForOrigins(this, (char)v292[0], (uint64_t)&v292[1], v272);
      uint64_t v115 = v272[0];
      v272[0] = 0;
      if (v115) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v115 + 8))(v115);
      }
      if ((_BYTE)v293) {
LABEL_211:
      }
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292[1], v112);
      return;
    case 0xA43:
      uint64_t v53 = *((void *)this + 62);
      *((void *)this + 62) = 0;
      if (v53)
      {
        uint64_t v54 = *(void (**)(void))(*(void *)v53 + 8);
        v54();
      }
      return;
    case 0xA44:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (LOBYTE(v292[1]))
      {
        WebKit::WebProcess::didWriteToPasteboardAsynchronously(this, v292, v80);
        goto LABEL_148;
      }
      return;
    case 0xA45:
      if (PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(this))
      {
        uint64_t v51 = (void (*)(void))*MEMORY[0x1E4FB6478];
        v51();
      }
      return;
    case 0xA46:
      Inspector::RemoteInspector::singleton(this);
      return;
    case 0xA47:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (LOBYTE(v292[1]))
      {
        WebKit::WebProcess::ensureAutomationSessionProxy(this, (const WTF::String *)v292);
        if (LOBYTE(v292[1])) {
          goto LABEL_316;
        }
      }
      return;
    case 0xA48:
      int v129 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
      if ((unsigned __int16)v129 < 0x100u) {
        goto LABEL_433;
      }
      LODWORD(v3) = v129;
      uint64_t v130 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v6);
      if (!v131) {
        goto LABEL_433;
      }
      uint64_t v132 = (WTF::StringImpl *)v130;
      uint64_t v133 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (!v134) {
        goto LABEL_433;
      }
      uint64_t v135 = (WTF::StringImpl *)v133;
      uint64_t v136 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (!v137) {
        goto LABEL_433;
      }
      uint64_t v138 = (WTF *)v136;
      IPC::Decoder::decode<WebKit::WebPreferencesStore>((IPC::Decoder *)v6, (uint64_t)v272);
      if (!v278) {
        goto LABEL_433;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v6, (uint64_t)&v279);
      if (!v280)
      {
        LODWORD(v3) = 0;
        LOBYTE(v292[0]) = 0;
        char v306 = 0;
        goto LABEL_506;
      }
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v6, (uint64_t)v285);
      if (!(_BYTE)v287) {
        goto LABEL_504;
      }
      IPC::ArgumentCoder<WebKit::RemoteWorkerInitializationData,void>::decode((IPC::Decoder *)v6, (uint64_t)&v281);
      if (v284)
      {
        if (!v278 || !v280 || !(_BYTE)v287) {
          goto LABEL_526;
        }
        LOBYTE(v292[0]) = (_BYTE)v3;
        v292[1] = v132;
        v292[2] = v135;
        uint64_t v139 = v272[0];
        v272[0] = 0;
        v293 = v138;
        v294 = v139;
        uint64_t v140 = v272[1];
        v272[1] = 0;
        v295 = v140;
        LODWORD(v139) = v273;
        LODWORD(v273) = 0;
        LODWORD(v296) = v139;
        LOBYTE(v139) = BYTE4(v273);
        BYTE4(v273) = 0;
        BYTE4(v296) = (_BYTE)v139;
        uint64_t v141 = v274;
        v274 = 0;
        v297 = v141;
        uint64_t v142 = v275;
        uint64_t v275 = 0;
        *(void *)&long long v298 = v142;
        LODWORD(v141) = v276;
        int v276 = 0;
        DWORD2(v298) = v141;
        LOBYTE(v141) = v277;
        char v277 = 0;
        BYTE12(v298) = (_BYTE)v141;
        uint64_t v143 = v279;
        v279 = 0;
        long long v302 = *(_OWORD *)&v285[16];
        long long v303 = v286;
        long long v301 = *(_OWORD *)v285;
        uint64_t v144 = v282;
        v299 = v143;
        uint64_t v304 = v281;
        uint64_t v282 = 0;
        v305[0] = v144;
        uint64_t v145 = v283;
        uint64_t v283 = 0;
        v305[1] = v145;
        LODWORD(v3) = 1;
        char v306 = 1;
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v282, v11);
      }
      else
      {
        uint64_t v11 = *v6;
        uint64_t v261 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        unsigned __int8 v262 = v6[3];
        if (v262 && v261) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v262 + 16))(v262, v11);
        }
LABEL_504:
        LODWORD(v3) = 0;
        LOBYTE(v292[0]) = 0;
        char v306 = 0;
      }
      if (v280) {
        goto LABEL_527;
      }
      goto LABEL_506;
    case 0xA49:
      uint64_t v87 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v87 & 0xFF00000000) == 0) {
        goto LABEL_354;
      }
      char v88 = v87;
      uint64_t v89 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (v90)
      {
        v292[0] = v89;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
        uint64_t v91 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v91 = &unk_1EEA0C0B0;
        *(WTF::StringImpl **)(v91 + 8) = v292[0];
        uint64_t v92 = v292[1];
        v292[1] = 0;
        *(void *)(v91 + 16) = v92;
        *(void *)v285 = v91;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
        WebKit::WebProcess::fetchWebsiteData(this, v88, (uint64_t *)v285);
        uint64_t v77 = *(void *)v285;
        *(void *)v285 = 0;
        if (v77) {
LABEL_227:
        }
          (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
      }
      return;
    case 0xA4A:
      unsigned __int16 v105 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v105 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::fullKeyboardAccessModeChanged((uint64_t)this, v105 != 0);
      return;
    case 0xA4B:
      IPC::Decoder::decode<WebKit::GamepadData>((IPC::Decoder *)a3, (uint64_t)v285);
      if (!v290 || (unsigned __int16 v125 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)v6), v125 < 0x100u))
      {
        std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v285, v11);
        goto LABEL_241;
      }
      if (!v290) {
        goto LABEL_526;
      }
      char v204 = v125;
      LODWORD(v292[0]) = *(_DWORD *)v285;
      long long v205 = *(_OWORD *)&v285[8];
      memset(&v285[8], 0, 24);
      *(_OWORD *)&v292[1] = v205;
      v293 = *(WTF **)&v285[24];
      char v206 = (WTF *)*((void *)&v286 + 1);
      v294 = (WTF *)v286;
      long long v286 = 0uLL;
      v295 = v206;
      *(void *)&long long v205 = v287;
      uint64_t v287 = 0;
      uint64_t v296 = v205;
      uint64_t v207 = v289;
      uint64_t v289 = 0;
      v297 = v288;
      *(void *)&long long v298 = v207;
      BYTE8(v298) = v125;
      LOBYTE(v299) = 1;
      std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v285, v11);
      WebKit::WebProcess::gamepadConnected((uint64_t)this, (unsigned int *)v292, (v204 != 0));
      if (!(_BYTE)v299) {
        return;
      }
      if ((void)v298) {
        WTF::fastFree((WTF *)(v298 - 16), v21);
      }
      char v208 = v295;
      if (v295)
      {
        v295 = 0;
        LODWORD(v296) = 0;
        WTF::fastFree(v208, v21);
      }
      char v209 = v293;
      if (v293)
      {
        v293 = 0;
        LODWORD(v294) = 0;
        WTF::fastFree(v209, v21);
      }
      char v210 = v292[2];
      v292[2] = 0;
      if (v210)
      {
        if (*(_DWORD *)v210 == 2) {
          WTF::StringImpl::destroy(v210, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v210 -= 2;
        }
      }
      uint64_t v81 = v292[1];
      v292[1] = 0;
      if (!v81) {
        return;
      }
      goto LABEL_317;
    case 0xA4C:
      uint64_t v150 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v150 & 0xFF00000000) != 0)
      {
        {
          qword_1EB35A910 = 0;
          unk_1EB35A918 = 0;
          byte_1EB35A920 = 0;
          WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F0318;
          xmmword_1EB35A928 = 0u;
          unk_1EB35A938 = 0u;
          xmmword_1EB35A948 = 0u;
        }
        WebKit::WebGamepadProvider::gamepadDisconnected(&WebKit::WebGamepadProvider::singleton(void)::provider, (void *)v150);
      }
      return;
    case 0xA4D:
      uint64_t v78 = WebCore::GCController::singleton(this);
      MEMORY[0x1F416CE70](v78);
      return;
    case 0xA4E:
      uint64_t v73 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v74)
      {
        v292[0] = v73;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
        uint64_t v75 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v75 = &unk_1EEA0C228;
        *(WTF::StringImpl **)(v75 + 8) = v292[0];
        unsigned int v76 = v292[1];
        v292[1] = 0;
        *(void *)(v75 + 16) = v76;
        *(void *)v285 = v75;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
        WebKit::WebProcess::getActivePagesOriginsForTesting((uint64_t)this, (uint64_t *)v285);
        uint64_t v77 = *(void *)v285;
        *(void *)v285 = 0;
        if (v77) {
          goto LABEL_227;
        }
      }
      return;
    case 0xA4F:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      WebKit::WebProcess::grantAccessToAssetServices((const char ***)this, (uint64_t)v292);
      goto LABEL_295;
    case 0xA50:
      IPC::ArgumentCoder<WebKit::MediaDeviceSandboxExtensions,void>::decode((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if ((_BYTE)v295) {
        goto LABEL_73;
      }
      v231 = *v6;
      char v232 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      long long v233 = v6[3];
      if (!v233 || !v232)
      {
        *int v6 = 0;
        v6[1] = 0;
        return;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v233 + 16))(v233, v231);
      if ((_BYTE)v295)
      {
LABEL_73:
        unsigned int v42 = v292[0];
        memset(v292, 0, sizeof(v292));
        *(void *)v285 = v42;
        *(WTF::StringImpl **)&v285[8] = v292[1];
        *(WTF::StringImpl **)&v285[16] = v292[2];
        unsigned int v43 = v293;
        v293 = 0;
        *(void *)&v285[24] = v43;
        char v44 = v294;
        v294 = 0;
        *(void *)&long long v286 = v44;
        BYTE8(v286) = 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v294);
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292[2], v45);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v292, v46);
        WebKit::WebProcess::grantUserMediaDeviceSandboxExtensions((uint64_t)this, (uint64_t)v285);
        if (!BYTE8(v286)) {
          return;
        }
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v286);
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v285[16], v47);
        goto LABEL_75;
      }
      uint64_t v126 = *v6;
      uint64_t v127 = v6[1];
      uint64_t v128 = v6[3];
      *int v6 = 0;
      v6[1] = 0;
      if (v128) {
        goto LABEL_242;
      }
      return;
    case 0xA51:
      IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((IPC::Decoder *)a3, v292);
      if (LOBYTE(v292[2])) {
        WebKit::WebProcess::handleInjectedBundleMessage((uint64_t)this, (uint64_t)v292, (const void **)&v292[1]);
      }
      std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v292, v151);
      return;
    case 0xA52:
      IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::decode((IPC::Decoder *)a3, v292);
      if (v307
        || ((v237 = *v6, v238 = v6[1], *int v6 = 0, v6[1] = 0, (v239 = v6[3]) != 0)
          ? (BOOL v240 = v238 == 0)
          : (BOOL v240 = 1),
            !v240
         && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v239 + 16))(v239, v237), v307)))
      {
        WebKit::WebProcessCreationParameters::WebProcessCreationParameters((uint64_t)v285, (uint64_t *)v292);
        char v291 = 1;
        if (!v307) {
          goto LABEL_284;
        }
        WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v292, v152);
        if (v291) {
          goto LABEL_284;
        }
      }
      else
      {
        v285[0] = 0;
        char v291 = 0;
      }
      long long v241 = *v6;
      __int16 v242 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      uint64_t v243 = v6[3];
      if (!v243) {
        return;
      }
      if (!v242) {
        return;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v243 + 16))(v243, v241);
      if (!v291) {
        return;
      }
LABEL_284:
      uint64_t v153 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if ((_BYTE)v154)
      {
        v292[0] = v153;
        int v6 = &v292[1];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
        uint64_t v155 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v155 = &unk_1EEA0C088;
        *(WTF::StringImpl **)(v155 + 8) = v292[0];
        uint64_t v156 = v292[1];
        v292[1] = 0;
        *(void *)(v155 + 16) = v156;
        v272[0] = (WTF::StringImpl *)v155;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
        if (!v291) {
          goto LABEL_526;
        }
        WebKit::WebProcess::initializeWebProcess((uint64_t)this, (uint64_t)v285, (uint64_t *)v272);
        uint64_t v157 = v272[0];
        v272[0] = 0;
        if (v157) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v157 + 8))(v157);
        }
      }
      if (v291) {
        WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v285, v154);
      }
      return;
    case 0xA53:
      uint64_t v120 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v121)
      {
        v292[0] = v120;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
        uint64_t v122 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v122 = &unk_1EEA0C250;
        *(WTF::StringImpl **)(v122 + 8) = v292[0];
        uint64_t v123 = v292[1];
        v292[1] = 0;
        *(void *)(v122 + 16) = v123;
        *(void *)v285 = v122;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
        WebKit::WebProcess::isJITEnabled((uint64_t)this, (uint64_t *)v285);
        uint64_t v77 = *(void *)v285;
        *(void *)v285 = 0;
        if (v77) {
          goto LABEL_227;
        }
      }
      return;
    case 0xA54:
      *((_DWORD *)this + 149) = 4;
      WTF::isIntegralOrPointerType(this);
      return;
    case 0xA55:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)v272);
      if (!LOBYTE(v272[1])) {
        goto LABEL_433;
      }
      IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v6, (uint64_t)v285);
      if (!v285[16])
      {
        if (LOBYTE(v272[1]))
        {
          char v203 = v272[0];
          v272[0] = 0;
          if (v203)
          {
            if (*(_DWORD *)v203 == 2) {
              WTF::StringImpl::destroy(v203, v11);
            }
            else {
              *(_DWORD *)v203 -= 2;
            }
          }
        }
        goto LABEL_433;
      }
      if (!LOBYTE(v272[1])) {
        goto LABEL_526;
      }
      v292[0] = v272[0];
      *(_OWORD *)&v292[1] = *(_OWORD *)v285;
      LOBYTE(v293) = 1;
      WebKit::WebProcess::postNotification((int)this, (WTF::String *)v292, *(uint64_t *)v285, v285[8]);
      if (!(_BYTE)v293) {
        return;
      }
      goto LABEL_149;
    case 0xA56:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::postObserverNotification(this, (const WTF::String *)v292);
      goto LABEL_148;
    case 0xA57:
      unsigned __int16 v49 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v49 <= 0xFFu) {
        goto LABEL_354;
      }
      BOOL v50 = v49 != 0;
      WebCore::setSystemHasAC((WebCore *)v50);
      return;
    case 0xA58:
      IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      return;
    case 0xA59:
      IPC::Decoder::decode<WebCore::PrewarmInformation>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if ((_BYTE)v294)
      {
        __int16 v35 = v292[0];
        memset(v292, 0, sizeof(v292));
        *(void *)v285 = v35;
        *(WTF::StringImpl **)&v285[8] = v292[1];
        *(WTF::StringImpl **)&v285[16] = v292[2];
        int v36 = v293;
        v293 = 0;
        *(void *)&v285[24] = v36;
        LOBYTE(v286) = 1;
        std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v292, v34);
        WebKit::WebProcess::prewarmWithDomainInformation((uint64_t)this, (uint64_t)v285);
        if (!(_BYTE)v286) {
          return;
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v285[16], v37);
LABEL_75:
        long long v48 = (WTF::StringImpl **)v285;
        goto LABEL_344;
      }
      std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v292, v34);
      uint64_t v126 = *v6;
      char v189 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      uint64_t v128 = v6[3];
      if (!v128) {
        return;
      }
LABEL_371:
      if (!v189) {
        return;
      }
      goto LABEL_446;
    case 0xA5A:
      WebKit::WebProcess::processDidResume(this);
      return;
    case 0xA5B:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::NetworkProcess::registerURLSchemeAsBypassingContentSecurityPolicy(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA5C:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::registerURLSchemeAsCORSEnabled(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA5D:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::registerURLSchemeAsCachePartitioned(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA5E:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::registerURLSchemeAsCanDisplayOnlyIfCanRequest(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA5F:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::registerURLSchemeAsDisplayIsolated(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA60:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::registerURLSchemeAsEmptyDocument(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA61:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::NetworkProcess::registerURLSchemeAsLocal(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA62:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::NetworkProcess::registerURLSchemeAsNoAccess(this, (const WTF::String *)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA63:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (LOBYTE(v292[1]))
      {
        WebKit::NetworkProcess::registerURLSchemeAsSecure(this, (const WTF::String *)v292);
        if (LOBYTE(v292[1])) {
          goto LABEL_316;
        }
      }
      return;
    case 0xA64:
      IPC::handleMessage<Messages::WebProcess::RegisterURLSchemeAsWebExtension,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::String const&)const>((IPC::Decoder *)a3, this);
      return;
    case 0xA65:
      unsigned int v55 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (!v56) {
        return;
      }
      v292[0] = v55;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
      uint64_t v57 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v57 = &unk_1EEA0C340;
      *(WTF::StringImpl **)(v57 + 8) = v292[0];
      uint64_t v58 = v292[1];
      v292[1] = 0;
      *(void *)(v57 + 16) = v58;
      *(void *)v285 = v57;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
      WebKit::WebProcess::releaseMemory((uint64_t)this, (uint64_t *)v285);
      goto LABEL_309;
    case 0xA66:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v285);
      if ((_BYTE)v289)
      {
        IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v6, (uint64_t)v272);
        char v68 = (char)v274;
        if ((_BYTE)v274)
        {
          if (!(_BYTE)v289) {
            goto LABEL_526;
          }
          LOBYTE(v292[0]) = 0;
          LODWORD(v3) = -1;
          LODWORD(v293) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v292, (uint64_t)v285);
          LOBYTE(v294) = 0;
          LODWORD(v297) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v294, (uint64_t)&v286);
          long long v298 = *(_OWORD *)v272;
          v299 = v273;
          char v68 = 1;
        }
        else
        {
          LOBYTE(v292[0]) = 0;
        }
        char v300 = v68;
      }
      else
      {
        LOBYTE(v292[0]) = 0;
        char v300 = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v285);
      if (!v300)
      {
        long long v248 = *v6;
        long long v249 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        v250 = v6[3];
        if (!v250) {
          return;
        }
        if (!v249) {
          return;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v250 + 16))(v250, v248);
        if (!v300) {
          return;
        }
      }
      uint64_t v211 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (!v212) {
        goto LABEL_411;
      }
      *(void *)v285 = v211;
      int v6 = (WTF::StringImpl **)&v285[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
      char v213 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v213 = &unk_1EEA0C160;
      *((void *)v213 + 1) = *(void *)v285;
      uint64_t v214 = *(void *)&v285[8];
      *(void *)&v285[8] = 0;
      *((void *)v213 + 2) = v214;
      v272[0] = v213;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
      if (!v300) {
        goto LABEL_526;
      }
      *(_OWORD *)v285 = v298;
      *(void *)&v285[16] = v299;
      WebKit::WebProcess::reloadExecutionContextsForOrigin((uint64_t)this, (uint64_t)v292, (uint64_t)v285, (uint64_t *)v272);
      char v215 = v272[0];
      v272[0] = 0;
      if (v215) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v215 + 8))(v215);
      }
LABEL_411:
      if (v300)
      {
        if (v297 != -1) {
          ((void (*)(unsigned char *, WTF **))off_1EEA0C0F0[v297])(v285, &v294);
        }
        LODWORD(v297) = -1;
        if (v293 != -1) {
          ((void (*)(unsigned char *, WTF::StringImpl **))off_1EEA0C0F0[v293])(v285, v292);
        }
      }
      return;
    case 0xA67:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::GPUProcess::removeMockMediaDevice(this, (const WTF::String *)v292);
LABEL_148:
      if (LOBYTE(v292[1])) {
        goto LABEL_149;
      }
      return;
    case 0xA68:
      WebCore::MockRealtimeMediaSourceCenter::resetDevices(this);
      return;
    case 0xA69:
      WebKit::WebProcess::revokeAccessToAssetServices(this);
      return;
    case 0xA6A:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      WebKit::WebProcess::revokeUserMediaDeviceSandboxExtensions((uint64_t)this, (unsigned int *)v292, v29);
      goto LABEL_61;
    case 0xA6B:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)a3, (uint64_t)v272);
      if (!LOBYTE(v272[1]))
      {
        int v164 = 0;
        LOBYTE(v292[0]) = 0;
        LOBYTE(v293) = 0;
LABEL_375:
        unint64_t v195 = *v6;
        int v196 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        int v197 = v6[3];
        if (v197 && v196) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v197 + 16))(v197, v195);
        }
        goto LABEL_420;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v6, (uint64_t)v285);
      if (!v285[8])
      {
        int v164 = 0;
        LOBYTE(v292[0]) = 0;
        LOBYTE(v293) = 0;
        goto LABEL_417;
      }
      uint64_t v158 = v6[1];
      uint64_t v11 = *v6;
      unint64_t v159 = v6[2] - *v6;
      if ((unint64_t)v158 <= v159)
      {
        long long v256 = 0;
        long long v257 = 0;
        *int v6 = 0;
        v6[1] = 0;
        long long v258 = v6[3];
        if (v258)
        {
          if (v158)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v258 + 16))(v258);
            long long v257 = *v6;
            long long v256 = v6[1];
          }
          else
          {
            long long v256 = 0;
            long long v257 = 0;
          }
        }
        goto LABEL_496;
      }
      char v160 = (unsigned __int8 *)v11 + v159;
      void v6[2] = (WTF::StringImpl *)(v160 + 1);
      if (!v11)
      {
        long long v256 = v158;
        long long v257 = 0;
LABEL_496:
        uint64_t v158 = 0;
        uint64_t v11 = 0;
        *int v6 = 0;
        v6[1] = 0;
        int v259 = v6[3];
        if (v259)
        {
          if (v256)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v259 + 16))(v259, v257, v256);
            uint64_t v11 = *v6;
            uint64_t v158 = v6[1];
          }
          else
          {
            uint64_t v158 = 0;
            uint64_t v11 = 0;
          }
        }
        goto LABEL_497;
      }
      unsigned int v161 = *v160;
      if (v161 >= 2)
      {
LABEL_497:
        *int v6 = 0;
        v6[1] = 0;
        uint64_t v260 = v6[3];
        if (v260 && v158) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v260 + 16))(v260, v11);
        }
        LOBYTE(v292[0]) = 0;
        LOBYTE(v293) = 0;
        if (v285[8])
        {
          v271 = *(WTF::StringImpl **)v285;
          *(void *)v285 = 0;
          if (v271)
          {
            if (*(_DWORD *)v271 != 2)
            {
              int v164 = 0;
              *(_DWORD *)v271 -= 2;
              goto LABEL_417;
            }
            WTF::StringImpl::destroy(v271, v11);
          }
        }
        int v164 = 0;
LABEL_417:
        int v162 = 1;
        goto LABEL_418;
      }
      if (!LOBYTE(v272[1])) {
        goto LABEL_526;
      }
      int v162 = 0;
      BOOL v4 = v161 != 0;
      int v163 = v272[0];
      v272[0] = 0;
      unsigned __int8 v3 = *(WTF::StringImpl ***)v285;
      v292[0] = v163;
      v292[1] = *(WTF::StringImpl **)v285;
      LOBYTE(v292[2]) = v4;
      int v164 = 1;
      LOBYTE(v293) = 1;
LABEL_418:
      if (LOBYTE(v272[1]))
      {
        uint64_t v222 = v272[0];
        v272[0] = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2) {
            WTF::StringImpl::destroy(v222, v11);
          }
          else {
            *(_DWORD *)v222 -= 2;
          }
        }
      }
      if (v162) {
        goto LABEL_375;
      }
LABEL_420:
      if (!v164) {
        return;
      }
      uint64_t v216 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if ((_BYTE)v21)
      {
        *(void *)v285 = v216;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
        v217 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v217 = &unk_1EEA0C2A0;
        *((void *)v217 + 1) = *(void *)v285;
        uint64_t v218 = *(void *)&v285[8];
        *(void *)&v285[8] = 0;
        *((void *)v217 + 2) = v218;
        v272[0] = v217;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
        WebKit::WebProcess::seedResourceLoadStatisticsForTesting(this, (uint64_t)v292, (uint64_t)&v292[1], v4, (uint64_t *)v272);
        char v219 = v272[0];
        v272[0] = 0;
        if (v219) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v219 + 8))(v219);
        }
        if (!(_BYTE)v293) {
          return;
        }
        unsigned __int8 v3 = (WTF::StringImpl **)v292[1];
      }
      v292[1] = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2) {
          WTF::StringImpl::destroy((WTF::StringImpl *)v3, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v3 -= 2;
        }
      }
LABEL_149:
      uint64_t v81 = v292[0];
      v292[0] = 0;
      if (v81)
      {
LABEL_317:
        if (*(_DWORD *)v81 == 2) {
          WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v81 -= 2;
        }
      }
      return;
    case 0xA6C:
      int v171 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (!v172) {
        return;
      }
      v292[0] = v171;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
      uint64_t v173 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v173 = &unk_1EEA0C318;
      *(WTF::StringImpl **)(v173 + 8) = v292[0];
      BOOL v174 = v292[1];
      v292[1] = 0;
      *(void *)(v173 + 16) = v174;
      *(void *)v285 = v173;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
      WebKit::WebProcess::sendResourceLoadStatisticsDataImmediately(this);
      goto LABEL_309;
    case 0xA6D:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setAlwaysUsesComplexTextCodePath(this);
      return;
    case 0xA6E:
      uint64_t v146 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v146 & 0xFF00000000) != 0)
      {
        uint64_t v147 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton((WebCore::BackForwardCache *)v146);
        WebCore::BackForwardCache::setMaxSize(v147);
      }
      return;
    case 0xA6F:
      unsigned __int16 v59 = IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>((uint64_t *)a3);
      if (v59 >= 0x100u)
      {
        WebKit::WebProcess::setCacheModel((uint64_t)this, (WTF *)v59);
      }
      return;
    case 0xA70:
      uint64_t v148 = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v149)
      {
        WebCore::ResourceRequestBase::setDefaultTimeoutInterval(v148, *(double *)&v148);
      }
      return;
    case 0xA71:
      unsigned __int16 v69 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v69 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setDisableFontSubpixelAntialiasingForTesting(this, (WebCore::FontCascade *)(v69 != 0));
      return;
    case 0xA72:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      WebKit::WebProcess::setDomainRelaxationForbiddenForURLScheme(this, (const WTF::String *)v292, v93);
      if (!LOBYTE(v292[1])) {
        return;
      }
      goto LABEL_316;
    case 0xA73:
      IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (!LOBYTE(v292[1])) {
        return;
      }
      uint64_t v100 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (!(_BYTE)v101) {
        goto LABEL_197;
      }
      *(void *)v285 = v100;
      int v6 = (WTF::StringImpl **)&v285[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
      uint64_t v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v102 = &unk_1EEA0C2F0;
      *((void *)v102 + 1) = *(void *)v285;
      uint64_t v103 = *(void *)&v285[8];
      *(void *)&v285[8] = 0;
      *((void *)v102 + 2) = v103;
      v272[0] = v102;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
      if (!LOBYTE(v292[1])) {
        goto LABEL_526;
      }
      WebKit::WebProcess::setDomainsWithCrossPageStorageAccess((uint64_t)this, (uint64_t *)v292, (const WTF::StringImpl *)v272);
      uint64_t v104 = v272[0];
      v272[0] = 0;
      if (v104) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v104 + 8))(v104);
      }
LABEL_197:
      if (LOBYTE(v292[1]) && v292[0]) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v292[0], v101);
      }
      return;
    case 0xA74:
      IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((IPC::Decoder *)a3, (uint64_t)v292);
      if (LOBYTE(v292[1]))
      {
        WebKit::WebProcess::setDomainsWithUserInteraction(this);
        if (LOBYTE(v292[1]))
        {
          if (v292[0]) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v292[0], v82);
          }
        }
      }
      return;
    case 0xA75:
      unsigned __int16 v70 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v70 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setEnhancedAccessibility(this, (WebCore::AXObjectCache *)(v70 != 0));
      return;
    case 0xA76:
      unsigned __int16 v99 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v99 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setHasMouseDevice((uint64_t)this, v99 != 0);
      return;
    case 0xA77:
      unsigned __int16 v22 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v22 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setHasStylusDevice((uint64_t)this, v22 != 0);
      return;
    case 0xA78:
      unsigned __int16 v52 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v52 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setHasSuspendedPageProxy((uint64_t)this, v52 != 0);
      return;
    case 0xA79:
      IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if (v182)
      {
        WebKit::WebProcess::setHiddenPageDOMTimerThrottlingIncreaseLimit((uint64_t)this);
      }
      return;
    case 0xA7A:
      IPC::Decoder::decode<WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (void *)a2, (uint64_t)v292);
      if (LOBYTE(v292[2]))
      {
        uint64_t v39 = v292[0];
        v292[0] = 0;
        *(void *)v285 = v39;
        uint64_t v40 = v292[1];
        v292[1] = 0;
        *(void *)&v285[8] = v40;
        WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v292, v38);
        v285[16] = 1;
        WebKit::WebProcess::setInitialGamepads((uint64_t)this, (uint64_t)v285);
        if (v285[16]) {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v285, v41);
        }
        return;
      }
LABEL_349:
      uint64_t v126 = *v6;
      uint64_t v183 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      uint64_t v128 = v6[3];
      if (v128) {
        BOOL v184 = v183 == 0;
      }
      else {
        BOOL v184 = 1;
      }
      if (v184) {
        return;
      }
      goto LABEL_446;
    case 0xA7B:
      IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((IPC::Decoder *)a3, v292);
      if (!(_BYTE)v293) {
        return;
      }
      WebKit::WebProcess::setInjectedBundleParameter((uint64_t)this, v292, (uint64_t)v292[1], (uint64_t)v292[2]);
      if (!(_BYTE)v293) {
        return;
      }
LABEL_316:
      uint64_t v81 = v292[0];
      v292[0] = 0;
      if (v81) {
        goto LABEL_317;
      }
      return;
    case 0xA7C:
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v292);
      if (LOBYTE(v292[2])) {
        WebKit::WebProcess::setInjectedBundleParameters((uint64_t)this, (uint64_t)v292[0], (uint64_t)v292[1]);
      }
      return;
    case 0xA7D:
      unsigned __int16 v165 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v165 <= 0xFFu) {
        goto LABEL_354;
      }
      char v166 = v165;
      int v167 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
      if (!v168) {
        return;
      }
      v292[0] = v167;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
      uint64_t v169 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v169 = &unk_1EEA0C200;
      *(WTF::StringImpl **)(v169 + 8) = v292[0];
      uint64_t v170 = v292[1];
      v292[1] = 0;
      *(void *)(v169 + 16) = v170;
      *(void *)v285 = v169;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
      WebKit::WebProcess::setIsInProcessCache(this, v166 != 0, (uint64_t *)v285);
      goto LABEL_309;
    case 0xA7E:
      unsigned __int16 v175 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v175 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setJavaScriptGarbageCollectorTimerEnabled(this, v175 != 0);
      return;
    case 0xA7F:
      unsigned __int16 v176 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a3);
      if (v176 <= 0xFFu)
      {
        v244 = *v6;
        long long v245 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        char v246 = v6[3];
        if (v246) {
          BOOL v247 = v245 == 0;
        }
        else {
          BOOL v247 = 1;
        }
        if (!v247) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v246 + 16))(v246, v244);
        }
      }
      else
      {
        char v178 = v176;
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v6, v177, (uint64_t)v285);
        if (v285[16])
        {
          v292[1] = *(WTF::StringImpl **)v285;
          uint64_t v180 = *(WTF::StringImpl **)&v285[8];
          *(void *)v285 = 0;
          *(void *)&v285[8] = 0;
          v292[2] = v180;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v285, v179);
          LOBYTE(v292[0]) = v178;
          LOBYTE(v293) = 1;
          WebKit::WebProcess::setMediaAccessibilityPreferences((uint64_t)this);
          if ((_BYTE)v293)
          {
            long long v48 = &v292[1];
LABEL_344:
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v30);
          }
          return;
        }
      }
LABEL_241:
      uint64_t v126 = *v6;
      uint64_t v127 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      uint64_t v128 = v6[3];
      if (!v128) {
        return;
      }
LABEL_242:
      if (!v127) {
        return;
      }
      goto LABEL_446;
    case 0xA80:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      __int16 v31 = v292[0];
      v292[0] = 0;
      *(void *)v285 = v31;
      uint64_t v32 = v292[1];
      v292[1] = 0;
      *(void *)&v285[8] = v32;
      WebKit::WebProcess::setMediaMIMETypes(this, (uint64_t)v285);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v285, v33);
LABEL_61:
      if (!LOBYTE(v292[2])) {
        return;
      }
      goto LABEL_343;
    case 0xA81:
      unsigned __int16 v86 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v86 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setMemoryCacheDisabled(this, v86 != 0);
      return;
    case 0xA82:
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((IPC::Decoder *)a3, v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      WebKit::GPUProcess::setMockMediaDeviceIsEphemeral(this, (const WTF::String *)v292, (WTF::String *)LOBYTE(v292[1]));
      if (!LOBYTE(v292[2])) {
        return;
      }
      goto LABEL_149;
    case 0xA83:
      IPC::Decoder::decode<WebCore::ScreenProperties>((IPC::Decoder *)a3, v292);
      if (!LOBYTE(v292[2])) {
        goto LABEL_433;
      }
      *(_DWORD *)v285 = v292[0];
      *(WTF::StringImpl **)&v285[8] = v292[1];
      v285[16] = 1;
      WebKit::WebProcess::setScreenProperties((uint64_t)this);
      if (*(void *)&v285[8]) {
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(*(uint64_t *)&v285[8], v181);
      }
      return;
    case 0xA84:
      unsigned __int16 v20 = IPC::ArgumentCoder<WebKit::WebExtensionContentWorldType,void>::decode<IPC::Decoder>(a3);
      if (v20 > 0xFFu)
      {
        WebKit::WebProcess::setTextCheckerState((uint64_t)this, v20);
        return;
      }
      int v186 = 0;
      int v223 = *v6;
      char v224 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      uint64_t v225 = v6[3];
      if (v225)
      {
        if (v224) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v225 + 16))(v6[3], v223);
        }
        int v186 = v6[3];
      }
      uint64_t v226 = v6[1];
      *int v6 = 0;
      v6[1] = 0;
      if (v186) {
        goto LABEL_461;
      }
      return;
    case 0xA85:
      unsigned __int16 v23 = IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(a3);
      if (v23 <= 0xFFu)
      {
        int v227 = *v6;
        char v228 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        uint64_t v229 = v6[3];
        if (v229) {
          BOOL v230 = v228 == 0;
        }
        else {
          BOOL v230 = 1;
        }
        if (!v230)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v229 + 16))(v229, v227);
          int v186 = v6[3];
          uint64_t v226 = v6[1];
          *int v6 = 0;
          v6[1] = 0;
          if (v186)
          {
LABEL_461:
            if (v226) {
              goto LABEL_358;
            }
          }
        }
      }
      else
      {
        unsigned __int8 v24 = v23;
        unsigned int v25 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
        if (v26)
        {
          v292[0] = v25;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v292[1], a2);
          uint64_t v27 = WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v27 = &unk_1EEA0C2C8;
          *(WTF::StringImpl **)(v27 + 8) = v292[0];
          int v28 = v292[1];
          v292[1] = 0;
          *(void *)(v27 + 16) = v28;
          *(void *)v285 = v27;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v292[1]);
          WebKit::WebProcess::setThirdPartyCookieBlockingMode(this, v24, (uint64_t *)v285);
LABEL_309:
          uint64_t v98 = *(WTF::StringImpl **)v285;
          *(void *)v285 = 0;
          if (v98) {
LABEL_310:
          }
            (*(void (**)(WTF::StringImpl *))(*(void *)v98 + 8))(v98);
        }
      }
      return;
    case 0xA86:
      unsigned __int16 v67 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v67 <= 0xFFu) {
        goto LABEL_354;
      }
      WebKit::WebProcess::setTrackingPreventionEnabled(this, (WebCore::DeprecatedGlobalSettings *)(v67 != 0));
      return;
    case 0xA87:
      IPC::handleMessage<Messages::WebProcess::SetWebsiteDataStoreParameters,WebKit::WebProcess,WebKit::WebProcess,void ()(WebKit::WebProcessDataStoreParameters &&)>((IPC::Decoder *)a3, this);
      return;
    case 0xA88:
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((IPC::Decoder *)a3, (uint64_t)v272);
      if (!LOBYTE(v272[1]))
      {
        int v19 = 0;
        LOBYTE(v292[0]) = 0;
        LOBYTE(v293) = 0;
LABEL_364:
        char v190 = *v6;
        int v191 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        char v192 = v6[3];
        if (v192 && v191) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v192 + 16))(v192, v190);
        }
        goto LABEL_365;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v6, (uint64_t)v285);
      if (v285[8])
      {
        unsigned int v12 = v6[1];
        unsigned int v13 = *v6;
        unint64_t v14 = (((unint64_t)v6[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v6;
        if ((unint64_t)v12 >= v14 && (unint64_t)v12 - v14 > 7)
        {
          int v16 = (WTF::StringImpl **)((char *)v13 + v14);
          void v6[2] = (WTF::StringImpl *)(v16 + 1);
          if (v13)
          {
            if (!LOBYTE(v272[1]))
            {
              do
              {
LABEL_526:
                __break(1u);
LABEL_527:
                v270 = v279;
                v279 = 0;
                if (v270)
                {
                  if (*(_DWORD *)v270 == 2) {
                    WTF::StringImpl::destroy(v270, v11);
                  }
                  else {
                    *(_DWORD *)v270 -= 2;
                  }
                }
                if (!v278) {
                  goto LABEL_510;
                }
LABEL_506:
                if (v274) {
                  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v274, (WTF::StringImpl *)v275);
                }
                if (v272[0])
                {
                  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v272[0], (WTF::StringImpl *)LODWORD(v272[1]));
                  if (!v3)
                  {
LABEL_433:
                    uint64_t v126 = *v6;
                    char v220 = v6[1];
                    *int v6 = 0;
                    v6[1] = 0;
                    uint64_t v128 = v6[3];
                    if (v128) {
                      BOOL v221 = v220 == 0;
                    }
                    else {
                      BOOL v221 = 1;
                    }
                    if (!v221) {
LABEL_446:
                    }
                      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v128 + 16))(v128, v126);
                    return;
                  }
                }
                else
                {
LABEL_510:
                  if (!v3) {
                    goto LABEL_433;
                  }
                }
                uint64_t v263 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v6);
                if (!(_BYTE)v264) {
                  goto LABEL_516;
                }
                *(void *)v285 = v263;
                int v6 = (WTF::StringImpl **)&v285[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v285[8], a2);
                v265 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                *(void *)v265 = &unk_1EEA0C1D8;
                *((void *)v265 + 1) = *(void *)v285;
                uint64_t v266 = *(void *)&v285[8];
                *(void *)&v285[8] = 0;
                *((void *)v265 + 2) = v266;
                v272[0] = v265;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v285[8]);
              }
              while (!v306);
              *(_OWORD *)v285 = v301;
              *(_OWORD *)&v285[16] = v302;
              long long v286 = v303;
              WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess(this, LOBYTE(v292[0]), (uint64_t)v292[1], (uint64_t)v292[2], (uint64_t)v293, (WebKit::WebPage *)&v294, (uint64_t *)&v299, (long long *)v285, &v304, (uint64_t)v272);
              v267 = v272[0];
              v272[0] = 0;
              if (v267) {
                (*(void (**)(WTF::StringImpl *))(*(void *)v267 + 8))(v267);
              }
              if (v306)
              {
LABEL_516:
                WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v305, v264);
                v269 = v299;
                v299 = 0;
                if (v269)
                {
                  if (*(_DWORD *)v269 == 2) {
                    WTF::StringImpl::destroy(v269, v268);
                  }
                  else {
                    *(_DWORD *)v269 -= 2;
                  }
                }
                if (v297) {
                  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v297, (WTF::StringImpl *)v298);
                }
                if (v294) {
                  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v294, (WTF::StringImpl *)v295);
                }
                return;
              }
              return;
            }
            int v17 = 0;
            int v5 = *v16;
            unsigned int v18 = v272[0];
            v272[0] = 0;
            v292[0] = v18;
            v292[1] = *(WTF::StringImpl **)v285;
            v292[2] = v5;
            int v19 = 1;
            LOBYTE(v293) = 1;
LABEL_17:
            if (LOBYTE(v272[1]))
            {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v272);
              if (v17) {
                goto LABEL_364;
              }
            }
            else if (v17)
            {
              goto LABEL_364;
            }
LABEL_365:
            if (v19)
            {
              WebKit::WebProcess::startMemorySampler(this, (uint64_t *)v292, &v292[1], *(double *)&v5);
              if ((_BYTE)v293)
              {
                int v194 = v292[1];
                v292[1] = 0;
                if (v194)
                {
                  if (*(_DWORD *)v194 == 2) {
                    WTF::StringImpl::destroy(v194, v193);
                  }
                  else {
                    *(_DWORD *)v194 -= 2;
                  }
                }
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v292);
              }
            }
            return;
          }
          long long v251 = v12;
          long long v252 = 0;
        }
        else
        {
          long long v251 = 0;
          long long v252 = 0;
          *int v6 = 0;
          v6[1] = 0;
          v253 = v6[3];
          if (v253)
          {
            if (v12)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v253 + 16))(v253, v13, v12);
              long long v252 = *v6;
              long long v251 = v6[1];
            }
            else
            {
              long long v251 = 0;
              long long v252 = 0;
            }
          }
        }
        *int v6 = 0;
        v6[1] = 0;
        long long v254 = v6[3];
        if (v254 && v251) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v254 + 16))(v254, v252);
        }
        LOBYTE(v292[0]) = 0;
        LOBYTE(v293) = 0;
        if (v285[8])
        {
          long long v255 = *(WTF::StringImpl **)v285;
          *(void *)v285 = 0;
          if (v255)
          {
            if (*(_DWORD *)v255 != 2)
            {
              int v19 = 0;
              *(_DWORD *)v255 -= 2;
              goto LABEL_502;
            }
            WTF::StringImpl::destroy(v255, v252);
          }
        }
        int v19 = 0;
        goto LABEL_502;
      }
      int v19 = 0;
      LOBYTE(v292[0]) = 0;
      LOBYTE(v293) = 0;
LABEL_502:
      int v17 = 1;
      goto LABEL_17;
    case 0xA89:
      unint64_t v9 = (const char ***)WebKit::WebMemorySampler::singleton(this);
      WebKit::WebMemorySampler::stop(v9, v10);
      return;
    case 0xA8A:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      WebKit::WebProcess::switchFromStaticFontRegistryToUserFontRegistry((uint64_t)this, (const WebKit::SandboxExtensionHandle *)v292);
      goto LABEL_295;
    case 0xA8B:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      WebKit::WebProcess::unblockServicesRequiredByAccessibility((uint64_t)this, (uint64_t)v292);
LABEL_295:
      if (LOBYTE(v292[2])) {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v292, v124);
      }
      return;
    case 0xA8C:
      IPC::handleMessage<Messages::WebProcess::UpdateDomainsWithStorageAccessQuirks,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>((IPC::Decoder *)a3, (uint64_t)this);
      return;
    case 0xA8D:
      IPC::handleMessage<Messages::WebProcess::UpdateStorageAccessUserAgentStringQuirks,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&)>((IPC::Decoder *)a3);
      return;
    case 0xA8E:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a3) <= 0xFFu)
      {
LABEL_354:
        char v185 = v6[1];
        *int v6 = 0;
        v6[1] = 0;
        int v186 = v6[3];
        if (v186) {
          BOOL v187 = v185 == 0;
        }
        else {
          BOOL v187 = 1;
        }
        if (!v187)
        {
LABEL_358:
          uint64_t v188 = *(void (**)(void))(*(void *)v186 + 16);
          v188();
        }
      }
      else
      {
        PAL::setCurrentUserInterfaceIdiom();
      }
      return;
    case 0xA8F:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, (void *)a2, (uint64_t)v292);
      if (!LOBYTE(v292[2])) {
        return;
      }
      WebKit::GPUProcess::userPreferredLanguagesChanged();
      if (!LOBYTE(v292[2])) {
        return;
      }
LABEL_343:
      long long v48 = v292;
      goto LABEL_344;
    default:
      return;
  }
}

IPC::Decoder *IPC::Decoder::decode<WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::String,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<WTF::String,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((void *)result + 1);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = ((*((void *)result + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v19 = *((void *)result + 3);
    if (!v19)
    {
LABEL_27:
      *(void *)uint64_t result = 0;
      *((void *)result + 1) = 0;
      uint64_t result = (IPC::Decoder *)*((void *)result + 3);
      if (result && v17) {
        uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t, unint64_t))(*(void *)result + 16))(result, v18, v17);
      }
      goto LABEL_28;
    }
    unsigned __int16 v22 = result;
    if (v3)
    {
LABEL_39:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v4);
      uint64_t result = v22;
      uint64_t v18 = *(void *)v22;
      unint64_t v17 = *((void *)v22 + 1);
      goto LABEL_27;
    }
    goto LABEL_41;
  }
  uint64_t v7 = (unsigned int *)(v4 + v5);
  uint64_t v8 = v4 + v5 + 4;
  *((void *)result + 2) = v8;
  if (!v4) {
    goto LABEL_40;
  }
  unint64_t v9 = *v7;
  if (v9 == -1)
  {
    *(void *)a2 = 0;
    goto LABEL_17;
  }
  if (v3 <= v8 - v4)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v20 = *((void *)result + 3);
    if (!v20) {
      goto LABEL_27;
    }
    unsigned __int16 v22 = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      unint64_t v17 = 0;
      uint64_t v4 = *(void *)v22;
      uint64_t v21 = *((void *)v22 + 1);
      uint64_t v19 = *((void *)v22 + 3);
      *(void *)unsigned __int16 v22 = 0;
      *((void *)v22 + 1) = 0;
      uint64_t v18 = 0;
      if (v19)
      {
        uint64_t result = v22;
        if (!v21) {
          goto LABEL_27;
        }
        goto LABEL_39;
      }
LABEL_42:
      uint64_t result = v22;
      goto LABEL_27;
    }
LABEL_41:
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_42;
  }
  uint64_t v10 = (char *)v7 + 5;
  *((void *)result + 2) = (char *)v7 + 5;
  unsigned int v11 = *((unsigned __int8 *)v7 + 4);
  if (v11 >= 2)
  {
LABEL_40:
    unint64_t v17 = v3;
    uint64_t v18 = v4;
    goto LABEL_27;
  }
  if (v11)
  {
    if (v3 < (unint64_t)&v10[-v4] || v3 - (unint64_t)&v10[-v4] < v9)
    {
      *(void *)uint64_t result = 0;
      *((void *)result + 1) = 0;
      uint64_t result = (IPC::Decoder *)*((void *)result + 3);
      if (result) {
        uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *))(*(void *)result + 16))(result);
      }
      goto LABEL_28;
    }
    *((void *)result + 2) = &v10[v9];
    uint64_t result = (IPC::Decoder *)WTF::String::String();
  }
  else
  {
    unint64_t v14 = ((unint64_t)(v10 + 1) & 0xFFFFFFFFFFFFFFFELL) - v4;
    unint64_t v15 = 2 * v9;
    if (v3 < v14 || v3 - v14 < v15)
    {
      uint64_t result = (IPC::Decoder *)IPC::Decoder::markInvalid(result);
LABEL_28:
      char v13 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_18;
    }
    *((void *)result + 2) = v4 + v14 + v15;
    uint64_t result = (IPC::Decoder *)WTF::String::String();
  }
LABEL_17:
  char v13 = 1;
LABEL_18:
  *(unsigned char *)(a2 + 8) = v13;
  return result;
}

void *IPC::Decoder::decode<std::optional<unsigned long long>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<unsigned long long>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      unint64_t v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  int v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      unint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_11:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (result && v3) {
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
    }
    goto LABEL_12;
  }
  if (v7)
  {
    uint64_t result = (void *)IPC::Decoder::decode<unsigned long long>(result);
    if (v9)
    {
      *(void *)a2 = result;
      char v8 = 1;
      *(unsigned char *)(a2 + 8) = 1;
      goto LABEL_6;
    }
LABEL_12:
    char v8 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_6;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  char v8 = 1;
LABEL_6:
  *(unsigned char *)(a2 + 16) = v8;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a1);
  uint64_t v9 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_7;
  }
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<PAL::SessionID,void>::decode(a1);
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<PAL::SessionID,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    char v5 = (void *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      if ((unint64_t)(*v5 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_15:
        uint64_t v7 = 0;
        goto LABEL_16;
      }
      unint64_t v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      uint64_t v7 = *v5;
      return v6 | v7;
    }
    unint64_t v9 = v1;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      unint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  uint64_t v7 = 0;
  unint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (!v12) {
    return v6 | v7;
  }
  uint64_t v13 = a1;
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
  if (!*v13)
  {
    uint64_t v7 = 0;
LABEL_16:
    unint64_t v6 = 0;
    return v6 | v7;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  uint64_t v4 = *a1;
  if (!*a1)
  {
    unint64_t v5 = 0;
    return v5 | v4;
  }
  if (v3)
  {
    unint64_t v5 = result & 0xFFFFFFFFFFFFFF00;
    uint64_t v4 = result;
    if ((unint64_t)(result - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
    }
    return v5 | v4;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<unsigned long long>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = v2 + v3;
    a1[2] = v5 + 8;
    if (v2) {
      return *(void *)v5;
    }
    unint64_t v7 = v1;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v10 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v10;
        uint64_t v8 = *v10;
        unint64_t v7 = v10[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
    }
    return 0;
  }
  return result;
}

WTF *WebKit::WebProcess::postNotification(int a1, WTF::String *this, uint64_t a3, char a4)
{
  if (!a4) {
    goto LABEL_9;
  }
  int out_token = 0;
  WTF::String::ascii((uint64_t *)&v13, this);
  if (v13) {
    unint64_t v6 = (char *)v13 + 16;
  }
  else {
    unint64_t v6 = 0;
  }
  uint32_t v8 = notify_register_check(v6, &out_token);
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WTF::fastFree(v9, v7);
      if (v8) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
    --*(_DWORD *)v9;
  }
  if (v8) {
    goto LABEL_9;
  }
LABEL_18:
  notify_set_state(out_token, a3);
  notify_cancel(out_token);
LABEL_9:
  WTF::String::ascii((uint64_t *)&v13, this);
  if (v13) {
    uint64_t v10 = (char *)v13 + 16;
  }
  else {
    uint64_t v10 = 0;
  }
  notify_post(v10);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return (WTF *)WTF::fastFree(result, v11);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void sub_198623094(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::fastFree(a9, a2);
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>(WTF::String &&,std::variant<WTF::String,BOOL,unsigned int,double> &&)::{lambda(void)#1}>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  WTF::String::operator=(a1, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, *a3);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 1), (uint64_t)v6);
  if (v7 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9B4DF0[v7])(&v8, v6);
  }
  return result;
}

void sub_198623138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B4DF0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::decode<IPC::Decoder,0ul,1ul>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
    if ((result & 0xFF00000000) != 0)
    {
      *(_DWORD *)a1 = result;
      int v6 = 2;
      goto LABEL_4;
    }
LABEL_8:
    char v7 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v5) {
    goto LABEL_8;
  }
  *(void *)a1 = result;
  int v6 = 3;
LABEL_4:
  *(_DWORD *)(a1 + 8) = v6;
  char v7 = 1;
LABEL_5:
  *(unsigned char *)(a1 + 16) = v7;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Seconds>>(uint64_t *a1)
{
  uint64_t v2 = IPC::Decoder::decode<WTF::Seconds>(a1);
  uint64_t v4 = v3;
  if (!v3) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  if (v4) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebsiteDataStore::updateServiceWorkerInspectability(WebKit::WebsiteDataStore *this, void *a2)
{
  unsigned __int8 v3 = (void **)((char *)this + 320);
  uint64_t result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 320, a2);
  if (result)
  {
    int v5 = *((unsigned __int8 *)this + 448);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, &v20);
    uint64_t v6 = *((void *)this + 40);
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(v6 - 4);
      uint64_t v8 = v6 + 8 * v7;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    unint64_t v15 = v3;
    uint64_t v16 = v8;
    uint64_t v17 = v8;
    uint64_t v18 = v8;
    uint64_t v19 = v6 + 8 * v7;
    for (uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v15);
          ;
          uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v20))
    {
      if (v21 == v16)
      {
        int v12 = 0;
        goto LABEL_15;
      }
      uint64_t v9 = *(void *)(*(void *)v21 + 8);
      uint64_t v10 = v9 ? v9 - 16 : 0;
      uint64_t v11 = *(Inspector::RemoteInspectionTarget **)(v10 + 1152);
      if (v11)
      {
        uint64_t result = Inspector::RemoteInspectionTarget::inspectable(v11);
        if (result) {
          break;
        }
      }
    }
    int v12 = 1;
LABEL_15:
    *((unsigned char *)this + 448) = v12;
    if (v5 != v12)
    {
      uint64_t result = *((void *)this + 50);
      if (result)
      {
        uint64_t v13 = (unsigned int *)(result + 16);
        atomic_fetch_add((atomic_uint *volatile)(result + 16), 1u);
        char v14 = *((unsigned char *)this + 448);
        uint64_t v20 = (char *)this + 24;
        LOBYTE(v21) = v14;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetInspectionForServiceWorkersAllowed>(result, (uint64_t)&v20, 0, 0);
        return (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#2},void>::call(void *a1)
{
  v104[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (atomic_uchar *)a1[1];
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v88, v2, a1[2]);
  uint64_t v3 = v88;
  if (!v88 || !*(void *)(v88 + 16))
  {
LABEL_10:
    WebKit::ExtensionProcess::invalidate((WebKit::ExtensionProcess *)(a1 + 5));
    if (!v3) {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v4 = (WebKit::ExtensionProcess *)(a1 + 5);
  WebKit::ExtensionProcess::makeLibXPCConnection((WebKit::ExtensionProcess *)(a1 + 5), &v87);
  int v5 = v87;
  if (!v87)
  {
    uint64_t v9 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      LOWORD(handler) = 0;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "Failed to make libxpc connection for process", (uint8_t *)&handler, 2u);
    }
    WebKit::ExtensionProcess::invalidate(v4);
    handler = 0;
    uint64_t v90 = 0;
    WebKit::ProcessLauncher::didFinishLaunchingProcess(v3, 0, (uint64_t)&handler);
    goto LABEL_151;
  }
  uint64_t v87 = 0;
  uint64_t v6 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v5;
  if (v6) {

  }
  uint64_t v7 = v3 + 40;
  if (*(unsigned char *)(v3 + 56))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(v7, (uint64_t)(a1 + 5));
  }
  else
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor(v7, (uint64_t)(a1 + 5));
    *(unsigned char *)(v3 + 56) = 1;
  }
  uint64_t v10 = a1[7];
  a1[7] = 0;
  uint64_t v11 = *(unsigned int **)(v3 + 32);
  *(void *)(v3 + 32) = v10;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v11);
  }
  int v12 = (const char *)a1[3];
  v104[0] = 0;
  v104[1] = 0;
  MEMORY[0x1997423E0](v104);
  xpc_connection_set_oneshot_instance();
  xpc_object_t v86 = xpc_dictionary_create(0, 0, 0);
  _CFBundleSetupXPCBootstrap();
  mach_port_name_t name = 0;
  uint64_t v13 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (mach_port_allocate(*MEMORY[0x1E4F14960], 1u, &name))
  {
    __break(0xC471u);
    return;
  }
  mach_port_insert_right(*v13, name, name, 0x14u);
  mach_port_t previous = 0;
  mach_port_request_notification(*v13, name, 70, 0, name, 0x15u, &previous);
  uint64_t v101 = 0;
  MEMORY[0x19972EAD0](&handler, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"));
  unint64_t v15 = (WTF::StringImpl *)handler;
  handler = 0;
  uint64_t v16 = v101;
  uint64_t v101 = v15;
  if (v16)
  {
    int v17 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 != 2) {
      goto LABEL_24;
    }
    WTF::StringImpl::destroy(v16, v14);
    uint64_t v16 = (WTF::StringImpl *)handler;
    handler = 0;
    if (!v16) {
      goto LABEL_25;
    }
    int v17 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v18);
    }
    else {
LABEL_24:
    }
      *(_DWORD *)uint64_t v16 = v17;
  }
LABEL_25:
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  uint64_t v20 = (uint64_t *)(v3 + 88);
  uint64_t v21 = *(void *)(v3 + 88);
  if (v21)
  {
    unsigned int v22 = *(_DWORD *)(v21 - 8);
    int v23 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>((uint64_t)"OverrideLanguages", 0x11uLL);
    int v24 = 0;
    unsigned int v25 = (v23 ^ (8 * v23)) + ((v23 ^ (8 * v23)) >> 5);
    unsigned int v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
    int v27 = (v26 ^ (v26 << 10)) & 0xFFFFFF;
    if (!v27) {
      int v27 = 0x800000;
    }
    while (1)
    {
      uint64_t v28 = v27 & v22;
      uint64_t v29 = *(void *)(v21 + 16 * v28);
      if (!v29)
      {
        uint64_t v30 = *v20;
        if (!*v20) {
          goto LABEL_56;
        }
        uint64_t v31 = *(unsigned int *)(v30 - 4);
        uint64_t v32 = v30 + 16 * v31;
        goto LABEL_36;
      }
      if (v29 != -1 && (MEMORY[0x19972E990](v29, "OverrideLanguages", 17) & 1) != 0) {
        break;
      }
      int v27 = ++v24 + v28;
    }
    uint64_t v32 = v21 + 16 * v28;
    uint64_t v30 = *v20;
    if (!*v20) {
      goto LABEL_37;
    }
    uint64_t v31 = *(unsigned int *)(v30 - 4);
LABEL_36:
    v30 += 16 * v31;
LABEL_37:
    if (v30 != v32)
    {
      xpc_object_t v33 = xpc_array_create(0, 0);
      uint64_t v34 = *(void *)(v32 + 8);
      if (v34)
      {
        unint64_t v35 = *(unsigned int *)(v34 + 16);
        int v36 = *(char **)(v34 + 8);
        LODWORD(v34) = *(_DWORD *)(v34 + 4);
        uint64_t v37 = (v35 >> 2) & 1;
      }
      else
      {
        int v36 = 0;
        uint64_t v37 = 1;
      }
      handler = v36;
      uint64_t v90 = v34 | (unint64_t)(v37 << 32);
      LOWORD(v91) = 44;
      BYTE2(v91) = 0;
      bytes = (char *)&handler;
      unsigned int v98 = 0;
      BOOL v100 = v34 == 0;
      WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&bytes);
      int v38 = v90;
      while (v98 != v38 || !v100)
      {
        char v95 = (WTF *)WTF::StringView::substring(bytes, v98, v99);
        uint64_t v96 = v40;
        WTF::StringView::utf8();
        if (v94) {
          unsigned int v41 = (char *)v94 + 16;
        }
        else {
          unsigned int v41 = 0;
        }
        xpc_array_set_string(v33, 0xFFFFFFFFFFFFFFFFLL, v41);
        unsigned int v43 = v94;
        uint64_t v94 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1) {
            WTF::fastFree(v43, v42);
          }
          else {
            --*(_DWORD *)v43;
          }
        }
        WTF::StringView::SplitResult::Iterator::operator++();
      }
      xpc_dictionary_set_value(v19, "OverrideLanguages", v33);
      if (v33) {
    }
      }
  }
LABEL_56:
  xpc_object_t v44 = xpc_dictionary_create(0, 0, 0);
  uint64_t v45 = getenv("HOME");
  if (v45) {
    xpc_dictionary_set_string(v44, "HOME", v45);
  }
  int v46 = getenv("CFFIXED_USER_HOME");
  if (v46) {
    xpc_dictionary_set_string(v44, "CFFIXED_USER_HOME", v46);
  }
  long long v47 = getenv("TMPDIR");
  if (v47) {
    xpc_dictionary_set_string(v44, "TMPDIR", v47);
  }
  xpc_dictionary_set_value(v19, "ContainerEnvironmentVariables", v44);
  uint64_t v48 = *(void *)(v3 + 16);
  if (v48)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v48 + 24))(v48)) {
      xpc_dictionary_set_BOOL(v19, "configure-jsc-for-testing", 1);
    }
    if (((*(uint64_t (**)(void))(**(void **)(v3 + 16) + 32))(*(void *)(v3 + 16)) & 1) == 0) {
      xpc_dictionary_set_BOOL(v19, "disable-jit", 1);
    }
    if ((*(unsigned int (**)(void))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16))) {
      xpc_dictionary_set_BOOL(v19, "enable-shared-array-buffer", 1);
    }
    if ((*(unsigned int (**)(void))(**(void **)(v3 + 16) + 56))(*(void *)(v3 + 16))) {
      xpc_dictionary_set_BOOL(v19, "disable-jit-cage", 1);
    }
  }
  xpc_dictionary_set_string(v19, "message-name", "bootstrap");
  xpc_dictionary_set_mach_send();
  if (v101 && *((_DWORD *)v101 + 1))
  {
    WTF::String::utf8();
    char v49 = 0;
    if (v95) {
      BOOL v50 = (char *)v95 + 16;
    }
    else {
      BOOL v50 = 0;
    }
  }
  else
  {
    BOOL v50 = *_NSGetProgname();
    char v49 = 1;
  }
  xpc_dictionary_set_string(v19, "client-identifier", v50);
  if ((v49 & 1) == 0)
  {
    uint64_t v51 = v95;
    char v95 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1) {
        uint64_t v51 = (WTF *)WTF::fastFree(v51, v52);
      }
      else {
        --*(_DWORD *)v51;
      }
    }
  }
  WebCore::applicationBundleIdentifier((uint64_t *)&bytes, v51);
  WTF::String::utf8();
  if (handler) {
    uint64_t v53 = handler + 16;
  }
  else {
    uint64_t v53 = 0;
  }
  xpc_dictionary_set_string(v19, "client-bundle-identifier", v53);
  unsigned int v55 = (WTF *)handler;
  handler = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1) {
      WTF::fastFree(v55, v54);
    }
    else {
      --*(_DWORD *)v55;
    }
  }
  char v56 = (WTF::StringImpl *)bytes;
  bytes = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2) {
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
    }
    else {
      *(_DWORD *)v56 -= 2;
    }
  }
  WTF::String::number(*(WTF::String **)(v3 + 80));
  WTF::String::utf8();
  if (handler) {
    uint64_t v57 = handler + 16;
  }
  else {
    uint64_t v57 = 0;
  }
  xpc_dictionary_set_string(v19, "process-identifier", v57);
  unsigned __int16 v59 = (WTF *)handler;
  handler = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 1) {
      WTF::fastFree(v59, v58);
    }
    else {
      --*(_DWORD *)v59;
    }
  }
  uint64_t v60 = (WTF::StringImpl *)bytes;
  bytes = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  char v61 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName");
  char v62 = v61;
  if (v61) {
    CFRetain(v61);
  }
  xpc_dictionary_set_string(v19, "ui-process-name", (const char *)[v62 UTF8String]);
  xpc_dictionary_set_string(v19, "service-name", v12);
  if (!*(_DWORD *)(v3 + 72))
  {
    char v64 = (*(uint64_t (**)(void))(**(void **)(v3 + 16) + 48))(*(void *)(v3 + 16));
    xpc_dictionary_set_BOOL(v19, "disable-logging", v64);
  }
  {
    uint64_t v63 = WebKit::AuxiliaryProcess::isSystemWebKit(void)::$_0::operator()();
    WebKit::AuxiliaryProcess::isSystemWebKit(void)::isSystemWebKit = v63;
    if (v63) {
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (!WebKit::AuxiliaryProcess::isSystemWebKit(void)::isSystemWebKit)
  {
LABEL_110:
    xpc_dictionary_set_fd(v19, "stdout", 1);
    xpc_dictionary_set_fd(v19, "stderr", 2);
  }
LABEL_111:
  uint64_t v65 = WTF::sdkAlignedBehaviors((WTF *)v63);
  char v66 = *(const char **)v65;
  unsigned int v98 = *(_DWORD *)(v65 + 8);
  bytes = (char *)v66;
  xpc_dictionary_set_data(v19, "client-sdk-aligned-behaviors", &bytes, 0xCuLL);
  xpc_object_t v67 = xpc_dictionary_create(0, 0, 0);
  char v68 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v3 + 88));
  unsigned __int16 v69 = v68;
  uint64_t v71 = v70;
  if (*v20) {
    uint64_t v72 = *v20 + 16 * *(unsigned int *)(*v20 - 4);
  }
  else {
    uint64_t v72 = 0;
  }
  if ((void *)v72 != v68)
  {
    do
    {
      WTF::String::utf8();
      uint64_t v73 = handler;
      WTF::String::utf8();
      if (v73) {
        char v74 = v73 + 16;
      }
      else {
        char v74 = 0;
      }
      if (v94) {
        uint64_t v75 = (char *)v94 + 16;
      }
      else {
        uint64_t v75 = 0;
      }
      xpc_dictionary_set_string(v67, v74, v75);
      uint64_t v77 = v94;
      uint64_t v94 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1) {
          WTF::fastFree(v77, v76);
        }
        else {
          --*(_DWORD *)v77;
        }
      }
      uint64_t v78 = (WTF *)handler;
      handler = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 1) {
          WTF::fastFree(v78, v76);
        }
        else {
          --*(_DWORD *)v78;
        }
      }
      while (1)
      {
        v69 += 2;
        if (v69 == v71) {
          break;
        }
        if ((unint64_t)(*v69 + 1) > 1) {
          goto LABEL_133;
        }
      }
      unsigned __int16 v69 = v71;
LABEL_133:
      ;
    }
    while (v69 != (void *)v72);
  }
  xpc_dictionary_set_value(v19, "extra-initialization-data", v67);
  uint64_t v79 = *(atomic_uchar **)(v3 + 8);
  if (v79) {
    uint64_t v79 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v79);
  }
  handler = v79;
  uint64_t v90 = v3;
  LODWORD(v91) = name;
  WTF::CString::CString((WTF::CString *)v92, v12);
  uint64_t v80 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v80 = &unk_1EE9D1CD8;
  *(void *)(v80 + 8) = handler;
  *(void *)(v80 + 16) = v90;
  *(_DWORD *)(v80 + 24) = v91;
  *(void *)(v80 + 32) = v92[0];
  uint64_t v81 = *(void *)(v3 + 16);
  handler = (char *)v80;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v81 + 64))(&v90, v81);
  long long v82 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v82 = &unk_1EE9D1D00;
  v82[1] = handler;
  v82[2] = v90;
  uint64_t v83 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v83 = MEMORY[0x1E4F14398];
  v83[1] = 50331650;
  v83[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke;
  v83[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::descriptor;
  v83[4] = v82;
  xpc_connection_set_event_handler(*(xpc_connection_t *)(v3 + 24), v83);
  xpc_connection_resume(*(xpc_connection_t *)(v3 + 24));
  if (*(unsigned char *)(v3 + 97))
  {
    ((void (*)(void *, void))v83[2])(v83, 0);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 8));
    uint64_t v84 = *(_xpc_connection_s **)(v3 + 24);
    handler = (char *)MEMORY[0x1E4F143A8];
    uint64_t v90 = 3221225472;
    uint64_t v91 = ___ZN6WebKit15ProcessLauncher22finishLaunchingProcessEN3WTF12ASCIILiteralE_block_invoke;
    v92[0] = &__block_descriptor_44_e33_v16__0__NSObject_OS_xpc_object__8l;
    v92[1] = v3;
    mach_port_name_t v93 = name;
    xpc_connection_send_message_with_reply(v84, v19, MEMORY[0x1E4F14428], &handler);
  }
  _Block_release(v83);
  if (v67) {

  }
  if (v62) {
    CFRelease(v62);
  }
  if (v44) {

  }
  if (v19) {
  long long v85 = v101;
  }
  uint64_t v101 = 0;
  if (!v85)
  {
LABEL_149:
    if (!v86) {
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  if (*(_DWORD *)v85 != 2)
  {
    *(_DWORD *)v85 -= 2;
    goto LABEL_149;
  }
  WTF::StringImpl::destroy(v85, v8);
  if (v86) {
LABEL_150:
  }

LABEL_151:
  if (v87) {

  }
  uint64_t v3 = v88;
  if (v88) {
LABEL_11:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), v8);
}

void sub_198623F5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, WTF *a19, WTF *a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  if (v25) {

  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a10) {

  }
  if (a11) {
  if (a12)
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(a12 + 8), a2);
  _Unwind_Resume(exception_object);
}

const char *WTF::StringView::substring(const char *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 <= a2) {
    return "";
  }
  if (v3 - a2 <= a3)
  {
    a3 = v3 - a2;
    if (!a2) {
      return *(const char **)this;
    }
  }
  unint64_t v4 = v3 - a2;
  if (this[12])
  {
    if (v4 >= a3) {
      return (const char *)(*(void *)this + a2);
    }
  }
  else if (v4 >= a3)
  {
    return (const char *)(*(void *)this + 2 * a2);
  }
  __break(1u);
  return this;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WebKit::WebProcessProxy::pages@<X0>(WebKit::WebProcessProxy *this@<X0>, uint64_t a2@<X8>)
{
  WebKit::WebProcessProxy::mainPages(this, a2);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 70, &v18);
  uint64_t v4 = *((void *)this + 70);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = v4 + 8 * v5;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v13 = (char *)this + 560;
  uint64_t v14 = v6;
  uint64_t v15 = v6;
  uint64_t v16 = v6;
  uint64_t v17 = v4 + 8 * v5;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  while (v19 != v14)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)v19 + 8) + 32);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        uint64_t v10 = v9 - 16;
        uint64_t v11 = *(unsigned int *)(a2 + 12);
        if (v11 == *(_DWORD *)(a2 + 8))
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(a2, v9 - 16);
        }
        else
        {
          uint64_t v12 = *(void *)a2;
          CFRetain(*(CFTypeRef *)(v9 - 8));
          *(void *)(v12 + 8 * v11) = v10;
          ++*(_DWORD *)(a2 + 12);
        }
      }
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  return result;
}

void *WebKit::WebProcessProxy::mainPages@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = this[69];
  if (v4 && (uint64_t v5 = *(unsigned int *)(v4 - 12), v5))
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (void *)(v2 + 552);
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v2 + 552));
  uint64_t v8 = this;
  uint64_t v10 = v9;
  if (*v7) {
    uint64_t v11 = *v7 + 16 * *(unsigned int *)(*v7 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if ((void *)v11 != this)
  {
    unsigned int v12 = 0;
    do
    {
      unsigned int v13 = v12;
      uint64_t v14 = *(void *)(v8[1] + 8);
      if (v14) {
        uint64_t v15 = v14 - 16;
      }
      else {
        uint64_t v15 = 0;
      }
      this = CFRetain(*(CFTypeRef *)(v15 + 8));
      unsigned int v12 = v13 + 1;
      *(void *)(v6 + 8 * v13) = v15;
      *(_DWORD *)(a2 + 12) = v13 + 1;
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*v8 + 1) > 1) {
          goto LABEL_19;
        }
      }
      uint64_t v8 = v10;
LABEL_19:
      ;
    }
    while (v8 != (void *)v11);
  }
  return this;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  char v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

void *WebKit::WebUserContentControllerProxy::removeAllContentRuleLists(WebKit::WebUserContentControllerProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 13);
  if (v3)
  {
    *((void *)this + 13) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v34);
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = v4 + 8 * v5;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v29 = (char *)this + 40;
  uint64_t v30 = v6;
  uint64_t v31 = v6;
  uint64_t v32 = v6;
  uint64_t v33 = v4 + 8 * v5;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v29);
  for (uint64_t i = v35; v35 != v30; uint64_t i = v35)
  {
    uint64_t v8 = *(void *)(*(void *)i + 8);
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 2858;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    int v38 = v10;
    LOBYTE(v36[0]) = 0;
    char v37 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v38, 0, (uint64_t)v36, 1);
    if (v37)
    {
      uint64_t v12 = v36[0];
      v36[0] = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    unsigned int v13 = v38;
    int v38 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v11);
      WTF::fastFree(v14, v15);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v34);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 11, &v34);
  uint64_t v16 = *((void *)this + 11);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    uint64_t v18 = v16 + 8 * v17;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v29 = (char *)this + 88;
  uint64_t v30 = v18;
  uint64_t v31 = v18;
  uint64_t v32 = v18;
  uint64_t v33 = v16 + 8 * v17;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v29);
  for (uint64_t j = v35; v35 != v30; uint64_t j = v35)
  {
    uint64_t v21 = *(void *)(*(void *)j + 8);
    uint64_t v28 = *((void *)this + 4);
    unsigned int v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v22 = 297;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 66) = (char *)v22 + 16;
    *((void *)v22 + 67) = 512;
    *((void *)v22 + 68) = 0;
    *((void *)v22 + 70) = 0;
    *((void *)v22 + 69) = 0;
    IPC::Encoder::encodeHeader(v22);
    int v38 = v22;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v22, &v28);
    LOBYTE(v36[0]) = 0;
    char v37 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v21, &v38, 0, (uint64_t)v36, 1);
    if (v37)
    {
      uint64_t v24 = v36[0];
      v36[0] = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
    }
    unsigned int v25 = v38;
    int v38 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v23);
      WTF::fastFree(v26, v27);
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v34);
  }
  return result;
}

uint64_t WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5, char a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, a2);
  unsigned int v13 = *(atomic_uint **)a2;
  if (*(void *)a2) {
    atomic_fetch_add(v13, 1u);
  }
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = a5;
  *(unsigned char *)(a1 + 33) = a6;
  if (*(unsigned char *)(a2 + 188))
  {
    if (a5) {
      uint64_t v14 = (_DWORD *)(a2 + 136);
    }
    else {
      uint64_t v14 = (_DWORD *)(a2 + 152);
    }
    WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ProcessThrottlerActivity>((uint64_t)&v24, v14, (uint64_t *)a1);
    WebKit::ProcessThrottler::updateThrottleStateIfNeeded((unsigned int *)a2);
    if (!*(unsigned char *)(a1 + 33))
    {
      uint64_t v18 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (v19 && (uint64_t v19 = *(void *)(v19 + 8)) != 0)
        {
          uint64_t v20 = *(void *)(*(void *)(*(void *)(v19 + 16) + 8) + 136);
          if (v20) {
            LODWORD(v20) = *(_DWORD *)(v20 + 108);
          }
        }
        else
        {
          LODWORD(v20) = 0;
        }
        uint64_t v21 = "background";
        uint64_t v22 = *(void *)(a1 + 16);
        int v24 = 134219010;
        if (a5) {
          uint64_t v21 = "foreground";
        }
        uint64_t v25 = a1;
        __int16 v26 = 1024;
        int v27 = v20;
        __int16 v28 = 2048;
        uint64_t v29 = (const char *)v19;
        __int16 v30 = 2082;
        uint64_t v31 = v21;
        __int16 v32 = 2082;
        uint64_t v33 = v22;
        _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d, throttler=%p] ProcessThrottler::Activity::Activity: Starting %{public}s activity / '%{public}s'", (uint8_t *)&v24, 0x30u);
      }
    }
  }
  else
  {
    if ((a6 & 1) == 0)
    {
      uint64_t v15 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a2 + 16) + 8) + 136);
        if (v16) {
          LODWORD(v16) = *(_DWORD *)(v16 + 108);
        }
        uint64_t v17 = "background";
        int v24 = 134218754;
        uint64_t v25 = a2;
        __int16 v26 = 1024;
        if (a5) {
          uint64_t v17 = "foreground";
        }
        int v27 = v16;
        __int16 v28 = 2080;
        uint64_t v29 = v17;
        __int16 v30 = 2080;
        uint64_t v31 = a3;
        _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::addActivity: not allowed to add %s activity %s", (uint8_t *)&v24, 0x26u);
        unsigned int v13 = *(atomic_uint **)(a1 + 8);
      }
    }
    *(void *)(a1 + 8) = 0;
    if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  return a1;
}

unsigned int *WebKit::ProcessThrottler::updateThrottleStateIfNeeded(unsigned int *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 189)) {
    return this;
  }
  uint64_t v1 = (uint64_t)this;
  if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 17)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v1 + 152)))
  {
    if (*(unsigned char *)(v1 + 184))
    {
      if (!*(unsigned char *)(v1 + 176)) {
        goto LABEL_21;
      }
      uint64_t v2 = qword_1EB358348;
      if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:
        uint64_t v10 = *(atomic_uint **)(*(void *)(v1 + 16) + 8);
        atomic_fetch_add(v10 + 4, 1u);
        BOOL v11 = WebKit::ProcessThrottler::expectedThrottleState((WebKit::ProcessThrottler *)v1) != 2;
        (*(void (**)(atomic_uint *, BOOL))(*(void *)v10 + 96))(v10, v11);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10 + 4);
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 40));
        if (*(unsigned char *)(v1 + 176)) {
          *(unsigned char *)(v1 + 176) = 0;
        }
        goto LABEL_21;
      }
      uint64_t v3 = *(void *)(*(void *)(*(void *)(v1 + 16) + 8) + 136);
      if (v3) {
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      }
      uint64_t v4 = *(void *)(v1 + 168);
      int v13 = 134218496;
      uint64_t v14 = v1;
      __int16 v15 = 1024;
      int v16 = v3;
      __int16 v17 = 2048;
      uint64_t v18 = v4;
      uint64_t v5 = "%p - [PID=%d] ProcessThrottler::updateThrottleStateIfNeeded: sending ProcessDidResume IPC because the WebProc"
           "ess is still processing request to suspend=%llu";
      uint64_t v6 = v2;
      uint32_t v7 = 28;
    }
    else
    {
      uint64_t v8 = qword_1EB358348;
      if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(*(void *)(*(void *)(v1 + 16) + 8) + 136);
      if (v9) {
        LODWORD(v9) = *(_DWORD *)(v9 + 108);
      }
      int v13 = 134218240;
      uint64_t v14 = v1;
      __int16 v15 = 1024;
      int v16 = v9;
      uint64_t v5 = "%p - [PID=%d] ProcessThrottler::updateThrottleStateIfNeeded: sending ProcessDidResume IPC because the process was suspended";
      uint64_t v6 = v8;
      uint32_t v7 = 18;
    }
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v13, v7);
    goto LABEL_19;
  }
  if (!*(unsigned char *)(v1 + 184))
  {
LABEL_21:
    uint64_t v12 = WebKit::ProcessThrottler::expectedThrottleState((WebKit::ProcessThrottler *)v1);
    return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v1, v12);
  }
  WTF::RunLoop::TimerBase::start();

  return WebKit::ProcessThrottler::sendPrepareToSuspendIPC((unsigned int *)v1, 0);
}

unsigned int *WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ProcessThrottlerActivity>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unsigned int v6 = a2[3];
  unsigned int v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a2;
    if (*(void *)a2)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a2;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a2;
        if (*(void *)a2) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a2;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
          uint64_t v8 = *(void *)a2;
          a2[2] = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        a2[2] = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          a2[3] = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    a2[2] = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v20 = *a3;
  if (!*a3)
  {
    uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = a3;
    uint64_t v22 = (unsigned int *)*a3;
    *a3 = v20;
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      uint64_t v20 = *a3;
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  uint64_t v25 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v25, a1);
  uint64_t result = (unsigned int *)v25;
  uint64_t v25 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  int v9 = 0;
  int v10 = (uint64_t *)*a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    __int16 v17 = (uint64_t **)(v6 + 8 * v16);
    unsigned int v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *int v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        int v10 = (uint64_t *)*a2;
        __int16 v17 = v9;
      }
      *a2 = 0;
      uint64_t result = *v17;
      *__int16 v17 = v10;
      if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        int v27 = v17;
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v17);
        __int16 v17 = v27;
      }
      uint64_t v19 = *v4;
      if (*v4) {
        int v20 = *(_DWORD *)(v19 - 12) + 1;
      }
      else {
        int v20 = 1;
      }
      *(_DWORD *)(v19 - 12) = v20;
      uint64_t v21 = *v4;
      if (*v4) {
        int v22 = *(_DWORD *)(v21 - 12);
      }
      else {
        int v22 = 0;
      }
      uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
      unint64_t v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23) {
          goto LABEL_18;
        }
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_18:
        uint64_t v25 = v21 + 8 * v24;
        char v26 = 1;
        goto LABEL_19;
      }
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v4, (unsigned int **)v17);
      __int16 v17 = (uint64_t **)result;
      uint64_t v21 = *v4;
      if (*v4) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
      goto LABEL_18;
    }
    if (v18 != (uint64_t *)-1) {
      break;
    }
    int v9 = (uint64_t **)(v6 + 8 * v16);
LABEL_8:
    unsigned int v14 = i + v16;
  }
  if (v18 != v10) {
    goto LABEL_8;
  }
  if (v7) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(unsigned int *)(v6 - 4);
  }
  char v26 = 0;
  uint64_t v25 = v6 + 8 * v28;
LABEL_19:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v25;
  *(unsigned char *)(a3 + 16) = v26;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    unint64_t v12 = (unsigned int **)v6;
    uint64_t v7 = v7;
    do
    {
      if (*v12)
      {
        if (*v12 != (unsigned int *)-1)
        {
          unint64_t v13 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::lookupForReinsert(a1, v12);
          unsigned int v14 = *v13;
          *unint64_t v13 = 0;
          if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v14);
            unsigned int v18 = v13;
            WTF::fastFree((WTF *)v14, v10);
            unint64_t v13 = v18;
          }
          int v15 = *v12;
          void *v12 = 0;
          *unint64_t v13 = v15;
          unsigned int v16 = *v12;
          void *v12 = 0;
          if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            uint64_t v19 = v13;
            WTF::fastFree((WTF *)v16, v10);
            unint64_t v13 = v19;
          }
          if (v12 == a3) {
            unint64_t v11 = v13;
          }
        }
      }
      else
      {
        void *v12 = 0;
      }
      ++v12;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WebKit::ProcessThrottler::expectedThrottleState(WebKit::ProcessThrottler *this)
{
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 17)) {
    return !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 19);
  }
  else {
    return 2;
  }
}

unsigned int *WebKit::ProcessThrottler::setThrottleState(unsigned int *result, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)result + 184) = a2;
  if (a2 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198625B54);
  }
  uint64_t v3 = (uint64_t)result;
  unsigned int v4 = 0x30100u >> (8 * a2);
  uint64_t v5 = *((void *)result + 3);
  if ((!v5 || *(unsigned char *)(v5 + 48) || *(unsigned __int8 *)(v5 + 16) != v4) && *((unsigned char *)result + 189))
  {
    uint64_t v6 = *(void *)(*((void *)result + 2) + 8);
    uint64_t v7 = (unsigned int *)(v6 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    int v8 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(v3 + 16) + 8) + 136);
      if (v10) {
        int v11 = *(_DWORD *)(v10 + 108);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)buf = 134219008;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v77 = 1024;
      int v78 = v11;
      __int16 v79 = 1024;
      int v80 = v4 & 3;
      __int16 v81 = 1024;
      int v82 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v3 + 136, v9);
      __int16 v83 = 1024;
      int v84 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v3 + 152, v12);
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setThrottleState: Updating process assertion type to %u (foregroundActivities=%u, backgroundActivities=%u)", buf, 0x24u);
    }
    uint64_t v13 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v13)
    {
      uint64_t v14 = *(void *)(v3 + 8);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 8));
      if (!*(unsigned char *)(v14 + 16))
      {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v15);
        goto LABEL_39;
      }
      uint64_t v73 = v6;
      char v74 = (unsigned int *)(v6 + 16);
      int v16 = *(unsigned __int8 *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 64);
      *(void *)(v13 + 64) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      unsigned int v18 = (void *)WTF::fastMalloc((WTF *)0x30);
      void *v18 = v14;
      ++*(_DWORD *)v14;
      v18[1] = v13;
      uint64_t v19 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v18);
      int v20 = (void *)WTF::fastMalloc((WTF *)0x20);
      *int v20 = &unk_1EE9D7050;
      v20[1] = WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion::entryExpired;
      void v20[2] = 0;
      v20[3] = v18;
      WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v18 + 2), v19);
      v18[2] = &unk_1EE9B3390;
      v18[5] = v20;
      WTF::RunLoop::TimerBase::start();
      uint64_t v23 = *(void *)(v14 + 8);
      int v22 = (uint64_t *)(v14 + 8);
      uint64_t v21 = v23;
      if (v23
        || (WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::expand(v22),
            (uint64_t v21 = *v22) != 0))
      {
        int v24 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        int v24 = 0;
      }
      unsigned int v25 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
      unsigned int v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
      unsigned int v27 = v24 & (v26 ^ HIWORD(v26));
      uint64_t v28 = (unsigned __int8 *)(v21 + 16 * v27);
      int v29 = *v28;
      uint64_t v6 = v73;
      uint64_t v7 = v74;
      if (v29 != 255)
      {
        __int16 v30 = 0;
        int v31 = 1;
        do
        {
          if (v29 == v16)
          {
            std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100]((uint64_t)v18);
            goto LABEL_39;
          }
          if (v29 == 254) {
            __int16 v30 = v28;
          }
          unsigned int v27 = (v27 + v31) & v24;
          uint64_t v28 = (unsigned __int8 *)(v21 + 16 * v27);
          int v29 = *v28;
          ++v31;
        }
        while (v29 != 255);
        if (v30)
        {
          *__int16 v30 = -1;
          *((void *)v30 + 1) = 0;
          --*(_DWORD *)(*v22 - 16);
          uint64_t v28 = v30;
        }
      }
      *uint64_t v28 = v16;
      uint64_t v32 = *((void *)v28 + 1);
      *((void *)v28 + 1) = v18;
      if (v32) {
        std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v32);
      }
      uint64_t v33 = *v22;
      if (*v22) {
        int v34 = *(_DWORD *)(v33 - 12) + 1;
      }
      else {
        int v34 = 1;
      }
      *(_DWORD *)(v33 - 12) = v34;
      uint64_t v35 = *v22;
      if (*v22) {
        int v36 = *(_DWORD *)(v35 - 12);
      }
      else {
        int v36 = 0;
      }
      uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
      unint64_t v38 = *(unsigned int *)(v35 - 4);
      if (v38 <= 0x400)
      {
        if (3 * v38 > 4 * v37) {
          goto LABEL_39;
        }
        goto LABEL_37;
      }
      if (v38 <= 2 * v37) {
LABEL_37:
      }
        WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::expand(v22);
    }
LABEL_39:
    uint64_t v39 = *(void *)(v3 + 8);
    uint64_t v42 = *(void *)(v39 + 8);
    uint64_t v40 = (uint64_t *)(v39 + 8);
    uint64_t v41 = v42;
    uint64_t v43 = WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebKit::ProcessAssertionType>>,WebKit::ProcessAssertionType>(v42, v4);
    xpc_object_t v44 = (void *)v43;
    if (v42) {
      uint64_t v45 = v41 + 16 * *(unsigned int *)(v41 - 4);
    }
    else {
      uint64_t v45 = 0;
    }
    if (v45 == v43) {
      goto LABEL_53;
    }
    uint64_t v46 = *(void *)(v43 + 8);
    *(void *)(v43 + 8) = 0;
    if (*v40)
    {
      uint64_t v47 = *v40 + 16 * *(unsigned int *)(*v40 - 4);
      if (v47 == v43) {
        goto LABEL_50;
      }
    }
    else
    {
      if (!v43) {
        goto LABEL_50;
      }
      uint64_t v47 = 0;
    }
    if (v47 != v43) {
      WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::remove(v40, v43);
    }
LABEL_50:
    if (v46)
    {
      uint64_t v48 = *(void *)(v46 + 8);
      if (*(unsigned char *)(v48 + 48)) {
        uint64_t v48 = 0;
      }
      else {
        *(void *)(v46 + 8) = 0;
      }
      std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v46);
      goto LABEL_56;
    }
LABEL_53:
    uint64_t v48 = 0;
LABEL_56:
    uint64_t v49 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = v48;
    if (v49)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v49 + 8), v44);
      uint64_t v48 = *(void *)(v3 + 24);
    }
    if (!v48)
    {
      if (*(unsigned char *)(v3 + 186))
      {
        char v50 = v4;
        WebKit::ProcessThrottler::assertionName(buf, v3, v4);
        uint64_t v51 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v51 = &unk_1EE9D70D0;
        v51[1] = v13;
        uint64_t v75 = v51;
        uint64_t v52 = WTF::fastMalloc((WTF *)0xC0);
        uint64_t v53 = WebKit::ProcessAndUIAssertion::ProcessAndUIAssertion(v52, (void *)v6, (_DWORD **)buf, v50);
        WebKit::ProcessAssertion::acquireAsync(v53, (uint64_t *)&v75);
        if (v75) {
          (*(void (**)(void *))(*v75 + 8))(v75);
        }
        if (*(void *)buf)
        {
          if (**(_DWORD **)buf == 2) {
            WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, v54);
          }
          else {
            **(_DWORD **)buf -= 2;
          }
        }
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v3, v3);
        uint64_t v60 = *(atomic_uint **)v3;
        if (*(void *)v3) {
          atomic_fetch_add(v60, 1u);
        }
        char v62 = (void *)WTF::fastMalloc((WTF *)0x10);
        *char v62 = &unk_1EE9D70F8;
        v62[1] = v60;
        uint64_t v63 = *(void *)(v52 + 176);
        *(void *)(v52 + 176) = v62;
        if (v63) {
          (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
        }
        uint64_t v64 = *(void *)(v3 + 24);
        *(void *)(v3 + 24) = v52;
        if (v64) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v64 + 8), v61);
        }
      }
      else
      {
        WebKit::ProcessThrottler::assertionName(buf, v3, v4);
        unsigned int v55 = (void *)WTF::fastMalloc((WTF *)0x10);
        *unsigned int v55 = &unk_1EE9D7120;
        v55[1] = v13;
        uint64_t v75 = v55;
        uint64_t v56 = WTF::fastMalloc((WTF *)0xB0);
        uint64_t v57 = WebKit::ProcessAssertion::ProcessAssertion(v56, (void *)v6, (_DWORD **)buf, v4);
        WebKit::ProcessAssertion::acquireAsync(v57, (uint64_t *)&v75);
        uint64_t v59 = *(void *)(v3 + 24);
        *(void *)(v3 + 24) = v56;
        if (v59) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v59 + 8), v58);
        }
        if (v75) {
          (*(void (**)(void *))(*v75 + 8))(v75);
        }
        if (*(void *)buf)
        {
          if (**(_DWORD **)buf == 2) {
            WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, (WTF::StringImpl *)v58);
          }
          else {
            **(_DWORD **)buf -= 2;
          }
        }
      }
      uint64_t v13 = 0;
    }
    uint64_t v65 = *(void *)(v3 + 24);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v3, v3);
    char v66 = *(atomic_uint **)v3;
    if (*(void *)v3) {
      atomic_fetch_add(v66, 1u);
    }
    xpc_object_t v67 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v67 = &unk_1EE9D7148;
    v67[1] = v66;
    uint64_t v68 = *(void *)(v65 + 64);
    *(void *)(v65 + 64) = v67;
    if (v68) {
      (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
    }
    uint64_t v69 = *(void *)(v3 + 24);
    if (v69 && !*(unsigned char *)(v69 + 16))
    {
      if (*(unsigned char *)(v3 + 187))
      {
        if (*(unsigned char *)(v3 + 185)) {
          WTF::RunLoop::TimerBase::start();
        }
      }
      else
      {
        WebKit::ProcessThrottler::clearAssertion((unsigned int *)v3);
      }
    }
    else
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 72));
    }
    unsigned __int16 v70 = *(atomic_uint **)(*(void *)(v3 + 16) + 8);
    uint64_t v71 = (unsigned int *)(v70 + 4);
    atomic_fetch_add(v70 + 4, 1u);
    (*(void (**)(atomic_uint *, uint64_t))(*(void *)v70 + 104))(v70, a2);
    uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v71);
    if (v13) {
      uint64_t result = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v72);
    }
    if (v6) {
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::allNetworkProcesses@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  {
    WebKit::networkProcessesSet(void)::set = 0;
    *(void *)algn_1EB35A878 = 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)&WebKit::networkProcessesSet(void)::set, a1);
  if (result)
  {
    int v5 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v6;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::networkProcessesSet(void)::set, &v17);
  if (WebKit::networkProcessesSet(void)::set)
  {
    uint64_t v7 = *(unsigned int *)(WebKit::networkProcessesSet(void)::set - 4);
    uint64_t v8 = WebKit::networkProcessesSet(void)::set + 8 * v7;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  unint64_t v12 = &WebKit::networkProcessesSet(void)::set;
  uint64_t v13 = v8;
  uint64_t v14 = v8;
  uint64_t v15 = v8;
  uint64_t v16 = WebKit::networkProcessesSet(void)::set + 8 * v7;
  uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  for (uint64_t i = v18; v18 != v13; uint64_t i = v18)
  {
    uint64_t v10 = *(void *)(*(void *)i + 8);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
    uint64_t v11 = *(unsigned int *)(a2 + 12);
    *(void *)(*(void *)a2 + 8 * v11) = v10;
    *(_DWORD *)(a2 + 12) = v11 + 1;
    uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  return result;
}

BOOL WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(void **a1)
{
  if (!*a1 || !*((_DWORD *)*a1 - 3)) {
    return 1;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(a1, v11);
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *((unsigned int *)v2 - 1);
    unsigned int v4 = &v2[v3];
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v6 = a1;
  uint64_t v7 = v4;
  uint64_t v8 = v4;
  uint64_t v9 = v4;
  uint64_t v10 = &v2[v3];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v6);
  return v11[1] == (void)v7;
}

void *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

void *WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = *((unsigned int *)v6 - 1);
    uint64_t v8 = &v6[v7];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  a2[3] = v8;
  a2[4] = &v6[v7];

  return WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

void *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[v2];
  }
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_22;
  }
  int v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_21:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_25;
  }
  int v5 = 0;
  unsigned int v6 = v4 - 1;
  do
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v3 + 8 * v6);
    if ((unint64_t)(v8 + 1) >= 2 && !*(void *)(v8 + 8))
    {
      *(void *)(v3 + 8 * v6) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v8);
        WTF::fastFree((WTF *)v8, a2);
      }
      *(void *)(v3 + 8 * v6) = -1;
      ++v5;
    }
    --v6;
  }
  while (v7);
  uint64_t v3 = *(void *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    uint64_t v9 = *(void *)a1;
    if (*(void *)a1) {
      int v10 = *(_DWORD *)(v9 - 12);
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)(v9 - 12) = v10 - v5;
    uint64_t v3 = *(void *)a1;
  }
  if (!v3)
  {
LABEL_22:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_23:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  unsigned int v11 = *(_DWORD *)(v3 - 4);
  if (v11 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v11) {
    goto LABEL_21;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  uint64_t v3 = *(void *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3) {
    goto LABEL_23;
  }
LABEL_25:
  unsigned int v14 = *(_DWORD *)(v3 - 12);
  if (v14 >= 0x7FFFFFFF) {
    int v15 = -2;
  }
  else {
    int v15 = 2 * v14;
  }
  *(_DWORD *)(a1 + 12) = v15;
  return *(unsigned int *)(v3 - 12);
}

void *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = (void *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebKit::ProcessAssertionType>>,WebKit::ProcessAssertionType>(uint64_t result, unsigned __int8 a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unsigned int v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    unsigned int v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    uint64_t v5 = v2 & (v4 ^ HIWORD(v4));
    int v6 = *(unsigned __int8 *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      int v7 = 1;
      while (v6 != 255)
      {
        uint64_t v5 = (v5 + v7) & v2;
        int v6 = *(unsigned __int8 *)(result + 16 * v5);
        ++v7;
        if (v6 == a2) {
          goto LABEL_6;
        }
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::didChangeThrottleState(uint64_t result, int a2)
{
  int v2 = a2 == 0;
  if (*(unsigned __int8 *)(result + 170) != v2)
  {
    *(unsigned char *)(result + 170) = v2;
    if (a2)
    {
      uint64_t v3 = *(void *)(result + 400);
      if (v3 && *(_DWORD *)(v3 - 12))
      {
        uint64_t v4 = *(void *)(result + 408);
      }
      else
      {
        uint64_t v4 = *(void *)(result + 408);
        if (!v4 || !*(_DWORD *)(v4 - 12)) {
          return result;
        }
      }
      uint64_t v6 = v4;
      uint64_t v7 = v3;
      *(void *)(result + 400) = 0;
      *(void *)(result + 408) = 0;
      v8[0] = &v7;
      v8[1] = &v6;
      WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferencesDidUpdate>(result, (uint64_t)v8, 0, 0);
      if (v6) {
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v6, v5);
      }
      uint64_t result = v7;
      if (v7) {
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
      }
    }
  }
  return result;
}

unsigned int *WebKit::ProcessThrottler::assertionName(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = "Foreground";
  uint64_t v5 = 11;
  uint64_t v6 = "Unknown";
  uint64_t v7 = 8;
  if (a3 == 1)
  {
    uint64_t v6 = "Background";
    uint64_t v7 = 11;
  }
  if (a3 != 3)
  {
    uint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  if (a3) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = "NearSuspended";
  }
  if (a3) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = 14;
  }
  int v10 = *(atomic_uint **)(*(void *)(a2 + 16) + 8);
  unsigned int v11 = (unsigned int *)(v10 + 4);
  atomic_fetch_add(v10 + 4, 1u);
  uint64_t v12 = (*(uint64_t (**)(atomic_uint *))(*(void *)v10 + 112))(v10);
  if (v13) {
    size_t v14 = v13 - 1;
  }
  else {
    size_t v14 = 0;
  }
  if (v14 >> 31)
  {
    __break(0xC471u);
    goto LABEL_35;
  }
  size_t v15 = v9 - 1;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1986262F4);
  }
  if (__OFADD__(v15, 10)
    || (int v16 = v15 + 11, __OFADD__(v15 + 10, 1))
    || (uint64_t v17 = (v14 + v16), __OFADD__(v14, v16))
    || (v17 & 0x80000000) != 0
    || (uint64_t v18 = (unsigned char *)v12, WTF::tryFastCompactMalloc((WTF *)(v17 + 20)), !v24))
  {
    *a1 = 0;
    __break(0xC471u);
LABEL_35:
    JUMPOUT(0x1986262D4);
  }
  uint64_t v19 = (unsigned char *)(v24 + 20);
  *(_DWORD *)uint64_t v24 = 2;
  *(_DWORD *)(v24 + 4) = v17;
  *(void *)(v24 + 8) = v24 + 20;
  *(_DWORD *)(v24 + 16) = 4;
  if (v14)
  {
    if (v14 == 1) {
      *uint64_t v19 = *v18;
    }
    else {
      memcpy((void *)(v24 + 20), v18, v14);
    }
  }
  int v20 = &v19[v14];
  *int v20 = 32;
  uint64_t v21 = v20 + 1;
  if (v15)
  {
    if (v15 == 1) {
      *uint64_t v21 = *v8;
    }
    else {
      memcpy(v21, v8, v15);
    }
  }
  int v22 = &v21[v15];
  *(void *)int v22 = *(void *)" Assertion";
  *((_WORD *)v22 + 4) = 28271;
  *a1 = v24;

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

uint64_t WebKit::ProcessAndUIAssertion::ProcessAndUIAssertion(uint64_t a1, void *a2, _DWORD **a3, char a4)
{
  uint64_t v5 = WebKit::ProcessAssertion::ProcessAssertion(a1, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1EE9CF798;
  *(void *)(v5 + 176) = 0;
  *(unsigned char *)(v5 + 184) = 0;
  WebKit::ProcessAndUIAssertion::updateRunInBackgroundCount((unsigned char *)v5);
  return a1;
}

void sub_19862636C(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 22);
  *((void *)v1 + 22) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::ProcessAssertion::~ProcessAssertion(v1);
  _Unwind_Resume(a1);
}

unsigned char *WebKit::ProcessAndUIAssertion::updateRunInBackgroundCount(unsigned char *this)
{
  if (this[48])
  {
    uint64_t v1 = this + 184;
    if (!this[184]) {
      return this;
    }
  }
  else
  {
    uint64_t v1 = this + 184;
    if (this[184] == (this[16] != 0)) {
      return this;
    }
    if (this[16])
    {
      this = (unsigned char *)objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "addAssertionNeedingBackgroundTask:", this);
      char v2 = 1;
      goto LABEL_7;
    }
  }
  objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "removeAssertionNeedingBackgroundTask:", this);
  this = (unsigned char *)objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "_updateBackgroundTask");
  char v2 = 0;
LABEL_7:
  char *v1 = v2;
  return this;
}

uint64_t WebKit::ProcessAssertion::acquireAsync(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v4 = assertionsWorkQueue(void)::workQueue;
  }
  else
  {
    WTF::WorkQueue::create();
    uint64_t v4 = v8;
    assertionsWorkQueue(void)::workQueue = v8;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v6 = &unk_1EE9D0160;
  v6[1] = a1;
  void v6[2] = v5;
  uint64_t v8 = (uint64_t)v6;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, &v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198626578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D0188;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  char v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void sub_198626ACC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10)
{
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, a2);
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    WTF::Lock::unlockSlow(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198626DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::ThreadSafeWeakHashSet<WebKit::ProcessAndUIAssertion>::isEmptyIgnoringNullReferences(uint64_t a1)
{
  char v2 = 0;
  char v3 = (atomic_uchar *)(a1 + 16);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  uint64_t v6 = *(void **)a1;
  if (v5 > v4)
  {
    if (v6)
    {
      int v7 = *((_DWORD *)v6 - 1);
      if (!v7) {
        goto LABEL_25;
      }
      int v8 = 0;
      unsigned int v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        unsigned int v11 = &v6[2 * v9];
        if ((unint64_t)(*v11 + 1) >= 2)
        {
          int v12 = &v6[2 * v9];
          size_t v14 = (atomic_uchar *)v12[1];
          uint64_t v13 = (atomic_uchar **)(v12 + 1);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v14))
          {
            *unsigned int v11 = -1;
            int v16 = *v13;
            *uint64_t v13 = 0;
            if (v16) {
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v15);
            }
            ++v8;
          }
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void **)a1;
      if (v8)
      {
        *((_DWORD *)v6 - 4) += v8;
        uint64_t v17 = *(void **)a1;
        if (*(void *)a1) {
          int v18 = *((_DWORD *)v17 - 3);
        }
        else {
          int v18 = 0;
        }
        *((_DWORD *)v17 - 3) = v18 - v8;
        uint64_t v6 = *(void **)a1;
      }
      if (v6)
      {
        unsigned int v19 = *((_DWORD *)v6 - 1);
        if (v19 >= 9 && 6 * *((_DWORD *)v6 - 3) < v19)
        {
          WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v6 = *(void **)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            unsigned int v21 = 0;
            goto LABEL_29;
          }
LABEL_26:
          unsigned int v21 = *((_DWORD *)v6 - 3);
          int v22 = 0x7FFFFFFF;
          if (v21 >= 0x7FFFFFFF) {
            goto LABEL_30;
          }
          goto LABEL_29;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_26;
      }
    }
    uint64_t v6 = 0;
    unsigned int v21 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    int v22 = v21;
LABEL_30:
    *(_DWORD *)(a1 + 12) = 2 * v22;
  }
  uint64_t v23 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v6);
  uint64_t v24 = v23;
  unsigned int v26 = v25;
  if (v6) {
    unsigned int v27 = &v6[2 * *((unsigned int *)v6 - 1)];
  }
  else {
    unsigned int v27 = 0;
  }
  int v28 = 1;
  if (v27 == v23)
  {
    BOOL HasStartedDeletion = 1;
  }
  else
  {
    do
    {
      BOOL HasStartedDeletion = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion((atomic_uchar *)v24[1]);
      if (!HasStartedDeletion) {
        break;
      }
      while (1)
      {
        v24 += 2;
        if (v24 == v26) {
          break;
        }
        if ((unint64_t)(*v24 + 1) > 1) {
          goto LABEL_40;
        }
      }
      uint64_t v24 = v26;
LABEL_40:
      ;
    }
    while (v24 != v27);
  }
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return HasStartedDeletion;
}

void sub_198627038(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(atomic_uchar *this)
{
  char v2 = 0;
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)this + 3);
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return v4 == 0;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  char v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

void **WebKit::ExtensionProcess::makeLibXPCConnection@<X0>(WebKit::ExtensionProcess *this@<X0>, void **a2@<X8>)
{
  uint64_t v6 = 0;
  *a2 = 0;
  int v3 = *((_DWORD *)this + 2);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *((unsigned int *)this + 2);
  }
  if (v4 == 2)
  {
    if (v3 == 2) {
      return WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(a2, (void *)[*(id *)this makeLibXPCConnectionError:&v6]);
    }
  }
  else
  {
    if (v4 != 1) {
      goto LABEL_10;
    }
    if (v3 == 1) {
      return WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(a2, (void *)[*(id *)this makeLibXPCConnectionError:&v6]);
    }
  }
  do
  {
    this = (WebKit::ExtensionProcess *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_10:
    ;
  }
  while (v3);
  return WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(a2, (void *)[*(id *)this makeLibXPCConnectionError:&v6]);
}

void sub_198627214(_Unwind_Exception *exception_object)
{
  if (*v1) {

  }
  _Unwind_Resume(exception_object);
}

void **WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(void **a1, void *a2)
{
  if (a2) {
    id v4 = a2;
  }
  unsigned int v5 = *a1;
  *a1 = a2;
  if (v5) {

  }
  return a1;
}

void *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(void *result, atomic_uchar *this, uint64_t a3)
{
  unsigned int v5 = result;
  char v6 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](this);
  }
  if (*((void *)this + 3)) {
    ++*((void *)this + 1);
  }
  else {
    a3 = 0;
  }
  *unsigned int v5 = a3;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return result;
}

uint64_t WebKit::ProcessLauncher::Client::shouldEnableSharedArrayBuffer(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::ProcessLauncher::Client::shouldConfigureJSCForTesting(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::ProcessLauncher::Client::shouldDisableJITCage(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

void WebKit::ProcessLauncher::Client::xpcEventHandler(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ProcessLauncher::Client::isJITEnabled(WebKit::ProcessLauncher::Client *this)
{
  return 1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetInspectionForServiceWorkersAllowed>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 465;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

const char *WebKit::WebProcessProxy::clientName(WebKit::WebProcessProxy *this)
{
  return "WebProcess";
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D7148;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *non-virtual thunk to'WebKit::NetworkProcessProxy::xpcEventHandler@<X0>(WebKit::NetworkProcessProxy *this@<X0>, uint64_t *a2@<X8>)
{
  return WebKit::NetworkProcessProxy::xpcEventHandler((WebKit::NetworkProcessProxy *)((char *)this - 24), a2);
}

uint64_t non-virtual thunk to'WebKit::WebProcessProxy::shouldEnableSharedArrayBuffer(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 756);
}

uint64_t non-virtual thunk to'WebKit::WebProcessProxy::shouldConfigureJSCForTesting(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 61) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 48) + 94);
}

uint64_t non-virtual thunk to'WebKit::WebProcessProxy::shouldDisableJITCage(WebKit::WebProcessProxy *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebProcessProxy::isJITEnabled(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 61) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 48) + 95);
}

uint64_t std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (WTF *)result;
    uint64_t v2 = (WTF::RunLoop::TimerBase *)(result + 16);
    *(void *)(result + 16) = &unk_1EE9B3390;
    uint64_t v3 = *(void *)(result + 40);
    *((void *)v1 + 5) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    WTF::RunLoop::TimerBase::~TimerBase(v2);
    uint64_t v5 = *((void *)v1 + 1);
    *((void *)v1 + 1) = 0;
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v4);
    }
    char v6 = *(_DWORD **)v1;
    *(void *)uint64_t v1 = 0;
    if (v6)
    {
      if (!*v6)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      --*v6;
    }
    return WTF::fastFree(v1, v4);
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::xpcEventHandler@<X0>(WebKit::NetworkProcessProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9D18B0;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  char v6 = (atomic_uint *)*((void *)this + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

void sub_198627690(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

const char *WebKit::NetworkProcessProxy::clientName(WebKit::NetworkProcessProxy *this)
{
  return "NetworkProcess";
}

const char *WebKit::GPUProcessProxy::clientName(WebKit::GPUProcessProxy *this)
{
  return "GPUProcess";
}

uint64_t WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = (atomic_uchar *)v23[1];
          v23[1] = 0;
          if (v24) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v24, v8);
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(atomic_uchar **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, v8);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(atomic_uchar **)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::remove(uint64_t *a1, uint64_t a2)
{
  *(unsigned char *)a2 = -2;
  uint64_t result = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result) {
    uint64_t result = std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::rehash(a1, v8 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(result + 24);
    do
    {
      *((unsigned char *)v10 - 8) = -1;
      *uint64_t v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = (unsigned char *)(v4 + 16 * v11);
      int v13 = *v12;
      if (v13 != 254)
      {
        if (v13 != 255)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          int v18 = 0;
          unsigned int v19 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v21 = v20 & v17;
            unsigned int v20 = ++v18 + v21;
          }
          while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
          uint64_t v22 = v16 + 16 * v21;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23) {
            std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v23);
          }
          *(unsigned char *)uint64_t v22 = *v12;
          uint64_t v24 = v4 + 16 * v11;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v22 + 8) = v25;
          uint64_t v15 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v15) {
            goto LABEL_22;
          }
LABEL_21:
          std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v15);
          goto LABEL_22;
        }
        uint64_t v14 = v4 + 16 * v11;
        uint64_t v15 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = 0;
        if (v15) {
          goto LABEL_21;
        }
      }
LABEL_22:
      if (++v11 == v5) {
        goto LABEL_25;
      }
    }
  }
  if (v4)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::rehash(a1, v3);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LaunchServicesDatabaseManager::singleton(void)::$_0 &&>>()
{
  qword_1EB358DB8 = 0;
  unk_1EB358DC0 = 0;
  qword_1EB358DA8 = (uint64_t)&unk_1EE9B6D58;
  unk_1EB358DB0 = 0;
}

void sub_198627FC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, CFTypeRef cf)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1) {
      WTF::fastFree(a11, a2);
    }
    else {
      --*(_DWORD *)a11;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

const void **WTF::RetainPtr<NSString>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  int v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_198628124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = *(WTF **)a1;
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(void *)a1 = v6;
      if (v5)
      {
        unint64_t v8 = (void *)v6;
        uint64_t v9 = 8 * v5;
        unint64_t v10 = v4;
        do
        {
          uint64_t v11 = *(const void **)v10;
          *(void *)unint64_t v10 = 0;
          *unint64_t v8 = v11;
          uint64_t v12 = *(const void **)v10;
          *(void *)unint64_t v10 = 0;
          if (v12) {
            CFRelease(v12);
          }
          ++v8;
          unint64_t v10 = (WTF *)((char *)v10 + 8);
          v9 -= 8;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

uint64_t WebKit::WebChromeClient::scheduleRenderingUpdate(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v4;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(WebKit::RemoteLayerTreeDrawingArea *this)
{
  if (!*((unsigned char *)this + 360))
  {
    kdebug_trace();
    *((unsigned char *)this + 360) = 1;
    if (*((unsigned char *)this + 348))
    {
      if (!*((unsigned char *)this + 227))
      {
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
        uint64_t v3 = (atomic_uint *)*((void *)this + 1);
        if (v3) {
          atomic_fetch_add(v3, 1u);
        }
        uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v4 = &unk_1EE9BA5C8;
        v4[1] = v3;
        uint64_t v5 = v4;
        WTF::callOnMainRunLoop();
        if (v5) {
          (*(void (**)(void *))(*v5 + 8))(v5);
        }
      }
    }
    else
    {
      WebCore::TimerBase::start();
    }
  }
  return 1;
}

void sub_198628440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit11XPCEndpointC2Ev_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), *(void *)(a1 + 40), a2);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultTextRecognitionInVideosEnabled(void)::$_0 &&>>()
{
  uint64_t result = _os_feature_enabled_impl();
  _MergedGlobals_62 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultVisualTranslationEnabled(void)::$_0 &&>>()
{
  uint64_t result = _os_feature_enabled_impl();
  byte_1EB3592A1 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultRemoveBackgroundEnabled(void)::$_0 &&>>()
{
  uint64_t result = _os_feature_enabled_impl();
  byte_1EB3592A2 = result;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        *uint64_t v4 = 0;
        if (v5) {
          WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9C0328;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

void sub_1986286B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198628C24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::setScreenIsBeingCaptured(uint64_t this, char a2)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v2 = *(void *)(this + 256);
      char v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScreenIsBeingCaptured>(v2, &v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScreenIsBeingCaptured>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2463;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198628DCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ASCIILiteralHash::hash(WTF::ASCIILiteralHash *this, const WTF::ASCIILiteral *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  int v4 = -1640531527;
  __int16 v5 = 0;
  char v6 = 0;
  WTF::SuperFastHash::addCharacters<char,WTF::StringHasher::DefaultConverter>((uint64_t)&v4, *(unsigned __int8 **)this, v2 - 1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v4);
}

uint64_t WTF::SuperFastHash::addCharactersAssumingAligned<char,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    unsigned int v3 = a3 >> 1;
    unsigned int v4 = *(_DWORD *)result;
    do
    {
      unsigned int v5 = v4 + *a2;
      int v6 = (v5 << 16) ^ (a2[1] << 11);
      unsigned int v4 = (v6 ^ v5) + ((v6 ^ v5) >> 11);
      *(_DWORD *)uint64_t result = v4;
      a2 += 2;
      --v3;
    }
    while (v3);
  }
  if (a3)
  {
    int v7 = *a2;
    if (*(unsigned char *)(result + 6))
    {
      char v8 = 0;
      int v9 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)uint64_t result = ((v7 << 11) ^ (v9 << 16) ^ v9) + (((v7 << 11) ^ (v9 << 16) ^ v9) >> 11);
    }
    else
    {
      *(_WORD *)(result + 4) = v7;
      char v8 = 1;
    }
    *(unsigned char *)(result + 6) = v8;
  }
  return result;
}

uint64_t WTF::SuperFastHash::addCharacters<char,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  if (a3)
  {
    if (*(unsigned char *)(result + 6))
    {
      *(unsigned char *)(result + 6) = 0;
      int v3 = *a2++;
      int v4 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)uint64_t result = ((v3 << 11) ^ (v4 << 16) ^ v4) + (((v3 << 11) ^ (v4 << 16) ^ v4) >> 11);
      --a3;
    }
    return WTF::SuperFastHash::addCharactersAssumingAligned<char,WTF::StringHasher::DefaultConverter>(result, a2, a3);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeHost::updateLayerTree(WebKit::RemoteLayerTreeHost *this, const IPC::Connection *a2, const WebKit::RemoteLayerTreeTransaction *a3, float a4)
{
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  if (!*(void *)this) {
    return 0;
  }
  if (!*(void *)(*(void *)this + 8)) {
    return 0;
  }
  uint64_t v6 = WebKit::AuxiliaryProcessProxy::fromConnection(a2, a2);
  if (!v6) {
    return 0;
  }
  uint64_t v163 = *(void *)(v6 + 176);
  unsigned int v8 = *((_DWORD *)a3 + 15);
  if (v8)
  {
    uint64_t v9 = *((void *)a3 + 6);
    uint64_t v161 = v9 + 80 * v8;
    uint64_t v10 = (uint64_t *)((char *)this + 24);
    uint64_t v11 = (uint64_t *)((char *)this + 16);
    while (1)
    {
      WebKit::RemoteLayerTreeHost::makeNode((uint64_t)this, v9, v7, (uint64_t *)v171);
      if (objc_opt_respondsToSelector())
      {
        [*((id *)v171[0] + 5) setUsesWebKitBehavior:1];
        objc_opt_class();
        [*((id *)v171[0] + 5) setSortsSublayers:objc_opt_isKindOfClass() & 1];
      }
      if (*(_DWORD *)(v9 + 72) != 3) {
        goto LABEL_39;
      }
      if (!*(void *)v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198629D04);
      }
      uint64_t v12 = *v10;
      if (*v10
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this + 3),
            (uint64_t v12 = *v10) != 0))
      {
        int v13 = *(_DWORD *)(v12 - 8);
      }
      else
      {
        int v13 = 0;
      }
      uint64_t v14 = *(void *)(v9 + 56);
      unint64_t v15 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
      unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      unsigned int v18 = v13 & ((v17 >> 31) ^ v17);
      unsigned int v19 = (void *)(v12 + 24 * v18);
      uint64_t v20 = *v19;
      if (*v19)
      {
        uint64_t v21 = 0;
        int v22 = 1;
        do
        {
          if (v20 == v14)
          {
            *(_OWORD *)(v19 + 1) = *(_OWORD *)v9;
            goto LABEL_31;
          }
          if (v20 == -1) {
            uint64_t v21 = v19;
          }
          unsigned int v18 = (v18 + v22) & v13;
          unsigned int v19 = (void *)(v12 + 24 * v18);
          uint64_t v20 = *v19;
          ++v22;
        }
        while (*v19);
        if (v21)
        {
          *uint64_t v21 = 0;
          v21[1] = 0;
          v21[2] = 0;
          --*(_DWORD *)(*v10 - 16);
          uint64_t v14 = *(void *)(v9 + 56);
          unsigned int v19 = v21;
        }
      }
      *unsigned int v19 = v14;
      *(_OWORD *)(v19 + 1) = *(_OWORD *)v9;
      uint64_t v23 = *v10;
      int v24 = *v10 ? *(_DWORD *)(v23 - 12) + 1 : 1;
      *(_DWORD *)(v23 - 12) = v24;
      uint64_t v25 = *v10;
      int v26 = *v10 ? *(_DWORD *)(v25 - 12) : 0;
      uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
      unint64_t v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400) {
        break;
      }
      if (3 * v28 <= 4 * v27) {
        goto LABEL_30;
      }
LABEL_31:
      uint64_t v29 = *((void *)this + 4);
      if (!v29) {
        goto LABEL_38;
      }
      int v30 = *(_DWORD *)(v29 - 8);
      uint64_t v31 = *(void *)(v9 + 56);
      unint64_t v32 = (v31 + ~(v31 << 32)) ^ ((unint64_t)(v31 + ~(v31 << 32)) >> 22);
      unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      unsigned int v35 = v30 & ((v34 >> 31) ^ v34);
      uint64_t v36 = *(void *)(v29 + 24 * v35);
      if (v36 != v31)
      {
        int v37 = 1;
        while (v36)
        {
          unsigned int v35 = (v35 + v37) & v30;
          uint64_t v36 = *(void *)(v29 + 24 * v35);
          ++v37;
          if (v36 == v31) {
            goto LABEL_36;
          }
        }
LABEL_38:
        buf[0] = 0;
        buf[16] = 0;
        goto LABEL_39;
      }
LABEL_36:
      *(_OWORD *)buf = *(_OWORD *)(v29 + 24 * v35 + 8);
      buf[16] = 1;
      uint64_t v38 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, buf);
      if (v38) {
        [*((id *)v171[0] + 6) addSubview:*(void *)(v38 + 48)];
      }
LABEL_39:
      if (!*(void *)v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198629CCCLL);
      }
      uint64_t v39 = *v11;
      if (*v11
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)this + 2),
            (uint64_t v39 = *v11) != 0))
      {
        int v40 = *(_DWORD *)(v39 - 8);
      }
      else
      {
        int v40 = 0;
      }
      LODWORD(v174) = -1640531527;
      WORD2(v174) = 0;
      BYTE6(v174) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v174, (void *)v9);
      unsigned int v41 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v174) & v40;
      uint64_t v42 = (void *)(v39 + 24 * v41);
      uint64_t v44 = *v42;
      uint64_t v43 = v42[1];
      if (*(_OWORD *)v42 != 0)
      {
        uint64_t v45 = 0;
        int v46 = 1;
        while (v44 != *(void *)v9 || v43 != *(void *)(v9 + 8))
        {
          if (v43 == -1) {
            uint64_t v45 = v42;
          }
          unsigned int v41 = (v41 + v46) & v40;
          uint64_t v42 = (void *)(v39 + 24 * v41);
          uint64_t v44 = *v42;
          uint64_t v43 = v42[1];
          ++v46;
          if (*(_OWORD *)v42 == 0)
          {
            if (v45)
            {
              *uint64_t v45 = 0;
              v45[1] = 0;
              v45[2] = 0;
              --*(_DWORD *)(*v11 - 16);
              uint64_t v42 = v45;
            }
            goto LABEL_52;
          }
        }
        goto LABEL_61;
      }
LABEL_52:
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v9;
      uint64_t v47 = v171[0];
      v171[0] = 0;
      std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)v42 + 2, v47);
      uint64_t v48 = *v11;
      if (*v11) {
        int v49 = *(_DWORD *)(v48 - 12) + 1;
      }
      else {
        int v49 = 1;
      }
      *(_DWORD *)(v48 - 12) = v49;
      uint64_t v50 = *v11;
      if (*v11) {
        int v51 = *(_DWORD *)(v50 - 12);
      }
      else {
        int v51 = 0;
      }
      uint64_t v52 = (*(_DWORD *)(v50 - 16) + v51);
      unint64_t v53 = *(unsigned int *)(v50 - 4);
      if (v53 > 0x400)
      {
        if (v53 > 2 * v52) {
          goto LABEL_61;
        }
LABEL_60:
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)this + 2);
        goto LABEL_61;
      }
      if (3 * v53 <= 4 * v52) {
        goto LABEL_60;
      }
LABEL_61:
      uint64_t v54 = v171[0];
      v171[0] = 0;
      if (v54)
      {
        WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(v54);
        WTF::fastFree(v55, v56);
      }
      v9 += 80;
      if (v9 == v161) {
        goto LABEL_73;
      }
    }
    if (v28 > 2 * v27) {
      goto LABEL_31;
    }
LABEL_30:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this + 3);
    goto LABEL_31;
  }
LABEL_73:
  uint64_t v59 = (long long *)((char *)a3 + 8);
  if (*((void *)a3 + 1))
  {
    long long v176 = *v59;
    char v177 = 1;
    char v61 = (uint64_t *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, &v176);
    if (v61)
    {
      char v62 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    LOBYTE(v176) = 0;
    char v177 = 0;
  }
  uint64_t v63 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v64 = *(void *)v59;
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v64;
    _os_log_impl(&dword_1985F2000, v63, OS_LOG_TYPE_DEFAULT, "%p RemoteLayerTreeHost::updateLayerTree - failed to find root layer with ID %llu", buf, 0x16u);
  }
  char v61 = 0;
  char v62 = 1;
LABEL_80:
  uint64_t v65 = (uint64_t *)*((void *)this + 1);
  if (v65) {
    uint64_t v65 = (uint64_t *)v65[1];
  }
  BOOL v66 = v65 != v61 && *((void *)a3 + 5) == 0;
  int v67 = v66;
  if (v66)
  {
    if (v62)
    {
      uint64_t v68 = 0;
    }
    else
    {
      uint64_t v68 = *v61;
      if (*v61) {
        goto LABEL_97;
      }
      uint64_t v68 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v68 = 1;
      *(void *)(v68 + 8) = v61;
      uint64_t v69 = (unsigned int *)*v61;
      *char v61 = v68;
      if (!v69) {
        goto LABEL_97;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v69, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v69);
        WTF::fastFree((WTF *)v69, v60);
      }
      uint64_t v68 = *v61;
      if (*v61) {
LABEL_97:
      }
        atomic_fetch_add((atomic_uint *volatile)v68, 1u);
    }
    unsigned __int16 v70 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = v68;
    if (v70 && atomic_fetch_add((atomic_uint *volatile)v70, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, v60);
    }
  }
  BOOL v174 = 0;
  uint64_t v175 = 0;
  int v162 = WebKit::RemoteLayerTreeHost::layerContentsType(*(WebKit::RemoteLayerTreeHost **)this);
  unsigned int v158 = v67;
  uint64_t v71 = *((void *)a3 + 4);
  uint64_t v72 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v71);
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  unint64_t v159 = v61;
  if (v71) {
    uint64_t v76 = v71 + 24 * *(unsigned int *)(v71 - 4);
  }
  else {
    uint64_t v76 = 0;
  }
  if (v76 != v72)
  {
    do
    {
      uint64_t v77 = *(void *)(v73 + 16);
      long long v172 = *(_OWORD *)v73;
      char v173 = 1;
      uint64_t v78 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, &v172);
      if (v78)
      {
        WebKit::RemoteLayerTreePropertyApplier::applyHierarchyUpdates(v78, v77, (uint64_t *)this + 2);
      }
      else
      {
        __int16 v79 = qword_1EB358730;
        if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = *(void *)v73;
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v80;
          _os_log_impl(&dword_1985F2000, v79, OS_LOG_TYPE_DEFAULT, "%p RemoteLayerTreeHost::updateLayerTree - failed to find layer with ID %llu", buf, 0x16u);
        }
      }
      while (1)
      {
        v73 += 24;
        if (v73 == v75) {
          break;
        }
        if (*(_OWORD *)v73 != 0 && *(void *)(v73 + 8) != -1) {
          goto LABEL_116;
        }
      }
      uint64_t v73 = v75;
LABEL_116:
      ;
    }
    while (v73 != v76);
  }
  uint64_t v82 = *((void *)a3 + 5);
  if (!v82) {
    goto LABEL_169;
  }
  int v84 = (uint64_t *)((char *)this + 32);
  uint64_t v83 = *((void *)this + 4);
  uint64_t v86 = v61[1];
  uint64_t v85 = v61[2];
  if (v83
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this + 4),
        (uint64_t v83 = *v84) != 0))
  {
    int v87 = *(_DWORD *)(v83 - 8);
  }
  else
  {
    int v87 = 0;
  }
  unint64_t v88 = (v82 + ~(v82 << 32)) ^ ((unint64_t)(v82 + ~(v82 << 32)) >> 22);
  unint64_t v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
  unint64_t v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
  unsigned int v91 = (v90 >> 31) ^ v90;
  unsigned int v92 = v87 & v91;
  mach_port_name_t v93 = (uint64_t *)(v83 + 24 * (v87 & v91));
  uint64_t v94 = *v93;
  if (*v93)
  {
    char v95 = 0;
    int v96 = 1;
    do
    {
      if (v94 == v82)
      {
        v93[1] = v86;
        v93[2] = v85;
        goto LABEL_139;
      }
      if (v94 == -1) {
        char v95 = v93;
      }
      unsigned int v92 = (v92 + v96) & v87;
      mach_port_name_t v93 = (uint64_t *)(v83 + 24 * v92);
      uint64_t v94 = *v93;
      ++v96;
    }
    while (*v93);
    if (v95)
    {
      *char v95 = 0;
      v95[1] = 0;
      v95[2] = 0;
      --*(_DWORD *)(*v84 - 16);
      mach_port_name_t v93 = v95;
    }
  }
  *mach_port_name_t v93 = v82;
  v93[1] = v86;
  v93[2] = v85;
  uint64_t v97 = *v84;
  if (*v84) {
    int v98 = *(_DWORD *)(v97 - 12) + 1;
  }
  else {
    int v98 = 1;
  }
  *(_DWORD *)(v97 - 12) = v98;
  uint64_t v99 = *v84;
  if (*v84) {
    int v100 = *(_DWORD *)(v99 - 12);
  }
  else {
    int v100 = 0;
  }
  uint64_t v101 = (*(_DWORD *)(v99 - 16) + v100);
  unint64_t v102 = *(unsigned int *)(v99 - 4);
  if (v102 > 0x400)
  {
    if (v102 > 2 * v101) {
      goto LABEL_139;
    }
    goto LABEL_138;
  }
  if (3 * v102 <= 4 * v101) {
LABEL_138:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this + 4);
LABEL_139:
  uint64_t v104 = (uint64_t *)((char *)this + 40);
  uint64_t v103 = *((void *)this + 5);
  if (v103
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 5, 0), (uint64_t v103 = *v104) != 0))
  {
    int v105 = *(_DWORD *)(v103 - 8);
  }
  else
  {
    int v105 = 0;
  }
  unint64_t v106 = (v163 + ~(v163 << 32)) ^ ((unint64_t)(v163 + ~(v163 << 32)) >> 22);
  unint64_t v107 = 9 * ((v106 + ~(v106 << 13)) ^ ((v106 + ~(v106 << 13)) >> 8));
  unint64_t v108 = (v107 ^ (v107 >> 15)) + ~((v107 ^ (v107 >> 15)) << 27);
  unsigned int v109 = v105 & ((v108 >> 31) ^ v108);
  uint64_t v110 = (uint64_t *)(v103 + 16 * v109);
  uint64_t v111 = *v110;
  if (!*v110)
  {
LABEL_150:
    uint64_t v114 = v110[1];
    *uint64_t v110 = v163;
    v110[1] = 0;
    if (v114) {
      WTF::fastFree((WTF *)(v114 - 16), v93);
    }
    uint64_t v115 = *v104;
    if (*v104) {
      int v116 = *(_DWORD *)(v115 - 12) + 1;
    }
    else {
      int v116 = 1;
    }
    *(_DWORD *)(v115 - 12) = v116;
    uint64_t v117 = *v104;
    if (*v104) {
      int v118 = *(_DWORD *)(v117 - 12);
    }
    else {
      int v118 = 0;
    }
    uint64_t v119 = (*(_DWORD *)(v117 - 16) + v118);
    unint64_t v120 = *(unsigned int *)(v117 - 4);
    if (v120 > 0x400)
    {
      if (v120 > 2 * v119) {
        goto LABEL_161;
      }
    }
    else if (3 * v120 > 4 * v119)
    {
      goto LABEL_161;
    }
    uint64_t v110 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 5, v110);
    goto LABEL_161;
  }
  uint64_t v112 = 0;
  int v113 = 1;
  while (v111 != v163)
  {
    if (v111 == -1) {
      uint64_t v112 = v110;
    }
    unsigned int v109 = (v109 + v113) & v105;
    uint64_t v110 = (uint64_t *)(v103 + 16 * v109);
    uint64_t v111 = *v110;
    ++v113;
    if (!*v110)
    {
      if (v112)
      {
        *uint64_t v112 = 0;
        v112[1] = 0;
        --*(_DWORD *)(*v104 - 16);
        uint64_t v110 = v112;
      }
      goto LABEL_150;
    }
  }
LABEL_161:
  *(_OWORD *)int v171 = *(_OWORD *)(v159 + 1);
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add(v110 + 1, (uint64_t *)v171, (uint64_t)buf);
  v159[4] = v82;
  uint64_t v121 = *((void *)this + 3);
  if (v121)
  {
    int v122 = *(_DWORD *)(v121 - 8);
    unsigned int v123 = v122 & v91;
    uint64_t v124 = *(void *)(v121 + 24 * (v122 & v91));
    if (v124 == v82)
    {
LABEL_166:
      long long v169 = *(_OWORD *)(v121 + 24 * v123 + 8);
      char v170 = 1;
      uint64_t v126 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, &v169);
      if (v126) {
        [*(id *)(v126 + 48) addSubview:v159[6]];
      }
      goto LABEL_169;
    }
    int v125 = 1;
    while (v124)
    {
      unsigned int v123 = (v123 + v125) & v122;
      uint64_t v124 = *(void *)(v121 + 24 * v123);
      ++v125;
      if (v124 == v82) {
        goto LABEL_166;
      }
    }
  }
  LOBYTE(v169) = 0;
  char v170 = 0;
LABEL_169:
  uint64_t v127 = *((void *)a3 + 4);
  uint64_t v128 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v127);
  uint64_t v130 = (uint64_t *)v128;
  char v131 = v129;
  if (v127) {
    uint64_t v132 = (uint64_t *)(v127 + 24 * *(unsigned int *)(v127 - 4));
  }
  else {
    uint64_t v132 = 0;
  }
  if (v132 != (uint64_t *)v128)
  {
    do
    {
      uint64_t v133 = *v130;
      uint64_t v134 = v130[1];
      uint64_t v135 = v130[2];
      v167[0] = *v130;
      v167[1] = v134;
      char v168 = 1;
      uint64_t v136 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, v167);
      if (v136)
      {
        if ((*(unsigned char *)(v135 + 1) & 0x40) != 0 && *(void *)(v135 + 520))
        {
          *(void *)buf = v133;
          *(void *)&buf[8] = v134;
          *(_OWORD *)&buf[16] = *(_OWORD *)(v135 + 520);
          int v138 = HIDWORD(v175);
          if (HIDWORD(v175) == v175)
          {
            uint64_t v139 = (_OWORD *)WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v174, HIDWORD(v175) + 1, (unint64_t)buf);
            int v138 = HIDWORD(v175);
            uint64_t v140 = &v174[2 * HIDWORD(v175)];
            long long v137 = v139[1];
            *uint64_t v140 = *v139;
          }
          else
          {
            uint64_t v140 = &v174[2 * HIDWORD(v175)];
            long long v137 = *(_OWORD *)&buf[16];
            *uint64_t v140 = *(_OWORD *)buf;
          }
          v140[1] = v137;
          HIDWORD(v175) = v138 + 1;
        }
        WebKit::RemoteLayerTreePropertyApplier::applyProperties(v136, this, v135, (uint64_t *)this + 2, v162, *(double *)&v137);
        if (*((unsigned char *)this + 64))
        {
          if ((*(unsigned char *)(v135 + 2) & 8) != 0) {
            [*(id *)(v136 + 40) setBorderWidth:(float)(*(float *)(v135 + 556) / a4)];
          }
          [*(id *)(v136 + 40) setMasksToBounds:0];
        }
      }
      else
      {
        uint64_t v141 = qword_1EB358730;
        if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v133;
          _os_log_impl(&dword_1985F2000, v141, OS_LOG_TYPE_DEFAULT, "%p RemoteLayerTreeHost::updateLayerTree - failed to find layer with ID %llu", buf, 0x16u);
        }
      }
      while (1)
      {
        v130 += 3;
        if (v130 == v131) {
          break;
        }
        if (*(_OWORD *)v130 != 0 && v130[1] != -1) {
          goto LABEL_193;
        }
      }
      uint64_t v130 = v131;
LABEL_193:
      ;
    }
    while (v130 != v132);
  }
  uint64_t v143 = (WTF *)v174;
  if (HIDWORD(v175))
  {
    uint64_t v144 = 32 * HIDWORD(v175);
    uint64_t v145 = v174 + 1;
    do
    {
      *(_OWORD *)buf = *v145;
      buf[16] = 1;
      uint64_t v146 = (void *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, buf);
      if (v146) {
        uint64_t v146 = (void *)v146[5];
      }
      uint64_t v147 = [v146 contents];
      long long v166 = *(v145 - 1);
      *(_OWORD *)buf = v166;
      buf[16] = 1;
      uint64_t v148 = (void *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 2, buf);
      if (v148) {
        uint64_t v148 = (void *)v148[5];
      }
      [v148 setContents:v147];
      v145 += 2;
      v144 -= 32;
    }
    while (v144);
  }
  uint64_t v149 = *((unsigned int *)a3 + 19);
  if (v149)
  {
    uint64_t v150 = (uint64_t *)*((void *)a3 + 8);
    uint64_t v151 = &v150[2 * v149];
    do
    {
      WebKit::RemoteLayerTreeHost::layerWillBeRemoved((uint64_t *)this, v163, *v150, v150[1]);
      v150 += 2;
    }
    while (v150 != v151);
  }
  uint64_t v152 = *((unsigned int *)a3 + 27);
  if (v152)
  {
    uint64_t v153 = (long long *)*((void *)a3 + 12);
    uint64_t v154 = (uint64_t *)((char *)this + 16);
    uint64_t v155 = 16 * v152;
    do
    {
      long long v164 = *v153;
      char v165 = 1;
      uint64_t v156 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v154, &v164);
      uint64_t v157 = v156;
      if (v156)
      {
        [*(id *)(v156 + 40) setContents:0];
        *(void *)(v157 + 224) = 0;
        *(unsigned char *)(v157 + 232) = 0;
      }
      ++v153;
      v155 -= 16;
    }
    while (v155);
  }
  uint64_t v57 = v158;
  if (v143) {
    WTF::fastFree(v143, v129);
  }
  return v57;
}

void sub_198629D2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WebKit::RemoteLayerTreeNode *a33)
{
  unsigned int v35 = *(WTF **)(v33 - 208);
  if (v35) {
    WTF::fastFree(v35, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    unsigned int v16 = -1640531527;
    __int16 v17 = 0;
    char v18 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v16, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
    uint64_t v6 = a2[1];
    unsigned int v7 = v5 & v4;
    unsigned int v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6) {
      return *(void *)(v2 + 24 * v7 + 16);
    }
    int v12 = 1;
    while (v9 | v10)
    {
      unsigned int v7 = (v7 + v12) & v4;
      int v13 = (uint64_t *)(v2 + 24 * v7);
      uint64_t v9 = *v13;
      uint64_t v10 = v13[1];
      ++v12;
      if (v9 == *a2 && v10 == v6) {
        return *(void *)(v2 + 24 * v7 + 16);
      }
    }
  }
  return 0;
}

uint64_t WTF::SuperFastHash::hash(WTF::SuperFastHash *this)
{
  unsigned int v1 = *(_DWORD *)this;
  if (*((unsigned char *)this + 6)) {
    unsigned int v1 = ((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11))
  }
       + (((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11)) >> 17);
  unsigned int v2 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  unsigned int v3 = (v2 ^ (4 * v2)) + ((v2 ^ (4 * v2)) >> 15);
  unsigned int v4 = v3 ^ (v3 << 10);
  if (v4) {
    return v4;
  }
  else {
    return 0x800000;
  }
}

unsigned int *WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(unsigned int *result, void *a2)
{
  int v2 = *result + (unsigned __int16)*a2;
  unsigned int v3 = (*a2 >> 5) & 0x7FFF800 ^ (v2 << 16) ^ v2;
  int v4 = v3 + (unsigned __int16)WORD2(*a2) + (v3 >> 11);
  unsigned int v5 = (*a2 >> 37) & 0x7FFF800 ^ (v4 << 16) ^ v4;
  unsigned int v6 = v5 + (v5 >> 11);
  *uint64_t result = v6;
  unint64_t v7 = a2[1];
  unsigned int v8 = (v7 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v7) << 16) ^ (v6 + (unsigned __int16)v7);
  int v9 = v8 + WORD2(v7) + (v8 >> 11);
  LODWORD(v7) = (v7 >> 37) & 0x7FFF800 ^ (v9 << 16);
  *uint64_t result = (v7 ^ v9) + ((v7 ^ v9) >> 11);
  return result;
}

void WebKit::RemoteLayerTreeHost::makeNode(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  switch(*(unsigned char *)(a2 + 16))
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 9:
    case 0xF:
      unint64_t v7 = objc_alloc_init(WKCompositingView);
      if (!*(void *)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x19862A61CLL);
      }
      unsigned int v8 = v7;
      int v9 = *(_DWORD *)(a2 + 72);
      uint64_t v10 = *(void *)(a2 + 56);
      uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      if (v9 == 3) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = 0;
      }
      goto LABEL_6;
    case 3:
      uint64_t v20 = objc_alloc_init(WKTransformView);
      if (!*(void *)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x19862A668);
      }
      unsigned int v8 = v20;
      int v21 = *(_DWORD *)(a2 + 72);
      uint64_t v22 = *(void *)(a2 + 56);
      uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      if (v21 == 3) {
        uint64_t v15 = v22;
      }
      else {
        uint64_t v15 = 0;
      }
      goto LABEL_6;
    case 6:
      uint64_t v23 = *(void *)a2;
      if (!*(void *)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x19862A688);
      }
      uint64_t v24 = *(void *)(a2 + 8);
      uint64_t v25 = objc_alloc_init(WKCompositingLayer);
      uint64_t v26 = WTF::fastMalloc((WTF *)0x100);
      *(void *)uint64_t v26 = 0;
      *(void *)(v26 + 8) = v23;
      *(void *)(v26 + 16) = v24;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0;
      *(void *)(v26 + 40) = v25;
      *(void *)(v26 + 48) = 0;
      WebCore::EventRegion::EventRegion((WebCore::EventRegion *)(v26 + 56));
      *(_OWORD *)(v26 + 208) = 0u;
      *(unsigned char *)(v26 + 232) = 0;
      *(void *)(v26 + 240) = 0;
      *(unsigned char *)(v26 + 248) = 0;
      *(_OWORD *)(v26 + 176) = 0u;
      *(_OWORD *)(v26 + 192) = 0u;
      *(unsigned char *)(v26 + 224) = 0;
      objc_msgSend(*(id *)(v26 + 40), "setValue:forKey:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithPointer:", v26), @"WKRemoteLayerTreeNode");
      objc_msgSend(*(id *)(v26 + 40), "setDelegate:", objc_msgSend(MEMORY[0x1E4FB61C8], "shared"));
      *a4 = v26;
      return;
    case 8:
    case 0xE:
      if (*(unsigned char *)(a1 + 64))
      {
        __int16 v17 = objc_alloc_init(WKCompositingView);
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A648);
        }
        unsigned int v8 = v17;
        int v18 = *(_DWORD *)(a2 + 72);
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 8);
        if (v18 == 3) {
          uint64_t v15 = v19;
        }
        else {
          uint64_t v15 = 0;
        }
        goto LABEL_6;
      }
      if (!*(unsigned char *)(a2 + 48)
        || ((uint64_t v43 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 8) + 40) + 8)) != 0
          ? (uint64_t v44 = v43 - 16)
          : (uint64_t v44 = 0),
            (uint64_t v45 = *(void **)(v44 + 432)) == 0))
      {
        char v61 = [WKUIRemoteView alloc];
        uint64_t v62 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 8) + 40) + 8);
        if (v62) {
          uint64_t v63 = v62 - 16;
        }
        else {
          uint64_t v63 = 0;
        }
        if (*(unsigned char *)(v63 + 801) || (uint64_t v68 = *(void *)(*(void *)(v63 + 256) + 136)) == 0) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = *(unsigned int *)(v68 + 108);
        }
        if (*(_DWORD *)(a2 + 72) == 1) {
          uint64_t v69 = *(unsigned int *)(a2 + 56);
        }
        else {
          uint64_t v69 = 0;
        }
        uint64_t v70 = -[WKUIRemoteView initWithFrame:pid:contextID:](v61, "initWithFrame:pid:contextID:", v64, v69, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A768);
        }
        unsigned int v8 = (const void *)v70;
        int v71 = *(_DWORD *)(a2 + 72);
        uint64_t v72 = *(void *)(a2 + 56);
        uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 8);
        if (v71 == 3) {
          uint64_t v15 = v72;
        }
        else {
          uint64_t v15 = 0;
        }
LABEL_6:
        CFTypeRef cf = v8;
        WebKit::RemoteLayerTreeNode::RemoteLayerTreeNode(v11, v13, v14, v15, (id *)&cf);
        *a4 = v12;
        CFTypeRef v16 = cf;
        if (!cf) {
          return;
        }
        goto LABEL_7;
      }
      if (!*(void *)a2)
      {
        __break(0xC471u);
        goto LABEL_125;
      }
      int v46 = (uint64_t *)(a1 + 56);
      uint64_t v47 = *(void *)(a1 + 56);
      if (v47
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)(a1 + 56), 0), (uint64_t v47 = *v46) != 0))
      {
        int v48 = *(_DWORD *)(v47 - 8);
      }
      else
      {
        int v48 = 0;
      }
      LODWORD(cf) = -1640531527;
      WORD2(cf) = 0;
      BYTE6(cf) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&cf, (void *)a2);
      unsigned int v49 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&cf) & v48;
      uint64_t v50 = (void *)(v47 + 24 * v49);
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      if (*(_OWORD *)v50 == 0)
      {
LABEL_65:
        *(_OWORD *)uint64_t v50 = *(_OWORD *)a2;
        v50[2] = *(void *)(a2 + 24);
        uint64_t v55 = *v46;
        if (*v46) {
          int v56 = *(_DWORD *)(v55 - 12) + 1;
        }
        else {
          int v56 = 1;
        }
        *(_DWORD *)(v55 - 12) = v56;
        uint64_t v73 = *v46;
        if (*v46) {
          int v74 = *(_DWORD *)(v73 - 12);
        }
        else {
          int v74 = 0;
        }
        uint64_t v75 = (*(_DWORD *)(v73 - 16) + v74);
        unint64_t v76 = *(unsigned int *)(v73 - 4);
        if (v76 > 0x400)
        {
          if (v76 > 2 * v75) {
            goto LABEL_97;
          }
        }
        else if (3 * v76 > 4 * v75)
        {
          goto LABEL_97;
        }
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(v46, v50);
        goto LABEL_97;
      }
      unint64_t v53 = 0;
      int v54 = 1;
      while (v52 != *(void *)a2 || v51 != *(void *)(a2 + 8))
      {
        if (v51 == -1) {
          unint64_t v53 = v50;
        }
        unsigned int v49 = (v49 + v54) & v48;
        uint64_t v50 = (void *)(v47 + 24 * v49);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        ++v54;
        if (*(_OWORD *)v50 == 0)
        {
          if (v53)
          {
            *unint64_t v53 = 0;
            v53[1] = 0;
            v53[2] = 0;
            --*(_DWORD *)(*v46 - 16);
            uint64_t v50 = v53;
          }
          goto LABEL_65;
        }
      }
LABEL_97:
      if (!*(unsigned char *)(a2 + 48))
      {
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      if (*(_DWORD *)(a2 + 72) == 1) {
        unsigned int v77 = *(_DWORD *)(a2 + 56);
      }
      else {
        unsigned int v77 = 0;
      }
      WebKit::VideoPresentationManagerProxy::createViewWithID(v45, *(void *)(a2 + 24), v77, (float *)(a2 + 32), (const WebCore::FloatSize *)(a2 + 40), &v86);
      uint64_t v78 = v86;
      uint64_t v86 = 0;
      if (!*(void *)a2)
      {
LABEL_126:
        __break(0xC471u);
        JUMPOUT(0x19862A7C8);
      }
      int v79 = *(_DWORD *)(a2 + 72);
      uint64_t v80 = *(void *)(a2 + 56);
      uint64_t v81 = WTF::fastMalloc((WTF *)0x100);
      uint64_t v82 = v81;
      uint64_t v83 = *(void *)a2;
      uint64_t v84 = *(void *)(a2 + 8);
      if (v79 == 3) {
        uint64_t v85 = v80;
      }
      else {
        uint64_t v85 = 0;
      }
      CFTypeRef cf = v78;
      WebKit::RemoteLayerTreeNode::RemoteLayerTreeNode(v81, v83, v84, v85, (id *)&cf);
      *a4 = v82;
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef v16 = v86;
      uint64_t v86 = 0;
      if (v16) {
LABEL_7:
      }
        CFRelease(v16);
      return;
    case 0xA:
      uint64_t v27 = objc_alloc_init(WKBackdropView);
      if (!*(void *)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x19862A6A8);
      }
      unsigned int v8 = v27;
      int v28 = *(_DWORD *)(a2 + 72);
      uint64_t v29 = *(void *)(a2 + 56);
      uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      if (v28 == 3) {
        uint64_t v15 = v29;
      }
      else {
        uint64_t v15 = 0;
      }
      goto LABEL_6;
    case 0xB:
      int v30 = objc_alloc_init(WKShapeView);
      if (!*(void *)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x19862A6C8);
      }
      unsigned int v8 = v30;
      int v31 = *(_DWORD *)(a2 + 72);
      uint64_t v32 = *(void *)(a2 + 56);
      uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      if (v31 == 3) {
        uint64_t v15 = v32;
      }
      else {
        uint64_t v15 = 0;
      }
      goto LABEL_6;
    case 0xC:
      if (*(unsigned char *)(a1 + 64))
      {
        id v33 = objc_alloc_init(MEMORY[0x1E4F42FF0]);
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A6E8);
        }
        unsigned int v8 = v33;
        int v34 = *(_DWORD *)(a2 + 72);
        uint64_t v35 = *(void *)(a2 + 56);
        uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 8);
        if (v34 == 3) {
          uint64_t v15 = v35;
        }
        else {
          uint64_t v15 = 0;
        }
      }
      else
      {
        uint64_t v65 = objc_alloc_init(WKChildScrollView);
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A788);
        }
        unsigned int v8 = v65;
        int v66 = *(_DWORD *)(a2 + 72);
        uint64_t v67 = *(void *)(a2 + 56);
        uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 8);
        if (v66 == 3) {
          uint64_t v15 = v67;
        }
        else {
          uint64_t v15 = 0;
        }
      }
      goto LABEL_6;
    case 0xD:
      uint64_t v36 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 8) + 40) + 8);
      if (v36) {
        uint64_t v37 = v36 - 16;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v38 = *(void *)(v37 + 272);
      {
        WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v38 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, a3))BOOL v39 = *(_DWORD *)(a2 + 72) == 2; {
      else
      }
        BOOL v39 = 0;
      if (v39)
      {
        uint64_t v57 = [WKModelView alloc];
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A728);
        }
        uint64_t v58 = -[WKModelView initWithModel:layerID:page:](v57, "initWithModel:layerID:page:", *(void *)(a2 + 56));
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A748);
        }
        unsigned int v8 = (const void *)v58;
        int v59 = *(_DWORD *)(a2 + 72);
        uint64_t v60 = *(void *)(a2 + 56);
        uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 8);
        if (v59 == 3) {
          uint64_t v15 = v60;
        }
        else {
          uint64_t v15 = 0;
        }
      }
      else
      {
        int v40 = objc_alloc_init(WKCompositingView);
        if (!*(void *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19862A708);
        }
        unsigned int v8 = v40;
        int v41 = *(_DWORD *)(a2 + 72);
        uint64_t v42 = *(void *)(a2 + 56);
        uint64_t v11 = WTF::fastMalloc((WTF *)0x100);
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 8);
        if (v41 == 3) {
          uint64_t v15 = v42;
        }
        else {
          uint64_t v15 = 0;
        }
      }
      goto LABEL_6;
    default:
      *a4 = 0;
      return;
  }
}

void sub_19862A7F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  WTF::fastFree(v10, a2);
  if (a9) {
    CFRelease(a9);
  }
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreePropertyApplier::applyHierarchyUpdates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned char *)a2 & 0x10) != 0)
  {
    unsigned int v6 = *(void **)(a1 + 48);
    if (v6 && objc_msgSend((id)objc_msgSend(v6, "subviews"), "count")
      || *(_DWORD *)(a2 + 60)
      && (uint64_t v7 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, *(void **)(a2 + 48))) != 0&& *(void *)(v7 + 48))
    {
      unsigned int v8 = *(void **)(a1 + 48);
      int v9 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 60)];
      uint64_t v10 = *(unsigned int *)(a2 + 60);
      if (v10)
      {
        uint64_t v11 = *(void **)(a2 + 48);
        uint64_t v12 = 16 * v10;
        do
        {
          uint64_t v13 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, v11);
          if (v13 && *(void *)(v13 + 48)) {
            objc_msgSend(v9, "addObject:");
          }
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      objc_msgSend(v8, "_web_setSubviews:", v9);
    }
    else
    {
      int v9 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 60)];
      uint64_t v14 = *(unsigned int *)(a2 + 60);
      if (v14)
      {
        uint64_t v15 = *(void **)(a2 + 48);
        uint64_t v16 = 16 * v14;
        do
        {
          uint64_t v17 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, v15);
          if (v17 && *(void *)(v17 + 40)) {
            objc_msgSend(v9, "addObject:");
          }
          v15 += 2;
          v16 -= 16;
        }
        while (v16);
      }
      [*(id *)(a1 + 40) setSublayers:v9];
    }
    if (v9)
    {
      CFRelease(v9);
    }
  }
}

void sub_19862AAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    CFRelease(v16);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v19 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v19);
  objc_end_catch();
}

uint64_t WebKit::RemoteLayerTreePropertyApplier::applyProperties(uint64_t a1, WebKit::RemoteLayerTreeHost *this, uint64_t a3, uint64_t *a4, int a5, double a6)
{
  WebKit::RemoteLayerTreePropertyApplier::applyPropertiesToLayer(*(CALayer **)(a1 + 40), (Color *)a1, this, (uint64_t *)a3, a5, a6);
  if (*(unsigned char *)(a3 + 5)) {
    WebKit::RemoteLayerTreeNode::setEventRegion((WebKit::RemoteLayerTreeNode *)a1, (const WebCore::EventRegion *)(a3 + 608));
  }
  uint64_t result = WebKit::RemoteLayerTreePropertyApplier::updateMask(a1, a3, a4);
  if ((*(unsigned char *)(a3 + 4) & 0x30) != 0)
  {
    if (*(unsigned char *)(a3 + 597)) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = *(unsigned char *)(a3 + 598) == 0;
    }
    uint64_t v11 = !v10;
    return [*(id *)(a1 + 48) setUserInteractionEnabled:v11];
  }
  return result;
}

void WebKit::RemoteLayerTreePropertyApplier::applyPropertiesToLayer(CALayer *a1, Color *a2, WebKit::RemoteLayerTreeHost *this, uint64_t *a4, int a5, double a6)
{
  unsigned int v8 = this;
  uint64_t v9 = (uint64_t)a2;
  BOOL v10 = a1;
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a4;
  if ((*a4 & 0x40) != 0)
  {
    -[CALayer setPosition:](a1, "setPosition:", *((float *)a4 + 88), *((float *)a4 + 89));
    [(CALayer *)v10 setZPosition:*((float *)a4 + 90)];
    uint64_t v11 = *a4;
    if ((*a4 & 0x80) == 0)
    {
LABEL_3:
      if ((v11 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v11 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  -[CALayer setAnchorPoint:](v10, "setAnchorPoint:", *((float *)a4 + 91), *((float *)a4 + 92));
  [(CALayer *)v10 setAnchorPointZ:*((float *)a4 + 93)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x100) == 0)
  {
LABEL_4:
    if ((v11 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  WebCore::FloatRect::operator CGRect();
  -[CALayer setBounds:](v10, "setBounds:");
  uint64_t v11 = *a4;
  if ((*a4 & 2) == 0)
  {
LABEL_5:
    if ((v11 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_23:
  if (a4[3])
  {
    WebCore::TransformationMatrix::operator CATransform3D();
  }
  else
  {
    long long v12 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
    long long v107 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
    long long v108 = v12;
    long long v13 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
    long long v109 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
    long long v110 = v13;
    long long v14 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
    long long v103 = *MEMORY[0x1E4F39B10];
    long long v104 = v14;
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
    long long v105 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
    long long v106 = v15;
  }
  v102[4] = v107;
  v102[5] = v108;
  v102[6] = v109;
  v102[7] = v110;
  v102[0] = v103;
  v102[1] = v104;
  void v102[2] = v105;
  v102[3] = v106;
  [(CALayer *)v10 setTransform:v102];
  uint64_t v11 = *a4;
  if ((*a4 & 4) == 0)
  {
LABEL_6:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_27:
  if (a4[4])
  {
    WebCore::TransformationMatrix::operator CATransform3D();
  }
  else
  {
    long long v16 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
    long long v98 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
    long long v99 = v16;
    long long v17 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
    long long v100 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
    long long v101 = v17;
    long long v18 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
    long long v94 = *MEMORY[0x1E4F39B10];
    long long v95 = v18;
    long long v19 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
    long long v96 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
    long long v97 = v19;
  }
  v93[4] = v98;
  v93[5] = v99;
  v93[6] = v100;
  v93[7] = v101;
  v93[0] = v94;
  v93[1] = v95;
  v93[2] = v96;
  v93[3] = v97;
  [(CALayer *)v10 setSublayerTransform:v93];
  uint64_t v11 = *a4;
  if ((*a4 & 0x40000000) == 0)
  {
LABEL_7:
    if ((v11 & 0x100000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  [(CALayer *)v10 setHidden:*((unsigned __int8 *)a4 + 591)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v11 & 0x20000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  [(CALayer *)v10 setGeometryFlipped:*((unsigned __int8 *)a4 + 593)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x20000) == 0)
  {
LABEL_9:
    if ((v11 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  [(CALayer *)v10 setContentsScale:*((float *)a4 + 137)];
  [(CALayer *)v10 setRasterizationScale:*((float *)a4 + 137)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v11 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(a6) = *((_DWORD *)a4 + 140);
  [(CALayer *)v10 setOpacity:a6];
  uint64_t v11 = *a4;
  if ((*a4 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  [(CALayer *)v10 setMasksToBounds:*((unsigned __int8 *)a4 + 595)];
  uint64_t v11 = *a4;
  if ((*a4 & 1) == 0)
  {
LABEL_12:
    if ((v11 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_36:
  if (a4[2]) {
    uint64_t v20 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v20 = &stru_1EEA10550;
  }
  [(CALayer *)v10 setName:v20];
  uint64_t v11 = *a4;
  if ((*a4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v11 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_39:
  if ((*((unsigned char *)a4 + 574) & 4) != 0)
  {
    WebCore::cachedCGColor((uint64_t *)&v113, (WebCore *)(a4 + 71), a2);
    uint64_t v21 = v113;
  }
  else
  {
    uint64_t v21 = 0;
    *(void *)&long long v113 = 0;
  }
  [(CALayer *)v10 setBackgroundColor:v21];
  uint64_t v22 = (const void *)v113;
  *(void *)&long long v113 = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v11 = *a4;
  if ((*a4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v11 & 0x80000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_45:
  if ((*((unsigned char *)a4 + 582) & 4) != 0)
  {
    WebCore::cachedCGColor((uint64_t *)&v113, (WebCore *)(a4 + 72), a2);
    uint64_t v23 = v113;
  }
  else
  {
    uint64_t v23 = 0;
    *(void *)&long long v113 = 0;
  }
  [(CALayer *)v10 setBorderColor:v23];
  uint64_t v24 = (const void *)v113;
  *(void *)&long long v113 = 0;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v11 = *a4;
  if ((*a4 & 0x80000) == 0)
  {
LABEL_15:
    if ((v11 & 0x200000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  [(CALayer *)v10 setBorderWidth:*((float *)a4 + 139)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v11 & 0x800000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  [(CALayer *)v10 setDoubleSided:*((unsigned __int8 *)a4 + 594)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x800000000) == 0)
  {
LABEL_17:
    if ((v11 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  [(CALayer *)v10 setOpaque:*((unsigned __int8 *)a4 + 596)];
  uint64_t v11 = *a4;
  if ((*a4 & 0x200) == 0)
  {
LABEL_18:
    if ((v11 & 0x40000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_55;
  }
LABEL_54:
  WebCore::FloatRect::operator CGRect();
  -[CALayer setContentsRect:](v10, "setContentsRect:");
  if ((*a4 & 0x40000) == 0) {
    goto LABEL_57;
  }
LABEL_55:
  [(CALayer *)v10 setCornerRadius:*((float *)a4 + 138)];
  if (*((float *)a4 + 138) != 0.0) {
    [(CALayer *)v10 setCornerCurve:*MEMORY[0x1E4F39EA0]];
  }
LABEL_57:
  uint64_t v25 = *a4;
  if ((*a4 & 8) != 0)
  {
    int v115 = 0;
    if (a4[5]) {
      WebCore::Path::addRoundedRect();
    }
    uint64_t v26 = WebCore::Path::platformPath((WebCore::Path *)&v113);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v27 = v10;
    }
    else {
      uint64_t v27 = 0;
    }
    [(CALayer *)v27 setPath:v26];
    if (v115 != -1) {
      ((void (*)(unint64_t *, char *))off_1EE9BFE10[v115])(&v111, (char *)&v113 + 8);
    }
    uint64_t v25 = *a4;
  }
  if ((v25 & 0x1000) != 0)
  {
    uint64_t v28 = WebCore::Path::platformPath((WebCore::Path *)(a4 + 54));
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v29 = v10;
    }
    else {
      uint64_t v29 = 0;
    }
    [(CALayer *)v29 setPath:v28];
    uint64_t v25 = *a4;
  }
  if ((v25 & 0x1000000) != 0)
  {
    int v30 = *((unsigned __int8 *)a4 + 585);
    if (v30 == 2)
    {
      int v31 = (uint64_t *)MEMORY[0x1E4F3A340];
    }
    else if (v30 == 1)
    {
      int v31 = (uint64_t *)MEMORY[0x1E4F3A2B0];
    }
    else
    {
      if (*((unsigned char *)a4 + 585))
      {
        uint64_t v32 = 0;
        goto LABEL_80;
      }
      int v31 = (uint64_t *)MEMORY[0x1E4F3A238];
    }
    uint64_t v32 = *v31;
LABEL_80:
    [(CALayer *)v10 setMinificationFilter:v32];
    uint64_t v25 = *a4;
  }
  if ((v25 & 0x2000000) == 0) {
    goto LABEL_91;
  }
  int v33 = *((unsigned __int8 *)a4 + 586);
  if (v33 == 2)
  {
    int v34 = (uint64_t *)MEMORY[0x1E4F3A340];
  }
  else if (v33 == 1)
  {
    int v34 = (uint64_t *)MEMORY[0x1E4F3A2B0];
  }
  else
  {
    if (*((unsigned char *)a4 + 586))
    {
      uint64_t v35 = 0;
      goto LABEL_90;
    }
    int v34 = (uint64_t *)MEMORY[0x1E4F3A238];
  }
  uint64_t v35 = *v34;
LABEL_90:
  [(CALayer *)v10 setMagnificationFilter:v35];
  uint64_t v25 = *a4;
LABEL_91:
  if ((v25 & 0x4000000) != 0)
  {
    WebCore::PlatformCAFilters::setBlendingFiltersOnLayer();
    uint64_t v25 = *a4;
  }
  if ((v25 & 0x8000000) != 0)
  {
    objc_opt_class();
    if (!((v10 == 0) | ((objc_opt_isKindOfClass() & 1) == 0)))
    {
      uint64_t v36 = (void *)MEMORY[0x1E4F39FC0];
      if (*((unsigned char *)a4 + 588)) {
        uint64_t v36 = (void *)MEMORY[0x1E4F39FB8];
      }
      [(CALayer *)v10 setFillRule:*v36];
    }
  }
  uint64_t v37 = *a4;
  if ((*a4 & 0x10000) != 0)
  {
    LODWORD(a6) = *((_DWORD *)a4 + 136);
    [(CALayer *)v10 setSpeed:a6];
    uint64_t v37 = *a4;
  }
  if ((v37 & 0x8000) != 0)
  {
    [(CALayer *)v10 setTimeOffset:*((double *)a4 + 67)];
    uint64_t v37 = *a4;
  }
  if ((v37 & 0x80000400) != 0)
  {
    uint64_t v38 = a4[52];
    if (!v38 || !*((unsigned char *)a4 + 592)) {
      goto LABEL_175;
    }
    if (!v9)
    {
LABEL_167:
      -[CALayer setContentsOpaque:](v10, "setContentsOpaque:", *(unsigned __int8 *)(v38 + 212), v90);
      int v71 = *(const void **)(v38 + 80);
      if (v71)
      {
        CFRetain(*(CFTypeRef *)(v38 + 80));
LABEL_169:
        [(CALayer *)v10 setContents:v71];
        if ([MEMORY[0x1E4F39BE8] instancesRespondToSelector:sel_contentsDirtyRect]
          && *(unsigned char *)(v38 + 208))
        {
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v113, (const WebCore::IntRect *)(v38 + 192));
          [(CALayer *)v10 contentsScale];
          *(float *)&double v72 = v72;
          WebCore::FloatRect::scale((WebCore::FloatRect *)&v113, *(float *)&v72, *(float *)&v72);
          [(CALayer *)v10 contentsDirtyRect];
          CGFloat x = v117.origin.x;
          CGFloat y = v117.origin.y;
          CGFloat width = v117.size.width;
          CGFloat height = v117.size.height;
          if (CGRectIsNull(v117))
          {
            WebCore::FloatRect::operator CGRect();
          }
          else
          {
            WebCore::FloatRect::operator CGRect();
            v119.origin.CGFloat x = v81;
            v119.origin.CGFloat y = v82;
            v119.size.CGFloat width = v83;
            v119.size.CGFloat height = v84;
            v118.origin.CGFloat x = x;
            v118.origin.CGFloat y = y;
            v118.size.CGFloat width = width;
            v118.size.CGFloat height = height;
            *(CGRect *)&double v77 = CGRectUnion(v118, v119);
          }
          -[CALayer setContentsDirtyRect:](v10, "setContentsDirtyRect:", v77, v78, v79, v80);
        }
        CFRelease(v71);
        goto LABEL_179;
      }
      if (*(unsigned char *)(v38 + 72))
      {
        WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle((WebCore::IOSurface *)v38, a5, (const void **)&v113);
        int v71 = (const void *)v113;
        if ((void)v113) {
          goto LABEL_169;
        }
      }
LABEL_175:
      [(CALayer *)v10 _web_clearContents];
      goto LABEL_179;
    }
    unint64_t v39 = *(void *)(v9 + 208);
    unint64_t v111 = v39;
    unsigned int v40 = *(_DWORD *)(v9 + 220);
    LODWORD(v112) = *(_DWORD *)(v9 + 216);
    HIDWORD(v112) = v40;
    *(void *)&long long v113 = 0;
    *(void *)(v9 + 208) = 0;
    *((void *)&v113 + 1) = 0;
    *(void *)(v9 + 216) = 0;
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v113, a2);
    if (a5 != 2 || !*(unsigned char *)(v38 + 120) || !*(unsigned char *)(v38 + 72) || *(_DWORD *)(v38 + 64) != 1)
    {
LABEL_164:
      WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v111, v41);
      if (*(unsigned char *)(v9 + 232) && *(unsigned char *)(v38 + 184) && *(void *)(v9 + 224) >= *(void *)(v38 + 176)) {
        goto LABEL_179;
      }
      goto LABEL_167;
    }
    uint64_t v91 = v9;
    unsigned int v92 = (CFTypeRef *)(v38 + 104);
    unint64_t v42 = v39 + 24 * v40;
    if (v40)
    {
      unint64_t v90 = v8;
      int v43 = 0;
      unint64_t v44 = v39;
      unint64_t v45 = v42;
      unint64_t v46 = v42;
      do
      {
        if ((!*(unsigned char *)(v38 + 120) || *v92 != *(CFTypeRef *)v39 || *(_DWORD *)(v38 + 112) != *(_DWORD *)(v39 + 8))
          && (!*(unsigned char *)(v38 + 144)
           || *(void *)(v38 + 128) != *(void *)v39
           || *(_DWORD *)(v38 + 136) != *(_DWORD *)(v39 + 8))
          && (!*(unsigned char *)(v38 + 168)
           || *(void *)(v38 + 152) != *(void *)v39
           || *(_DWORD *)(v38 + 160) != *(_DWORD *)(v39 + 8)))
        {
          unint64_t v47 = v39;
          if (v46 != v111 + 24 * HIDWORD(v112))
          {
            if (v39 == v45)
            {
              unint64_t v47 = v46;
            }
            else
            {
              WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::moveOverlapping(v45, v39, v46);
              unint64_t v47 = v46 + v44 - v45;
            }
          }
          int v48 = *(const void **)(v39 + 16);
          *(void *)(v39 + 16) = 0;
          if (v48) {
            CFRelease(v48);
          }
          unint64_t v45 = v39 + 24;
          ++v43;
          unint64_t v46 = v47;
        }
        v39 += 24;
        v44 += 24;
      }
      while (v39 < v42);
      unint64_t v39 = v111;
      unsigned int v49 = HIDWORD(v112);
      unint64_t v42 = v46;
      unsigned int v8 = v90;
    }
    else
    {
      unsigned int v49 = 0;
      int v43 = 0;
      unint64_t v45 = v39;
    }
    int v41 = (void *)(v39 + 24 * v49);
    if ((void *)v45 != v41)
    {
      WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::moveOverlapping(v45, (uint64_t)v41, v42);
      unsigned int v49 = HIDWORD(v112);
      unint64_t v39 = v111;
    }
    uint64_t v51 = v49 - v43;
    BOOL v50 = v49 == v43;
    HIDWORD(v112) = v49 - v43;
    uint64_t v9 = v91;
    if (!v50)
    {
      if (!*(unsigned char *)(v38 + 120)) {
        goto LABEL_206;
      }
      uint64_t v52 = (CFTypeRef *)(v39 + 16);
      uint64_t v53 = 24 * v51;
      while (*v92 != *(v52 - 2))
      {
        v52 += 3;
        v53 -= 24;
        if (!v53) {
          goto LABEL_144;
        }
      }
      CFTypeRef v54 = *v52;
      if (*v52) {
        CFRetain(*v52);
      }
      uint64_t v55 = *(const void **)(v38 + 80);
      *(void *)(v38 + 80) = v54;
      if (v55) {
        CFRelease(v55);
      }
    }
LABEL_144:
    if (*(void *)(v38 + 80))
    {
LABEL_156:
      uint64_t v65 = *(unsigned int *)(v91 + 220);
      if (v65)
      {
        uint64_t v66 = 24 * v65;
        uint64_t v67 = (const void **)(*(void *)(v91 + 208) + 16);
        do
        {
          uint64_t v68 = *v67;
          void *v67 = 0;
          if (v68) {
            CFRelease(v68);
          }
          v67 += 3;
          v66 -= 24;
        }
        while (v66);
      }
      uint64_t v69 = *(WTF **)(v91 + 208);
      if (v69)
      {
        *(void *)(v91 + 208) = 0;
        *(_DWORD *)(v91 + 216) = 0;
        WTF::fastFree(v69, v41);
      }
      *(void *)(v91 + 208) = v111;
      uint64_t v70 = v112;
      unint64_t v111 = 0;
      uint64_t v112 = 0;
      *(void *)(v91 + 216) = v70;
      a5 = 2;
      goto LABEL_164;
    }
    if (*(unsigned char *)(v38 + 72))
    {
      WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle((WebCore::IOSurface *)v38, 2, (const void **)&v113);
      uint64_t v56 = v113;
      *(void *)&long long v113 = 0;
      uint64_t v57 = *(const void **)(v38 + 80);
      *(void *)(v38 + 80) = v56;
      if (v57)
      {
        CFRelease(v57);
        uint64_t v58 = (const void *)v113;
        *(void *)&long long v113 = 0;
        if (v58) {
          CFRelease(v58);
        }
      }
      if (*(unsigned char *)(v38 + 120))
      {
        *(void *)&long long v113 = *v92;
        DWORD2(v113) = *(_DWORD *)(v38 + 112);
        int v59 = *(const void **)(v38 + 80);
        uint64_t v114 = v59;
        if (v59) {
          CFRetain(v59);
        }
        if (HIDWORD(v112) == v112)
        {
          unint64_t v60 = WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, HIDWORD(v112) + 1, (unint64_t)&v113);
          unint64_t v61 = v111 + 24 * HIDWORD(v112);
          *(_OWORD *)unint64_t v61 = *(_OWORD *)v60;
          uint64_t v62 = *(void *)(v60 + 16);
          *(void *)(v60 + 16) = 0;
          *(void *)(v61 + 16) = v62;
          uint64_t v63 = v114;
          ++HIDWORD(v112);
          uint64_t v114 = 0;
          if (v63) {
            CFRelease(v63);
          }
        }
        else
        {
          unint64_t v64 = v111 + 24 * HIDWORD(v112);
          *(_OWORD *)unint64_t v64 = v113;
          *(void *)(v64 + 16) = v59;
          ++HIDWORD(v112);
        }
        goto LABEL_156;
      }
    }
LABEL_206:
    __break(1u);
  }
LABEL_179:
  uint64_t v85 = *a4;
  if (v9 && (v85 & 0x8000000000) != 0) {
    *(unsigned char *)(v9 + 248) = *((unsigned char *)a4 + 600);
  }
  if ((v85 & 0x800) != 0)
  {
    uint64_t v86 = a4[53];
    if (v86) {
      WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v113, v86);
    }
    else {
      long long v113 = 0uLL;
    }
    WebCore::PlatformCAFilters::setFiltersOnLayer();
    WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v87);
    uint64_t v85 = *a4;
  }
  if ((v85 & 0x20) != 0)
  {
    if (WebKit::RemoteLayerTreeHost::threadedAnimationResolutionEnabled(v8, (uint64_t)a2, this)) {
      WebKit::RemoteLayerTreeNode::setAcceleratedEffectsAndBaseValues(v9, (uint64_t)(a4 + 11), (WebCore::AcceleratedEffectValues *)(a4 + 13), (uint64_t)v8);
    }
    else {
      WebKit::PlatformCAAnimationRemote::updateLayerAnimations(v10, v8, (unsigned int *)a4 + 16, (void **)a4 + 10);
    }
  }
  uint64_t v88 = *a4;
  if ((*a4 & 0x20000000) != 0)
  {
    if (*((unsigned char *)a4 + 590)) {
      uint64_t v89 = 15;
    }
    else {
      uint64_t v89 = 0;
    }
    -[CALayer setEdgeAntialiasingMask:](v10, "setEdgeAntialiasingMask:", v89, v90);
    uint64_t v88 = *a4;
  }
  if ((v88 & 0x4000000000) != 0)
  {
    [(CALayer *)v10 setShouldRasterize:*((unsigned __int8 *)a4 + 599)];
    uint64_t v88 = *a4;
  }
  if ((v88 & 0x10000000) != 0)
  {
    if (v9)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        BOOL v10 = (CALayer *)[*(id *)(v9 + 48) playerLayer];
      }
    }
    if (objc_opt_respondsToSelector()) {
      [(CALayer *)v10 setVideoGravity:WebCore::convertMediaPlayerToAVLayerVideoGravity()];
    }
  }
}

void sub_19862B834(_Unwind_Exception *a1, void *a2)
{
  int v4 = *(const void **)(v2 - 184);
  *(void *)(v2 - 184) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 - 216), a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreePropertyApplier::updateMask(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned char *)(a2 + 1) & 0x20) != 0)
  {
    unsigned int v3 = *(void **)(result + 40);
    if (*(void *)(a2 + 504))
    {
      uint64_t result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (void *)(a2 + 504));
      if (!result) {
        return result;
      }
      int v4 = *(void **)(result + 40);
      uint64_t result = [v4 superlayer];
      if (result) {
        return result;
      }
    }
    else
    {
      int v4 = 0;
    }
    return [v3 setMask:v4];
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(uint64_t result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(result - 4);
  uint64_t v2 = result + 24 * v1;
  if (!*(_DWORD *)(result - 12)) {
    return result + 24 * v1;
  }
  if (v1)
  {
    uint64_t v3 = 24 * v1;
    while (*(_OWORD *)result == 0 || *(void *)(result + 8) == -1)
    {
      result += 24;
      v3 -= 24;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeNode::RemoteLayerTreeNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = (const void *)[*a5 layer];
  *(void *)(a1 + 40) = v7;
  if (v7) {
    CFRetain(v7);
  }
  id v8 = *a5;
  *a5 = 0;
  *(void *)(a1 + 48) = v8;
  WebCore::EventRegion::EventRegion((WebCore::EventRegion *)(a1 + 56));
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(unsigned char *)(a1 + 224) = 0;
  objc_msgSend(*(id *)(a1 + 40), "setValue:forKey:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithPointer:", a1), @"WKRemoteLayerTreeNode");
  return a1;
}

void sub_19862BA7C(_Unwind_Exception *a1, void *a2)
{
  int v4 = *(const void **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v4) {
    CFRelease(v4);
  }
  unsigned int v5 = *(const void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    unsigned int v5 = (const void **)(*(void *)a1 + 16);
    do
    {
      unsigned int v6 = *v5;
      *unsigned int v5 = 0;
      if (v6) {
        CFRelease(v6);
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::RemoteLayerTreeHost::layerContentsType(WebKit::RemoteLayerTreeHost *this)
{
  if (this)
  {
    uint64_t v1 = *((void *)this + 1);
    if (*(void *)(v1 + 168)) {
      return 0;
    }
    v3 = (uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 8)) != 0 ? v2 - 16 : 0;
    if (*(unsigned char *)(*(void *)(v3 + 32) + 1936) == 2)
    {
      return 0;
    }
    else if (PAL::canLoad_QuartzCore_CAIOSurfaceCreate(this))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::fromConnection(WebKit::AuxiliaryProcessProxy *this, const IPC::Connection *a2)
{
  {
    WebKit::connectionToProcessMap(void)::map = 0;
  }
  uint64_t v6 = *((void *)this + 3);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uint **)&WebKit::connectionToProcessMap(void)::map, &v6, (atomic_uint **)&v7);
  uint64_t v3 = (unsigned int *)v7;
  if (!v7) {
    return 0;
  }
  uint64_t v4 = *((void *)v7 + 1);
  uint64_t v7 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

atomic_uint **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(atomic_uint **result@<X0>, void *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    unsigned int v4 = *(v3 - 2);
    unint64_t v5 = *a2 + ~(*a2 << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    uint64_t v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v9 = *(void *)&v3[4 * v8];
    if (v9 == *a2)
    {
LABEL_6:
      uint64_t v3 = *(atomic_uint **)&v3[4 * v8 + 2];
      if (v3) {
        atomic_fetch_add(v3, 1u);
      }
    }
    else
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void *)&v3[4 * v8];
        ++v10;
        if (v9 == *a2) {
          goto LABEL_6;
        }
      }
      uint64_t v3 = 0;
    }
  }
  *a3 = v3;
  return result;
}

void sub_19862BEC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebCore::IOSurface *WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle@<X0>(WebCore::IOSurface *result@<X0>, int a2@<W1>, const void **a3@<X8>)
{
  *a3 = 0;
  int v4 = *((_DWORD *)result + 16);
  if (!v4)
  {
    WebCore::ShareableBitmap::create();
    uint64_t result = v10;
    if (v10)
    {
      WebCore::ShareableBitmap::makeCGImageCopy((uint64_t *)&v9, v10);
      uint64_t result = v10;
      *a3 = v9;
      int v10 = 0;
      if (result) {
        return (WebCore::IOSurface *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v5);
      }
    }
    return result;
  }
  if (v4 != 1)
  {
    uint64_t result = (WebCore::IOSurface *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_20;
  }
  switch(a2)
  {
    case 2:
      WebCore::IOSurface::createFromSendRight();
      uint64_t result = v10;
      if (!v10)
      {
        *a3 = 0;
        return result;
      }
      WebCore::IOSurface::asCAIOSurfaceLayerContents((uint64_t *)&v9, v10);
      uint64_t result = v10;
      *a3 = v9;
LABEL_17:
      int v10 = 0;
      if (!result) {
        return result;
      }
LABEL_20:
      WebCore::IOSurface::~IOSurface(result);
      return (WebCore::IOSurface *)WTF::fastFree(v7, v8);
    case 1:
      WTF::MachSendRight::leakSendRight(result);
      uint64_t result = (WebCore::IOSurface *)CAMachPortCreate();
      *a3 = result;
      return result;
    case 0:
      WebCore::IOSurface::createFromSendRight();
      if (v10) {
        unint64_t v6 = (const void *)*((void *)v10 + 6);
      }
      else {
        unint64_t v6 = 0;
      }
      WTF::RetainPtr<objc_object *>::operator=(a3, v6);
      uint64_t result = v10;
      goto LABEL_17;
  }
  return result;
}

void sub_19862BFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, WebCore::IOSurface *a12)
{
  if (a12)
  {
    WebCore::IOSurface::~IOSurface(a12);
    WTF::fastFree(v13, v14);
  }
  void *v12 = 0;
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = v4 + 24 * v9;
      if (*(void *)(v11 + 8) != -1)
      {
        if (*(_OWORD *)v11 == 0)
        {
          std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)(v4 + 24 * v9 + 16), 0);
        }
        else
        {
          uint64_t v12 = *a1;
          if (*a1) {
            unsigned int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            unsigned int v13 = 0;
          }
          unsigned int v21 = -1640531527;
          __int16 v22 = 0;
          char v23 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v21, (void *)(v4 + 24 * v9));
          int v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
          int v15 = 0;
          do
          {
            unsigned int v16 = v14 & v13;
            long long v17 = (_OWORD *)(v12 + 24 * (v14 & v13));
            int v14 = ++v15 + (v14 & v13);
          }
          while (*v17 != 0);
          uint64_t v18 = v12 + 24 * v16;
          std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)(v18 + 16), 0);
          *long long v17 = *(_OWORD *)v11;
          uint64_t v19 = v4 + 24 * v9;
          uint64_t v20 = *(void *)(v19 + 16);
          v19 += 16;
          *(void *)uint64_t v19 = 0;
          *(void *)(v18 + 16) = v20;
          std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)v19, 0);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WebKit::RemoteLayerTreeNode *std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100](WebKit::RemoteLayerTreeNode **a1, WebKit::RemoteLayerTreeNode *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(result);
    return (WebKit::RemoteLayerTreeNode *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v3);
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19862C408);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      uint64_t v6 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 16) = v6;
      unint64_t v7 = *(const void **)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      if (v7) {
        CFRelease(v7);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
}

IPC::Encoder *WebKit::RemoteLayerTreeDrawingAreaProxy::deviceScaleFactorDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = *(void *)(*((void *)this + 5) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 764;
  if (!*(unsigned char *)(v3 + 768)) {
    uint64_t v4 = 760;
  }
  float v5 = *(float *)(v3 + v4);
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 31;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v7, v5);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_19862C59C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::DrawingAreaProxy::messageSenderDestinationID(WebKit::DrawingAreaProxy *this)
{
  return *((void *)this + 1);
}

uint64_t non-virtual thunk to'WebKit::DrawingAreaProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  return WebKit::DrawingAreaProxy::sendMessage(a1 - 16, a2, a3);
}

uint64_t WebKit::DrawingAreaProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  LOBYTE(v6) = 0;
  char v7 = 0;
  uint64_t v4 = WebKit::AuxiliaryProcessProxy::sendMessage(v3, a2, a3, (uint64_t)&v6, 1);
  if (v7 && v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

uint64_t WebKit::WebPageProxy::setFullscreenClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    void *v3 = &unk_1EE9D9BB0;
  }
  uint64_t result = *(void *)(a1 + 416);
  *(void *)(a1 + 416) = v3;
  if (result)
  {
    float v5 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v5();
  }
  return result;
}

uint64_t WebCore::GraphicsLayerClient::customContentsScale(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::needsPixelAligment(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::InspectorClient::allowRemoteInspectionToPageDirectly(WebCore::InspectorClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldPaintEntireContents(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::contentsScale(WebCore::TileController **this)
{
  return WebCore::TileController::contentsScale(this[105]);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setOpaque(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return MEMORY[0x1F416DE50](*((void *)this + 105));
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setAcceleratesDrawing(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return MEMORY[0x1F416DE70](*((void *)this + 105));
}

uint64_t WebKit::WebProcess::webLoaderStrategy(WebKit::WebProcess *this)
{
  return *((void *)this + 40);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  return WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1}::operator()((void *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::updatePrefersNonBlinkingCursor(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::WebPage::updatePrefersNonBlinkingCursor(void)::$_0::operator()<WebCore::Document>(*(WebKit::WebProcess **)(a2 + 3096));
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0::operator()(a1 + 8);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(a1 + 8);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  return WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1::operator()(*(void **)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0::operator()((WTF::FileSystemImpl *)(a1 + 8));
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()((uint64_t *)(a1 + 8));
}

WebKit::WebPage **WTF::Detail::CallableWrapper<WebKit::WebProcess::ensureNetworkProcessConnection(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebProcess::ensureNetworkProcessConnection(void)::$_0::operator()(*(void *)(a1 + 8));
}

void WTF::Detail::CallableWrapper<IPC::StreamConnectionWorkQueue::startProcessingThread(void)::$_0,void>::call(uint64_t a1)
{
}

uint64_t WebKit::WebPageDebuggable::name@<X0>(atomic_uchar *volatile *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9E3970;
  v4[1] = this;
  void v4[2] = this;
  v4[3] = a2;
  uint64_t v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D70D0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deprecationReportingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::secureContextChecksEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::trackConfigurationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::compositingBordersVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAuthenticationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visualTranslationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::userActivationAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::speechRecognitionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::spatialNavigationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::notificationEventEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::invokerAttributesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::downloadAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::compressionStreamEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectShowPickerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::removeBackgroundEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::popoverAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::defaultTextEncodingNameKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::broadcastChannelEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::viewTransitionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textInteractionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showModalDialogEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domAudioSessionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::directoryUploadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::developerExtrasEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dataListElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::windowFocusRestrictedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visualViewportEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAutosizingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAreasAreResizableKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAnimationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::systemLayoutDirectionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::storageBlockingPolicyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::remotePlaybackEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::permissionsAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::peerConnectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::customStateSetEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssColorLayersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usesEncodingDetectorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usesBackForwardCacheKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::systemPreviewEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::switchControlEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::siteIsolationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenCaptureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sKAttributionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pictographFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passwordEchoDurationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::notificationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::navigationAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaRecorderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loadDeferringEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkSanitizerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeDateEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::genericCueAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fetchPriorityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::editableLinkBehaviorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::defaultFixedFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssMotionPathEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::caretBrowsingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasFiltersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::auxclickEventEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::appHighlightsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::altitudeAngleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webTransportEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::trustedTypesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sharedWorkerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sansSerifFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passwordEchoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::modelElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::minimumZoomFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSessionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaDevicesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::localStorageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPrefetchEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::layoutFallbackWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::itpDebugModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::imageCaptureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::highlightAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enterKeyHintEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::embedElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssLineClampEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssLightDarkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssDPropertyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasLayersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::azimuthAngleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowWebGLInWorkersKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::accessHandleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webSecurityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webLocksAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::standardFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaStreamEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSourceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreloadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::declarativeWebPushKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::colorFilterEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::clientBadgeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::accentColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::vp9DecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::unifiedPDFEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::storageAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::observableEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::observableEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::observableEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fullScreenEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fantasyFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dataDetectorTypesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cursiveFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssNestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::coreMathMLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webSocketEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::reportingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::reportingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pdfPluginEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::maxParseDurationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::maxParseDurationKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::maxParseDurationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::httpEquivEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::beaconAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webShareEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webShareEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAudioEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serifFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::minimumFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::gamepadsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fixedFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domPasteAllowedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::defaultFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cacheAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::applePayEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::applePayEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::appBadgeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shapeDetectionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shapeDetectionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pushAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::masonryEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::masonryEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreconnectKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreconnectKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGPUEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGiantTilesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGiantTilesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mathMLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceHeightKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceHeightKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceHeightKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceWidthKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::standaloneKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standaloneKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::standaloneKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::ftpEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::ftpEnabledKey(void)::key;
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>((uint64_t)&v68, a1);
  unsigned __int16 v4 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v5 = IPC::Decoder::decode<BOOL>(a1);
  uint64_t v6 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v66);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v64);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v62);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v7, (uint64_t)&v59);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v8, (uint64_t)&v56);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v53);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)&v50);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v48);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v45);
  if (*(void *)a1)
  {
    if (!v70) {
      goto LABEL_33;
    }
    long long v12 = v68;
    long long v13 = v69;
    long long v68 = 0u;
    long long v69 = 0u;
    v27[0] = v12;
    v27[1] = v13;
    if (v4 <= 0xFFu) {
      goto LABEL_33;
    }
    char v28 = v4;
    if (v5 <= 0xFFu) {
      goto LABEL_33;
    }
    char v29 = v5;
    if ((v6 & 0xFF00000000) == 0) {
      goto LABEL_33;
    }
    int v30 = v6;
    if (!v67) {
      goto LABEL_33;
    }
    int v14 = v66;
    uint64_t v66 = 0;
    int v31 = v14;
    if (!v65) {
      goto LABEL_33;
    }
    int v15 = v64;
    unint64_t v64 = 0;
    uint64_t v32 = v15;
    if (!v63) {
      goto LABEL_33;
    }
    uint64_t v16 = v62;
    uint64_t v62 = 0;
    uint64_t v33 = v16;
    if (!v61) {
      goto LABEL_33;
    }
    uint64_t v34 = v59;
    uint64_t v17 = v60;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v35 = v17;
    if (!v58) {
      goto LABEL_33;
    }
    uint64_t v36 = v56;
    uint64_t v18 = v57;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v37 = v18;
    if (!v55) {
      goto LABEL_33;
    }
    LOBYTE(v38) = 0;
    char v39 = 0;
    if (v54) {
      goto LABEL_34;
    }
    while (1)
    {
      if (v52)
      {
        uint64_t v40 = v50;
        uint64_t v19 = v51;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v41 = v19;
        if (v49)
        {
          uint64_t v20 = v48;
          uint64_t v48 = 0;
          uint64_t v42 = v20;
          if (v47) {
            break;
          }
        }
      }
LABEL_33:
      __break(1u);
LABEL_34:
      uint64_t v26 = v53;
      uint64_t v53 = 0;
      uint64_t v38 = v26;
      char v39 = 1;
    }
    uint64_t v43 = v45;
    uint64_t v21 = v46;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v44 = v21;
    WebKit::GPUProcessCreationParameters::GPUProcessCreationParameters((uint64_t)a2, (uint64_t *)v27);
    a2[152] = 1;
    WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)v27, v22);
  }
  else
  {
    *a2 = 0;
    a2[152] = 0;
  }
  if (v47) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v11);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48);
  if (v52) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v23);
  }
  if (v55 && v54) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v53);
  }
  if (v58) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v23);
  }
  if (v61) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v23);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62);
  if (v65) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v64);
  }
  if (v67) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v66);
  }
  return std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v68, v24);
}

void sub_1986352A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,int a39,const char **a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)&a9, a2);
  if (a30) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, v49);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32);
  if (a38) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a36, v50);
  }
  if ((_BYTE)a45 && (_BYTE)a41) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a40);
  }
  if (*(unsigned char *)(v47 - 176)) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v47 - 192, v50);
  }
  if (*(unsigned char *)(v47 - 152)) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v47 - 168, v50);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v47 - 144);
  if (*(unsigned char *)(v47 - 120)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v47 - 128));
  }
  if (*(unsigned char *)(v47 - 104)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v47 - 112));
  }
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v47 - 96, v51);
  _Unwind_Resume(a1);
}

void sub_198635378()
{
}

void sub_198635380()
{
}

void sub_198635388()
{
}

void sub_198635390()
{
}

void sub_198635398()
{
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986353E8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v6, v5);
        uint64_t v19 = *(void *)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_33;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v18 = v5;
    uint64_t v19 = 0;
LABEL_33:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result)
    {
      if (v18) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v19);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v22);
      if (!v23)
      {
LABEL_29:
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
        return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
      }
      int v16 = HIDWORD(v25);
      if (HIDWORD(v25) == v25)
      {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SandboxExtensionHandle>((uint64_t)&v24, (unint64_t)&v22);
        if (!v23) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v17 = v22;
        __int16 v22 = 0;
        *(void *)(v24 + 8 * HIDWORD(v25)) = v17;
        HIDWORD(v25) = v16 + 1;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
LABEL_24:
      if (!--v10)
      {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v24, HIDWORD(v25));
        *(void *)a3 = v24;
        uint64_t v21 = v25;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        *(void *)(a3 + 8) = v21;
        goto LABEL_11;
      }
    }
  }
  if (v10)
  {
    LODWORD(v25) = v10;
    uint64_t v24 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v22);
      if (!v23) {
        goto LABEL_29;
      }
      int v14 = HIDWORD(v25);
      if (HIDWORD(v25) == v25)
      {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SandboxExtensionHandle>((uint64_t)&v24, (unint64_t)&v22);
        if (!v23) {
          goto LABEL_19;
        }
      }
      else
      {
        int v15 = v22;
        __int16 v22 = 0;
        *(void *)(v24 + 8 * HIDWORD(v25)) = v15;
        HIDWORD(v25) = v14 + 1;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
LABEL_19:
      if (!--v10)
      {
        uint64_t v11 = v24;
        uint64_t v12 = v25;
        goto LABEL_10;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
LABEL_10:
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
LABEL_11:
  *(unsigned char *)(a3 + 16) = 1;
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
}

void sub_19863565C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&a9);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v34);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v32);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v30);
  unint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = *((void *)a2 + 2) - *(void *)a2;
  if (v4 <= v6) {
    goto LABEL_49;
  }
  unint64_t v7 = (unsigned __int8 *)v5 + v6;
  *((void *)a2 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v21 = v4;
    __int16 v22 = 0;
    goto LABEL_50;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_51;
  }
  if (v8)
  {
    IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, v26);
    if (!LOBYTE(v26[1])) {
      goto LABEL_52;
    }
    unint64_t v18 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
    IPC::Encoder *v18 = 0;
    uint64_t v19 = v26[0];
    v26[0] = 0;
    IPC::Encoder *v18 = (WTF::StringImpl **)v19;
    uint64_t v36 = 0;
    char v28 = v18;
    char v29 = 1;
    std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v36, v20);
    if (LOBYTE(v26[1]) && v26[0]) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v26[0], v5);
    }
    if (*(void *)a2)
    {
      unsigned int v8 = 0;
      goto LABEL_6;
    }
    int v16 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    char v28 = 0;
    char v29 = 1;
LABEL_6:
    while (1)
    {
      if (v35)
      {
        unint64_t v9 = v34;
        uint64_t v34 = 0;
        if (v33)
        {
          unint64_t v10 = v32;
          uint64_t v32 = 0;
          if (v31)
          {
            uint64_t v11 = v30;
            int v30 = 0;
            if (!v8) {
              break;
            }
          }
        }
      }
      __break(1u);
LABEL_49:
      unint64_t v21 = 0;
      __int16 v22 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v23 = *((void *)a2 + 3);
      if (v23)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
          __int16 v22 = *(WTF::StringImpl **)a2;
          unint64_t v21 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v21 = 0;
          __int16 v22 = 0;
        }
      }
LABEL_50:
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v24 = *((void *)a2 + 3);
      if (v24)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v24 + 16))(v24, v22, v21);
          unint64_t v5 = *(WTF::StringImpl **)a2;
          unint64_t v4 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v4 = 0;
          unint64_t v5 = 0;
        }
      }
LABEL_51:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v25 = *((void *)a2 + 3);
      if (v25 && v4) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v25 + 16))(v25, v5);
      }
LABEL_52:
      LOBYTE(v28) = 0;
      char v29 = 0;
      uint64_t result = (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
      if (!*(void *)a2)
      {
        int v16 = 0;
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 32) = 0;
        goto LABEL_21;
      }
      unsigned int v8 = 1;
    }
    uint64_t v12 = v28;
    char v28 = 0;
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(_OWORD *)uint64_t v26 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = 1;
    std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)&v27[1], v5);
    long long v13 = v27[0];
    v27[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v5);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    int v14 = v26[1];
    v26[1] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v5);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    int v15 = v26[0];
    v26[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v5);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    int v16 = 1;
  }
  uint64_t result = (WTF::StringImpl *)std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v28, v5);
LABEL_21:
  if (v31)
  {
    uint64_t result = v30;
    int v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v33)
  {
    uint64_t result = v32;
    uint64_t v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v35)
  {
    uint64_t result = v34;
    uint64_t v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v16) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198635A34(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void sub_198635A8C()
{
}

uint64_t ___ZN6WebKit34StorageAccessPromptQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 32);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  if (!a3)
  {
    obuint64_t j = (id)[a2 quirks];
    unint64_t v5 = (uint64_t (**)(void))MEMORY[0x1E4FB63E8];
    if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB63E8])() instancesRespondToSelector:sel_quirkDomains])uint64_t v6 = objc_msgSend((id)(*v5)(), "instancesRespondToSelector:", sel_triggerPages); {
    else
    }
      uint64_t v6 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v7 = [obj countByEnumeratingWithState:&v60 objects:v70 count:16];
    if (!v7)
    {
LABEL_64:
      WebKit::StorageAccessPromptQuirkController::setCachedQuirks(v3, (WTF::StringImpl *)&v64);
      goto LABEL_65;
    }
    uint64_t v8 = *(void *)v61;
LABEL_9:
    uint64_t v9 = 0;
    uint64_t v50 = v7;
    while (1)
    {
      if (*(void *)v61 != v8) {
        objc_enumerationMutation(obj);
      }
      unint64_t v10 = *(void **)(*((void *)&v60 + 1) + 8 * v9);
      if (v6)
      {
        MEMORY[0x19972EAD0](&v55, [*(id *)(*((void *)&v60 + 1) + 8 * v9) name]);
        WebKit::quirkDomainsDictToMap(&v54, (void *)[v10 quirkDomains]);
        uint64_t v11 = (void *)[v10 triggerPages];
        uint64_t v12 = v6;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        long long v68 = 0u;
        memset(v69, 0, sizeof(v69));
        uint64_t v14 = [v11 countByEnumeratingWithState:&v68 objects:buf count:16];
        if (v14)
        {
          uint64_t v15 = **(void **)&v69[0];
          do
          {
            uint64_t v16 = 0;
            do
            {
              if (**(void **)&v69[0] != v15) {
                objc_enumerationMutation(v11);
              }
              uint64_t v17 = *(void **)(*((void *)&v68 + 1) + 8 * v16);
              if (([v17 isEqualToString:@"*"] & 1) == 0)
              {
                MEMORY[0x19972EAD0](&v66, v17);
                MEMORY[0x19972E890](v67, &v66, 0);
                if (HIDWORD(v53) == v53)
                {
                  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v52, (unint64_t)v67);
                }
                else
                {
                  WTF::URL::URL(v52 + 40 * HIDWORD(v53), (uint64_t *)v67);
                  ++HIDWORD(v53);
                }
                uint64_t v19 = v67[0];
                v67[0] = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2) {
                    WTF::StringImpl::destroy(v19, v18);
                  }
                  else {
                    *(_DWORD *)v19 -= 2;
                  }
                }
                uint64_t v20 = v66;
                uint64_t v66 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2) {
                    WTF::StringImpl::destroy(v20, v18);
                  }
                  else {
                    *(_DWORD *)v20 -= 2;
                  }
                }
              }
              ++v16;
            }
            while (v14 != v16);
            uint64_t v21 = [v11 countByEnumeratingWithState:&v68 objects:buf count:16];
            uint64_t v14 = v21;
          }
          while (v21);
        }
        uint64_t v23 = v54;
        __int16 v22 = v55;
        uint64_t v54 = 0;
        char v55 = 0;
        uint64_t v56 = v22;
        uint64_t v57 = v23;
        uint64_t v58 = v52;
        uint64_t v24 = v53;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v59 = v24;
        if (HIDWORD(v65) == v65)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v64, (unint64_t)&v56);
        }
        else
        {
          uint64_t v25 = v64 + 32 * HIDWORD(v65);
          uint64_t v56 = 0;
          *(void *)uint64_t v25 = v22;
          *(void *)(v25 + 8) = 0;
          uint64_t v26 = v57;
          uint64_t v57 = 0;
          *(void *)(v25 + 16) = 0;
          *(void *)(v25 + 24) = 0;
          *(void *)(v25 + 8) = v26;
          uint64_t v27 = v58;
          uint64_t v58 = 0;
          *(void *)(v25 + 16) = v27;
          LODWORD(v27) = v59;
          LODWORD(v59) = 0;
          *(_DWORD *)(v25 + 24) = v27;
          LODWORD(v27) = HIDWORD(v59);
          HIDWORD(v59) = 0;
          *(_DWORD *)(v25 + 28) = v27;
          ++HIDWORD(v65);
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v13);
        uint64_t v6 = v12;
        if (v57) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v57, v28);
        }
        char v29 = v56;
        uint64_t v56 = 0;
        uint64_t v7 = v50;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v28);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, (WTF::StringImpl *)v28);
        if (v54) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v54, v38);
        }
        char v39 = v55;
        char v55 = 0;
        if (!v39) {
          goto LABEL_59;
        }
      }
      else
      {
        MEMORY[0x19972EAD0](v67, [*(id *)(*((void *)&v60 + 1) + 8 * v9) name]);
        WebKit::quirkDomainsDictToMap((uint64_t *)&v56, (void *)[v10 domainPairings]);
        char v31 = v67[0];
        v67[0] = 0;
        uint64_t v32 = v56;
        uint64_t v56 = 0;
        *(void *)buf = v31;
        double v72 = v32;
        long long v68 = 0uLL;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        if (HIDWORD(v65) == v65)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v64, (unint64_t)buf);
        }
        else
        {
          uint64_t v33 = v64 + 32 * HIDWORD(v65);
          *(void *)buf = 0;
          *(void *)uint64_t v33 = v31;
          *(void *)(v33 + 8) = 0;
          uint64_t v34 = (uint64_t)v72;
          double v72 = 0;
          *(void *)(v33 + 16) = 0;
          *(void *)(v33 + 24) = 0;
          *(void *)(v33 + 8) = v34;
          uint64_t v35 = v73;
          uint64_t v73 = 0;
          *(void *)(v33 + 16) = v35;
          LODWORD(v35) = v74;
          LODWORD(v74) = 0;
          *(_DWORD *)(v33 + 24) = v35;
          LODWORD(v35) = HIDWORD(v74);
          HIDWORD(v74) = 0;
          *(_DWORD *)(v33 + 28) = v35;
          ++HIDWORD(v65);
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v30);
        if (v72) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v72, v36);
        }
        uint64_t v37 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v36);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, (WTF::StringImpl *)v36);
        if (v56) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v56, v38);
        }
        char v39 = v67[0];
        v67[0] = 0;
        if (!v39) {
          goto LABEL_59;
        }
      }
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v38);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
LABEL_59:
      if (++v9 == v7)
      {
        uint64_t v40 = [obj countByEnumeratingWithState:&v60 objects:v70 count:16];
        uint64_t v7 = v40;
        if (!v40) {
          goto LABEL_64;
        }
        goto LABEL_9;
      }
    }
  }
  unint64_t v4 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Failed to request storage access quirks from WebPrivacy.", buf, 2u);
  }
LABEL_65:
  *(void *)&long long v68 = v69;
  *((void *)&v68 + 1) = 1;
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer((uint64_t)buf, (uint64_t)&qword_1EB358F98);
  if (dword_1EB358FA4)
  {
    uint64_t v41 = (uint64_t *)qword_1EB358F98;
    uint64_t v42 = 8 * dword_1EB358FA4;
    do
    {
      uint64_t v43 = *v41;
      *uint64_t v41 = 0;
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
      ++v41;
      v42 -= 8;
    }
    while (v42);
  }
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt((uint64_t)&qword_1EB358F98, &v68);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v44);
  if (HIDWORD(v72))
  {
    uint64_t v46 = *(uint64_t **)buf;
    uint64_t v47 = 8 * HIDWORD(v72);
    do
    {
      WTF::CompletionHandler<void ()(void)>::operator()(v46++);
      v47 -= 8;
    }
    while (v47);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v45);
  return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v48);
}

void sub_1986360B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)unint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v7 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters(WebKit::NetworkProcessCreationParameters *this, WTF::StringImpl *a2)
{
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  unint64_t v4 = (WTF::StringImpl **)*((void *)this + 23);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 168, v3);
  WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, v6);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v9);
  uint64_t v11 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v10);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)this + 3, v13);
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
}

uint64_t WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(void *)a1 + 16;
    uint64_t v7 = 32 * v3;
    do
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      uint64_t v8 = *(void *)(v6 - 8);
      if (v8) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v8, a2);
      }
      uint64_t v9 = *(WTF::StringImpl **)(v6 - 16);
      *(void *)(v6 - 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(WTF **)a1;
    uint64_t v8 = 704 * v3;
    do
    {
      uint64_t v9 = (const char ***)((char *)v7 + v6);
      if (*((unsigned char *)v7 + v6 + 696)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v9 + 86);
      }
      if (*((unsigned char *)v9 + 680)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)((char *)v7 + v6 + 672));
      }
      unint64_t v10 = (const char ***)((char *)v7 + v6);
      if (*((unsigned char *)v7 + v6 + 664)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v10 + 82);
      }
      if (*((unsigned char *)v10 + 648)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)((char *)v7 + v6 + 640));
      }
      uint64_t v11 = (char *)v7 + v6;
      WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WTF *)((char *)v7 + v6 + 32), a2);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)((char *)v7 + v6 + 16));
      uint64_t v12 = *(WTF **)((char *)v7 + v6);
      if (v12)
      {
        *(void *)uint64_t v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree(v12, a2);
      }
      v6 += 704;
    }
    while (v8 != v6);
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk(WebCore::OrganizationStorageAccessPromptQuirk *this, WTF::StringImpl *a2)
{
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
  }
  uint64_t v5 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WTF::StringImpl ***)a1;
    uint64_t v7 = 40 * v3;
    do
    {
      uint64_t v8 = *v6;
      *uint64_t v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters(const char ***this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 696)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 86);
  }
  if (*((unsigned char *)this + 680)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 84);
  }
  if (*((unsigned char *)this + 664)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 82);
  }
  if (*((unsigned char *)this + 648)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 80);
  }
  WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)(this + 4), a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 2);
  uint64_t v4 = *this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((WTF *)v4, v3);
  }
}

void WebKit::WebPageCreationParameters::~WebPageCreationParameters(const char ***this)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 184);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 182), v2);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 180), v3);
  if (*((unsigned char *)this + 1392))
  {
    if (*((unsigned char *)this + 1384)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(this + 158), v4);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 156), v4);
    char v29 = (WTF::StringImpl *)this[155];
    this[155] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v4);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    char v31 = (WTF::StringImpl *)this[148];
    this[148] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v4);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  uint64_t v5 = (WTF::StringImpl *)this[144];
  this[144] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*((unsigned char *)this + 1136))
  {
    int v30 = (WTF::StringImpl **)this[139];
    if (v30) {
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v30, (WTF::StringImpl *)*((unsigned int *)this + 280));
    }
  }
  uint64_t v6 = (WTF::StringImpl **)this[137];
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 135), v4);
  uint64_t v8 = (WTF::StringImpl *)this[134];
  this[134] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (*((unsigned char *)this + 1048))
  {
    unint64_t v9 = (unint64_t)this[130];
    if ((v9 & 0x8000000000000) != 0)
    {
      uint64_t v32 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v7);
      }
    }
  }
  if (*((unsigned char *)this + 1032)) {
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 127), v7);
  }
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 123), v7);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 121), v10);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 119), v11);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)this + 234, v12);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 115), v13);
  if (*((unsigned char *)this + 896)) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)(this + 78), v14);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 76), v14);
  uint64_t v16 = (WTF::StringImpl **)this[75];
  if (v16) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v15);
  }
  uint64_t v17 = (WTF::StringImpl *)this[72];
  this[72] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 69), v15);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 67), v18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 65), v19);
  unint64_t v21 = (unint64_t)this[63];
  if ((v21 & 0x8000000000000) != 0)
  {
    uint64_t v33 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v20);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 44), v20);
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 29), v22);
  uint64_t v24 = (WTF::StringImpl *)this[27];
  this[27] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  unint64_t v25 = (unint64_t)this[14];
  if ((v25 & 0x8000000000000) != 0)
  {
    uint64_t v34 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v23);
    }
  }
  uint64_t v26 = (WTF::StringImpl *)this[11];
  this[11] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v23);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = (WTF *)this[5];
  if (v27) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v27, (WTF::StringImpl *)*((unsigned int *)this + 12));
  }
  char v28 = (WTF *)this[2];
  if (v28) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v28, (WTF::StringImpl *)*((unsigned int *)this + 6));
  }
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WebKit::WebExtensionContextParameters **)a1;
    uint64_t v7 = 152 * v3;
    do
    {
      WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(v6, a2);
      uint64_t v6 = (WebKit::WebExtensionContextParameters *)(v8 + 152);
      v7 -= 152;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void API::PageConfiguration::Data::~Data(API::PageConfiguration::Data *this, WTF::StringImpl *a2)
{
  unsigned int v3 = (WTF::StringImpl *)*((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 440);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (*((unsigned char *)this + 400))
  {
    int v30 = (WTF::StringImpl **)*((void *)this + 47);
    if (v30) {
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v30, (WTF::StringImpl *)*((unsigned int *)this + 96));
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl **)*((void *)this + 43);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v4);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 328, v4);
  uint64_t v10 = *((void *)this + 40);
  if (v10) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
  }
  uint64_t v11 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (*((unsigned char *)this + 288)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 272, v9);
  }
  uint64_t v12 = (const void *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v12) {
    CFRelease(v12);
  }
  long long v13 = (WTF::StringImpl *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (const void *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (unsigned int *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v9);
  }
  uint64_t v16 = (unsigned int *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v9);
  }
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)this + 16, v9);
  unint64_t v18 = (unsigned int *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  uint64_t v19 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  uint64_t v20 = (unsigned int *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v17);
  }
  uint64_t v21 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v21) {
    CFRelease(*(CFTypeRef *)(v21 + 8));
  }
  __int16 v22 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  uint64_t v24 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  uint64_t v25 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v25) {
    CFRelease(*(CFTypeRef *)(v25 + 8));
  }
  uint64_t v26 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  uint64_t v27 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v27) {
    CFRelease(*(CFTypeRef *)(v27 + 8));
  }
  uint64_t v28 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v28) {
    CFRelease(*(CFTypeRef *)(v28 + 8));
  }
  char v29 = *(WebKit::BrowsingContextGroup **)this;
  *(void *)this = 0;
  if (v29) {
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v29, v17);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, WTF::StringImpl *a2)
{
  if (*((unsigned char *)a1 + 40))
  {
    uint64_t v3 = (WTF::StringImpl *)a1[2];
    a1[2] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = (WTF::StringImpl *)a1[1];
    a1[1] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *a1;
    *a1 = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
    }
  }
  return a1;
}

WebKit::BrowsingContextGroup *WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(WebKit::BrowsingContextGroup *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::BrowsingContextGroup::~BrowsingContextGroup(result, a2);
    return (WebKit::BrowsingContextGroup *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 120 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(_DWORD *a1, void *a2)
{
  unsigned int v3 = a1[3];
  if (v3)
  {
    uint64_t v6 = 104 * v3;
    uint64_t v7 = (WebCore::UserScript *)(*(void *)a1 + 16);
    do
    {
      WebCore::UserScript::~UserScript(v7, a2);
      uint64_t v7 = (WebCore::UserScript *)(v8 + 104);
      v6 -= 104;
    }
    while (v6);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WTF **)a1;
    uint64_t v7 = 120 * v3;
    do
    {
      uint64_t v8 = (WTF::StringImpl *)*((void *)v6 + 10);
      *((void *)v6 + 10) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t v9 = (unsigned int *)*((void *)v6 + 1);
      *((void *)v6 + 1) = 0;
      if (v9) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
      }
      uint64_t v10 = *(WTF::StringImpl **)v6;
      *(void *)uint64_t v6 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v6 = (WTF *)((char *)v6 + 120);
      v7 -= 120;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 312 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (char *)this + 8;
    do
    {
      uint64_t v5 = *((unsigned int *)v4 + 2);
      if (v5 != -1) {
        ((void (*)(char *, char *))off_1EE9B4DF0[v5])(&v8, v4);
      }
      *((_DWORD *)v4 + 2) = -1;
      uint64_t v6 = (WTF::StringImpl *)*((void *)v4 - 1);
      *((void *)v4 - 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>((uint64_t)&v93, a1);
  unsigned __int16 v4 = IPC::Decoder::decode<WebKit::CacheModel>(a1);
  unsigned __int16 v5 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v90);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v88);
  IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(a1, (uint64_t)&v86);
  unsigned __int16 v7 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v8, (uint64_t)&v83);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)&v80);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v77);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v11, (uint64_t)&v74);
  unsigned __int16 v12 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v13 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v14 = IPC::Decoder::decode<BOOL>(a1);
  unsigned __int16 v15 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v71, a1);
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v68, (uint64_t *)a1);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a1, &v66);
  uint64_t v17 = (WTF::StringImpl **)IPC::Decoder::decode<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v16, (uint64_t)&v63);
  if (*(void *)a1)
  {
    if (!v95) {
      goto LABEL_44;
    }
    long long v19 = v93;
    long long v20 = v94;
    long long v93 = 0u;
    long long v94 = 0u;
    v36[0] = v19;
    v36[1] = v20;
    if (v4 <= 0xFFu) {
      goto LABEL_44;
    }
    char v37 = v4;
    if (v5 <= 0xFFu) {
      goto LABEL_44;
    }
    char v38 = v5;
    if (!v92) {
      goto LABEL_44;
    }
    uint64_t v39 = v90;
    uint64_t v21 = v91;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v40 = v21;
    if (!v89) {
      goto LABEL_44;
    }
    uint64_t v22 = v88;
    uint64_t v88 = 0;
    uint64_t v41 = v22;
    if (!v87) {
      goto LABEL_44;
    }
    uint64_t v23 = v86;
    uint64_t v86 = 0;
    uint64_t v42 = v23;
    if (v7 <= 0xFFu) {
      goto LABEL_44;
    }
    char v43 = v7;
    if (!v85) {
      goto LABEL_44;
    }
    uint64_t v44 = v83;
    uint64_t v24 = v84;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v45 = v24;
    if (!v82) {
      goto LABEL_44;
    }
    uint64_t v46 = v80;
    uint64_t v25 = v81;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v47 = v25;
    if (!v79) {
      goto LABEL_44;
    }
    uint64_t v48 = v77;
    uint64_t v26 = v78;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v49 = v26;
    if (!v76) {
      goto LABEL_44;
    }
    uint64_t v50 = v74;
    uint64_t v27 = v75;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v51 = v27;
    if (v12 <= 0xFFu) {
      goto LABEL_44;
    }
    char v52 = v12;
    if (v13 <= 0xFFu) {
      goto LABEL_44;
    }
    char v53 = v13;
    if (v14 <= 0xFFu) {
      goto LABEL_44;
    }
    char v54 = v14;
    if (v15 <= 0xFFu) {
      goto LABEL_44;
    }
    char v55 = v15;
    if (!v73) {
      goto LABEL_44;
    }
    uint64_t v56 = v71;
    uint64_t v28 = v72;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v57 = v28;
    if (!v70) {
      goto LABEL_44;
    }
    uint64_t v58 = v68;
    uint64_t v29 = v69;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v59 = v29;
    if (!v67 || (int v30 = v66, v66 = 0, v60 = v30, !v65))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v18);
      goto LABEL_26;
    }
    uint64_t v61 = v63;
    uint64_t v31 = v64;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v62 = v31;
    WebKit::NetworkProcessCreationParameters::NetworkProcessCreationParameters((uint64_t)a2, (uint64_t *)v36);
    a2[208] = 1;
    WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v36, v32);
  }
  else
  {
    *a2 = 0;
    a2[208] = 0;
  }
  if (v65) {
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v18);
  }
  if (v67)
  {
    uint64_t v17 = v66;
    if (v66) {
      goto LABEL_45;
    }
  }
LABEL_26:
  if (v70) {
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v18);
  }
  if (v73) {
    WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v18);
  }
  if (v76) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v18);
  }
  if (v79) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v18);
  }
  if (v82) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v18);
  }
  if (v85) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v18);
  }
  if (v87)
  {
    uint64_t v35 = v86;
    uint64_t v86 = 0;
    if (v35) {
      CFRelease(v35);
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88);
  if (v92) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v33);
  }
  return std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v93, (WTF::StringImpl *)v33);
}

void sub_198637670(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,WTF::StringImpl **a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)&a9, a2);
  if (a37) {
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a35, v59);
  }
  if (a39 && a38) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a38, v59);
  }
  if (a45) {
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a41, v59);
  }
  if (a51) {
    WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a47, v59);
  }
  if (a57) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a53, v59);
  }
  if (*(unsigned char *)(v57 - 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 256, v59);
  }
  if (*(unsigned char *)(v57 - 216)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 232, v59);
  }
  if (*(unsigned char *)(v57 - 192)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 208, v59);
  }
  if (*(unsigned char *)(v57 - 176))
  {
    uint64_t v61 = *(const void **)(v57 - 184);
    *(void *)(v57 - 184) = 0;
    if (v61) {
      CFRelease(v61);
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v57 - 168);
  if (*(unsigned char *)(v57 - 136)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 152, v60);
  }
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v57 - 128, (WTF::StringImpl *)v60);
  _Unwind_Resume(a1);
}

void sub_198637774()
{
}

void sub_19863777C()
{
}

void sub_198637784()
{
}

void sub_19863778C()
{
}

void sub_198637798()
{
}

void sub_1986377A0()
{
}

void sub_1986377A8()
{
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986377F4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v6, v5);
        uint64_t v23 = *(void *)a1;
        unint64_t v22 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_26;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v22 = v5;
    uint64_t v23 = 0;
LABEL_26:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result)
    {
      if (v22) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v23);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v29);
      if (!v30)
      {
LABEL_43:
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, a2);
      }
      int v25 = HIDWORD(v32);
      if (HIDWORD(v32) != v32) {
        break;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v31, (unint64_t)&v29);
      if (v30) {
        goto LABEL_37;
      }
LABEL_40:
      if (!--v10)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v31, HIDWORD(v32));
        *(void *)a3 = v31;
        uint64_t v28 = v32;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        *(void *)(a3 + 8) = v28;
        goto LABEL_20;
      }
    }
    uint64_t v26 = v29;
    uint64_t v29 = 0;
    *(void *)(v31 + 8 * HIDWORD(v32)) = v26;
    HIDWORD(v32) = v25 + 1;
LABEL_37:
    uint64_t v27 = v29;
    uint64_t v29 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    goto LABEL_40;
  }
  if (v10)
  {
    LODWORD(v32) = v10;
    uint64_t v31 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v29);
      if (!v30) {
        goto LABEL_43;
      }
      int v11 = HIDWORD(v32);
      if (HIDWORD(v32) != v32) {
        break;
      }
      uint64_t v17 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, HIDWORD(v32) + 1, (unint64_t)&v29);
      uint64_t v18 = HIDWORD(v32);
      int v19 = HIDWORD(v32) + 1;
      uint64_t v20 = v31;
      uint64_t v21 = *v17;
      *uint64_t v17 = 0;
      *(void *)(v20 + 8 * v18) = v21;
      HIDWORD(v32) = v19;
      if (v30) {
        goto LABEL_13;
      }
LABEL_16:
      if (!--v10)
      {
        uint64_t v14 = v31;
        uint64_t v15 = v32;
        goto LABEL_19;
      }
    }
    unsigned __int16 v12 = v29;
    uint64_t v29 = 0;
    *(void *)(v31 + 8 * HIDWORD(v32)) = v12;
    HIDWORD(v32) = v11 + 1;
LABEL_13:
    unsigned __int16 v13 = v29;
    uint64_t v29 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    goto LABEL_16;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
LABEL_19:
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v15;
LABEL_20:
  *(unsigned char *)(a3 + 16) = 1;
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, a2);
}

void WebKit::WebProcessCreationParameters::~WebProcessCreationParameters(WebKit::WebProcessCreationParameters *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 102);
  if (v3)
  {
    *((void *)this + 102) = 0;
    *((_DWORD *)this + 206) = 0;
    WTF::fastFree(v3, a2);
  }
  unsigned __int16 v4 = (WTF::StringImpl **)*((void *)this + 100);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  }
  unint64_t v5 = (WTF::StringImpl **)*((void *)this + 99);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unint64_t v7 = (WTF::StringImpl *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  char v8 = (WTF::StringImpl *)*((void *)this + 90);
  *((void *)this + 90) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *((void *)this + 89);
  if ((v9 & 0x8000000000000) != 0)
  {
    uint64_t v44 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, a2);
    }
  }
  uint64_t v10 = *((void *)this + 88);
  if (v10) {
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v10, a2);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 680, a2);
  if (*((unsigned char *)this + 664)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 82);
  }
  if (*((unsigned char *)this + 648)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 80);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 624, v11);
  if (*((unsigned char *)this + 616)) {
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)this + 58);
  }
  uint64_t v13 = *((void *)this + 56);
  if (v13) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v13, v12);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 424, v12);
  uint64_t v15 = (const void *)*((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = (WTF::StringImpl **)*((void *)this + 51);
  if (v16) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v14);
  }
  uint64_t v17 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 48);
  int v19 = (WTF::StringImpl *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = (WTF::StringImpl *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = (WTF::StringImpl *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 296, v18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, v22);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v23);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 248, v24);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v25);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v26);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, v27);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 184, v28);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 168, v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v30);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v31);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v32);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v33);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v34);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v35);
  uint64_t v37 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v37) {
    CFRelease(*(CFTypeRef *)(v37 + 8));
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v36);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 5);
  uint64_t v39 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)this + 3, v38);
  uint64_t v41 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v40);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t v42 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v40);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  char v43 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v40);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 8 * v3));
  }
  unsigned __int16 v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  return a1;
}

uint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(const char ****)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v6);
      uint64_t v6 = (const char ***)(v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  unsigned __int16 v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WTF::String>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t result = *v3;
      WTF *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      ++v3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WTF::StringImpl ****std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](WTF::StringImpl ****a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3)
    {
      unint64_t v5 = v3;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v3, a2);
      uint64_t v3 = v5;
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unsigned __int16 v4 = (const void **)(a1 + 40);
    do
    {
      if (*((_DWORD *)v4 - 10) != -1)
      {
        unint64_t v5 = *v4;
        *unsigned __int16 v4 = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void API::Data::~Data(API::Data *this)
{
  *(void *)this = &unk_1EE9B5358;
  (*((void (**)(void, void))this + 4))(*((void *)this + 2), *((void *)this + 5));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9B5358;
  (*((void (**)(void, void))this + 4))(*((void *)this + 2), *((void *)this + 5));

  JUMPOUT(0x199740C10);
}

uint64_t WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = (void *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 1;
  unint64_t v5 = *(uint64_t **)a2;
  if (*(void *)a2 == a2 + 16)
  {
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = 8 * v9;
      do
      {
        uint64_t v11 = *v5;
        *unint64_t v5 = 0;
        *unsigned __int16 v4 = v11;
        uint64_t v12 = *v5;
        *unint64_t v5 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        ++v4;
        ++v5;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    *(void *)a2 = a2 + 16;
    *(void *)a1 = v5;
    int v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_DWORD *)(a1 + 8) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v7;
  return a1;
}

WTF *WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  unint64_t v5 = (WTF *)(a1 + 16);
  uint64_t result = *(WTF **)a1;
  if (result != v5)
  {
    if (result)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, a2);
    }
    *(void *)a1 = v5;
  }
  int v6 = *(WTF ***)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    uint64_t v8 = a2[3];
    if (v8)
    {
      uint64_t v9 = 8 * v8;
      do
      {
        uint64_t v10 = *v6;
        *int v6 = 0;
        *(void *)unint64_t v5 = v10;
        uint64_t result = *v6;
        *int v6 = 0;
        if (result) {
          uint64_t result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
        }
        unint64_t v5 = (WTF *)((char *)v5 + 8);
        ++v6;
        v9 -= 8;
      }
      while (v9);
    }
    int v7 = a2[2];
  }
  else
  {
    *(void *)a2 = a2 + 4;
    *(void *)a1 = v6;
    int v7 = a2[2];
    a2[2] = 1;
  }
  *(_DWORD *)(a1 + 8) = v7;
  int v11 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

void IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<__CFData const*>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CFData const*>,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCData>(a1, &cf);
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    CFTypeRef v5 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *(void *)a2 = v5;
    LOBYTE(v4) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = v4;
  if (v8)
  {
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_19863838C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebKit::CoreIPCData>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCData,void>::decode(a1, a2);
  if (!a2[8])
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<WebKit::CoreIPCData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<std::span<unsigned char const,18446744073709551615ul>>>(a1, (uint64_t)v6);
  uint64_t v5 = *(void *)a1;
  if (!*(void *)a1)
  {
    *a2 = 0;
    goto LABEL_6;
  }
  if (!v8)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v7)
  {
LABEL_9:
    uint64_t result = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6[0], (CFIndex)v6[1]);
    goto LABEL_5;
  }
  uint64_t result = 0;
LABEL_5:
  *(void *)a2 = result;
  LOBYTE(v5) = 1;
LABEL_6:
  a2[8] = v5;
  return result;
}

void *IPC::Decoder::decode<std::optional<std::span<unsigned char const,18446744073709551615ul>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_10;
  }
  CFTypeRef v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_10:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 24) = v8;
    return result;
  }
LABEL_11:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v3) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>@<X0>(WTF::StringImpl *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8]) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986386C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = *((void *)result + 1);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = ((*((void *)result + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v16 = *((void *)result + 3);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        uint64_t v15 = *(void *)v2;
        unint64_t v14 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_23;
  }
  char v8 = (int *)(v5 + v6);
  *((void *)result + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_23:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)v2 + 3);
    if (result)
    {
      if (v14) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v15);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  unint64_t v9 = 0;
  int v10 = *v8;
  uint64_t v20 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v18);
      if (!v19) {
        break;
      }
      if ((unint64_t)v18 + 1 < 2) {
        break;
      }
      uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v20, &v18, v11, (uint64_t)v17);
      if (!v17[16]) {
        break;
      }
      if (v19)
      {
        uint64_t result = v18;
        uint64_t v18 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (!--v10)
      {
        unint64_t v9 = v20;
        goto LABEL_8;
      }
    }
    *a2 = 0;
    a2[8] = 0;
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
    uint64_t result = (WTF::StringImpl *)v20;
    if (v20) {
      return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v13);
    }
  }
  else
  {
LABEL_8:
    *(void *)a2 = v9;
    a2[8] = 1;
  }
  return result;
}

void sub_1986388A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl **a14)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12);
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, v15);
  }
  _Unwind_Resume(a1);
}

WTF *API::Data::create(std::span<unsigned char const,18446744073709551615ul>)::{lambda(unsigned char *,void const*)#1}::__invoke(WTF *result, void *a2)
{
  if (result) {
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void API::Data::createWithoutCopying(WTF::RetainPtr<NSData>)::$_0::__invoke(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void WebKit::StorageAccessPromptQuirkController::setCachedQuirks(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1 + 2;
  uint64_t v5 = a1[5];
  if (v5)
  {
    uint64_t v6 = 32 * v5;
    uint64_t v7 = *(void *)v4 + 16;
    do
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
      uint64_t v8 = *(void *)(v7 - 8);
      if (v8) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v8, a2);
      }
      unint64_t v9 = *(WTF::StringImpl **)(v7 - 16);
      *(void *)(v7 - 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      v7 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  int v10 = *(WTF **)v4;
  if (*(void *)v4)
  {
    *((void *)a1 + 1) = 0;
    a1[4] = 0;
    WTF::fastFree(v10, a2);
  }
  uint64_t v11 = *(void *)a2;
  *(void *)a2 = 0;
  *((void *)a1 + 1) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[4] = v11;
  unint64_t v12 = *((unsigned int *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[5] = v12;
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, v12);
  uint64_t v13 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = a1[5];
    int v15 = 134217984;
    uint64_t v16 = v14;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "StorageAccessPromptQuirkController::setCachedQuirks: Loaded %lu storage access prompt(s) quirks from WebPrivacy.", (uint8_t *)&v15, 0xCu);
  }
}

uint64_t WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 - 4);
  if (v2)
  {
    uint64_t v3 = a1 + 4;
    do
    {
      if (*(_DWORD *)(v3 - 4)) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = *(unsigned char *)v3 == 0;
      }
      if (v4 || !*(unsigned char *)(v3 + 1))
      {
        uint64_t v5 = *(void *)(v3 + 4);
        if ((v5 & 0x8000000000000) != 0)
        {
          uint64_t v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v6);
            uint64_t v11 = a1;
            uint64_t v9 = v3;
            uint64_t v10 = v2;
            WTF::fastFree((WTF *)v6, a2);
            uint64_t v3 = v9;
            uint64_t v2 = v10;
            a1 = v11;
          }
        }
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  uint64_t v7 = (WTF *)(a1 - 16);

  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WTF::URL::URL(*(void *)a1 + 40 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    BOOL v4 = (uint64_t *)(*(void *)result + 40 * *(unsigned int *)(result + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WTF::URL>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = 0;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v7 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v4 + 24) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v4 + 28) = v7;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1 = result;
  unsigned __int8 v2 = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v2 & 1) != 0 && !*((unsigned char *)result + 8)) {
    return result;
  }
  isMobileSafaruint64_t i = WebCore::IOSApplication::isMobileSafari(result);
  uint64_t v4 = (uint64_t (**)(void))MEMORY[0x1E4FB6348];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6348])() instancesRespondToSelector:sel_crossSiteTrackingPreventionRelaxedDomains])uint64_t v5 = (const void *)objc_msgSend((id)objc_msgSend((id)(*v4)(), "sharedConnection"), "crossSiteTrackingPreventionRelaxedDomains"); {
  else
  }
    uint64_t v5 = (const void *)MEMORY[0x1E4F1CBF0];
  SEL v6 = NSSelectorFromString(&cfstr_Crosssitetrack.isa);
  if ([(id)(*v4)() instancesRespondToSelector:v6]) {
    unint64_t v7 = objc_msgSend((id)objc_msgSend((id)(*v4)(), "sharedConnection"), "performSelector:", v6);
  }
  else {
    unint64_t v7 = (void *)MEMORY[0x1E4F1CBF0];
  }
  uint64_t result = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
  if ((isMobileSafari & 1) == 0)
  {
    unint64_t v8 = result;
    MEMORY[0x19972EAD0](&v14, result);
    if (WebKit::isRunningTest((WebKit *)&v14, v9)) {
      char v11 = 1;
    }
    else {
      char v11 = [v7 containsObject:v8];
    }
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (!result)
    {
LABEL_16:
      if ((v11 & 1) == 0) {
        return result;
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_16;
    }
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    if ((v11 & 1) == 0) {
      return result;
    }
  }
LABEL_19:
  WTF::RunLoop::main(result);
  char v12 = *((unsigned char *)v1 + 8);
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v13 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v13 = &unk_1EE9D31C8;
  *(unsigned char *)(v13 + 8) = v12;
  *(void *)(v13 + 16) = v5;
  uint64_t v14 = (WTF::StringImpl *)v13;
  WTF::RunLoop::dispatch();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198638FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::VectorMover<false,WTF::URL>::move(WTF::StringImpl *result, uint64_t *a2, uint64_t a3)
{
  if (result != (WTF::StringImpl *)a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      WTF::URL::URL(a3, v5);
      uint64_t result = (WTF::StringImpl *)*v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 40;
      v5 += 5;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19863913C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (result >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>((uint64_t)&v15, a2);
      if (!v17) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        char v12 = (void *)(v18 + 16 * HIDWORD(v19));
        void *v12 = v15;
        uint64_t v13 = v16;
        uint64_t v16 = 0;
        v12[1] = v13;
        ++HIDWORD(v19);
      }
      std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
      if (!--v6)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v18, HIDWORD(v19));
        *(void *)a1 = v18;
        uint64_t v14 = v19;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a1 + 8) = v14;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a1 + 16) = 1;
      return WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
    }
    LODWORD(v19) = result;
    uint64_t v18 = WTF::fastMalloc((WTF *)(16 * result));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>((uint64_t)&v15, a2);
      if (!v17) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        unint64_t v10 = (void *)(v18 + 16 * HIDWORD(v19));
        *unint64_t v10 = v15;
        uint64_t v11 = v16;
        uint64_t v16 = 0;
        v10[1] = v11;
        ++HIDWORD(v19);
      }
      std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
      if (!--v6)
      {
        uint64_t v7 = v18;
        uint64_t v8 = v19;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
  return WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
}

void sub_198639354(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__optional_destruct_base<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

WebKit::WebPage **WebKit::WebProcess::ensureNetworkProcessConnection(void)::$_0::operator()(uint64_t a1)
{
  unint64_t result = (WebKit::WebPage **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  unint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6) {
    uint64_t v7 = (WebKit::WebPage **)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      unint64_t result = WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(v3[1]);
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)*v3 + 1 > 1) {
          goto LABEL_7;
        }
      }
      unint64_t v3 = v5;
LABEL_7:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

IPC::Encoder **WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(WebKit::WebPage *this)
{
  uint64_t v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(this);
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection(v2) + 24);
  v5[0] = (char *)this + 40;
  v5[1] = (char *)this + 2376;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetCORSDisablingPatterns>(v3, (uint64_t)v5);
}

void IPC::handleMessage<Messages::WebProcess::SetWebsiteDataStoreParameters,WebKit::WebProcess,WebKit::WebProcess,void ()(WebKit::WebProcessDataStoreParameters &&)>(IPC::Decoder *a1, WebKit::WebProcess *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebKit::WebProcessDataStoreParameters>>(v3, a1);
  if (v4)
  {
    WebKit::WebProcess::setWebsiteDataStoreParameters(a2, (uint64_t)v3);
    if (v4) {
      WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v3);
    }
  }
}

uint64_t WebKit::WebProcess::setWebsiteDataStoreParameters(WebKit::WebProcess *this, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if (!*((unsigned char *)this + 672)) {
    *((unsigned char *)this + 672) = 1;
  }
  *((void *)this + 83) = v4;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 && *(_DWORD *)(v5 + 4)) {
    WebCore::HTMLMediaElement::setMediaCacheDirectory((WebCore::HTMLMediaElement *)(a2 + 8), (const WTF::String *)a2);
  }
  uint64_t v6 = WebKit::WebProcess::setTrackingPreventionEnabled(this, (WebCore::DeprecatedGlobalSettings *)*(unsigned __int8 *)(a2 + 144));
  *((unsigned char *)this + 680) = *(unsigned char *)(a2 + 56);
  if (*(unsigned char *)(a2 + 144))
  {
    uint64_t v7 = (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::sharedIfExists(v6);
    if (!v7)
    {
      uint64_t v8 = WTF::fastMalloc((WTF *)0x70);
      char v9 = *(uint64_t *)a2 < 0 && *(void *)a2 != -1;
      Observer = (WebCore::ResourceLoadObserver *)WebKit::WebResourceLoadObserver::WebResourceLoadObserver(v8, v9);
      uint64_t v7 = (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::setShared(Observer, v11);
    }
    uint64_t v12 = WebCore::ResourceLoadObserver::shared(v7);
    uint64_t v13 = (WebCore::ResourceLoadObserver *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 120))(v12, a2 + 64);
    if ((*(void *)a2 & 0x8000000000000000) == 0 || *(void *)a2 == -1)
    {
      uint64_t v14 = WebCore::ResourceLoadObserver::shared(v13);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v15 = &unk_1EE9E7158;
      uint64_t v24 = v15;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v14 + 128))(v14, a2 + 72, &v24);
      uint64_t v16 = v24;
      uint64_t v24 = 0;
      if (v16) {
        (*(void (**)(void *))(*v16 + 8))(v16);
      }
    }
  }
  WTF::String::operator=((uint64_t *)this + 98, (WTF::StringImpl **)(a2 + 16));
  *((void *)this + 99) = *(void *)(a2 + 32);
  char v17 = (void *)*((void *)this + 34);
  uint64_t v18 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v17);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  if (v17) {
    v17 += 3 * *((unsigned int *)v17 - 1);
  }
  if (v17 != v18)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)v19[2] + 32))(v19[2], a2);
      while (1)
      {
        v19 += 3;
        if (v19 == v21) {
          break;
        }
        if (*v19) {
          BOOL v22 = *v19 == -1;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22) {
          goto LABEL_24;
        }
      }
      uint64_t v19 = v21;
LABEL_24:
      ;
    }
    while (v19 != v17);
  }
  WebKit::WebProcess::platformSetWebsiteDataStoreParameters((uint64_t)this, a2);
  return WebKit::WebProcess::ensureNetworkProcessConnection(this);
}

uint64_t *WebKit::WebMediaKeyStorageManager::setWebsiteDataStore(uint64_t a1, uint64_t a2)
{
  return WTF::String::operator=((uint64_t *)(a1 + 8), (WTF::StringImpl **)(a2 + 16));
}

uint64_t WebKit::WebResourceLoadObserver::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  uint64_t v9 = v6;
  v54[0] = v6;
  v54[1] = v7;
  if (*a2) {
    uint64_t v10 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 == v6)
  {
LABEL_4:
    uint64_t v11 = *(void *)v3;
    *(void *)uint64_t v3 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v13 = (uint64_t *)(a1 + 96);
  while (1)
  {
    uint64_t v14 = *(unsigned int *)(v9 + 20);
    if (v14) {
      break;
    }
LABEL_69:
    v54[0] = v9 + 24;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v54, (uint64_t)v7, v8);
    uint64_t v9 = v54[0];
    if (v54[0] == v10) {
      goto LABEL_4;
    }
  }
  uint64_t v49 = v10;
  uint64_t v50 = v3;
  uint64_t v15 = *(WTF::StringImpl ***)(v9 + 8);
  uint64_t v16 = &v15[v14];
  while (1)
  {
    uint64_t v17 = *v13;
    if (*v13
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, 0), (uint64_t v17 = *v13) != 0))
    {
      int v18 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      int v18 = 0;
    }
    unsigned int v19 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v9, v7) & v18;
    uint64_t v20 = v17 + 16 * v19;
    if ((WTF::equal(*(WTF **)v20, 0, v21) & 1) == 0)
    {
      uint64_t v44 = 0;
      int v45 = 1;
      do
      {
        if (*(void *)v20 == -1)
        {
          uint64_t v44 = (void *)v20;
        }
        else if (WTF::equalIgnoringASCIICase(*(WTF **)v20, *(const WTF::StringImpl **)v9, v22))
        {
          goto LABEL_21;
        }
        unsigned int v19 = (v19 + v45) & v18;
        uint64_t v20 = v17 + 16 * v19;
        ++v45;
      }
      while (!WTF::equal(*(WTF **)v20, 0, v22));
      if (v44)
      {
        *uint64_t v44 = 0;
        v44[1] = 0;
        --*(_DWORD *)(*v13 - 16);
        uint64_t v20 = (uint64_t)v44;
      }
    }
    WTF::String::operator=((uint64_t *)v20, (WTF::StringImpl **)v9);
    uint64_t v24 = *(WTF::StringImpl ***)(v20 + 8);
    *(void *)(v20 + 8) = 0;
    if (v24) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v23);
    }
    uint64_t v25 = *v13;
    if (*v13) {
      int v26 = *(_DWORD *)(v25 - 12) + 1;
    }
    else {
      int v26 = 1;
    }
    *(_DWORD *)(v25 - 12) = v26;
    uint64_t v27 = *v13;
    if (*v13) {
      int v28 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v27 - 4);
    if (v30 <= 0x400)
    {
      if (3 * v30 > 4 * v29) {
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v20 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, v20);
      goto LABEL_21;
    }
    if (v30 <= 2 * v29) {
      goto LABEL_20;
    }
LABEL_21:
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v20 + 8), v15, (uint64_t)v53);
    WebCore::NetworkStorageSession::findAdditionalLoginDomain();
    if (v52) {
      break;
    }
LABEL_36:
    if (++v15 == v16)
    {
      uint64_t v9 = v54[0];
      uint64_t v10 = v49;
      uint64_t v3 = v50;
      goto LABEL_69;
    }
  }
  uint64_t v31 = *v13;
  if (*v13
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, 0), (uint64_t v31 = *v13) != 0))
  {
    int v32 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    int v32 = 0;
  }
  unsigned int v33 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v9, v7) & v32;
  uint64_t v34 = v31 + 16 * v33;
  if ((WTF::equal(*(WTF **)v34, 0, v35) & 1) == 0)
  {
    uint64_t v46 = 0;
    int v47 = 1;
    do
    {
      if (*(void *)v34 == -1)
      {
        uint64_t v46 = (void *)v34;
      }
      else
      {
        uint64_t result = WTF::equalIgnoringASCIICase(*(WTF **)v34, *(const WTF::StringImpl **)v9, v36);
        if (result) {
          goto LABEL_34;
        }
      }
      unsigned int v33 = (v33 + v47) & v32;
      uint64_t v34 = v31 + 16 * v33;
      ++v47;
    }
    while (!WTF::equal(*(WTF **)v34, 0, v36));
    if (v46)
    {
      *uint64_t v46 = 0;
      v46[1] = 0;
      --*(_DWORD *)(*v13 - 16);
      uint64_t v34 = (uint64_t)v46;
    }
  }
  WTF::String::operator=((uint64_t *)v34, (WTF::StringImpl **)v9);
  uint64_t result = *(void *)(v34 + 8);
  *(void *)(v34 + 8) = 0;
  if (result) {
    uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v37);
  }
  uint64_t v38 = *v13;
  if (*v13) {
    int v39 = *(_DWORD *)(v38 - 12) + 1;
  }
  else {
    int v39 = 1;
  }
  *(_DWORD *)(v38 - 12) = v39;
  uint64_t v40 = *v13;
  if (*v13) {
    int v41 = *(_DWORD *)(v40 - 12);
  }
  else {
    int v41 = 0;
  }
  uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
  unint64_t v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 <= 2 * v42)
    {
LABEL_33:
      uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v13, v34);
      uint64_t v34 = result;
    }
  }
  else if (3 * v43 <= 4 * v42)
  {
    goto LABEL_33;
  }
LABEL_34:
  if (v52)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v34 + 8), &v51, (uint64_t)v53);
    if (v52)
    {
      uint64_t v48 = v51;
      uint64_t v51 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, v7);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

WTF::StringImpl **WebKit::WebResourceLoadObserver::setDomainsWithUserInteraction(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t result = *(WTF::StringImpl ***)(a1 + 88);
  *(void *)(a1 + 88) = v3;
  if (result) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t *WebKit::WebLoaderStrategy::addOnlineStateChangeListener(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)a1);
  uint64_t result = (uint64_t *)WebKit::WebProcess::ensureNetworkProcessConnection(v4);
  uint64_t v6 = *(unsigned int *)(a1 + 92);
  if (v6 == *(_DWORD *)(a1 + 88))
  {
    return WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(BOOL)>>(a1 + 80, (unint64_t)a2);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)(v7 + 8 * v6) = v8;
    *(_DWORD *)(a1 + 92) = v6 + 1;
  }
  return result;
}

uint64_t WebKit::WebProcess::ensureNetworkProcessConnection(WebKit::WebProcess *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198639C68);
  }
  uint64_t result = *((void *)this + 37);
  if (!result)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v19, *((atomic_uchar *volatile **)this + 5));
    WebKit::getNetworkProcessConnection((WebKit *)v21, v19[0]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v19);
    LODWORD(v19[0]) = WTF::MachSendRight::leakSendRight((WTF::MachSendRight *)v21);
    v19[1] = 0;
    WebKit::NetworkProcessConnection::create((uint64_t *)&v20, (int *)v19, v21[4]);
    uint64_t v4 = v20;
    uint64_t v5 = (_DWORD *)*((void *)this + 37);
    *((void *)this + 37) = v20;
    if (v5)
    {
      if (v5[5] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        uint64_t v4 = (IPC::Connection **)*((void *)this + 37);
      }
      else
      {
        --v5[5];
      }
    }
    char v6 = v23;
    if (v23)
    {
      char v6 = v21[8];
      v24[0] = *(_OWORD *)v22;
      *(_OWORD *)((char *)v24 + 15) = *(_OWORD *)&v22[15];
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
    }
    *((unsigned char *)v4 + 32) = v6;
    *(_OWORD *)((char *)v4 + 33) = v24[0];
    *((_OWORD *)v4 + 3) = *(_OWORD *)((char *)v24 + 15);
    *((unsigned char *)v4 + 64) = v7;
    uint64_t v8 = (WebCore::LegacySchemeRegistry *)WebKit::WebProcess::setNetworkProcessConnectionID((uint64_t)this, *(void *)(*(void *)(*((void *)this + 37) + 24) + 24));
    uint64_t v9 = *(void *)(*((void *)this + 37) + 24);
    WebCore::LegacySchemeRegistry::allURLSchemesRegisteredAsCORSEnabled((uint64_t *)v19, v8);
    uint64_t v20 = v19;
    IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(v9, (uint64_t *)&v20);
    uint64_t v11 = (WebCore::Document *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v10);
    uint64_t v12 = (WebCore::SharedWorkerThreadProxy *)WebCore::Document::allDocuments((uint64_t *)v19, v11);
    if (*(void *)v19[0] && *(_DWORD *)(*(void *)v19[0] - 12)
      || (uint64_t hasInstances = WebCore::SharedWorkerThreadProxy::hasInstances(v12), (hasInstances & 1) != 0))
    {
      int v18 = (WebCore::SWClientConnection *)WebKit::NetworkProcessConnection::serviceWorkerConnection(*((WebKit::NetworkProcessConnection **)this + 37));
      uint64_t hasInstances = WebCore::SWClientConnection::registerServiceWorkerClients(v18);
    }
    uint64_t v14 = WebKit::LaunchServicesDatabaseManager::singleton((WebKit::LaunchServicesDatabaseManager *)hasInstances);
    WebKit::LaunchServicesDatabaseManager::waitForDatabaseUpdate((WebKit::LaunchServicesDatabaseManager *)v14);
    WTF::RunLoop::main(v15);
    uint64_t v16 = (IPC::Connection *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v16 = &unk_1EE9E71A8;
    *((void *)v16 + 1) = this;
    v19[0] = v16;
    WTF::RunLoop::dispatch();
    uint64_t v17 = v19[0];
    v19[0] = 0;
    if (v17) {
      (*(void (**)(IPC::Connection *))(*(void *)v17 + 8))(v17);
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v21);
    return *((void *)this + 37);
  }
  return result;
}

uint64_t *WebKit::LaunchServicesDatabaseManager::singleton(WebKit::LaunchServicesDatabaseManager *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&_MergedGlobals_49, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&_MergedGlobals_49, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LaunchServicesDatabaseManager::singleton(void)::$_0 &&>>);
  }
  return &qword_1EB358DA8;
}

BOOL WebKit::getNetworkProcessConnection(WebKit *this, IPC::Connection *a2)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 40) = 0;
  v6[0] = (uint64_t)a2;
  v6[1] = (uint64_t)this;
  BOOL result = WebKit::getNetworkProcessConnection(IPC::Connection &)::$_0::operator()(v6);
  if (!result)
  {
    int v3 = 30;
    while (--v3)
    {
      uint64_t v4 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will retry...", v5, 2u);
      }
      WTF::sleep();
      BOOL result = WebKit::getNetworkProcessConnection(IPC::Connection &)::$_0::operator()(v6);
      if (result) {
        return result;
      }
    }
    __break(0xC471u);
  }
  return result;
}

BOOL WebKit::getNetworkProcessConnection(IPC::Connection &)::$_0::operator()(uint64_t *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  IPC::Connection::sendSync<Messages::WebProcessProxy::GetNetworkProcessConnection>((uint64_t)v10, *a1);
  int v2 = v11;
  if (v11)
  {
    uint64_t v8 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      if (v2 != 1) {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      uint64_t v9 = IPC::errorAsString();
      *(_DWORD *)buf = 136446210;
      *(void *)&long long v13 = v9;
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to send message or receive invalid message: error %{public}s", buf, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19863A0B0);
  }
  IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::takeReply((uint64_t)buf, (uint64_t)v10);
  uint64_t v3 = a1[1];
  WTF::MachSendRight::operator=();
  uint64_t v4 = *(void *)&v14[13];
  long long v5 = *(_OWORD *)v14;
  *(_OWORD *)(v3 + 4) = v13;
  *(_OWORD *)(v3 + 20) = v5;
  *(void *)(v3 + 33) = v4;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
  int v6 = *(_DWORD *)a1[1];
  if (v11 != -1) {
    ((void (*)(uint8_t *, unsigned char *))off_1EE9E6EF0[v11])(buf, v10);
  }
  return (v6 - 1) < 0xFFFFFFFE;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a2 + 1));

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void WebKit::LaunchServicesDatabaseManager::waitForDatabaseUpdate(WebKit::LaunchServicesDatabaseManager *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
  double v4 = v3;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 24);
  if (v5)
  {
    char v6 = 1;
  }
  else
  {
    int v2 = (WTF::MonotonicTime *)WTF::BinarySemaphore::waitFor((WebKit::LaunchServicesDatabaseManager *)((char *)this + 25));
    char v6 = (char)v2;
  }
  WTF::MonotonicTime::now(v2);
  double v8 = v7 - v4;
  if (v8 > 0.5)
  {
    uint64_t v9 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      int v11 = 134217984;
      double v12 = v8;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "Waiting for Launch Services database update took %f seconds", (uint8_t *)&v11, 0xCu);
    }
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v10 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v11) = 0;
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "Timed out waiting for Launch Services database update.", (uint8_t *)&v11, 2u);
    }
  }
}

void WebKit::NetworkProcessConnection::create(uint64_t *a1, int *a2, char a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x68);
  int v8 = *a2;
  double v7 = (void *)*((void *)a2 + 1);
  object = v7;
  if (v7) {
    os_retain(v7);
  }
  WebKit::NetworkProcessConnection::NetworkProcessConnection(v6, (uint64_t)&v8, a3);
  *a1 = v6;
  if (object) {
    os_release(object);
  }
}

uint64_t WebKit::NetworkProcessConnection::NetworkProcessConnection(uint64_t a1, int a2, void *object, char a4)
{
  *(void *)(a1 + 16) = 0x100000000;
  *(void *)a1 = &unk_1EE9F1A30;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = (mach_port_context_t *)(a1 + 24);
  int v20 = a2;
  objecta = object;
  if (object) {
    os_retain(object);
  }
  IPC::Connection::createClientConnection((uint64_t)&v20, v6);
  double v7 = (WTF::RunLoop *)objecta;
  if (objecta) {
    os_release(objecta);
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = a4;
  int v8 = *(IPC::Connection **)(a1 + 24);
  uint64_t v9 = (_OWORD *)WTF::RunLoop::current(v7);
  uint64_t v10 = (WebCore::WebRTCProvider *)IPC::Connection::open(v8, a1, v9);
  int v11 = (WebKit::WebProcess *)WebCore::WebRTCProvider::webRTCAvailable(v10);
  if (v11)
  {
    double v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v11);
    WebKit::WebProcess::libWebRTCNetwork(v12);
    uint64_t v14 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, (atomic_uchar *volatile *)*v6);
    uint64_t v15 = v18;
    int v18 = 0;
    unsigned int v19 = v15;
    WebKit::LibWebRTCNetwork::setConnection(v14, &v19);
    uint64_t v16 = v19;
    unsigned int v19 = 0;
    if (v16) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v16);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  }
  return a1;
}

uint64_t WebKit::NetworkProcessConnection::NetworkProcessConnection(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::NetworkProcessConnection::NetworkProcessConnection(a1, *(_DWORD *)a2, *(void **)(a2 + 8), a3);
}

void WebKit::LibWebRTCNetwork::setConnection(uint64_t a1, atomic_uchar *volatile **a2)
{
  unsigned __int8 v5 = (atomic_uchar *volatile **)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 200);
  if (v4) {
    IPC::Connection::removeMessageReceiver(v4, 0x16u, 0);
  }
  WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(v5, a2);
  if (*(unsigned char *)(a1 + 192)) {
    WebKit::LibWebRTCNetwork::setSocketFactoryConnection((WebKit::LibWebRTCNetwork *)a1);
  }
  uint64_t v6 = *v5;
  if (*v5)
  {
    IPC::Connection::addMessageReceiver((uint64_t)v6, a1, a1 + 8, 0x16u, 0);
  }
}

uint64_t WebKit::WebProcess::setNetworkProcessConnectionID(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  unsigned __int8 v5 = (atomic_uchar *)(result + 304);
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 304), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    BOOL result = MEMORY[0x19972E8D0](result + 304);
  }
  *(void *)(v3 + 312) = a2;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

WebCore::ResourceLoadObserver *WebKit::WebProcess::setTrackingPreventionEnabled(WebKit::WebProcess *this, WebCore::DeprecatedGlobalSettings *a2)
{
  BOOL result = (WebCore::ResourceLoadObserver *)WebCore::DeprecatedGlobalSettings::shared(this);
  if ((*((unsigned char *)result + 19) != 0) != a2)
  {
    BOOL result = (WebCore::ResourceLoadObserver *)WebCore::DeprecatedGlobalSettings::setTrackingPreventionEnabled(a2);
    if (a2)
    {
      BOOL result = (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::sharedIfExists(result);
      if (!result)
      {
        uint64_t v5 = WTF::fastMalloc((WTF *)0x70);
        if (*((unsigned char *)this + 672))
        {
          uint64_t v6 = *((void *)this + 83);
          char v7 = v6 < 0 && v6 != -1;
        }
        else
        {
          char v7 = 0;
        }
        Observer = (WebCore::ResourceLoadObserver *)WebKit::WebResourceLoadObserver::WebResourceLoadObserver(v5, v7);
        return (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::setShared(Observer, v9);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadObserver::WebResourceLoadObserver(uint64_t a1, char a2)
{
  *(void *)a1 = &unk_1EE9F7260;
  *(unsigned char *)(a1 + 8) = a2;
  uint64_t v3 = (WebCore::TimerBase *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  char v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v4 = &unk_1EE9F7820;
  v4[1] = a1;
  WebCore::TimerBase::TimerBase(v3);
  *(void *)(a1 + 32) = &unk_1EE9BA5F0;
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  return a1;
}

void WebKit::WebProcess::libWebRTCNetwork(WebKit::WebProcess *this)
{
  if (!*((void *)this + 53))
  {
    int v2 = (WebKit::LibWebRTCNetwork *)WTF::fastMalloc((WTF *)0xD0);
    *(_OWORD *)int v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    double v3 = WebKit::LibWebRTCNetwork::LibWebRTCNetwork(v2);
    uint64_t v4 = *((void *)this + 53);
    *((void *)this + 53) = v5;
    if (v4) {
      (*(void (**)(uint64_t, double))(*(void *)v4 + 8))(v4, v3);
    }
  }
}

double WebKit::LibWebRTCNetwork::LibWebRTCNetwork(WebKit::LibWebRTCNetwork *this)
{
  uint64_t v1 = WTF::FunctionDispatcher::FunctionDispatcher(this);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_1EE9F2828;
  *(void *)(v1 + 8) = &unk_1EE9F2858;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 0;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 152) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  *(unsigned char *)(v1 + 112) = 0;
  *(void *)(v1 + 200) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 76) = 0u;
  *(void *)(v1 + 180) = 0;
  *(void *)(v1 + 172) = 0;
  *(void *)(v1 + 185) = 0;
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::WebProcessDataStoreParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WebKit::WebProcessDataStoreParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[152])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::takeReply(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 56))
  {
    uint64_t v4 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v4, v5, v6);
  }
  else
  {
    uint64_t result = WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(result + 4) = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(result + 20) = *(_OWORD *)(a2 + 28);
    *(void *)(result + 33) = *(void *)(a2 + 41);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v3 - 12)) {
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, v3, a3);
  }
  return v3 + 24 * *(unsigned int *)(v3 - 4);
}

{
  uint64_t v3;

  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v3 - 12)) {
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, v3, a3);
  }
  return v3 + 24 * *(unsigned int *)(v3 - 4);
}

IPC::Encoder **IPC::Connection::sendSync<Messages::WebProcessProxy::GetNetworkProcessConnection>(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  IPC::Connection::createSyncMessageEncoder(3822, 0, &v14, &v13);
  IPC::Connection::sendSyncMessage(a2, v14, (uint64_t *)&v13, 4, (uint64_t)&v11, INFINITY);
  if (v12)
  {
    if (v12 == 1)
    {
      *(unsigned char *)a1 = (_BYTE)v11;
      int v5 = 1;
      *(_DWORD *)(a1 + 56) = 1;
      goto LABEL_7;
    }
  }
  else
  {
    v9[0] = 0;
    char v10 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::NetworkProcessConnectionInfo>>(v11, (WTF::MachSendRight *)v9);
    if (!v10)
    {
      *(unsigned char *)a1 = 13;
      *(_DWORD *)(a1 + 56) = 1;
      goto LABEL_6;
    }
    if (!v12)
    {
      IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::ConnectionSendSyncResult(a1, &v11, (uint64_t)v9);
      if (v10) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
      }
LABEL_6:
      int v5 = v12;
      if (v12 == -1) {
        return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v13, v4);
      }
LABEL_7:
      ((void (*)(unsigned char *, IPC::Decoder **))off_1EE9E6EE0[v5])(v9, &v11);
      return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v13, v4);
    }
  }
  char v7 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
  return (IPC::Encoder **)IPC::Decoder::operator>><std::tuple<WebKit::NetworkProcessConnectionInfo>>(v7, v8);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WebKit::NetworkProcessConnectionInfo>>(IPC::Decoder *a1, WTF::MachSendRight *a2)
{
  IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessConnectionInfo>>((uint64_t)v5, a1);
  std::__optional_storage_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>>(a2, (uint64_t)v5);
  if (v5[44]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
  return a1;
}

void std::__optional_storage_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>>(WTF::MachSendRight *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 44) == *(unsigned __int8 *)(a2 + 44))
  {
    if (*((unsigned char *)this + 44))
    {
      WTF::MachSendRight::operator=();
      uint64_t v6 = *(void *)(a2 + 33);
      long long v7 = *(_OWORD *)(a2 + 20);
      *(_OWORD *)((char *)this + 4) = *(_OWORD *)(a2 + 4);
      *(_OWORD *)((char *)this + 20) = v7;
      *(void *)((char *)this + 33) = v6;
    }
  }
  else if (*((unsigned char *)this + 44))
  {
    WTF::MachSendRight::~MachSendRight(this);
    *((unsigned char *)this + 44) = 0;
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    long long v4 = *(_OWORD *)(a2 + 4);
    long long v5 = *(_OWORD *)(a2 + 20);
    *(void *)((char *)this + 33) = *(void *)(a2 + 33);
    *(_OWORD *)((char *)this + 20) = v5;
    *(_OWORD *)((char *)this + 4) = v4;
    *((unsigned char *)this + 44) = 1;
  }
}

void IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessConnectionInfo>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessConnectionInfo>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 44))
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t a3)
{
  long long v5 = *a2;
  *a2 = 0;
  int v8 = v5;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&void v9[4] = *(_OWORD *)(a3 + 4);
  *(_OWORD *)char v10 = *(_OWORD *)(a3 + 20);
  *(void *)&v10[13] = *(void *)(a3 + 33);
  uint64_t v6 = v8;
  int v8 = 0;
  *(void *)a1 = v6;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)(a1 + 12) = *(_OWORD *)&v9[4];
  *(_OWORD *)(a1 + 28) = *(_OWORD *)v10;
  *(void *)(a1 + 41) = *(void *)&v10[13];
  *(_DWORD *)(a1 + 56) = 0;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v8);
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessConnectionInfo>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::NetworkProcessConnectionInfo>((uint64_t)v4, a2);
  if (v6)
  {
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a1 + 4) = *(_OWORD *)&v4[4];
    *(_OWORD *)(a1 + 20) = *(_OWORD *)v5;
    *(void *)(a1 + 33) = *(void *)&v5[13];
    int v3 = v6;
    *(unsigned char *)(a1 + 44) = 1;
    if (v3) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 44) = 0;
  }
}

void IPC::Decoder::decode<WebKit::NetworkProcessConnectionInfo>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 44))
  {
    IPC::Decoder::markInvalid(a2);
  }
}

IPC::Encoder **IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(uint64_t a1, uint64_t *a2)
{
  long long v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v4 = 269;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v7 = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

IPC::Encoder **IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetCORSDisablingPatterns>(uint64_t a1, uint64_t a2)
{
  long long v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v4 = 279;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v7 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v4 = *(void *)(a2 + 8);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4);
}

uint64_t IPC::Connection::createSyncMessageEncoder@<X0>(__int16 a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, IPC::Encoder **a4@<X8>)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = a1;
  *((void *)v8 + 1) = a2;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  *a4 = v8;
  *a3 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();

  return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, a3);
}

uint64_t WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

uint64_t IPC::Connection::sendSyncMessage@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6 = result;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(result + 33));
  if ((v8 & 1) == 0)
  {
    if (*(unsigned char *)(result + 35)) {
      goto LABEL_20;
    }
    *(unsigned char *)a5 = 1;
    goto LABEL_15;
  }
  if (*(void *)(result + 16))
  {
    uint64_t result = IPC::Connection::pushPendingSyncRequestID(result, a2);
    if (result)
    {
      char v13 = a4;
      if ((a4 & 2) != 0) {
        uint64_t v14 = 3;
      }
      else {
        uint64_t v14 = 1;
      }
      if ((v13 & 4) != 0) {
        uint64_t result = IPC::Encoder::setShouldMaintainOrderingWithAsyncMessages(*a3);
      }
      unsigned int v15 = *(unsigned __int16 *)*a3;
      unsigned int v16 = WTF::Thread::currentThreadQOS((WTF::Thread *)result);
      IPC::Connection::sendMessageImpl(v6, a3, v14, v16 | 0x100000000);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, (atomic_uchar *volatile *)v6);
      IPC::Connection::waitForSyncReply(v6, a2, v15, a5, a6);
      IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v6);
      int v17 = *(_DWORD *)(a5 + 8);
      if (!v17) {
        return (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
      }
      if (v17 != 1) {
        goto LABEL_21;
      }
      if (!*(unsigned char *)a5)
      {
        char v18 = 5;
        std::experimental::fundamentals_v3::expected<WTF::UniqueRef<IPC::Decoder>,IPC::Error>::operator=(a5, &v18);
        if (*(_DWORD *)(a5 + 8) != 1) {
          goto LABEL_21;
        }
      }
      if (!*(unsigned char *)(v6 + 35)) {
        return (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
      }
LABEL_20:
      WTF::exitProcess(0);
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    if (*(unsigned char *)(v6 + 35)) {
      goto LABEL_20;
    }
    *(unsigned char *)a5 = 11;
LABEL_15:
    *(_DWORD *)(a5 + 8) = 1;
    return result;
  }
LABEL_22:
  uint64_t result = 1495;
  __break(0xC471u);
  return result;
}

uint64_t IPC::Encoder::setShouldMaintainOrderingWithAsyncMessages(uint64_t this)
{
  **(unsigned char **)(this + 528) |= 8u;
  return this;
}

BOOL IPC::Connection::pushPendingSyncRequestID(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  long long v5 = (atomic_uchar *)(a1 + 240);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 240), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 240);
  }
  int v6 = *(unsigned __int8 *)(a1 + 241);
  if (*(unsigned char *)(a1 + 241))
  {
    uint64_t v14 = a2;
    unsigned int v15 = 0;
    LOBYTE(v16) = 0;
    BYTE8(v16) = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 260);
    if (v7 == *(_DWORD *)(a1 + 256))
    {
      WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::Connection::PendingSyncReply>(a1 + 248, (unint64_t)&v14);
      int v11 = v15;
      unsigned int v15 = 0;
      if (v11)
      {
        IPC::Decoder::~Decoder(v11);
        WTF::fastFree(v12, v13);
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 248) + 32 * v7;
      *(void *)uint64_t v8 = a2;
      unsigned int v15 = 0;
      *(void *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 16) = v16;
      ++*(_DWORD *)(a1 + 260);
    }
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (v6) {
    ++*(_DWORD *)(a1 + 76);
  }
  return v6 != 0;
}

uint64_t WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::Connection::PendingSyncReply>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t result = (uint64_t)v4 + 8;
        do
        {
          *(void *)uint64_t v7 = *(void *)(result - 8);
          uint64_t v8 = *(WTF **)result;
          *(void *)uint64_t result = 0;
          *(void *)(v7 + 8) = v8;
          *(_OWORD *)(v7 + 16) = *(_OWORD *)(result + 8);
          uint64_t v9 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)result);
          unint64_t v10 = (WTF *)(v9 + 3);
          uint64_t result = (uint64_t)(v9 + 4);
          v7 += 32;
        }
        while (v10 != (WTF *)((char *)v4 + 32 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

IPC::Decoder **IPC::Connection::popPendingSyncRequestID(IPC::Decoder **result)
{
  uint64_t v1 = result;
  char v2 = 0;
  --*((_DWORD *)result + 19);
  uint64_t v3 = (WTF::Lock *)(result + 30);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)result + 240, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = (IPC::Decoder **)MEMORY[0x19972E8D0](result + 30);
  }
  uint64_t v4 = *((unsigned int *)v1 + 65);
  if (v4)
  {
    int v5 = v4 - 1;
    uint64_t result = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)v1[31] + 4 * v4 - 3);
    *((_DWORD *)v1 + 65) = v5;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1 + 240, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      return (IPC::Decoder **)WTF::Lock::unlockSlow(v3);
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void IPC::Connection::waitForSyncReply(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v9 = *(unsigned __int8 *)(a1 + 97);
  unint64_t v10 = (atomic_uchar *)(a1 + 240);
  while (1)
  {
    unint64_t v11 = *(atomic_uchar *volatile ***)(a1 + 16);
    *(void *)buf = 0;
    IPC::Connection::SyncMessageState::dispatchMessages(v11, buf);
    char v12 = 0;
    atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      MEMORY[0x19972E8D0](v10);
    }
    uint64_t v13 = *(unsigned int *)(a1 + 260);
    if (!v13)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v14 = *(void *)(a1 + 248) + 32 * (v13 - 1);
    unsigned int v15 = (IPC::Decoder **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 8);
    if (v16) {
      break;
    }
    if (!*(unsigned char *)(a1 + 241))
    {
      int v21 = 1;
      *(unsigned char *)a4 = 1;
LABEL_17:
      *(_DWORD *)(a4 + 8) = v21;
      int v22 = 1;
      atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v10);
      }
      return;
    }
    int v17 = 1;
    atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
    }
    unsigned __int8 v18 = atomic_load((unsigned __int8 *)(a1 + 33));
    if ((v18 & 1) == 0)
    {
      uint64_t v25 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_1985F2000, v25, OS_LOG_TYPE_ERROR, "Connection::waitForSyncReply: Connection no longer valid, id=%llu", buf, 0xCu);
      }
      *(unsigned char *)a4 = 1;
      goto LABEL_26;
    }
    double v19 = INFINITY;
    if (!v9) {
      double v19 = a5;
    }
    *(double *)buf = v19;
    *(_DWORD *)&uint8_t buf[8] = 2;
    if ((WTF::BinarySemaphore::waitUntil() & 1) == 0)
    {
      int v20 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        if (a3 >= 0xEF4) {
          unsigned int v26 = 3828;
        }
        else {
          unsigned int v26 = a3;
        }
        uint64_t v27 = (&IPC::Detail::messageDescriptions)[3 * v26];
        unsigned int v28 = IPC::Connection::remoteProcessID((IPC::Connection *)a1);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v27;
        __int16 v31 = 1024;
        unsigned int v32 = v28;
        __int16 v33 = 2048;
        uint64_t v34 = a2;
        _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "Connection::waitForSyncReply: Timed-out while waiting for reply for %{public}s from process %d, id=%llu", buf, 0x1Cu);
      }
      *(unsigned char *)a4 = 4;
LABEL_26:
      *(_DWORD *)(a4 + 8) = 1;
      return;
    }
  }
  *unsigned int v15 = 0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v15, 0);
  int v21 = *(unsigned __int8 *)(v14 + 24);
  if (!*(unsigned char *)(v14 + 24))
  {
    *(void *)a4 = v16;
    goto LABEL_17;
  }
  uint64_t v23 = *(void *)(v14 + 16);
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  IPC::Connection::SyncMessageState::dispatchMessagesUntil(*(void *)(a1 + 16), v23);
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess20InitializeWebProcessEN6WebKit10WebProcessES8_FvONS7_28WebProcessCreationParametersEONS_17CompletionHandlerIFvN7WebCore15ProcessIdentityEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C088;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess20InitializeWebProcessEN6WebKit10WebProcessES8_FvONS7_28WebProcessCreationParametersEONS_17CompletionHandlerIFvN7WebCore15ProcessIdentityEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3542;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::Encoder::addAttachment((uint64_t)v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

atomic_uchar *volatile **IPC::StreamServerConnection::open(IPC::StreamServerConnection *this, atomic_uint *a2)
{
  atomic_fetch_add(a2 + 2, 1u);
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = a2;
  if (v4) {
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v4 + 8), a2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v7, (uint64_t **)this + 5);
  memset(v6, 0, sizeof(v6));
  IPC::Connection::addMessageReceiveQueue((uint64_t)v7, this, (unsigned __int8 *)v6);
  IPC::Connection::open(v7, (uint64_t)this + 16, a2);
  IPC::StreamConnectionWorkQueue::addStreamConnection((void **)a2, (atomic_uint *)this);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v7);
}

void **IPC::StreamConnectionWorkQueue::addStreamConnection(void **this, atomic_uint *a2)
{
  uint64_t v3 = (uint64_t)this;
  char v4 = 0;
  int v5 = (char *)this + 41;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 41, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = (void **)MEMORY[0x19972E8D0]((char *)this + 41);
  }
  uint64_t v6 = *(unsigned int *)(v3 + 108);
  if (v6 == *(_DWORD *)(v3 + 104))
  {
    this = WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::StreamServerConnection&>(v3 + 96, (uint64_t)a2);
  }
  else
  {
    uint64_t v10 = *(void *)(v3 + 96);
    atomic_fetch_add(a2 + 2, 1u);
    *(void *)(v10 + 8 * v6) = a2;
    ++*(_DWORD *)(v3 + 108);
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v3 + 40));
  int v8 = 1;
  if ((v7 & 1) != 0 || *(void *)(v3 + 48))
  {
    int v9 = 1;
  }
  else
  {
    this = (void **)IPC::StreamConnectionWorkQueue::startProcessingThread((IPC::StreamConnectionWorkQueue *)v3);
    int v9 = 0;
  }
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    this = (void **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (v9)
  {
    JUMPOUT(0x1997420B0);
  }
  return this;
}

void **WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::StreamServerConnection&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  uint64_t v9 = *(unsigned int *)(a1 + 12);
  uint64_t v10 = *(void **)a1;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  v10[v9] = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void IPC::Connection::addMessageReceiveQueue(uint64_t a1, WTF *a2, unsigned __int8 *a3)
{
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue((IPC::Decoder **)a1, a2, a3);
  IPC::MessageReceiveQueueMap::add((uint64_t *)(a1 + 144), (uint64_t)a2, a3);

  os_unfair_lock_unlock(v6);
}

uint64_t *IPC::MessageReceiveQueueMap::add(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2;
  int v5 = 0;
  uint64_t result = IPC::MessageReceiveQueueMap::addImpl(a1, (uint64_t)&v4, a3);
  if (v5 != -1) {
    return (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v6, &v4);
  }
  return result;
}

uint64_t std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void ___ZN6WebKit30isParentProcessAFullWebBrowserERNS_16AuxiliaryProcessE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 40);
  if (v1)
  {
    char v2 = 0;
    atomic_uchar *volatile v3 = *(atomic_uchar *volatile *)v1;
    int v4 = 1;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v1, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
    if (v2) {
      MEMORY[0x19972E8D0](v3);
    }
    ++*((void *)v3 + 1);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
    }
    if (*(void *)(v1 + 352))
    {
      xpc_connection_get_audit_token();
      byte_1EB35900B = WTF::hasEntitlement();
    }
    else
    {
      int v5 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Unable to get parent process audit token", buf, 2u);
      }
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*(atomic_uchar **)v1);
  }
  else
  {
    char v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "Unable to get parent process connection", buf, 2u);
    }
  }
}

void sub_19863BBB4(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,void>::encode<IPC::Encoder,std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,0ul,1ul>(uint64_t a1, IPC::Semaphore **a2)
{
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(a1, *a2);
  int v4 = a2[1];

  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(a1, v4);
}

void IPC::ArgumentCoder<IPC::Semaphore,void>::encode(uint64_t a1, IPC::Semaphore *this)
{
  IPC::Semaphore::createSendRight(&v3, this);
  IPC::Encoder::addAttachment(a1, (unint64_t)&v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
}

uint64_t IPC::Semaphore::createSendRight(IPC::Semaphore *this)
{
  return WTF::MachSendRight::create((WTF::MachSendRight *)*((unsigned int *)this + 1));
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::platformOpen(void)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar **)*((void *)this + 1);
  *(void *)this = &unk_1EEA0FFC0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t **__copy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__1(uint64_t a1, uint64_t a2)
{
  uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 32), (uint64_t **)(a2 + 32));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t IPC::Connection::open(IPC::Connection *a1, uint64_t a2, _OWORD *a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a2 + 16), 1u);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = a2;
  if (v4)
  {
    int v5 = (unsigned int *)(v4 + 16);
    if (!atomic_load(v5))
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF);
  }
  int v7 = IPC::Connection::SyncMessageState::get(a3, &v10);
  int v8 = (IPC::Connection::SyncMessageState *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  if (v8) {
    IPC::Connection::SyncMessageStateRelease::operator()(v7, v8);
  }
  IPC::Connection::platformOpen(a1);
  return 1;
}

_OWORD *IPC::Connection::SyncMessageState::get@<X0>(_OWORD *result@<X0>, void *a2@<X8>)
{
  char v2 = result;
  char v4 = 0;
  atomic_compare_exchange_strong_explicit(_MergedGlobals_141, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (_OWORD *)MEMORY[0x19972E8D0](_MergedGlobals_141);
  }
  if (byte_1EB35A488)
  {
    uint64_t v5 = qword_1EB35A480;
    if (qword_1EB35A480) {
      goto LABEL_6;
    }
  }
  else
  {
    qword_1EB35A480 = 0;
    byte_1EB35A488 = 1;
  }
  uint64_t result = WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::expand(0);
  uint64_t v5 = qword_1EB35A480;
  if (!qword_1EB35A480)
  {
    int v6 = 0;
    goto LABEL_7;
  }
LABEL_6:
  int v6 = *(_DWORD *)(v5 - 8);
LABEL_7:
  unint64_t v7 = ((unint64_t)v2 + ~((void)v2 << 32)) ^ (((unint64_t)v2 + ~((void)v2 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  unint64_t v11 = (void *)(v5 + 16 * v10);
  char v12 = (_OWORD *)*v11;
  if (!*v11) {
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != v2)
  {
    if (v12 == (_OWORD *)-1) {
      uint64_t v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    unint64_t v11 = (void *)(v5 + 16 * v10);
    char v12 = (_OWORD *)*v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *uint64_t v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v5 - 16);
        unint64_t v11 = v13;
      }
LABEL_8:
      *unint64_t v11 = v2;
      operator new();
    }
  }
  uint64_t v15 = v11[1];
  ++*(_DWORD *)(v15 + 88);
  *a2 = v15;
  LODWORD(v15) = 1;
  atomic_compare_exchange_strong_explicit(_MergedGlobals_141, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1)
  {
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_141);
  }
  return result;
}

void IPC::Connection::initializeSendSource(IPC::Connection *this)
{
  uintptr_t v1 = *((unsigned int *)this + 78);
  if (v1 != -1)
  {
    if (v1)
    {
      uint64_t v3 = dispatch_source_create(MEMORY[0x1E4F14460], v1, 8uLL, *(dispatch_queue_t *)(*((void *)this + 8) + 16));
      char v4 = (void *)*((void *)this + 40);
      *((void *)this + 40) = v3;
      if (v4)
      {

        uint64_t v3 = *((void *)this + 40);
      }
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3321888768;
      handler[2] = ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke;
      handler[3] = &__block_descriptor_48_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__0_e5_v8__0l;
      uint64_t v16 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v17, (atomic_uchar *volatile *)this);
      handler[4] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)&v17);
      dispatch_source_set_registration_handler(v3, handler);
      uint64_t v5 = v17;
      int v17 = 0;
      if (v5) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v5);
      }
      int v6 = *((void *)this + 40);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3321888768;
      v14[2] = ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_8;
      v14[3] = &__block_descriptor_48_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__1_e5_v8__0l;
      uint64_t v16 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v17, (atomic_uchar *volatile *)this);
      v14[4] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v15, (uint64_t **)&v17);
      dispatch_source_set_event_handler(v6, v14);
      unint64_t v7 = v17;
      int v17 = 0;
      if (v7) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v7);
      }
      int v8 = *((_DWORD *)this + 78);
      unint64_t v9 = *((void *)this + 40);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_10;
      v12[3] = &__block_descriptor_36_e5_v8__0l;
      int v13 = v8;
      dispatch_source_set_cancel_handler(v9, v12);
      dispatch_resume(*((dispatch_object_t *)this + 40));
      unsigned int v10 = v15;
      uint64_t v15 = 0;
      if (v10) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v10);
      }
      unint64_t v11 = v19;
      double v19 = 0;
      if (v11) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v11);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void sub_19863C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,atomic_uchar **a22)
{
  if (a22) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a22);
  }
  int v24 = *(atomic_uchar ***)(v22 - 56);
  *(void *)(v22 - 56) = 0;
  if (v24) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_19863C24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x19863C244);
  }
  JUMPOUT(0x19863C23CLL);
}

atomic_uchar *IPC::Connection::platformOpen(IPC::Connection *this)
{
  char v2 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (*((unsigned char *)this + 32))
  {
    IPC::requestNoSenderNotifications(*((_DWORD *)this + 82), *((_DWORD *)this + 82));
  }
  else
  {
    uint64_t result = (atomic_uchar *)mach_port_allocate(*MEMORY[0x1E4F14960], 1u, (mach_port_name_t *)this + 82);
    if (result)
    {
      __break(0xC471u);
      return result;
    }
    mach_port_guard(*v2, *((_DWORD *)this + 82), (mach_port_context_t)this, 1);
    *((unsigned char *)this + 72) = 1;
    WTF::MachSendRight::createFromReceiveRight((WTF::MachSendRight *)*((unsigned int *)this + 82));
    IPC::requestNoSenderNotifications(*((_DWORD *)this + 82), *((_DWORD *)this + 82));
    IPC::Connection::initializeSendSource(this);
    if (*((_DWORD *)this + 78) != -1)
    {
      char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v4 = 2868;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 66) = (char *)v4 + 16;
      *((void *)v4 + 67) = 512;
      *((void *)v4 + 68) = 0;
      *((void *)v4 + 70) = 0;
      *((void *)v4 + 69) = 0;
      IPC::Encoder::encodeHeader(v4);
      v26[0] = v4;
      IPC::Encoder::addAttachment((uint64_t)v4, (unint64_t)&v22);
      IPC::Connection::sendMessageImpl((uint64_t)this, (uint64_t *)v26, 0, 0);
      int v6 = v26[0];
      v26[0] = 0;
      if (v6)
      {
        IPC::Encoder::~Encoder(v6, v5);
        WTF::fastFree(v20, v21);
      }
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v22);
  }
  uint64_t v7 = *((unsigned int *)this + 82);
  LODWORD(v26[0]) = 128;
  MEMORY[0x1997412B0](*v2, v7, 1, v26, 1);
  int v8 = dispatch_source_create(MEMORY[0x1E4F14458], *((unsigned int *)this + 82), 0, *(dispatch_queue_t *)(*((void *)this + 8) + 16));
  unint64_t v9 = (void *)*((void *)this + 42);
  *((void *)this + 42) = v8;
  if (v9)
  {

    int v8 = *((void *)this + 42);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3321888768;
  handler[2] = ___ZN3IPC10Connection12platformOpenEv_block_invoke;
  handler[3] = &__block_descriptor_48_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__0_e5_v8__0l;
  v26[0] = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v26[1], (atomic_uchar *volatile *)this);
  handler[4] = v26[0];
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v28, (uint64_t **)&v26[1]);
  dispatch_source_set_event_handler(v8, handler);
  unsigned int v10 = (atomic_uchar **)v26[1];
  v26[1] = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v10);
  }
  unint64_t v11 = *((void *)this + 42);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3321888768;
  v23[2] = ___ZN3IPC10Connection12platformOpenEv_block_invoke_2;
  v23[3] = &__block_descriptor_48_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__1_e5_v8__0l;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v26, (atomic_uchar *volatile *)this);
  LODWORD(v26[1]) = *((_DWORD *)this + 82);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)v26);
  int v25 = (int)v26[1];
  dispatch_source_set_cancel_handler(v11, v23);
  char v12 = (atomic_uchar **)v26[0];
  v26[0] = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v12);
  }
  uint64_t v13 = *((void *)this + 8);
  (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v26, (atomic_uchar *volatile *)this);
  v26[1] = this;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v14 = &unk_1EEA0FFC0;
  long long v15 = *(_OWORD *)v26;
  v26[0] = 0;
  *(_OWORD *)(v14 + 8) = v15;
  uint64_t v22 = v14;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 32))(v13, &v22);
  uint64_t v16 = v22;
  uint64_t v22 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  int v17 = (atomic_uchar **)v26[0];
  v26[0] = 0;
  if (v17) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v17);
  }
  uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
  unsigned __int8 v18 = v24;
  int v24 = 0;
  if (v18) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v18);
  }
  double v19 = v28;
  unsigned int v28 = 0;
  if (v19) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v19);
  }
  return result;
}

void sub_19863C63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

uint64_t **WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(uint64_t **a1, uint64_t **a2)
{
  char v3 = 0;
  char v4 = *a2;
  uint64_t v5 = **a2;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v5);
  }
  ++*(void *)(v5 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  *a1 = v4;
  return a1;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uintptr_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v5 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (!v4)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9B37E8;
    *(void *)(v8 + 8) = v1;
    *(void *)(v8 + 16) = v5;
    *(unsigned char *)(v8 + 24) = v6;
    unsigned int v10 = (atomic_uchar *)v8;
    WTF::ensureOnMainRunLoop();
    this = v10;
    if (v10) {
      return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
    }
  }
  return this;
}

void sub_19863C8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Encoder::addAttachment(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)(a1 + 564) == *(_DWORD *)(a1 + 560))
  {
    uint64_t v3 = a1 + 552;
    return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>(v3, a2);
  }
  else
  {
    uint64_t result = WTF::MachSendRight::MachSendRight();
    ++*(_DWORD *)(a1 + 564);
  }
  return result;
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>(uint64_t a1, unint64_t a2)
{
  return 1;
}

unint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1 <= a3 && v4 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v8 = a3 - v4;
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v8;
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = 16;
    }
    if (v6 > a2) {
      a2 = v6;
    }
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19863CAE4);
    }
    uint64_t v4 = *(WTF::MachSendRight **)a1;
    unint64_t v5 = (WTF::MachSendRight *)(*(void *)a1 + 4 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WTF::MachSendRight>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::MachSendRight **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WTF::MachSendRight>::move(WTF::MachSendRight *a1, WTF::MachSendRight *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      WTF::MachSendRight::MachSendRight();
      WTF::MachSendRight::~MachSendRight(v5);
      a3 += 4;
      unint64_t v5 = (WTF::MachSendRight *)((char *)v5 + 4);
    }
    while (v5 != a2);
  }
}

uint64_t IPC::requestNoSenderNotifications(mach_port_name_t name, mach_port_t notify)
{
  mach_port_t previous = 0;
  uint64_t result = mach_port_request_notification(*MEMORY[0x1E4F14960], name, 70, 0, notify, 0x15u, &previous);
  if (!result) {
    return WTF::deallocateSendRightSafely((WTF *)previous);
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4 = qword_1EB35A480;
  if (qword_1EB35A480)
  {
    unsigned int v5 = *(_DWORD *)(qword_1EB35A480 - 4);
    int v6 = *(_DWORD *)(qword_1EB35A480 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  int v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB35A480 = (uint64_t)(v7 + 4);
  void v7[2] = a1 - 1;
  void v7[3] = a1;
  *int v7 = 0;
  *(_DWORD *)(qword_1EB35A480 - 12) = v6;
  unint64_t v9 = 0;
  if (v5)
  {
    uint64_t v11 = v5;
    char v12 = (uint64_t *)v4;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        uint64_t v13 = (_OWORD *)WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::lookupForReinsert(*v12);
        *uint64_t v13 = *(_OWORD *)v12;
        if (v12 == a2) {
          unint64_t v9 = v13;
        }
      }
      v12 += 2;
      --v11;
    }
    while (v11);
    goto LABEL_12;
  }
  uint64_t result = 0;
  if (v4)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v9;
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::expand(uint64_t *a1)
{
  if (qword_1EB35A480 && (int v2 = *(_DWORD *)(qword_1EB35A480 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(qword_1EB35A480 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::rehash(v3, a1);
}

void WebKit::WebLocalFrameLoaderClient::createDocumentLoader(WebKit::WebFrame **this@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::SubstituteData *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (WebKit::WebPage *)WebKit::WebFrame::page(this[2]);
  unint64_t v9 = (WebCore::LocalFrame *)*((void *)this[11] + 1);

  WebKit::WebPage::createDocumentLoader(v8, v9, a2, a3, a4);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidChangeMainDocument(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    *(_OWORD *)unint64_t v10 = *((_OWORD *)this[2] + 5);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32) + 56))(v3 + 32);
    unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v5 = 1898;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v11 = v5;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v5, v10);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 32) + 32))(v3 + 32, &v11, 0);
    int v7 = v11;
    uint64_t v11 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

BOOL WebKit::WebLocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = *(void **)(*(void *)(v4 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v5 + 1368))(v5)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5[2] + 8);
  if (!v6) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v6 - 8));
  BOOL v7 = *(unsigned char *)(v6 + 2232) != 0;
  CFRelease(*(CFTypeRef *)(v6 - 8));
  return v7;
}

void WebKit::WebChromeClient::renderingUpdateFramesPerSecondChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 280))(v3);
  }
  if (v1)
  {
    uint64_t v4 = *(const void **)(v1 - 8);
    CFRelease(v4);
  }
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::renderingUpdateFramesPerSecondChanged(WebKit::RemoteLayerTreeDrawingArea *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(WebCore::Page **)(v3 + 48);
  uint64_t updated = WebCore::Page::preferredRenderingUpdateFramesPerSecond();
  uint64_t v6 = updated;
  if (BYTE4(updated) && (!*((unsigned char *)this + 348) || *((_DWORD *)this + 86) != updated))
  {
    int v10 = updated;
    unint64_t v9 = &v10;
    WebKit::DrawingArea::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>((uint64_t)this, &v9);
  }
  *((_DWORD *)this + 86) = v6;
  *((unsigned char *)this + 348) = BYTE4(v6);
  uint64_t result = WebCore::Page::preferredRenderingUpdateInterval(v4);
  *((void *)this + 44) = v8;
  return result;
}

void WebKit::DrawingArea::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>(uint64_t a1, int **a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  IPC::MessageSender::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>(v5 + 32, a2, *(void *)(a1 + 32));
  if (v4)
  {
    uint64_t v6 = *(const void **)(v4 - 8);
    CFRelease(v6);
  }
}

void sub_19863D14C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder **IPC::MessageSender::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v9 = a3;
  __int16 v7 = 1132;
  WTF::makeUniqueRefWithoutFastMallocCheck<IPC::Encoder,IPC::MessageName,unsigned long long &>(&v7, &v9, &v8);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v8, **a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v8, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v8, v5);
}

void sub_19863D1F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<IPC::Encoder,IPC::MessageName,unsigned long long &>@<X0>(_WORD *a1@<X0>, uint64_t *a2@<X1>, IPC::Encoder **a3@<X8>)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v7 = *a2;
  *(_WORD *)uint64_t v6 = *a1;
  *((void *)v6 + 1) = v7;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  uint64_t result = IPC::Encoder::encodeHeader(v6);
  *a3 = v6;
  return result;
}

void WebKit::WebChromeClient::attachRootGraphicsLayer(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, WebCore::GraphicsLayer *a3)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (a3) {
    WebKit::WebPage::enterAcceleratedCompositingMode(v6);
  }
  else {
    WebKit::WebPage::exitAcceleratedCompositingMode(v6, (uint64_t)a2);
  }
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

double WebKit::RemoteLayerTreeDrawingArea::setRootCompositingLayer(WebKit::RemoteLayerTreeDrawingArea *this, WebCore::Frame *a2, WebCore::GraphicsLayer *a3)
{
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = *((unsigned int *)this + 25);
  if (v5)
  {
    uint64_t v9 = 40 * v5;
    int v10 = (void *)(v4 + 24);
    do
    {
      if (*v10 == *((void *)a2 + 4) && v10[1] == *((void *)a2 + 5))
      {
        if (a3) {
          ++*((_DWORD *)a3 + 2);
        }
        char v12 = (_DWORD *)*(v10 - 2);
        *(v10 - 2) = a3;
        if (v12)
        {
          if (v12[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v12 + 16))(v12);
          }
          else {
            --v12[2];
          }
        }
      }
      v10 += 5;
      v9 -= 40;
    }
    while (v9);
    uint64_t v4 = *((void *)this + 11);
    unsigned int v6 = *((_DWORD *)this + 25);
  }
  else
  {
    unsigned int v6 = 0;
  }
  WebKit::RemoteLayerTreeDrawingArea::updateRootLayers(v4, v6);

  return WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updateRootLayers(uint64_t this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = 40 * a2;
    uint64_t v3 = (uint64_t *)(this + 16);
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v4 = *(v3 - 1);
      if (v4)
      {
        WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer&>((uint64_t)&v9, v4);
        uint64_t v5 = *v3;
        if (*v3)
        {
          uint64_t v7 = HIDWORD(v10);
          if (HIDWORD(v10) == v10)
          {
            WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer&>((uint64_t)&v9, v5);
          }
          else
          {
            uint64_t v8 = v9;
            ++*(_DWORD *)(v5 + 8);
            *(void *)(v8 + 8 * v7) = v5;
            HIDWORD(v10) = v7 + 1;
          }
        }
      }
      (*(void (**)(void, uint64_t *))(*(void *)*(v3 - 2) + 56))(*(v3 - 2), &v9);
      this = WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return this;
}

void sub_19863D4C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      unsigned int v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 16))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::WebPage::enterAcceleratedCompositingMode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 240))();
}

uint64_t WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v9 = *(unsigned int *)(a1 + 12);
  uint64_t v10 = *(void *)a1;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(v10 + 8 * v9) = a2;
  *(_DWORD *)(a1 + 12) = v9 + 1;
  return result;
}

uint64_t WebKit::WebPage::exitAcceleratedCompositingMode(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 72) + 240))(*(void *)(a1 + 72), a2, 0);
}

void WebKit::WebLocalFrameLoaderClient::didChangeScrollOffset(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          unint64_t v6 = *(void **)(*(void *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v6 + 1368))(v6) & 1) == 0)
          {
            uint64_t v7 = *(void *)(v6[2] + 8);
            if (v7)
            {
              CFRetain(*(CFTypeRef *)(v7 - 8));
              uint64_t v8 = *(void *)(*((void *)this + 11) + 8);
              if (*(void *)(*(void *)(v8 + 128) + 8) == v8 && *(void *)(v8 + 288)) {
                WebKit::WebPage::updateMainFrameScrollOffsetPinning((WebKit::WebPage *)(v7 - 16));
              }
              uint64_t v9 = *(const void **)(v7 - 8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

IPC::Encoder *WebKit::WebPage::updateMainFrameScrollOffsetPinning(WebKit::WebPage *this)
{
  uint64_t result = (IPC::Encoder *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    uint64_t v3 = result;
    ++*((_DWORD *)result + 2);
    uint64_t result = (IPC::Encoder *)WebCore::ScrollableArea::edgePinnedState((IPC::Encoder *)((char *)result + 64));
    int v5 = (int)result;
    if (result != *((_DWORD *)this + 212))
    {
      uint64_t v4 = (char *)&v5;
      uint64_t result = IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollOffsetPinningForMainFrame>((uint64_t)this + 32, &v4);
      *((_DWORD *)this + 212) = v5;
    }
    if (*((_DWORD *)v3 + 2) == 1) {
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)v3 + 8))(v3);
    }
    else {
      --*((_DWORD *)v3 + 2);
    }
  }
  return result;
}

void WebKit::WebChromeClient::contentsSizeChanged(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WebCore::IntSize *a3)
{
  uint64_t v6 = *((void *)a2 + 36);
  if (v6) {
    ++*(_DWORD *)(v6 + 8);
  }
  if (*(WebCore::LocalFrame **)(*(void *)(*((void *)a2 + 3) + 8) + 160) == a2)
  {
    uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 32) + 56))(v8 + 32);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 1895;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    unsigned __int8 v18 = v10;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v10, (int *)a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v8 + 32) + 32))(v8 + 32, &v18, 0);
    char v12 = v18;
    unsigned __int8 v18 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v15, v16);
    }
    (*(void (**)(void, void, void, const WebCore::IntSize *))(**(void **)(v8 + 72) + 112))(*(void *)(v8 + 72), *((void *)a2 + 4), *((void *)a2 + 5), a3);
    if (v6)
    {
      if (*(unsigned char *)(v6 + 312) != 1)
      {
        int v13 = *(void *)(v6 + 152) != 0;
        int v14 = *(void *)(v6 + 160) != 0;
        if (*((unsigned __int8 *)this + 8) != v13 || *((unsigned __int8 *)this + 9) != v14)
        {
          v17[0] = *(void *)(v6 + 152) != 0;
          v17[1] = v14;
          IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollbarsForMainFrame>(v8 + 32, v17);
          *((unsigned char *)this + 8) = v13;
          *((unsigned char *)this + 9) = v14;
        }
      }
    }
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    else {
      --*(_DWORD *)(v6 + 8);
    }
  }
}

uint64_t *WebKit::RemoteLayerTreeDrawingArea::mainFrameContentSizeChanged(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t result = (uint64_t *)WebKit::RemoteLayerTreeDrawingArea::rootLayerInfoWithFrameIdentifier(a1, a2, a3);
  if (result)
  {
    uint64_t v6 = *result;
    float32x2_t v7 = vcvt_f32_s32(*a4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, float32x2_t *))(*(void *)v6 + 160))(v6, &v7);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::rootLayerInfoWithFrameIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 100);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = 0;
  for (uint64_t result = *(void *)(a1 + 88); *(void *)(result + 24) != a2 || *(void *)(result + 32) != a3; result += 40)
  {
    if (v3 == ++v4) {
      return 0;
    }
  }
  if (v4 >= v3) {
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidLayout(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    (*(void (**)(void, uint64_t, WebKit::WebFrame *))(**(void **)(v3 + 360) + 152))(*(void *)(v3 + 360), v3, this[2]);
    WebKit::WebPage::recomputeShortCircuitHorizontalWheelEventsState((unsigned int *)v3);
    WebKit::WebPage::updateSelectionAppearance((WebCore::Page **)v3);
    unint64_t v4 = this[2];
    if (v4 == *(WebKit::WebFrame **)(WebKit::WebFrame::page(v4) + 88))
    {
      uint64_t v5 = v3 + 32;
      uint64_t v6 = *(WebCore::Page **)(v3 + 48);
      if (v6) {
        uint64_t v6 = (WebCore::Page *)WebCore::Page::renderTreeSize(v6);
      }
      int v13 = v6;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v3 + 32);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 2079;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      int v14 = v8;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, (uint64_t *)&v13);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v3 + 32, &v14, 0);
      uint64_t v10 = v14;
      int v14 = 0;
      if (v10)
      {
        IPC::Encoder::~Encoder(v10, v9);
        WTF::fastFree(v11, v12);
      }
      WebKit::WebPage::mainFrameDidLayout((WebCore::Page **)v3);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

unsigned int *WebKit::WebPage::recomputeShortCircuitHorizontalWheelEventsState(unsigned int *this)
{
  uint64_t v1 = this;
  if (*((unsigned char *)this + 853))
  {
LABEL_2:
    int v2 = 0;
    goto LABEL_3;
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 160);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 144))
      {
        uint64_t v5 = *(void *)(v4 + 288);
        if (!v5
          || ((uint64_t v6 = *(void *)(v5 + 64),
               ++*(_DWORD *)(v5 + 8),
               (this = (unsigned int *)(*(uint64_t (**)(void))(v6 + 392))()) == 0)
           || !*((unsigned char *)this + 136)
            ? (char v7 = 0)
            : (char v7 = 1),
              *(_DWORD *)(v5 + 8) == 1
            ? (this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5))
            : (unsigned int *)--*(_DWORD *)(v5 + 8),
              (v7 & 1) == 0))
        {
          while (1)
          {
            if (!*(unsigned char *)(v4 + 144))
            {
              atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
              uint64_t v8 = *(void *)(v4 + 288);
              if (v8)
              {
                ++*(_DWORD *)(v8 + 8);
                uint64_t v9 = *(void **)(v8 + 1296);
                if (v9)
                {
                  uint64_t v11 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(*(void ***)(v8 + 1296));
                  unsigned int v26 = v9;
                  uint64_t v27 = v11;
                  unsigned int v28 = v12;
                  uint64_t v13 = *v9;
                  if (*v9)
                  {
                    uint64_t v14 = *(unsigned int *)(v13 - 4);
                    long long v15 = (void *)(v13 + 8 * v14);
                    uint64_t v29 = v15;
                    unint64_t v30 = v15;
                    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
                  }
                  else
                  {
                    uint64_t v29 = 0;
                    unint64_t v30 = 0;
                    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
                    long long v15 = 0;
                    uint64_t v14 = 0;
                  }
                  int v21 = v9;
                  uint64_t v22 = v15;
                  uint64_t v23 = v15;
                  int v24 = v15;
                  uint64_t v25 = v13 + 8 * v14;
                  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v21);
                  uint64_t v16 = v27;
                  int v17 = v22;
                  while (1)
                  {
                    if (v16 == v17)
                    {
                      int v10 = 0;
                      goto LABEL_20;
                    }
                    unsigned __int8 v18 = *(WebCore::ScrollableArea **)(*v16 + 8);
                    (*(void (**)(WebCore::ScrollableArea *))(*(void *)v18 + 16))(v18);
                    if (WebCore::ScrollableArea::scrollbarsCanBeActive(v18))
                    {
                      uint64_t v19 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(void *)v18 + 392))(v18);
                      if (v19)
                      {
                        if (*(unsigned char *)(v19 + 136)) {
                          break;
                        }
                      }
                    }
                    (*(void (**)(WebCore::ScrollableArea *))(*(void *)v18 + 24))(v18);
                    int v20 = v16 + 1;
                    uint64_t v27 = v16 + 1;
                    if (v16 + 1 != v28)
                    {
                      while ((unint64_t)(*v20 + 1) <= 1)
                      {
                        if (++v20 == v28)
                        {
                          int v20 = v28;
                          break;
                        }
                      }
                      uint64_t v27 = v20;
                    }
                    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
                    ++*((_DWORD *)v26 + 2);
                    uint64_t v16 = v27;
                  }
                  (*(void (**)(WebCore::ScrollableArea *))(*(void *)v18 + 24))(v18);
                  int v10 = 1;
                }
                else
                {
                  int v10 = 4;
                }
LABEL_20:
                if (*(_DWORD *)(v8 + 8) == 1) {
                  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
                }
                else {
                  --*(_DWORD *)(v8 + 8);
                }
                this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
                if ((v10 | 4) != 4) {
                  goto LABEL_2;
                }
              }
              else
              {
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
              }
            }
            this = (unsigned int *)WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v4 + 48), 0);
            uint64_t v4 = (uint64_t)this;
            int v2 = 1;
            if (!this) {
              goto LABEL_3;
            }
          }
        }
        goto LABEL_2;
      }
    }
  }
  int v2 = 1;
LABEL_3:
  if (*((unsigned __int8 *)v1 + 852) != v2)
  {
    *((unsigned char *)v1 + 852) = v2;
    LOBYTE(v26) = v2;
    return (unsigned int *)IPC::MessageSender::send<Messages::WebPageProxy::SetCanShortCircuitHorizontalWheelEvents>((uint64_t)(v1 + 8), (char *)&v26);
  }
  return this;
}

uint64_t WebKit::WebPage::updateSelectionAppearance(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v9, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v9);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    uint64_t v5 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    uint64_t v6 = v5;
    if (!*((unsigned char *)v5 + 88))
    {
      if (!WebCore::Editor::client(v5)
        || (uint64_t v7 = WebCore::Editor::client(v6), (*(unsigned int (**)(uint64_t))(*(void *)v7 + 120))(v7)))
      {
        if (*((void *)v6 + 4)) {
          uint64_t v8 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
        }
        else {
          uint64_t v8 = 0;
        }
        if (v8 || *(unsigned char *)(*(void *)(*(void *)(v3 + 296) + 3096) + 153)) {
          WebKit::WebPage::didChangeSelection((WebKit::WebPage *)this, (atomic_uint *)v3);
        }
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_19863E0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (!*a10)
    {
      __break(0xC471u);
      JUMPOUT(0x19863E11CLL);
    }
    --*a10;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebEditorClient::shouldRevealCurrentSelectionAfterInsertion(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(v2 + 1286);
}

atomic_uchar *WebKit::WebPage::mainFrameDidLayout(WebCore::Page **this)
{
  uint64_t v2 = (_DWORD *)MEMORY[0x1E4FB64F0];
  ++*MEMORY[0x1E4FB64F0];
  int IsUpToDate = WebCore::Page::pageCountAssumingLayoutIsUpToDate(this[6]);
  if (IsUpToDate != *((_DWORD *)this + 214))
  {
    int v4 = IsUpToDate;
    uint64_t v5 = (*((uint64_t (**)(char *))this[4] + 7))((char *)this + 32);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 1899;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    IntSize v14 = (IntSize)v6;
    IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v6, v4);
    (*((void (**)(char *, IntSize *, void))this[4] + 4))((char *)this + 32, &v14, 0);
    uint64_t v8 = (IPC::Encoder *)v14;
    IntSize v14 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v12, v13);
    }
    *((_DWORD *)this + 214) = v4;
  }
  uint64_t v9 = this[34];
  if (v9 && *((unsigned char *)v9 + 40)) {
    *((unsigned char *)v9 + 40) = 0;
  }
  uint64_t result = (atomic_uchar *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)this);
  if (result)
  {
    uint64_t v11 = result;
    ++*((_DWORD *)result + 2);
    IntSize v14 = (IntSize)WebCore::ScrollView::contentsSize((WebCore::ScrollView *)result);
    uint64_t result = (atomic_uchar *)WebCore::ViewportConfiguration::setContentsSize((WebCore::ViewportConfiguration *)(this + 119), &v14);
    if (result) {
      uint64_t result = WebKit::WebPage::viewportConfigurationChanged((uint64_t)this, 0);
    }
    if (*((_DWORD *)v11 + 2) == 1) {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v11 + 8))(v11);
    }
    else {
      --*((_DWORD *)v11 + 2);
    }
  }
  --*v2;
  return result;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didLayoutForFrame(uint64_t this, WebPage *a2, WebFrame *a3)
{
  uint64_t v3 = *(uint64_t (**)(void, WebFramePrivate *, void))(this + 168);
  if (v3) {
    return v3(*((void *)a2 + 1), a3->_private, *(void *)(this + 16));
  }
  return this;
}

void didLayoutForFrame(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a3 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didLayoutForFrame:", a3, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_19863E3BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebPage::updateIsInWindow(WebKit::WebPage *this, char a2)
{
  uint64_t v2 = this;
  if ((*((_WORD *)this + 912) & 0x10) != 0)
  {
    if (*((unsigned char *)this + 328)) {
      this = (WebKit::WebPage *)WTF::RunLoop::TimerBase::start();
    }
    uint64_t v3 = WebKit::WebProcess::singleton(this);
    WebKit::WebProcess::pageDidEnterWindow(v3, *((void *)v2 + 5));
    WebCore::Page::layoutIfNeeded();
  }
  else
  {
    WTF::RunLoop::TimerBase::stop((WebKit::WebPage *)((char *)this + 296));
    CanStartMedia = (WebKit::WebProcess *)WebCore::Page::setCanStartMedia(*((WebCore::Page **)v2 + 6));
    if ((a2 & 1) == 0)
    {
      int v10 = (void *)WebKit::WebProcess::singleton(CanStartMedia);
      WebKit::WebProcess::pageWillLeaveWindow(v10, *((void *)v2 + 5));
    }
  }
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v2 + 20, &v16);
  uint64_t v4 = *((void *)v2 + 20);
  if (v4)
  {
    uint64_t v6 = *(unsigned int *)(v4 - 4);
    uint64_t v5 = v4 + 8 * v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v11 = (char *)v2 + 160;
  uint64_t v12 = v5;
  uint64_t v13 = v5;
  uint64_t v14 = v5;
  uint64_t v15 = v4 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  while (v17 != v12)
  {
    WebKit::PluginView::didChangeIsInWindow(*(WebKit::PluginView **)(*(void *)v17 + 8));
    uint64_t result = WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
  }
  return result;
}

atomic_uchar *WebKit::WebPage::viewportConfigurationChanged(uint64_t a1, char a2)
{
  uint64_t v4 = (WebCore::ViewportConfiguration *)(a1 + 952);
  WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(a1 + 952));
  double v6 = v5;
  WebCore::ViewportConfiguration::initialScaleIgnoringContentSize(v4);
  uint64_t v7 = *(float **)(a1 + 48);
  float v8 = v7[115];
  *(float *)&double v9 = v9;
  WebCore::Page::setInitialScaleIgnoringContentSize((WebCore::Page *)v7, *(float *)&v9);
  uint64_t v10 = *(void *)(a1 + 48);
  if ((~*(_DWORD *)(*(void *)(v10 + 112) + 720) & 0x50) == 0)
  {
    float v11 = *(float *)(v10 + 460);
    if (vabdd_f64(v8, v11) >= 0.00999999978 && (v8 < 1.0 || v11 < 1.0))
    {
      uint64_t v13 = *(void *)(v10 + 160);
      BOOL v14 = v13 && *(unsigned char *)(v13 + 144) == 0;
      if (v14 && *(void *)(v13 + 288))
      {
        WebCore::TimerBase::start();
        uint64_t v10 = *(void *)(a1 + 48);
      }
    }
  }
  uint64_t v15 = *(WebCore::Settings **)(v10 + 112);
  unint64_t v16 = *((void *)v15 + 90);
  if ((v16 & 0x20) == 0 && v6 <= 1.0 != ((v16 >> 4) & 1)) {
    WebCore::Settings::setTextAutosizingEnabled(v15);
  }
  v44.m_location = (IntPoint)WebCore::ViewportConfiguration::layoutSize(v4);
  if (WebKit::WebPage::setFixedLayoutSize((WebKit::WebPage *)a1, (IntSize *)&v44)) {
    WebKit::WebPage::resetTextAutosizing(*(void *)(*(void *)(a1 + 48) + 160));
  }
  if (*(unsigned char *)(a1 + 1283) && (a2 & 1) == 0)
  {
    double v18 = WebKit::WebPage::totalScaleFactor((WebKit::WebPage *)a1, v17) / *(float *)(*(void *)(a1 + 48) + 368);
    if (*(unsigned char *)(a1 + 1169))
    {
      WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)v4);
      double v20 = v19 * 5.0;
    }
    else
    {
      double v20 = *(double *)(a1 + 992);
    }
    WebCore::ViewportConfiguration::minimumScale(v4);
    if (v20 >= v18) {
      double v22 = v18;
    }
    else {
      double v22 = v20;
    }
    if (v22 >= v21) {
      double v6 = v22;
    }
    else {
      double v6 = v21;
    }
  }
  uint64_t v23 = *(WebCore::Page **)(a1 + 48);
  WebCore::ViewportConfiguration::minimumScale(v4);
  *(float *)&double v24 = v24;
  WebCore::Page::setZoomedOutPageScaleFactor(v23, *(float *)&v24);
  WebKit::WebPage::updateSizeForCSSDefaultViewportUnits((WebKit::WebPage *)a1);
  WebKit::WebPage::updateSizeForCSSSmallViewportUnits((WebKit::WebPage *)a1);
  WebKit::WebPage::updateSizeForCSSLargeViewportUnits((WebKit::WebPage *)a1);
  uint64_t result = (atomic_uchar *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (result)
  {
    unsigned int v26 = (WebCore::ScrollView *)result;
    IntPoint v46 = (IntPoint)WebCore::ScrollableArea::visibleContentRect();
    if (!*(unsigned char *)(a1 + 1280))
    {
      float v27 = 1.0 / v6;
      float v28 = roundf(*(float *)(a1 + 1080) * v27);
      float v29 = -2147500000.0;
      if (v28 > -2147500000.0) {
        float v29 = (float)(int)v28;
      }
      if (v28 < 2147500000.0) {
        float v30 = v29;
      }
      else {
        float v30 = 2147500000.0;
      }
      float v31 = roundf(*(float *)(a1 + 1084) * v27);
      float v32 = 2147500000.0;
      if (v31 < 2147500000.0)
      {
        float v32 = -2147500000.0;
        if (v31 > -2147500000.0) {
          float v32 = (float)(int)v31;
        }
      }
      *(float *)&v44.m_location.m_CGFloat x = v30;
      *(float *)&v44.m_location.m_CGFloat y = v32;
      __int16 v33 = (WTF::MonotonicTime *)WebCore::ScrollView::setUnobscuredContentSize(v26, (const WebCore::FloatSize *)&v44);
      WTF::MonotonicTime::now(v33);
      v44.m_location = 0;
      v44.m_size.m_CGFloat width = 0;
      uint64_t v45 = v34;
      WebCore::LocalFrameView::setScrollVelocity();
      if (!*(unsigned char *)(a1 + 1281))
      {
        uint64_t v35 = *(void *)(a1 + 72);
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v43, &v46);
        v44.m_location = (IntPoint)v43[0];
        *(float *)&v44.m_size.m_CGFloat width = v30;
        *(float *)&v44.m_size.m_CGFloat height = v32;
        (*(void (**)(uint64_t, IntRect *))(*(void *)v35 + 168))(v35, &v44);
      }
    }
    uint64_t result = WebKit::WebPage::scalePage((WebKit::WebPage *)a1, v6, (const WebCore::IntPoint *)&v46);
    if (!*(unsigned char *)(a1 + 1280))
    {
      v43[0] = WebCore::LocalFrameView::viewportConstrainedObjectsRect(v26);
      v43[1] = v36;
      v44.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v43, v36);
      v44.m_size = v37;
      WebCore::LocalFrameView::setCustomFixedPositionLayoutRect(v26, &v44);
      float v38 = ceilf(*(float *)(a1 + 1072));
      if (v38 >= 2147500000.0)
      {
        uint64_t v39 = 0x7FFFFFFFLL;
      }
      else if (v38 <= -2147500000.0)
      {
        uint64_t v39 = 0x80000000;
      }
      else
      {
        uint64_t v39 = (int)v38;
      }
      float v40 = ceilf(*(float *)(a1 + 1076));
      if (v40 >= 2147500000.0)
      {
        unint64_t v41 = 0x7FFFFFFF00000000;
      }
      else if (v40 <= -2147500000.0)
      {
        unint64_t v41 = 0x8000000000000000;
      }
      else
      {
        unint64_t v41 = (unint64_t)(int)v40 << 32;
      }
      IntSize v42 = (IntSize)(v41 | v39);
      return (atomic_uchar *)WebCore::LocalFrameView::setCustomSizeForResizeEvent(v26, v42);
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::updateSizeForCSSDefaultViewportUnits(WebKit::WebPage *this)
{
  uint64_t result = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    uint64_t v3 = result;
    ++result[2];
    WebCore::ViewportConfiguration::initialScaleIgnoringContentSize((WebKit::WebPage *)((char *)this + 952));
    uint64_t result = (_DWORD *)WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits();
    if (v3[2] == 1)
    {
      uint64_t v4 = *(uint64_t (**)(_DWORD *))(*(void *)v3 + 8);
      return (_DWORD *)v4(v3);
    }
    else
    {
      --v3[2];
    }
  }
  return result;
}

uint64_t WebKit::WebPage::localMainFrameView(WebKit::WebPage *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(void *)(v1 + 160);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    if (result)
    {
      uint64_t v3 = result;
      if ((*(unsigned int (**)(uint64_t))(*(void *)result + 704))(result)) {
        return 0;
      }
      else {
        return v3;
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::updateSizeForCSSSmallViewportUnits(WebKit::WebPage *this)
{
  uint64_t result = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    uint64_t v3 = result;
    ++result[2];
    WebCore::ViewportConfiguration::initialScaleIgnoringContentSize((WebKit::WebPage *)((char *)this + 952));
    uint64_t result = (_DWORD *)WebCore::LocalFrameView::setSizeForCSSSmallViewportUnits();
    if (v3[2] == 1)
    {
      uint64_t v4 = *(uint64_t (**)(_DWORD *))(*(void *)v3 + 8);
      return (_DWORD *)v4(v3);
    }
    else
    {
      --v3[2];
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::updateSizeForCSSLargeViewportUnits(WebKit::WebPage *this)
{
  uint64_t result = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    uint64_t v3 = result;
    ++result[2];
    WebCore::ViewportConfiguration::initialScaleIgnoringContentSize((WebKit::WebPage *)((char *)this + 952));
    uint64_t result = (_DWORD *)WebCore::LocalFrameView::setSizeForCSSLargeViewportUnits();
    if (v3[2] == 1)
    {
      uint64_t v4 = *(uint64_t (**)(_DWORD *))(*(void *)v3 + 8);
      return (_DWORD *)v4(v3);
    }
    else
    {
      --v3[2];
    }
  }
  return result;
}

void WebKit::RemoteLayerTreeDrawingArea::setExposedContentRect(WebKit::RemoteLayerTreeDrawingArea *this, const FloatRect *a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 5) + 8);
  if (v4) {
    double v5 = (WebKit::WebPage *)(v4 - 16);
  }
  else {
    double v5 = 0;
  }
  double v6 = (WebCore::ScrollView *)WebKit::WebPage::localMainFrameView(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 2);
    WebCore::ScrollView::exposedContentRect(v6);
    BOOL v12 = v8.n128_f32[0] == a2->m_location.m_x && v9 == a2->m_location.m_y;
    if (!v12
      || ((v8.n128_u32[0] = LODWORD(a2->m_size.m_width), v10 == v8.n128_f32[0])
        ? (BOOL v13 = v11 == a2->m_size.m_height)
        : (BOOL v13 = 0),
          !v13))
    {
      WebCore::ScrollView::setExposedContentRect(v7, a2);
      v8.n128_f64[0] = WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
    }
    if (*((_DWORD *)v7 + 2) == 1)
    {
      BOOL v14 = *(void (**)(WebCore::ScrollView *, __n128))(*(void *)v7 + 8);
      v14(v7, v8);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
}

void sub_19863EC68(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

double WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(WebKit::RemoteLayerTreeDrawingArea *this)
{
  if (*((unsigned char *)this + 224))
  {
    *((unsigned char *)this + 225) = 1;
  }
  else if ((*((void *)this + 25) & 0xFFFFFFFFFFFFLL) == 0 {
         || (double result = *(double *)((*((void *)this + 25) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  }
  {
    WebCore::TimerBase::start();
  }
  return result;
}

atomic_uchar *WebKit::WebPage::scalePage(WebKit::WebPage *this, double a2, const WebCore::IntPoint *a3)
{
  double v6 = *(float *)(*((void *)this + 6) + 368) * a2;
  double v8 = WebKit::WebPage::totalScaleFactor(this, a3);
  if (v6 != v8)
  {
    if (!*((unsigned char *)this + 1485))
    {
      uint64_t v9 = *((void *)this + 186);
      if (v9)
      {
        *((void *)this + 186) = 0;
        WTF::fastFree((WTF *)(v9 - 16), v7);
      }
    }
    *((unsigned char *)this + 1282) = 0;
  }
  float v10 = (atomic_uchar *)WebKit::WebPage::mainFramePlugIn(this, (WebCore::LocalFrame *)v7);
  float v11 = (float *)*((void *)this + 6);
  if (v10)
  {
    if (v11[89] != 1.0) {
      WebCore::Page::setPageScaleFactor((WebCore::Page *)v11, 1.0, (const IntPoint *)a3);
    }
    uint64_t v12 = *(void *)a3;
    return WebKit::PluginView::setPageScaleFactor(v10, v12, 1u, v6);
  }
  else
  {
    float v14 = v6;
    double result = (atomic_uchar *)WebCore::Page::setPageScaleFactor((WebCore::Page *)v11, v14, (const IntPoint *)a3);
    if (v6 != v8)
    {
      WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 20, &v29);
      uint64_t v15 = *((void *)this + 20);
      if (v15)
      {
        uint64_t v17 = *(unsigned int *)(v15 - 4);
        uint64_t v16 = v15 + 8 * v17;
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      double v24 = (char *)this + 160;
      uint64_t v25 = v16;
      uint64_t v26 = v16;
      uint64_t v27 = v16;
      uint64_t v28 = v15 + 8 * v17;
      WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
      while (v30 != v25)
      {
        WebKit::PluginView::setPageScaleFactor(*(atomic_uchar **)(*(void *)v30 + 8), *(void *)a3, 1u, v6);
        WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
      }
      uint64_t v18 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
      double v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)double v19 = 2023;
      *((void *)v19 + 1) = v18;
      *((void *)v19 + 66) = (char *)v19 + 16;
      *((void *)v19 + 67) = 512;
      *((void *)v19 + 68) = 0;
      *((void *)v19 + 70) = 0;
      *((void *)v19 + 69) = 0;
      IPC::Encoder::encodeHeader(v19);
      float v29 = v19;
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v19, a2);
      (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 4) + 32))((char *)this + 32, &v29, 0);
      double v21 = v29;
      float v29 = 0;
      if (v21)
      {
        IPC::Encoder::~Encoder(v21, v20);
        WTF::fastFree(v22, v23);
      }
      return (atomic_uchar *)WebKit::WebPage::platformDidScalePage((uint64_t)this);
    }
  }
  return result;
}

BOOL IPC::MessageSender::sendMessage(uint64_t a1, uint64_t *a2, char a3)
{
  double v5 = (atomic_uchar *volatile *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v5)
  {
    double v6 = v5;
    char v7 = 0;
    atomic_uchar *volatile v8 = *v5;
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    ++*((void *)v8 + 1);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    int v10 = IPC::Connection::sendMessageImpl((uint64_t)v6, a2, a3, 0);
    char v11 = 0;
    atomic_uchar *volatile v12 = *v6;
    atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](v12);
    }
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = v13 - 1;
    *((void *)v12 + 1) = v13 - 1;
    if (v13 == 1)
    {
      uint64_t v20 = *((void *)v12 + 2);
      uint64_t v16 = *((void *)v12 + 3);
      *((void *)v12 + 3) = 0;
      BOOL v15 = v20 == 0;
    }
    else
    {
      BOOL v15 = 0;
      uint64_t v16 = 0;
    }
    int v17 = 1;
    atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
    }
    if (!v14)
    {
      uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v18 = &unk_1EE9B37E8;
      *(void *)(v18 + 8) = v12;
      *(void *)(v18 + 16) = v16;
      *(unsigned char *)(v18 + 24) = v15;
      uint64_t v21 = v18;
      WTF::ensureOnMainRunLoop();
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
  }
  else
  {
    int v10 = IPC::Connection::sendMessageImpl(0, a2, a3, 0);
  }
  return v10 == 0;
}

uint64_t non-virtual thunk to'WebKit::WebPage::messageSenderConnection(WebKit::WebPage *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
}

void *WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebPage::messageSenderDestinationID(WebKit::WebPage *this)
{
  return *((void *)this + 1);
}

double WebKit::WebPage::totalScaleFactor(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v3 = (WebKit::PluginView *)WebKit::WebPage::mainFramePlugIn(this, a2);
  if (!v3) {
    return *(float *)(*((void *)this + 6) + 356);
  }

  return WebKit::PluginView::pageScaleFactor(v3);
}

uint64_t WebKit::WebPage::mainFramePlugIn(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 160);
  if (!v3 || *(unsigned char *)(v3 + 144)) {
    return 0;
  }
  double v5 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v6 = WebKit::WebPage::pluginViewForFrame(v3, a2);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  return v6;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9B5670;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    double result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::pluginViewForFrame(uint64_t this, WebCore::LocalFrame *a2)
{
  if (this)
  {
    uint64_t v2 = *(void *)(this + 296);
    if (v2 && (*(_WORD *)(v2 + 3406) & 8) != 0)
    {
      *(_DWORD *)(v2 + 28) += 2;
      this = WebCore::PluginDocument::pluginWidget((WebCore::PluginDocument *)v2);
      if (*(_DWORD *)(v2 + 28) == 2)
      {
        uint64_t v3 = this;
        if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
        }
        return v3;
      }
      else
      {
        *(_DWORD *)(v2 + 28) -= 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return this;
}

void *WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v8 = *((unsigned int *)v6 - 1);
    char v7 = &v6[v8];
  }
  else
  {
    char v7 = 0;
    uint64_t v8 = 0;
  }
  a2[3] = v7;
  a2[4] = &v6[v8];

  return WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

void *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin(void **a1)
{
  double result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)result - 1);
  uint64_t v4 = &result[v3];
  if (!*((_DWORD *)result - 3)) {
    return &result[v3];
  }
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v5 -= 8;
      if (!v5) {
        return v4;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::setFixedLayoutSize(WebKit::WebPage *this, IntSize *a2)
{
  uint64_t v4 = (WebCore::ScrollView *)WebKit::WebPage::localMainFrameView(this);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  ++*((_DWORD *)v4 + 2);
  uint64_t v6 = WebCore::ScrollView::fixedLayoutSize(v4);
  BOOL v7 = a2->m_width == v6 && a2->m_height == HIDWORD(v6);
  uint64_t v8 = !v7;
  if (!v7)
  {
    WebCore::ScrollView::setFixedLayoutSize(v5, a2);
    uint64_t v10 = *((void *)this + 4);
    int v9 = (char *)this + 32;
    uint64_t v11 = (*(uint64_t (**)(char *))(v10 + 56))(v9);
    atomic_uchar *volatile v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)atomic_uchar *volatile v12 = 1970;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v18 = v12;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, (int *)a2);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v18, 0);
    uint64_t v14 = v18;
    uint64_t v18 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v16, v17);
    }
  }
  if (*((_DWORD *)v5 + 2) == 1) {
    (*(void (**)(WebCore::ScrollView *))(*(void *)v5 + 8))(v5);
  }
  else {
    --*((_DWORD *)v5 + 2);
  }
  return v8;
}

uint64_t IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v6 = *a2;
  IPC::Encoder::operator<<<int>(a1, &v6);
  int v5 = a2[1];
  return IPC::Encoder::operator<<<int>(a1, &v5);
}

uint64_t WebKit::WebPage::platformDidScalePage(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 72);
  if (*(unsigned char *)(v1 + 24))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 248);
    uint64_t v3 = *(void *)(this + 1560);
    if (!*(unsigned char *)(this + 1664)) {
      *(unsigned char *)(this + 1664) = 1;
    }
    *(void *)(this + 1648) = v2;
    *(void *)(this + 1656) = v3;
  }
  return this;
}

uint64_t WebKit::RemoteRenderingBackend::messageSenderConnection(WebKit::RemoteRenderingBackend *this)
{
  return *(void *)(*((void *)this + 5) + 40);
}

uint64_t non-virtual thunk to'WebKit::AuxiliaryProcess::messageSenderConnection(WebKit::AuxiliaryProcess *this)
{
  return *((void *)this + 2);
}

uint64_t WebKit::WebPage::resetTextAutosizing(uint64_t this)
{
  if (this)
  {
    uint64_t v1 = this;
    do
    {
      if (!*(unsigned char *)(v1 + 144))
      {
        uint64_t v2 = *(void *)(v1 + 296);
        if (v2)
        {
          uint64_t v3 = *(WebCore::RenderElement **)(v2 + 1984);
          if (v3) {
            WebCore::RenderElement::resetTextAutosizing(v3);
          }
        }
      }
      this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v1 + 48), 0);
      uint64_t v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebSWServerConnection::messageSenderConnection(WebKit::WebSWServerConnection *this)
{
  return *((void *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::WebSWClientConnection::messageSenderConnection(WebKit::WebSWClientConnection *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    uint64_t v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    char v87 = 0;
    if (a2)
    {
      IntRect v44 = qword_1EB358028;
      if (os_log_type_enabled((os_log_t)qword_1EB358028, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = *(WebKit::WebFrame **)(a1 + 16);
        uint64_t v46 = *((void *)v45 + 10);
        uint64_t v47 = WebKit::WebFrame::page(v45);
        if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
          uint64_t v48 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
        }
        else {
          uint64_t v48 = 0;
        }
        *(_DWORD *)buf = 134219008;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v45;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v89 = v46;
        __int16 v90 = 2048;
        uint64_t v91 = v47;
        __int16 v92 = 2048;
        uint64_t v93 = v48;
        _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone: dispatching DidFirstLayoutForFrame", buf, 0x34u);
      }
      uint64_t v49 = (WebKit::WebProcess *)(*(uint64_t (**)(void, uint64_t, void, void **))(**(void **)(v5 + 360)
                                                                                              + 136))(*(void *)(v5 + 360), v5, *(void *)(a1 + 16), &v87);
      *(_OWORD *)uint64_t v83 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
      WebKit::WebProcess::singleton(v49);
      *(void *)buf = &unk_1EE9E6F68;
      WebKit::UserData::transform(v87, (uint64_t)buf, (uint64_t *)&v86);
      uint64_t v50 = v86;
      if (v86) {
        CFRetain(*((CFTypeRef *)v86 + 1));
      }
      v82[0] = v50;
      *(void *)buf = v83;
      *(void *)&uint8_t buf[8] = v82;
      IPC::MessageSender::send<Messages::WebPageProxy::DidFirstLayoutForFrame>(v5 + 32, (uint64_t **)buf);
      uint64_t v51 = v82[0];
      v82[0] = 0;
      if (v51) {
        CFRelease(*((CFTypeRef *)v51 + 1));
      }
      char v52 = v86;
      uint64_t v86 = 0;
      if (v52) {
        CFRelease(*((CFTypeRef *)v52 + 1));
      }
    }
    v83[0] = 0;
    v83[1] = 0;
    int v84 = 0;
    char v85 = 1;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BOOL v7 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if (a2)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v64 = *((void *)v82[0] + 1);
          unint64_t v65 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v64 = 0;
          unint64_t v65 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v64, v65);
        BOOL v7 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        BOOL v7 = v82[0];
        if (v82[0]) {
          int v36 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v36 = 0;
        }
        int v84 = v36;
      }
    }
    v82[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v9 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 2) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v66 = *((void *)v82[0] + 1);
          unint64_t v67 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v66, v67);
        int v9 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        int v9 = v82[0];
        if (v82[0]) {
          int v37 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v37 = 0;
        }
        int v84 = v37;
      }
    }
    v82[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v11 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 4) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v68 = *((void *)v82[0] + 1);
          unint64_t v69 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v68 = 0;
          unint64_t v69 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v68, v69);
        uint64_t v11 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        uint64_t v11 = v82[0];
        if (v82[0]) {
          int v38 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v38 = 0;
        }
        int v84 = v38;
      }
    }
    v82[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v13 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 0x10) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v70 = *((void *)v82[0] + 1);
          unint64_t v71 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v70 = 0;
          unint64_t v71 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v70, v71);
        uint64_t v13 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        uint64_t v13 = v82[0];
        if (v82[0]) {
          int v39 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v39 = 0;
        }
        int v84 = v39;
      }
    }
    v82[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BOOL v15 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 0x20) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v72 = *((void *)v82[0] + 1);
          unint64_t v73 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v72 = 0;
          unint64_t v73 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v72, v73);
        BOOL v15 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        BOOL v15 = v82[0];
        if (v82[0]) {
          int v40 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v40 = 0;
        }
        int v84 = v40;
      }
    }
    v82[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v17 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 0x40) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v74 = *((void *)v82[0] + 1);
          unint64_t v75 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v74 = 0;
          unint64_t v75 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v74, v75);
        int v17 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        int v17 = v82[0];
        if (v82[0]) {
          int v41 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v41 = 0;
        }
        int v84 = v41;
      }
    }
    v82[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    double v19 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 0x80) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v76 = *((void *)v82[0] + 1);
          unint64_t v77 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v76 = 0;
          unint64_t v77 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v76, v77);
        double v19 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        double v19 = v82[0];
        if (v82[0]) {
          int v42 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v42 = 0;
        }
        int v84 = v42;
      }
    }
    v82[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v21 = *(WTF::StringImpl **)buf;
    v82[0] = *(WTF **)buf;
    if ((a2 & 0x100) != 0)
    {
      if (v84 && (WTF::StringBuilder::append(), v84) || v83[1])
      {
        if (v82[0])
        {
          uint64_t v78 = *((void *)v82[0] + 1);
          unint64_t v79 = *((unsigned int *)v82[0] + 1) | ((unint64_t)((*((_DWORD *)v82[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v78 = 0;
          unint64_t v79 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)v83, v78, v79);
        uint64_t v21 = v82[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)v83, v82);
        uint64_t v21 = v82[0];
        if (v82[0]) {
          int v43 = *((_DWORD *)v82[0] + 1);
        }
        else {
          int v43 = 0;
        }
        int v84 = v43;
      }
    }
    v82[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    double v22 = qword_1EB358028;
    if (os_log_type_enabled((os_log_t)qword_1EB358028, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(WebKit::WebFrame **)(a1 + 16);
      uint64_t v24 = *((void *)v23 + 10);
      uint64_t v25 = WebKit::WebFrame::page(v23);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
        uint64_t v26 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = v83[0];
      if (v83[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v83),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v83),
            (uint64_t v27 = v83[0]) != 0))
      {
        *(_DWORD *)v27 += 2;
      }
      uint64_t v86 = v27;
      WTF::String::utf8();
      if (v82[0]) {
        uint64_t v28 = (char *)v82[0] + 16;
      }
      else {
        uint64_t v28 = 0;
      }
      *(_DWORD *)buf = 134219266;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v23;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v89 = v24;
      __int16 v90 = 2048;
      uint64_t v91 = v25;
      __int16 v92 = 2048;
      uint64_t v93 = v26;
      __int16 v94 = 2082;
      char v95 = v28;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone: dispatching DidReachLayoutMilestone (milestones=%{public}s)", buf, 0x3Eu);
      uint64_t v30 = v82[0];
      v82[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1) {
          WTF::fastFree(v30, v29);
        }
        else {
          --*(_DWORD *)v30;
        }
      }
      float v31 = v86;
      uint64_t v86 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    WebKit::WebPage::dispatchDidReachLayoutMilestone(v5, a2);
    if ((a2 & 2) != 0)
    {
      char v53 = qword_1EB358028;
      if (os_log_type_enabled((os_log_t)qword_1EB358028, OS_LOG_TYPE_DEFAULT))
      {
        char v54 = *(WebKit::WebFrame **)(a1 + 16);
        uint64_t v55 = *((void *)v54 + 10);
        uint64_t v56 = WebKit::WebFrame::page(v54);
        if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
          uint64_t v57 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
        }
        else {
          uint64_t v57 = 0;
        }
        *(_DWORD *)buf = 134219008;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v54;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v89 = v55;
        __int16 v90 = 2048;
        uint64_t v91 = v56;
        __int16 v92 = 2048;
        uint64_t v93 = v57;
        _os_log_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone: dispatching DidFirstVisuallyNonEmptyLayoutForFrame", buf, 0x34u);
      }
      uint64_t v58 = (WebKit::WebProcess *)(*(uint64_t (**)(void, uint64_t, void, void **))(**(void **)(v5 + 360)
                                                                                              + 144))(*(void *)(v5 + 360), v5, *(void *)(a1 + 16), &v87);
      *(_OWORD *)char v82 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
      WebKit::WebProcess::singleton(v58);
      *(void *)buf = &unk_1EE9E6F68;
      uint64_t v59 = (WTF::WallTime *)WebKit::UserData::transform(v87, (uint64_t)buf, (uint64_t *)&v81);
      long long v60 = (WTF::StringImpl *)v81;
      if (v81) {
        uint64_t v59 = (WTF::WallTime *)CFRetain(v81[1]);
      }
      uint64_t v86 = v60;
      WTF::WallTime::now(v59);
      uint64_t v80 = v61;
      *(void *)buf = v82;
      *(void *)&uint8_t buf[8] = &v86;
      *(void *)&buf[16] = &v80;
      IPC::MessageSender::send<Messages::WebPageProxy::DidFirstVisuallyNonEmptyLayoutForFrame>(v5 + 32, (uint64_t **)buf);
      uint64_t v62 = v86;
      uint64_t v86 = 0;
      if (v62) {
        CFRelease(*((CFTypeRef *)v62 + 1));
      }
      uint64_t v63 = (uint64_t)v81;
      uint64_t v81 = 0;
      if (v63) {
        CFRelease(*(CFTypeRef *)(v63 + 8));
      }
    }
    __int16 v33 = v83[1];
    v83[1] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v32);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v34 = v83[0];
    v83[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v32);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    uint64_t v35 = (CFTypeRef *)v87;
    char v87 = 0;
    if (v35) {
      CFRelease(v35[1]);
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

uint64_t WebKit::WebFrame::page(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v5 + 1368))(v5)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5[2] + 8);
  if (v6) {
    return v6 - 16;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::overrideMediaType@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(this + 16) + 24);
  if (!v3
    || (uint64_t v4 = *(void *)(v3 + 8)) == 0
    || (uint64_t v5 = *(void *)(v4 + 24)) == 0
    || (uint64_t v6 = *(void *)(v5 + 8)) == 0
    || (BOOL v7 = *(void **)(*(void *)(v6 + 48) + 16),
        this = (*(uint64_t (**)(void *))(*v7 + 1368))(v7),
        (this & 1) != 0)
    || (uint64_t v8 = *(void *)(v7[2] + 8)) == 0)
  {
    int v9 = (_DWORD *)*MEMORY[0x1E4F30968];
    if (!*MEMORY[0x1E4F30968]) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v9 = *(_DWORD **)(v8 + 2216);
  if (v9) {
LABEL_8:
  }
    *v9 += 2;
LABEL_9:
  *a2 = v9;
  return this;
}

uint64_t WebCore::ChromeClient::isEmptyChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

CFTypeRef WebKit::UserData::transform@<X0>(CFTypeRef result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    if (WebKit::shouldTransform((uint64_t)result, a2))
    {
      return (CFTypeRef)WebKit::transformGraph(v5, a2, a3);
    }
    else
    {
      double result = CFRetain(*(CFTypeRef *)(v5 + 8));
      *a3 = v5;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebKit::WebPage::dispatchDidReachLayoutMilestone(uint64_t a1, unsigned __int16 a2)
{
  __int16 v2 = a2;
  uint64_t v17 = 0;
  (*(void (**)(void, uint64_t, void, uint64_t *))(**(void **)(a1 + 360) + 160))(*(void *)(a1 + 360), a1, a2, &v17);
  uint64_t updated = *(IPC::Encoder **)(a1 + 72);
  if (updated) {
    BOOL v5 = (v2 & 0x1A4) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t updated = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *, void))(*(void *)updated + 360))(updated, v2 & 0x1A4);
    if (updated) {
      v2 &= 0xFE5Bu;
    }
  }
  if (v2)
  {
    uint64_t updated = (IPC::Encoder *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
    if (updated)
    {
      uint64_t v18 = *(IPC::Encoder **)(WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1) + 1288);
      uint64_t updated = WebKit::WebPage::updateIntrinsicContentSizeIfNeeded((IPC::Encoder *)a1, (const WebCore::IntSize *)&v18);
    }
  }
  WTF::WallTime::now(updated);
  double v7 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 1938;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v18 = v11;
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v11, v2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, v7);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v18, 0);
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v12);
    WTF::fastFree(v15, v16);
  }
  uint64_t v14 = v17;
  uint64_t v17 = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
}

IPC::Encoder *WebKit::WebPage::updateIntrinsicContentSizeIfNeeded(IPC::Encoder *this, const WebCore::IntSize *a2)
{
  if (*((unsigned char *)this + 2136)) {
    *((unsigned char *)this + 2136) = 0;
  }
  if ((*((_DWORD *)this + 222) || *((void *)this + 112))
    && (*((_DWORD *)this + 535) != *(_DWORD *)a2 || *((_DWORD *)this + 536) != *((_DWORD *)a2 + 1)))
  {
    *(void *)((char *)this + 2140) = *(void *)a2;
    uint64_t v3 = (int *)a2;
    return IPC::MessageSender::send<Messages::WebPageProxy::DidChangeIntrinsicContentSize>((uint64_t)this + 32, &v3);
  }
  return this;
}

void WebKit::WebProcess::pageDidEnterWindow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::add((uint64_t)&v3, (uint64_t *)(a1 + 512), &v4);
  if (*(unsigned char *)(a1 + 584))
  {
    WebCore::DeferrableOneShotTimer::~DeferrableOneShotTimer((WebCore::DeferrableOneShotTimer *)(a1 + 520));
    *(unsigned char *)(a1 + 584) = 0;
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v9 = result & v7;
  uint64_t v10 = (uint64_t *)(v6 + 8 * (result & v7));
  uint64_t v11 = *v10;
  uint64_t v12 = *a3;
  if (*v10)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (v11 == v12)
      {
        uint64_t v23 = *a2;
        if (*a2) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 8 * v24;
        goto LABEL_12;
      }
      if (v11 == -1) {
        uint64_t v21 = v10;
      }
      unsigned int v9 = (v9 + v22) & v7;
      uint64_t v10 = (uint64_t *)(v6 + 8 * v9);
      uint64_t v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *uint64_t v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v12 = *a3;
      uint64_t v10 = v21;
    }
  }
  *uint64_t v10 = v12;
  uint64_t v13 = *a2;
  if (*a2) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 12) = v14;
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, v10);
    uint64_t v10 = (uint64_t *)result;
    uint64_t v15 = *a2;
    if (*a2) {
      unint64_t v18 = *(unsigned int *)(v15 - 4);
    }
    else {
      unint64_t v18 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v19 = v15 + 8 * v18;
  char v20 = 1;
LABEL_12:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = v20;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v13 = (uint64_t *)v6;
    do
    {
      uint64_t v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v15 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::lookupForReinsert(*a1, *v13);
        *uint64_t v15 = v14;
        if (v13 == a3) {
          uint64_t v11 = v15;
        }
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::SetCanShortCircuitHorizontalWheelEvents>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2064;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::SetCanShortCircuitHorizontalWheelEvents>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::SetCanShortCircuitHorizontalWheelEvents>(a1, a2, v4);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidFirstLayoutForFrame>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1925;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&>,0ul,1ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidFirstLayoutForFrame>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::DidFirstLayoutForFrame>(a1, a2, v4);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *a2);
  uint64_t v4 = a2[1];

  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, v4);
}

uint64_t WebKit::RemoteScrollingCoordinator::isUserScrollInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  if (!a2) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 176);
  if (result) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(result, v4) != 0;
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinator::isScrollSnapInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  if (!a2) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 168);
  if (result) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(result, v4) != 0;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setBounds(WebKit::PlatformCALayerRemoteTiledBacking *this, const WebCore::FloatRect *a2)
{
  WebKit::PlatformCALayerRemote::setBounds(this, a2);
  uint64_t v3 = *((void *)this + 105);

  return MEMORY[0x1F416DE98](v3);
}

void WebKit::PlatformCALayerRemote::setBounds(WebKit::PlatformCALayerRemote *this, const WebCore::FloatRect *a2)
{
  BOOL v2 = *(float *)a2 == *((float *)this + 110) && *((float *)a2 + 1) == *((float *)this + 111);
  if (!v2
    || (*((float *)a2 + 2) == *((float *)this + 112) ? (BOOL v3 = *((float *)a2 + 3) == *((float *)this + 113)) : (BOOL v3 = 0),
        !v3))
  {
    *(_OWORD *)((char *)this + 440) = *(_OWORD *)a2;
    uint64_t v4 = *((void *)this + 8);
    uint64_t v5 = *((void *)this + 9);
    *((void *)this + 8) = v4 | 0x100;
    *((void *)this + 9) = v5 | 0x100;
    if (*((unsigned char *)this + 648))
    {
      *((void *)this + 8) = v4 | 0x800100;
      *((void *)this + 9) = v5 | 0x800100;
    }
    WebKit::PlatformCALayerRemote::updateBackingStore(this);
  }
}

WKWebProcessBundleParameters *WebKit::InjectedBundle::bundleParameters(WebKit::InjectedBundle *this)
{
  uint64_t result = (WKWebProcessBundleParameters *)*((void *)this + 6);
  if (!result)
  {
    BOOL v3 = [WKWebProcessBundleParameters alloc];
    uint64_t result = [(WKWebProcessBundleParameters *)v3 initWithDictionary:MEMORY[0x1E4F1CC08]];
    uint64_t v4 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = result;
    if (v4)
    {
      CFRelease(v4);
      return (WKWebProcessBundleParameters *)*((void *)this + 6);
    }
  }
  return result;
}

void WebKit::WebValidationMessageClient::updateValidationBubbleStateIfNeeded(WebKit::WebValidationMessageClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    BOOL v2 = *(WebCore::Element **)(v1 + 8);
    if (v2)
    {
      uint64_t v5 = WebCore::Element::boundingBoxInRootViewCoordinates(v2);
      BOOL v6 = *((_DWORD *)this + 6) == v5 && *((_DWORD *)this + 7) == HIDWORD(v5);
      if (!v6 || (*((_DWORD *)this + 8) == v3 ? (BOOL v7 = *((_DWORD *)this + 9) == v4) : (BOOL v7 = 0), !v7))
      {
        int v8 = *(const WebCore::Element **)(*((void *)this + 2) + 8);
        WebKit::WebValidationMessageClient::hideValidationMessage(this, v8);
      }
    }
  }
}

unsigned int *WebKit::PlatformCALayerRemote::appendSublayer(WebKit::PlatformCALayerRemote *this, atomic_uint *a2)
{
  int v4 = (unsigned int *)(a2 + 2);
  atomic_fetch_add(a2 + 2, 1u);
  (*(void (**)(atomic_uint *))(*(void *)a2 + 112))(a2);
  unint64_t v5 = *((unsigned int *)this + 201);
  if (v5 == *((_DWORD *)this + 200))
  {
    unint64_t v12 = v5 + (v5 >> 2);
    if (v12 >= 0x10) {
      unint64_t v13 = v12 + 1;
    }
    else {
      unint64_t v13 = 16;
    }
    if (v13 <= v5 + 1) {
      unint64_t v14 = v5 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)this + 99, v14);
    uint64_t v15 = *((unsigned int *)this + 201);
    uint64_t v16 = *((void *)this + 99);
    atomic_fetch_add(a2 + 2, 1u);
    int v7 = *((_DWORD *)this + 201);
    *(void *)(v16 + 8 * v15) = a2;
  }
  else
  {
    uint64_t v6 = *((void *)this + 99);
    atomic_fetch_add(a2 + 2, 1u);
    *(void *)(v6 + 8 * v5) = a2;
    int v7 = *((_DWORD *)this + 201);
  }
  *((_DWORD *)this + 201) = v7 + 1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this);
  int v8 = (atomic_uint *)*((void *)this + 7);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  if (((*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 32))(a2) - 1) >= 4u)
  {
    __break(0xC471u);
    JUMPOUT(0x198641070);
  }
  uint64_t v10 = (unsigned int *)*((void *)a2 + 101);
  *((void *)a2 + 101) = v8;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x10uLL));

  return WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v4);
}

void sub_198641080(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

int8x16_t WebKit::PlatformCALayerRemote::setSublayers(int8x16_t *a1, int8x16_t *a2)
{
  (*(void (**)(int8x16_t *))(a1->i64[0] + 136))(a1);
  int v4 = (WTF **)&a1[49].i64[1];
  if (&a1[49].u64[1] != (unint64_t *)a2)
  {
    unsigned int v5 = a1[50].u32[1];
    uint64_t v6 = a2->u32[3];
    if (v5 > v6)
    {
      WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(&a1[49].u32[2], v6);
    }
    else
    {
      unsigned int v7 = a1[50].u32[0];
      if (v6 > v7)
      {
        if (v7)
        {
          if (v5) {
            WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(&a1[49].u32[2], 0);
          }
          uint64_t v24 = *v4;
          if (*v4)
          {
            a1[49].i64[1] = 0;
            a1[50].i32[0] = 0;
            WTF::fastFree(v24, (void *)v6);
          }
        }
        WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&a1[49].i64[1], a2->u32[3]);
      }
    }
    int v8 = (uint64_t *)a2->i64[0];
    uint64_t v9 = a1[50].u32[1];
    if (v9)
    {
      uint64_t v25 = *v4;
      uint64_t v26 = 8 * v9;
      do
      {
        uint64_t v27 = *v8;
        if (*v8) {
          atomic_fetch_add((atomic_uint *volatile)(v27 + 8), 1u);
        }
        uint64_t v28 = *(void *)v25;
        *(void *)uint64_t v25 = v27;
        if (v28) {
          WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v28 + 8));
        }
        ++v8;
        uint64_t v25 = (WTF *)((char *)v25 + 8);
        v26 -= 8;
      }
      while (v26);
      int v8 = (uint64_t *)a2->i64[0];
      unsigned __int32 v10 = a1[50].u32[1];
    }
    else
    {
      unsigned __int32 v10 = 0;
    }
    uint64_t v11 = a2->u32[3];
    if (v10 != v11)
    {
      unint64_t v12 = (void *)((char *)*v4 + 8 * v10);
      unint64_t v13 = &v8[v10];
      uint64_t v14 = 8 * v11 - 8 * v10;
      do
      {
        uint64_t v15 = *v13;
        if (*v13) {
          atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
        }
        *v12++ = v15;
        ++v13;
        v14 -= 8;
      }
      while (v14);
      unsigned __int32 v10 = a2->u32[3];
    }
    a1[50].i32[1] = v10;
  }
  uint64_t v16 = a2->u32[3];
  if (v16)
  {
    uint64_t v17 = (void *)a2->i64[0];
    uint64_t v18 = 8 * v16;
    do
    {
      (*(void (**)(void))(*(void *)*v17 + 112))();
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(&a1[3].u32[2], (uint64_t)a1);
      uint64_t v19 = (atomic_uint *)a1[3].i64[1];
      if (v19) {
        atomic_fetch_add(v19, 1u);
      }
      uint64_t v20 = *v17;
      if (((*(uint64_t (**)(void))(*(void *)*v17 + 32))(*v17) - 1) >= 4u)
      {
        __break(0xC471u);
        JUMPOUT(0x1986412C0);
      }
      int v22 = *(unsigned int **)(v20 + 808);
      *(void *)(v20 + 808) = v19;
      if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x10uLL));
  a1[4] = result;
  return result;
}

void sub_198641338(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

int8x16_t WebKit::PlatformCALayerRemote::removeFromSuperlayer(WebKit::PlatformCALayerRemote *this, void *a2)
{
  uint64_t v3 = *((void *)this + 101);
  if (v3)
  {
    int v4 = *(int8x16_t **)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = v4[50].u32[1];
      if (v5)
      {
        uint64_t v6 = (WebKit::PlatformCALayerRemote **)v4[49].i64[1];
        unsigned int v7 = v6 + 1;
        uint64_t v8 = v4[50].u32[1];
        while (*v6 != this)
        {
          ++v6;
          ++v7;
          if (!--v8) {
            goto LABEL_12;
          }
        }
        *uint64_t v6 = 0;
        if (this)
        {
          WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)this + 2);
          uint64_t v5 = v4[50].u32[1];
        }
        memmove(v6, v6 + 1, v4[49].i64[1] + 8 * v5 - (void)v7);
        --v4[50].i32[1];
        uint64_t v3 = *((void *)this + 101);
LABEL_12:
        *((void *)this + 101) = 0;
        if (!v3) {
          goto LABEL_15;
        }
      }
      else
      {
        *((void *)this + 101) = 0;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v3);
        WTF::fastFree((WTF *)v3, a2);
      }
LABEL_15:
      int8x16_t result = vorrq_s8(v4[4], (int8x16_t)vdupq_n_s64(0x10uLL));
      uint64_t v4[4] = result;
    }
  }
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      int v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      WKWebProcessBundleParameters *v3 = v6;
      int8x16_t result = (void **)memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          WKWebProcessBundleParameters *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::removeAllSublayers(int8x16_t *this)
{
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v6, (uint64_t)&this[49].i64[1]);
  if (v7)
  {
    uint64_t v3 = v6;
    uint64_t v4 = 8 * v7;
    do
    {
      (*(void (**)(void))(**(void **)v3 + 112))();
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10uLL));
  return WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
}

void sub_198641598(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WTF **)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
      }
      uint64_t v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = v7 + 56;
    do
    {
      *(unsigned char *)uint64_t v10 = 0;
      *(unsigned char *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 48) = 0;
      *(_OWORD *)(v10 - 40) = 0uLL;
      *(_OWORD *)(v10 - 24) = 0uLL;
      *(unsigned char *)(v10 - 8) = 0;
      v10 += 96;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      uint64_t v14 = v4 + 96 * v11;
      if (*(void *)(v14 + 8) != -1)
      {
        if (*(_OWORD *)v14 == 0)
        {
          uint64_t v34 = v4 + 96 * v11;
          unsigned int v37 = *(_DWORD *)(v34 + 88);
          int v36 = (_DWORD *)(v34 + 88);
          uint64_t v35 = v37;
          if (v37 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9DF240[v35])(&v41, v4 + 96 * v11 + 72);
          }
          *int v36 = -1;
        }
        else
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v44 = -1640531527;
          __int16 v45 = 0;
          char v46 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v44, (void *)(v4 + 96 * v11));
          int v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v44);
          int v18 = 0;
          do
          {
            unsigned int v19 = v17 & v16;
            uint64_t v20 = (_OWORD *)(v15 + 96 * (v17 & v16));
            int v17 = ++v18 + (v17 & v16);
          }
          while (*v20 != 0);
          uint64_t v21 = v15 + 96 * v19;
          unsigned int v24 = *(_DWORD *)(v21 + 88);
          uint64_t v23 = (_DWORD *)(v21 + 88);
          uint64_t v22 = v24;
          if (v24 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9DF240[v22])(&v42, v15 + 96 * v19 + 72);
          }
          _DWORD *v23 = -1;
          *uint64_t v20 = *(_OWORD *)v14;
          uint64_t v25 = v15 + 96 * v19;
          uint64_t v26 = v4 + 96 * v11;
          long long v27 = *(_OWORD *)(v26 + 16);
          long long v28 = *(_OWORD *)(v26 + 32);
          long long v29 = *(_OWORD *)(v26 + 48);
          *(unsigned char *)(v25 + 64) = *(unsigned char *)(v26 + 64);
          *(_OWORD *)(v25 + 32) = v28;
          *(_OWORD *)(v25 + 48) = v29;
          *(_OWORD *)(v25 + 16) = v27;
          uint64_t v30 = v26 + 72;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(v25 + 72, v26 + 72);
          unsigned int v33 = *(_DWORD *)(v26 + 88);
          float v32 = (_DWORD *)(v26 + 88);
          uint64_t v31 = v33;
          if (v33 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9DF240[v31])(&v43, v30);
          }
          *float v32 = -1;
          if (v14 == a3) {
            unint64_t v12 = v20;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    unint64_t v12 = 0;
    int8x16_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WebKit::RemoteLayerTreeContext::buildTransaction(uint64_t a1, uint64_t a2, WebKit::PlatformCALayerRemote *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  if (((*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)a3 + 32))(a3) - 1) >= 4u) {
    goto LABEL_56;
  }
  *(_OWORD *)(a2 + 8) = *((_OWORD *)a3 + 1);
  {
    unsigned int v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v37);
  }
  uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a4, a5);
  if (v10) {
    *(void *)(a2 + 40) = *(void *)(v10 + 112);
  }
  ++*(_DWORD *)a2;
  uint64_t v11 = *(_DWORD **)(a1 + 200);
  *(void *)(a1 + 200) = a2;
  if (v11)
  {
    if (!*v11)
    {
      __break(0xC471u);
      JUMPOUT(0x198641CBCLL);
    }
    --*v11;
  }
  WebKit::PlatformCALayerRemote::recursiveBuildTransaction(a3, (WebKit::RemoteLayerTreeContext *)a1, (WebKit::RemoteLayerTreeTransaction *)a2);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 88) + 32))(*(void *)(a1 + 88), a2);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88))) {
    *(unsigned char *)(a1 + 208) = 0;
  }
  unint64_t v12 = *(_DWORD **)(a1 + 200);
  if (v12)
  {
    if (!*v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198641CDCLL);
    }
    --*v12;
  }
  uint64_t v13 = 0;
  LODWORD(v14) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v15 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v14 = *(unsigned int *)(v15 - 4);
  uint64_t v16 = v15 + 96 * v14;
  if (!*(_DWORD *)(v15 - 12))
  {
    uint64_t v13 = v15 + 96 * v14;
LABEL_14:
    uint64_t v16 = v15 + 96 * v14;
    goto LABEL_15;
  }
  uint64_t v13 = v15;
  if (v14)
  {
    uint64_t v25 = 96 * v14;
    uint64_t v13 = v15;
    while (*(_OWORD *)v13 == 0 || *(void *)(v13 + 8) == -1)
    {
      v13 += 96;
      v25 -= 96;
      if (!v25)
      {
        uint64_t v13 = v16;
        break;
      }
    }
  }
LABEL_15:
  if (!v15)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    goto LABEL_17;
  }
  uint64_t v18 = v15 + 96 * *(unsigned int *)(v15 - 4);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v35 = *(unsigned int *)(v15 - 12);
  if (!v35)
  {
    uint64_t v17 = 0;
    goto LABEL_17;
  }
  if (v35 >= 0x3333334)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x198641C9CLL);
  }
  unsigned int v36 = 80 * v35;
  uint64_t v17 = WTF::fastMalloc((WTF *)(80 * v35));
  LODWORD(v39) = v36 / 0x50;
  uint64_t v38 = v17;
LABEL_17:
  if (v18 != v13)
  {
    unsigned int v27 = 0;
    do
    {
      long long v28 = *(_OWORD *)(v13 + 32);
      long long v41 = *(_OWORD *)(v13 + 16);
      long long v42 = v28;
      long long v43 = *(_OWORD *)(v13 + 48);
      char v44 = *(unsigned char *)(v13 + 64);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v45, v13 + 72);
      uint64_t v29 = v17 + 80 * v27;
      long long v30 = v41;
      long long v31 = v42;
      long long v32 = v43;
      *(unsigned char *)(v29 + 48) = v44;
      *(_OWORD *)(v29 + 16) = v31;
      *(_OWORD *)(v29 + 32) = v32;
      *(_OWORD *)uint64_t v29 = v30;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(v29 + 56, (uint64_t)v45);
      if (v46 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9DF240[v46])(&v40, v45);
      }
      uint64_t v33 = v13 + 96;
      uint64_t v13 = v16;
      if (v33 != v16)
      {
        uint64_t v13 = v33;
        while (*(_OWORD *)v13 == 0 || *(void *)(v13 + 8) == -1)
        {
          v13 += 96;
          if (v13 == v16)
          {
            uint64_t v13 = v16;
            break;
          }
        }
      }
      ++v27;
    }
    while (v13 != v18);
    HIDWORD(v39) = v27;
  }
  WebKit::RemoteLayerTreeTransaction::setCreatedLayers(a2, &v38);
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v19);
  if (v15) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v15, v20);
  }
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v23 = *(WTF **)(a2 + 64);
  if (v23)
  {
    *(void *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    WTF::fastFree(v23, v20);
  }
  *(void *)(a2 + 64) = v21;
  *(void *)(a2 + 72) = v22;
  return kdebug_trace();
}

void sub_198641D14(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  if (v3) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v3, v5);
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::recursiveBuildTransaction(WebKit::PlatformCALayerRemote *this, WebKit::RemoteLayerTreeContext *a2, WebKit::RemoteLayerTreeTransaction *a3)
{
  while (1)
  {
    uint64_t v6 = *((void *)this + 104);
    if (!v6 || *(WebKit::RemoteLayerTreeContext **)(v6 + 8) != a2)
    {
LABEL_51:
      __break(0xC471u);
      JUMPOUT(0x198642028);
    }
    uint64_t v7 = *((void *)this + 6);
    if (!v7)
    {
LABEL_36:
      char v9 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 136))(v7)) {
      break;
    }
    uint64_t v8 = *((void *)this + 6);
    if (!v8) {
      goto LABEL_36;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 104))(v8))
    {
      uint64_t v10 = (int8x16_t *)((char *)this + 64);
      uint64_t v15 = (uint64_t *)((char *)this + 472);
LABEL_20:
      uint64_t result = *v15;
      goto LABEL_10;
    }
    char v9 = (*(uint64_t (**)(void, WebKit::PlatformCALayerRemote *))(**((void **)this + 6) + 112))(*((void *)this + 6), this);
LABEL_8:
    uint64_t v10 = (int8x16_t *)((char *)this + 64);
    uint64_t result = *((void *)this + 59);
    if (result && (v9 & 1) == 0)
    {
      uint64_t v15 = (uint64_t *)((char *)this + 472);
      *((void *)this + 59) = 0;
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      *uint64_t v10 = vorrq_s8(*v10, (int8x16_t)vdupq_n_s64(0x400uLL));
      goto LABEL_20;
    }
LABEL_10:
    if (result
      && *((unsigned char *)this + 656)
      && (uint64_t result = WebKit::RemoteLayerBackingStore::layerWillBeDisplayed((WebKit::RemoteLayerBackingStore *)result),
          result))
    {
      int8x16_t v16 = vorrq_s8(*v10, (int8x16_t)vdupq_n_s64(0x400uLL));
      *uint64_t v10 = v16;
      LOBYTE(v12) = v16.i8[0];
    }
    else
    {
      uint64_t v12 = v10->i64[0];
      if (!v10->i64[0]) {
        goto LABEL_12;
      }
    }
    if ((v12 & 0x10) != 0)
    {
      uint64_t v17 = *((unsigned int *)this + 201);
      if (v17)
      {
        if (v17 >> 28) {
          goto LABEL_51;
        }
        uint64_t v18 = WTF::fastMalloc((WTF *)(16 * v17));
        uint64_t v19 = v18;
        uint64_t v20 = *((unsigned int *)this + 201);
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = *((void *)this + 99);
          uint64_t v23 = 8 * v20;
          do
          {
            *(_OWORD *)(v18 + 16 * v21) = *(_OWORD *)(*(void *)(v22 + 8 * v21) + 16);
            ++v21;
            v23 -= 8;
          }
          while (v23);
        }
        else
        {
          LODWORD(v21) = 0;
        }
      }
      else
      {
        LODWORD(v21) = 0;
        uint64_t v19 = 0;
      }
      unsigned int v24 = (WTF *)*((void *)this + 14);
      if (v24)
      {
        *((void *)this + 14) = 0;
        *((_DWORD *)this + 30) = 0;
        WTF::fastFree(v24, a2);
      }
      *((void *)this + 14) = v19;
      *((_DWORD *)this + 30) = v17;
      *((_DWORD *)this + 31) = v21;
    }
    if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 32))(this) == 2)
    {
      WTF::downcast<WebKit::PlatformCALayerRemoteCustom,WebKit::PlatformCALayerRemote>((uint64_t)this);
      if (!*((unsigned char *)this + 840))
      {
        uint64_t v26 = (CALayer *)(*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 40))(this);
        WebKit::RemoteLayerTreePropertyApplier::applyPropertiesToLayer(v26, 0, 0, v10->i64, 1, v27);
        return (uint64_t)WebKit::PlatformCALayerRemote::didCommit(this);
      }
    }
    uint64_t result = (uint64_t)WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(a3, (atomic_uint *)this);
LABEL_12:
    if (*((_DWORD *)this + 201))
    {
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(WebKit::PlatformCALayerRemote **)(*((void *)this + 99) + 8 * v13);
        if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(void *)v14 + 32))(v14) - 1 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1986420FCLL);
        }
        uint64_t result = WebKit::PlatformCALayerRemote::recursiveBuildTransaction(v14, a2, a3);
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 201));
    }
    this = (WebKit::PlatformCALayerRemote *)*((void *)this + 5);
    if (!this) {
      return result;
    }
    int v25 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 32))(this);
    if ((v25 - 1) >= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x1986420DCLL);
    }
  }

  return WebKit::PlatformCALayerRemote::recursiveMarkWillBeDisplayedWithRenderingSuppresion(this);
}

void sub_1986421AC(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemote::type(WebKit::PlatformCALayerRemote *this)
{
  return 1;
}

uint64_t *WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(WebKit::RemoteLayerTreeTransaction *this, atomic_uint *a2)
{
  atomic_fetch_add(a2 + 2, 1u);
  unsigned int v5 = a2;
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::add((uint64_t *)this + 3, (uint64_t *)&v5, (uint64_t)&v4);
  uint64_t v3 = (uint64_t)v5;
  unsigned int v5 = 0;
  if (v3) {
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_19864222C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(a12 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  char v9 = 0;
  uint64_t v10 = *a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    uint64_t v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *char v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v10 = *a2;
        uint64_t v17 = v9;
      }
      *a2 = 0;
      uint64_t v19 = *v17;
      *uint64_t v17 = v10;
      if (v19) {
        uint64_t result = (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v19 + 8));
      }
      uint64_t v20 = *v4;
      if (*v4) {
        int v21 = *(_DWORD *)(v20 - 12) + 1;
      }
      else {
        int v21 = 1;
      }
      *(_DWORD *)(v20 - 12) = v21;
      uint64_t v22 = *v4;
      if (*v4) {
        int v23 = *(_DWORD *)(v22 - 12);
      }
      else {
        int v23 = 0;
      }
      uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
      unint64_t v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24) {
          goto LABEL_19;
        }
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_19:
        uint64_t v26 = v22 + 8 * v25;
        char v27 = 1;
        goto LABEL_20;
      }
      uint64_t result = WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::expand(v4, v17);
      uint64_t v17 = result;
      uint64_t v22 = *v4;
      if (*v4) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
      goto LABEL_19;
    }
    if (v18 != -1) {
      break;
    }
    char v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_8:
    unsigned int v14 = i + v16;
  }
  if (v18 != v10) {
    goto LABEL_8;
  }
  if (v7) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(unsigned int *)(v6 - 4);
  }
  char v27 = 0;
  uint64_t v26 = v6 + 8 * v28;
LABEL_20:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v26;
  *(unsigned char *)(a3 + 16) = v27;
  return result;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerRenderingIsSuppressedIncludingDescendants(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this - 429) >> 5) & 1;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerDrawsContent(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this - 431) >> 5) & 1;
}

uint64_t IPC::Decoder::decode<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(&v82, a2);
  *(_WORD *)uint64_t v93 = 0;
  uint64_t result = (uint64_t)IPC::Decoder::operator>><unsigned char>(a2, v93);
  char v6 = v93[0];
  if (v93[1]) {
    BOOL v7 = v93[0] > 0xFu;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = v7;
  if (v8 == 1)
  {
    char v44 = *(WTF::StringImpl **)a2;
    uint64_t v45 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v45) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v44);
    }
    char v6 = 0;
  }
  unint64_t v9 = *((void *)a2 + 1);
  uint64_t v10 = *(WTF::StringImpl **)a2;
  unint64_t v11 = *((void *)a2 + 2) - *(void *)a2;
  if (v9 <= v11)
  {
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v48 = *((void *)a2 + 3);
    if (v48)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
        uint64_t v47 = *(WTF::StringImpl **)a2;
        unint64_t v46 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v46 = 0;
        uint64_t v47 = 0;
      }
    }
    goto LABEL_93;
  }
  unint64_t v12 = (unsigned __int8 *)v10 + v11;
  *((void *)a2 + 2) = v12 + 1;
  if (!v10)
  {
    unint64_t v46 = v9;
    uint64_t v47 = 0;
LABEL_93:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v49 = *((void *)a2 + 3);
    if (v49)
    {
      if (v46)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
        uint64_t v10 = *(WTF::StringImpl **)a2;
        unint64_t v9 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_94;
  }
  unsigned int v13 = *v12;
  if (v13 >= 2)
  {
LABEL_94:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v50 = *((void *)a2 + 3);
    if (v50 && v9) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v50 + 16))(v50, v10);
    }
    goto LABEL_107;
  }
  if (!v13)
  {
    LOBYTE(v14) = 0;
    unint64_t v16 = 0;
    int v18 = 0;
    char v2 = 0;
    goto LABEL_18;
  }
  uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
  unint64_t v16 = v15;
  uint64_t v80 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  int v18 = v17;
  uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  uint64_t v79 = result;
  char v21 = v20;
  uint64_t v10 = *(WTF::StringImpl **)a2;
  if (!*(void *)a2)
  {
    uint64_t v57 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v58 = *((void *)a2 + 3);
    if (v58 && v57) {
      (*(void (**)(uint64_t, void))(*(void *)v58 + 16))(v58, 0);
    }
LABEL_107:
    uint64_t v59 = *(WTF::StringImpl **)a2;
    uint64_t v60 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v60)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v59);
      LOBYTE(v14) = 0;
      unint64_t v16 = 0;
      uint64_t v10 = *(WTF::StringImpl **)a2;
    }
    else
    {
      uint64_t v10 = 0;
      LOBYTE(v14) = 0;
      unint64_t v16 = 0;
    }
    int v18 = 1;
    goto LABEL_18;
  }
  if (!(_BYTE)v16 || !(_BYTE)v18 || !v21) {
    goto LABEL_87;
  }
  int v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFF00;
  char v2 = 1;
LABEL_18:
  unint64_t v19 = *((void *)a2 + 1);
  if (v19 <= *((void *)a2 + 2) - (void)v10)
  {
    unint64_t v51 = 0;
    char v52 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v53 = *((void *)a2 + 3);
    if (v53)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
        char v52 = *(WTF::StringImpl **)a2;
        unint64_t v51 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v51 = 0;
        char v52 = 0;
      }
    }
    goto LABEL_98;
  }
  uint64_t v22 = (unsigned __int8 *)*((void *)a2 + 2);
  int v23 = v22 + 1;
  *((void *)a2 + 2) = v22 + 1;
  if (!v10)
  {
    unint64_t v51 = v19;
    char v52 = 0;
LABEL_98:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v54 = *((void *)a2 + 3);
    if (v54 && v51) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v54 + 16))(v54, v52, v51);
    }
    goto LABEL_21;
  }
  unsigned int v24 = *v22;
  if (v24 > 3) {
    goto LABEL_21;
  }
  if (!v24)
  {
    int v37 = 0;
    goto LABEL_74;
  }
  if (v24 != 1)
  {
    if (v24 == 2)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, (uint64_t)&v91);
      IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v89);
      uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::URL>(a2, v93);
      uint64_t v38 = *(WTF::StringImpl **)a2;
      if (*(void *)a2)
      {
        if (!v92) {
          goto LABEL_87;
        }
        if (!v90) {
          goto LABEL_87;
        }
        uint64_t v39 = v89;
        uint64_t v89 = 0;
        char v87 = v39;
        if (!v93[40]) {
          goto LABEL_87;
        }
        char v40 = *(WTF::StringImpl **)v93;
        *(void *)uint64_t v93 = 0;
        int v84 = v40;
        long long v85 = *(_OWORD *)&v93[8];
        long long v86 = *(_OWORD *)&v93[24];
        *(_DWORD *)&v93[8] &= ~1u;
        WebCore::Model::create();
        unint64_t v78 = v88;
        unint64_t v88 = 0;
        long long v41 = v84;
        int v84 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v10);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        uint64_t result = (uint64_t)v87;
        char v87 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      else
      {
        unint64_t v78 = 0;
      }
      if (v93[40])
      {
        uint64_t result = *(void *)v93;
        *(void *)uint64_t v93 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v90)
      {
        uint64_t result = (uint64_t)v89;
        uint64_t v89 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v92)
      {
        uint64_t result = v91;
        uint64_t v91 = 0;
        if (result) {
          uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v10);
        }
      }
      if (!v38)
      {
        unint64_t v69 = *(WTF::StringImpl **)a2;
        uint64_t v70 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v71 = *((void *)a2 + 3);
        if (v71 && v70) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v71 + 16))(v71, v69);
        }
        goto LABEL_21;
      }
      unint64_t v98 = v78;
      int v37 = 2;
    }
    else
    {
      uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
      if (!(_BYTE)v10) {
        goto LABEL_21;
      }
      unint64_t v98 = result;
      int v37 = 3;
    }
LABEL_74:
    int v26 = 0;
    int v100 = v37;
    int v25 = 1;
    char v101 = 1;
    goto LABEL_75;
  }
  unint64_t v27 = ((unint64_t)(v23 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v10;
  BOOL v29 = v19 < v27 || v19 - v27 < 4;
  BOOL v77 = v29;
  if (!v29)
  {
    long long v30 = (int *)((char *)v10 + v27);
    int v31 = *v30;
    *((void *)a2 + 2) = v30 + 1;
    LODWORD(v76) = v31;
    HIDWORD(v76) = v31 & 0xFFFFFF00;
    goto LABEL_33;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v61 = *((void *)a2 + 3);
  if (!v61) {
    goto LABEL_111;
  }
  (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
  HIDWORD(v76) = 0;
  uint64_t v72 = *(WTF::StringImpl **)a2;
  uint64_t v73 = *((void *)a2 + 1);
  uint64_t v74 = *((void *)a2 + 3);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (v74)
  {
    LODWORD(v76) = 0;
    if (v73)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v74 + 16))(v74, v72);
LABEL_111:
      uint64_t v76 = 0;
    }
  }
  else
  {
    LODWORD(v76) = 0;
  }
LABEL_33:
  uint64_t result = IPC::Decoder::decode<float>(a2);
  unint64_t v19 = *((void *)a2 + 1);
  uint64_t v10 = *(WTF::StringImpl **)a2;
  unint64_t v32 = *((void *)a2 + 2) - *(void *)a2;
  if (v19 <= v32)
  {
    uint64_t v75 = result;
    unint64_t v62 = 0;
    uint64_t v63 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v64 = *((void *)a2 + 3);
    if (v64)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
        uint64_t v63 = *(WTF::StringImpl **)a2;
        unint64_t v62 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v62 = 0;
        uint64_t v63 = 0;
      }
    }
  }
  else
  {
    uint64_t v33 = (unsigned __int8 *)v10 + v32;
    *((void *)a2 + 2) = v33 + 1;
    if (v10)
    {
      unsigned int v34 = *v33;
      if (v34 < 2)
      {
        int v35 = 0;
        int v36 = 1;
        goto LABEL_37;
      }
      uint64_t v75 = result;
      goto LABEL_115;
    }
    uint64_t v75 = result;
    unint64_t v62 = v19;
    uint64_t v63 = 0;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v65 = *((void *)a2 + 3);
  if (v65 && v62)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v65 + 16))(v65, v63, v62);
    unsigned int v34 = 0;
    uint64_t v10 = *(WTF::StringImpl **)a2;
    unint64_t v19 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v10 = 0;
    unsigned int v34 = 0;
  }
LABEL_115:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v66 = *((void *)a2 + 3);
  if (v66 && v19)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v66 + 16))(v66, v10);
    uint64_t result = v75;
    if (*(void *)a2)
    {
      int v36 = 0;
      int v35 = 1;
LABEL_37:
      if (v77 || (result & 0xFF00000000) == 0 || v35) {
        goto LABEL_87;
      }
      if (!v34) {
        int v36 = 0;
      }
      unint64_t v98 = v76 | HIDWORD(v76) | (unint64_t)(result << 32);
      int v99 = v36;
      int v37 = 1;
      goto LABEL_74;
    }
    uint64_t v67 = *((void *)a2 + 3);
    uint64_t v68 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v67 && v68) {
      (*(void (**)(uint64_t, void))(*(void *)v67 + 16))(v67, 0);
    }
  }
LABEL_21:
  LOBYTE(v98) = 0;
  char v101 = 0;
  uint64_t v10 = *(WTF::StringImpl **)a2;
  unint64_t v19 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    goto LABEL_88;
  }
  while (1)
  {
    int v25 = 0;
    int v26 = 1;
LABEL_75:
    if (!*(void *)a2)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 80) = 0;
      if (!v25) {
        goto LABEL_85;
      }
      goto LABEL_83;
    }
    if (v83 && !v8 && !v18 && !v26) {
      break;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    if (v19) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v10);
    }
  }
  *(_OWORD *)uint64_t v93 = v82;
  v93[16] = v6;
  *(void *)&v93[24] = v16 | v14;
  *(void *)&v93[32] = v80;
  *(void *)&v93[40] = v79;
  char v94 = v2;
  *(_DWORD *)char v95 = *(_DWORD *)v81;
  *(_DWORD *)&v95[3] = *(_DWORD *)&v81[3];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v96, (uint64_t)&v98);
  long long v42 = *(_OWORD *)&v93[16];
  long long v43 = *(_OWORD *)&v93[32];
  *(_OWORD *)a1 = *(_OWORD *)v93;
  *(_OWORD *)(a1 + 16) = v42;
  *(_OWORD *)(a1 + 32) = v43;
  *(unsigned char *)(a1 + 48) = v94;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 56, (uint64_t)v96);
  *(unsigned char *)(a1 + 80) = 1;
  if (v97 != -1) {
    uint64_t result = ((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9B4E40[v97])(&v84, v96);
  }
  if (v101)
  {
LABEL_83:
    if (v100 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t *))off_1EE9B4E40[v100])(v93, &v98);
    }
  }
LABEL_85:
  if (!*(unsigned char *)(a1 + 80))
  {
    uint64_t v55 = *(WTF::StringImpl **)a2;
    uint64_t v56 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v56) {
        return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v55);
      }
    }
  }
  return result;
}

void sub_198642E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,char a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (*(unsigned char *)(v34 + 80))
  {
    uint64_t v36 = *(unsigned int *)(v34 + 72);
    if (v36 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9B4E40[v36])(&a29, v34 + 56);
    }
    *(_DWORD *)(v34 + 72) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198642FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JSW_SV_EEEDcmSY_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void *IPC::Decoder::operator>><unsigned char>(void *result, _WORD *a2)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2] - *result;
  if (v2 <= v4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v10 = result[3];
    if (v10)
    {
      unint64_t v12 = result;
      uint64_t v14 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        uint64_t result = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      a2 = v14;
    }
  }
  else
  {
    uint64_t v5 = (unsigned __int8 *)(v3 + v4);
    result[2] = v5 + 1;
    if (v3)
    {
      __int16 v6 = *v5;
      LOWORD(v7) = 256;
      goto LABEL_4;
    }
    unint64_t v8 = v2;
    uint64_t v9 = 0;
  }
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v7 = result[3];
  if (v7)
  {
    unint64_t v11 = result;
    uint64_t v13 = a2;
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v9);
    }
    __int16 v6 = 0;
    LOWORD(v7) = 0;
    uint64_t result = v11;
    a2 = v13;
  }
  else
  {
    __int16 v6 = 0;
  }
LABEL_4:
  *a2 = v7 | v6;
  return result;
}

void *IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(void *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_11;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_11:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_12:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    goto LABEL_13;
  }
  if (v9)
  {
    *uint64_t result = 0;
    result[1] = 0;
LABEL_8:
    *((unsigned char *)v3 + 16) = 1;
    return result;
  }
  uint64_t result = (void *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_OWORD *)uint64_t v3 = v17;
    goto LABEL_8;
  }
LABEL_13:
  *(unsigned char *)uint64_t v3 = 0;
  *((unsigned char *)v3 + 16) = 0;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (void *)*((void *)a2 + 3);
  if (result && v15)
  {
    unint64_t v16 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v16();
  }
  return result;
}

uint64_t WebKit::WebProcess::webFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1 + 264, v8, (atomic_uint **)&v7);
  uint64_t v4 = (unsigned int *)v7;
  if (!v7) {
    return 0;
  }
  uint64_t v5 = *((void *)v7 + 1);
  unint64_t v7 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return v5;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t result@<X0>, void *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (!*(void *)result)
  {
LABEL_16:
    uint64_t v13 = 0;
    goto LABEL_9;
  }
  int v6 = *(_DWORD *)(v4 - 8);
  unsigned int v17 = -1640531527;
  __int16 v18 = 0;
  char v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v17, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  uint64_t v7 = a2[1];
  unsigned int v8 = result & v6;
  unsigned int v9 = (uint64_t *)(v4 + 24 * (result & v6));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (*v9 != *a2 || v11 != v7)
  {
    int v14 = 1;
    while (v10 | v11)
    {
      unsigned int v8 = (v8 + v14) & v6;
      uint64_t v15 = (uint64_t *)(v4 + 24 * v8);
      uint64_t v10 = *v15;
      uint64_t v11 = v15[1];
      ++v14;
      if (v10 == *a2 && v11 == v7) {
        goto LABEL_7;
      }
    }
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v13 = *(atomic_uint **)(v4 + 24 * v8 + 16);
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
LABEL_9:
  *a3 = v13;
  return result;
}

BOOL WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayed(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 56, (unsigned int *)a2, (uint64_t)v13);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>((uint64_t)this + 40, (uint64_t)a2, (uint64_t **)v13);
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    int v6 = (uint64_t *)(v4 + 8 * v5);
  }
  else
  {
    int v6 = 0;
    uint64_t v5 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(v12, (uint64_t *)this + 5, v6, (uint64_t *)(v4 + 8 * v5));
  uint64_t v7 = (uint64_t *)*((void *)&v13[0] + 1);
  unsigned int v8 = v12[1];
  if (WebKit::RemoteLayerBackingStore::needsDisplay(a2) || v7 != v8) {
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 72, (unsigned int *)a2, (uint64_t)v12);
  }
  if (v7 != v8)
  {
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 24, (unsigned int *)a2, (uint64_t)v12);
    v10[0] = v13[0];
    v10[1] = v13[1];
    uint64_t v11 = v14;
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove((uint64_t)this + 40, (uint64_t)v10);
  }
  return v7 != v8;
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v9 = *(unsigned int *)(v8 - 4);
      if (!v9) {
        goto LABEL_15;
      }
      int v10 = 0;
      uint64_t v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            uint64_t v23 = v11;
            uint64_t v24 = v8;
            int v22 = v10;
            uint64_t v25 = v11;
            WTF::fastFree((WTF *)v13, a2);
            uint64_t v8 = v24;
            uint64_t v12 = v25;
            uint64_t v11 = v23;
            int v10 = v22;
          }
          *(void *)(v8 + 8 * v12) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v20 = *(void *)a1;
        if (*(void *)a1) {
          int v21 = *(_DWORD *)(v20 - 12);
        }
        else {
          int v21 = 0;
        }
        *(_DWORD *)(v20 - 12) = v21 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v14 = *(_DWORD *)(v8 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8) {
            goto LABEL_19;
          }
LABEL_16:
          LODWORD(v8) = *(_DWORD *)(v8 - 12);
          int v16 = 0x7FFFFFFF;
          if (v8 >= 0x7FFFFFFF) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
LABEL_15:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_16;
      }
    }
    LODWORD(v8) = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_19:
    int v16 = v8;
LABEL_20:
    *(_DWORD *)(a1 + 12) = 2 * v16;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  unsigned int v17 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v17, 1u);
  atomic_fetch_add(v17, 1u);
  int v26 = (WTF *)v17;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v26, a3);
  uint64_t result = (unsigned int *)v26;
  int v26 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
  }
  if (v17)
  {
    if (atomic_fetch_add(v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v17);
      return (unsigned int *)WTF::fastFree((WTF *)v17, v18);
    }
  }
  return result;
}

void sub_1986437C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
  }
  if (v14)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteLayerBackingStore::needsDisplay(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(void *)(v1 + 832);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3 || !*(void *)(v3 + 88)) {
    return 0;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v1 + 48) + 112))(*(void *)(v1 + 48))) {
    return 1;
  }
  BOOL result = 0;
  if (*((float *)this + 7) > 0.0 && *((float *)this + 8) > 0.0) {
    return !(*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(void *)this + 72))(this)
  }
        || ((*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)this + 80))(this) & 1) != 0
        || *((int *)this + 16) >= 1
        && *((int *)this + 17) >= 1
        && *((float *)this + 7) > 0.0
        && *((float *)this + 8) > 0.0;
  return result;
}

BOOL WebKit::RemoteLayerWithRemoteRenderingBackingStore::hasFrontBuffer(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  return *((unsigned char *)this + 176) || *((unsigned char *)this + 456) == 0;
}

uint64_t **WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 && *(void *)(v5 + 8))
  {
    uint64_t v12 = *(void *)(a2 + 8);
    unsigned int v6 = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v12);
    return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(a3, (uint64_t *)a1, v6, v7);
  }
  else
  {
    uint64_t v9 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v10 = *(unsigned int *)(v9 - 4);
      uint64_t v11 = (uint64_t *)(v9 + 8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(a3, (uint64_t *)a1, v11, (uint64_t *)(v9 + 8 * v10));
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_1,void,IPC::Decoder *>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D5750;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);

  return WTF::fastFree((WTF *)a1, v3);
}

{
  uint64_t v2;

  *(void *)a1 = &unk_1EE9D5750;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

WebKit::ProcessThrottlerActivity *std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](WebKit::ProcessThrottlerActivity **a1, WebKit::ProcessThrottlerActivity *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(result, a2);
    return (WebKit::ProcessThrottlerActivity *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(WebKit::ProcessThrottlerActivity *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *((void *)this + 1) = 0;
    goto LABEL_9;
  }
  if (*(void *)(v3 + 8))
  {
    WebKit::ProcessThrottlerActivity::invalidate((uint64_t)this, 0);
    uint64_t v3 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
LABEL_9:

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void sub_198643B5C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::ProcessThrottlerActivity::invalidate(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 33)) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    uint64_t v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5 && (uint64_t v5 = *(void *)(v5 + 8)) != 0)
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(v5 + 16) + 8) + 136);
        if (v6) {
          LODWORD(v6) = *(_DWORD *)(v6 + 108);
        }
      }
      else
      {
        LODWORD(v6) = 0;
      }
      unsigned int v7 = "foreground";
      uint64_t v8 = *(void *)(a1 + 16);
      if (!*(unsigned char *)(a1 + 32)) {
        unsigned int v7 = "background";
      }
      int v13 = 134219010;
      uint64_t v14 = a1;
      __int16 v15 = 1024;
      int v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v5;
      __int16 v19 = 2082;
      uint64_t v20 = v7;
      __int16 v21 = 2082;
      uint64_t v22 = v8;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d, throttler=%p] ProcessThrottler::Activity::invalidate: Ending %{public}s activity / '%{public}s'", (uint8_t *)&v13, 0x30u);
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(v10 + 16) + 8) + 16), 1u);
  if (*(unsigned char *)(v10 + 188))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      if ((WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(v10 + 136, (uint64_t *)a1) & 1) == 0)goto LABEL_21; {
      goto LABEL_20;
      }
    }
    if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(v10 + 152, (uint64_t *)a1))LABEL_20:WebKit::ProcessThrottler::updateThrottleStateIfNeeded((unsigned int *)v10); {
  }
    }
LABEL_21:
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(void *)(*(void *)(v10 + 16) + 8) + 16));
  BOOL result = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)a1;
    if (*(void *)a1)
    {
      int v7 = *(_DWORD *)(v6 - 4);
      if (!v7) {
        goto LABEL_22;
      }
      int v8 = 0;
      unsigned int v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(v6 + 8 * v9);
        if ((unint64_t)(v11 + 1) >= 2 && !*(void *)(v11 + 8))
        {
          *(void *)(v6 + 8 * v9) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v11);
            WTF::fastFree((WTF *)v11, a2);
          }
          *(void *)(v6 + 8 * v9) = -1;
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        uint64_t v12 = *(void *)a1;
        if (*(void *)a1) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v8;
        uint64_t v6 = *(void *)a1;
      }
      if (v6)
      {
        unsigned int v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v6 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v6 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  if (!*a2 || !*(void *)(*a2 + 8)) {
    return 0;
  }
  uint64_t v21 = *a2;
  uint64_t v18 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v21);
  if (*(void *)a1)
  {
    uint64_t v19 = *(void *)a1 + 8 * *(unsigned int *)(*(void *)a1 - 4);
    if ((unsigned int **)v19 == v18) {
      return 0;
    }
  }
  else
  {
    if (!v18) {
      return 0;
    }
    uint64_t v19 = 0;
  }
  if ((unsigned int **)v19 != v18) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v18);
  }
  return 1;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = *(void *)(v2 + 8 * v7);
    if (!v9) {
      break;
    }
    if (v9 != -1 && v9 == *a2) {
      return v2 + 8 * v7;
    }
    unsigned int v7 = (v7 + i) & v3;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *result, unsigned int **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v9 = a2;
    uint64_t v10 = result;
    WTF::fastFree((WTF *)v2, a2);
    a2 = v9;
    BOOL result = v10;
  }
  *a2 = (unsigned int *)-1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *result;
  if (*result)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

BOOL WebKit::RemoteLayerBackingStore::layerWillBeDisplayed(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 832);
  return v1
      && (uint64_t v2 = *(void *)(v1 + 8)) != 0
      && (int v4 = *(WebKit::RemoteLayerBackingStoreCollection **)(v2 + 88)) != 0
      && WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayed(v4, this);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::frontBufferMayBeVolatile(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1) {
    return *(unsigned char *)(v1 + 56) & 1;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::paintReachableBackingStoreContents(WebKit::RemoteLayerBackingStoreCollection *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 72);
  uint64_t v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 9);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v29, v2, v3, v4);
  uint64_t v5 = *((void *)this + 9);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    unsigned int v7 = (uint64_t *)(v5 + 8 * v6);
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v6 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v27, v2, v7, (uint64_t *)(v5 + 8 * v6));
  uint64_t v8 = v30;
  if (v30 != v28)
  {
    char v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(*(void *)v8 + 8);
      if (*(int *)(v10 + 64) >= 1
        && *(int *)(v10 + 68) >= 1
        && *(float *)(v10 + 28) > 0.0
        && *(float *)(v10 + 32) > 0.0)
      {
        char v9 = 1;
      }
      uint64_t v11 = (WTF::MonotonicTime *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v10 + 16) + 48) + 112))(*(void *)(*(void *)(v10 + 16) + 48));
      if (v11) {
        goto LABEL_27;
      }
      if (*(int *)(v10 + 64) < 1
        || *(int *)(v10 + 68) < 1
        || *(float *)(v10 + 28) <= 0.0
        || *(float *)(v10 + 32) <= 0.0)
      {
        (*(void (**)(WTF **__return_ptr, uint64_t, void))(*(void *)v10 + 64))(&v34, v10, 0);
        uint64_t v22 = v34;
        if (v34)
        {
          uint64_t v23 = *(unsigned int *)(v10 + 212);
          if (v23 == *(_DWORD *)(v10 + 208))
          {
            WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>>(v10 + 200, (unint64_t)&v34);
          }
          else
          {
            uint64_t v26 = *(void *)(v10 + 200);
            uint64_t v34 = 0;
            *(void *)(v26 + 8 * v23) = v22;
            *(_DWORD *)(v10 + 212) = v23 + 1;
          }
          uint64_t v24 = v34;
          uint64_t v34 = 0;
          if (v24) {
            (*(void (**)(WTF *))(*(void *)v24 + 8))(v24);
          }
        }
        goto LABEL_27;
      }
      WTF::MonotonicTime::now(v11);
      *(void *)(v10 + 312) = v12;
      uint64_t v13 = *(void *)(v10 + 64);
      *(void *)&long long v38 = *(void *)(v10 + 56);
      *((void *)&v38 + 1) = v13;
      WebCore::Region::rects((uint64_t *)&v34, (WebCore::Region *)(v10 + 56));
      if (v36 <= 5
        && (float)((float)((float)(int)v13 * 0.75) * (float)SHIDWORD(v13)) >= (float)(unint64_t)WebCore::Region::totalArea((WebCore::Region *)(v10 + 56)))
      {
        goto LABEL_38;
      }
      WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v34, 0);
      if (v36 == v35) {
        break;
      }
      *((_OWORD *)v34 + v36) = v38;
      unsigned int v14 = ++v36;
LABEL_19:
      if (v14)
      {
        __int16 v15 = v34;
        uint64_t v16 = 16 * v14;
        do
        {
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v33, v15);
          WebCore::FloatRect::scale((WebCore::FloatRect *)&v33, *(float *)(v10 + 48), *(float *)(v10 + 48));
          v31[0] = WebCore::enclosingIntRect((WebCore *)&v33, v17);
          v31[1] = v18;
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v32, (const WebCore::IntRect *)v31);
          long long v33 = v32;
          WebCore::FloatRect::scale((WebCore::FloatRect *)&v33, 1.0 / *(float *)(v10 + 48), 1.0 / *(float *)(v10 + 48));
          uint64_t v19 = *(unsigned int *)(v10 + 228);
          if (v19 == *(_DWORD *)(v10 + 224))
          {
            WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v10 + 216, (unint64_t)&v33);
          }
          else
          {
            *(_OWORD *)(*(void *)(v10 + 216) + 16 * v19) = v33;
            ++*(_DWORD *)(v10 + 228);
          }
          __int16 v15 = (WTF *)((char *)v15 + 16);
          v16 -= 16;
        }
        while (v16);
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
      uint64_t v21 = v34;
      if (&v37 != (uint64_t *)v34 && v34)
      {
        uint64_t v34 = 0;
        int v35 = 0;
        WTF::fastFree(v21, v20);
      }
LABEL_27:
      WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
      uint64_t v8 = v30;
      if (v30 == v28) {
        return v9 & 1;
      }
    }
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect&>((uint64_t)&v34, (unint64_t)&v38);
LABEL_38:
    unsigned int v14 = v36;
    goto LABEL_19;
  }
  char v9 = 0;
  return v9 & 1;
}

void sub_19864447C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26)
{
  if (a25) {
    (*(void (**)(WTF *))(*(void *)a25 + 8))(a25);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoresForDisplay(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerTreeTransaction *a2)
{
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  int v4 = (uint64_t *)((char *)this + 72);
  unsigned int v5 = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 72, a2);
  if (v5)
  {
    if (v5 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1986449A8);
    }
    LODWORD(v62) = 40 * v5 / 0x28;
    uint64_t v61 = WTF::fastMalloc((WTF *)(40 * v5));
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unsigned int v7 = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v4, v6);
  if (v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      goto LABEL_77;
    }
    LODWORD(v60) = v7;
    uint64_t v59 = WTF::fastMalloc((WTF *)(8 * v7));
  }
  uint64_t v8 = (unsigned int *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(*(WebKit::WebPage **)(*((void *)this + 2)
                                                                                              + 24));
  char v9 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v4);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator((uint64_t **)&v57, v4, v9, v10);
  uint64_t v11 = (void *)*v4;
  if (*v4)
  {
    uint64_t v12 = *((unsigned int *)v11 - 1);
    uint64_t v13 = &v11[v12];
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v55, v4, v13, &v11[v12]);
  uint64_t v15 = v58;
  if (v58 != v56)
  {
    int8x16_t v50 = (int8x16_t)vdupq_n_s64(0x400uLL);
    do
    {
      uint64_t v16 = *(void *)(*(void *)v15 + 8);
      int v17 = *(int8x16_t **)(v16 + 16);
      v17[4] = vorrq_s8(v17[4], v50);
      WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(a2, v17->i32);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16))
      {
        if (WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay((WebKit::RemoteLayerBackingStore *)v16)) {
          goto LABEL_51;
        }
        uint64_t v18 = *(void *)(v16 + 320);
        if (!v18) {
          goto LABEL_51;
        }
        uint64_t v19 = (atomic_uchar **)(v18 + 16);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v18 + 16));
        if (!*(unsigned char *)(v16 + 176) && *(unsigned char *)(v16 + 456)) {
          goto LABEL_23;
        }
        uint64_t v20 = WebCore::ImageBuffer::calculateBackendSize();
        unint64_t v21 = HIDWORD(v20);
        if ((int)v20 >= 0) {
          unsigned int v22 = v20;
        }
        else {
          unsigned int v22 = -(int)v20;
        }
        if (v20 < 0) {
          LODWORD(v21) = -HIDWORD(v20);
        }
        unint64_t v23 = v22 * (unint64_t)v21;
        if ((v23 & 0xFFFFFFFF00000000) == 0 && v23 <= 0x1000) {
LABEL_23:
        }
          WebKit::RemoteLayerBackingStore::setNeedsDisplay((WebKit::RemoteLayerBackingStore *)v16);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v18 + 16));
        uint64_t v51 = v18;
        WebCore::Region::Region((WebCore::Region *)v52, (const WebCore::Region *)(v16 + 56));
        uint64_t v24 = WebCore::ImageBuffer::calculateBackendSize();
        unint64_t v25 = HIDWORD(v24);
        if ((int)v24 >= 0) {
          unsigned int v26 = v24;
        }
        else {
          unsigned int v26 = -(int)v24;
        }
        if (v24 < 0) {
          LODWORD(v25) = -HIDWORD(v24);
        }
        unint64_t v27 = v26 * (unint64_t)v25;
        BOOL v29 = (v27 & 0xFFFFFFFF00000000) != 0 || v27 > 0x1000;
        LOBYTE(v53) = v29;
        BOOL v30 = *(int *)(v16 + 64) < 1
           || *(int *)(v16 + 68) < 1
           || *(float *)(v16 + 28) <= 0.0
           || *(float *)(v16 + 32) <= 0.0;
        HIBYTE(v53) = v30;
        if (*(unsigned char *)(v16 + 53)) {
          char v31 = 0;
        }
        else {
          char v31 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v16 + 16) + 48) + 232))(*(void *)(*(void *)(v16 + 16) + 48)) ^ 1;
        }
        char v54 = v31;
        unsigned int v32 = HIDWORD(v62);
        if (HIDWORD(v62) == v62)
        {
          WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData>((uint64_t)&v61, (unint64_t)&v51);
        }
        else
        {
          uint64_t v33 = v61;
          uint64_t v34 = v51;
          uint64_t v51 = 0;
          *(void *)(v61 + 40 * HIDWORD(v62)) = v34;
          WebCore::Region::Region();
          uint64_t v35 = v33 + 40 * v32;
          __int16 v36 = v53;
          *(unsigned char *)(v35 + 34) = v54;
          *(_WORD *)(v35 + 32) = v36;
          ++HIDWORD(v62);
        }
        WebCore::Region::~Region((WebCore::Region *)v52);
        uint64_t v38 = v51;
        uint64_t v51 = 0;
        if (v38) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v38 + 16), v37);
        }
        uint64_t v39 = HIDWORD(v60);
        if (HIDWORD(v60) == v60)
        {
          WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerWithRemoteRenderingBackingStore&>((uint64_t)&v59, v16);
        }
        else
        {
          uint64_t v40 = v59;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v16 + 8), v16);
          long long v42 = *(atomic_uint **)(v16 + 8);
          if (v42) {
            atomic_fetch_add(v42, 1u);
          }
          *(void *)(v40 + 8 * v39) = v42;
          ++HIDWORD(v60);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v19, v41);
      }
      (*(void (**)(uint64_t))(*(void *)v16 + 48))(v16);
LABEL_51:
      WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v57);
      uint64_t v15 = v58;
    }
    while (v58 != v56);
  }
  if (HIDWORD(v62))
  {
    WebKit::RemoteRenderingBackendProxy::prepareImageBufferSetsForDisplay(v8, &v61, (uint64_t)&v57);
    unint64_t v43 = HIDWORD(v58);
    if (HIDWORD(v58) == (unint64_t)HIDWORD(v60))
    {
      if (HIDWORD(v58))
      {
        unint64_t v44 = 0;
        do
        {
          if (v44 >= HIDWORD(v60))
          {
            __break(0xC471u);
            JUMPOUT(0x1986449A0);
          }
          if (!*((unsigned char *)v57 + v44))
          {
            uint64_t v48 = *(void *)(v59 + 8 * v44);
            if (v48) {
              uint64_t v49 = *(WebKit::RemoteLayerBackingStore **)(v48 + 8);
            }
            else {
              uint64_t v49 = 0;
            }
            WebKit::RemoteLayerBackingStore::setNeedsDisplay(v49);
            unint64_t v43 = HIDWORD(v58);
          }
          ++v44;
        }
        while (v44 < v43);
      }
      goto LABEL_62;
    }
    if (!HIDWORD(v58))
    {
LABEL_62:
      uint64_t v45 = v57;
      if (v57)
      {
        uint64_t v57 = 0;
        LODWORD(v58) = 0;
        WTF::fastFree(v45, v14);
      }
      goto LABEL_64;
    }
    __break(0xC471u);
LABEL_77:
    JUMPOUT(0x198644970);
  }
LABEL_64:
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v14);
  return WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v61, v46);
}

void sub_1986449B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  if (a21) {
    WTF::fastFree(a21, a2);
  }
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 120, a2);
  WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v22 - 104), v24);
  _Unwind_Resume(a1);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (!v6)
  {
    if (v7) {
      this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (!v8)
    {
      return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_19;
  }
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  if (!v4)
  {
LABEL_14:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_15;
  }
  int v5 = 0;
  uint64_t v6 = v4 - 1;
  do
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v3 + 8 * v6);
    if ((unint64_t)(v8 + 1) >= 2 && !*(void *)(v8 + 8))
    {
      *(void *)(v3 + 8 * v6) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v8);
        uint64_t v17 = v6;
        uint64_t v18 = v3;
        int v16 = v5;
        uint64_t v19 = v6;
        WTF::fastFree((WTF *)v8, a2);
        uint64_t v3 = v18;
        uint64_t v7 = v19;
        uint64_t v6 = v17;
        int v5 = v16;
      }
      *(void *)(v3 + 8 * v7) = -1;
      ++v5;
    }
    --v6;
  }
  while (v7);
  uint64_t v3 = *(void *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    uint64_t v14 = *(void *)a1;
    if (*(void *)a1) {
      int v15 = *(_DWORD *)(v14 - 12);
    }
    else {
      int v15 = 0;
    }
    *(_DWORD *)(v14 - 12) = v15 - v5;
    uint64_t v3 = *(void *)a1;
  }
  if (!v3)
  {
LABEL_19:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_20:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  unsigned int v9 = *(_DWORD *)(v3 - 4);
  if (v9 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v9) {
    goto LABEL_14;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  uint64_t v3 = *(void *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3) {
    goto LABEL_20;
  }
LABEL_15:
  unsigned int v11 = *(_DWORD *)(v3 - 12);
  if (v11 >= 0x7FFFFFFF) {
    int v12 = -2;
  }
  else {
    int v12 = 2 * v11;
  }
  *(_DWORD *)(a1 + 12) = v12;
  return *(unsigned int *)(v3 - 12);
}

void WebKit::RemoteLayerBackingStore::setNeedsDisplay(WebKit::RemoteLayerBackingStore *this)
{
  v2.m_location = (IntPoint)WebKit::RemoteLayerBackingStore::layerBounds(this);
  v2.m_size = v1;
  WebCore::Region::Region((WebCore::Region *)v3, &v2);
  WebCore::Region::unite();
  WebCore::Region::~Region((WebCore::Region *)v3);
}

void sub_198644D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::Region::~Region((WebCore::Region *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStore::layerBounds(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::isRemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  return 1;
}

WTF *WebKit::RemoteLayerTreeTransaction::setCreatedLayers(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 60);
  if (v4)
  {
    uint64_t v6 = 80 * v4;
    uint64_t v7 = *v3 + 56;
    do
    {
      uint64_t v8 = *(unsigned int *)(v7 + 16);
      if (v8 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 16) = -1;
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
  }
  return WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    int v5 = 0;
    int v6 = 0;
    goto LABEL_3;
  }
  int v5 = *(_DWORD *)(v4 - 4);
  int v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    unsigned int v7 = 8;
    goto LABEL_4;
  }
  unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    do
    {
      int v12 = (uint64_t *)(v4 + 8 * v10);
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v13 != -1)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 8 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          unint64_t v23 = (void *)(v14 + 8 * v21);
          void *v23 = 0;
          uint64_t v24 = *v12;
          uint64_t *v12 = 0;
          void *v23 = v24;
          uint64_t v25 = *v12;
          uint64_t *v12 = 0;
          if (v25) {
            WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
          }
          if (v12 == a2) {
            unsigned int v11 = v23;
          }
        }
      }
      else
      {
        uint64_t *v12 = 0;
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      int v6 = *v4;
      *uint64_t v4 = 0;
      if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      unsigned int v7 = *(uint64_t **)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v7;
        if (*v7) {
          atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
        }
        *v5++ = v9;
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    uint64_t v5 = (WebCore::Region *)(*(void *)a1 + 8);
    do
    {
      WebCore::Region::~Region(v5);
      uint64_t v6 = *((void *)v5 - 1);
      *((void *)v5 - 1) = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
      }
      uint64_t v5 = (WebCore::Region *)((char *)v5 + 40);
      v4 -= 40;
    }
    while (v4);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

atomic_uchar *WebKit::RemoteLayerWithRemoteRenderingBackingStore::createContextAndPaintContents(atomic_uchar *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1)
  {
    uint64_t v2 = (WebKit::RemoteLayerBackingStore *)this;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v1 + 16));
    uint64_t v3 = *(WebCore::GraphicsContext **)(v1 + 48);
    if (v3)
    {
      WebKit::RemoteLayerBackingStore::drawInContext(v2, v3);
      *((unsigned char *)v2 + 456) = 0;
    }
    uint64_t v4 = *(atomic_uchar **)(v1 + 16);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v4, v3);
  }
  return this;
}

void sub_1986451E8(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::prepareToDisplay(uint64_t this)
{
  if (*(unsigned char *)(this + 176))
  {
    uint64_t v2 = this;
    uint64_t v1 = *(unsigned int *)(this + 168);
    if (v1 != -1) {
      this = off_1EE9C0238[v1]((int)&v3, (WTF::MachSendRight *)(this + 104));
    }
    *(_DWORD *)(v2 + 168) = -1;
    *(unsigned char *)(v2 + 176) = 0;
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 48);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v2);
  if (result)
  {
    unsigned int v4 = result;
    (*(void (**)(uint64_t, void))(*(void *)v2 + 120))(v2, *((void *)this + 2));
    (*(void (**)(uint64_t, void))(*(void *)v2 + 128))(v2, *((void *)this + 2));
    return v4;
  }
  return result;
}

unsigned int *WebKit::ProcessThrottler::sendPrepareToSuspendIPC(unsigned int *result, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)result + 189))
  {
    uint64_t v3 = (uint64_t)result;
    if (*((unsigned char *)result + 176))
    {
      if (a2)
      {
        unsigned int v4 = qword_1EB358348;
        if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)(*(void *)(*(void *)(v3 + 16) + 8) + 136);
          if (v5) {
            LODWORD(v5) = *(_DWORD *)(v5 + 108);
          }
          uint64_t v6 = *(void *)(v3 + 168);
          *(_DWORD *)unint64_t v18 = 134218752;
          *(void *)&v18[4] = v3;
          __int16 v19 = 1024;
          int v20 = v5;
          __int16 v21 = 1024;
          *(_DWORD *)uint64_t v22 = 1;
          *(_WORD *)&v22[4] = 2048;
          *(void *)&v22[6] = v6;
          _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::sendPrepareToSuspendIPC: Not sending PrepareToSuspend(isSuspensionImminent=%d) IPC because there is already one in flight (%llu)", v18, 0x22u);
        }
        return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v3, a2 ^ 1);
      }
      __break(0xC471u);
    }
    else
    {
      *((void *)result + 21) = ++WebKit::generatePrepareToSuspendRequestID(void)::prepareToSuspendRequestID;
      *((unsigned char *)result + 176) = 1;
      uint64_t v7 = *(void *)(*((void *)result + 2) + 8);
      atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
      uint64_t v8 = *(void *)(v7 + 136);
      if (v8) {
        uint64_t v9 = (WebKit::ProcessAssertion *)*(unsigned int *)(v8 + 108);
      }
      else {
        uint64_t v9 = 0;
      }
      double v10 = WebKit::ProcessAssertion::remainingRunTimeInSeconds(v9);
      unsigned int v11 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(*(void *)(*(void *)(v3 + 16) + 8) + 136);
        if (v12) {
          LODWORD(v12) = *(_DWORD *)(v12 + 108);
        }
        if (!*(unsigned char *)(v3 + 176)) {
          goto LABEL_25;
        }
        uint64_t v13 = *(void *)(v3 + 168);
        *(_DWORD *)unint64_t v18 = 134219008;
        *(void *)&v18[4] = v3;
        __int16 v19 = 1024;
        int v20 = v12;
        __int16 v21 = 2048;
        *(void *)uint64_t v22 = v13;
        *(_WORD *)&unsigned char v22[8] = 1024;
        *(_DWORD *)&v22[10] = a2;
        __int16 v23 = 2048;
        double v24 = v10;
        _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::sendPrepareToSuspendIPC: Sending PrepareToSuspend(%llu, isSuspensionImminent=%d) IPC, remainingRunTime=%fs", v18, 0x2Cu);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v3, v3);
      uint64_t v14 = *(atomic_uint **)v3;
      if (*(void *)v3) {
        atomic_fetch_add(v14, 1u);
      }
      if (*(unsigned char *)(v3 + 176))
      {
        uint64_t v15 = *(void *)(v3 + 168);
        unint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
        *unint64_t v16 = &unk_1EE9D7170;
        v16[1] = v3;
        void v16[2] = v14;
        v16[3] = v15;
        *(void *)unint64_t v18 = v16;
        (*(void (**)(uint64_t, uint64_t, unsigned char *, double))(*(void *)v7 + 88))(v7, a2, v18, v10);
        uint64_t v17 = *(void *)v18;
        *(void *)unint64_t v18 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
        return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v3, a2 ^ 1);
      }
    }
LABEL_25:
    __break(1u);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessProxy::sendPrepareToSuspend(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB358348;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 136);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    }
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::sendPrepareToSuspend: isSuspensionImminent=%d", buf, 0x18u);
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  double v21 = v11 + a4;
  LOBYTE(v22[0]) = a2;
  v22[1] = &v21;
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2648;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __int16 v23 = v12;
  IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::MonotonicTime const&>,0ul,1ul>(v12, v22);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DD5F8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)buf = v14;
  *(void *)&uint8_t buf[8] = v15;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v23, 0, (uint64_t)buf, 0);
  if (buf[16])
  {
    uint64_t v17 = *(void *)buf;
    *(void *)buf = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t result = v23;
  __int16 v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>(a2, (uint64_t)v11);
  if (v12)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v13 = (uint64_t *)result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v14, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EEA0C1B0;
      v8[1] = v13;
      BOOL v9 = v14[0];
      v14[0] = 0;
      void v8[2] = v9;
      uint64_t v10 = v8;
      uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
      if (v12)
      {
        uint64_t v16 = a3;
        v15[0] = WebKit::WebProcess::prepareToSuspend;
        v15[1] = 0;
        uint64_t v13 = &v16;
        v14[0] = (atomic_uchar *volatile *)v15;
        v14[1] = (atomic_uchar *volatile *)&v10;
        IPC::callMemberFunction<WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&),std::tuple<BOOL,WTF::MonotonicTime>,void ()(void)>(WebKit::WebProcess *,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebProcess::*,std::tuple<BOOL,WTF::MonotonicTime> &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(WebKit::WebProcess &&)#1}::operator()<BOOL,WTF::MonotonicTime>((uint64_t)&v13, v11[0]);
        uint64_t result = (uint64_t)v10;
        uint64_t v10 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&),std::tuple<BOOL,WTF::MonotonicTime>,void ()(void)>(WebKit::WebProcess *,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebProcess::*,std::tuple<BOOL,WTF::MonotonicTime> &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(WebKit::WebProcess &&)#1}::operator()<BOOL,WTF::MonotonicTime>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(void *, BOOL, void))v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = (void *)(**(void **)a1 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, BOOL, void))(*v5 + v3);
  }
  return v3(v5, a2 != 0, *(void *)(a1 + 16));
}

uint64_t WebKit::WebProcess::prepareToSuspend(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  if (v8 <= a4) {
    double v9 = 0.0;
  }
  else {
    double v9 = v8 - a4;
  }
  uint64_t v10 = qword_1EB358348;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (*(unsigned char *)(a1 + 672)) {
      uint64_t v12 = *(void *)(a1 + 664);
    }
    else {
      uint64_t v12 = 0;
    }
    *(_DWORD *)uint64_t v22 = 134218752;
    *(void *)&v22[4] = a1;
    __int16 v23 = 2048;
    uint64_t v24 = v12;
    __int16 v25 = 1024;
    int v26 = a2;
    __int16 v27 = 2048;
    double v28 = v9;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::prepareToSuspend: isSuspensionImminent=%d, remainingRunTime=%fs", v22, 0x26u);
  }
  char v13 = *(unsigned char *)(a1 + 617);
  *(unsigned char *)(a1 + 617) = 0;
  *(unsigned char *)(a1 + 504) = 1;
  WebKit::WebProcess::flushResourceLoadStatistics((WebKit::WebProcess *)v11);
  if (*(_DWORD *)(a1 + 596) == 2)
  {
    __int16 v19 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 672)) {
        uint64_t v20 = *(void *)(a1 + 664);
      }
      else {
        uint64_t v20 = 0;
      }
      *(_DWORD *)uint64_t v22 = 134218240;
      *(void *)&v22[4] = a1;
      __int16 v23 = 2048;
      uint64_t v24 = v20;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::prepareToSuspend: Process is ready to suspend", v22, 0x16u);
    }
    uint64_t v21 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  else
  {
    uint64_t v14 = (WebCore::PlatformMediaSessionManager *)WebKit::WebProcess::suspendAllMediaBuffering((WebKit::WebProcess *)a1);
    uint64_t v15 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(v14);
    if (v15) {
      WebCore::PlatformMediaSessionManager::processWillSuspend(v15);
    }
    WebKit::WebProcess::freezeAllLayerTrees((WebKit::WebProcess *)a1);
    WebKit::WebProcess::destroyRenderingResources((WebKit::WebProcess *)a1);
    WebKit::WebProcess::accessibilityRelayProcessSuspended((WebKit::WebProcess *)a1, 1);
    WebKit::WebProcess::updateFreezerStatus((WebKit::WebProcess *)a1);
    uint64_t v16 = *a3;
    *a3 = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v17 = &unk_1EE9E71D0;
    v17[1] = a1;
    char v17[2] = v16;
    *(void *)uint64_t v22 = v17;
    WebKit::WebProcess::markAllLayersVolatile(a1, (uint64_t *)v22);
    uint64_t result = *(void *)v22;
    if (*(void *)v22) {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v22 + 8))(*(void *)v22);
    }
  }
  *(unsigned char *)(a1 + 617) = v13;
  return result;
}

IPC::Encoder **IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebProcess *,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebProcess::*)::{lambda(Messages::WebProcess::PrepareToSuspend &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3544;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

uint64_t WebKit::WebProcess::flushResourceLoadStatistics(WebKit::WebProcess *this)
{
  uint64_t result = WebCore::ResourceLoadObserver::sharedIfExists(this);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v3 = &unk_1EE9E7220;
    uint64_t v4 = (uint64_t)v3;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 96))(v2, &v4);
    uint64_t result = v4;
    uint64_t v4 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16PrepareToSuspendEN6WebKit10WebProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C1B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16PrepareToSuspendEN6WebKit10WebProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebProcess *,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebProcess::*)::{lambda(Messages::WebProcess::PrepareToSuspend &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result >= 0x100u && (char v5 = result, result = IPC::Decoder::decode<WTF::MonotonicTime>(a1), v6))
  {
    *(void *)(a2 + 8) = result;
    char v7 = 1;
  }
  else
  {
    char v5 = 0;
    char v7 = 0;
  }
  *(unsigned char *)a2 = v5;
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

WTF *WebKit::ViewUpdateDispatcher::didReceiveMessage(WTF *this, IPC::Connection *a2, WTF **a3)
{
  if (*((_WORD *)a3 + 25) == 1549)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v7 = v5;
    IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::decode((unint64_t *)a3, (uint64_t)v15);
    if (v16
      || (v8 = *a3, double v9 = a3[1], *a3 = 0, a3[1] = 0, (v10 = a3[3]) != 0)
      && v9
      && ((*(void (**)(WTF *, WTF *))(*(void *)v10 + 16))(v10, v8), v16))
    {
      v13[6] = v15[6];
      v13[7] = v15[7];
      v13[8] = v15[8];
      v13[9] = v15[9];
      v13[10] = v15[10];
      v13[3] = v15[3];
      v13[4] = v15[4];
      v13[5] = v15[5];
      v13[0] = v15[0];
      v13[1] = v15[1];
      _OWORD v13[2] = v15[2];
      char v14 = 1;
      return WebKit::ViewUpdateDispatcher::visibleContentRectUpdate(v4, v7, v13);
    }
    else
    {
LABEL_6:
      BOOL v11 = *a3;
      uint64_t v12 = a3[1];
      *a3 = 0;
      a3[1] = 0;
      this = a3[3];
      if (this)
      {
        if (v12) {
          return (WTF *)(*(uint64_t (**)(WTF *, WTF *))(*(void *)this + 16))(this, v11);
        }
      }
    }
  }
  return this;
}

WTF *WebKit::ViewUpdateDispatcher::visibleContentRectUpdate(uint64_t a1, uint64_t a2, long long *a3)
{
  char v5 = 0;
  uint64_t v36 = a2;
  char v6 = (atomic_uchar *)(a1 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 24), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 24);
  }
  double v8 = (WTF **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    BOOL v9 = *(_DWORD *)(v7 - 12) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v36);
  BOOL v11 = *v8;
  if (*v8) {
    BOOL v11 = (WTF *)((char *)v11 + 16 * *((unsigned int *)v11 - 1));
  }
  if (v11 == result)
  {
    uint64_t v21 = *((void *)a3 + 18);
    uint64_t v22 = WTF::fastMalloc((WTF *)0xB8);
    long long v23 = *a3;
    long long v24 = a3[2];
    *(_OWORD *)(v22 + 16) = a3[1];
    *(_OWORD *)(v22 + 32) = v24;
    *(_OWORD *)uint64_t v22 = v23;
    long long v25 = a3[3];
    long long v26 = a3[4];
    long long v27 = a3[6];
    *(_OWORD *)(v22 + 80) = a3[5];
    *(_OWORD *)(v22 + 96) = v27;
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)(v22 + 64) = v26;
    long long v28 = a3[7];
    long long v29 = a3[8];
    long long v30 = a3[10];
    *(_OWORD *)(v22 + 144) = a3[9];
    *(_OWORD *)(v22 + 160) = v30;
    *(_OWORD *)(v22 + 112) = v28;
    *(_OWORD *)(v22 + 128) = v29;
    *(void *)(v22 + 176) = v21;
    uint64_t v35 = (WTF *)v22;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>((uint64_t *)(a1 + 32), &v36, (uint64_t *)&v35, (uint64_t)&v34);
    uint64_t result = v35;
    uint64_t v35 = 0;
    if (result) {
      uint64_t result = (WTF *)WTF::fastFree(result, v31);
    }
  }
  else
  {
    uint64_t v12 = (_OWORD *)*((void *)result + 1);
    long long v13 = *a3;
    long long v14 = a3[2];
    v12[1] = a3[1];
    v12[2] = v14;
    _OWORD *v12 = v13;
    long long v15 = a3[3];
    long long v16 = a3[4];
    long long v17 = a3[6];
    v12[5] = a3[5];
    v12[6] = v17;
    v12[3] = v15;
    void v12[4] = v16;
    long long v18 = a3[7];
    long long v19 = a3[8];
    long long v20 = a3[9];
    *(_OWORD *)((char *)v12 + 156) = *(long long *)((char *)a3 + 156);
    v12[8] = v19;
    v12[9] = v20;
    v12[7] = v18;
  }
  int v32 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 == 1)
  {
    if (!v9) {
      return result;
    }
  }
  else
  {
    uint64_t result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (!v9) {
      return result;
    }
  }
  WTF::RunLoop::main(result);
  uint64_t v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v33 = &unk_1EE9F89A8;
  *((void *)v33 + 1) = a1;
  uint64_t v34 = v33;
  WTF::RunLoop::dispatch();
  uint64_t result = v34;
  uint64_t v34 = 0;
  if (result) {
    return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return v2 + 16 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 16 * v7;
    }
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  long long v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *long long v16 = v11;
    uint64_t v20 = *a3;
    *a3 = 0;
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = v20;
    if (result) {
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, v16);
        long long v16 = result;
        uint64_t v25 = *a1;
        if (*a1) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  long long v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      long long v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    long long v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        uint64_t *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = *a2;
        long long v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v8 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v29 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v29;
  if (result)
  {
    return (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = (uint64_t *)(v16 + 16 * v23);
          int v26 = (WTF *)v25[1];
          v25[1] = 0;
          if (v26) {
            WTF::fastFree(v26, v9);
          }
          *uint64_t v25 = *v12;
          uint64_t v27 = v4 + 16 * v10;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v25[1] = v28;
          uint64_t v29 = *(WTF **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            WTF::fastFree(v29, v9);
          }
          if (v12 == a2) {
            uint64_t v11 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          unsigned int v15 = *(WTF **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15) {
            WTF::fastFree(v15, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t IPC::ArgumentCoder<WebCore::ScreenProperties,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)a1 + 1);
  int v5 = *(char **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    uint64_t v8 = (int *)&v5[v6];
    *((void *)a1 + 2) = v8 + 1;
    if (!v5)
    {
      unint64_t v69 = v4;
      uint64_t v70 = 0;
      goto LABEL_91;
    }
    int v9 = 0;
    int v10 = *v8;
    unsigned int v11 = v10 & 0xFFFFFF00;
    int v12 = v10;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v69 = 0;
    uint64_t v70 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v71 = *((void *)a1 + 3);
    if (v71)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
        uint64_t v70 = *(char **)a1;
        unint64_t v69 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v69 = 0;
        uint64_t v70 = 0;
      }
    }
LABEL_91:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v72 = *((void *)a1 + 3);
    if (v72 && v69)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v72 + 16))(v72, v70, v69);
      unsigned int v11 = 0;
      int v12 = 0;
      int v5 = *(char **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      int v5 = 0;
      unsigned int v11 = 0;
      int v12 = 0;
    }
    int v9 = 1;
LABEL_8:
    unint64_t v13 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v5;
    if (v4 < v13 || v4 - v13 <= 3)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v75 = *((void *)a1 + 3);
      if (v75)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v75 + 16))(v75);
          uint64_t v74 = *(char **)a1;
          unint64_t v73 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v73 = 0;
          uint64_t v74 = 0;
        }
      }
      goto LABEL_95;
    }
    unsigned int v15 = (int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v15 + 1;
    if (!v5)
    {
      unint64_t v73 = v4;
      uint64_t v74 = 0;
LABEL_95:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v76 = *((void *)a1 + 3);
      if (v76)
      {
        if (v73) {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v76 + 16))(v76, v74, v73);
        }
      }
LABEL_88:
      uint64_t result = IPC::Decoder::markInvalid(a1);
      if (!*(void *)a1)
      {
        *a2 = 0;
        a2[16] = 0;
        return result;
      }
      goto LABEL_89;
    }
    int v16 = *v15;
    uint64_t v101 = 0;
    if (v16) {
      break;
    }
    uint64_t result = 0;
LABEL_70:
    if (!v9)
    {
      *(_DWORD *)a2 = v12 | v11;
      *((void *)a2 + 1) = result;
      a2[16] = 1;
      return result;
    }
LABEL_89:
    __break(1u);
  }
  int v94 = v12;
  unsigned int v95 = v11;
  int v96 = v9;
  int v97 = a2;
  int v18 = 0;
  int v98 = v16;
  do
  {
    unint64_t v19 = *((void *)a1 + 1);
    unint64_t v20 = *(char **)a1;
    unint64_t v21 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    if (v19 < v21 || v19 - v21 <= 3)
    {
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v77 = *((void *)a1 + 3);
      if (v77) {
        BOOL v78 = v19 == 0;
      }
      else {
        BOOL v78 = 1;
      }
      a2 = v97;
      if (!v78)
      {
        (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
        unint64_t v20 = *(char **)a1;
        unint64_t v19 = *((void *)a1 + 1);
LABEL_103:
        uint64_t v79 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        if (v79) {
          BOOL v80 = v19 == 0;
        }
        else {
          BOOL v80 = 1;
        }
        a2 = v97;
        if (!v80) {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v79 + 16))(v79, v20, v19);
        }
      }
      goto LABEL_86;
    }
    unsigned int v23 = &v20[v21];
    *((void *)a1 + 2) = v23 + 4;
    if (!v20) {
      goto LABEL_103;
    }
    int v24 = *(_DWORD *)v23;
    IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a1, (uint64_t)&v106);
    IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a1, (uint64_t)&v104);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a1, v25, (uint64_t)&cf);
    uint64_t v100 = IPC::Decoder::decode<unsigned int>(a1);
    uint64_t v99 = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v26 = *((void *)a1 + 1);
    uint64_t v27 = *(char **)a1;
    unint64_t v28 = *((void *)a1 + 2) - *(void *)a1;
    if (v26 <= v28)
    {
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v81 = *((void *)a1 + 3);
      if (!v81 || !v26)
      {
LABEL_109:
        char v34 = 0;
        unint64_t v82 = 0;
        char v83 = 0;
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        int v32 = 1;
LABEL_110:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v84 = *((void *)a1 + 3);
        if (v84 && v82)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v84 + 16))(v84, v83, v82);
          unsigned int v38 = 0;
          uint64_t v27 = *(char **)a1;
          unint64_t v26 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v26 = 0;
          uint64_t v27 = 0;
          unsigned int v38 = 0;
        }
        goto LABEL_112;
      }
      (*(void (**)(uint64_t))(*(void *)v81 + 16))(v81);
      uint64_t v27 = *(char **)a1;
      unint64_t v26 = *((void *)a1 + 1);
LABEL_141:
      uint64_t v90 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (!v90 || !v26) {
        goto LABEL_109;
      }
      (*(void (**)(uint64_t, char *))(*(void *)v90 + 16))(v90, v27);
      unsigned int v31 = 0;
      uint64_t v27 = *(char **)a1;
      unint64_t v26 = *((void *)a1 + 1);
      goto LABEL_144;
    }
    uint64_t v29 = &v27[v28];
    uint64_t v30 = (uint64_t)&v27[v28 + 1];
    *((void *)a1 + 2) = v30;
    if (!v27) {
      goto LABEL_141;
    }
    unsigned int v31 = *v29;
    if (v31 < 2)
    {
      int v32 = 0;
      char v33 = 1;
      goto LABEL_27;
    }
LABEL_144:
    unint64_t v82 = 0;
    char v34 = 0;
    uint64_t v91 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    char v83 = 0;
    int v32 = 1;
    if (!v91 || !v26) {
      goto LABEL_110;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v91 + 16))(v91, v27);
    char v33 = 0;
    uint64_t v27 = *(char **)a1;
    unint64_t v26 = *((void *)a1 + 1);
    uint64_t v30 = *((void *)a1 + 2);
LABEL_27:
    if (v31) {
      char v34 = v33;
    }
    else {
      char v34 = 0;
    }
    unint64_t v35 = v30 - (void)v27;
    if (v26 <= v35)
    {
      unint64_t v82 = 0;
      uint64_t v92 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v26 && v92)
      {
        (*(void (**)(uint64_t))(*(void *)v92 + 16))(v92);
        char v83 = *(char **)a1;
        unint64_t v82 = *((void *)a1 + 1);
      }
      else
      {
        char v83 = 0;
      }
      goto LABEL_110;
    }
    uint64_t v36 = &v27[v35];
    uint64_t v37 = (uint64_t)&v27[v35 + 1];
    *((void *)a1 + 2) = v37;
    if (!v27)
    {
      unint64_t v82 = v26;
      char v83 = 0;
      goto LABEL_110;
    }
    unsigned int v38 = *v36;
    if (v38 < 2)
    {
      int v39 = 0;
      char v40 = 1;
      goto LABEL_34;
    }
LABEL_112:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v85 = *((void *)a1 + 3);
    if (!v85 || !v26)
    {
      char v41 = 0;
      unint64_t v86 = 0;
      uint64_t v27 = 0;
      int v39 = 1;
LABEL_114:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v87 = *((void *)a1 + 3);
      if (v87 && v86)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v87 + 16))(v87, v27, v86);
        unsigned int v44 = 0;
        uint64_t v27 = *(char **)a1;
        unint64_t v26 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0;
        unsigned int v44 = 0;
      }
      goto LABEL_116;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v85 + 16))(v85, v27);
    char v40 = 0;
    uint64_t v27 = *(char **)a1;
    unint64_t v26 = *((void *)a1 + 1);
    int v39 = 1;
    uint64_t v37 = *((void *)a1 + 2);
LABEL_34:
    if (v38) {
      char v41 = v40;
    }
    else {
      char v41 = 0;
    }
    unint64_t v42 = v37 - (void)v27;
    if (v26 <= v42)
    {
      unint64_t v86 = 0;
      uint64_t v93 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v26 && v93)
      {
        (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
        uint64_t v27 = *(char **)a1;
        unint64_t v86 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v27 = 0;
      }
      goto LABEL_114;
    }
    unint64_t v43 = &v27[v42];
    *((void *)a1 + 2) = v43 + 1;
    if (!v27)
    {
      unint64_t v86 = v26;
      goto LABEL_114;
    }
    unsigned int v44 = *v43;
    if (v44 < 2)
    {
      int v45 = 0;
      unsigned int v46 = 1;
      goto LABEL_41;
    }
LABEL_116:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v88 = *((void *)a1 + 3);
    if (v88 && v26) {
      (*(void (**)(uint64_t, char *))(*(void *)v88 + 16))(v88, v27);
    }
    unsigned int v46 = 0;
    int v45 = 1;
LABEL_41:
    if (v44) {
      a2 = (unsigned char *)v46;
    }
    else {
      a2 = 0;
    }
    uint64_t v47 = IPC::Decoder::decode<float>(a1);
    if (!*(void *)a1)
    {
      if (v103)
      {
        CFTypeRef v89 = cf;
        CFTypeRef cf = 0;
        if (v89) {
          CFRelease(v89);
        }
      }
      IPC::Decoder::markInvalid(a1);
      a2 = v97;
      goto LABEL_86;
    }
    if (!v108) {
      goto LABEL_89;
    }
    int v48 = v39;
    char v49 = v106;
    *(void *)&v110[0] = *(void *)v107;
    *(void *)((char *)v110 + 7) = *(void *)&v107[7];
    if (!v105) {
      goto LABEL_89;
    }
    *(_OWORD *)((char *)v110 + 15) = v104;
    if (!v103) {
      goto LABEL_89;
    }
    int v50 = v32;
    char v51 = v34;
    CFTypeRef v52 = cf;
    CFTypeRef cf = 0;
    if ((v100 & 0xFF00000000) == 0) {
      goto LABEL_89;
    }
    if ((v99 & 0xFF00000000) == 0) {
      goto LABEL_89;
    }
    if (v50) {
      goto LABEL_89;
    }
    if (v48) {
      goto LABEL_89;
    }
    if (v45) {
      goto LABEL_89;
    }
    int v53 = v47;
    if ((v47 & 0xFF00000000) == 0) {
      goto LABEL_89;
    }
    v109[0] = v110[0];
    *(_OWORD *)((char *)v109 + 15) = *(_OWORD *)((char *)v110 + 15);
    if ((v24 - 1) > 0xFFFFFFFD) {
      goto LABEL_83;
    }
    uint64_t v54 = v101;
    if (v101
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(&v101),
          (uint64_t v54 = v101) != 0))
    {
      unsigned int v55 = *(_DWORD *)(v54 - 8);
    }
    else
    {
      unsigned int v55 = 0;
    }
    unsigned int v56 = 9 * ((v24 + ~(v24 << 15)) ^ ((v24 + ~(v24 << 15)) >> 10));
    unsigned int v57 = (v56 ^ (v56 >> 6)) + ~((v56 ^ (v56 >> 6)) << 11);
    uint64_t v58 = v55 & (v57 ^ HIWORD(v57));
    uint64_t v59 = (_DWORD *)(v54 + (v58 << 6));
    int v60 = *v59;
    if (*v59)
    {
      uint64_t v67 = 0;
      int v68 = 1;
      while (v60 != v24)
      {
        if (v60 == -1) {
          uint64_t v67 = v59;
        }
        uint64_t v58 = (v58 + v68) & v55;
        uint64_t v59 = (_DWORD *)(v54 + (v58 << 6));
        int v60 = *v59;
        ++v68;
        if (!*v59)
        {
          if (v67)
          {
            uint64_t v59 = v67;
            _DWORD *v67 = 0;
            WTF::GenericHashTraits<WebCore::ScreenData>::emptyValue((uint64_t)(v67 + 2));
            --*(_DWORD *)(v101 - 16);
          }
          goto LABEL_59;
        }
      }
LABEL_83:
      if (v52) {
        CFRelease(v52);
      }
      a2 = v97;
LABEL_86:
      if (v101) {
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v101, v20);
      }
      goto LABEL_88;
    }
LABEL_59:
    *uint64_t v59 = v24;
    *((unsigned char *)v59 + 8) = v49;
    long long v61 = v109[0];
    *(_OWORD *)(v59 + 6) = *(_OWORD *)((char *)v109 + 15);
    *(_OWORD *)((char *)v59 + 9) = v61;
    uint64_t v62 = (const void *)*((void *)v59 + 5);
    *((void *)v59 + 5) = v52;
    if (v62) {
      CFRelease(v62);
    }
    v59[12] = v100;
    v59[13] = v99;
    *((unsigned char *)v59 + 56) = v51;
    *((unsigned char *)v59 + 57) = v41;
    *((unsigned char *)v59 + 58) = (_BYTE)a2;
    v59[15] = v53;
    uint64_t v63 = v101;
    if (v101) {
      int v64 = *(_DWORD *)(v101 - 12) + 1;
    }
    else {
      int v64 = 1;
    }
    *(_DWORD *)(v101 - 12) = v64;
    uint64_t v65 = (*(_DWORD *)(v63 - 16) + v64);
    unint64_t v66 = *(unsigned int *)(v63 - 4);
    if (v66 > 0x400)
    {
      if (v66 > 2 * v65) {
        goto LABEL_65;
      }
    }
    else if (3 * v66 > 4 * v65)
    {
      goto LABEL_65;
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(&v101);
LABEL_65:
    ++v18;
  }
  while (v18 != v98);
  uint64_t result = v101;
  unsigned int v11 = v95;
  int v9 = v96;
  int v12 = v94;
  if (*(void *)a1)
  {
    a2 = v97;
    goto LABEL_70;
  }
  unsigned char *v97 = 0;
  v97[16] = 0;
  if (result) {
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(result, v20);
  }
  return result;
}

void sub_198646FE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, char a19)
{
  if (a17) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(a17, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    LODWORD(v3) = 0;
    int v4 = 0;
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  LODWORD(v3) = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3) {
    goto LABEL_3;
  }
  unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  uint64_t v6 = v5;
  uint64_t result = WTF::fastMalloc((WTF *)(((unint64_t)v5 << 6) | 0x10));
  uint64_t v9 = result;
  uint64_t v10 = result + 16;
  if (v5)
  {
    uint64_t v11 = result + 24;
    do
    {
      *(_DWORD *)(v11 - 8) = 0;
      uint64_t result = (uint64_t)WTF::GenericHashTraits<WebCore::ScreenData>::emptyValue(v11);
      v11 += 64;
      --v6;
    }
    while (v6);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v3 = v3;
    uint64_t v12 = v2;
    while (1)
    {
      if (*(_DWORD *)v12 != -1)
      {
        if (*(_DWORD *)v12)
        {
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(*a1, (int *)v12);
          unint64_t v13 = *(const void **)(v12 + 40);
          *(void *)(v12 + 40) = 0;
          if (v13) {
LABEL_18:
          }
            CFRelease(v13);
        }
        else
        {
          unint64_t v13 = *(const void **)(v12 + 40);
          *(void *)(v12 + 40) = 0;
          if (v13) {
            goto LABEL_18;
          }
        }
      }
      v12 += 64;
      if (!--v3) {
        goto LABEL_20;
      }
    }
  }
  if (v2)
  {
LABEL_20:
    return WTF::fastFree((WTF *)(v2 - 16), v8);
  }
  return result;
}

CFTypeRef WTF::GenericHashTraits<WebCore::ScreenData>::emptyValue(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFTypeRef result = *(CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  *(void *)(a1 + 32) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(_DWORD *)(a1 + 47) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 1065353216;
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>(unint64_t *a1)
{
  CFTypeRef result = IPC::ArgumentCoder<std::tuple<WebCore::FloatSize>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::FloatSize>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  CFTypeRef result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      CFTypeRef result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v113);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v111);
  IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v109);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v107);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v105);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v103);
  IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v101);
  IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v99);
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v50 = v4;
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v52 = a1[3];
    if (v52)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v52 + 16))(v52);
        unint64_t v51 = *a1;
        unint64_t v50 = a1[1];
      }
      else
      {
        unint64_t v50 = 0;
        unint64_t v51 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v53 = a1[3];
  if (!v53 || !v50)
  {
    unint64_t v5 = 0;
    uint64_t v10 = 0;
    unint64_t v4 = 0;
    int v9 = 1;
LABEL_63:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v54 = a1[3];
    if (v54)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v54 + 16))(v54, v5);
        unint64_t v55 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v55 = 0;
      }
    }
    else
    {
      unint64_t v55 = 0;
      unint64_t v4 = 0;
    }
    goto LABEL_65;
  }
  (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v53 + 16))(v53, v51, v50);
  uint64_t v10 = 0;
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  int v9 = 1;
LABEL_8:
  if (v4 <= a1[2] - v5) {
    goto LABEL_63;
  }
  uint64_t v11 = (unsigned __int8 *)a1[2];
  a1[2] = (unint64_t)(v11 + 1);
  if (!v5)
  {
    unint64_t v55 = 0;
LABEL_65:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v56 = a1[3];
    if (v56)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v56 + 16))(v56, v55);
        unint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
      }
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v4 = 0;
    }
    goto LABEL_67;
  }
  unsigned int v12 = *v11;
  if (v12 < 0x20)
  {
    unsigned int v98 = v12 | 0x100;
    goto LABEL_12;
  }
LABEL_67:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v57 = a1[3];
  if (!v57)
  {
    unint64_t v5 = 0;
    unsigned int v98 = 0;
    unint64_t v4 = 0;
    goto LABEL_69;
  }
  if (!v4)
  {
    unint64_t v5 = 0;
    unsigned int v98 = 0;
LABEL_69:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v58 = a1[3];
    if (v58)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v58 + 16))(v58, v5);
        unint64_t v59 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v59 = 0;
      }
    }
    else
    {
      unint64_t v59 = 0;
      unint64_t v4 = 0;
    }
    goto LABEL_71;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v57 + 16))(v57, v5);
  unsigned int v98 = 0;
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
LABEL_12:
  if (v4 <= a1[2] - v5) {
    goto LABEL_69;
  }
  unint64_t v13 = (unsigned __int8 *)a1[2];
  uint64_t v14 = v13 + 1;
  a1[2] = (unint64_t)(v13 + 1);
  if (!v5)
  {
    unint64_t v59 = 0;
LABEL_71:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v60 = a1[3];
    if (v60)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v60 + 16))(v60, v59);
        unsigned int v15 = 0;
        unint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        unsigned int v15 = 0;
      }
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      unsigned int v15 = 0;
    }
    goto LABEL_73;
  }
  unsigned int v15 = *v13;
  if (v15 < 2)
  {
    int v16 = 0;
    char v17 = 1;
    goto LABEL_16;
  }
LABEL_73:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v61 = a1[3];
  if (!v61)
  {
    char v18 = 0;
    unint64_t v62 = 0;
    unint64_t v5 = 0;
    int v16 = 1;
    goto LABEL_75;
  }
  if (!v4)
  {
    char v18 = 0;
    unint64_t v62 = 0;
    unint64_t v5 = 0;
    int v16 = 1;
LABEL_75:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v63 = a1[3];
    if (v63)
    {
      uint64_t v88 = v10;
      char v89 = v18;
      uint64_t v90 = v88;
      if (v62)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v63 + 16))(v63, v5, v62);
        unsigned int v22 = 0;
        unint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
        unsigned int v22 = 0;
      }
      uint64_t v91 = v90;
      char v18 = v89;
      uint64_t v10 = v91;
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      unsigned int v22 = 0;
    }
    goto LABEL_77;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v61 + 16))(v61, v5);
  char v17 = 0;
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  int v16 = 1;
  uint64_t v14 = (unsigned __int8 *)a1[2];
LABEL_16:
  if (v15) {
    char v18 = v17;
  }
  else {
    char v18 = 0;
  }
  unint64_t v19 = &v14[-v5];
  if (v4 <= (unint64_t)v19)
  {
    uint64_t v68 = v10;
    char v69 = v18;
    uint64_t v70 = v68;
    unint64_t v62 = 0;
    unint64_t v71 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v71 && v4)
    {
      (*(void (**)(unint64_t))(*(void *)v71 + 16))(v71);
      unint64_t v5 = *a1;
      unint64_t v62 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
    }
    uint64_t v72 = v70;
    char v18 = v69;
    uint64_t v10 = v72;
    goto LABEL_75;
  }
  unint64_t v20 = &v19[v5];
  uint64_t v21 = (uint64_t)&v19[v5 + 1];
  a1[2] = v21;
  if (!v5)
  {
    unint64_t v62 = v4;
    goto LABEL_75;
  }
  unsigned int v22 = *v20;
  if (v22 < 2)
  {
    int v23 = 0;
    char v24 = 1;
    goto LABEL_23;
  }
LABEL_77:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v64 = a1[3];
  if (!v64)
  {
    char v94 = 0;
    unint64_t v65 = 0;
    unint64_t v5 = 0;
    unsigned int v97 = 1;
    goto LABEL_79;
  }
  uint64_t v86 = v10;
  char v74 = v18;
  uint64_t v75 = v86;
  if (!v4)
  {
    char v94 = 0;
    unint64_t v65 = 0;
    unint64_t v5 = 0;
    unsigned int v97 = 1;
LABEL_91:
    uint64_t v77 = v75;
    char v18 = v74;
    uint64_t v10 = v77;
    goto LABEL_79;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v64 + 16))(v64, v5);
  char v24 = 0;
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  int v23 = 1;
  uint64_t v21 = a1[2];
  uint64_t v87 = v75;
  char v18 = v74;
  uint64_t v10 = v87;
LABEL_23:
  if (v22) {
    char v25 = v24;
  }
  else {
    char v25 = 0;
  }
  unint64_t v26 = v21 - v5;
  char v94 = v25;
  unsigned int v97 = v23;
  if (v4 <= v26)
  {
    uint64_t v73 = v10;
    char v74 = v18;
    uint64_t v75 = v73;
    unint64_t v65 = 0;
    unint64_t v76 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v76 && v4)
    {
      (*(void (**)(unint64_t))(*(void *)v76 + 16))(v76);
      unint64_t v5 = *a1;
      unint64_t v65 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
    }
    goto LABEL_91;
  }
  uint64_t v27 = (unsigned __int8 *)(v5 + v26);
  a1[2] = (unint64_t)(v27 + 1);
  if (!v5)
  {
    unint64_t v65 = v4;
LABEL_79:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v66 = a1[3];
    if (v66)
    {
      uint64_t v82 = v10;
      char v83 = v18;
      uint64_t v84 = v82;
      if (v65)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v66 + 16))(v66, v5, v65);
        unsigned int v28 = 0;
        unint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
        unsigned int v28 = 0;
      }
      uint64_t v85 = v84;
      char v18 = v83;
      uint64_t v10 = v85;
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      unsigned int v28 = 0;
    }
LABEL_81:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v67 = a1[3];
    if (v67)
    {
      uint64_t v78 = v10;
      char v79 = v18;
      uint64_t v80 = v78;
      if (v4) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v67 + 16))(v67, v5);
      }
      char v29 = 0;
      unsigned int v96 = 1;
      uint64_t v81 = v80;
      char v18 = v79;
      uint64_t v10 = v81;
    }
    else
    {
      char v29 = 0;
      unsigned int v96 = 1;
    }
    goto LABEL_30;
  }
  unsigned int v28 = *v27;
  if (v28 >= 2) {
    goto LABEL_81;
  }
  unsigned int v96 = 0;
  char v29 = 1;
LABEL_30:
  if (!v28) {
    char v29 = 0;
  }
  char v93 = v29;
  uint64_t v30 = IPC::Decoder::decode<float>(a1);
  uint64_t v31 = IPC::Decoder::decode<float>(a1);
  uint64_t v32 = IPC::Decoder::decode<float>(a1);
  uint64_t v33 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
  uint64_t v35 = v33;
  unint64_t v36 = *a1;
  char v95 = v18;
  uint64_t v92 = v10;
  if (!*a1) {
    goto LABEL_57;
  }
  if ((v30 & 0xFF00000000) == 0 || (v31 & 0xFF00000000) == 0 || (v32 & 0xFF00000000) == 0 || !v34) {
    goto LABEL_56;
  }
  uint64_t v37 = v33;
  for (int i = v30 & 0xFFFFFF00; ; int i = 0)
  {
    uint64_t result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>((uint64_t *)a1);
    if (!*a1) {
      break;
    }
    uint64_t v35 = v114;
    if (v114)
    {
      uint64_t v35 = v112;
      if (v112)
      {
        uint64_t v35 = v110;
        if (v110)
        {
          uint64_t v35 = v108;
          if (v108)
          {
            uint64_t v35 = v106;
            if (v106)
            {
              uint64_t v35 = v104;
              if (v104)
              {
                uint64_t v35 = v102;
                if (v102)
                {
                  uint64_t v35 = v100;
                  if (v100)
                  {
                    if (!v9 && v98 > 0xFF && !v16)
                    {
                      uint64_t v35 = v97;
                      if (!v97)
                      {
                        uint64_t v35 = v96;
                        if (!v96 && v36 && v40)
                        {
                          long long v42 = v111;
                          long long v41 = v113;
                          long long v44 = v105;
                          long long v43 = v109;
                          long long v45 = v103;
                          long long v46 = v101;
                          long long v47 = v99;
                          *(_OWORD *)(a2 + 64) = v107;
                          *(_OWORD *)(a2 + 80) = v45;
                          *(_OWORD *)(a2 + 96) = v46;
                          *(_OWORD *)(a2 + 112) = v47;
                          *(_OWORD *)a2 = v41;
                          *(_OWORD *)(a2 + 16) = v42;
                          *(_OWORD *)(a2 + 32) = v43;
                          *(_OWORD *)(a2 + 48) = v44;
                          *(_DWORD *)(a2 + 128) = i | v30;
                          *(_DWORD *)(a2 + 132) = v31;
                          *(_DWORD *)(a2 + 136) = v32;
                          *(void *)(a2 + 144) = v37;
                          *(void *)(a2 + 152) = result;
                          *(void *)(a2 + 160) = v92;
                          *(unsigned char *)(a2 + 168) = v98;
                          *(unsigned char *)(a2 + 169) = v95;
                          *(unsigned char *)(a2 + 170) = v94;
                          *(unsigned char *)(a2 + 171) = v93;
                          *(unsigned char *)(a2 + 176) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_56:
    __break(1u);
LABEL_57:
    unint64_t v48 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v49 = a1[3];
    if (v49)
    {
      uint64_t v37 = v35;
      if (v48) {
        (*(void (**)(unint64_t, void))(*(void *)v49 + 16))(v49, 0);
      }
    }
    else
    {
      uint64_t v37 = v35;
    }
    LOBYTE(v30) = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 176) = 0;
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::FloatPoint>(unint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!v3)
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::FloatRect>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  while (1)
  {
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v15 = *a1;
      unint64_t v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v17 = a1[3];
      if (v17)
      {
        if (v16)
        {
          char v18 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15);
          uint64_t v9 = 0;
          uint64_t result = v18;
        }
      }
    }
    unint64_t v10 = *a1;
    if (!*a1) {
      break;
    }
    if (v6 && v9)
    {
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = result;
      LOBYTE(v10) = 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    unint64_t v11 = *a1;
    unint64_t v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v13 = a1[3];
    if (v13) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_7:
  *(unsigned char *)(a2 + 16) = v10;
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(unint64_t *result)
{
  unint64_t v1 = result[1];
  unint64_t v2 = *result;
  unint64_t v3 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    unint64_t v8 = 0;
    unint64_t v14 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v15 = result[3];
    if (v15)
    {
      unint64_t v19 = result;
      if (v1)
      {
        (*(void (**)(unint64_t))(*(void *)v15 + 16))(v15);
        uint64_t result = v19;
        unint64_t v14 = *v19;
        unint64_t v8 = v19[1];
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v14 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned __int8 v5 = (_DWORD *)(v2 + v3);
  result[2] = (unint64_t)(v5 + 1);
  if (!v2)
  {
    unint64_t v8 = v1;
    unint64_t v14 = 0;
LABEL_18:
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v7 = result[3];
    if (v7)
    {
      unint64_t v17 = result;
      if (v8)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v14, v8);
        LODWORD(v7) = 0;
        uint64_t result = v17;
        unint64_t v8 = *v17;
        unint64_t v1 = v17[1];
        int v6 = 1;
        unint64_t v2 = *v17;
      }
      else
      {
        unint64_t v1 = 0;
        unint64_t v2 = 0;
        LODWORD(v7) = 0;
        int v6 = 1;
      }
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v1 = 0;
      unint64_t v2 = 0;
      int v6 = 1;
    }
    goto LABEL_8;
  }
  int v6 = 0;
  LODWORD(v7) = *v5;
  unint64_t v8 = v2;
LABEL_8:
  unint64_t v9 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v9 && v1 - v9 > 3)
  {
    unint64_t v11 = (unsigned int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    result[2] = (unint64_t)(v11 + 1);
    unint64_t v12 = v1;
    if (v2)
    {
      if (!v6)
      {
        unint64_t v13 = (unint64_t)*v11 << 32;
        return (unint64_t *)(v13 | v7);
      }
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v8 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v16 = result[3];
    if (v16)
    {
      unint64_t v20 = result;
      if (v1)
      {
        (*(void (**)(unint64_t))(*(void *)v16 + 16))(v16);
        uint64_t result = v20;
        unint64_t v8 = *v20;
        unint64_t v12 = v20[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v8 = 0;
      }
    }
  }
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v7 = result[3];
  if (!v7)
  {
    unint64_t v13 = 0;
    return (unint64_t *)(v13 | v7);
  }
  char v18 = result;
  if (!v12)
  {
    unint64_t v13 = 0;
    goto LABEL_27;
  }
  uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v8, v12);
  unint64_t v13 = *v18;
  if (!*v18)
  {
LABEL_27:
    LODWORD(v7) = 0;
    return (unint64_t *)(v13 | v7);
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::RectEdges<float>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a1);
  uint64_t v5 = IPC::Decoder::decode<float>(a1);
  uint64_t v6 = IPC::Decoder::decode<float>(a1);
  uint64_t result = IPC::Decoder::decode<float>(a1);
  uint64_t v8 = *a1;
  if (!*a1) {
    goto LABEL_9;
  }
  if ((v4 & 0xFF00000000) == 0
    || (v5 & 0xFF00000000) == 0
    || (v6 & 0xFF00000000) == 0
    || (result & 0xFF00000000) == 0)
  {
    __break(1u);
LABEL_9:
    *(unsigned char *)a2 = 0;
    goto LABEL_7;
  }
  *(_DWORD *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  LOBYTE(v8) = 1;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = result;
LABEL_7:
  *(unsigned char *)(a2 + 16) = v8;
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::FloatPoint3D>(void *a1)
{
  uint64_t v2 = IPC::Decoder::decode<float>(a1);
  uint64_t v3 = IPC::Decoder::decode<float>(a1);
  uint64_t v4 = IPC::Decoder::decode<float>(a1);
  if (*a1)
  {
    if ((v2 & 0xFF00000000) != 0 && (v3 & 0xFF00000000) != 0 && (v4 & 0xFF00000000) != 0) {
      return v2 | ((unint64_t)v3 << 32);
    }
    __break(1u);
  }
  LODWORD(v2) = 0;
  uint64_t v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = a1[3];
  if (v7)
  {
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
    LODWORD(v2) = 0;
  }
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t IPC::Decoder::decode<float>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v6 = *v5;
      uint64_t v7 = 0x100000000;
      return v7 | v6;
    }
    unint64_t v9 = v1;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      unint64_t v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v13;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  return v7 | v6;
}

uint64_t IPC::Decoder::decode<WTF::MonotonicTime>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Seconds>(uint64_t *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(a1);
  if (!v3) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = v2 + v3;
    a1[2] = v5 + 8;
    if (!v2)
    {
      unint64_t v8 = v1;
      uint64_t v9 = 0;
      goto LABEL_10;
    }
    return *(void *)v5;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10) {
      goto LABEL_14;
    }
LABEL_10:
    while (1)
    {
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v11 = a1[3];
      if (!v11) {
        break;
      }
      uint64_t v12 = a1;
      if (!v8) {
        return 0;
      }
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      uint64_t v2 = *v12;
      if (!*v12) {
        return 0;
      }
      __break(1u);
LABEL_14:
      unint64_t v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v13;
        uint64_t v9 = *v13;
        unint64_t v8 = v13[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  return v6;
}

uint64_t WebKit::PageLoadState::hasOnlySecureContent(WebKit::PageLoadState *this, const Data *a2)
{
  if (*((unsigned char *)this + 1)) {
    return 0;
  }
  else {
    return WTF::protocolIs();
  }
}

__n128 __copy_helper_block_e8_32c88_ZTSKZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEiE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

WKPreferenceObserver *___ZN6WebKit14WebProcessPool31startObservingPreferenceChangesEv_block_invoke_2()
{
  return +[WKPreferenceObserver sharedInstance];
}

const char *WebKit::WebCompiledContentRuleList::urlFiltersBytecode(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((WebKit::WebCompiledContentRuleList **)this + 3), *((const char **)this + 6), *((void *)this + 7));
}

BOOL WebKit::WebChromeClient::isInStableState(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(unsigned __int8 *)(v2 + 1285);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 != 0;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (__n128 result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unint64_t v16 = (void *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    char v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v28 = v8 + 16 * v32;
        goto LABEL_21;
      }
      if (v17 == -1) {
        char v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      unint64_t v16 = (void *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      void *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      unint64_t v16 = v18;
    }
  }
  *unint64_t v16 = v11;
  unint64_t v20 = (unsigned int **)(v16 + 1);
  uint64_t v21 = *a4;
  *a4 = 0;
  uint64_t v33 = v21;
  if (v16 + 1 != &v33)
  {
    if (*v20)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((unsigned int **)v16 + 1);
      uint64_t v30 = *v20;
      uint64_t v31 = v33;
      uint64_t v33 = 0;
      *unint64_t v20 = v31;
      if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
      }
    }
    else
    {
      uint64_t v33 = 0;
      *unint64_t v20 = v21;
    }
  }
  __n128 result = (uint64_t)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v33);
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_20;
    }
LABEL_26:
    __n128 result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
    unint64_t v16 = (void *)result;
    uint64_t v24 = *a2;
    if (*a2) {
      unint64_t v27 = *(unsigned int *)(v24 - 4);
    }
    else {
      unint64_t v27 = 0;
    }
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26) {
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v28 = v24 + 16 * v27;
  char v29 = 1;
LABEL_21:
  *(void *)uint64_t v7 = v16;
  *(void *)(v7 + 8) = v28;
  *(unsigned char *)(v7 + 16) = v29;
  return result;
}

unsigned int **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  if (*a2) {
    v5 += 16 * *(unsigned int *)(v5 - 4);
  }
  if ((void *)v5 == a3)
  {
    *a1 = 0;
    unint64_t v14 = 0;
    return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v14);
  }
  __n128 result = (unsigned int **)(a3 + 1);
  *a1 = a3[1];
  a3[1] = 0;
  if (*a2)
  {
    uint64_t v7 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    if ((void *)v7 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if ((void *)v7 != a3)
  {
    *a3 = -1;
    __n128 result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(result);
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v8 = *a2;
    int v9 = *a2 ? *(_DWORD *)(v8 - 12) - 1 : -1;
    *(_DWORD *)(v8 - 12) = v9;
    uint64_t v10 = *a2;
    if (*a2)
    {
      unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
      unsigned int v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
      {
        return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a2, v12 >> 1, 0);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteImageBufferSet::endPrepareForDisplay(uint64_t a1, void *a2)
{
  unint64_t v60 = a2;
  if (*(unsigned char *)(a1 + 98))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v3 + 112), *(void *)(a1 + 24));
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(v50, (uint64_t *)(v3 + 112), v4);
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(v50);
    *(unsigned char *)(a1 + 98) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    uint64_t v5 = *(void *)(a1 + 40);
  }
  LOBYTE(v50[0]) = 0;
  char v52 = 0;
  char v53 = 2;
  LOBYTE(v54) = 0;
  LOBYTE(v55) = 0;
  LOBYTE(v56) = 0;
  LOBYTE(v57) = 0;
  LOBYTE(v58) = 0;
  LOBYTE(v59) = 0;
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 128))(v5);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198648EECLL);
    }
    (*(void (**)(IPC::Encoder **__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 24))(v47, v6, 1);
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>((unsigned int *)v50, (uint64_t)v47);
    if (v49 && v48 != -1) {
      off_1EE9BF2D0[v48]((int)&v61, (WTF::MachSendRight *)v47);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 8));
      char v8 = 0;
      uint64_t v9 = *(void *)(v7 + 120);
      uint64_t v10 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  char v8 = 1;
LABEL_12:
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v11 + 8));
    uint64_t v12 = *(void *)(v11 + 120);
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v14 + 8));
    char v15 = 0;
    uint64_t v16 = *(void *)(v14 + 120);
    uint64_t v54 = v9;
    uint64_t v55 = v10;
    uint64_t v56 = v12;
    uint64_t v57 = v13;
    uint64_t v58 = v16;
    uint64_t v59 = 1;
    uint64_t v17 = *(void *)(v14 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
    if (v15) {
      MEMORY[0x19972E8D0](v17);
    }
    uint64_t v18 = *(void *)(v17 + 8);
    int v19 = 1;
    uint64_t v20 = v18 - 1;
    *(void *)(v17 + 8) = v18 - 1;
    if (v18 == 1)
    {
      uint64_t v44 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      *(void *)(v17 + 24) = 0;
      BOOL v22 = v44 != 0;
    }
    else
    {
      uint64_t v21 = 0;
      BOOL v22 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
    if (v19 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
    }
    if (!v20)
    {
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      if (!v22) {
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    uint64_t v54 = v9;
    uint64_t v55 = v10;
    uint64_t v56 = v12;
    uint64_t v57 = v13;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
  }
  if (v11)
  {
    char v23 = 0;
    uint64_t v24 = *(void *)(v11 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](v24);
    }
    uint64_t v25 = *(void *)(v24 + 8);
    int v26 = 1;
    uint64_t v27 = v25 - 1;
    *(void *)(v24 + 8) = v25 - 1;
    if (v25 == 1)
    {
      uint64_t v45 = *(void *)(v24 + 16);
      uint64_t v28 = *(void *)(v24 + 24);
      *(void *)(v24 + 24) = 0;
      BOOL v29 = v45 != 0;
    }
    else
    {
      uint64_t v28 = 0;
      BOOL v29 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
    if (v26 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
    }
    if (!v27)
    {
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
      if (!v29) {
        WTF::fastFree((WTF *)v24, a2);
      }
    }
  }
  if ((v8 & 1) == 0)
  {
    char v30 = 0;
    uint64_t v31 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
    if (v30) {
      MEMORY[0x19972E8D0](v31);
    }
    uint64_t v32 = *(void *)(v31 + 8);
    int v33 = 1;
    uint64_t v34 = v32 - 1;
    *(void *)(v31 + 8) = v32 - 1;
    if (v32 == 1)
    {
      uint64_t v46 = *(void *)(v31 + 16);
      uint64_t v35 = *(void *)(v31 + 24);
      *(void *)(v31 + 24) = 0;
      BOOL v36 = v46 != 0;
    }
    else
    {
      uint64_t v35 = 0;
      BOOL v36 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
    if (v33 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
    }
    if (!v34)
    {
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      if (!v36) {
        WTF::fastFree((WTF *)v31, a2);
      }
    }
  }
  uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 40);
  uint64_t v38 = *(void *)(a1 + 16);
  int v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v39 = 1118;
  *((void *)v39 + 1) = v38;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  v47[0] = v39;
  IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::encode(v39, (unint64_t)v50);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v39, (uint64_t *)&v60);
  IPC::Connection::sendMessageImpl(v37, (uint64_t *)v47, 0, 0);
  __n128 result = v47[0];
  v47[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v40);
    __n128 result = (IPC::Encoder *)WTF::fastFree(v42, v43);
  }
  if (v52)
  {
    if (v51 != -1) {
      return (IPC::Encoder *)off_1EE9BF2D0[v51]((int)v47, (WTF::MachSendRight *)v50);
    }
  }
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>(a1);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void WebKit::ImageBufferShareableMappedIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::IOSurface::createSendRight(v3, *(WebCore::IOSurface **)(a1 + 48));
  WTF::MachSendRight::MachSendRight();
  int v4 = 1;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a2, (uint64_t)v3 + 4);
  *(unsigned char *)(a2 + 72) = 1;
  if (v4 != -1) {
    off_1EE9EC038[v4]((int)&v5, (WTF::MachSendRight *)((char *)v3 + 4));
  }
  int v4 = -1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
}

uint64_t WebKit::ImageBufferBackendHandleSharing::isImageBufferBackendHandleSharing(WebKit::ImageBufferBackendHandleSharing *this)
{
  return 1;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBackend::toBackendSharing(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
  return (uint64_t)this + 88;
}

void WebKit::RemoteDisplayListRecorder::~RemoteDisplayListRecorder(WebKit::RemoteDisplayListRecorder *this)
{
  WebKit::RemoteDisplayListRecorder::~RemoteDisplayListRecorder(this);

  WTF::fastFree(v1, v2);
}

{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;

  *(void *)this = &unk_1EE9BF148;
  std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)this + 8, 0);
  uint64_t v3 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  int v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v4 + 16));
  }
  char v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v5 + 16));
    (*(void (**)(void))(*(void *)(v5 + 8) + 8))();
  }
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)this + 3, v2);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    *(void *)(v7 + 8) = 0;
    char v8 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v8)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

WebKit::SharedVideoFrameReader *std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100](WebKit::SharedVideoFrameReader **a1, WebKit::SharedVideoFrameReader *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SharedVideoFrameReader::~SharedVideoFrameReader(result);
    return (WebKit::SharedVideoFrameReader *)WTF::fastFree(v4, v5);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebKit::RemoteSharedResourceCache::~RemoteSharedResourceCache((WebKit::RemoteSharedResourceCache *)(result - 4));
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(void *)(a1 + 16 * v6);
  if (v7 == a2) {
    return a1 + 16 * v6;
  }
  int v10 = 1;
  while (v7)
  {
    uint64_t v6 = (v6 + v10) & v2;
    uint64_t v7 = *(void *)(a1 + 16 * v6);
    ++v10;
    if (v7 == a2) {
      return a1 + 16 * v6;
    }
  }
  return a1 + 16 * *(unsigned int *)(a1 - 4);
}

uint64_t *WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    int v7 = 1;
    uint64_t v8 = *(void *)(v6 + 8) - 1;
    *(void *)(v6 + 8) = v8;
    if (v8)
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    else
    {
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      BOOL v10 = v11 != 0;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
    }
    if (!v8)
    {
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      if (!v10) {
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  return a1;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>(unsigned int **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 5);
  *((void *)*a1 + 5) = 0;
  if (v3)
  {
    IPC::StreamServerConnection::stopReceivingMessages(*(void *)(v3 + 40), 0x4Du, *((void *)v2 + 4));
    if (atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v3 + 16));
      (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v3 + 8);
    }
  }
  __n128 result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

void *IPC::StreamServerConnection::stopReceivingMessages(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char v4 = 0;
  v10[0] = a2;
  v10[1] = a3;
  char v5 = (atomic_uchar *)(a1 + 136);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 136), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 136);
  }
  __n128 result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>((uint64_t *)(a1 + 144), (unsigned __int8 *)v10);
  uint64_t v7 = *(void *)(a1 + 144);
  if (v7)
  {
    uint64_t v8 = (void *)(v7 + 24 * *(unsigned int *)(v7 - 4));
    if (v8 == result) {
      goto LABEL_7;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_7;
    }
    uint64_t v8 = 0;
  }
  if (v8 != result) {
    __n128 result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove((uint64_t *)(a1 + 144), (uint64_t)result);
  }
LABEL_7:
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t *WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove(uint64_t *result, uint64_t a2)
{
  *(unsigned char *)a2 = -1;
  unsigned int v2 = *(unsigned int **)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    int v9 = result;
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    __n128 result = v9;
  }
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *result;
  if (*result)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      return (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(*a2, v5) & v3;
  __n128 result = (unsigned __int8 *)(v2 + 24 * v6);
  int v8 = *result;
  uint64_t v9 = *((void *)result + 1);
  if (v8 != v4 || v9 != v5)
  {
    int v11 = 1;
    while ((_BYTE)v8 || v9)
    {
      unsigned int v6 = (v6 + v11) & v3;
      __n128 result = (unsigned __int8 *)(v2 + 24 * v6);
      int v8 = *result;
      uint64_t v9 = *((void *)result + 1);
      ++v11;
      if (v8 == v4 && v9 == v5) {
        return result;
      }
    }
    return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, (uint64_t)v23);
  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v20, a1);
  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v17, a1);
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v14, a1);
  if (!*a1) {
    goto LABEL_15;
  }
  if (!v26
    || (uint64_t result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)v7, (uint64_t)v23), !v22)|| (v10 = v20, v11[0] = v21, !v19)|| (*(_OWORD *)&v11[8] = v17, v11[24] = v18, !v16))
  {
    __break(1u);
LABEL_15:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 152) = 0;
    goto LABEL_9;
  }
  long long v12 = v14;
  char v13 = v15;
  uint64_t result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v7);
  long long v5 = v12;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v11[16];
  *(_OWORD *)(a2 + 128) = v5;
  *(unsigned char *)(a2 + 144) = v13;
  long long v6 = *(_OWORD *)v11;
  *(_OWORD *)(a2 + 80) = v10;
  *(_OWORD *)(a2 + 96) = v6;
  *(unsigned char *)(a2 + 152) = 1;
  if (v9 && v8 != -1) {
    uint64_t result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v8]((int)&v27, (WTF::MachSendRight *)v7);
  }
LABEL_9:
  if (v26 && v25 && v24 != -1) {
    return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24]((int)v7, (WTF::MachSendRight *)v23);
  }
  return result;
}

void sub_198649920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  if (a20 && a18 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a18](v20 - 33, (WTF::MachSendRight *)&a10);
  }
  if (*(unsigned char *)(v20 - 48)) {
    BOOL v22 = *(unsigned char *)(v20 - 56) == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22)
  {
    uint64_t v23 = *(unsigned int *)(v20 - 64);
    if (v23 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23]((int)&a10, (WTF::MachSendRight *)(v20 - 128));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = a2[2] - *a2;
  if (v2 <= v4)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (v19)
    {
      uint64_t v38 = a2;
      uint64_t v43 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v3);
        a2 = v38;
        uint64_t result = v43;
        uint64_t v18 = *v38;
        unint64_t v17 = v38[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_21;
  }
  long long v5 = (unsigned __int8 *)(v3 + v4);
  uint64_t v6 = v3 + v4 + 1;
  a2[2] = v6;
  if (!v3)
  {
    unint64_t v17 = v2;
    uint64_t v18 = 0;
LABEL_21:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (v20)
    {
      uint64_t v37 = a2;
      uint64_t v42 = result;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        a2 = v37;
        uint64_t result = v42;
        uint64_t v3 = *v37;
        unint64_t v2 = v37[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_22;
  }
  unsigned int v7 = *v5;
  if (v7 < 2)
  {
    if (!v7)
    {
      *(unsigned char *)uint64_t result = 0;
      *(unsigned char *)(result + 16) = 0;
      goto LABEL_18;
    }
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v8 && v2 - v8 > 7)
    {
      uint64_t v11 = v3 + v8 + 8;
      unint64_t v10 = *(void *)(v3 + v8);
      a2[2] = v11;
      if (v10 - 1 < 0xFFFFFFFFFFFFFFFELL)
      {
        int v12 = 0;
        goto LABEL_12;
      }
      unint64_t v10 = v2;
      uint64_t v22 = v3;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v22 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v23 = a2[3];
      if (v23)
      {
        uint64_t v45 = result;
        uint64_t v32 = a2;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v3);
        unint64_t v10 = 0;
        uint64_t v34 = *v32;
        uint64_t v33 = v32[1];
        uint64_t v35 = v32[3];
        *uint64_t v32 = 0;
        v32[1] = 0;
        uint64_t v22 = 0;
        if (v35)
        {
          a2 = v32;
          uint64_t result = v45;
          if (v33)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v35 + 16))(v35, v34, v33, 0);
            uint64_t v3 = *v32;
            if (*v32) {
              goto LABEL_52;
            }
            uint64_t v22 = 0;
            a2 = v32;
            uint64_t result = v45;
            unint64_t v10 = v32[1];
          }
        }
        else
        {
          a2 = v32;
          uint64_t result = v45;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v3 = a2[3];
    if (v3)
    {
      int v39 = a2;
      uint64_t v44 = result;
      if (!v10)
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        int v12 = 1;
LABEL_12:
        unint64_t v13 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
        if (v2 < v13 || v2 - v13 <= 3)
        {
          unint64_t v24 = 0;
          uint64_t v25 = 0;
          *a2 = 0;
          a2[1] = 0;
          char v15 = (_DWORD *)a2[3];
          if (!v15) {
            goto LABEL_30;
          }
          goto LABEL_53;
        }
        long long v14 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        char v15 = v14 + 1;
        a2[2] = v14 + 1;
        if (!v3)
        {
          unint64_t v24 = v2;
          uint64_t v25 = 0;
          goto LABEL_30;
        }
        if (!v12)
        {
          int v16 = *v14;
          *(void *)uint64_t result = v10;
          *(_DWORD *)(result + 8) = v16;
          *(unsigned char *)(result + 16) = 1;
LABEL_18:
          *(unsigned char *)(result + 24) = 1;
          return result;
        }
LABEL_52:
        __break(1u);
LABEL_53:
        char v40 = a2;
        uint64_t v46 = result;
        if (v2)
        {
          (*(void (**)(_DWORD *, uint64_t))(*(void *)v15 + 16))(v15, v3);
          a2 = v40;
          uint64_t result = v46;
          uint64_t v25 = *v40;
          unint64_t v24 = v40[1];
        }
        else
        {
          unint64_t v24 = 0;
          uint64_t v25 = 0;
        }
LABEL_30:
        *a2 = 0;
        a2[1] = 0;
        uint64_t v26 = a2[3];
        if (!v26 || !v24) {
          goto LABEL_31;
        }
        uint64_t v41 = result;
        BOOL v29 = a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v25, v24);
        BOOL v36 = v29;
        if (*v29)
        {
          __break(1u);
          return result;
        }
        a2 = v29;
        uint64_t result = v41;
        uint64_t v30 = v29[1];
        uint64_t v31 = v29[3];
        *BOOL v29 = 0;
        v29[1] = 0;
        if (!v31 || !v30) {
          goto LABEL_31;
        }
        (*(void (**)(uint64_t, void))(*(void *)v31 + 16))(v31, 0);
        goto LABEL_47;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v22, v10);
      unint64_t v10 = 0;
      a2 = v39;
      uint64_t result = v44;
      uint64_t v3 = *v39;
      unint64_t v2 = v39[1];
    }
    else
    {
      unint64_t v2 = 0;
      unint64_t v10 = 0;
    }
    int v12 = 1;
    goto LABEL_12;
  }
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v21 = a2[3];
  if (v21 && v2)
  {
    BOOL v36 = a2;
    uint64_t v41 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v3);
LABEL_47:
    a2 = v36;
    uint64_t result = v41;
  }
LABEL_31:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  uint64_t v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v27)
  {
    uint64_t v28 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v28();
  }
  return result;
}

void IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198649EE0(_Unwind_Exception *a1)
{
  std::optional<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>::~optional(v1);
  _Unwind_Resume(a1);
}

__n128 WebKit::RemoteLayerBackingStoreProperties::setBackendHandle(uint64_t a1, uint64_t a2)
{
  std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)v8, a2);
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v7 = *(unsigned int *)(a2 + 64);
    if (v7 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v7]((int)&v11, (WTF::MachSendRight *)a2);
    }
    *(_DWORD *)(a2 + 64) = -1;
    *(unsigned char *)(a2 + 72) = 0;
  }
  std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>((unsigned int *)a1, (uint64_t)v8);
  if (v10 && v9 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v9]((int)&v11, (WTF::MachSendRight *)v8);
  }
  long long v4 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = v4;
  long long v5 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = v5;
  __n128 result = *(__n128 *)(a2 + 128);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 144);
  *(__n128 *)(a1 + 152) = result;
  return result;
}

void sub_198649FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  if (a20)
  {
    if (a18 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[a18](v20 - 17, (WTF::MachSendRight *)&a10);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result;
  if (*((unsigned __int8 *)result + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*((unsigned char *)result + 72))
    {
      return (unsigned int *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((uint64_t)result, a2);
    }
  }
  else if (*((unsigned char *)result + 72))
  {
    uint64_t v3 = result[16];
    if (v3 != -1) {
      __n128 result = (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3]((int)&v4, (WTF::MachSendRight *)result);
    }
    v2[16] = -1;
    *((unsigned char *)v2 + 72) = 0;
  }
  else
  {
    __n128 result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
    *((unsigned char *)v2 + 72) = 1;
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      long long v14 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v8 = v3;
    uint64_t v9 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      unint64_t v13 = a1;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
        a1 = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12 && v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v4);
    }
    goto LABEL_14;
  }
  if (v7)
  {
    IPC::Decoder::decode<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>(a1, v15);
    if (v17)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor((unsigned int *)a2, (uint64_t)v15);
      *(unsigned char *)(a2 + 72) = 1;
      goto LABEL_7;
    }
LABEL_14:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    return;
  }
  v15[0] = 0;
  char v17 = 0;
  std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v15);
LABEL_7:
  *(unsigned char *)(a2 + 80) = 1;
  if (v17)
  {
    if (v16 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16]((int)&v18, (WTF::MachSendRight *)v15);
    }
  }
}

void sub_19864A290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  if (a20)
  {
    if (a18 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a18](v20 - 17, (WTF::MachSendRight *)&a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor((unsigned int *)a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_19864A318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 72))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 64);
    if (v15 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15]((int)&a13, (WTF::MachSendRight *)v13);
    }
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor(unsigned int *a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  a1[16] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19864A394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = v13[16];
  if (v15 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15]((int)&a13, (WTF::MachSendRight *)v13);
  }
  v13[16] = -1;
  _Unwind_Resume(exception_object);
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(unsigned int *result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[16];
  if (v4 != -1) {
    __n128 result = (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4]((int)&v7, (WTF::MachSendRight *)result);
  }
  v3[16] = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 64);
  if (v5 != -1)
  {
    __n128 result = (unsigned int *)((uint64_t (*)(char *, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    v3[16] = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_()
{
  return WTF::MachSendRight::MachSendRight();
}

void IPC::Decoder::decode<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19864A4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 72))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 64);
    if (v15 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15]((int)&a13, (WTF::MachSendRight *)v13);
    }
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::decode<IPC::Decoder,0ul>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 1 && (IPC::Decoder::takeLastAttachment(a1, v4), v5))
  {
    WTF::MachSendRight::MachSendRight();
    *(_DWORD *)(a3 + 64) = 1;
    *(unsigned char *)(a3 + 72) = 1;
    if (v5) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 72) = 0;
  }
}

void sub_19864A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::decode<IPC::Decoder,0ul>(a1, a2, a3);
  }
  else
  {
    IPC::Decoder::decode<WebCore::ShareableBitmapHandle>(a1, v5);
    char v4 = v6;
    if (v6)
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a3, (uint64_t)v5);
      *(_DWORD *)(a3 + 64) = 0;
      char v4 = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 72) = v4;
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  }
}

void sub_19864A634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::decode<IPC::Decoder>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v8 = *v11;
        unint64_t v7 = v11[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_8;
  }
  char v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = v5 + 1;
  if (!v3)
  {
    unint64_t v7 = v2;
    uint64_t v8 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7)
    {
      uint64_t v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a2 = v12;
    }
    goto LABEL_9;
  }
  unint64_t v6 = *v5;
  if (v6 >= 2)
  {
LABEL_9:
    *a2 = 0;
    a2[72] = 0;
    return;
  }

  IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::decode<IPC::Decoder>((IPC::Decoder *)a1, v6, (uint64_t)a2);
}

atomic_uchar *WebKit::RemoteImageBufferSetProxy::didReceiveMessage(atomic_uchar *volatile *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  char v5 = (atomic_uchar **)(this + 2);
  __n128 result = (atomic_uchar *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  if (*((_WORD *)a3 + 25) != 1118) {
    goto LABEL_22;
  }
  IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::decode((uint64_t *)a3, (uint64_t)v26);
  if (!v33)
  {
    uint64_t v13 = *(void *)a3;
    uint64_t v14 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v15 = *((void *)a3 + 3);
    if (!v15 || !v14 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13), !v33))
    {
      LOBYTE(v17[0]) = 0;
      unsigned __int8 v25 = 0;
      goto LABEL_29;
    }
  }
  uint64_t updated = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>((uint64_t *)a3);
  if (!v9) {
    goto LABEL_34;
  }
  if (!v33)
  {
    __break(1u);
LABEL_34:
    int v11 = 0;
    LOBYTE(v17[0]) = 0;
    goto LABEL_8;
  }
  uint64_t v10 = updated;
  LOBYTE(v17[0]) = 0;
  char v19 = 0;
  if (v28)
  {
    int v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v17, (uint64_t)v26);
    char v19 = 1;
  }
  long long v20 = v29;
  long long v21 = v30;
  long long v22 = v31;
  uint64_t v23 = v32;
  uint64_t v24 = v10;
  int v11 = 1;
LABEL_8:
  unsigned __int8 v25 = v11;
  if (v33 && v28 && v27 != -1)
  {
    off_1EE9BE2E0[v27]((int)&v34, (WTF::MachSendRight *)v26);
    int v11 = v25;
  }
  if (!v11)
  {
LABEL_29:
    unint64_t v7 = *(void **)a3;
    uint64_t v16 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    __n128 result = (atomic_uchar *)*((void *)a3 + 3);
    if (!result) {
      goto LABEL_22;
    }
    if (!v16) {
      goto LABEL_22;
    }
    __n128 result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *, void *))(*(void *)result + 16))(result, v7);
    if (!v25) {
      goto LABEL_22;
    }
  }
  LOBYTE(v26[0]) = 0;
  char v28 = 0;
  if (v19)
  {
    int v27 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v26, (uint64_t)v17);
    char v28 = 1;
  }
  long long v29 = v20;
  long long v30 = v21;
  long long v31 = v22;
  uint64_t v32 = v23;
  __n128 result = (atomic_uchar *)WebKit::RemoteImageBufferSetProxy::didPrepareForDisplay((uint64_t)this, (uint64_t)v26, v24);
  if (v28 && v27 != -1) {
    __n128 result = (atomic_uchar *)off_1EE9BE2E0[v27]((int)&v34, (WTF::MachSendRight *)v26);
  }
  if (v25 && v19 && v18 != -1) {
    __n128 result = (atomic_uchar *)off_1EE9BE2E0[v18]((int)v26, (WTF::MachSendRight *)v17);
  }
LABEL_22:
  if (this)
  {
    uint64_t v12 = *v5;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v12, v7);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(int a1, WTF::MachSendRight *this)
{
}

WTF *WebKit::RemoteRenderingBackendProxy::didReceiveMessage(WebKit::RemoteRenderingBackendProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1318:
      __n128 result = (WTF *)IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>((uint64_t *)a3);
      if (v6)
      {
        unint64_t v7 = (WTF *)*((void *)this + 29);
        if (v7 >= result) {
          unint64_t v7 = result;
        }
        *((void *)this + 30) = v7;
      }
      break;
    case 1320:
      __n128 result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((uint64_t)v9, (uint64_t *)a3);
      if (v11)
      {
        uint64_t v12 = (WTF *)v9[1];
        uint64_t v13 = v9[2];
        WebKit::RemoteRenderingBackendProxy::didMarkLayersAsVolatile((uint64_t)this, v9[0], (uint64_t *)&v12, v10);
        __n128 result = v12;
        if (v12)
        {
          uint64_t v12 = 0;
          LODWORD(v13) = 0;
          return (WTF *)WTF::fastFree(result, v8);
        }
      }
      break;
    case 1319:
      return (WTF *)IPC::handleMessage<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy,void ()(IPC::Semaphore &&,IPC::Semaphore &)>(a3, (uint64_t)this);
    default:
      return (WTF *)WebKit::RemoteRenderingBackendProxy::dispatchMessage(this, a2, a3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = (void *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      if (*v5 == -1)
      {
LABEL_15:
        uint64_t v7 = 0;
        goto LABEL_16;
      }
      unint64_t v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      uint64_t v7 = *v5;
      return v6 | v7;
    }
    unint64_t v9 = v1;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  uint64_t v7 = 0;
  unint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (!v12) {
    return v6 | v7;
  }
  uint64_t v13 = a1;
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
  if (!*v13)
  {
    uint64_t v7 = 0;
LABEL_16:
    unint64_t v6 = 0;
    return v6 | v7;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteImageBufferSetProxy::didPrepareForDisplay(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  char v6 = 0;
  uint64_t v7 = (atomic_uchar *)(result + 89);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 89), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t result = MEMORY[0x19972E8D0](result + 89);
  }
  uint64_t v8 = *(void *)(v5 + 96);
  if (v8 && *(void *)(v8 + 168) == a3)
  {
    LOBYTE(v18[0]) = 0;
    char v20 = 0;
    LOBYTE(v21) = 0;
    char v23 = 0;
    LOBYTE(v24) = 0;
    char v26 = 0;
    LOBYTE(v27) = 0;
    char v29 = 0;
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v18, a2);
    if (*(unsigned char *)(a2 + 96))
    {
      uint64_t v10 = *(void *)(a2 + 88);
      int v9 = *(_DWORD *)(v5 + 84);
      char v11 = 1;
    }
    else
    {
      char v11 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v21 = v10;
    int v22 = v9;
    char v23 = v11;
    if (*(unsigned char *)(a2 + 112))
    {
      uint64_t v12 = *(void *)(a2 + 104);
      int v9 = *(_DWORD *)(v5 + 84);
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v24 = v12;
    int v25 = v9;
    char v26 = v13;
    if (*(unsigned char *)(a2 + 128))
    {
      uint64_t v14 = *(void *)(a2 + 120);
      int v9 = *(_DWORD *)(v5 + 84);
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v27 = v14;
    int v28 = v9;
    char v29 = v15;
    uint64_t result = WebKit::RemoteImageBufferSetProxyFlushFence::setHandles(*(void *)(v5 + 96), (uint64_t)v18);
    *(unsigned char *)(v5 + 112) = 0;
    if (*(unsigned char *)(v5 + 113))
    {
      uint64_t result = *(void *)(v5 + 104);
      if (result)
      {
        IPC::StreamClientConnection::removeWorkQueueMessageReceiver(result, 0x57u, *(void *)(v5 + 24));
        uint64_t result = *(void *)(v5 + 104);
        *(void *)(v5 + 104) = 0;
        if (result) {
          uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)result, v17);
        }
      }
    }
    if (v20 && v19 != -1) {
      uint64_t result = off_1EE9E9D58[v19]((int)&v30, (WTF::MachSendRight *)v18);
    }
  }
  int v16 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferSetProxyFlushFence::setHandles(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a1 + 4);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 4), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 4);
  }
  char v6 = (unsigned int *)(a1 + 8);
  if (*(unsigned char *)(a1 + 160))
  {
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v6, a2);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 80);
    long long v12 = *(_OWORD *)(a2 + 96);
    long long v13 = *(_OWORD *)(a2 + 112);
    long long v14 = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 144);
    *(_OWORD *)(a1 + 136) = v14;
    *(_OWORD *)(a1 + 120) = v13;
    *(_OWORD *)(a1 + 104) = v12;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    if (*(unsigned char *)(a2 + 72))
    {
      *(_DWORD *)(a1 + 72) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v6, a2);
      *(unsigned char *)(a1 + 80) = 1;
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 96);
    long long v8 = *(_OWORD *)(a2 + 112);
    long long v9 = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 144);
    *(_OWORD *)(a1 + 136) = v9;
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    *(unsigned char *)(a1 + 160) = 1;
  }
  uint64_t result = WTF::Condition::notifyOne((WTF::Condition *)(a1 + 5));
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 4), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1)
  {
    return WTF::Lock::unlockSlow(v5);
  }
  return result;
}

BOOL WTF::Condition::notifyOne(WTF::Condition *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this);
  if ((v1 & 1) == 0) {
    return 0;
  }
  char v4 = 0;
  v3[0] = this;
  v3[1] = &v4;
  v5[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
  v5[1] = v5;
  void v5[2] = v3;
  WTF::ParkingLot::unparkOneImpl();
  return v4 != 0;
}

uint64_t IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, (uint64_t)v16);
  unsigned __int16 v5 = IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(v3);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v3, &v10);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v3, &v23);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v3, &v20);
  uint64_t v6 = *v3;
  if (!*v3) {
    goto LABEL_18;
  }
  if (!v12) {
    goto LABEL_17;
  }
  if (!v25) {
    goto LABEL_17;
  }
  unint64_t v3 = (uint64_t *)v10;
  uint64_t v2 = v11;
  *(void *)((char *)&v29 + 7) = v23;
  HIBYTE(v29) = v24;
  if (!v22) {
    goto LABEL_17;
  }
  *(void *)((char *)&v28 + 7) = v20;
  HIBYTE(v28) = v21;
  long long v26 = v28;
  long long v27 = v29;
  while (1)
  {
    if (v19)
    {
      std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)&v10, (uint64_t)v16);
      if (v5 > 0xFFu)
      {
        v15[0] = v5;
        if (v6) {
          break;
        }
      }
    }
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t v9 = v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t result = v3[3];
    if (!result
      || !v9
      || (uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0), !*v3))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 136) = 0;
      goto LABEL_12;
    }
    unint64_t v3 = 0;
  }
  v15[8] = (_BYTE)v3;
  *(void *)&v15[9] = v2;
  *(_OWORD *)&v15[17] = v27;
  *(_OWORD *)&v15[33] = v26;
  uint64_t result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)&v10);
  long long v8 = *(_OWORD *)&v15[16];
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v15;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v15[32];
  *(void *)(a2 + 128) = *(void *)&v15[48];
  *(unsigned char *)(a2 + 136) = 1;
  if (v14 && v13 != -1) {
    uint64_t result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13]((int)&v23, (WTF::MachSendRight *)&v10);
  }
LABEL_12:
  if (v19 && v18 && v17 != -1) {
    return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17]((int)&v10, (WTF::MachSendRight *)v16);
  }
  return result;
}

void sub_19864B2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a19)
  {
    if (a17 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a17](v27 - 168, (WTF::MachSendRight *)&a9);
    }
  }
  std::optional<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>::~optional((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2] - *result;
  if (v2 <= v4)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (v15)
    {
      char v25 = result;
      long long v28 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t result = v25;
        a2 = v28;
        uint64_t v14 = *v25;
        unint64_t v13 = v25[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  uint64_t v6 = v3 + v4 + 1;
  result[2] = v6;
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_15:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (v16)
    {
      char v24 = result;
      uint64_t v27 = a2;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t result = v24;
        a2 = v27;
        uint64_t v3 = *v24;
        unint64_t v2 = v24[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v7 = *v5;
  if (v7 >= 2)
  {
LABEL_16:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result || !v2) {
      goto LABEL_22;
    }
    long long v26 = a2;
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v3);
    goto LABEL_19;
  }
  if (!v7)
  {
    *a2 = 0;
    a2[8] = 0;
    char v12 = 1;
    goto LABEL_12;
  }
  unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v8 && v2 - v8 > 7)
  {
    uint64_t v11 = v3 + v8 + 8;
    uint64_t v10 = *(void *)(v3 + v8);
    result[2] = v11;
    if ((unint64_t)(v10 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      unint64_t v17 = v2;
      uint64_t v18 = v3;
      goto LABEL_21;
    }
    *(void *)a2 = v10;
    char v12 = 1;
    a2[8] = 1;
LABEL_12:
    a2[16] = v12;
    return result;
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v19 = result[3];
  if (!v19) {
    goto LABEL_21;
  }
  long long v29 = a2;
  uint64_t v20 = result;
  (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
  unint64_t v17 = 0;
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v23 = v20[3];
  *uint64_t v20 = 0;
  v20[1] = 0;
  uint64_t v18 = 0;
  if (!v23)
  {
    uint64_t result = v20;
    a2 = v29;
LABEL_21:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result || !v17) {
      goto LABEL_22;
    }
    long long v26 = a2;
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t))(*result + 16))(result, v18, v17);
LABEL_19:
    a2 = v26;
LABEL_22:
    char v12 = 0;
    *a2 = 0;
    goto LABEL_12;
  }
  uint64_t result = v20;
  a2 = v29;
  if (!v22) {
    goto LABEL_21;
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
  uint64_t v18 = *v20;
  if (!*v20)
  {
    uint64_t result = v20;
    a2 = v29;
    unint64_t v17 = v20[1];
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      char v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 3)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::ArgumentCoder<WebKit::BufferIdentifierSet,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, a2 + 32);
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(IPC::Encoder *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    unint64_t v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x19864B860);
    }
    *unint64_t v4 = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(this, (uint64_t *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v7);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(this, &v8);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (unsigned int **)(v6 + 16 * v13);
      unint64_t v17 = *v16;
      if (*v16)
      {
        if (v17 != (unsigned int *)-1)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = ((unint64_t)v17 + ~((void)v17 << 32)) ^ (((unint64_t)v17 + ~((void)v17 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v27 + 8));
          *(void *)uint64_t v27 = *v16;
          uint64_t v28 = v6 + 16 * v13;
          uint64_t v29 = *(void *)(v28 + 8);
          v28 += 8;
          *(void *)(v27 + 8) = v29;
          *(void *)uint64_t v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v28);
          if (v16 == (unsigned int **)a3) {
            uint64_t v14 = v27;
          }
        }
      }
      else
      {
        IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(v16 + 1);
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

atomic_uchar *volatile **IPC::Connection::waitForMessage@<X0>(atomic_uchar *volatile **result@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v49 = a2;
  uint64_t v48 = a3;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)result + 33);
  if ((v7 & 1) == 0)
  {
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + 8) = 1;
    return result;
  }
  int v8 = result;
  if (!result[2])
  {
    __break(0xC471u);
    JUMPOUT(0x19864BE68);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (atomic_uchar *volatile *)result);
  int v11 = 0;
  if (*((unsigned char *)v8 + 97)) {
    a6 = INFINITY;
  }
  unsigned __int16 v42 = v49;
  uint64_t v43 = v48;
  int v44 = a4;
  char v45 = 0;
  uint64_t v46 = 0;
  uint64_t v12 = (char *)v8 + 226;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8 + 226, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0]((char *)v8 + 226);
  }
  if (v8[29])
  {
    int v16 = 0;
    char v37 = 6;
LABEL_57:
    *(unsigned char *)a5 = v37;
    *(_DWORD *)(a5 + 8) = 1;
    goto LABEL_14;
  }
  if (!*((unsigned char *)v8 + 242))
  {
    int v16 = 0;
    char v37 = 7;
    goto LABEL_57;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v8 + 26);
  unint64_t v13 = (unint64_t)v8[14];
  uint64_t v14 = v8[15];
  if ((atomic_uchar *volatile *)v13 != v14)
  {
    char v15 = 0;
    long long v31 = v8[16];
    while (1)
    {
      atomic_uchar *volatile v32 = v31[v13];
      unsigned int v33 = *((unsigned __int16 *)v32 + 25);
      if (v33 == v49 && *((void *)v32 + 8) == v48) {
        break;
      }
      unint64_t v34 = *((unsigned int *)v8 + 34);
      v13 += v34 + 1;
      do
        v13 -= v34;
      while (v13 >= v34);
      v15 |= v33 > 0xE08;
      if (v14 == (atomic_uchar *volatile *)v13) {
        goto LABEL_11;
      }
    }
    v31[v13] = 0;
    WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::remove((unint64_t *)v8 + 14, v13);
    *(void *)buf = 0;
    *(void *)a5 = v32;
    *(_DWORD *)(a5 + 8) = 0;
    std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)buf);
    os_unfair_lock_unlock((os_unfair_lock_t)v8 + 26);
    int v16 = 0;
    goto LABEL_14;
  }
  char v15 = 0;
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)v8 + 26);
  if (v15 & 1) != 0 && (a4)
  {
    int v16 = 0;
    char v37 = 10;
    goto LABEL_57;
  }
  v8[29] = (atomic_uchar *volatile *)&v42;
  int v16 = 1;
LABEL_14:
  int v17 = 1;
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)((char *)v8 + 226));
  }
  if (v16)
  {
    BOOL v18 = fabs(a6) != INFINITY;
    while (1)
    {
      char v41 = 0;
      int v19 = (atomic_uchar *volatile **)v8[2];
      unint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x20);
      *unint64_t v20 = &unk_1EEA101C0;
      v20[1] = &v41;
      void v20[2] = &v49;
      v20[3] = &v48;
      *(void *)buf = v20;
      IPC::Connection::SyncMessageState::dispatchMessages(v19, buf);
      (*(void (**)(void *))(*v20 + 8))(v20);
      char v21 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8 + 226, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
      if (v21) {
        MEMORY[0x19972E8D0]((char *)v8 + 226);
      }
      if (v41)
      {
        v8[29] = 0;
        char v29 = 8;
        goto LABEL_37;
      }
      if (*((_DWORD *)v8 + 21) && v18) {
        break;
      }
      unsigned int v23 = v8[29];
      uint64_t v24 = *((void *)v23 + 3);
      if (v24)
      {
        int v27 = 0;
        *((void *)v23 + 3) = 0;
        v8[29] = 0;
        *(void *)a5 = v24;
        goto LABEL_31;
      }
      unsigned __int8 v25 = atomic_load((unsigned __int8 *)v8 + 33);
      if ((v25 & 1) == 0)
      {
        v8[29] = 0;
        int v27 = 1;
        *(unsigned char *)a5 = 1;
        goto LABEL_31;
      }
      *(double *)buf = a6;
      *(_DWORD *)&uint8_t buf[8] = 2;
      if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v8 + 225, (atomic_uchar *)v8 + 226, (WTF::TimeWithDynamicClockType *)buf) & 1) == 0)
      {
        v8[29] = 0;
        char v29 = 4;
        goto LABEL_37;
      }
      if (*((unsigned char *)v8[29] + 20))
      {
        v8[29] = 0;
        if (*((unsigned char *)v8 + 242)) {
          char v29 = 10;
        }
        else {
          char v29 = 7;
        }
        goto LABEL_37;
      }
      char v26 = 1;
LABEL_32:
      int v28 = 1;
      atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
      if (v28 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)((char *)v8 + 226));
      }
      if ((v26 & 1) == 0) {
        goto LABEL_42;
      }
    }
    uint64_t v38 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      unsigned int v39 = v49;
      if (v49 >= 0xEF4u) {
        unsigned int v39 = 3828;
      }
      char v40 = (&IPC::Detail::messageDescriptions)[3 * v39];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v40;
      _os_log_error_impl(&dword_1985F2000, v38, OS_LOG_TYPE_ERROR, "Connection::waitForMessage(%{public}s): Exiting immediately, since we're handling a sync message already", buf, 0xCu);
    }
    v8[29] = 0;
    char v29 = 9;
LABEL_37:
    *(unsigned char *)a5 = v29;
    int v27 = 1;
LABEL_31:
    char v26 = 0;
    *(_DWORD *)(a5 + 8) = v27;
    goto LABEL_32;
  }
LABEL_42:
  uint64_t v30 = v46;
  uint64_t v46 = 0;
  if (v30)
  {
    IPC::Decoder::~Decoder(v30);
    WTF::fastFree(v35, v36);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v47);
}

atomic_uchar *volatile **IPC::Connection::SyncMessageState::dispatchMessages(atomic_uchar *volatile **result, void *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  unsigned int v5 = (char *)result + 3;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)result + 3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (atomic_uchar *volatile **)MEMORY[0x19972E8D0]((char *)result + 3);
  }
  uint64_t v6 = v3[2];
  if (v6 == v3[3])
  {
    unsigned __int8 v7 = v3[8];
    int v8 = *((_DWORD *)v3 + 18);
    long long v9 = *((_OWORD *)v3 + 3);
    v3[6] = 0;
    v3[7] = 0;
    uint64_t v3[8] = 0;
    *((_DWORD *)v3 + 18) = 0;
    *((_OWORD *)v3 + 1) = v9;
    uint64_t v10 = (WTF *)v3[4];
    unsigned char v3[4] = v7;
    *((_DWORD *)v3 + 10) = v8;
    uint64_t result = WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((atomic_uchar *volatile **)v10 + 3 * (void)v6, (atomic_uchar *volatile **)v10 + 3 * (void)v6);
    if (v10) {
      uint64_t result = (atomic_uchar *volatile **)WTF::fastFree(v10, v11);
    }
  }
  else
  {
    while (1)
    {
      char v21 = v3[6];
      if (v21 == v3[7]) {
        break;
      }
      uint64_t v13 = 3 * (void)v21;
      uint64_t v14 = (uint64_t)&v3[8][v13];
      long long v15 = *(_OWORD *)v14;
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      *(_OWORD *)unint64_t v22 = v15;
      uint64_t v23 = *(void *)(v14 + 16);
      WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((atomic_uchar *volatile **)&v3[8][v13], (atomic_uchar *volatile **)&v3[8][v13 + 3]);
      int v16 = v3[6];
      if (v16 == (atomic_uchar *volatile *)(*((unsigned int *)v3 + 18) - 1)) {
        int v17 = 0;
      }
      else {
        int v17 = (atomic_uchar *volatile *)((char *)v16 + 1);
      }
      v3[6] = v17;
      WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(v3 + 2, (atomic_uchar *volatile *)v22);
      BOOL v18 = v22[1];
      v22[1] = 0;
      if (v18)
      {
        IPC::Decoder::~Decoder(v18);
        WTF::fastFree(v19, v20);
      }
      uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v22);
    }
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    uint64_t result = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  for (;
        v3[2] != v3[3];
        uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v22))
  {
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::takeFirst((uint64_t)v22, (uint64_t)(v3 + 2));
    if (*a2) {
      (*(void (**)(void, void, void))(*(void *)*a2 + 16))(*a2, *((unsigned __int16 *)v22[1] + 25), *((void *)v22[1] + 8));
    }
    IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch((uint64_t **)v22);
    std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v22[1]);
  }
  return result;
}

BOOL WebKit::anonymous namespace'::RemoteImageBufferSetProxyFlusher::flushAndCollectHandles(WTF::MonotonicTime *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  char v4 = 0;
  uint64_t v5 = *((void *)a1 + 2);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 4), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    a1 = (WTF::MonotonicTime *)MEMORY[0x19972E8D0](v5 + 4);
  }
  if (!*(unsigned char *)(v5 + 160))
  {
    double v6 = *(double *)(v5 + 176);
    if (fabs(v6) != INFINITY)
    {
      WTF::MonotonicTime::now(a1);
      double v6 = v6 + v7;
    }
    double v50 = v6;
    int v51 = 1;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v5 + 5, (atomic_uchar *)(v5 + 4), (WTF::TimeWithDynamicClockType *)&v50);
  }
  int v8 = 1;
  kdebug_trace();
  int v9 = *(unsigned __int8 *)(v5 + 160);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 4), (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 4));
  }
  if (!v9) {
    goto LABEL_60;
  }
  char v10 = 0;
  uint64_t v11 = *((void *)v3 + 2);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 4), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](v11 + 4);
  }
  LOBYTE(v50) = 0;
  char v59 = 0;
  if (*(unsigned char *)(v11 + 160))
  {
    char v53 = 0;
    if (!*(unsigned char *)(v11 + 80))
    {
      long long v45 = *(_OWORD *)(v11 + 104);
      long long v46 = *(_OWORD *)(v11 + 120);
      long long v47 = *(_OWORD *)(v11 + 136);
      char v58 = *(unsigned char *)(v11 + 152);
      long long v48 = *(_OWORD *)(v11 + 88);
      long long v56 = v46;
      long long v57 = v47;
      long long v54 = v48;
      long long v55 = v45;
      char v59 = 1;
      goto LABEL_15;
    }
    int v52 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)&v50, v11 + 8);
    char v53 = 1;
    int v12 = *(unsigned __int8 *)(v11 + 160);
    long long v54 = *(_OWORD *)(v11 + 88);
    long long v13 = *(_OWORD *)(v11 + 104);
    long long v14 = *(_OWORD *)(v11 + 120);
    long long v15 = *(_OWORD *)(v11 + 136);
    char v58 = *(unsigned char *)(v11 + 152);
    long long v56 = v14;
    long long v57 = v15;
    long long v55 = v13;
    char v59 = 1;
    if (v12)
    {
LABEL_15:
      if (*(unsigned char *)(v11 + 80))
      {
        uint64_t v16 = *(unsigned int *)(v11 + 72);
        if (v16 != -1) {
          off_1EE9E9D58[v16]((int)&v60, (WTF::MachSendRight *)(v11 + 8));
        }
        *(_DWORD *)(v11 + 72) = -1;
      }
      *(unsigned char *)(v11 + 160) = 0;
    }
  }
  int v17 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 4), (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 4));
  }
  if (v59)
  {
    uint64_t v18 = WTF::fastMalloc((WTF *)0x98);
    uint64_t v19 = v18;
    *(unsigned char *)uint64_t v18 = 0;
    *(unsigned char *)(v18 + 72) = 0;
    if (v53)
    {
      *(_DWORD *)(v18 + 64) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)v18, (uint64_t)&v50);
      *(unsigned char *)(v19 + 72) = 1;
    }
    *(_OWORD *)(v19 + 80) = v54;
    long long v20 = v55;
    long long v21 = v56;
    long long v22 = v57;
    *(unsigned char *)(v19 + 144) = v58;
    *(_OWORD *)(v19 + 112) = v21;
    *(_OWORD *)(v19 + 128) = v22;
    *(_OWORD *)(v19 + 96) = v20;
    unint64_t v60 = (WTF *)v19;
    uint64_t v23 = *a2;
    if (*a2
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v23 = *a2) != 0))
    {
      int v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      int v24 = 0;
    }
    unsigned __int8 v25 = (WTF *)*((void *)v3 + 1);
    unint64_t v26 = ((unint64_t)v25 + ~((void)v25 << 32)) ^ (((unint64_t)v25 + ~((void)v25 << 32)) >> 22);
    unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    unsigned int v29 = v24 & ((v28 >> 31) ^ v28);
    uint64_t v30 = (WTF **)(v23 + 16 * v29);
    long long v31 = *v30;
    if (*v30)
    {
      uint64_t v43 = 0;
      int v44 = 1;
      while (v31 != v25)
      {
        if (v31 == (WTF *)-1) {
          uint64_t v43 = v30;
        }
        unsigned int v29 = (v29 + v44) & v24;
        uint64_t v30 = (WTF **)(v23 + 16 * v29);
        long long v31 = *v30;
        ++v44;
        if (!*v30)
        {
          if (v43)
          {
            *uint64_t v43 = 0;
            v43[1] = 0;
            --*(_DWORD *)(*a2 - 16);
            unsigned __int8 v25 = (WTF *)*((void *)v3 + 1);
            uint64_t v30 = v43;
          }
          goto LABEL_29;
        }
      }
      goto LABEL_37;
    }
LABEL_29:
    *uint64_t v30 = v25;
    atomic_uchar *volatile v32 = v30[1];
    unsigned int v33 = v60;
    unint64_t v60 = 0;
    v30[1] = v33;
    if (v32) {
      std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100](v30 + 8, v32);
    }
    uint64_t v34 = *a2;
    if (*a2) {
      int v35 = *(_DWORD *)(v34 - 12) + 1;
    }
    else {
      int v35 = 1;
    }
    *(_DWORD *)(v34 - 12) = v35;
    uint64_t v36 = *a2;
    if (*a2) {
      int v37 = *(_DWORD *)(v36 - 12);
    }
    else {
      int v37 = 0;
    }
    uint64_t v38 = (*(_DWORD *)(v36 - 16) + v37);
    unint64_t v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38) {
        goto LABEL_37;
      }
    }
    else if (3 * v39 > 4 * v38)
    {
LABEL_37:
      char v40 = v60;
      unint64_t v60 = 0;
      if (v40) {
        std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)&v60, v40);
      }
      if (v59) {
        BOOL v41 = v53 == 0;
      }
      else {
        BOOL v41 = 1;
      }
      if (!v41 && v52 != -1) {
        off_1EE9E9D58[v52]((int)&v61, (WTF::MachSendRight *)&v50);
      }
      return v9 != 0;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v30);
    goto LABEL_37;
  }
  __break(1u);
LABEL_60:
  unsigned __int16 v49 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v50) = 0;
    _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferSetProxyFlusher::flushAndCollectHandlers - failed", (uint8_t *)&v50, 2u);
  }
  return v9 != 0;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    long long v14 = (WTF **)(v6 + 8);
    do
    {
      uint64_t v15 = (uint64_t)*(v14 - 1);
      if (v15)
      {
        if (v15 != -1)
        {
          uint64_t v16 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v14 - 1);
          int v17 = (WTF *)v16[1];
          v16[1] = 0;
          if (v17) {
            std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100](v16 + 8, v17);
          }
          *uint64_t v16 = *(v14 - 1);
          uint64_t v18 = *v14;
          *long long v14 = 0;
          v16[1] = v18;
          char v10 = *v14;
          *long long v14 = 0;
          if (v10) {
            std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v14, v10);
          }
          if (v14 - 1 == a3) {
            uint64_t v11 = v16;
          }
        }
      }
      else
      {
        char v10 = *v14;
        *long long v14 = 0;
        if (v10) {
          std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::Condition::waitUntilUnchecked<WTF::Lock>(uint64_t a1, atomic_uchar *a2, WTF::TimeWithDynamicClockType *this)
{
  uint64_t v13 = (uint64_t (*)(uint64_t))WTF::TimeWithDynamicClockType::nowWithSameClock(this);
  long long v14 = v5;
  if (WTF::TimeWithDynamicClockType::operator<())
  {
    uint64_t v6 = 0;
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(a2, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1)
    {
      WTF::Lock::unlockSlow((WTF::Lock *)a2);
      uint64_t v6 = 0;
    }
  }
  else
  {
    char v10 = a2;
    uint64_t v11 = a1;
    uint64_t v13 = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
    long long v14 = &v13;
    uint64_t v15 = &v11;
    v12[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
    v12[1] = v12;
    v12[2] = &v10;
    uint64_t v6 = WTF::ParkingLot::parkConditionallyImpl() & 1;
  }
  char v7 = 0;
  atomic_compare_exchange_strong_explicit(a2, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x19972E8D0](a2);
  }
  return v6;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(uint64_t a1, char a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    int v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v6 = &unk_1EE9C8318;
    *(void *)(v6 + 8) = a1;
    *(unsigned char *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = v5;
    uint64_t v10 = v6;
    WebKit::WebResourceLoadStatisticsStore::postTask(a1, &v10);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::postTask(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v4 = *a2;
    *a2 = 0;
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v5 = &unk_1EE9C7620;
    v5[1] = a1;
    void v5[2] = v4;
    char v7 = v5;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v7;
    if (v7) {
      return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
    }
  }
  return result;
}

void WebKit::AuxiliaryProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  double v7 = v6 - *(double *)(a1 + 192);
  if (v7 > 1.0)
  {
    uint64_t v8 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_FAULT))
    {
      uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v75;
      *(_WORD *)uint64_t v85 = 2048;
      *(void *)&v85[2] = a1;
      __int16 v86 = 2048;
      double v87 = v7;
      _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, "%s process (%p) took %f seconds to launch", buf, 0x20u);
    }
  }
  if ((*a3 - 1) > 0xFFFFFFFD) {
    return;
  }
  int v81 = *a3;
  int v9 = (void *)*((void *)a3 + 1);
  uint64_t v82 = v9;
  if (v9)
  {
    os_retain(v9);
    IPC::Connection::createServerConnection((uint64_t)&v81, (mach_port_context_t *)buf);
    char v83 = *(atomic_uchar *volatile **)buf;
    *(void *)buf = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
    os_release(v9);
  }
  else
  {
    IPC::Connection::createServerConnection((uint64_t)&v81, (mach_port_context_t *)buf);
    char v83 = *(atomic_uchar *volatile **)buf;
    *(void *)buf = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
  }
  WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::copyRef(&v83, v80);
  uint64_t v10 = v80[0];
  v80[0] = 0;
  uint64_t v11 = *(atomic_uchar *volatile **)(a1 + 144);
  *(void *)(a1 + 144) = v10;
  if (!v11) {
    goto LABEL_26;
  }
  char v12 = 0;
  atomic_uchar *volatile v13 = *v11;
  atomic_compare_exchange_strong_explicit(*v11, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x19972E8D0](v13);
  }
  uint64_t v14 = *((void *)v13 + 1);
  uint64_t v15 = v14 - 1;
  *((void *)v13 + 1) = v14 - 1;
  if (v14 == 1)
  {
    uint64_t v76 = *((void *)v13 + 2);
    uint64_t v17 = *((void *)v13 + 3);
    *((void *)v13 + 3) = 0;
    BOOL v16 = v76 == 0;
  }
  else
  {
    BOOL v16 = 0;
    uint64_t v17 = 0;
  }
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 == 1)
  {
    if (!v15) {
      goto LABEL_15;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (!v15)
    {
LABEL_15:
      uint64_t v19 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v19 = &unk_1EE9B37E8;
      *(void *)(v19 + 8) = v13;
      *(void *)(v19 + 16) = v17;
      *(unsigned char *)(v19 + 24) = v16;
      *(void *)buf = v19;
      WTF::ensureOnMainRunLoop();
      uint64_t v20 = *(void *)buf;
      *(void *)buf = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
  }
  long long v21 = v80[0];
  v80[0] = 0;
  if (!v21) {
    goto LABEL_26;
  }
  char v22 = 0;
  atomic_uchar *volatile v23 = *v21;
  atomic_compare_exchange_strong_explicit(*v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
  if (v22) {
    MEMORY[0x19972E8D0](v23);
  }
  uint64_t v24 = *((void *)v23 + 1);
  uint64_t v25 = v24 - 1;
  *((void *)v23 + 1) = v24 - 1;
  if (v24 == 1)
  {
    uint64_t v77 = *((void *)v23 + 2);
    uint64_t v27 = *((void *)v23 + 3);
    *((void *)v23 + 3) = 0;
    BOOL v26 = v77 == 0;
  }
  else
  {
    BOOL v26 = 0;
    uint64_t v27 = 0;
  }
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 == 1)
  {
    if (v25) {
      goto LABEL_26;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v25) {
      goto LABEL_26;
    }
  }
  uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v29 = &unk_1EE9B37E8;
  *(void *)(v29 + 8) = v23;
  *(void *)(v29 + 16) = v27;
  *(unsigned char *)(v29 + 24) = v26;
  *(void *)buf = v29;
  WTF::ensureOnMainRunLoop();
  uint64_t v30 = *(void *)buf;
  *(void *)buf = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
LABEL_26:
  {
    uint64_t v31 = WebKit::connectionToProcessMap(void)::map;
    uint64_t v32 = *(void *)(*(void *)(a1 + 144) + 24);
    if (WebKit::connectionToProcessMap(void)::map)
    {
LABEL_29:
      int v33 = *(_DWORD *)(v31 - 8);
      goto LABEL_30;
    }
  }
  else
  {
    WebKit::connectionToProcessMap(void)::map = 0;
    uint64_t v32 = *(void *)(*(void *)(a1 + 144) + 24);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v31 = WebKit::connectionToProcessMap(void)::map;
  if (WebKit::connectionToProcessMap(void)::map) {
    goto LABEL_29;
  }
  int v33 = 0;
LABEL_30:
  unint64_t v34 = (v32 + ~(v32 << 32)) ^ ((unint64_t)(v32 + ~(v32 << 32)) >> 22);
  unint64_t v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  unint64_t v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  unsigned int v37 = v33 & ((v36 >> 31) ^ v36);
  uint64_t v38 = (void *)(v31 + 16 * v37);
  uint64_t v39 = *v38;
  if (!*v38)
  {
LABEL_38:
    *uint64_t v38 = v32;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v43 = *(atomic_uint **)(a1 + 8);
    if (v43) {
      atomic_fetch_add(v43, 1u);
    }
    int v44 = (unsigned int *)v38[1];
    v38[1] = v43;
    if (v44 && atomic_fetch_add((atomic_uint *volatile)v44, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v42);
    }
    if (WebKit::connectionToProcessMap(void)::map) {
      int v45 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) + 1;
    }
    else {
      int v45 = 1;
    }
    *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) = v45;
    if (WebKit::connectionToProcessMap(void)::map) {
      int v46 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12);
    }
    else {
      int v46 = 0;
    }
    uint64_t v47 = (*(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 16) + v46);
    unint64_t v48 = *(unsigned int *)(WebKit::connectionToProcessMap(void)::map - 4);
    if (v48 > 0x400)
    {
      if (v48 > 2 * v47) {
        goto LABEL_52;
      }
    }
    else if (3 * v48 > 4 * v47)
    {
      goto LABEL_52;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
    goto LABEL_52;
  }
  char v40 = 0;
  int v41 = 1;
  while (v39 != v32)
  {
    if (v39 == -1) {
      char v40 = v38;
    }
    unsigned int v37 = (v37 + v41) & v33;
    uint64_t v38 = (void *)(v31 + 16 * v37);
    uint64_t v39 = *v38;
    ++v41;
    if (!*v38)
    {
      if (v40)
      {
        *char v40 = 0;
        v40[1] = 0;
        --*(_DWORD *)(v31 - 16);
        uint64_t v38 = v40;
      }
      goto LABEL_38;
    }
  }
LABEL_52:
  unsigned __int16 v49 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t, atomic_uchar *volatile *))(*(void *)a1 + 184))(a1, v83);
  double v50 = (IPC::Connection *)v83;
  int v51 = (_OWORD *)WTF::RunLoop::current(v49);
  IPC::Connection::open(v50, a1 + 32, v51);
  int v52 = v83;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  char v53 = *(atomic_uint **)(a1 + 8);
  if (v53) {
    atomic_fetch_add(v53, 1u);
  }
  long long v55 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v55 = &unk_1EE9D57A0;
  v55[1] = v53;
  uint64_t v56 = *((void *)v52 + 6);
  *((void *)v52 + 6) = v55;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v57 = *(void *)(a1 + 120);
  *(void *)buf = v57;
  uint64_t v58 = *(unsigned int *)(a1 + 132);
  *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a1 + 128);
  *(_DWORD *)uint64_t v85 = v58;
  v80[0] = 0;
  *(void *)(a1 + 120) = 0;
  v80[1] = 0;
  *(void *)(a1 + 128) = 0;
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v80, v54);
  if (v58)
  {
    uint64_t v60 = 40 * v58;
    do
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v57))
      {
        if (*(unsigned char *)(v57 + 32))
        {
          char v61 = (os_unfair_lock_s *)v83;
          uint64_t v62 = *(void *)(v57 + 16);
          *(void *)(v57 + 16) = 0;
          v79[0] = v62;
          v79[1] = *(void *)(v57 + 24);
          IPC::Connection::sendMessageWithAsyncReply(v61, (IPC::Encoder **)v57, v79, *(unsigned char *)(v57 + 8), 0);
          uint64_t v63 = v79[0];
          v79[0] = 0;
          if (v63) {
            (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
          }
        }
        else
        {
          IPC::Connection::sendMessageImpl((uint64_t)v83, (uint64_t *)v57, *(unsigned char *)(v57 + 8), 0);
        }
      }
      v57 += 40;
      v60 -= 40;
    }
    while (v60);
  }
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v59);
  WebKit::ProcessThrottler::didConnectToProcess((WebKit::ProcessThrottler *)(a1 + 200), (WebKit::AuxiliaryProcessProxy *)a1);
  if (a2)
  {
    unint64_t v64 = *(unsigned int **)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    if (v64) {
      WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v64);
    }
  }
  unint64_t v65 = v83;
  char v83 = 0;
  if (v65)
  {
    char v66 = 0;
    atomic_uchar *volatile v67 = *v65;
    atomic_compare_exchange_strong_explicit(*v65, (unsigned __int8 *)&v66, 1u, memory_order_acquire, memory_order_acquire);
    if (v66) {
      MEMORY[0x19972E8D0](v67);
    }
    uint64_t v68 = *((void *)v67 + 1);
    uint64_t v69 = v68 - 1;
    *((void *)v67 + 1) = v68 - 1;
    if (v68 == 1)
    {
      uint64_t v78 = *((void *)v67 + 2);
      uint64_t v71 = *((void *)v67 + 3);
      *((void *)v67 + 3) = 0;
      BOOL v70 = v78 == 0;
    }
    else
    {
      BOOL v70 = 0;
      uint64_t v71 = 0;
    }
    int v72 = 1;
    atomic_compare_exchange_strong_explicit(v67, (unsigned __int8 *)&v72, 0, memory_order_release, memory_order_relaxed);
    if (v72 == 1)
    {
      if (v69) {
        return;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v67);
      if (v69) {
        return;
      }
    }
    uint64_t v73 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v73 = &unk_1EE9B37E8;
    *(void *)(v73 + 8) = v67;
    *(void *)(v73 + 16) = v71;
    *(unsigned char *)(v73 + 24) = v70;
    *(void *)buf = v73;
    WTF::ensureOnMainRunLoop();
    uint64_t v74 = *(void *)buf;
    *(void *)buf = 0;
    if (v74) {
      (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::shouldSendPendingMessage()
{
  return 1;
}

uint64_t WebKit::WebProcessProxy::shouldSendPendingMessage(uint64_t a1, unsigned __int16 **a2, unint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  double v6 = *a2;
  int v7 = **a2;
  if (v7 == 2283)
  {
    uint64_t v27 = (WTF *)v6[68];
    if (v6[67] < (unint64_t)v27) {
      goto LABEL_83;
    }
    int v28 = (const void *)v6[66];
    uint64_t v62 = 0;
    *(void *)&v63[0] = 0;
    IPC::Decoder::create(v27, v28, (uint64_t *)&v62, &v61);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v29);
    if (!v61) {
      return 0;
    }
    IPC::Decoder::decode<WebKit::GoToBackForwardItemParameters>(v61, (uint64_t)&v67);
    if (v70)
    {
      a1 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v61);
      if (v30)
      {
        if (!v70) {
          goto LABEL_83;
        }
        uint64_t v31 = a1;
        uint64_t v4 = (IPC::Decoder *)*((void *)v61 + 8);
        *(_OWORD *)uint64_t v57 = v68;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
        uint64_t v32 = *(atomic_uint **)(v5 + 8);
        if (v32) {
          atomic_fetch_add(v32, 1u);
        }
        uint64_t v62 = (WTF *)v32;
        uint64_t v3 = v63;
        LOBYTE(v63[0]) = 0;
        char v64 = 0;
        if (v70)
        {
          std::construct_at[abi:sn180100]<WebKit::GoToBackForwardItemParameters,WebKit::GoToBackForwardItemParameters,WebKit::GoToBackForwardItemParameters*>((uint64_t)v63, (long long *)&v67);
          char v64 = 1;
        }
        unint64_t v65 = v4;
        int v33 = (WebKit::WebBackForwardListItem *)WebKit::WebProcessProxy::webPage(v31, &v58);
        uint64_t v34 = v58;
        if (v58)
        {
          unint64_t v35 = WebKit::WebBackForwardListItem::allItems(v33);
          uint64_t v36 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v35, v57);
          if (v36)
          {
            uint64_t v37 = v36;
            CFRetain(*(CFTypeRef *)(v36 + 8));
            WTF::URL::URL((uint64_t)v59, (WTF::StringImpl **)(v37 + 56));
            uint64_t v38 = WTF::fastMalloc((WTF *)0xE8);
            *(void *)uint64_t v38 = &unk_1EE9DD4B8;
            uint64_t v39 = v62;
            uint64_t v62 = 0;
            *(void *)(v38 + 8) = v39;
            *(unsigned char *)(v38 + 16) = 0;
            *(unsigned char *)(v38 + 216) = 0;
            if (v64)
            {
              std::construct_at[abi:sn180100]<WebKit::GoToBackForwardItemParameters,WebKit::GoToBackForwardItemParameters,WebKit::GoToBackForwardItemParameters*>(v38 + 16, v63);
              *(unsigned char *)(v38 + 216) = 1;
            }
            *(void *)(v38 + 224) = v65;
            uint64_t v56 = v38;
            WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(v34, v5, (const WTF::URL *)v59, (WTF::URL *)(v37 + 344), 1, &v56);
            uint64_t v41 = v56;
            uint64_t v56 = 0;
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
            }
            unsigned __int16 v42 = v59[0];
            v59[0] = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2) {
                WTF::StringImpl::destroy(v42, v40);
              }
              else {
                *(_DWORD *)v42 -= 2;
              }
            }
            CFRelease(*(CFTypeRef *)(v37 + 8));
          }
          CFRelease(*(CFTypeRef *)(v34 + 8));
        }
        else if (v62)
        {
          a1 = *((void *)v62 + 1);
          if (a1)
          {
            if (!v64) {
              goto LABEL_83;
            }
            v59[0] = (WTF::StringImpl *)v63;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(a1, (uint64_t *)v59, (uint64_t)v65, 0);
          }
        }
        std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63);
        int v45 = (unsigned int *)v62;
        uint64_t v62 = 0;
        if (v45 && atomic_fetch_add((atomic_uint *volatile)v45, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v44);
        }
      }
    }
    std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67);
    goto LABEL_80;
  }
  if (v7 != 2313) {
    return 1;
  }
  uint64_t v8 = (WTF *)v6[68];
  if (v6[67] < (unint64_t)v8) {
    goto LABEL_83;
  }
  int v9 = (const void *)v6[66];
  uint64_t v62 = 0;
  *(void *)&v63[0] = 0;
  IPC::Decoder::create(v8, v9, (uint64_t *)&v62, &v61);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v10);
  if (v61)
  {
    IPC::Decoder::decode<WebKit::LoadParameters>(v61, &v67);
    IPC::Decoder::decode<WTF::URL>(v61, v59);
    a1 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v61);
    LOBYTE(v3) = v11;
    uint64_t v4 = v61;
    a3 = *((void *)v61 + 1);
    char v12 = *(char **)v61;
    unint64_t v13 = *((void *)v61 + 2) - *(void *)v61;
    if (a3 <= v13) {
      goto LABEL_84;
    }
    uint64_t v14 = &v12[v13];
    *((void *)v61 + 2) = v14 + 1;
    if (!v12)
    {
      uint64_t v50 = a1;
      unint64_t v51 = a3;
      int v52 = 0;
      goto LABEL_85;
    }
    unsigned int v15 = *v14;
    if (v15 >= 2)
    {
      uint64_t v50 = a1;
      goto LABEL_87;
    }
    for (int i = 1; ; int i = 0)
    {
      int v17 = v15 ? i : 0;
      if (!v71) {
        break;
      }
      if ((_BYTE)v3) {
        BOOL v18 = v60 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18) {
        int i = 0;
      }
      if (i != 1) {
        break;
      }
      uint64_t v4 = (IPC::Decoder *)*((void *)v61 + 8);
      a1 = WebKit::WebProcessProxy::webPage(a1, &v58);
      uint64_t v3 = (long long *)v58;
      if (!v58) {
        break;
      }
      if (v71)
      {
        a1 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v69);
        uint64_t v19 = *(_DWORD **)a1;
        if (*(void *)a1) {
          *v19 += 2;
        }
        v57[0] = v19;
        long long v20 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)&v57[1] = *(_OWORD *)(a1 + 8);
        *(_OWORD *)&v57[3] = v20;
        if (v60)
        {
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
          long long v21 = *(atomic_uint **)(v5 + 8);
          if (v21) {
            atomic_fetch_add(v21, 1u);
          }
          uint64_t v62 = (WTF *)v21;
          *(void *)&v63[0] = v4;
          BYTE8(v63[0]) = 0;
          char v66 = 0;
          if (v71)
          {
            WebKit::LoadParameters::LoadParameters((uint64_t)v63 + 8, &v67);
            char v66 = 1;
          }
          uint64_t v22 = WTF::fastMalloc((WTF *)0x268);
          *(void *)uint64_t v22 = &unk_1EE9DD490;
          atomic_uchar *volatile v23 = v62;
          uint64_t v62 = 0;
          *(void *)(v22 + 8) = v23;
          *(void *)(v22 + 16) = *(void *)&v63[0];
          *(unsigned char *)(v22 + 24) = 0;
          *(unsigned char *)(v22 + 608) = 0;
          if (v66)
          {
            WebKit::LoadParameters::LoadParameters(v22 + 24, (uint64_t *)v63 + 1);
            *(unsigned char *)(v22 + 608) = 1;
          }
          uint64_t v56 = v22;
          WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle((uint64_t)v3, v5, (const WTF::URL *)v57, (WTF::URL *)v59, v17, &v56);
          uint64_t v24 = v56;
          uint64_t v56 = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          if (v66) {
            WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)((char *)v63 + 8), v12);
          }
          uint64_t v25 = (unsigned int *)v62;
          uint64_t v62 = 0;
          if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v12);
          }
          BOOL v26 = (WTF::StringImpl *)v57[0];
          v57[0] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          if (v58) {
            CFRelease(*(CFTypeRef *)(v58 + 8));
          }
          break;
        }
      }
LABEL_83:
      __break(1u);
LABEL_84:
      uint64_t v50 = a1;
      unint64_t v51 = 0;
      int v52 = 0;
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v53 = *((void *)v4 + 3);
      if (v53)
      {
        if (a3)
        {
          (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
          int v52 = *(char **)v4;
          unint64_t v51 = *((void *)v4 + 1);
        }
        else
        {
          unint64_t v51 = 0;
          int v52 = 0;
        }
      }
LABEL_85:
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v54 = *((void *)v4 + 3);
      if (v54 && v51)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v54 + 16))(v54, v52, v51);
        unsigned int v15 = 0;
        char v12 = *(char **)v4;
        a3 = *((void *)v4 + 1);
      }
      else
      {
        a3 = 0;
        char v12 = 0;
        unsigned int v15 = 0;
      }
LABEL_87:
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v55 = *((void *)v4 + 3);
      if (v55 && a3) {
        (*(void (**)(uint64_t, char *))(*(void *)v55 + 16))(v55, v12);
      }
      a1 = v50;
    }
    if (v60)
    {
      int v46 = v59[0];
      v59[0] = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    if (v71) {
      WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v67, v12);
    }
LABEL_80:
    uint64_t v47 = v61;
    char v61 = 0;
    if (v47)
    {
      IPC::Decoder::~Decoder(v47);
      WTF::fastFree(v48, v49);
    }
  }
  return 0;
}

uint64_t IPC::Connection::sendMessageWithAsyncReply(os_unfair_lock_s *a1, IPC::Encoder **a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v10 = a3[1];
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(*a2, &v20);
  IPC::Connection::addAsyncReplyHandler((uint64_t)a1, a3);
  uint64_t v11 = IPC::Connection::sendMessageImpl((uint64_t)a1, (uint64_t *)a2, a4, a5);
  if (v11)
  {
    IPC::Connection::takeAsyncReplyHandler(a1, v10, &v19);
    if (v19)
    {
      uint64_t v14 = (atomic_uint *)(WTF::RunLoop::main(v13) + 8);
      atomic_fetch_add(v14, 1u);
      uint64_t v15 = v19;
      uint64_t v19 = 0;
      BOOL v16 = (void *)WTF::fastMalloc((WTF *)0x10);
      *BOOL v16 = &unk_1EEA10198;
      v16[1] = v15;
      BOOL v18 = v16;
      WTF::RunLoop::dispatch();
      if (v18) {
        (*(void (**)(void *))(*v18 + 8))(v18);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v14);
      uint64_t v17 = v19;
      uint64_t v19 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
  }
  return v11;
}

void IPC::Connection::addAsyncReplyHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(IPC::Decoder *)>>((uint64_t *)(a1 + 296), a2 + 1, a2, (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(IPC::Decoder *)>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  BOOL v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v27 = 0;
    int v28 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = *(unsigned int *)(v8 - 4);
        }
        char v26 = 0;
        uint64_t v25 = v8 + 16 * v29;
        goto LABEL_13;
      }
      if (v17 == -1) {
        uint64_t v27 = v16;
      }
      unsigned int v15 = (v15 + v28) & v10;
      BOOL v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v28;
    }
    while (*v16);
    if (v27)
    {
      *uint64_t v27 = 0;
      v27[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      BOOL v16 = v27;
    }
  }
  *BOOL v16 = v11;
  uint64_t v18 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v18;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v19 = *v6;
  if (*v6) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
    BOOL v16 = result;
    uint64_t v21 = *v6;
    if (*v6) {
      unint64_t v24 = *(unsigned int *)(v21 - 4);
    }
    else {
      unint64_t v24 = 0;
    }
    goto LABEL_12;
  }
  if (3 * v24 <= 4 * v23) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v25 = v21 + 16 * v24;
  char v26 = 1;
LABEL_13:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v25;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*((unsigned char *)v4 + 32))
      {
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)v4, a2);
      uint64_t v4 = (WTF *)((char *)v4 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::takeFirst(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    uint64_t result = 80;
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = 3 * *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 16) + 24 * *(void *)a2;
    long long v5 = *(_OWORD *)v4;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_OWORD *)a1 = v5;
    *(void *)(a1 + 16) = *(void *)(v4 + 16);
    uint64_t result = (uint64_t)WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((atomic_uchar *volatile **)(*(void *)(a2 + 16) + 8 * v3), (atomic_uchar *volatile **)(*(void *)(a2 + 16) + 8 * v3 + 24));
    if (*(void *)a2 == *(unsigned int *)(a2 + 24) - 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(void *)a2 + 1;
    }
    *(void *)a2 = v7;
  }
  return result;
}

atomic_uchar *volatile **IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch(uint64_t **this)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, this);
  uint64_t v2 = v9;
  uint64_t v3 = (IPC::Decoder *)this[1];
  this[1] = 0;
  uint64_t v8 = v3;
  IPC::Connection::dispatchMessage(v2, &v8);
  uint64_t v4 = v8;
  uint64_t v8 = 0;
  if (v4)
  {
    IPC::Decoder::~Decoder(v4);
    WTF::fastFree(v6, v7);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v9);
}

atomic_uchar *volatile *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(atomic_uchar *volatile *result)
{
  char v1 = 0;
  atomic_uchar *volatile v2 = *result;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x19972E8D0](v2);
  }
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v2 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v6 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    uint64_t result = (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (!v4)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9B37E8;
    *(void *)(v8 + 8) = v2;
    *(void *)(v8 + 16) = v6;
    *(unsigned char *)(v8 + 24) = v5;
    int v10 = (atomic_uchar *volatile *)v8;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v10;
    if (v10) {
      return (atomic_uchar *volatile *)(*((uint64_t (**)(atomic_uchar *volatile *))*v10 + 1))(v10);
    }
  }
  return result;
}

void IPC::Connection::createServerConnection(uint64_t a1@<X0>, mach_port_context_t *a2@<X8>)
{
  mach_port_context_t v4 = WTF::fastMalloc((WTF *)0x170);
  mach_port_context_t v5 = v4;
  int v7 = *(_DWORD *)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v8 = v6;
  if (v6)
  {
    os_retain(v6);
    IPC::Connection::Connection(v5, &v7, 1);
    os_release(v6);
  }
  else
  {
    IPC::Connection::Connection(v4, &v7, 1);
  }
  *a2 = v5;
}

void IPC::Connection::addMessageReceiver(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v13 = a5;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    LOBYTE(v13) = 0;
  }
  v12[0] = a4;
  v12[1] = 1;
  char v14 = v8;
  uint64_t v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v9 = &unk_1EEA10070;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 2) = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue((IPC::Decoder **)a1, v9, v12);
  uint64_t v11 = v9;
  IPC::MessageReceiveQueueMap::add((uint64_t *)(a1 + 144), (uint64_t *)&v11, v12);
  uint64_t v10 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
}

void IPC::Connection::addWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v13 = a5;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    LOBYTE(v13) = 0;
  }
  v12[0] = a2;
  v12[1] = 1;
  char v14 = v8;
  uint64_t v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v9 = &unk_1EEA10020;
  (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
  *((void *)v9 + 1) = a3;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a4 + 16));
  *((void *)v9 + 2) = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue((IPC::Decoder **)a1, v9, v12);
  uint64_t v11 = v9;
  IPC::MessageReceiveQueueMap::add((uint64_t *)(a1 + 144), (uint64_t *)&v11, v12);
  uint64_t v10 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
}

atomic_uchar *volatile *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(atomic_uchar *volatile *result)
{
  char v1 = 0;
  atomic_uchar *volatile v2 = *result;
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x19972E8D0](v2);
  }
  ++*((void *)v2 + 1);
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

IPC::Decoder **IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue(IPC::Decoder **result, WTF *a2, unsigned __int8 *a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)result + 33);
  if (v3)
  {
    uint64_t v6 = result;
    int v7 = result[2];
    if (v7)
    {
      char v8 = 0;
      *(void *)&long long v24 = result;
      *((void *)&v24 + 1) = a3;
      v25[0] = a2;
      int v9 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7 + 3, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0]((char *)v7 + 3);
      }
      IPC::Connection::SyncMessageState::enqueueMatchingMessages(IPC::Connection&,IPC::MessageReceiveQueue &,IPC::ReceiverMatcher const&)::$_0::operator()((uint64_t)&v24, (uint64_t)v7 + 16);
      IPC::Connection::SyncMessageState::enqueueMatchingMessages(IPC::Connection&,IPC::MessageReceiveQueue &,IPC::ReceiverMatcher const&)::$_0::operator()((uint64_t)&v24, (uint64_t)v7 + 48);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7 + 3, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 != 1) {
        WTF::Lock::unlockSlow((IPC::Decoder *)((char *)v7 + 3));
      }
    }
    long long v10 = 0uLL;
    long long v24 = 0u;
    *(_OWORD *)uint64_t v25 = 0u;
    uint64_t v11 = v6[14];
    unint64_t v12 = v6[15];
    if (v11 == v12)
    {
      int v18 = 0;
      uint64_t v17 = 0;
      LODWORD(v15) = *((_DWORD *)v6 + 34);
      BOOL v16 = v6[14];
    }
    else
    {
      do
      {
        uint64_t v13 = (uint64_t)v6[16] + 8 * (void)v11;
        if (!a3[1]) {
          goto LABEL_36;
        }
        unsigned int v14 = *(unsigned __int16 *)(*(void *)v13 + 50);
        if (v14 >= 0xEF4) {
          unsigned int v14 = 3828;
        }
        if (*a3 != LOBYTE((&IPC::Detail::messageDescriptions)[3 * v14 + 2])
          || a3[16] && *((void *)a3 + 1) != *(void *)(*(void *)v13 + 64))
        {
          WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append((uint64_t *)&v24, (uint64_t *)v6[16] + (void)v11);
        }
        else
        {
LABEL_36:
          (*(void (**)(WTF *, IPC::Decoder **, uint64_t))(*(void *)a2 + 16))(a2, v6, v13);
        }
        unint64_t v15 = *((unsigned int *)v6 + 34);
        uint64_t v11 = (IPC::Decoder *)((char *)v11 + v15 + 1);
        do
          uint64_t v11 = (IPC::Decoder *)((char *)v11 - v15);
        while ((unint64_t)v11 >= v15);
      }
      while (v12 != v11);
      BOOL v16 = v6[14];
      uint64_t v11 = v6[15];
      long long v10 = v24;
      uint64_t v17 = v25[0];
      int v18 = (int)v25[1];
    }
    *((_OWORD *)v6 + 7) = v10;
    *(void *)&long long v24 = v16;
    *((void *)&v24 + 1) = v11;
    uint64_t result = (IPC::Decoder **)v6[16];
    v6[16] = v17;
    v25[0] = (WTF *)result;
    *((_DWORD *)v6 + 34) = v18;
    LODWORD(v25[1]) = v15;
    if (v16 > v11)
    {
      if (v11)
      {
        uint64_t v21 = 8 * (void)v11;
        do
        {
          uint64_t result = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](result) + 1;
          v21 -= 8;
        }
        while (v21);
        uint64_t result = (IPC::Decoder **)v25[0];
        BOOL v16 = (IPC::Decoder *)v24;
        LODWORD(v15) = v25[1];
      }
      if (v16 != (IPC::Decoder *)v15)
      {
        int v22 = &result[(void)v16];
        uint64_t v23 = 8 * v15 - 8 * (void)v16;
        do
        {
          int v22 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v22) + 1;
          v23 -= 8;
        }
        while (v23);
      }
    }
    else
    {
      if (v16 == v11) {
        goto LABEL_23;
      }
      uint64_t v19 = &result[(void)v16];
      uint64_t v20 = 8 * (void)v11 - 8 * (void)v16;
      do
      {
        uint64_t v19 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v19) + 1;
        v20 -= 8;
      }
      while (v20);
    }
    uint64_t result = (IPC::Decoder **)v25[0];
LABEL_23:
    if (result)
    {
      v25[0] = 0;
      LODWORD(v25[1]) = 0;
      return (IPC::Decoder **)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  unint64_t v15 = (unsigned __int8 *)(v8 + 24 * v14);
  int v16 = *v15;
  if (*v15)
  {
    uint64_t v25 = 0;
    int v26 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          unsigned int v27 = 0;
        }
        else {
          unsigned int v27 = *(_DWORD *)(v8 - 4);
        }
        char v24 = 0;
        uint64_t v23 = v8 + 24 * v27;
        goto LABEL_14;
      }
      if (v16 == 255) {
        uint64_t v25 = v15;
      }
      unsigned int v14 = (v14 + v26) & v10;
      unint64_t v15 = (unsigned __int8 *)(v8 + 24 * v14);
      int v16 = *v15;
      ++v26;
    }
    while (*v15);
    if (v25)
    {
      *uint64_t v25 = 0;
      *((void *)v25 + 1) = 0;
      *((_DWORD *)v25 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      LOBYTE(v11) = *a2;
      unint64_t v15 = v25;
    }
  }
  *unint64_t v15 = v11;
  v28[0] = 0;
  int v29 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>((uint64_t)v28, a3);
  uint64_t result = (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v15 + 8), (uint64_t)v28);
  if (v29 != -1) {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v29])(&v30, v28);
  }
  uint64_t v17 = *v6;
  if (*v6) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *v6;
  if (*v6) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21) {
      goto LABEL_13;
    }
LABEL_28:
    uint64_t result = (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::expand(v6, v15);
    unint64_t v15 = (unsigned __int8 *)result;
    uint64_t v19 = *v6;
    if (*v6) {
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    }
    else {
      LODWORD(v22) = 0;
    }
    goto LABEL_13;
  }
  if (3 * v22 <= 4 * v21) {
    goto LABEL_28;
  }
LABEL_13:
  uint64_t v23 = v19 + 24 * v22;
  char v24 = 1;
LABEL_14:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v24;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA10348[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1)
  {
    if (v3 != -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v3 != -1)
    {
LABEL_3:
      uint64_t v5 = result;
      return ((uint64_t (*)(uint64_t *))off_1EEA10338[v3])(&v5);
    }
    uint64_t v4 = result;
    uint64_t result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v2])(&v6);
    *(_DWORD *)(v4 + 8) = -1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOST_EEEDcSL_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__assign_alt[abi:sn180100]<1ul,std::unique_ptr<IPC::MessageReceiveQueue>,std::unique_ptr<IPC::MessageReceiveQueue>>(*a1, a2, a3);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__assign_alt[abi:sn180100]<1ul,std::unique_ptr<IPC::MessageReceiveQueue>,std::unique_ptr<IPC::MessageReceiveQueue>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[2];
  if (v5 == -1) {
    goto LABEL_4;
  }
  if (v5 != 1)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v9, result);
LABEL_4:
    char v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    void v4[2] = 1;
    return result;
  }
  char v7 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v7;
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v8();
  }
  return result;
}

uint64_t *IPC::MessageReceiveQueueMap::add(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  int v6 = 1;
  uint64_t result = IPC::MessageReceiveQueueMap::addImpl(a1, (uint64_t)&v5, a3);
  if (v6 != -1) {
    return (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v6])(&v7, &v5);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *IPC::MessageReceiveQueueMap::addImpl(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a3[1])
  {
    uint64_t v3 = *a3;
    char v9 = *a3;
    if (a3[16])
    {
      uint64_t v4 = *((void *)a3 + 1);
      v7[0] = v3;
      v7[1] = v4;
      return WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>(a1, (unsigned __int8 *)v7, a2, (uint64_t)v8);
    }
    else
    {
      return WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>(a1 + 1, &v9, a2, (uint64_t)v8);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t)(a1 + 2);
    return (uint64_t *)std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,void>(v6, a2);
  }
}

atomic_uchar *volatile **IPC::Connection::SyncMessageState::enqueueMatchingMessages(IPC::Connection&,IPC::MessageReceiveQueue &,IPC::ReceiverMatcher const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  long long v2 = 0uLL;
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a2 == v4)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    LODWORD(v7) = *(_DWORD *)(a2 + 24);
    unint64_t v8 = *(void *)a2;
  }
  else
  {
    do
    {
      uint64_t v14 = a2;
      uint64_t v15 = *(void *)(a2 + 16);
      unint64_t v16 = v3;
      uint64_t v17 = (atomic_uchar *volatile *)(v15 + 24 * v3);
      uint64_t v18 = a1;
      if (*v17 != *(atomic_uchar *volatile *)a1) {
        goto LABEL_10;
      }
      uint64_t v19 = *(void *)(v15 + 24 * v16 + 8);
      int v20 = *(unsigned __int8 **)(a1 + 8);
      if (!v20[1]) {
        goto LABEL_21;
      }
      unsigned int v21 = *(unsigned __int16 *)(v19 + 50);
      if (v21 >= 0xEF4) {
        unsigned int v21 = 3828;
      }
      if (*v20 == LOBYTE((&IPC::Detail::messageDescriptions)[3 * v21 + 2])
        && (!v20[16] || *((void *)v20 + 1) == *(void *)(v19 + 64)))
      {
LABEL_21:
        (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
      }
      else
      {
LABEL_10:
        WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((atomic_uchar *volatile **)&v23, v17);
      }
      a2 = v14;
      unint64_t v7 = *(unsigned int *)(v14 + 24);
      unint64_t v3 = v16 + v7 + 1;
      do
        v3 -= v7;
      while (v3 >= v7);
      a1 = v18;
    }
    while (v4 != v3);
    unint64_t v8 = *(void *)v14;
    unint64_t v3 = *(void *)(v14 + 8);
    long long v2 = v23;
    uint64_t v6 = v24;
    int v5 = DWORD2(v24);
  }
  *(_OWORD *)a2 = v2;
  char v9 = *(atomic_uchar *volatile ***)(a2 + 16);
  *(void *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = v5;
  if (v8 > v3)
  {
    unsigned int v22 = v7;
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v9, &v9[3 * v3]);
    int v10 = &v9[3 * v8];
    int v11 = &v9[3 * v22];
  }
  else
  {
    int v10 = &v9[3 * v8];
    int v11 = &v9[3 * v3];
  }
  uint64_t result = WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v10, v11);
  if (v9)
  {
    return (atomic_uchar *volatile **)WTF::fastFree((WTF *)v9, v13);
  }
  return result;
}

atomic_uchar *volatile **WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(atomic_uchar *volatile **result, atomic_uchar *volatile **a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    do
    {
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)v3 + 1);
      uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v3);
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned char *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    unsigned int v12 = (_DWORD *)(v9 + 32);
    do
    {
      *((unsigned char *)v12 - 16) = 0;
      *((void *)v12 - 1) = 0;
      _DWORD *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unsigned int v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    unint64_t v16 = (unsigned __int8 *)v6;
    do
    {
      if (*v16 != 255)
      {
        if (*v16)
        {
          uint64_t v18 = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::reinsert(*a1, v16);
          uint64_t v19 = *((unsigned int *)v16 + 4);
          if (v19 != -1) {
            ((void (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v19])(&v21, v16 + 8);
          }
          *((_DWORD *)v16 + 4) = -1;
          if (v16 == a3) {
            unsigned int v13 = v18;
          }
        }
        else
        {
          uint64_t v17 = *((unsigned int *)v16 + 4);
          if (v17 != -1) {
            ((void (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v17])(&v20, v16 + 8);
          }
          *((_DWORD *)v16 + 4) = -1;
        }
      }
      v16 += 24;
      --v15;
    }
    while (v15);
    goto LABEL_21;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

unsigned char *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::rehash(a1, v5, a2);
}

atomic_uchar *volatile **WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::copyRef@<X0>(atomic_uchar *volatile **result@<X0>, atomic_uchar *volatile **a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      uint64_t result = (atomic_uchar *volatile **)MEMORY[0x19972E8D0](v5);
    }
    ++*((void *)v5 + 1);
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      uint64_t result = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  *a2 = v3;
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebKit::LaunchGrant::~LaunchGrant((WebKit::LaunchGrant *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

unsigned int *WebKit::ProcessThrottler::didConnectToProcess(WebKit::ProcessThrottler *this, WebKit::AuxiliaryProcessProxy *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    }
    int v7 = 134218240;
    int v8 = this;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::didConnectToProcess", (uint8_t *)&v7, 0x12u);
  }
  if (*((void *)this + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x19864EEECLL);
  }
  *((unsigned char *)this + 189) = 1;
  uint64_t v5 = WebKit::ProcessThrottler::expectedThrottleState(this);
  uint64_t result = WebKit::ProcessThrottler::setThrottleState((unsigned int *)this, v5);
  if (!*((void *)this + 3) && (*((unsigned char *)this + 184) || *((unsigned char *)this + 187)))
  {
    __break(0xC471u);
    JUMPOUT(0x19864EF0CLL);
  }
  return result;
}

void WebKit::LaunchGrant::~LaunchGrant(WebKit::LaunchGrant *this)
{
  char v1 = (WebKit::LaunchGrant *)((char *)this + 8);
  WebKit::ExtensionCapabilityGrant::invalidate((WebKit::LaunchGrant *)((char *)this + 8));
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v1);
}

void sub_19864EF4C(_Unwind_Exception *a1)
{
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v1);
  _Unwind_Resume(a1);
}

void WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(WebKit::ExtensionCapabilityGrant *this)
{
  CFTypeRef cf = 0;
  WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)this, (uint64_t *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

void sub_19864EFD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  unsigned int v12 = *(const void **)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v12) {
    CFRelease(v12);
  }
  unsigned int v13 = *(WTF::StringImpl **)v10;
  *(void *)uint64_t v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ExtensionCapabilityGrant::invalidate(WebKit::ExtensionCapabilityGrant *this)
{
  CFTypeRef cf = 0;
  WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)this, (uint64_t *)&cf);
  CFTypeRef v1 = cf;
  if (cf)
  {
    CFRelease(v1);
  }
}

void sub_19864F07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      unint64_t v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            unsigned int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            unsigned int v21 = 0;
          }
          unint64_t v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          uint64_t v25 = v21 & ((v24 >> 31) ^ v24);
          if (*(void *)(v20 + 16 * v25))
          {
            int v32 = 1;
            do
              uint64_t v25 = (v25 + v32++) & v21;
            while (*(void *)(v20 + 16 * v25));
          }
          int v26 = (uint64_t *)(v20 + 16 * v25);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *int v26 = *v16;
          uint64_t v28 = v6 + 16 * v13;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v16 == a3) {
            uint64_t v14 = v26;
          }
        }
        else
        {
          uint64_t v18 = v6 + 16 * v13;
          uint64_t v19 = *(void *)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>@<X0>(uint64_t *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = *a2;
  uint64_t v11 = *((void *)a2 + 1);
  unsigned int v12 = 9 * ((~(v10 << 15) + v10) ^ ((~(v10 << 15) + v10) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  uint64_t v17 = v9 & ((0xD7862706ELL
                           * (unint64_t)(277951225 * (v13 ^ HIWORD(v13))
                                              + 95187966 * ((v16 >> 31) ^ v16))) >> 4);
  uint64_t v18 = (uint64_t *)(v8 + 32 * v17);
  int v19 = *(unsigned __int8 *)v18;
  uint64_t v20 = v18[1];
  if (*(unsigned char *)v18) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v20 == 0;
  }
  if (!v21)
  {
    uint64_t v30 = 0;
    int v31 = 1;
    do
    {
      if (v19 == v10 && v20 == v11)
      {
        char v29 = 0;
        uint64_t v28 = v8 + 32 * *(unsigned int *)(v8 - 4);
        goto LABEL_17;
      }
      if (v19 == 255) {
        uint64_t v30 = v18;
      }
      uint64_t v17 = (v17 + v31) & v9;
      uint64_t v18 = (uint64_t *)(v8 + 32 * v17);
      int v19 = *(unsigned __int8 *)v18;
      uint64_t v20 = v18[1];
      ++v31;
      if (*(unsigned char *)v18) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v20 == 0;
      }
    }
    while (!v32);
    if (v30)
    {
      *uint64_t v30 = 0;
      v30[1] = 0;
      *((_DWORD *)v30 + 6) = 0;
      v30[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      LOBYTE(v10) = *a2;
      uint64_t v11 = *((void *)a2 + 1);
      uint64_t v18 = v30;
    }
  }
  *(unsigned char *)uint64_t v18 = v10;
  v18[1] = v11;
  v33[0] = 0;
  int v34 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>((uint64_t)v33, a3);
  uint64_t result = (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v18 + 2), (uint64_t)v33);
  if (v34 != -1) {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v34])(&v35, v33);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_16;
    }
LABEL_30:
    uint64_t result = (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(v6, (unsigned __int8 *)v18);
    uint64_t v18 = result;
    uint64_t v24 = *v6;
    if (*v6) {
      unint64_t v27 = *(unsigned int *)(v24 - 4);
    }
    else {
      unint64_t v27 = 0;
    }
    goto LABEL_16;
  }
  if (3 * v27 <= 4 * v26) {
    goto LABEL_30;
  }
LABEL_16:
  uint64_t v28 = v24 + 32 * v27;
  char v29 = 1;
LABEL_17:
  *(void *)a4 = v18;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void WebKit::NetworkProcessProxy::connectionWillOpen(WebKit::NetworkProcessProxy *this, IPC::Connection *a2)
{
  if (WebKit::SecItemShimProxy::singleton(void)::once != -1) {
    dispatch_once(&WebKit::SecItemShimProxy::singleton(void)::once, &__block_literal_global_32);
  }
  uint64_t v3 = WebKit::SecItemShimProxy::singleton(void)::proxy;
  uint64_t v4 = *(void *)(WebKit::SecItemShimProxy::singleton(void)::proxy + 16) + 32;

  IPC::Connection::addMessageReceiver((uint64_t)a2, v4, v3, 0x8Bu, 0);
}

void WebKit::WebProcessProxy::connectionWillOpen(WebKit::WebProcessProxy *this, Connection *a2)
{
  if (!*((unsigned char *)a2 + 100)) {
    *(_WORD *)((char *)a2 + 99) = 256;
  }
  *((unsigned char *)a2 + 34) = 1;
}

void WebKit::GPUProcessProxy::connectionWillOpen(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    unsigned int v5 = this;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::connectionWillOpen:", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = a2;
  uint64_t v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v10 = v8 + 16;
    do
    {
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 24) = 0;
      *(void *)(v10 + 16) = 0;
      v10 += 32;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      unint64_t v14 = (unsigned __int8 *)(v4 + 32 * v11);
      int v15 = *v14;
      if (v15 != 255)
      {
        unsigned int v9 = (void *)*((void *)v14 + 1);
        if (*v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v9 == 0;
        }
        if (v16)
        {
          uint64_t v17 = v4 + 32 * v11;
          unsigned int v20 = *(_DWORD *)(v17 + 24);
          int v19 = (_DWORD *)(v17 + 24);
          uint64_t v18 = v20;
          if (v20 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v18])(&v39, v4 + 32 * v11 + 16);
          }
          *int v19 = -1;
        }
        else
        {
          uint64_t v21 = *a1;
          if (*a1) {
            unsigned int v22 = *(_DWORD *)(v21 - 8);
          }
          else {
            unsigned int v22 = 0;
          }
          int v23 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(v15, (uint64_t)v9);
          int v24 = 0;
          do
          {
            uint64_t v25 = v23 & v22;
            uint64_t v26 = v21 + 32 * v25;
            int v23 = ++v24 + v25;
            if (*(unsigned char *)v26) {
              BOOL v27 = 0;
            }
            else {
              BOOL v27 = *(void *)(v26 + 8) == 0;
            }
          }
          while (!v27);
          char v29 = (_DWORD *)(v26 + 24);
          uint64_t v28 = *(unsigned int *)(v26 + 24);
          if (v28 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v28])(&v40, v21 + 32 * v25 + 16);
          }
          *char v29 = -1;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v14;
          uint64_t v30 = v21 + 32 * v25;
          uint64_t v31 = v4 + 32 * v11;
          uint64_t v32 = v31 + 16;
          *(unsigned char *)(v30 + 16) = 0;
          *char v29 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(v30 + 16, v31 + 16);
          unsigned int v35 = *(_DWORD *)(v31 + 24);
          int v34 = (_DWORD *)(v31 + 24);
          uint64_t v33 = v35;
          if (v35 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v33])(&v41, v32);
          }
          *int v34 = -1;
          if (v14 == a3) {
            uint64_t v12 = v26;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(a1, v4, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::connectionToProcessMap(void)::map;
  if (WebKit::connectionToProcessMap(void)::map)
  {
    int v3 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 4);
    int v4 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t v7 = v5;
  uint64_t v8 = v5 + 16;
  if (a1) {
    bzero((void *)(v5 + 16), 16 * a1);
  }
  WebKit::connectionToProcessMap(void)::map = v8;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 8) = a1 - 1;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 16) = 0;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) = v4;
  if (v3)
  {
    unsigned int v9 = &qword_1EB35A000;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = (uint64_t *)(v2 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          uint64_t v15 = v9[219];
          if (v15) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          int v24 = (uint64_t *)(v15 + 16 * v22);
          uint64_t v25 = (unsigned int *)v24[1];
          v24[1] = 0;
          if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v6);
            unsigned int v9 = &qword_1EB35A000;
          }
          *int v24 = *v11;
          uint64_t v26 = v2 + 16 * v10;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          v24[1] = v27;
          unint64_t v14 = *(atomic_uint **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (!v14 || atomic_fetch_add(v14, 0xFFFFFFFF) != 1) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v13 = v2 + 16 * v10;
          unint64_t v14 = *(atomic_uint **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (!v14 || atomic_fetch_add(v14, 0xFFFFFFFF) != 1) {
            goto LABEL_24;
          }
        }
        atomic_store(1u, (unsigned int *)v14);
        uint64_t v28 = v9;
        WTF::fastFree((WTF *)v14, v6);
        unsigned int v9 = v28;
      }
LABEL_24:
      if (++v10 == v3) {
        goto LABEL_27;
      }
    }
  }
  if (v2)
  {
LABEL_27:
    WTF::fastFree((WTF *)(v2 - 16), v6);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  if (WebKit::connectionToProcessMap(void)::map
    && (int v0 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 4)) != 0)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) >= (2 * v0)));
  }
  else
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(8u);
  }
}

uint64_t WebKit::WebPageDebuggable::hasLocalDebugger(atomic_uchar *volatile *this)
{
  unsigned __int8 v5 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v2 = &unk_1EE9E39C0;
  v2[1] = this;
  v2[2] = this;
  v2[3] = &v5;
  int v4 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  return v5;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::commitStateAfterChildren(uint64_t a1, WebCore::ScrollingStateScrollingNode *a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    if (*((unsigned __int8 *)a2 + 16) > 1u) {
      return 0;
    }
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(v4, a2);
  }

  return MEMORY[0x1F41716F0](a1, a2);
}

uint64_t WebKit::defaultTextRecognitionInVideosEnabled(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB3592A8, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&qword_1EB3592A8, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultTextRecognitionInVideosEnabled(void)::$_0 &&>>);
  }
  return _MergedGlobals_62;
}

BOOL WebKit::defaultCSSOMViewScrollingAPIEnabled(WebKit *this)
{
  {
    int v1 = WebKit::defaultCSSOMViewScrollingAPIEnabled(void)::result;
  }
  else
  {
    if (WebCore::IOSApplication::isIMDb(this)) {
      int v1 = WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
    }
    else {
      int v1 = 0;
    }
    WebKit::defaultCSSOMViewScrollingAPIEnabled(void)::uint64_t result = v1;
  }
  return v1 == 0;
}

uint64_t WebKit::defaultAutomaticLiveResizeEnabled(WebKit *this)
{
    return WebKit::defaultAutomaticLiveResizeEnabled(void)::enabled != 0;
  uint64_t result = PAL::deviceHasIPadCapability(this);
  if (result) {
    uint64_t result = _os_feature_enabled_impl();
  }
  WebKit::defaultAutomaticLiveResizeEnabled(void)::enabled = result;
  return result;
}

BOOL WebKit::defaultLiveRangeSelectionEnabled(WebKit *this)
{
  {
    uint64_t v1 = WebKit::defaultLiveRangeSelectionEnabled(void)::enableForAllApps;
    if (WebKit::defaultLiveRangeSelectionEnabled(void)::enableForAllApps) {
      return 1;
    }
  }
  else
  {
    uint64_t v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultLiveRangeSelectionEnabled(void)::enableForAllApps = v1;
    if (v1) {
      return 1;
    }
  }
  return (WebCore::IOSApplication::isGmail((WebCore::IOSApplication *)v1) & 1) == 0;
}

uint64_t WebKit::defaultVisualTranslationEnabled(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB3592B0, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&qword_1EB3592B0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultVisualTranslationEnabled(void)::$_0 &&>>);
  }
  return byte_1EB3592A1;
}

uint64_t WebKit::defaultRemoveBackgroundEnabled(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB3592B8, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&qword_1EB3592B8, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultRemoveBackgroundEnabled(void)::$_0 &&>>);
  }
  return byte_1EB3592A2;
}

unint64_t WebKit::PlatformCALayerRemote::setBorderColor(int8x16_t *this, const WebCore::Color *a2, const Color *a3)
{
  unint64_t result = *(void *)a2;
  unint64_t v5 = this[40].u64[0];
  if (((result | v5) & 0x8000000000000) != 0)
  {
    unint64_t result = WebCore::outOfLineComponentsEqual(result, v5, a3);
    if (result) {
      return result;
    }
  }
  else if (result == v5)
  {
    return result;
  }
  unint64_t result = WebCore::Color::operator=();
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x400000uLL));
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_E3__1vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BFE38;
  int v3 = (void *)*((void *)this + 3);
  if (v3) {

  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4) {

  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D0160;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1, id a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a2);
  unint64_t v5 = (objc_class *)MEMORY[0x1E4F14590];
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    string = xpc_dictionary_get_string(a2, "message-name");
    if (!string)
    {
      unsigned __int16 v42 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)bufsize = 0;
      uint64_t v43 = "XPCServiceEventHandler: 'message-name' is not present in the XPC dictionary";
      goto LABEL_65;
    }
    uint64_t v7 = string;
    if (!strcmp(string, "bootstrap"))
    {
      if (xpc_dictionary_get_BOOL(a2, "disable-logging"))
      {
        os_trace_set_mode();
      }
      else
      {
        os_trace_set_mode();
        memset(bufsize, 32, sizeof(bufsize));
        char v54 = 0;
        unint64_t v18 = qword_1EB358960;
        if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = bufsize;
          _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "Initialized logd %s", buf, 0xCu);
        }
      }
      xpc_object_t value = xpc_dictionary_get_value(a2, "OverrideLanguages");
      if (value)
      {
        *(void *)bufsize = 0;
        *(void *)&bufsize[8] = 0;
        unsigned int v9 = (void *)MEMORY[0x199741920]();
        uint64_t v10 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
        *uint64_t v10 = MEMORY[0x1E4F14398];
        v10[1] = 50331650;
        void v10[2] = _ZZN3WTF8BlockPtrIFbmPU24objcproto13OS_xpc_object8NSObjectEE12fromCallableIZZN6WebKit22XPCServiceEventHandlerES3_EUb_E3__0EES5_T_ENUlPvmS3_E_8__invokeESA_mS3_;
        uint64_t v10[3] = &_ZZN3WTF8BlockPtrIFbmPU24objcproto13OS_xpc_object8NSObjectEE12fromCallableIZZN6WebKit22XPCServiceEventHandlerES3_EUb_E3__0EES5_T_E10descriptor;
        v10[4] = bufsize;
        xpc_array_apply(value, v10);
        _Block_release(v10);
        if (_MergedGlobals_63)
        {
          if (HIDWORD(qword_1EB3592E0))
          {
            __break(0xC471u);
            JUMPOUT(0x19865081CLL);
          }
          unsigned int v12 = qword_1EB3592E0;
          uint64_t v13 = qword_1EB3592D8;
        }
        else
        {
          uint64_t v13 = 0;
          unsigned int v12 = 0;
          qword_1EB3592D8 = 0;
          qword_1EB3592E0 = 0;
          _MergedGlobals_63 = 1;
        }
        qword_1EB3592D8 = *(void *)bufsize;
        *(void *)bufsize = v13;
        qword_1EB3592E0 = *(void *)&bufsize[8];
        *(void *)&bufsize[8] = v12;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)bufsize, v11);
      }
      if (os_variant_allows_internal_security_policies() && analytics_send_event_lazyPtr())
      {
        *(_DWORD *)bufsize = 1025;
        if (_NSGetExecutablePath(byte_1EB3592E8, (uint32_t *)bufsize) == -1)
        {
          uint64_t v50 = byte_1EB3592E8;
          uint64_t v51 = *(unsigned int *)bufsize;
          unsigned __int16 v49 = "void register_for_dlsym_callbacks()";
          WTFLogAlways();
        }
        else
        {
          unsigned __int16 v49 = byte_1EB3592E8;
          WTFLogAlways();
          _dyld_register_dlsym_notifier();
        }
      }
      xpc_object_t v25 = xpc_dictionary_get_value(a2, "ContainerEnvironmentVariables");
      xpc_dictionary_apply(v25, &__block_literal_global_32_1);
      uint64_t v26 = xpc_dictionary_get_string(a2, "service-name");
      uint64_t v27 = v26;
      if (v26)
      {
        if (!strncmp(v26, "com.apple.WebKit.WebContent", 0x1BuLL))
        {
          uint64_t v28 = @"WebContentServiceInitializer";
          goto LABEL_43;
        }
        if (!strcmp(v27, "com.apple.WebKit.Networking"))
        {
          uint64_t v28 = @"NetworkServiceInitializer";
          goto LABEL_43;
        }
        if (!strcmp(v27, "com.apple.WebKit.GPU"))
        {
          uint64_t v28 = @"GPUServiceInitializer";
          goto LABEL_43;
        }
        if (!strcmp(v27, "com.apple.WebKit.Model"))
        {
          uint64_t v28 = @"ModelServiceInitializer";
LABEL_43:
          BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.WebKit");
          FunctionPointerForName = CFBundleGetFunctionPointerForName(BundleWithIdentifier, v28);
          if (FunctionPointerForName)
          {
            replCGFloat y = xpc_dictionary_create_reply(a2);
            xpc_dictionary_set_string(reply, "message-name", "process-finished-launching");
            remote_connection = xpc_dictionary_get_remote_connection(a2);
            xpc_connection_send_message(remote_connection, reply);
            int v33 = xpc_dictionary_dup_fd(a2, "stdout");
            if (v33 != -1) {
              dup2(v33, 1);
            }
            int v34 = (WTF::WorkQueue *)xpc_dictionary_dup_fd(a2, "stderr");
            if (v34 != -1) {
              int v34 = (WTF::WorkQueue *)dup2((int)v34, 2);
            }
            uint64_t v35 = WTF::WorkQueue::main(v34);
            *(void *)bufsize = FunctionPointerForName;
            *(void *)&bufsize[8] = a2;
            if (a2) {
              id v36 = a2;
            }
            uint64_t v37 = *(void **)(a1 + 32);
            *(void *)&bufsize[16] = v37;
            if (v37) {
              id v38 = v37;
            }
            char v39 = (void *)WTF::fastMalloc((WTF *)0x20);
            *char v39 = &unk_1EE9BFE38;
            v39[1] = FunctionPointerForName;
            *(void *)&bufsize[8] = 0;
            v39[2] = a2;
            v39[3] = v37;
            if (v37) {
              id v40 = v37;
            }
            *(void *)buf = v39;
            (*(void (**)(uint64_t, uint8_t *))(*(void *)v35 + 24))(v35, buf);
            uint64_t v41 = *(void *)buf;
            *(void *)buf = 0;
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
            }
            if (v37) {

            }
            if (reply) {
          }
            }
          else
          {
            int v46 = off_1EB358938;
            if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
            {
              uint64_t v48 = [(__CFString *)v28 UTF8String];
              *(_DWORD *)bufsize = 136315138;
              *(void *)&bufsize[4] = v48;
              _os_log_fault_impl(&dword_1985F2000, v46, OS_LOG_TYPE_FAULT, "Exiting: Unable to find entry point in WebKit.framework with name: %s", bufsize, 0xCu);
            }
            objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CAC0], "mainRunLoop", v49, v50, v51), "performBlock:", &__block_literal_global_53_0);
          }
          return;
        }
        uint64_t v47 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_DWORD *)bufsize = 136446210;
        *(void *)&bufsize[4] = v27;
        uint64_t v43 = "XPCServiceEventHandler: Unexpected 'service-name': %{public}s";
        int v44 = v47;
        uint32_t v45 = 12;
LABEL_66:
        _os_log_error_impl(&dword_1985F2000, v44, OS_LOG_TYPE_ERROR, v43, bufsize, v45);
        return;
      }
      unsigned __int16 v42 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)bufsize = 0;
      uint64_t v43 = "XPCServiceEventHandler: 'service-name' is not present in the XPC dictionary";
LABEL_65:
      int v44 = v42;
      uint32_t v45 = 2;
      goto LABEL_66;
    }
    if (object_getClass(a2) != v5)
    {
      __break(0xC471u);
      JUMPOUT(0x19865083CLL);
    }
    if (!strcmp(v7, "xpc-endpoint-launch-services-database-message"))
    {
      unint64_t v14 = (_xpc_endpoint_s *)xpc_dictionary_get_value(a2, "xpc-endpoint-launch-services-database");
      if (v14)
      {
        uint64_t v15 = v14;
        int v16 = object_getClass(v14);
        if (v16 == (WebKit::LaunchServicesDatabaseManager *)MEMORY[0x1E4F145A0])
        {
          unint64_t v17 = WebKit::LaunchServicesDatabaseManager::singleton(v16);
          WebKit::XPCEndpointClient::setEndpoint((uint64_t)v17, v15);
        }
      }
    }
  }
  else
  {
    unint64_t v19 = Class;
    unsigned int v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)bufsize = 136446210;
      *(void *)&bufsize[4] = xpc_type_get_name(v19);
      _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "XPCServiceEventHandler: Received unexpected XPC event type: %{public}s", bufsize, 0xCu);
    }
    if (v19 == (const _xpc_type_s *)MEMORY[0x1E4F145A8])
    {
      id v21 = (id)MEMORY[0x1E4F14528];
      if (a2 == (id)MEMORY[0x1E4F14528] || a2 == (id)MEMORY[0x1E4F14550])
      {
        uint64_t v23 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v24 = "XPC_ERROR_TERMINATION_IMMINENT";
          if (a2 == v21) {
            int v24 = "XPC_ERROR_CONNECTION_INVALID";
          }
          *(_DWORD *)bufsize = 136446210;
          *(void *)&bufsize[4] = v24;
          _os_log_fault_impl(&dword_1985F2000, v23, OS_LOG_TYPE_FAULT, "Exiting: Received XPC event type: %{public}s", bufsize, 0xCu);
        }
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CAC0], "mainRunLoop"), "performBlock:", &__block_literal_global_16);
      }
    }
  }
}

void sub_198650864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_EN3__1D1Ev(uint64_t a1)
{
  char v2 = *(void **)(a1 + 16);
  if (v2) {

  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3) {

  }
  return a1;
}

uint64_t dlsym_callback_notify(const char *a1)
{
  uint32_t bufsize = 1025;
  if (_NSGetExecutablePath(byte_1EB3592E8, &bufsize) == -1) {
    return WTFLogAlways();
  }
  char v2 = (uint64_t (*)(const char *, void *))analytics_send_event_lazyPtr();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = ___ZL21dlsym_callback_notifyPKc_block_invoke;
  v4[3] = &__block_descriptor_40_e30___NSObject_OS_xpc_object__8__0l;
  unsigned char v4[4] = a1;
  return v2("com.apple.dlsym_callback.webkit", v4);
}

uint64_t analytics_send_event_lazyPtr(void)
{
  if (byte_1EB3592C1 != 1)
  {
    if (byte_1EB3592C2 == 1)
    {
      uint64_t v1 = (void *)qword_1EB3592D0;
    }
    else
    {
      uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
      if (!v1)
      {
        uint64_t result = 21;
        __break(0xC471u);
        return result;
      }
      qword_1EB3592D0 = (uint64_t)v1;
      byte_1EB3592C2 = 1;
    }
    uint64_t result = (uint64_t)dlsym(v1, "analytics_send_event_lazy");
    qword_1EB3592C8 = result;
    byte_1EB3592C1 = 1;
    return result;
  }
  return qword_1EB3592C8;
}

uint64_t WTF::RunLoop::Timer::fired(WTF::RunLoop::Timer *this)
{
  return WTF::Function<void ()(void)>::operator()();
}

uint64_t WTF::Function<void ()(void)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  return *(void *)v0;
}

WebCore::Page *WebKit::WebPage::setCanStartMediaTimerFired(WebKit::WebPage *this)
{
  uint64_t result = (WebCore::Page *)*((void *)this + 6);
  if (result) {
    return (WebCore::Page *)WebCore::Page::setCanStartMedia(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebPage::*&)(void),WebKit::WebPage*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  char v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_198650C6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,BOOL>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,BOOL>>::operator()[abi:sn180100](v2, v3);
  }
}

void sub_198651524(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::FocusedElementInformation *WebKit::FocusedElementInformation::FocusedElementInformation(WebKit::FocusedElementInformation *this)
{
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 12) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_1994F73F0;
  *(_OWORD *)((char *)this + 120) = xmmword_1994F7400;
  *((unsigned char *)this + 136) = 0;
  *(void *)((char *)this + 148) = 0;
  *(void *)((char *)this + 140) = 0;
  *((unsigned char *)this + 156) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 46) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 54) = -1;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((_WORD *)this + 124) = 0;
  WTF::URL::URL((WebKit::FocusedElementInformation *)((char *)this + 256));
  *((_WORD *)this + 148) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  *((_WORD *)this + 164) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = 0;
  *((_WORD *)this + 180) = 0;
  *((unsigned char *)this + 362) = 1;
  *(_DWORD *)((char *)this + 363) = 0;
  *(_WORD *)((char *)this + 367) = 0;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  return this;
}

void sub_19865164C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v7 = *(WTF::StringImpl **)(v2 + 240);
  *(void *)(v2 + 240) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *v5;
  *unint64_t v5 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  uint64_t v10 = *v4;
  *uint64_t v4 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

double WebKit::WKSelectionDrawingInfo::WKSelectionDrawingInfo(WebKit::WKSelectionDrawingInfo *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

WebKit::FrameInfoData *WebKit::FrameInfoData::FrameInfoData(WebKit::FrameInfoData *this)
{
  return this;
}

{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 1) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)((char *)this + 8));
  WebCore::SecurityOriginData::SecurityOriginData((WebKit::FrameInfoData *)((char *)this + 208));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 30);
  WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::ProcessQualified((void *)this + 31);
  std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::optional[abi:sn180100]((unsigned char *)this + 264);
  *((unsigned char *)this + 292) = 0;
  *((unsigned char *)this + 293) = 0;
  return this;
}

unsigned char *std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::BufferSource,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[16] = 0;
  return result;
}

WebCore::SecurityOriginData *WebCore::SecurityOriginData::SecurityOriginData(WebCore::SecurityOriginData *this)
{
  return this;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::variant[abi:sn180100]<true,0>(this);
  return this;
}

_DWORD *std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::variant[abi:sn180100]<true,0>(_DWORD *a1)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS6_33SupportsObjectIdentifierNullStateE1EEEEEEECI1NS0_6__baseILNS0_6_TraitE1EJS4_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS6_33SupportsObjectIdentifierNullStateE1EEEEEEECI1NS0_6__baseILNS0_6_TraitE1EJS4_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS6_33SupportsObjectIdentifierNullStateE1EEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__base[abi:sn180100]<0ul>(_DWORD *a1)
{
  a1[6] = 0;
  return a1;
}

void *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__union[abi:sn180100]<>(void *a1)
{
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<>(a1);
  return a1;
}

void *std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<>(void *a1)
{
  return a1;
}

{
  memset(a1, 0, 0x18uLL);
  WebCore::SecurityOriginData::Tuple::Tuple((WebCore::SecurityOriginData::Tuple *)a1);
  return a1;
}

WebCore::SecurityOriginData::Tuple *WebCore::SecurityOriginData::Tuple::Tuple(WebCore::SecurityOriginData::Tuple *this)
{
  return this;
}

{
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(this);
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1);
  std::optional<unsigned short>::optional[abi:sn180100]((unsigned char *)this + 16);
  return this;
}

unsigned char *std::optional<unsigned short>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<unsigned short,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<unsigned short,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<unsigned short,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<unsigned short,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<unsigned short,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<unsigned short,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<unsigned short,true>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[2] = 0;
  return result;
}

void *WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::ProcessQualified(void *a1)
{
  return a1;
}

{
  WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::ObjectIdentifierGeneric(a1);
  WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::ObjectIdentifierGeneric(a1 + 1);
  return a1;
}

StringImpl *WebCore::ResourceRequest::ResourceRequest(StringImpl *this)
{
  return this;
}

{
  String v3[6];

  v3[5].m_impl.m_ptr = this;
  WTF::URL::URL((WTF::URL *)v3);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)this, v3, 0);
  WTF::URL::~URL((WTF::URL *)v3);
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable((void *)this + 24);
  return this;
}

WebKit::WebAuthenticationRequestData *WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData(WebKit::WebAuthenticationRequestData *this)
{
  *((unsigned char *)this + 336) = 0;
  *((void *)this + 43) = 0;
  std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100]((unsigned char *)this + 352);
  WebKit::FrameInfoData::FrameInfoData((WebKit::WebAuthenticationRequestData *)((char *)this + 384));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 85);
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 86);
  std::optional<WebCore::MediationRequirement>::optional[abi:sn180100]((unsigned char *)this + 696);
  std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100]((unsigned char *)this + 704);
  return this;
}

{
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData(this);
  return this;
}

unsigned char *std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::optional<WebCore::MediationRequirement>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::MediationRequirement,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>(uint64_t a1)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI1NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_((_DWORD *)(a1 + 8));
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::MediationRequirement,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::MediationRequirement,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::SecurityOriginData,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::MediationRequirement,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::SecurityOriginData,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::GlobalFrameIdentifier,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::GlobalFrameIdentifier,true>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[24] = 0;
  return result;
}

unsigned char *std::__optional_copy_base<WebCore::MediationRequirement,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::MediationRequirement,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::MediationRequirement,true>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[1] = 0;
  return result;
}

unsigned char *std::__optional_copy_base<WebCore::SecurityOriginData,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::SecurityOriginData,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::SecurityOriginData,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[32] = 0;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI1NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  return a1;
}

_DWORD *std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__base[abi:sn180100]<0ul>(_DWORD *a1)
{
  a1[74] = 0;
  return a1;
}

void *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__union[abi:sn180100]<>(void *a1)
{
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<>(a1);
  return a1;
}

void *std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<>(void *a1)
{
  return a1;
}

{
  memset(a1, 0, 0x128uLL);
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)a1);
  return a1;
}

WebCore::PublicKeyCredentialCreationOptions *WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(WebCore::PublicKeyCredentialCreationOptions *this)
{
  return this;
}

{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(this);
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 32));
  WebCore::BufferSource::BufferSource((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 72));
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88);
  std::optional<unsigned int>::optional[abi:sn180100]((unsigned char *)this + 104);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112);
  std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::optional[abi:sn180100]((unsigned char *)this + 128);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]((unsigned char *)this + 144);
  return this;
}

void *WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::ObjectIdentifierGeneric(void *a1)
{
  return a1;
}

void *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(void *a1)
{
  return a1;
}

void *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(void *result)
{
  *double result = 0;
  return result;
}

void WTF::URL::~URL(WTF::URL *this)
{
}

{
  WTF::StringImpl *v1;
  void v2[4];
  WTF::StringImpl *v3;

  v2[1] = this;
  v2[0] = 0;
  v2[3] = this;
  v2[2] = v2;
  uint64_t v3 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v3) {
    WTF::StringImpl::deref(v3, v1);
  }
}

uint64_t WebCore::ResourceRequestBase::ResourceRequestBase(uint64_t a1, const String *a2, char a3)
{
  WebCore::ResourceRequestBase::RequestData::RequestData(a1, a2, a3);
  uint64_t v4 = (WTF *)WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)(a1 + 152));
  unint64_t v5 = (const String *)WTF::emptyString(v4);
  WTF::String::String((WTF::String *)(a1 + 160), v5);
  *(void *)(a1 + 168) = 0;
  std::optional<int>::optional[abi:sn180100]((unsigned char *)(a1 + 176));
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a1 + 184) & 0xFE | 1;
  *(unsigned char *)(a1 + 184) &= ~2u;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a1 + 184) & 0xFB | 4;
  *(unsigned char *)(a1 + 184) &= ~8u;
  *(unsigned char *)(a1 + 184) &= ~0x10u;
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a1 + 148) & 0xFD | 2;
  return a1;
}

WTF::String *WTF::String::String(WTF::String *this, const String *a2)
{
  return this;
}

{
  StringImpl *m_ptr;

  m_ptr = a2->m_impl.m_ptr;
  if (a2->m_impl.m_ptr) {
    WTF::StringImpl::ref(m_ptr);
  }
  *(void *)this = m_ptr;
  return this;
}

unsigned char *std::optional<int>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<int,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<int,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<int,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<int,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<int,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<int,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<int,true>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[4] = 0;
  return result;
}

uint64_t WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, const String *a2, char a3)
{
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  WTF::URL::URL((WTF::URL *)a1, a2);
  WTF::URL::URL((WTF::URL *)(a1 + 40));
  *(void *)(a1 + 80) = *MEMORY[0x1E4FB64E0];
  uint64_t v4 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"GET", (const char *)3);
  WTF::String::String((uint64_t *)(a1 + 88), v4, v5);
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 96));
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 128);
  *(unsigned char *)(a1 + 144) = a3;
  *(unsigned char *)(a1 + 145) = 0;
  *(unsigned char *)(a1 + 146) = 1;
  *(unsigned char *)(a1 + 147) = 0;
  *(unsigned char *)(a1 + 148) &= ~1u;
  *(unsigned char *)(a1 + 148) &= ~2u;
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a1 + 148) & 0xFB | 4;
  *(unsigned char *)(a1 + 148) &= ~8u;
  *(unsigned char *)(a1 + 148) &= ~0x10u;
  *(unsigned char *)(a1 + 148) &= ~0x20u;
  *(unsigned char *)(a1 + 148) &= ~0x40u;
  *(unsigned char *)(a1 + 148) &= ~0x80u;
  return a1;
}

WTF::URL *WTF::URL::URL(WTF::URL *this, const String *a2)
{
  return this;
}

{
  WTF::String::String(this, a2);
  *((String *)this + 1) = a2[1];
  *((String *)this + 2) = a2[2];
  *((String *)this + 3) = a2[3];
  *((String *)this + 4) = a2[4];
  return this;
}

uint64_t WTF::StringLiterals::operator"" _s(WTF::ASCIILiteral *a1, const char *a2)
{
  return WTF::ASCIILiteral::fromLiteralUnsafe(a1, a2);
}

uint64_t WTF::ASCIILiteral::fromLiteralUnsafe(WTF::ASCIILiteral *this, const char *a2)
{
  WTF::ASCIILiteral::ASCIILiteral((WTF::ASCIILiteral *)&v3, (const char *)this);
  return v3;
}

WTF::ASCIILiteral *WTF::ASCIILiteral::ASCIILiteral(WTF::ASCIILiteral *this, const char *a2)
{
  return this;
}

{
  size_t v4;

  uint64_t v4 = std::char_traits<char>::length[abi:sn180100](a2);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(this, (uint64_t)a2, v4 + 1);
  return this;
}

size_t std::char_traits<char>::length[abi:sn180100](const char *a1)
{
  return std::__constexpr_strlen[abi:sn180100](a1);
}

size_t std::__constexpr_strlen[abi:sn180100](const char *a1)
{
  return strlen(a1);
}

uint64_t WTF::emptyString(WTF *this)
{
  return MEMORY[0x1E4F30980];
}

void *WTF::StringImpl::createWithoutCopying@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void v5[2] = a3;
  v5[1] = a2;
  v5[0] = a1;
  if (std::span<char const,18446744073709551615ul>::empty[abi:sn180100]((uint64_t)v5)) {
    return WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::Ref(a3, MEMORY[0x1E4F30960]);
  }
  else {
    return (void *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
}

uint64_t *WTF::String::String(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return WTF::String::String(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8[2];
  long long v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  *(void *)&unsigned int v9 = a2;
  *((void *)&v9 + 1) = a3;
  v8[1] = (uint64_t)a1;
  uint64_t v10 = a1;
  uint64_t v7 = 0;
  if (WTF::ASCIILiteral::isNull((WTF::ASCIILiteral *)&v9))
  {
    unsigned int v12 = a1;
    uint64_t v11 = 0;
    unint64_t v18 = a1;
    unint64_t v17 = 0;
    *a1 = 0;
  }
  else
  {
    int v16 = v8;
    uint64_t v15 = v9;
    uint64_t v4 = WTF::ASCIILiteral::span8((WTF::ASCIILiteral *)&v15);
    unint64_t v14 = v5;
    uint64_t v13 = v4;
    WTF::StringImpl::createWithoutCopying(v4, v5, v8);
    uint64_t v7 = 1;
    WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, v8);
  }
  if (v7) {
    WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(v8);
  }
  return v10;
}

BOOL WTF::ASCIILiteral::isNull(WTF::ASCIILiteral *this)
{
  return std::span<char const,18446744073709551615ul>::empty[abi:sn180100]((uint64_t)this);
}

BOOL std::span<char const,18446744073709551615ul>::empty[abi:sn180100](uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t WTF::ASCIILiteral::span8(WTF::ASCIILiteral *this)
{
  uint64_t v2 = WTF::ASCIILiteral::characters(this);
  uint64_t v3 = WTF::bitwise_cast<unsigned char const*,char const*>(v2);
  uint64_t v4 = WTF::ASCIILiteral::length(this);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(&v6, v3, v4);
  return v6;
}

void *std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;

  std::to_address[abi:sn180100]<char const>();
  *a1 = v4;
  a1[1] = a3;
  return a1;
}

uint64_t WTF::ASCIILiteral::length(WTF::ASCIILiteral *this)
{
  if (std::span<char const,18446744073709551615ul>::empty[abi:sn180100]((uint64_t)this)) {
    return 0;
  }
  else {
    return std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)this) - 1;
  }
}

uint64_t std::span<char const,18446744073709551615ul>::size[abi:sn180100](uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  *a1 = WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  return a1;
}

uint64_t *WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  WTF::StringImpl *v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  WTF::StringImpl *v9;

  unint64_t v5 = a1;
  uint64_t v6 = a1;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  uint64_t v8 = a1;
  uint64_t v7 = &v3;
  uint64_t v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
  {
    unsigned int v9 = v4;
    WTF::StringImpl::deref(v4, v1);
  }
  return v6;
}

uint64_t WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(uint64_t *a1)
{
  v2[2] = a1;
  v2[0] = 0;
  void v2[4] = a1;
  v2[3] = v2;
  return std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
}

uint64_t WTF::bitwise_cast<unsigned char const*,char const*>(uint64_t a1)
{
  uint64_t __src = a1;
  memcpy(&v2, &__src, sizeof(v2));
  return v2;
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1)
{
  return a1;
}

uint64_t WTF::VectorBuffer<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1)
{
  return a1;
}

uint64_t WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(uint64_t result)
{
  *(void *)double result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

unsigned char *std::optional<unsigned int>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<unsigned int,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

unsigned char *std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<unsigned int,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<unsigned int,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<unsigned int,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<unsigned int,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[144] = 0;
  return result;
}

unsigned char *std::__optional_copy_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[6] = 0;
  return result;
}

WebCore::PublicKeyCredentialCreationOptions::RpEntity *WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(WebCore::PublicKeyCredentialCreationOptions::RpEntity *this)
{
  return this;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(this);
  std::optional<WTF::String>::optional[abi:sn180100]((unsigned char *)this + 16);
  return this;
}

unsigned char *std::optional<WTF::String>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WTF::String,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WTF::String,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WTF::String,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WTF::String,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WTF::String,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *double result = 0;
  result[8] = 0;
  return result;
}

WebCore::PublicKeyCredentialCreationOptions::UserEntity *WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(WebCore::PublicKeyCredentialCreationOptions::UserEntity *this)
{
  return this;
}

{
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(this);
  return this;
}

WebCore::PublicKeyCredentialCreationOptions::Entity *WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(WebCore::PublicKeyCredentialCreationOptions::Entity *this)
{
  return this;
}

WebCore::BufferSource *WebCore::BufferSource::BufferSource(WebCore::BufferSource *this)
{
  return this;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<true,0>((uint64_t)this);
  return this;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<true,0>(uint64_t a1)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100]<0ul>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<>(void *a1)
{
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(a1);
  return a1;
}

void *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(void *a1)
{
  return a1;
}

void *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(void *result)
{
  *double result = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *this)
{
  if (*(unsigned int *)(result + 8) >= (unint64_t)this) {
    return 1;
  }
  int v2 = (int)this;
  if (!((unint64_t)this >> 32))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    size_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc(this);
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(WTF::ASCIILiteral *a1)
{
  return WTF::ASCIILiteral::characters(a1);
}

uint64_t WTF::ASCIILiteral::characters(WTF::ASCIILiteral *this)
{
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)this);
}

uint64_t std::span<char const,18446744073709551615ul>::data[abi:sn180100](uint64_t a1)
{
  return *(void *)a1;
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity(uint64_t a1)
{
  return WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity(a1);
}

uint64_t WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + a1[3];
}

void WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity(uint64_t a1)
{
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void *WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(const void *a1, uint64_t a2, void *a3)
{
  return WTF::VectorMover<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(a1, a2, a3);
}

uint64_t WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(uint64_t result, WTF::FastMalloc *a2)
{
  if (a2)
  {
    if (*(WTF::FastMalloc **)result == a2)
    {
      *(void *)double result = 0;
      *(_DWORD *)(result + 8) = 0;
    }
    return WTF::FastMalloc::free(a2, a2);
  }
  return result;
}

uint64_t WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, WTF::FastMalloc *a2)
{
  if (!WTF::isValidCapacityForVector<unsigned char>((unint64_t)a2))
  {
    __break(0xC471u);
    JUMPOUT(0x198654698);
  }
  uint64_t v3 = WTF::FastMalloc::malloc(a2);
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = v3;
  return 1;
}

uint64_t WTF::FastMalloc::malloc(WTF::FastMalloc *this)
{
  return WTF::fastMalloc(this);
}

BOOL WTF::isValidCapacityForVector<unsigned char>(unint64_t a1)
{
  return a1 <= std::numeric_limits<unsigned int>::max[abi:sn180100]();
}

uint64_t std::numeric_limits<unsigned int>::max[abi:sn180100]()
{
  return std::__libcpp_numeric_limits<unsigned int,true>::max[abi:sn180100]();
}

uint64_t std::__libcpp_numeric_limits<unsigned int,true>::max[abi:sn180100]()
{
  return 0xFFFFFFFFLL;
}

void *WTF::VectorMover<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(const void *a1, uint64_t a2, void *a3)
{
  return memcpy(a3, a1, a2 - (void)a1);
}

void *WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  *(void *)((char *)a1 + 13) = 0;
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity((uint64_t)a1, a3);
  if (a3)
  {
    uint64_t v6 = a2 + 32 * a3;
    do
    {
      WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<std::pair<WTF::String,std::optional<WTF::String>> const&>((uint64_t)a1, (WTF::StringImpl **)a2, (void *)(a2 + 8), (uint64_t)v8);
      a2 += 32;
    }
    while (a2 != v6);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<std::pair<WTF::String,std::optional<WTF::String>> const&>@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = a3;
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if (20 * v7 >= 19 * (unint64_t)v8 || (v8 <= 2 * (int)v7 ? (BOOL v9 = *(unsigned char *)(a1 + 20) == 0) : (BOOL v9 = 1), !v9))
  {
    if (v8) {
      unsigned int v24 = 2 * v8;
    }
    else {
      unsigned int v24 = 8;
    }
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a1, v24);
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v10 = v8 - 1;
  int v11 = *(_DWORD *)(a1 + 16);
  unsigned int v12 = *((_DWORD *)*a2 + 4);
  if (v12 >= 0x100) {
    unsigned int v13 = v12 >> 8;
  }
  else {
    unsigned int v13 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v14 = (v13 ^ v11) & v10;
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)a1 + 32 * v14;
  unint64_t v17 = *(WTF **)v16;
  if (*(void *)v16)
  {
    unsigned int v21 = 0;
    while (1)
    {
      unsigned int v22 = *((_DWORD *)v17 + 4);
      if (v22 >= 0x100)
      {
        unsigned int v23 = v22 >> 8;
      }
      else
      {
        unsigned int v38 = v21;
        unsigned int v23 = WTF::StringImpl::hashSlowCase(v17);
        unsigned int v21 = v38;
      }
      if (v21 > ((v14 + v8 - ((v23 ^ v11) & v10)) & v10)) {
        break;
      }
      if (v23 == v13)
      {
        unsigned int v40 = v21;
        uint64_t result = WTF::equal(*(WTF **)v16, *a2, (const WTF::StringImpl *)a3);
        uint64_t v15 = *(void *)a1;
        if (result)
        {
          char v19 = 0;
          goto LABEL_12;
        }
        unsigned int v21 = v40;
      }
      else
      {
        uint64_t v15 = *(void *)a1;
      }
      uint64_t v14 = (v14 + 1) & v10;
      ++v21;
      uint64_t v16 = v15 + 32 * v14;
      unint64_t v17 = *(WTF **)v16;
      if (!*(void *)v16)
      {
        if (v21 >= 0x80) {
          *(unsigned char *)(a1 + 20) = 1;
        }
        goto LABEL_10;
      }
    }
    unsigned int v39 = (v14 + v8 - ((v23 ^ v11) & v10)) & v10;
    if (v21 >= 0x80) {
      *(unsigned char *)(a1 + 20) = 1;
    }
    xpc_object_t v25 = *(WTF::StringImpl **)v16;
    *(void *)uint64_t v16 = 0;
    v42[0] = v25;
    uint64_t v26 = v15 + 32 * v14;
    uint64_t v27 = *(WTF::StringImpl **)(v26 + 8);
    *(void *)(v26 + 8) = 0;
    v42[1] = v27;
    LOBYTE(v43) = 0;
    char v44 = 0;
    uint64_t v28 = (unsigned char *)(v26 + 24);
    if (*(unsigned char *)(v26 + 24))
    {
      uint64_t v29 = *(void *)(v26 + 16);
      *(void *)(v26 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
      uint64_t v43 = v29;
      char v44 = 1;
    }
    uint64_t v30 = (uint64_t *)WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair((WTF::StringImpl **)v16);
    *uint64_t v28 = 0;
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 8) = 0;
    *(unsigned char *)(v16 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::inlineAdd<WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&>(WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&)::{lambda(void)#1}>(v30, a2, &v41);
    uint64_t v31 = (v14 + 1) & v10;
    uint64_t v32 = (uint64_t *)(*(void *)a1 + 32 * v31);
    int v33 = (WTF::StringImpl *)*v32;
    for (i = v39; *v32; int v33 = (WTF::StringImpl *)*v32)
    {
      unsigned int v35 = *((_DWORD *)v33 + 4);
      if (v35 >= 0x100) {
        unsigned int v36 = v35 >> 8;
      }
      else {
        unsigned int v36 = WTF::StringImpl::hashSlowCase(v33);
      }
      ++i;
      unsigned int v37 = (v31 + v8 - ((v36 ^ v11) & v10)) & v10;
      if (i > v37)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>((uint64_t)v42, v32);
        unsigned int i = v37;
      }
      uint64_t v31 = (v31 + 1) & v10;
      uint64_t v32 = (uint64_t *)(*(void *)a1 + 32 * v31);
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(v32, (uint64_t *)v42);
    uint64_t result = (uint64_t)WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair(v42);
  }
  else
  {
LABEL_10:
    uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::inlineAdd<WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&>(WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&)::{lambda(void)#1}>((uint64_t *)v16, a2, &v41);
  }
  ++*(_DWORD *)(a1 + 12);
  uint64_t v15 = *(void *)a1;
  char v19 = 1;
LABEL_12:
  uint64_t v20 = v15 + 32 * *(unsigned int *)(a1 + 8);
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v19;
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::inlineAdd<WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&>(WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, void **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v6 = (_DWORD **)*a3;
  uint64_t v7 = (_DWORD *)**a3;
  if (v7) {
    *v7 += 2;
  }
  LOBYTE(v13) = 0;
  char v14 = 0;
  if (*((unsigned char *)v6 + 16))
  {
    unsigned int v8 = (WTF::StringImpl *)v6[1];
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    unsigned int v13 = v8;
    char v14 = 1;
  }
  BOOL v9 = (WTF::StringImpl *)a1[1];
  a1[1] = (uint64_t)v7;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(a1 + 2), (uint64_t)&v13);
  if (v14)
  {
    int v11 = v13;
    unsigned int v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  return 0;
}

uint64_t std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned char *)(a1 + 8) & 1;
  uint64_t result = std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a2);
  if (v3 == (result & 1))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      std::__to_address[abi:sn180100]<char const>();
      return (uint64_t)WTF::String::operator=((uint64_t *)a1, v5);
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    return std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WTF::String,false>::__construct[abi:sn180100]<WTF::String>(a1, v6);
  }
  return result;
}

uint64_t std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) & 1;
}

uint64_t *std::__optional_storage_base<WTF::String,false>::__construct[abi:sn180100]<WTF::String>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>((uint64_t *)a1, a2);
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

uint64_t *std::__construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>(uint64_t *a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>(a1, a2);
}

uint64_t *std::construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>(uint64_t *a1, uint64_t *a2)
{
  if (!a1) {
    __break(1u);
  }
  return WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
}

uint64_t *WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *WTF::String::String(uint64_t *a1, uint64_t *a2)
{
  *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  return v3;
}

void std::to_address[abi:sn180100]<char const>()
{
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9BA578;
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 16), v3);
  size_t v5 = *(atomic_uchar ****)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

{
  void *v3;
  void *v4;
  atomic_uchar ***v5;

  *(void *)a1 = &unk_1EE9BA578;
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 16), v3);
  size_t v5 = *(atomic_uchar ****)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(v5, v4);
  }
  return a1;
}

atomic_uchar ***WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(atomic_uchar ***this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    int v2 = (WTF *)this;
    atomic_store(1u, (unsigned int *)this);
    uint64_t v3 = this[1];
    this[1] = 0;
    if (v3) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
    }
    return (atomic_uchar ***)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t WebKit::defaultShouldEnableScreenOrientationAPI(WebKit *this)
{
    return WebKit::defaultShouldEnableScreenOrientationAPI(void)::shouldEnableScreenOrientationAPI != 0;
  char v2 = WTF::linkedOnOrAfterSDKWithBehavior();
  uint64_t result = 1;
  if ((v2 & 1) == 0) {
    uint64_t result = WebCore::IOSApplication::isHoYoLAB((WebCore::IOSApplication *)1);
  }
  WebKit::defaultShouldEnableScreenOrientationAPI(void)::shouldEnableScreenOrientationAPI = result;
  return result;
}

void WebKit::WebChromeClient::didLayout(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v3 = v2 ? v2 - 16 : 0;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)v3);
    if (v2)
    {
      uint64_t v4 = *(const void **)(v3 + 8);
      CFRelease(v4);
    }
  }
}

void WebKit::DrawingArea::didCompleteRenderingFrame(WebKit::DrawingArea *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (!*(unsigned char *)(v2 + 186)) {
    WebCore::Page::didCompleteRenderingFrame(*(WebCore::Page **)(v2 + 48));
  }
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

uint64_t *WebKit::WebPreferencesStore::defaults(WebKit::WebPreferencesStore *this)
{
  if (_MergedGlobals_136)
  {
    if (dword_1EB35A394) {
      return &qword_1EB35A388;
    }
  }
  else
  {
    qword_1EB35A388 = 0;
    unk_1EB35A390 = 0;
    qword_1EB35A398 = 0;
    _MergedGlobals_136 = 1;
  }
  uint64_t v2 = WebKit::WebPreferencesKey::inspectorAttachedWidthKey(this);
  LODWORD(v1187) = 750;
  int v1188 = 2;
  uint64_t v3 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v2, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v3 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v4 = WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(v3);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  size_t v5 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v4, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    size_t v5 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v6 = WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(v5);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v7 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v6, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v7 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned int v8 = WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(v7);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  BOOL v9 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v8, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    BOOL v9 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned int v10 = WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(v9);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v11 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v10, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v11 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned int v12 = WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(v11);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  unsigned int v13 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v12, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unsigned int v13 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v14 = WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(v13);
  WTF::StringLiterals::operator"" _str("", &v1185);
  uint64_t v15 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v15;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v14, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  unint64_t v17 = v1185;
  v1185 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      unint64_t v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  unint64_t v18 = WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(v17);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v19 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v18, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v19 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v20 = WebKit::WebPreferencesKey::fantasyFontFamilyKey(v19);
  WTF::StringLiterals::operator"" _str("Papyrus", &v1185);
  unsigned int v21 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v21;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v20, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  unsigned int v23 = v1185;
  v1185 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      unsigned int v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  unsigned int v24 = WebKit::WebPreferencesKey::minimumZoomFontSizeKey(v23);
  unint64_t v1187 = 0x402E000000000000;
  int v1188 = 3;
  xpc_object_t v25 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v24, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    xpc_object_t v25 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v26 = WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(v25);
  unint64_t v1187 = 0x4022000000000000;
  int v1188 = 3;
  uint64_t v27 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v26, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v27 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v28 = WebKit::WebPreferencesKey::minimumFontSizeKey(v27);
  unint64_t v1187 = 0;
  int v1188 = 3;
  uint64_t v29 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v28, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v29 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v30 = WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(v29);
  WTF::StringLiterals::operator"" _str("avc1,zavc,qavc,cavc", &v1185);
  uint64_t v31 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v31;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v30, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  int v33 = v1185;
  v1185 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      int v33 = (WTF::StringImpl *)WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  int v34 = WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(v33);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  unsigned int v35 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v34, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unsigned int v35 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned int v36 = WebKit::WebPreferencesKey::fixedFontFamilyKey(v35);
  WTF::StringLiterals::operator"" _str("Courier", &v1185);
  unsigned int v37 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v37;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v36, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  unsigned int v39 = v1185;
  v1185 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      unsigned int v39 = (WTF::StringImpl *)WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  unsigned int v40 = WebKit::WebPreferencesKey::mediaStreamEnabledKey(v39);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v41 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v40, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v41 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int16 v42 = WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(v41);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v43 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v42, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v43 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v44 = WebKit::WebPreferencesKey::forceCompositingModeKey(v43);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint32_t v45 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v44, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint32_t v45 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v46 = WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(v45);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v47 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v46, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v47 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v48 = WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(v47);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  unsigned __int16 v49 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v48, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unsigned __int16 v49 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v50 = WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(v49);
  unint64_t v1187 = 0x408E000000000000;
  int v1188 = 3;
  uint64_t v51 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v50, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v51 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v52 = WebKit::WebPreferencesKey::mediaEnabledKey(v51);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v53 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v52, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v53 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v54 = WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(v53);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v55 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v54, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v55 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v56 = WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(v55);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v57 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v56, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v57 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v58 = WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(v57);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v59 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v58, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v59 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v60 = WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(v59);
  WTF::StringLiterals::operator"" _str("", &v1185);
  char v61 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v61;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v60, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  uint64_t v63 = v1185;
  v1185 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      uint64_t v63 = (WTF::StringImpl *)WTF::StringImpl::destroy(v63, v62);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  char v64 = WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(v63);
  WTF::StringLiterals::operator"" _str("video/mp4,audio/mp4,video/x-m4v,audio/x-m4a,audio/mp3,application/x-mpegURL,application/vnd.apple.mpegURL,video/mp2t,video/iso.segment,audio/aac,audio/mpeg,audio/ac3,audio/eac3,video/mpeg2,text/vtt", &v1185);
  unint64_t v65 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v65;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v64, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  uint64_t v67 = v1185;
  v1185 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2) {
      uint64_t v67 = (WTF::StringImpl *)WTF::StringImpl::destroy(v67, v66);
    }
    else {
      *(_DWORD *)v67 -= 2;
    }
  }
  long long v68 = WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(v67);
  WTF::StringLiterals::operator"" _str("mp4a.40,avc1", &v1185);
  uint64_t v69 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v69;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v68, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  char v71 = v1185;
  v1185 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2) {
      char v71 = (WTF::StringImpl *)WTF::StringImpl::destroy(v71, v70);
    }
    else {
      *(_DWORD *)v71 -= 2;
    }
  }
  uint64_t v72 = WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(v71);
  WTF::StringLiterals::operator"" _str("c608,wvtt", &v1185);
  uint64_t v73 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v73;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v72, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  uint64_t v75 = v1185;
  v1185 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2) {
      uint64_t v75 = (WTF::StringImpl *)WTF::StringImpl::destroy(v75, v74);
    }
    else {
      *(_DWORD *)v75 -= 2;
    }
  }
  uint64_t v76 = WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(v75);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v77 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v76, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v77 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v78 = WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(v77);
  WTF::StringLiterals::operator"" _str("aac ,zaac,qaac,caac,.mp3,mp4a", &v1185);
  char v79 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v79;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v78, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  int v81 = v1185;
  v1185 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2) {
      int v81 = (WTF::StringImpl *)WTF::StringImpl::destroy(v81, v80);
    }
    else {
      *(_DWORD *)v81 -= 2;
    }
  }
  uint64_t v82 = WebKit::WebPreferencesKey::maxParseDurationKey(v81);
  unint64_t v1187 = 0xBFF0000000000000;
  int v1188 = 3;
  char v83 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v82, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v83 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v84 = WebKit::WebPreferencesKey::mathMLEnabledKey(v83);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v85 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v84, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v85 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  __int16 v86 = WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(v85);
  unint64_t v1187 = 0x4024000000000000;
  int v1188 = 3;
  double v87 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v86, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    double v87 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v88 = WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(v87);
  unint64_t v1187 = 0x403E000000000000;
  int v1188 = 3;
  char v89 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v88, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v89 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v90 = WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(v89);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v91 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v90, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v91 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v92 = WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(v91);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v93 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v92, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v93 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v94 = WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(v93);
  unint64_t v1187 = 0x4038000000000000;
  int v1188 = 3;
  char v95 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v94, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v95 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned int v96 = WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(v95);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  unsigned int v97 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v96, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unsigned int v97 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  DeferringEnabledKeCGFloat y = WebKit::WebPreferencesKey::loadDeferringEnabledKey(v97);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v99 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)DeferringEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v99 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v100 = WebKit::WebPreferencesKey::linkPreloadEnabledKey(v99);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v101 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v100, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v101 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v102 = WebKit::WebPreferencesKey::linkPreconnectKey(v101);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v103 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v102, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v103 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v104 = WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(v103);
  unint64_t v1187 = 0;
  int v1188 = 3;
  long long v105 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v104, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v105 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v106 = WebKit::WebPreferencesKey::layoutFallbackWidthKey(v105);
  LODWORD(v1187) = 980;
  int v1188 = 2;
  long long v107 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v106, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v107 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v108 = WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(v107);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v109 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v108, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v109 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v110 = WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(v109);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  long long v111 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v110, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v111 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v112 = WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(v111);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v113 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v112, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v113 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unsigned __int8 v114 = WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(v113);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v115 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v114, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v115 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v116 = WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(v115);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  CGRect v117 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v116, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    CGRect v117 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  CGRect v118 = WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(v117);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  CGRect v119 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v118, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    CGRect v119 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  unint64_t v120 = WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(v119);
  unint64_t v1187 = 0x3FF0000000000000;
  int v1188 = 3;
  uint64_t v121 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v120, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v121 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v122 = WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(v121);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  unsigned int v123 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v122, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unsigned int v123 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v124 = WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(v123);
  unint64_t v1187 = 0x4014000000000000;
  int v1188 = 3;
  int v125 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v124, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v125 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v126 = WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(v125);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v127 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v126, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v127 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v128 = WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(v127);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v129 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v128, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v129 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v130 = WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(v129);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v131 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v130, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v131 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v132 = WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(v131);
  unint64_t v1187 = 0x4020000000000000;
  int v1188 = 3;
  uint64_t v133 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v132, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v133 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v134 = WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(v133);
  unint64_t v1187 = 0x4010000000000000;
  int v1188 = 3;
  uint64_t v135 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v134, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v135 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v136 = WebKit::WebPreferencesKey::inspectorWindowFrameKey(v135);
  WTF::StringLiterals::operator"" _str("", &v1185);
  long long v137 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v137;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v136, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  uint64_t v139 = v1185;
  v1185 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2) {
      uint64_t v139 = (WTF::StringImpl *)WTF::StringImpl::destroy(v139, v138);
    }
    else {
      *(_DWORD *)v139 -= 2;
    }
  }
  uint64_t v140 = WebKit::WebPreferencesKey::inspectorStartsAttachedKey(v139);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v141 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v140, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v141 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v142 = WebKit::WebPreferencesKey::inspectorAttachmentSideKey(v141);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  uint64_t v143 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v142, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v143 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v144 = WebKit::WebPreferencesKey::inspectorAttachedHeightKey(v143);
  LODWORD(v1187) = 500;
  int v1188 = 2;
  uint64_t v145 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v144, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v145 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v146 = WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(v145);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v147 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v146, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v147 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v148 = WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(v147);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v149 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v148, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v149 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v150 = WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(v149);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v151 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v150, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v151 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v152 = WebKit::WebPreferencesKey::windowFocusRestrictedKey(v151);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v153 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v152, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v153 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v154 = WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(v153);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v155 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v154, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v155 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v156 = WebKit::WebPreferencesKey::webSocketEnabledKey(v155);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v157 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v156, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v157 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  matched = WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(v157);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  unint64_t v159 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)matched, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unint64_t v159 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v160 = WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(v159);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v161 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v160, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v161 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v162 = WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(v161);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v163 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v162, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v163 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v164 = WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(v163);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  char v165 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v164, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v165 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v166 = WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(v165);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v167 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v166, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v167 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v168 = WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(v167);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v169 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v168, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v169 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v170 = WebKit::WebPreferencesKey::allowTestOnlyIPCKey(v169);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v171 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v170, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v171 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v172 = WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(v171);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v173 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v172, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v173 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  BOOL v174 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(v173);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v175 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v174, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v175 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v176 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(v175);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v177 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v176, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v177 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v178 = WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(v177);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v179 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v178, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v179 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v180 = WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(v179);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v181 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v180, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v181 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v182 = WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(v181);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v183 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v182, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v183 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  BOOL v184 = WebKit::WebPreferencesKey::webSecurityEnabledKey(v183);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v185 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v184, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v185 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v186 = WebKit::WebPreferencesKey::webMParserEnabledKey(v185);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  BOOL v187 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v186, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    BOOL v187 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v188 = WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(v187);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v189 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v188, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v189 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v190 = WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(v189);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v191 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v190, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v191 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v192 = WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(v191);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v193 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v192, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v193 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v194 = WebKit::WebPreferencesKey::applePayEnabledKey(v193);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  unint64_t v195 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v194, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    unint64_t v195 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v196 = WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(v195);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v197 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v196, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v197 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v198 = WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(v197);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  char v199 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v198, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v199 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v200 = WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(v199);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v201 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v200, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v201 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v202 = WebKit::WebPreferencesKey::webAudioEnabledKey(v201);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v203 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v202, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v203 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v204 = WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(v203);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v205 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v204, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v205 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v206 = WebKit::WebPreferencesKey::visualViewportEnabledKey(v205);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v207 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v206, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v207 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v208 = WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(v207);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  char v209 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v208, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v209 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v210 = WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(v209);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v211 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v210, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v211 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v212 = WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(v211);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  char v213 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v212, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v213 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v214 = WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(v213);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v215 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v214, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v215 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v216 = WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(v215);
  LOBYTE(v1187) = WebKit::defaultVideoFullscreenRequiresElementFullscreen((WebKit *)v216);
  int v1188 = 1;
  v217 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v216, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v217 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v218 = WebKit::WebPreferencesKey::vp9DecoderEnabledKey(v217);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v219 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v218, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v219 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v220 = WebKit::WebPreferencesKey::vp8DecoderEnabledKey(v219);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  BOOL v221 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v220, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    BOOL v221 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v222 = WebKit::WebPreferencesKey::usesSingleWebProcessKey(v221);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  int v223 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v222, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v223 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v224 = WebKit::WebPreferencesKey::usesEncodingDetectorKey(v223);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v225 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v224, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v225 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v226 = WebKit::WebPreferencesKey::usesBackForwardCacheKey(v225);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  int v227 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v226, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    int v227 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v228 = WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(v227);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  uint64_t v229 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v228, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v229 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  BOOL v230 = WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(v229);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v231 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v230, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v231 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v232 = WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(v231);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v233 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v232, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v233 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v234 = WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(v233);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v235 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v234, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v235 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v236 = WebKit::WebPreferencesKey::threadedScrollingEnabledKey(v235);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  char v237 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v236, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v237 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v238 = WebKit::WebPreferencesKey::textInteractionEnabledKey(v237);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v239 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v238, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v239 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  BOOL v240 = WebKit::WebPreferencesKey::textExtractionEnabledKey(v239);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v241 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v240, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v241 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  __int16 v242 = WebKit::WebPreferencesKey::textAutosizingEnabledKey(v241);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v243 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v242, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v243 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v244 = WebKit::WebPreferencesKey::textAreasAreResizableKey(v243);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v245 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v244, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v245 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v246 = WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(v245);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  BOOL v247 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v246, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    BOOL v247 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v248 = WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(v247);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v249 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v248, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v249 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v250 = WebKit::WebPreferencesKey::tabsToLinksKey(v249);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v251 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v250, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v251 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v252 = WebKit::WebPreferencesKey::systemPreviewEnabledKey(v251);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v253 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v252, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v253 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v254 = WebKit::WebPreferencesKey::systemLayoutDirectionKey(v253);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  long long v255 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v254, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v255 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v256 = WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(v255);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v257 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v256, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v257 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v258 = WebKit::WebPreferencesKey::standardFontFamilyKey(v257);
  WTF::StringLiterals::operator"" _str("Times", &v1185);
  int v259 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v259;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v258, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  uint64_t v261 = v1185;
  v1185 = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 2) {
      uint64_t v261 = (WTF::StringImpl *)WTF::StringImpl::destroy(v261, v260);
    }
    else {
      *(_DWORD *)v261 -= 2;
    }
  }
  unsigned __int8 v262 = WebKit::WebPreferencesKey::standaloneKey(v261);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v263 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v262, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v263 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v264 = WebKit::WebPreferencesKey::spatialNavigationEnabledKey(v263);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v265 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v264, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v265 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v266 = WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(v265);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v267 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v266, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v267 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v268 = WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(v267);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v269 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v268, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v269 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v270 = WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(v269);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v271 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v270, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v271 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v272 = WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(v271);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v273 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v272, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v273 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v274 = WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(v273);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v275 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v274, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v275 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v276 = WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(v275);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  char v277 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v276, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v277 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v278 = WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(v277);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v279 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v278, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v279 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v280 = WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(v279);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v281 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v280, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v281 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v282 = WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(v281);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  uint64_t v283 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v282, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v283 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v284 = WebKit::WebPreferencesKey::caretBrowsingEnabledKey(v283);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v285 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v284, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v285 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v286 = WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(v285);
  LOBYTE(v1187) = WebKit::defaultShouldPrintBackgrounds((WebKit *)v286);
  int v1188 = 1;
  uint64_t v287 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v286, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v287 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v288 = WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(v287);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  uint64_t v289 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v288, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    uint64_t v289 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v290 = WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(v289);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  char v291 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v290, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v291 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v292 = WebKit::WebPreferencesKey::colorFilterEnabledKey(v291);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v293 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v292, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v293 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v294 = WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(v293);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v295 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v294, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v295 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v296 = WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(v295);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v297 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v296, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v297 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v298 = WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(v297);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v299 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v298, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v299 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v300 = WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(v299);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  long long v301 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v300, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v301 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  long long v302 = WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(v301);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  long long v303 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v302, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    long long v303 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v304 = WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(v303);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v305 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v304, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v305 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  char v306 = WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(v305);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  char v307 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v306, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    char v307 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  uint64_t v308 = WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(v307);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v309 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v308, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v309 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v310 = WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(v309);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v311 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v310, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v311 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v312 = WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(v311);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v313 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v312, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v313 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v314 = WebKit::WebPreferencesKey::serifFontFamilyKey(v313);
  WTF::StringLiterals::operator"" _str("Times", &v1185);
  v315 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v315;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v314, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  v317 = v1185;
  v1185 = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2) {
      v317 = (WTF::StringImpl *)WTF::StringImpl::destroy(v317, v316);
    }
    else {
      *(_DWORD *)v317 -= 2;
    }
  }
  v318 = WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(v317);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v319 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v318, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v319 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v320 = WebKit::WebPreferencesKey::sansSerifFontFamilyKey(v319);
  WTF::StringLiterals::operator"" _str("Helvetica", &v1185);
  v321 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v321;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v320, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  v323 = v1185;
  v1185 = 0;
  if (v323)
  {
    if (*(_DWORD *)v323 == 2) {
      v323 = (WTF::StringImpl *)WTF::StringImpl::destroy(v323, v322);
    }
    else {
      *(_DWORD *)v323 -= 2;
    }
  }
  v324 = WebKit::WebPreferencesKey::cursiveFontFamilyKey(v323);
  WTF::StringLiterals::operator"" _str("Snell Roundhand", &v1185);
  v325 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v325;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v324, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  v327 = v1185;
  v1185 = 0;
  if (v327)
  {
    if (*(_DWORD *)v327 == 2) {
      v327 = (WTF::StringImpl *)WTF::StringImpl::destroy(v327, v326);
    }
    else {
      *(_DWORD *)v327 -= 2;
    }
  }
  v328 = WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(v327);
  unint64_t v1187 = 0;
  int v1188 = 3;
  v329 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v328, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v329 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v330 = WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(v329);
  unint64_t v1187 = 0;
  int v1188 = 3;
  v331 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v330, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v331 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v332 = WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(v331);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v333 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v332, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v333 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v334 = WebKit::WebPreferencesKey::domPasteAllowedKey(v333);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v335 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v334, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v335 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v336 = WebKit::WebPreferencesKey::dataDetectorTypesKey(v335);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  v337 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v336, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v337 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  VideoKeCGFloat y = WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(v337);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v339 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)VideoKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v339 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v340 = WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(v339);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v341 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v340, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v341 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v342 = WebKit::WebPreferencesKey::databasesEnabledKey(v341);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v343 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v342, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v343 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v344 = WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(v343);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v345 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v344, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v345 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v346 = WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(v345);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v347 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v346, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v347 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v348 = WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(v347);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v349 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v348, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v349 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v350 = WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(v349);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v351 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v350, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v351 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v352 = WebKit::WebPreferencesKey::defaultFixedFontSizeKey(v351);
  unint64_t v1187 = 0x402A000000000000;
  int v1188 = 3;
  v353 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v352, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v353 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v354 = WebKit::WebPreferencesKey::defaultFontSizeKey(v353);
  unint64_t v1187 = 0x4030000000000000;
  int v1188 = 3;
  v355 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v354, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v355 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v356 = WebKit::WebPreferencesKey::defaultTextEncodingNameKey(v355);
  PAL::defaultTextEncodingNameForSystemLanguage((uint64_t *)&v1185, (PAL *)v356);
  v357 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v357;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v356, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  v359 = v1185;
  v1185 = 0;
  if (v359)
  {
    if (*(_DWORD *)v359 == 2) {
      v359 = (WTF::StringImpl *)WTF::StringImpl::destroy(v359, v358);
    }
    else {
      *(_DWORD *)v359 -= 2;
    }
  }
  v360 = WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(v359);
  LODWORD(v1187) = 2;
  int v1188 = 2;
  v361 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v360, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v361 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v362 = WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(v361);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v363 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v362, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v363 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v364 = WebKit::WebPreferencesKey::pictographFontFamilyKey(v363);
  WTF::StringLiterals::operator"" _str("AppleColorEmoji", &v1185);
  v365 = v1185;
  v1185 = 0;
  unint64_t v1187 = (unint64_t)v365;
  int v1188 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v364, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  int v1188 = -1;
  v367 = v1185;
  v1185 = 0;
  if (v367)
  {
    if (*(_DWORD *)v367 == 2) {
      v367 = (WTF::StringImpl *)WTF::StringImpl::destroy(v367, v366);
    }
    else {
      *(_DWORD *)v367 -= 2;
    }
  }
  v368 = WebKit::WebPreferencesKey::developerExtrasEnabledKey(v367);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v369 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v368, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v369 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v370 = WebKit::WebPreferencesKey::deviceHeightKey(v369);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  v371 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v370, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v371 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v372 = WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(v371);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v373 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v372, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v373 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v374 = WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(v373);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v375 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v374, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v375 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v376 = WebKit::WebPreferencesKey::deviceWidthKey(v375);
  LODWORD(v1187) = 0;
  int v1188 = 2;
  v377 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v376, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v377 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v378 = WebKit::WebPreferencesKey::passwordEchoEnabledKey(v377);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v379 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v378, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v379 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v380 = WebKit::WebPreferencesKey::passwordEchoDurationKey(v379);
  unint64_t v1187 = 0x4000000000000000;
  int v1188 = 3;
  v381 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v380, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v381 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v382 = WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(v381);
  LOBYTE(v1187) = WebKit::defaultPassiveTouchListenersAsDefaultOnDocument((WebKit *)v382);
  int v1188 = 1;
  v383 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v382, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v383 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v384 = WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(v383);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v385 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v384, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v385 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v386 = WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(v385);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v387 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v386, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v387 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v388 = WebKit::WebPreferencesKey::downloadAttributeEnabledKey(v387);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v389 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v388, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v389 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v390 = WebKit::WebPreferencesKey::editableLinkBehaviorKey(v389);
  LODWORD(v1187) = 4;
  int v1188 = 2;
  v391 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v390, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v391 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v392 = WebKit::WebPreferencesKey::pdfPluginEnabledKey(v391);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v393 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v392, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v393 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v394 = WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(v393);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v395 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v394, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v395 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v396 = WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(v395);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v397 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v396, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v397 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v398 = WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(v397);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v399 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v398, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v399 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v400 = WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(v399);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v401 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v400, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v401 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v402 = WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(v401);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v403 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v402, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v403 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v404 = WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(v403);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v405 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v404, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v405 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v406 = WebKit::WebPreferencesKey::selectShowPickerEnabledKey(v405);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v407 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v406, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v407 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v408 = WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(v407);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v409 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v408, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v409 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v410 = WebKit::WebPreferencesKey::isAVFoundationEnabledKey(v409);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v411 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v410, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v411 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v412 = WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(v411);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v413 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v412, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v413 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v414 = WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(v413);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v415 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v414, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v415 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v416 = WebKit::WebPreferencesKey::accessHandleEnabledKey(v415);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v417 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v416, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v417 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v418 = WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(v417);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v419 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v418, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v419 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v420 = WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(v419);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v421 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v420, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v421 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v422 = WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(v421);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v423 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v422, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v423 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v424 = WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(v423);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v425 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v424, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v425 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v426 = WebKit::WebPreferencesKey::allowWebGLInWorkersKey(v425);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v427 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v426, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v427 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v428 = WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(v427);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v429 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v428, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v429 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v430 = WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(v429);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v431 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v430, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v431 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v432 = WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(v431);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v433 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v432, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v433 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v434 = WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(v433);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v435 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v434, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v435 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v436 = WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(v435);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v437 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v436, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v437 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v438 = WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(v437);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v439 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v438, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v439 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v440 = WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(v439);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v441 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v440, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v441 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v442 = WebKit::WebPreferencesKey::appBadgeEnabledKey(v441);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v443 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v442, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v443 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v444 = WebKit::WebPreferencesKey::appHighlightsEnabledKey(v443);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v445 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v444, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v445 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v446 = WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(v445);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v447 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v446, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v447 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v448 = WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(v447);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v449 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v448, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v449 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v450 = WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(v449);
  LOBYTE(v1187) = WebKit::defaultUseAsyncUIKitInteractions((WebKit *)v450);
  int v1188 = 1;
  v451 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v450, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v451 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v452 = WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(v451);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v453 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v452, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v453 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v454 = WebKit::WebPreferencesKey::attachmentElementEnabledKey(v453);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v455 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v454, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v455 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v456 = WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(v455);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v457 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v456, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v457 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v458 = WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(v457);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v459 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v458, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v459 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v460 = WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(v459);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v461 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v460, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v461 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v462 = WebKit::WebPreferencesKey::domAudioSessionEnabledKey(v461);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v463 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v462, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v463 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v464 = WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(v463);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v465 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v464, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v465 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v466 = WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(v465);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v467 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v466, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v467 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v468 = WebKit::WebPreferencesKey::beaconAPIEnabledKey(v467);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v469 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v468, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v469 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v470 = WebKit::WebPreferencesKey::broadcastChannelEnabledKey(v469);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v471 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v470, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v471 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v472 = WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(v471);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v473 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v472, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v473 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v474 = WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(v473);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v475 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v474, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v475 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v476 = WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(v475);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v477 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v476, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v477 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v478 = WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(v477);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v479 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v478, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v479 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v480 = WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(v479);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v481 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v480, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v481 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v482 = WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(v481);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v483 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v482, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v483 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v484 = WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(v483);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v485 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v484, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v485 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v486 = WebKit::WebPreferencesKey::accentColorEnabledKey(v485);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v487 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v486, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v487 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v488 = WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(v487);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v489 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v488, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v489 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v490 = WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(v489);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v491 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v490, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v491 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v492 = WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(v491);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v493 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v492, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v493 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v494 = WebKit::WebPreferencesKey::masonryEnabledKey(v493);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v495 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v494, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v495 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v496 = WebKit::WebPreferencesKey::cssMotionPathEnabledKey(v495);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v497 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v496, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v497 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v498 = WebKit::WebPreferencesKey::cssNestingEnabledKey(v497);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v499 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v498, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v499 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v500 = WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(v499);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v501 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v500, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v501 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v502 = WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(v501);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v503 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v502, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v503 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v504 = WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(v503);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v505 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v504, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v505 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v506 = WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(v505);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v507 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v506, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v507 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v508 = WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(v507);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v509 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v508, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v509 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v510 = WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(v509);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v511 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v510, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v511 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v512 = WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(v511);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v513 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v512, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v513 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v514 = WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(v513);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v515 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v514, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v515 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v516 = WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(v515);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v517 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v516, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v517 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v518 = WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(v517);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v519 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v518, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v519 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v520 = WebKit::WebPreferencesKey::cssColorLayersEnabledKey(v519);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v521 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v520, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v521 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v522 = WebKit::WebPreferencesKey::cssDPropertyEnabledKey(v521);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v523 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v522, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v523 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v524 = WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(v523);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v525 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v524, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v525 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v526 = WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(v525);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v527 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v526, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v527 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v528 = WebKit::WebPreferencesKey::cssLightDarkEnabledKey(v527);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v529 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v528, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v529 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v530 = WebKit::WebPreferencesKey::cssLineClampEnabledKey(v529);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v531 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v530, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v531 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v532 = WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(v531);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v533 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v532, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v533 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v534 = WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(v533);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v535 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v534, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v535 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v536 = WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(v535);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v537 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v536, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v537 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v538 = WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(v537);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v539 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v538, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v539 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v540 = WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(v539);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v541 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v540, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v541 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v542 = WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(v541);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v543 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v542, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v543 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v544 = WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(v543);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v545 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v544, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v545 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v546 = WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(v545);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v547 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v546, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v547 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v548 = WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(v547);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v549 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v548, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v549 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v550 = WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(v549);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v551 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v550, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v551 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v552 = WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(v551);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v553 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v552, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v553 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v554 = WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(v553);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v555 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v554, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v555 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v556 = WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(v555);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v557 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v556, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v557 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v558 = WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(v557);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v559 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v558, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v559 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v560 = WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(v559);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v561 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v560, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v561 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v562 = WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(v561);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v563 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v562, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v563 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v564 = WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(v563);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v565 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v564, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v565 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v566 = WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(v565);
  LOBYTE(v1187) = WebKit::defaultCSSOMViewScrollingAPIEnabled((WebKit *)v566);
  int v1188 = 1;
  v567 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v566, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v567 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v568 = WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(v567);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v569 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v568, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v569 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v570 = WebKit::WebPreferencesKey::cacheAPIEnabledKey(v569);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v571 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v570, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v571 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v572 = WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(v571);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v573 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v572, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v573 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v574 = WebKit::WebPreferencesKey::canvasFiltersEnabledKey(v573);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v575 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v574, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v575 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v576 = WebKit::WebPreferencesKey::canvasLayersEnabledKey(v575);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v577 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v576, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v577 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v578 = WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(v577);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v579 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v578, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v579 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v580 = WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(v579);
  LOBYTE(v1187) = WebKit::defaultCaptureAudioInUIProcessEnabled((WebKit *)v580);
  int v1188 = 1;
  v581 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v580, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v581 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v582 = WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(v581);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v583 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v582, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v583 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v584 = WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(v583);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v585 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v584, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v585 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v586 = WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(v585);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v587 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v586, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v587 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v588 = WebKit::WebPreferencesKey::clientBadgeEnabledKey(v587);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v589 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v588, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v589 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v590 = WebKit::WebPreferencesKey::inputTypeColorEnabledKey(v589);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v591 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v590, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v591 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v592 = WebKit::WebPreferencesKey::compositingBordersVisibleKey(v591);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v593 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v592, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v593 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v594 = WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(v593);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v595 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v594, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v595 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v596 = WebKit::WebPreferencesKey::compressionStreamEnabledKey(v595);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v597 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v596, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v597 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v598 = WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(v597);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v599 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v598, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v599 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v600 = WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(v599);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v601 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v600, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v601 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v602 = WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(v601);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v603 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v602, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v603 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v604 = WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(v603);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v605 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v604, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v605 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v606 = WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(v605);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v607 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v606, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v607 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v608 = WebKit::WebPreferencesKey::cookieEnabledKey(v607);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v609 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v608, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v609 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v610 = WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(v609);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v611 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v610, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v611 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v612 = WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(v611);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v613 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v612, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v613 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v614 = WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(v613);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v615 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v614, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v615 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v616 = WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(v615);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v617 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v616, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v617 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v618 = WebKit::WebPreferencesKey::customStateSetEnabledKey(v617);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v619 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v618, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v619 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v620 = WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(v619);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v621 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v620, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v621 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v622 = WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(v621);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v623 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v622, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v623 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v624 = WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(v623);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v625 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v624, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v625 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v626 = WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(v625);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v627 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v626, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v627 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v628 = WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(v627);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v629 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v628, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v629 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v630 = WebKit::WebPreferencesKey::dataListElementEnabledKey(v629);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v631 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v630, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v631 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v632 = WebKit::WebPreferencesKey::inputTypeDateEnabledKey(v631);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v633 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v632, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v633 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v634 = WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(v633);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v635 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v634, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v635 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v636 = WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(v635);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v637 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v636, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v637 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v638 = WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(v637);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v639 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v638, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v639 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v640 = WebKit::WebPreferencesKey::declarativeWebPushKey(v639);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v641 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v640, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v641 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  PaintKeCGFloat y = WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(v641);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v643 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)PaintKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v643 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v644 = WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(v643);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v645 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v644, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v645 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v646 = WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(v645);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v647 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v646, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v647 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v648 = WebKit::WebPreferencesKey::deprecationReportingEnabledKey(v647);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v649 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v648, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v649 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v650 = WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(v649);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v651 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v650, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v651 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v652 = WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(v651);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v653 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v652, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v653 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v654 = WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(v653);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v655 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v654, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v655 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v656 = WebKit::WebPreferencesKey::directoryUploadEnabledKey(v655);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v657 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v656, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v657 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v658 = WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(v657);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v659 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v658, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v659 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  PartyWebsiteDataRemovalDisabledKeCGFloat y = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(v659);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v661 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)PartyWebsiteDataRemovalDisabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v661 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v662 = WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(v661);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v663 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v662, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v663 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v664 = WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(v663);
  LOBYTE(v1187) = WebKit::defaultDisallowSyncXHRDuringPageDismissalEnabled((WebKit *)v664);
  int v1188 = 1;
  v665 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v664, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v665 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v666 = WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(v665);
  LOBYTE(v1187) = WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay((WebKit *)v666);
  int v1188 = 1;
  v667 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v666, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v667 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v668 = WebKit::WebPreferencesKey::embedElementEnabledKey(v667);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v669 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v668, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v669 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v670 = WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(v669);
  LOBYTE(v1187) = WebKit::defaultAutomaticLiveResizeEnabled((WebKit *)v670);
  int v1188 = 1;
  v671 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v670, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v671 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v672 = WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(v671);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v673 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v672, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v673 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v674 = WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(v673);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v675 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v674, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v675 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v676 = WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(v675);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v677 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v676, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v677 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v678 = WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(v677);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v679 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v678, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v679 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v680 = WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(v679);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v681 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v680, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v681 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v682 = WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(v681);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v683 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v682, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v683 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v684 = WebKit::WebPreferencesKey::auxclickEventEnabledKey(v683);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v685 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v684, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v685 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  APIEnabledKeCGFloat y = WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(v685);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v687 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)APIEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v687 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v688 = WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(v687);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v689 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v688, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v689 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v690 = WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(v689);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v691 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v690, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v691 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v692 = WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(v691);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v693 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v692, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v693 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v694 = WebKit::WebPreferencesKey::enterKeyHintEnabledKey(v693);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v695 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v694, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v695 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v696 = WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(v695);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v697 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v696, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v697 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v698 = WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(v697);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v699 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v698, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v699 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v700 = WebKit::WebPreferencesKey::ftpEnabledKey(v699);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v701 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v700, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v701 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v702 = WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(v701);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v703 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v702, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v703 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v704 = WebKit::WebPreferencesKey::fasterClicksEnabledKey(v703);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v705 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v704, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v705 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  PriorityEnabledKeCGFloat y = WebKit::WebPreferencesKey::fetchPriorityEnabledKey(v705);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v707 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)PriorityEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v707 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v708 = WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(v707);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v709 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v708, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v709 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v710 = WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(v709);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v711 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v710, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v711 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v712 = WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(v711);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v713 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v712, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v713 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v714 = WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(v713);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v715 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v714, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v715 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v716 = WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(v715);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v717 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v716, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v717 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v718 = WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(v717);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v719 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v718, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v719 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v720 = WebKit::WebPreferencesKey::fullScreenEnabledKey(v719);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v721 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v720, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v721 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v722 = WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(v721);
  LOBYTE(v1187) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v722);
  int v1188 = 1;
  v723 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v722, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v723 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v724 = WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(v723);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v725 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v724, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v725 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v726 = WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(v725);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v727 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v726, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v727 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v728 = WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(v727);
  LOBYTE(v1187) = WebKit::defaultManageCaptureStatusBarInGPUProcessEnabled((WebKit *)v728);
  int v1188 = 1;
  v729 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v728, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v729 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v730 = WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(v729);
  LOBYTE(v1187) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v730);
  int v1188 = 1;
  v731 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v730, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v731 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v732 = WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(v731);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v733 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v732, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v733 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v734 = WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(v733);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v735 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v734, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v735 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v736 = WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(v735);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v737 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v736, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v737 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v738 = WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(v737);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v739 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v738, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v739 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v740 = WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(v739);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v741 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v740, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v741 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v742 = WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(v741);
  LOBYTE(v1187) = WebKit::defaultCaptureAudioInUIProcessEnabled((WebKit *)v742);
  int v1188 = 1;
  v743 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v742, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v743 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v744 = WebKit::WebPreferencesKey::gamepadsEnabledKey(v743);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v745 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v744, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v745 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v746 = WebKit::WebPreferencesKey::genericCueAPIEnabledKey(v745);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v747 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v746, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v747 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v748 = WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(v747);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v749 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v748, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v749 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v750 = WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(v749);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v751 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v750, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v751 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v752 = WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(v751);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v753 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v752, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v753 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v754 = WebKit::WebPreferencesKey::modelElementEnabledKey(v753);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v755 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v754, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v755 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v756 = WebKit::WebPreferencesKey::modelDocumentEnabledKey(v755);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v757 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v756, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v757 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v758 = WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(v757);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v759 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v758, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v759 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v760 = WebKit::WebPreferencesKey::invokerAttributesEnabledKey(v759);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v761 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v760, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v761 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v762 = WebKit::WebPreferencesKey::popoverAttributeEnabledKey(v761);
  LOBYTE(v1187) = WebKit::defaultPopoverAttributeEnabled((WebKit *)v762);
  int v1188 = 1;
  v763 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v762, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v763 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v764 = WebKit::WebPreferencesKey::switchControlEnabledKey(v763);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v765 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v764, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v765 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v766 = WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(v765);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v767 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v766, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v767 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v768 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(v767);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v769 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v768, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v769 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v770 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(v769);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v771 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v770, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v771 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v772 = WebKit::WebPreferencesKey::highlightAPIEnabledKey(v771);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v773 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v772, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v773 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v774 = WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(v773);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v775 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v774, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v775 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v776 = WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(v775);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v777 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v776, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v777 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v778 = WebKit::WebPreferencesKey::itpDebugModeEnabledKey(v777);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v779 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v778, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v779 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v780 = WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(v779);
  LOBYTE(v1187) = WebKit::defaultTextAutosizingUsesIdempotentMode((WebKit *)v780);
  int v1188 = 1;
  v781 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v780, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v781 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v782 = WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(v781);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v783 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v782, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v783 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v784 = WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(v783);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v785 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v784, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v785 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v786 = WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(v785);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v787 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v786, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v787 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v788 = WebKit::WebPreferencesKey::imageCaptureEnabledKey(v787);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v789 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v788, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v789 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v790 = WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(v789);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v791 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v790, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v791 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v792 = WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(v791);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v793 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v792, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v793 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v794 = WebKit::WebPreferencesKey::javaScriptEnabledKey(v793);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v795 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v794, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v795 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v796 = WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(v795);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v797 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v796, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v797 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v798 = WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(v797);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v799 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v798, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v799 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v800 = WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(v799);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v801 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v800, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v801 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v802 = WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(v801);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v803 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v802, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v803 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v804 = WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(v803);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v805 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v804, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v805 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v806 = WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(v805);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v807 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v806, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v807 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v808 = WebKit::WebPreferencesKey::showModalDialogEnabledKey(v807);
  LOBYTE(v1187) = WebKit::defaultShowModalDialogEnabled((WebKit *)v808);
  int v1188 = 1;
  v809 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v808, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v809 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v810 = WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(v809);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v811 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v810, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v811 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v812 = WebKit::WebPreferencesKey::linkSanitizerEnabledKey(v811);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v813 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v812, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v813 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v814 = WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(v813);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v815 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v814, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v815 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v816 = WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(v815);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v817 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v816, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v817 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v818 = WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(v817);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v819 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v818, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v819 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v820 = WebKit::WebPreferencesKey::linkPrefetchEnabledKey(v819);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v821 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v820, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v821 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v822 = WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(v821);
  LOBYTE(v1187) = WebKit::defaultLiveRangeSelectionEnabled((WebKit *)v822);
  int v1188 = 1;
  v823 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v822, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v823 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  WebArchiveWithEphemeralStorageEnabledKeCGFloat y = WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(v823);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v825 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)WebArchiveWithEphemeralStorageEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v825 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v826 = WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(v825);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v827 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v826, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v827 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v828 = WebKit::WebPreferencesKey::localStorageEnabledKey(v827);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v829 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v828, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v829 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v830 = WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(v829);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v831 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v830, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v831 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v832 = WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(v831);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v833 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v832, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v833 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v834 = WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(v833);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v835 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v834, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v835 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v836 = WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(v835);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v837 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v836, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v837 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v838 = WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(v837);
  LOBYTE(v1187) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v838);
  int v1188 = 1;
  v839 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v838, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v839 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v840 = WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(v839);
  LOBYTE(v1187) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v840);
  int v1188 = 1;
  v841 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v840, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v841 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v842 = WebKit::WebPreferencesKey::coreMathMLEnabledKey(v841);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v843 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v842, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v843 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v844 = WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(v843);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v845 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v844, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v845 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v846 = WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(v845);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v847 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v846, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v847 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v848 = WebKit::WebPreferencesKey::mediaSessionEnabledKey(v847);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v849 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v848, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v849 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v850 = WebKit::WebPreferencesKey::mediaSourceEnabledKey(v849);
  LOBYTE(v1187) = WebKit::defaultMediaSourceEnabled((WebKit *)v850);
  int v1188 = 1;
  v851 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v850, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v851 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v852 = WebKit::WebPreferencesKey::mediaDevicesEnabledKey(v851);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v853 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v852, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v853 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v854 = WebKit::WebPreferencesKey::mediaRecorderEnabledKey(v853);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v855 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v854, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v855 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v856 = WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(v855);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v857 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v856, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v857 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v858 = WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(v857);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v859 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v858, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v859 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v860 = WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(v859);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v861 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v860, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v861 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v862 = WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(v861);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v863 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v862, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v863 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v864 = WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(v863);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v865 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v864, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v865 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v866 = WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(v865);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v867 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v866, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v867 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v868 = WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(v867);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v869 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v868, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v869 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v870 = WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(v869);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v871 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v870, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v871 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v872 = WebKit::WebPreferencesKey::navigationAPIEnabledKey(v871);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v873 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v872, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v873 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v874 = WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(v873);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v875 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v874, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v875 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v876 = WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(v875);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v877 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v876, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v877 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v878 = WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(v877);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v879 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v878, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v879 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v880 = WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(v879);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v881 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v880, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v881 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v882 = WebKit::WebPreferencesKey::notificationEventEnabledKey(v881);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v883 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v882, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v883 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v884 = WebKit::WebPreferencesKey::notificationsEnabledKey(v883);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v885 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v884, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v885 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v886 = WebKit::WebPreferencesKey::observableEnabledKey(v885);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v887 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v886, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v887 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v888 = WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(v887);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v889 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v888, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v889 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v890 = WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(v889);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v891 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v890, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v891 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v892 = WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(v891);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v893 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v892, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v893 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v894 = WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(v893);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v895 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v894, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v895 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v896 = WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(v895);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v897 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v896, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v897 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v898 = WebKit::WebPreferencesKey::opusDecoderEnabledKey(v897);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v899 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v898, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v899 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v900 = WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(v899);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v901 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v900, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v901 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v902 = WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(v901);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v903 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v902, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v903 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v904 = WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(v903);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v905 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v904, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v905 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v906 = WebKit::WebPreferencesKey::permissionsAPIEnabledKey(v905);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v907 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v906, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v907 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v908 = WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(v907);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v909 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v908, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v909 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  CoalescedEventsEnabledKeCGFloat y = WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(v909);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v911 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)CoalescedEventsEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v911 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  PredictedEventsEnabledKeCGFloat y = WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(v911);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v913 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)PredictedEventsEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v913 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v914 = WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(v913);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v915 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v914, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v915 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v916 = WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(v915);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v917 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v916, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v917 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v918 = WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(v917);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v919 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v918, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v919 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v920 = WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(v919);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v921 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v920, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v921 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v922 = WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(v921);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v923 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v922, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v923 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v924 = WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(v923);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v925 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v924, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v925 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v926 = WebKit::WebPreferencesKey::pushAPIEnabledKey(v925);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v927 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v926, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v927 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v928 = WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(v927);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v929 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v928, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v929 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v930 = WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(v929);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v931 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v930, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v931 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v932 = WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(v931);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v933 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v932, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v933 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v934 = WebKit::WebPreferencesKey::remotePlaybackEnabledKey(v933);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v935 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v934, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v935 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v936 = WebKit::WebPreferencesKey::removeBackgroundEnabledKey(v935);
  LOBYTE(v1187) = WebKit::defaultRemoveBackgroundEnabled((WebKit *)v936);
  int v1188 = 1;
  v937 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v936, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v937 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v938 = WebKit::WebPreferencesKey::reportingEnabledKey(v937);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v939 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v938, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v939 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v940 = WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(v939);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v941 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v940, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v941 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v942 = WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(v941);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v943 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v942, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v943 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v944 = WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(v943);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v945 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v944, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v945 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v946 = WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(v945);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v947 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v946, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v947 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  UserMediaRequiresFocusKeCGFloat y = WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(v947);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v949 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)UserMediaRequiresFocusKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v949 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  SchedulingEnabledKeCGFloat y = WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(v949);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v951 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)SchedulingEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v951 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v952 = WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(v951);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v953 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v952, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v953 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v954 = WebKit::WebPreferencesKey::sKAttributionEnabledKey(v953);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v955 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v954, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v955 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v956 = WebKit::WebPreferencesKey::safeBrowsingEnabledKey(v955);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v957 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v956, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v957 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v958 = WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(v957);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v959 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v958, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v959 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v960 = WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(v959);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v961 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v960, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v961 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v962 = WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(v961);
  LOBYTE(v1187) = WebKit::defaultShouldEnableScreenOrientationAPI((WebKit *)v962);
  int v1188 = 1;
  v963 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v962, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v963 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v964 = WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(v963);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v965 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v964, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v965 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v966 = WebKit::WebPreferencesKey::screenCaptureEnabledKey(v965);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v967 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v966, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v967 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v968 = WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(v967);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v969 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v968, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v969 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v970 = WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(v969);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v971 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v970, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v971 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v972 = WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(v971);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v973 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v972, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v973 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v974 = WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(v973);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v975 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v974, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v975 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v976 = WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(v975);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v977 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v976, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v977 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v978 = WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(v977);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v979 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v978, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v979 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v980 = WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(v979);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v981 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v980, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v981 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v982 = WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(v981);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v983 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v982, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v983 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v984 = WebKit::WebPreferencesKey::secureContextChecksEnabledKey(v983);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v985 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v984, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v985 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v986 = WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(v985);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v987 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v986, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v987 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v988 = WebKit::WebPreferencesKey::selectionFlippingEnabledKey(v987);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v989 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v988, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v989 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v990 = WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(v989);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v991 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v990, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v991 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v992 = WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(v991);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v993 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v992, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v993 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v994 = WebKit::WebPreferencesKey::serviceWorkersEnabledKey(v993);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v995 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v994, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v995 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v996 = WebKit::WebPreferencesKey::shapeDetectionKey(v995);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v997 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v996, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v997 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v998 = WebKit::WebPreferencesKey::sharedWorkerEnabledKey(v997);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v999 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v998, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v999 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1000 = WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(v999);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1001 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1000, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1001 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1002 = WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(v1001);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1003 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1002, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1003 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1004 = WebKit::WebPreferencesKey::siteIsolationEnabledKey(v1003);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1005 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1004, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1005 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1006 = WebKit::WebPreferencesKey::speechRecognitionEnabledKey(v1005);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1007 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1006, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1007 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1008 = WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(v1007);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1009 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1008, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1009 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1010 = WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(v1009);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1011 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1010, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1011 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1012 = WebKit::WebPreferencesKey::storageAPIEnabledKey(v1011);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1013 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1012, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1013 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1014 = WebKit::WebPreferencesKey::storageBlockingPolicyKey(v1013);
  LODWORD(v1187) = 1;
  int v1188 = 2;
  v1015 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1014, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1015 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1016 = WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(v1015);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1017 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1016, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1017 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1018 = WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(v1017);
  LOBYTE(v1187) = WebKit::defaultShouldTakeNearSuspendedAssertion((WebKit *)v1018);
  int v1188 = 1;
  v1019 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1018, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1019 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1020 = WebKit::WebPreferencesKey::textAnimationsEnabledKey(v1019);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1021 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1020, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1021 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1022 = WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(v1021);
  LOBYTE(v1187) = WebKit::defaultTextRecognitionInVideosEnabled((WebKit *)v1022);
  int v1188 = 1;
  v1023 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1022, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1023 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1024 = WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(v1023);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1025 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1024, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1025 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1026 = WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(v1025);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1027 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1026, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1027 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1028 = WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(v1027);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1029 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1028, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1029 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1030 = WebKit::WebPreferencesKey::trackConfigurationEnabledKey(v1029);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1031 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1030, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1031 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1032 = WebKit::WebPreferencesKey::trustedTypesEnabledKey(v1031);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1033 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1032, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1033 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1034 = WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(v1033);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1035 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1034, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1035 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1036 = WebKit::WebPreferencesKey::unifiedPDFEnabledKey(v1035);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1037 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1036, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1037 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1038 = WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(v1037);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1039 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1038, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1039 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1040 = WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(v1039);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1041 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1040, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1041 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1042 = WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(v1041);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1043 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1042, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1043 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1044 = WebKit::WebPreferencesKey::useARKitForModelKey(v1043);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1045 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1044, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1045 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1046 = WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(v1045);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1047 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1046, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1047 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1048 = WebKit::WebPreferencesKey::useGiantTilesKey(v1047);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1049 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1048, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1049 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1050 = WebKit::WebPreferencesKey::userActivationAPIEnabledKey(v1049);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1051 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1050, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1051 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1052 = WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(v1051);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1053 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1052, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1053 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1054 = WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(v1053);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1055 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1054, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1055 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1056 = WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(v1055);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1057 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1056, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1057 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1058 = WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(v1057);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1059 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1058, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1059 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1060 = WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(v1059);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1061 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1060, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1061 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1062 = WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(v1061);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1063 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1062, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1063 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1064 = WebKit::WebPreferencesKey::viewTransitionsEnabledKey(v1063);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1065 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1064, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1065 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1066 = WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(v1065);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1067 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1066, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1067 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1068 = WebKit::WebPreferencesKey::visualTranslationEnabledKey(v1067);
  LOBYTE(v1187) = WebKit::defaultVisualTranslationEnabled((WebKit *)v1068);
  int v1188 = 1;
  v1069 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1068, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1069 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1070 = WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(v1069);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1071 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1070, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1071 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1072 = WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(v1071);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1073 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1072, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1073 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1074 = WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(v1073);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1075 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1074, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1075 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1076 = WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(v1075);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1077 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1076, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1077 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1078 = WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(v1077);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1079 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1078, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1079 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1080 = WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(v1079);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1081 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1080, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1081 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1082 = WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(v1081);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1083 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1082, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1083 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1084 = WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(v1083);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1085 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1084, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1085 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1086 = WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(v1085);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1087 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1086, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1087 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1088 = WebKit::WebPreferencesKey::webAuthenticationEnabledKey(v1087);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1089 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1088, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1089 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1090 = WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(v1089);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1091 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1090, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1091 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1092 = WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(v1091);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1093 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1092, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1093 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1094 = WebKit::WebPreferencesKey::webLocksAPIEnabledKey(v1093);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1095 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1094, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1095 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1096 = WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(v1095);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1097 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1096, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1097 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1098 = WebKit::WebPreferencesKey::webShareEnabledKey(v1097);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1099 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1098, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1099 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1100 = WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(v1099);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1101 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1100, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1101 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1102 = WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(v1101);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1103 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1102, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1103 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1104 = WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(v1103);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1105 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1104, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1105 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1106 = WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(v1105);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1107 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1106, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1107 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1108 = WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(v1107);
  LOBYTE(v1187) = WebKit::defaultPeerConnectionEnabledAvailable((WebKit *)v1108);
  int v1188 = 1;
  v1109 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1108, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1109 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1110 = WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(v1109);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1111 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1110, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1111 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1112 = WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(v1111);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1113 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1112, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1113 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1114 = WebKit::WebPreferencesKey::webGLEnabledKey(v1113);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1115 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1114, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1115 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1116 = WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(v1115);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1117 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1116, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1117 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1118 = WebKit::WebPreferencesKey::webGPUEnabledKey(v1117);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1119 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1118, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1119 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1120 = WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(v1119);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1121 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1120, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1121 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1122 = WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(v1121);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1123 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1122, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1123 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1124 = WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(v1123);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1125 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1124, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1125 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1126 = WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(v1125);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1127 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1126, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1127 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1128 = WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(v1127);
  LOBYTE(v1187) = WebKit::defaultPeerConnectionEnabledAvailable((WebKit *)v1128);
  int v1188 = 1;
  v1129 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1128, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1129 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1130 = WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(v1129);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1131 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1130, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1131 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1132 = WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(v1131);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1133 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1132, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1133 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1134 = WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(v1133);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1135 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1134, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1135 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1136 = WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(v1135);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1137 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1136, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1137 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1138 = WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(v1137);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1139 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1138, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1139 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1140 = WebKit::WebPreferencesKey::peerConnectionEnabledKey(v1139);
  LOBYTE(v1187) = WebKit::defaultPeerConnectionEnabledAvailable((WebKit *)v1140);
  int v1188 = 1;
  v1141 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1140, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1141 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1142 = WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(v1141);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1143 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1142, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1143 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1144 = WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(v1143);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1145 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1144, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1145 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1146 = WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(v1145);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1147 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1146, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1147 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1148 = WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(v1147);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1149 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1148, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1149 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1150 = WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(v1149);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1151 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1150, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1151 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1152 = WebKit::WebPreferencesKey::webTransportEnabledKey(v1151);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1153 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1152, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1153 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1154 = WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(v1153);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1155 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1154, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1155 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1156 = WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(v1155);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1157 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1156, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1157 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1158 = WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(v1157);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1159 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1158, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1159 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1160 = WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(v1159);
  LOBYTE(v1187) = WebKit::defaultWriteRichTextDataWhenCopyingOrDragging((WebKit *)v1160);
  int v1188 = 1;
  v1161 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1160, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1161 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1162 = WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(v1161);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1163 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1162, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1163 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  PartyWebsiteDataRemovalLiveOnTestingEnabledKeCGFloat y = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(v1163);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1165 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)PartyWebsiteDataRemovalLiveOnTestingEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1165 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  PartyWebsiteDataRemovalReproTestingEnabledKeCGFloat y = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(v1165);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1167 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)PartyWebsiteDataRemovalReproTestingEnabledKey, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1167 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1168 = WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(v1167);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1169 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1168, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1169 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1170 = WebKit::WebPreferencesKey::altitudeAngleEnabledKey(v1169);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1171 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1170, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1171 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1172 = WebKit::WebPreferencesKey::azimuthAngleEnabledKey(v1171);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1173 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1172, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1173 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1174 = WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(v1173);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1175 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1174, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1175 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1176 = WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(v1175);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1177 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1176, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1177 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1178 = WebKit::WebPreferencesKey::httpEquivEnabledKey(v1177);
  LOBYTE(v1187) = 1;
  int v1188 = 1;
  v1179 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1178, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1179 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1180 = WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(v1179);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1181 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1180, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1181 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1182 = WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(v1181);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  v1183 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1182, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    v1183 = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  v1184 = WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(v1183);
  LOBYTE(v1187) = 0;
  int v1188 = 1;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1EB35A388, (WTF::StringImpl **)v1184, (const WTF::StringImpl *)&v1187, (uint64_t)v1186);
  if (v1188 != -1) {
    ((void (*)(unsigned char *, unint64_t *))off_1EEA0C058[v1188])(v1186, &v1187);
  }
  return &qword_1EB35A388;
}

uint64_t WebKit::defaultCaptureAudioInGPUProcessEnabled(WebKit *this)
{
  return 1;
}

uint64_t WebKit::defaultCaptureAudioInUIProcessEnabled(WebKit *this)
{
  return 0;
}

uint64_t WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(WebKit *this)
{
    return WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK != 0;
  uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
  WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK = result;
  return result;
}

uint64_t WebKit::defaultManageCaptureStatusBarInGPUProcessEnabled(WebKit *this)
{
  isMobileSafarunsigned int i = (WebCore::IOSApplication *)WebCore::IOSApplication::isMobileSafari(this);
  if (isMobileSafari) {
    return 0;
  }
  else {
    return WebCore::IOSApplication::isSafariViewService(isMobileSafari) ^ 1;
  }
}

uint64_t WebKit::defaultPassiveTouchListenersAsDefaultOnDocument(WebKit *this)
{
    return WebKit::defaultPassiveTouchListenersAsDefaultOnDocument(void)::result != 0;
  uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
  WebKit::defaultPassiveTouchListenersAsDefaultOnDocument(void)::uint64_t result = result;
  return result;
}

uint64_t WebKit::defaultTextAutosizingUsesIdempotentMode(WebKit *this)
{
  return PAL::currentUserInterfaceIdiomIsSmallScreen(this) ^ 1;
}

BOOL WebKit::defaultShouldTakeNearSuspendedAssertion(WebKit *this)
{
  {
    int v1 = WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK;
  }
  else
  {
    int v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK = v1;
  }
  return v1 == 0;
}

uint64_t WebKit::defaultUseAsyncUIKitInteractions(WebKit *this)
{
  isIBooks = (WebKit *)WebCore::CocoaApplication::isIBooks(this);
  if (isIBooks) {
    return 0;
  }

  return WebKit::isAsyncTextInputFeatureFlagEnabled(isIBooks);
}

uint64_t WebKit::defaultPopoverAttributeEnabled(WebKit *this)
{
    return WebKit::defaultPopoverAttributeEnabled(void)::newSDK != 0;
  uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
  WebKit::defaultPopoverAttributeEnabled(void)::newSDK = result;
  return result;
}

BOOL WebKit::defaultShowModalDialogEnabled(WebKit *this)
{
  {
    int v1 = WebKit::defaultShowModalDialogEnabled(void)::newSDK;
  }
  else
  {
    int v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShowModalDialogEnabled(void)::newSDK = v1;
  }
  return v1 == 0;
}

uint64_t WebKit::defaultShouldPrintBackgrounds(WebKit *this)
{
    return WebKit::defaultShouldPrintBackgrounds(void)::result != 0;
  uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
  WebKit::defaultShouldPrintBackgrounds(void)::uint64_t result = result;
  return result;
}

uint64_t WebKit::defaultMediaSourceEnabled(WebKit *this)
{
  return PAL::deviceClassIsSmallScreen(this) ^ 1;
}

uint64_t *WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::threadedScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectionFlippingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorStartsAttachedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorAttachmentSideKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorAttachedHeightKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorAttachedWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textExtractionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usesSingleWebProcessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorWindowFrameKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceCompositingModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::safeBrowsingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fasterClicksEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::vp8DecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useARKitForModelKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useARKitForModelKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::databasesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::databasesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowTestOnlyIPCKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::tabsToLinksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::tabsToLinksKey(void)::key;
}

void IPC::handleMessage<Messages::WebPage::RegisterUIProcessAccessibilityTokens,WebKit::WebPage,WebKit::WebPage,void ()(std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>>(v5, a1);
  if (v6)
  {
    uint64_t v3 = v5[0];
    uint64_t v4 = v5[1];
    WebKit::WebPage::registerUIProcessAccessibilityTokens(a2, v3, v4);
  }
}

void *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[32])
  {
    return (void *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(unsigned char *a1, void *a2)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>((uint64_t)a1, a2, (uint64_t)v5);
  }
  *a1 = 0;
  a1[32] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a1 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    long long v7 = v8;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v7;
    char v6 = 1;
LABEL_4:
    *(unsigned char *)(a1 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

void WebKit::anonymous namespace'::RemoteImageBufferSetProxyFlusher::~RemoteImageBufferSetProxyFlusher(WebKit::_anonymous_namespace_::RemoteImageBufferSetProxyFlusher *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

{
  uint64_t v3;

  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v3, a2);
  }
}

uint64_t WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(uint64_t result, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    if (*(unsigned char *)(result + 160) && *(unsigned char *)(result + 80))
    {
      uint64_t v2 = *(unsigned int *)(result + 72);
      if (v2 != -1)
      {
        uint64_t v3 = (WTF *)result;
        off_1EE9E9D58[v2]((int)&v4, (WTF::MachSendRight *)(result + 8));
        uint64_t result = (uint64_t)v3;
      }
      *(_DWORD *)(result + 72) = -1;
    }
    return WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

void __destroy_helper_block_e8_32c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (v1) {
}
  }

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setBorderWidth(WebKit::PlatformCALayerRemoteTiledBacking *this, float a2)
{
  return MEMORY[0x1F416DE88](*((void *)this + 105), a2 * 0.5);
}

uint64_t WebKit::runInitializationCode(WebKit *this, void *a2)
{
  uint64_t v2 = (WebCore *)[MEMORY[0x1E4F29060] isMainThread];
  if (v2)
  {
    WebCore::initializeCommonAtomStrings(v2);
    inited = (JSC *)InitWebCoreThreadSystemInterface();
    char v4 = (WTF *)JSC::initialize(inited);
    size_t v5 = (WebCore *)WTF::initializeMainThread(v4);
    return WebCore::populateJITOperations(v5);
  }
  else
  {
    uint64_t result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebPage::WebPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = buf;
  uint64_t v285 = *MEMORY[0x1E4F143B8];
  long long v7 = (uint64_t *)(a3 + 452);
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)(a1 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  uint64_t v212 = a2;
  char v213 = (unsigned int *)(a1 + 24);
  long long v8 = (unsigned int *)(a1 + 16);
  *(void *)a1 = &unk_1EEA00780;
  *(void *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = &unk_1EEA007C8;
  *(void *)(a1 + 32) = &unk_1EEA00800;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = *(void *)a3;
  *(unsigned char *)(a1 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(unsigned char *)(a3 + 345);
  WebKit::DrawingArea::create((WebKit::WebPage *)a1, a3, (uint64_t *)(a1 + 72));
  char v9 = (WebKit::WebPageTesting *)WTF::fastMalloc((WTF *)0x18);
  *(void *)(a1 + 80) = WebKit::WebPageTesting::WebPageTesting(v9, (WebKit::WebPage *)a1);
  uint64_t v10 = *(void *)(a3 + 1424);
  uint64_t v11 = *(void *)(a3 + 1432);
  uint64_t v12 = API::Object::newObject(0x78uLL, 137);
  *(void *)(a1 + 88) = WebKit::WebFrame::WebFrame(v12, a1, v10, v11);
  *(void *)(a1 + 96) = 0;
  uint64_t v214 = (_DWORD **)(a1 + 96);
  *(void *)(a1 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a3 + 64);
  *(_DWORD *)(a1 + 18WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 188) = 1;
  *(_WORD *)(a1 + 189) = *(_WORD *)(a3 + 192);
  *(_DWORD *)(a1 + 19WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *(_DWORD *)(a3 + 1166);
  *(void *)(a1 + 26WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_WORD *)(a1 + 199) = 0;
  *(_DWORD *)(a1 + 195) = 0;
  *(void *)(a1 + 252) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 20WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  unsigned int v13 = (WebKit::ViewGestureGeometryCollector *)WTF::fastMalloc((WTF *)0x30);
  char v14 = WebKit::ViewGestureGeometryCollector::ViewGestureGeometryCollector(v13, (WebKit::WebPage *)a1);
  *(void *)(a1 + 272) = v14;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  uint64_t v15 = (WTF::RunLoop *)WTF::RunLoop::main(v14);
  WTF::RunLoop::Timer::Timer<WebKit::WebPage>((WTF::RunLoop::TimerBase *)(a1 + 296), v15, a1);
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v16 = &unk_1EE9F0D88;
  *(void *)(a1 + 34WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v16;
  unint64_t v17 = (void *)WTF::fastMalloc((WTF *)8);
  *unint64_t v17 = &unk_1EEA00850;
  *(void *)(a1 + 352) = v17;
  unint64_t v18 = (void *)WTF::fastMalloc((WTF *)8);
  void *v18 = &unk_1EEA008C8;
  *(void *)(a1 + 360) = v18;
  char v19 = (void *)WTF::fastMalloc((WTF *)8);
  *char v19 = &unk_1EEA009F0;
  *(void *)(a1 + 368) = v19;
  uint64_t v20 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v20 = &unk_1EEA00A50;
  *(void *)(a1 + 376) = v20;
  *(_OWORD *)(a1 + 4std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 38WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  unsigned int v21 = (WebKit::FindController *)WTF::fastMalloc((WTF *)0x58);
  *(void *)(a1 + 448) = WebKit::FindController::FindController(v21, (WebKit::WebPage *)a1);
  unsigned int v22 = (WebKit::WebFoundTextRangeController *)WTF::fastMalloc((WTF *)0x50);
  *(void *)(a1 + 456) = WebKit::WebFoundTextRangeController::WebFoundTextRangeController(v22, (WebKit::WebPage *)a1);
  *(void *)(a1 + 46WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  unsigned int v23 = (WebKit::WebPageInspectorTargetController *)WTF::fastMalloc((WTF *)0x40);
  unsigned int v24 = WebKit::WebPageInspectorTargetController::WebPageInspectorTargetController(v23, (WebKit::WebPage *)a1);
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 50WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 488) = v24;
  *(unsigned char *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  WebKit::WebUserContentController::getOrCreate(*(void *)(a3 + 912), (uint64_t **)(a1 + 624));
  *(void *)(a1 + 632) = 0;
  xpc_object_t v25 = (WebKit::WebScreenOrientationManager *)WTF::fastMalloc((WTF *)0x50);
  *(void *)(a1 + 640) = WebKit::WebScreenOrientationManager::WebScreenOrientationManager(v25, (WebKit::WebPage *)a1);
  uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v26 = 0;
  v26[1] = 0;
  v26[2] = a1;
  *(void *)(a1 + 648) = v26;
  uint64_t v27 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v27 = &unk_1EE9F1980;
  *(void *)(v27 + 8) = 0;
  *(void *)(v27 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = a1;
  *(void *)(v27 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(v27 + 32) = 0;
  *(void *)(v27 + 40) = 0;
  *(unsigned char *)(v27 + 48) = 0;
  *(void *)(a1 + 656) = v27;
  uint64_t v28 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v28 = &unk_1EE9E78A0;
  v28[1] = 0;
  v28[3] = 0;
  v28[4] = 0;
  v28[2] = a1;
  *(void *)(a1 + 66WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v28;
  *(void *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 70WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  uint64_t v29 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v29 = &unk_1EEA00C38;
  *((void *)v29 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = a1;
  *(void *)(a1 + 736) = v29;
  *(void *)(a1 + 74WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0x3FD3333333333333;
  uint64_t v30 = (WTF::RunLoop *)WTF::RunLoop::main(v29);
  WTF::RunLoop::Timer::Timer<PAL::HysteresisActivity>((WTF::RunLoop::TimerBase *)(a1 + 752), v30, a1 + 736, (uint64_t)PAL::HysteresisActivity::hysteresisTimerFired, 0);
  char v31 = 0;
  uint64_t v32 = 0;
  *(unsigned char *)(a1 + 78WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_WORD *)(a1 + 792) = *(_WORD *)(a3 + 256);
  *(_WORD *)(a1 + 79WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_DWORD *)buf = 134480385;
  LOWORD(v256) = 8208;
  BYTE2(v256) = 64;
  do
    v31 |= buf[v32++];
  while (v32 != 7);
  *(unsigned char *)(a1 + 796) = v31;
  *(void *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 848) = 16843009;
  *(_WORD *)(a1 + 852) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(unsigned char *)(a1 + 860) = 0;
  *(unsigned char *)(a1 + 863) = 0;
  *(unsigned char *)(a1 + 908) = 0;
  *(unsigned char *)(a1 + 9std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 90WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(unsigned char *)(a1 + 92WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(unsigned char *)(a3 + 1179);
  *(void *)(a1 + 942) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  WebCore::ViewportConfiguration::ViewportConfiguration((WebCore::ViewportConfiguration *)(a1 + 952));
  *(void *)(a1 + 1176) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 118WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 1185) = *(unsigned char *)(a3 + 372);
  *(unsigned char *)(a1 + 1192) = 0;
  *(unsigned char *)(a1 + 122WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 126WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_WORD *)(a1 + 128WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 257;
  *(unsigned char *)(a1 + 1286) = 1;
  *(unsigned char *)(a1 + 1287) = *(unsigned char *)(a3 + 496);
  *(_OWORD *)(a1 + 1288) = 0u;
  *(void *)(a1 + 130WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *v7;
  *(void *)(a1 + 1312) = v7[1];
  *(void *)(a1 + 1320) = v7[2];
  *(void *)(a1 + 1328) = v7[3];
  *(unsigned char *)(a1 + 1336) = 0;
  *(unsigned char *)(a1 + 1368) = 0;
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)(a1 + 1376));
  *(_DWORD *)(a1 + 1480) = *(_DWORD *)(a3 + 488);
  *(unsigned char *)(a1 + 148WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(unsigned char *)(a3 + 492);
  *(unsigned char *)(a1 + 1485) = 0;
  *(_DWORD *)(a1 + 1532) = 0;
  *(void *)(a1 + 1536) = 0;
  *(unsigned char *)(a1 + 154WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 1552) = 0;
  *(_OWORD *)(a1 + 1513) = 0u;
  *(_OWORD *)(a1 + 150WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  WebCore::DeferrableOneShotTimer::DeferrableOneShotTimer<WebKit::WebPage>(a1 + 1576, a1, (uint64_t)WebKit::WebPage::updateFocusedElementInformation, 0, 0.1);
  *(void *)(a1 + 1640) = 0;
  *(unsigned char *)(a1 + 1648) = 0;
  *(unsigned char *)(a1 + 166WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 1672) = 0;
  *(void *)(a1 + 1680) = 0;
  *(unsigned char *)(a1 + 1688) = 0;
  WebCore::Timer::Timer<WebKit::WebPage,WebKit::WebPage>((WebCore::TimerBase *)(a1 + 1696), a1, (uint64_t)WebKit::WebPage::layerVolatilityTimerFired, 0);
  *(void *)(a1 + 178WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(unsigned char *)(a1 + 1776) = 0;
  *(void *)(a1 + 1792) = 0x11040000FFFFFFFFLL;
  *(unsigned char *)(a1 + 1800) = 1;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_WORD *)(a1 + 182WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(_WORD *)(a3 + 8);
  *(unsigned char *)(a1 + 1826) = 1;
  MEMORY[0x199731060](a1 + 1832, "App nap disabled for page due to user activity", 47);
  *(void *)(a1 + 1888) = 0;
  *(unsigned char *)(a1 + 1896) = 0;
  *(unsigned char *)(a1 + 20std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(_DWORD *)(a1 + 202WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 256;
  *(_DWORD *)(a1 + 2028) = 2;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(unsigned char *)(a1 + 2048) = *(unsigned char *)(a3 + 569);
  int v33 = *(_DWORD **)(a3 + 576);
  if (v33) {
    *v33 += 2;
  }
  *(void *)(a1 + 2056) = v33;
  *(_OWORD *)(a1 + 206WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(_OWORD *)(a3 + 584);
  *(void *)(a1 + 2112) = 0;
  *(void *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(void *)(a1 + 2103) = 0;
  *(void *)(a1 + 2120) = *(void *)(a3 + 80);
  *(unsigned char *)(a1 + 2128) = 0;
  *(unsigned char *)(a1 + 2136) = 0;
  *(void *)(a1 + 2140) = 0;
  *(void *)(a1 + 2152) = 0;
  WebCore::Timer::Timer<WebKit::WebPage,WebKit::WebPage>((WebCore::TimerBase *)(a1 + 2160), a1, (uint64_t)WebKit::WebPage::textAutoSizingAdjustmentTimerFired, 0);
  *(_OWORD *)(a1 + 22std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0u;
  WTF::AtomString::AtomString((WTF::AtomString *)(a1 + 2232), (WTF::AtomStringImpl **)(a3 + 1072));
  int v34 = *(_DWORD **)(a3 + 1152);
  if (v34) {
    *v34 += 2;
  }
  *(void *)(a1 + 2240) = v34;
  *(unsigned char *)(a1 + 2248) = 1;
  *(unsigned char *)(a1 + 2249) = *(unsigned char *)(a3 + 1172);
  *(unsigned char *)(a1 + 2250) = 0;
  *(unsigned char *)(a1 + 225WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *(unsigned char *)(a3 + 1173);
  *(unsigned char *)(a1 + 2252) = 1;
  *(_DWORD *)(a1 + 2253) = 0;
  *(unsigned char *)(a1 + 2257) = 0;
  WebCore::DeferrableOneShotTimer::DeferrableOneShotTimer<WebKit::WebPage>(a1 + 2264, a1, (uint64_t)WebKit::WebPage::updateLayoutViewportHeightExpansionTimerFired, 0, 0.2);
  *(unsigned char *)(a1 + 2328) = 0;
  *(void *)(a1 + 2336) = 0;
  *(unsigned char *)(a1 + 234WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2368) = 0;
  unsigned int v35 = (WTF::StringImpl **)(a1 + 2376);
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(unsigned char *)(a1 + 242WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(unsigned char *)(a3 + 1178);
  uint64_t v36 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v36 + 8) = 1;
  *(void *)uint64_t v36 = &unk_1EE9F86D0;
  *(unsigned char *)(v36 + 12) = 0;
  *(void *)(a1 + 2432) = v36;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(void *)(a1 + 2472) = 0;
  unsigned int v37 = (WebKit::TextAnimationController *)WTF::fastMalloc((WTF *)0x160);
  *(void *)(a1 + 2480) = WebKit::TextAnimationController::TextAnimationController(v37, (WebKit::WebPage *)a1);
  *(_OWORD *)(a1 + 2488) = 0u;
  unsigned int v38 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 134218240;
    uint64_t v256 = a1;
    __int16 v257 = 2048;
    uint64_t v258 = v40;
    _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::constructor:", buf, 0x16u);
  }
  __int16 v41 = *(unsigned __int8 *)(a3 + 1177);
  WebKit::cachedAllowsRequest(void)::allowsRequest = v41 | 0x100;
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a3 + 16), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, v39))
  {
    if (*(unsigned char *)(a1 + 194))
    {
      if (!*(unsigned char *)(a1 + 113))
      {
        if (*(unsigned char *)(a1 + 191))
        {
          if (*(unsigned char *)(a1 + 192))
          {
            if (*(unsigned char *)(a1 + 193))
            {
              WebCore::ProcessCapabilities::setHardwareAcceleratedDecodingDisabled((WebCore::ProcessCapabilities *)1);
              WebCore::ProcessCapabilities::setCanUseAcceleratedBuffers(0);
              char v203 = _MergedGlobals_133;
              _MergedGlobals_133 = 1;
              if ((v203 & 1) == 0) {
                CGImageSourceDisableHardwareDecoding();
              }
            }
          }
        }
      }
    }
  }
  uint64_t v42 = (uint64_t)&qword_1EB35A000;
  {
    char v204 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v204);
  }
  uint64_t v43 = (_DWORD *)WebKit::WebProcess::webPageGroup(WebKit::WebProcess::singleton(void)::process, (uint64_t *)(a3 + 88));
  WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>::operator=(v214, v43);
  int v45 = *(unsigned __int8 *)(a3 + 1392);
  {
    long long v205 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v205);
  }
  uint64_t BoolValueForKey = WebKit::WebProcess::singleton(void)::process;
  unsigned int add = *(unsigned __int8 *)(WebKit::WebProcess::singleton(void)::process + 672);
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672)) {
    goto LABEL_249;
  }
  uint64_t v48 = (WebKit::WebEditorClient *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v252 = (uint64_t)WebKit::WebEditorClient::WebEditorClient(v48, (WebKit::WebPage *)a1);
  uint64_t v49 = *(void *)(a3 + 80);
  uint64_t v50 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v50 + 8) = 1;
  *(void *)uint64_t v50 = &unk_1EE9F2890;
  *(void *)(v50 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v49;
  long long v251 = (unsigned int *)v50;
  uint64_t v51 = (WebKit::LibWebRTCProvider *)WTF::fastMalloc((WTF *)0xD0);
  v250 = WebKit::LibWebRTCProvider::LibWebRTCProvider(v51, (WebKit::WebPage *)a1);
  {
    char v206 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v206);
  }
  int v52 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 368);
  ++v52[2];
  uint64_t v53 = *(_DWORD **)(a1 + 624);
  ++v53[2];
  long long v248 = v53;
  long long v249 = v52;
  char v54 = (WebKit::WebBackForwardListProxy *)WTF::fastMalloc((WTF *)0x28);
  BOOL v247 = WebKit::WebBackForwardListProxy::WebBackForwardListProxy(v54, (WebKit::WebPage *)a1);
  {
    uint64_t v207 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v207);
  }
  uint64_t v55 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 408);
  ++v55[2];
  char v246 = v55;
  uint64_t v56 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v56 = &unk_1EE9F7160;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v213, a1 + 16);
  uint64_t v57 = *(atomic_uint **)v213;
  if (*(void *)v213) {
    atomic_fetch_add(v57, 1u);
  }
  v56[1] = v57;
  long long v245 = v56;
  uint64_t v58 = *(CFTypeRef **)(a1 + 88);
  CFRetain(v58[1]);
  v244 = v58;
  WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>((uint64_t)&v215, &v244, v45 != 0);
  long long v241 = *(_OWORD *)(a3 + 1400);
  uint64_t v242 = *(void *)(a3 + 1416);
  WebKit::frameFromIdentifier((WebKit::WebProcess *)&v243, (uint64_t)&v241);
  char v59 = (void *)WTF::fastMalloc((WTF *)0x18);
  *char v59 = &unk_1EEA00CD8;
  v59[1] = v212;
  v59[2] = 0;
  BOOL v240 = v59;
  char v60 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v60 = &unk_1EE9EF3E8;
  v60[1] = a1;
  long long v239 = v60;
  {
    char v208 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v208);
  }
  uint64_t v61 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v62 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 400);
  ++v62[2];
  long long v238 = v62;
  uint64_t v63 = *(WTF::StringImpl **)(v61 + 784);
  if (v63) {
    *(_DWORD *)v63 += 2;
  }
  uint64_t v235 = v63;
  uint64_t v254 = *(void *)(v61 + 792);
  WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebStorageProvider,WTF::String,std::array<unsigned char,8ul>>((_DWORD **)&v235, &v254, &v236);
  char v64 = v236;
  long long v236 = 0;
  char v237 = v64;
  unint64_t v65 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v65 = &unk_1EE9F1A08;
  v65[1] = a1;
  char v234 = v65;
  {
    char v209 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v209);
  }
  char v66 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 376);
  ++v66[2];
  uint64_t v67 = *(_DWORD **)(a1 + 2432);
  ++v67[2];
  char v232 = v67;
  long long v233 = v66;
  long long v68 = (WebKit::WebPaymentCoordinator *)WTF::fastMalloc((WTF *)0x48);
  v231 = WebKit::WebPaymentCoordinator::WebPaymentCoordinator(v68, (WebKit::WebPage *)a1);
  uint64_t v69 = (WebKit::WebChromeClient *)WTF::fastMalloc((WTF *)0x18);
  BOOL v230 = WebKit::WebChromeClient::WebChromeClient(v69, (WebKit::WebPage *)a1);
  uint64_t v70 = *(void *)(a1 + 40);
  uint64_t v71 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v71 = &unk_1EE9F5B10;
  *(void *)(v71 + 8) = v70;
  *(unsigned char *)(v71 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 1;
  uint64_t v229 = v71;
  WebCore::PageConfiguration::PageConfiguration();
  uint64_t v72 = v229;
  uint64_t v229 = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  uint64_t v73 = v230;
  BOOL v230 = 0;
  char v6 = (uint8_t *)(a3 + 16);
  long long v7 = &qword_1EB35A000;
  if (v73) {
    (*(void (**)(WebKit::WebChromeClient *))(*(void *)v73 + 1928))(v73);
  }
  uint64_t v74 = v231;
  v231 = 0;
  uint64_t v42 = a1 + 16;
  if (v74) {
    (*(void (**)(WebKit::WebPaymentCoordinator *))(*(void *)v74 + 152))(v74);
  }
  uint64_t v75 = v232;
  char v232 = 0;
  long long v8 = (unsigned int *)(a1 + 24);
  if (v75)
  {
    if (v75[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v75 + 8))(v75);
    }
    else {
      --v75[2];
    }
  }
  uint64_t v76 = v233;
  long long v233 = 0;
  if (v76)
  {
    if (v76[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v76 + 8))(v76);
    }
    else {
      --v76[2];
    }
  }
  uint64_t v77 = v234;
  char v234 = 0;
  if (v77) {
    (*(void (**)(void *))(*v77 + 8))(v77);
  }
  uint64_t v78 = v237;
  char v237 = 0;
  if (v78) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v78 + 8))(v78);
  }
  char v79 = v236;
  long long v236 = 0;
  if (v79) {
    std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100]((int)&v236, v79);
  }
  uint64_t v80 = v235;
  uint64_t v235 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2) {
      WTF::StringImpl::destroy(v80, v79);
    }
    else {
      *(_DWORD *)v80 -= 2;
    }
  }
  int v81 = v238;
  long long v238 = 0;
  if (v81)
  {
    if (v81[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v81 + 8))(v81);
    }
    else {
      --v81[2];
    }
  }
  uint64_t v82 = v239;
  long long v239 = 0;
  if (v82) {
    (*(void (**)(void *))(*v82 + 8))(v82);
  }
  char v83 = v240;
  BOOL v240 = 0;
  if (v83) {
    (*(void (**)(void *))(*v83 + 8))(v83);
  }
  uint64_t v84 = v243;
  uint64_t v243 = 0;
  if (v84) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v84 + 8));
  }
  if (DWORD2(v215) != -1) {
    ((void (*)(uint64_t *, long long *))off_1EEA00AE8[DWORD2(v215)])(&v243, &v215);
  }
  DWORD2(v215) = -1;
  if (v244) {
    CFRelease(v244[1]);
  }
  uint64_t v85 = v245;
  long long v245 = 0;
  if (v85) {
    (*(void (**)(void *))(*v85 + 8))(v85);
  }
  __int16 v86 = v246;
  char v246 = 0;
  if (v86)
  {
    if (v86[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v86 + 120))(v86);
    }
    else {
      --v86[2];
    }
  }
  double v87 = v247;
  BOOL v247 = 0;
  if (v87)
  {
    if (*((_DWORD *)v87 + 2) == 1) {
      (*(void (**)(WebKit::WebBackForwardListProxy *))(*(void *)v87 + 8))(v87);
    }
    else {
      --*((_DWORD *)v87 + 2);
    }
  }
  uint64_t v88 = v248;
  long long v248 = 0;
  if (v88)
  {
    if (v88[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v88 + 8))(v88);
    }
    else {
      --v88[2];
    }
  }
  char v89 = v249;
  long long v249 = 0;
  if (v89)
  {
    if (v89[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v89 + 16))(v89);
    }
    else {
      --v89[2];
    }
  }
  uint64_t v90 = v250;
  v250 = 0;
  if (v90) {
    (*(void (**)(WebKit::LibWebRTCProvider *))(*(void *)v90 + 8))(v90);
  }
  uint64_t v91 = v251;
  long long v251 = 0;
  if (v91 && atomic_fetch_add((atomic_uint *volatile)v91 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v91 + 2);
    (*(void (**)(unsigned int *))(*(void *)v91 + 24))(v91);
  }
  uint64_t v92 = v252;
  uint64_t v252 = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
  }
  char v93 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v93 = &unk_1EE9F60B8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v213, a1 + 16);
  char v94 = *(atomic_uint **)v213;
  if (*(void *)v213) {
    atomic_fetch_add(v94, 1u);
  }
  v93[1] = v94;
  char v95 = v259;
  int v259 = v93;
  if (v95) {
    (*(void (**)(void *))(*v95 + 80))(v95);
  }
  unsigned int v96 = (WebKit::WebInspectorClient *)WTF::fastMalloc((WTF *)0x38);
  WebKit::WebInspectorClient::WebInspectorClient(v96, (WebKit::WebPage *)a1);
  unsigned int v97 = v260;
  uint64_t v260 = v96;
  if (v97) {
    (*(void (**)(WebKit::WebInspectorClient *))(*(void *)v97 + 8))(v97);
  }
  uint64_t v98 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v98 + 8) = 0;
  *(void *)uint64_t v98 = &unk_1EE9F5BA8;
  *(void *)(v98 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = a1;
  uint64_t v99 = v265;
  uint64_t v265 = v98;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 56))(v99);
  }
  unsigned __int8 v100 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v100 = &unk_1EE9F6A70;
  v100[1] = a1;
  long long v101 = v266;
  uint64_t v266 = v100;
  if (v101) {
    (*(void (**)(void *))(*v101 + 16))(v101);
  }
  uint64_t v102 = *(void *)(a1 + 640);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v102 + 8), v102);
  long long v103 = *(atomic_uint **)(v102 + 8);
  if (v103) {
    atomic_fetch_add(v103, 1u);
  }
  uint64_t BoolValueForKey = (uint64_t)v272;
  v272 = (WTF *)v103;
  if (BoolValueForKey)
  {
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)BoolValueForKey, 0xFFFFFFFF);
    if (add == 1) {
      goto LABEL_250;
    }
  }
  while (1)
  {
    unsigned __int8 v104 = (void *)WTF::fastMalloc((WTF *)0x30);
    *unsigned __int8 v104 = &unk_1EE9F79E0;
    v104[1] = 0;
    v104[2] = a1;
    v104[3] = 0;
    void v104[4] = 0;
    v104[5] = 0;
    long long v105 = v267;
    v267 = v104;
    if (v105) {
      (*(void (**)(void *))(*v105 + 8))(v105);
    }
    unsigned __int8 v106 = (WebKit::WebValidationMessageClient *)WTF::fastMalloc((WTF *)0x28);
    WebKit::WebValidationMessageClient::WebValidationMessageClient(v106, (WebKit::WebPage *)a1);
    long long v107 = v264;
    v264 = v106;
    if (v107) {
      (*(void (**)(WebKit::WebValidationMessageClient *))(*(void *)v107 + 8))(v107);
    }
    WebKit::WebDatabaseProvider::getOrCreate(*((void *)*v214 + 3), &v215);
    unsigned __int8 v108 = v268;
    uint64_t v268 = (WebKit::WebPluginInfoProvider *)v215;
    if (v108)
    {
      if (*((_DWORD *)v108 + 2) == 1) {
        unsigned __int8 v108 = (WebKit::WebPluginInfoProvider *)(*(uint64_t (**)(WebKit::WebPluginInfoProvider *))(*(void *)v108 + 8))(v108);
      }
      else {
        --*((_DWORD *)v108 + 2);
      }
    }
    long long v109 = (_DWORD *)WebKit::WebPluginInfoProvider::singleton(v108);
    WTF::RefPtr<WebCore::PluginInfoProvider,WTF::RawPtrTraits<WebCore::PluginInfoProvider>,WTF::DefaultRefDerefTraits<WebCore::PluginInfoProvider>>::operator=(&v269, v109);
    WebKit::WebStorageNamespaceProvider::getOrCreate((WebKit::WebStorageNamespaceProvider **)&v215);
    unsigned __int8 v110 = v270;
    v270 = (_DWORD *)v215;
    if (v110)
    {
      if (v110[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v110 + 8))(v110);
      }
      else {
        --v110[2];
      }
    }
    WebKit::VisitedLinkTableController::getOrCreate(*(WebKit **)(a3 + 248), (uint64_t **)&v215);
    long long v111 = v271;
    v271 = (_DWORD *)v215;
    if (v111)
    {
      if (v111[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v111 + 8))(v111);
      }
      else {
        --v111[2];
      }
    }
    unsigned __int8 v112 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned __int8 v112 = &unk_1EE9F4CF0;
    v112[1] = 0;
    v112[2] = a1;
    long long v113 = v261;
    uint64_t v261 = v112;
    if (v113) {
      (*(void (**)(void *))(*v113 + 8))(v113);
    }
    unsigned __int8 v114 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned __int8 v114 = &unk_1EE9E7870;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8, v42);
    int v115 = *(atomic_uint **)v8;
    if (*(void *)v8) {
      atomic_fetch_add(v115, 1u);
    }
    v114[1] = v115;
    uint64_t v116 = v262;
    unsigned __int8 v262 = v114;
    if (v116) {
      (*(void (**)(void *))(*v116 + 8))(v116);
    }
    std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ApplicationManifest,false> const&>((WebCore::ApplicationManifest *)&v263, (unsigned __int8 *)(a3 + 624));
    CGRect v117 = (WebKit::WebDeviceOrientationUpdateProvider *)WTF::fastMalloc((WTF *)0x50);
    WebKit::WebDeviceOrientationUpdateProvider::WebDeviceOrientationUpdateProvider(v117, (WebKit::WebPage *)a1);
    CGRect v118 = v273;
    v273 = v117;
    if (v118)
    {
      if (*((_DWORD *)v118 + 2) == 1) {
        (*(void (**)(WebKit::WebDeviceOrientationUpdateProvider *))(*(void *)v118 + 8))(v118);
      }
      else {
        --*((_DWORD *)v118 + 2);
      }
    }
    if (*(unsigned char *)(a3 + 1032))
    {
      WebKit::WebExtensionControllerProxy::getOrCreate((WebKit::WebExtensionControllerProxy **)(a3 + 1000), a1, (uint64_t *)&v215);
      uint64_t v119 = *(void *)(a1 + 632);
      *(void *)(a1 + 632) = v215;
      if (v119) {
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v119 + 16));
      }
    }
    uint64_t v120 = *(unsigned int *)(a1 + 2388);
    if (v120) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*v35, (WTF::StringImpl *)((char *)*v35 + 8 * v120));
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v35, (_DWORD *)(a3 + 1080));
    if (*(_DWORD *)(a1 + 2388)) {
      WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess((WebKit::WebPage *)a1);
    }
    WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(&v215, (uint64_t)v35);
    if (HIDWORD(v275)) {
      WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(v274, (WTF *)((char *)v274 + 32 * HIDWORD(v275)));
    }
    int v122 = v274;
    if (v274)
    {
      v274 = 0;
      LODWORD(v275) = 0;
      WTF::fastFree(v122, v121);
    }
    uint64_t v123 = *((void *)&v215 + 1);
    v274 = (WTF *)v215;
    long long v215 = 0uLL;
    uint64_t v275 = v123;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v215, v121);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(&v276, (void **)(a3 + 1096));
    v278[32] = *(unsigned char *)(a3 + 1104);
    char v277 = *(unsigned char *)(a3 + 1105);
    uint64_t v124 = std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>((WTF::StringImpl *)v278, a3 + 1112);
    __int16 v279 = *(_WORD *)(a3 + 1175);
    if (v281 == *(unsigned char *)(a3 + 1148))
    {
      if (v281) {
        int v280 = *(_DWORD *)(a3 + 1144);
      }
    }
    else if (v281)
    {
      char v281 = 0;
    }
    else
    {
      int v280 = *(_DWORD *)(a3 + 1144);
      char v281 = 1;
    }
    if (!*(unsigned char *)(a3 + 1150))
    {
      int v125 = (WebCore::CrossOriginAccessControlCheckDisabler *)WebCore::CrossOriginAccessControlCheckDisabler::singleton(v124);
      WebCore::CrossOriginAccessControlCheckDisabler::setCrossOriginAccessControlCheckEnabled(v125);
    }
    uint64_t v127 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v127 = &unk_1EE9F50B8;
    v127[1] = a1;
    uint64_t v128 = v283;
    uint64_t v283 = v127;
    if (v128) {
      (*(void (**)(void *))(*v128 + 8))(v128);
    }
    char v284 = *(unsigned char *)(a3 + 1180);
    if ((byte_1EB35A2B9 & 1) == 0)
    {
      WebKit::SandboxExtension::consumePermanently(a3 + 536, v126);
      WebKit::SandboxExtension::consumePermanently(a3 + 552, v129);
      byte_1EB35A2B9 = 1;
    }
    char v282 = *(unsigned char *)(a3 + 495);
    WebCore::Page::create();
    uint64_t v130 = v215;
    *(void *)&long long v215 = 0;
    char v131 = *(_DWORD **)(a1 + 48);
    *(void *)(a1 + 48) = v130;
    if (v131)
    {
      WTF::RefCounted<WebCore::Page>::deref(v131);
      uint64_t v132 = (_DWORD *)v215;
      *(void *)&long long v215 = 0;
      if (v132) {
        WTF::RefCounted<WebCore::Page>::deref(v132);
      }
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 112) + 680) |= 0x200000uLL;
    if (*(unsigned char *)(a3 + 180)) {
      (*(void (**)(void, void, void))(**(void **)(*(void *)(a1 + 48) + 48) + 152))(*(void *)(*(void *)(a1 + 48) + 48), *(unsigned int *)(a3 + 176), *(void *)(a3 + 184));
    }
    uint64_t v133 = *(void *)(a1 + 2120);
    if (v133 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198662044);
    }
    WebKit::WebStorageNamespaceProvider::incrementUseCount(v133);
    WebKit::WebPage::updatePreferences((WebKit::WebPage *)a1, (const WebKit::WebPreferencesStore *)v6);
    WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory((WebCore::DeprecatedGlobalSettings *)1);
    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>((WebCore::Color *)(a1 + 1792), a3 + 1040);
    WebCore::Page::setDeviceScaleFactor(*(WebCore::Page **)(a1 + 48), *(float *)(a3 + 260));
    uint64_t v135 = *(unsigned char **)(a1 + 72);
    int v136 = *(unsigned __int8 *)(a3 + 568);
    if (v135[65] != v136)
    {
      v135[65] = v136;
      (*(void (**)(unsigned char *))(*(void *)v135 + 264))(v135);
    }
    if (*(unsigned char *)(a3 + 369)) {
      WebKit::WebPage::freezeLayerTree(a1, 32);
    }
    {
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    *(unsigned char *)(a1 + 1823) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)v6, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, v134);
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72)))
    {
      long long v137 = *(void **)(*(void *)(a1 + 48) + 112);
      int v138 = v137 + 83;
      uint64_t v139 = v137[90];
      uint64_t v140 = v137[89];
      uint64_t v141 = v137[88];
      uint64_t v142 = v137[87];
      uint64_t v143 = v137[86];
      uint64_t v144 = v137[85];
      uint64_t v145 = v137[84];
      uint64_t v146 = v137[83];
      if (*(unsigned char *)(a1 + 1823))
      {
        uint64_t v147 = 0x40000;
        goto LABEL_144;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 1823) = 0;
      uint64_t v148 = *(void **)(*(void *)(a1 + 48) + 112);
      int v138 = v148 + 83;
      uint64_t v139 = v148[90];
      uint64_t v140 = v148[89];
      uint64_t v141 = v148[88];
      uint64_t v142 = v148[87];
      uint64_t v143 = v148[86];
      uint64_t v144 = v148[85];
      uint64_t v145 = v148[84];
      uint64_t v146 = v148[83];
    }
    uint64_t v147 = 0;
LABEL_144:
    *int v138 = v146;
    v138[1] = v145;
    v138[2] = v144;
    v138[3] = v143;
    v138[4] = v147 | v142 & 0xFFFFFFFFFFFBFFFFLL;
    v138[5] = v141;
    v138[6] = v140;
    v138[7] = v139;
    uint64_t v149 = *(void *)(a1 + 48);
    *(void *)(*(void *)(v149 + 112) + 312) = 0x7FF0000000000000;
    WebKit::WebFrame::initWithCoreMainFrame(*(WebKit::WebFrame **)(a1 + 88), (WebKit::WebPage *)a1, *(WebCore::Frame **)(v149 + 160));
    if (*(unsigned char *)(a3 + 1392))
    {
      uint64_t v150 = *(unsigned int *)(a3 + 1260);
      if (v150)
      {
        uint64_t v151 = *(void *)(a3 + 1248);
        uint64_t v152 = 40 * v150;
        do
        {
          WebKit::WebPage::constructFrameTree(a1, *(void *)(a1 + 88), v151);
          v151 += 40;
          v152 -= 40;
        }
        while (v152);
        unsigned int add = *(unsigned __int8 *)(a3 + 1392);
        if (!*(unsigned char *)(a3 + 1392)) {
          goto LABEL_249;
        }
      }
      uint64_t BoolValueForKey = WebCore::Page::setMainFrameURL(*(WebCore::Page **)(a1 + 48), (const WTF::URL *)(a3 + 1184));
      unsigned int add = *(unsigned __int8 *)(a3 + 1392);
      if (!*(unsigned char *)(a3 + 1392)) {
        goto LABEL_249;
      }
      LOBYTE(v215) = 0;
      char v228 = 0;
      if (*(unsigned char *)(a3 + 1384))
      {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v215, (void **)(a3 + 1264));
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v215 + 8, a3 + 1272);
        WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v216 + 8, a3 + 1288);
        uint64_t v153 = *(_DWORD **)(a3 + 1304);
        if (v153) {
          *v153 += 2;
        }
        uint64_t v218 = v153;
        uint64_t v154 = *(_DWORD **)(a3 + 1312);
        if (v154) {
          *v154 += 2;
        }
        char v219 = v154;
        uint64_t v155 = *(_DWORD **)(a3 + 1320);
        if (v155) {
          *v155 += 2;
        }
        char v220 = v155;
        uint64_t v156 = *(_DWORD **)(a3 + 1328);
        if (v156) {
          *v156 += 2;
        }
        BOOL v221 = v156;
        __int16 v222 = *(_WORD *)(a3 + 1336);
        char v223 = *(unsigned char *)(a3 + 1338);
        char v224 = *(unsigned char *)(a3 + 1344);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&v225, (void **)(a3 + 1352));
        char v227 = *(unsigned char *)(a3 + 1376);
        long long v226 = *(_OWORD *)(a3 + 1360);
        char v228 = 1;
        uint64_t v157 = *(void *)(*(void *)(a1 + 88) + 24);
        if (!v157) {
          goto LABEL_166;
        }
        uint64_t v158 = *(void *)(v157 + 8);
        if (!v158) {
          goto LABEL_166;
        }
        if (!*(unsigned char *)(v158 + 144)) {
          goto LABEL_166;
        }
        uint64_t BoolValueForKey = *(void *)(v158 + 264);
        if (!BoolValueForKey) {
          goto LABEL_166;
        }
        unsigned int add = *(unsigned __int8 *)(a3 + 1392);
        if (!*(unsigned char *)(a3 + 1392)) {
          goto LABEL_249;
        }
        unsigned int add = *(unsigned __int8 *)(a3 + 1384);
        if (!*(unsigned char *)(a3 + 1384)) {
          goto LABEL_249;
        }
        WebKit::WebRemoteFrameClient::applyWebsitePolicies((unsigned int *)BoolValueForKey, a3 + 1264);
        if (v228) {
LABEL_166:
        }
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v215, v44);
      }
    }
    (*(void (**)(void, uint8_t *))(**(void **)(a1 + 72) + 104))(*(void *)(a1 + 72), v6);
    char v160 = *(WebCore::Settings **)(*(void *)(a1 + 48) + 112);
    if ((*(unsigned char *)(a3 + 344) != 0) != (*((unsigned char *)v160 + 669) & 4) >> 2) {
      WebCore::Settings::setBackgroundShouldExtendBeyondPage(v160);
    }
    WebKit::WebPage::setPageAndTextZoomFactors((WebKit::WebPage *)a1, *(double *)(a3 + 280), *(double *)(a3 + 272), v159);
    uint64_t v161 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v161 = &unk_1EE9F6E08;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8, v42);
    int v162 = *(atomic_uint **)(a1 + 24);
    atomic_fetch_add(v162, 1u);
    v161[1] = v162;
    WebCore::provideGeolocationTo();
    uint64_t v163 = (WebKit::WebNotificationClient *)WTF::fastMalloc((WTF *)0x18);
    WebKit::WebNotificationClient::WebNotificationClient(v163, (WebKit::WebPage *)a1);
    WebCore::provideNotification();
    long long v164 = (void *)WTF::fastMalloc((WTF *)0x10);
    *long long v164 = &unk_1EE9F78E8;
    v164[1] = a1;
    WebCore::provideUserMediaTo();
    char v165 = (void *)WTF::fastMalloc((WTF *)0x18);
    *char v165 = &unk_1EE9F6998;
    v165[1] = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8, v42);
    long long v166 = *(atomic_uint **)(a1 + 24);
    atomic_fetch_add(v166, 1u);
    v165[2] = v166;
    WebCore::provideMediaKeySystemTo();
    int v167 = *(WebCore::Page **)(a1 + 48);
    *((unsigned char *)v167 + 109WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *(unsigned char *)(a3 + 368);
    *((unsigned char *)v167 + 1097) = *(unsigned char *)(a3 + 346);
    WebCore::Page::setCanStartMedia(v167);
    *(unsigned char *)(a1 + 328) = *(unsigned char *)(a3 + 298);
    if (*(unsigned char *)(a3 + 299)) {
      WebCore::Page::suspendAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
    }
    unsigned int v35 = (WTF::StringImpl **)&qword_1EB35A000;
    if (*(unsigned char *)(a3 + 297)) {
      WebCore::Page::setOpenedByDOM(*(WebCore::Page **)(a1 + 48));
    }
    WebCore::Page::setGroupName(*(WebCore::Page **)(a1 + 48), (const WTF::String *)(*(void *)(a1 + 96) + 16));
    WebCore::Page::setUserInterfaceLayoutDirection();
    *(_DWORD *)(*(void *)(a1 + 48) + 456) = *(_DWORD *)(a3 + 484);
    WebCore::Page::setOverrideViewportArguments();
    WebKit::WebPage::platformInitialize((WebKit::WebPage *)a1, a3);
    WebKit::WebPage::setUseFixedLayout((IPC::Encoder *)a1, *(unsigned __int8 *)(a3 + 120));
    WebKit::WebPage::setDefaultUnobscuredSize((_DWORD *)a1, (const WebCore::FloatSize *)(a3 + 132));
    WebKit::WebPage::setMinimumUnobscuredSize((_DWORD *)a1, (const WebCore::FloatSize *)(a3 + 140));
    WebKit::WebPage::setMaximumUnobscuredSize((_DWORD *)a1, (const WebCore::FloatSize *)(a3 + 148));
    WebCore::Color::operator=();
    char v168 = *(unsigned char *)(a3 + 195);
    uint64_t v169 = *(void *)(a1 + 48);
    *(void *)&long long v215 = *(void *)(v169 + 468);
    DWORD2(v215) = *(_DWORD *)(v169 + 476);
    LOBYTE(v215) = v168;
    WebCore::Page::setPagination();
    char v170 = *(unsigned char *)(a3 + 196);
    uint64_t v171 = *(void *)(a1 + 48);
    *(void *)&long long v215 = *(void *)(v171 + 468);
    DWORD2(v215) = *(_DWORD *)(v171 + 476);
    BYTE1(v215) = v170;
    WebCore::Page::setPagination();
    double v172 = *(double *)(a3 + 200);
    uint64_t v173 = *(void *)(a1 + 48);
    *(void *)&long long v215 = *(void *)(v173 + 468);
    int v174 = *(_DWORD *)(v173 + 476);
    DWORD1(v215) = v172;
    DWORD2(v215) = v174;
    WebCore::Page::setPagination();
    double v175 = *(double *)(a3 + 208);
    *(void *)&long long v215 = *(void *)(*(void *)(a1 + 48) + 468);
    DWORD2(v215) = v175;
    WebCore::Page::setPagination();
    WebKit::WebPage::effectiveAppearanceDidChange((WebCore::Page **)a1, *(unsigned __int8 *)(a3 + 370));
    if (*(unsigned char *)(a3 + 104)) {
      WebKit::WebPage::setEditable((WebKit::WebPage *)a1, 1);
    }
    WebCore::Page::setActivityState();
    if ((*(_WORD *)(a1 + 1824) & 4) == 0) {
      WebCore::Page::setIsPrerender(*(WebCore::Page **)(a1 + 48));
    }
    WebKit::WebPage::updateIsInWindow((WebKit::WebPage *)a1, 1);
    WebKit::WebPage::setMinimumSizeForAutoLayout((unsigned int *)a1, (const WebCore::IntSize *)(a3 + 300));
    WebKit::WebPage::setSizeToContentAutoSizeMaximumSize((unsigned int *)a1, (IntSize *)(a3 + 308));
    WebKit::WebPage::setAutoSizingShouldExpandToViewHeight((unsigned int *)a1, *(unsigned __int8 *)(a3 + 316));
    WebKit::WebPage::setViewportSizeForCSSViewportUnits((unsigned int *)a1, *(void *)(a3 + 320), *(_DWORD *)(a3 + 328));
    WebKit::WebPage::setScrollPinningBehavior(a1, *(unsigned char *)(a3 + 332));
    if (*(unsigned char *)(a3 + 340)) {
      __int16 v176 = *(unsigned __int8 *)(a3 + 336) | 0x100;
    }
    else {
      __int16 v176 = 0;
    }
    *(_WORD *)(a1 + 182WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v176;
    WebKit::WebPage::setTopContentInset((WebKit::WebPage *)a1, *(float *)(a3 + 288));
    WTF::String::operator=((uint64_t *)(a1 + 104), (WTF::StringImpl **)(a3 + 216));
    if (*(_DWORD *)(a3 + 244)) {
      WebKit::WebPage::restoreSessionInternal((uint64_t *)a1, a3 + 232, *(unsigned char *)(a3 + 224), 0);
    }
    WebCore::Page::setMediaVolume(*(WebCore::Page **)(a1 + 48), *(float *)(a3 + 292));
    uint64_t v177 = *(unsigned __int8 *)(a3 + 296);
    char v178 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v178 = &unk_1EEA00D00;
    *(void *)&long long v215 = v178;
    WebKit::WebPage::setMuted(a1, v177, (uint64_t *)&v215);
    if ((void)v215) {
      (*(void (**)(void))(*(void *)v215 + 8))(v215);
    }
    WebCore::Page::addLayoutMilestones();
    if (*((unsigned char *)v7 + 2272) != 1)
    {
      char v210 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v210);
    }
    uint64_t v179 = *(void *)(a1 + 40);
    uint64_t v180 = (uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56);
    uint64_t v252 = 183;
    uint64_t v253 = v179;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56), (unsigned __int8 *)&v252, v42, (unsigned __int8 **)&v215);
    uint64_t v181 = *(void *)(a1 + 40);
    uint64_t v252 = 175;
    uint64_t v253 = v181;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v180, (unsigned __int8 *)&v252, v42, (unsigned __int8 **)&v215);
    uint64_t v182 = *(void *)(a1 + 40);
    uint64_t v252 = 177;
    uint64_t v253 = v182;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v180, (unsigned __int8 *)&v252, v42, (unsigned __int8 **)&v215);
    uint64_t v183 = *(void *)(a1 + 40);
    uint64_t v252 = 131;
    uint64_t v253 = v183;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v180, (unsigned __int8 *)&v252, v42, (unsigned __int8 **)&v215);
    uint64_t v184 = *(void *)(a1 + 40);
    uint64_t v252 = 170;
    uint64_t v253 = v184;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v180, (unsigned __int8 *)&v252, v42, (unsigned __int8 **)&v215);
    uint64_t v186 = *(unsigned int *)(a3 + 364);
    if (v186)
    {
      BOOL v187 = *(WTF::StringImpl ***)(a3 + 352);
      uint64_t v188 = 8 * v186;
      do
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 1784), v187++, (uint64_t)&v215);
        v188 -= 8;
      }
      while (v188);
    }
    float v189 = *(float *)(a3 + 264);
    if (v189 != 1.0) {
      WebKit::WebPage::scaleView((atomic_uchar *)a1, v189, v185);
    }
    WebCore::Page::addLayoutMilestones();
    WebKit::WebPage::setSmartInsertDeleteEnabled((WebKit::WebPage *)a1, *(unsigned __int8 *)(a3 + 512));
    *(unsigned char *)(a1 + 2109) = *(unsigned char *)(a3 + 904);
    if (!*(unsigned char *)(a3 + 905)) {
      WebCore::Page::disableICECandidateFiltering(*(WebCore::Page **)(a1 + 48));
    }
    if (*(unsigned char *)(a3 + 906)) {
      WebCore::LibWebRTCProvider::enableEnumeratingAllNetworkInterfaces(*(WebCore::LibWebRTCProvider **)(*(void *)(a1 + 48) + 296));
    }
    {
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)v6, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, v190))WebCore::LibWebRTCProvider::enableEnumeratingVisibleNetworkInterfaces(*(WebCore::LibWebRTCProvider **)(*(void *)(a1 + 48) + 296)); {
    int v191 = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a3 + 600));
    }
    long long v8 = v191;
    uint64_t v193 = v192;
    uint64_t v194 = *(void *)(a3 + 600);
    if (v194) {
      unint64_t v195 = (unsigned int *)(v194 + 16 * *(unsigned int *)(v194 - 4));
    }
    else {
      unint64_t v195 = 0;
    }
    if (v195 != v191)
    {
      do
      {
        WebKit::WebPage::registerURLSchemeHandler((void *)a1, *((void *)v8 + 1), (WebCore::LegacySchemeRegistry *)v8);
        while (1)
        {
          v8 += 4;
          if (v8 == (unsigned int *)v193) {
            break;
          }
          if ((unint64_t)(*(void *)v8 + 1) > 1) {
            goto LABEL_206;
          }
        }
        long long v8 = (unsigned int *)v193;
LABEL_206:
        ;
      }
      while (v8 != v195);
    }
    uint64_t v196 = *(unsigned int *)(a3 + 620);
    if (v196)
    {
      int v197 = *(WebCore::LegacySchemeRegistry **)(a3 + 608);
      uint64_t v198 = 8 * v196;
      do
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(v197, v192);
        int v197 = (WebCore::LegacySchemeRegistry *)((char *)v197 + 8);
        v198 -= 8;
      }
      while (v198);
    }
    WebKit::WebUserContentController::addContentWorlds(*(WebKit **)(a1 + 624), a3 + 920);
    WebKit::WebUserContentController::addUserScripts(*(WebKit **)(a1 + 624), (_DWORD *)(a3 + 936), 0);
    WebKit::WebUserContentController::addUserStyleSheets(*(WebCore::UserContentProvider **)(a1 + 624), (unsigned int *)(a3 + 952));
    WebKit::WebUserContentController::addUserScriptMessageHandlers(*(WebKit **)(a1 + 624), a3 + 968);
    WebKit::WebUserContentController::addContentRuleLists(*(void *)(a1 + 624), a3 + 984);
    WebKit::WebPage::setViewportConfigurationViewLayoutSize((WebKit::WebPage *)a1, (const WebCore::FloatSize *)(a3 + 376), *(double *)(a3 + 384), *(double *)(a3 + 392));
    uint64_t v42 = 1;
    WebCore::PlatformMediaSessionManager::setShouldDeactivateAudioSession((WebCore::PlatformMediaSessionManager *)1);
    WebCore::PlatformMediaSessionManager::setShouldEnableVP8Decoder((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(a3 + 1170));
    WebCore::PlatformMediaSessionManager::setShouldEnableVP9Decoder((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(a3 + 1171));
    *(unsigned char *)(*(void *)(a1 + 48) + 1682) = *(unsigned char *)(a3 + 1174);
    if (*((unsigned char *)v7 + 2272) != 1)
    {
      uint64_t v211 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v211);
    }
    WebKit::WebProcess::auditTokenForSelf((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process, (uint64_t)&v215);
    {
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::keCGFloat y = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)v6, (WTF::StringImpl **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, v199);
    if ((BoolValueForKey & 1) == 0) {
      goto LABEL_216;
    }
    unsigned int add = v217;
    if (v217) {
      break;
    }
LABEL_249:
    __break(1u);
LABEL_250:
    atomic_store(add, (unsigned int *)BoolValueForKey);
    WTF::fastFree((WTF *)BoolValueForKey, v44);
  }
  sandbox_enable_state_flag();
LABEL_216:
  WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 1472), v44);
  WebKit::WebPage::updateThrottleState((WebKit::WebPage *)a1);
  WebKit::WebPage::updateImageAnimationEnabled((WebKit::WebPage *)a1);
  WebKit::WebPage::updatePrefersNonBlinkingCursor((WebKit::WebProcess *)a1);
  WebKit::WebPage::setLinkDecorationFilteringData(a1, (_DWORD *)(a3 + 1440), v200);
  WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(a1, (WTF::StringImpl *)(a3 + 1456), v201);
  MEMORY[0x199733DC0](buf);
  return a1;
}

void sub_1986622FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebKit *WebKit::WebProcessPool::registerGlobalURLSchemeAsHavingCustomProtocolHandlers(WebKit *this, const WTF::String *a2)
{
  if (*(void *)this)
  {
    uint64_t v2 = (WTF::StringImpl **)this;
    WebKit::InitializeWebKit2(this);
    {
      WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set, v2, (uint64_t)&v9);
    WebKit::NetworkProcessProxy::allNetworkProcesses(v3, (uint64_t)&v9);
    if (v10)
    {
      size_t v5 = v9;
      uint64_t v6 = 8 * v10;
      do
      {
        uint64_t v7 = *v5;
        long long v8 = (atomic_uint *)(*v5 + 16);
        atomic_fetch_add(v8, 1u);
        uint64_t v11 = v2;
        WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::RegisterScheme>(v7, (uint64_t **)&v11, 0, 0);
        if (v7) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v8);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    return (WebKit *)WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
  }
  return this;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  xpc_object_t v25 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  char v9 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v8 & v7;
    uint64_t v12 = (WTF::StringImpl **)(v6 + 8 * (v8 & v7));
    unsigned int v13 = *v12;
    if (!*v12)
    {
      if (v9)
      {
        *char v9 = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v12 = v9;
      }
      uint64_t result = (WTF::StringImpl **)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v12, (WTF::StringImpl *)a2, &v25);
      uint64_t v15 = *a1;
      if (*a1) {
        int v16 = *(_DWORD *)(v15 - 12) + 1;
      }
      else {
        int v16 = 1;
      }
      *(_DWORD *)(v15 - 12) = v16;
      uint64_t v17 = *a1;
      if (*a1) {
        int v18 = *(_DWORD *)(v17 - 12);
      }
      else {
        int v18 = 0;
      }
      uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
      unint64_t v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19) {
          goto LABEL_17;
        }
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_17:
        uint64_t v21 = v17 + 8 * v20;
        char v22 = 1;
        goto LABEL_18;
      }
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v12);
      uint64_t v12 = result;
      uint64_t v17 = *a1;
      if (*a1) {
        unint64_t v20 = *(unsigned int *)(v17 - 4);
      }
      else {
        unint64_t v20 = 0;
      }
      goto LABEL_17;
    }
    if (v13 != (WTF::StringImpl *)-1) {
      break;
    }
    char v9 = (WTF::StringImpl **)(v6 + 8 * v11);
LABEL_8:
    unsigned int v8 = i + v11;
  }
  uint64_t result = (WTF::StringImpl **)WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)v13, (uint64_t)*a2);
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v23 = *a1;
  if (*a1) {
    uint64_t v24 = *(unsigned int *)(v23 - 4);
  }
  else {
    uint64_t v24 = 0;
  }
  char v22 = 0;
  uint64_t v21 = v23 + 8 * v24;
LABEL_18:
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v21;
  *(unsigned char *)(a3 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v22;
  return result;
}

{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  int i;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;

  xpc_object_t v25 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  char v9 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v8 & v7;
    uint64_t v12 = (WTF::StringImpl **)(v6 + 8 * (v8 & v7));
    unsigned int v13 = *v12;
    if (!*v12)
    {
      if (v9)
      {
        *char v9 = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v12 = v9;
      }
      uint64_t result = (WTF::StringImpl **)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(WTF::String&&)::{lambda(void)#1}>(v12, (WTF::StringImpl *)a2, &v25);
      uint64_t v15 = *a1;
      if (*a1) {
        int v16 = *(_DWORD *)(v15 - 12) + 1;
      }
      else {
        int v16 = 1;
      }
      *(_DWORD *)(v15 - 12) = v16;
      uint64_t v17 = *a1;
      if (*a1) {
        int v18 = *(_DWORD *)(v17 - 12);
      }
      else {
        int v18 = 0;
      }
      uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
      unint64_t v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19) {
          goto LABEL_14;
        }
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_14:
        uint64_t v21 = v17 + 8 * v20;
        char v22 = 1;
        goto LABEL_15;
      }
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v12);
      uint64_t v12 = result;
      uint64_t v17 = *a1;
      if (*a1) {
        unint64_t v20 = *(unsigned int *)(v17 - 4);
      }
      else {
        unint64_t v20 = 0;
      }
      goto LABEL_14;
    }
    if (v13 == (WTF::StringImpl *)-1)
    {
      char v9 = (WTF::StringImpl **)(v6 + 8 * v11);
      goto LABEL_21;
    }
    uint64_t result = (WTF::StringImpl **)WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)v13, (uint64_t)*a2);
    if (result) {
      break;
    }
LABEL_21:
    unsigned int v8 = i + v11;
  }
  uint64_t v23 = *a1;
  if (*a1) {
    uint64_t v24 = *(unsigned int *)(v23 - 4);
  }
  else {
    uint64_t v24 = 0;
  }
  char v22 = 0;
  uint64_t v21 = v23 + 8 * v24;
LABEL_15:
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v21;
  *(unsigned char *)(a3 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v22;
  return result;
}

uint64_t WTF::ASCIICaseInsensitiveHash::hash(WTF::ASCIICaseInsensitiveHash *this, const WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((unsigned int *)this + 1);
  if ((*((unsigned char *)this + 16) & 4) != 0)
  {
    int v5 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::ASCIICaseInsensitiveHash::FoldCase>(v3, v4);
    unsigned int v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    unsigned int v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    unsigned int v8 = (v7 ^ (v7 << 10)) & 0xFFFFFF;
    if (v8) {
      return v8;
    }
    else {
      return 0x800000;
    }
  }
  else
  {
    return WTF::ASCIICaseInsensitiveHash::hash<char16_t>(v3, v4);
  }
}

uint64_t WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::ASCIICaseInsensitiveHash::FoldCase>(uint64_t a1, unint64_t a2)
{
  uint64_t result = 2654435769;
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = result + *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(a1 + v4));
      unsigned int v6 = (v5 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(a1 + v4 + 1)) << 11) ^ v5;
      uint64_t result = v6 + (v6 >> 11);
      unint64_t v7 = v4 + 3;
      v4 += 2;
    }
    while (v7 < a2);
  }
  if (a2)
  {
    int v8 = result + *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(a2 + a1 - 1));
    return (v8 ^ (v8 << 11)) + ((v8 ^ (v8 << 11)) >> 17);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, unsigned int **a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (unsigned int *)(v8 + 16 * v14);
  int v16 = *(unsigned __int8 *)v15;
  if (v16 == 255)
  {
LABEL_4:
    *(unsigned char *)uint64_t v15 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
    int v18 = *(atomic_uint **)(a3 + 8);
    if (v18) {
      atomic_fetch_add(v18, 1u);
    }
    uint64_t result = (unsigned int *)*((void *)v15 + 1);
    *((void *)v15 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v18;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
    }
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_15;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_15:
      *a4 = v15;
      a4[1] = (unsigned int *)(v22 + 16 * v25);
      *((unsigned char *)a4 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 1;
      return result;
    }
    uint64_t result = (unsigned int *)WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::expand(a1, (unsigned __int8 *)v15);
    uint64_t v15 = result;
    uint64_t v22 = *a1;
    if (*a1) {
      unint64_t v25 = *(unsigned int *)(v22 - 4);
    }
    else {
      unint64_t v25 = 0;
    }
    goto LABEL_15;
  }
  uint64_t v26 = 0;
  int v27 = 1;
  while (v16 != v11)
  {
    if (v16 == 254) {
      uint64_t v26 = v15;
    }
    unsigned int v14 = (v14 + v27) & v10;
    uint64_t v15 = (unsigned int *)(v8 + 16 * v14);
    int v16 = *(unsigned __int8 *)v15;
    ++v27;
    if (v16 == 255)
    {
      if (v26)
      {
        *(unsigned char *)uint64_t v26 = -1;
        *((void *)v26 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        LOBYTE(v1WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *a2;
        uint64_t v15 = v26;
      }
      goto LABEL_4;
    }
  }
  if (v9) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(unsigned int *)(v8 - 4);
  }
  *a4 = v15;
  a4[1] = (unsigned int *)(v8 + 16 * v28);
  *((unsigned char *)a4 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v30 = *(atomic_uint **)(a3 + 8);
  if (v30)
  {
    atomic_fetch_add(v30, 1u);
    uint64_t v15 = *a4;
  }
  uint64_t result = (unsigned int *)*((void *)v15 + 1);
  *((void *)v15 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v30;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v29);
  }
  return result;
}

unsigned __int8 *WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 **a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  int v10 = *a2;
  uint64_t v11 = *((void *)a2 + 1);
  unsigned int v12 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(*a2, v11) & v9;
  unsigned int v13 = (unsigned __int8 *)(v8 + 24 * v12);
  int v14 = *v13;
  uint64_t v15 = *((void *)v13 + 1);
  if (v14 == 255 && v15 == 0)
  {
LABEL_19:
    *unsigned int v13 = v10;
    *((void *)v13 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
    int v21 = *(atomic_uint **)(a3 + 8);
    if (v21) {
      atomic_fetch_add(v21, 1u);
    }
    uint64_t result = (unsigned __int8 *)*((void *)v13 + 2);
    *((void *)v13 + 2) = v21;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (unsigned __int8 *)WTF::fastFree((WTF *)result, v20);
    }
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27) {
        goto LABEL_30;
      }
    }
    else if (3 * v28 > 4 * v27)
    {
LABEL_30:
      *a4 = v13;
      a4[1] = (unsigned __int8 *)(v25 + 24 * v28);
      *((unsigned char *)a4 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 1;
      return result;
    }
    uint64_t result = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::expand(a1, v13);
    unsigned int v13 = result;
    uint64_t v25 = *a1;
    if (*a1) {
      LODWORD(v28) = *(_DWORD *)(v25 - 4);
    }
    else {
      LODWORD(v28) = 0;
    }
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  int v18 = 1;
  while (v10 != v14 || v15 != v11)
  {
    if (v14 == 254) {
      uint64_t v17 = v13;
    }
    unsigned int v12 = (v12 + v18) & v9;
    unsigned int v13 = (unsigned __int8 *)(v8 + 24 * v12);
    int v14 = *v13;
    uint64_t v15 = *((void *)v13 + 1);
    ++v18;
    if (v14 == 255 && v15 == 0)
    {
      if (v17)
      {
        *((void *)v17 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
        *((void *)v17 + 2) = 0;
        *(void *)uint64_t v17 = 255;
        --*(_DWORD *)(*a1 - 16);
        LOBYTE(v10) = *a2;
        uint64_t v11 = *((void *)a2 + 1);
        unsigned int v13 = v17;
      }
      goto LABEL_19;
    }
  }
  uint64_t v29 = v8 + 24 * *(unsigned int *)(v8 - 4);
  *a4 = v13;
  a4[1] = (unsigned __int8 *)v29;
  *((unsigned char *)a4 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  char v31 = *(atomic_uint **)(a3 + 8);
  if (v31)
  {
    atomic_fetch_add(v31, 1u);
    unsigned int v13 = *a4;
  }
  uint64_t result = (unsigned __int8 *)*((void *)v13 + 2);
  *((void *)v13 + 2) = v31;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    return (unsigned __int8 *)WTF::fastFree((WTF *)result, v30);
  }
  return result;
}

unsigned int *WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  if (!*(void *)result)
  {
    uint64_t v3 = (unsigned int **)result;
    uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = a2;
    uint64_t result = *v3;
    void *v3 = (unsigned int *)v5;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = (void *)(v8 + 24);
    do
    {
      *(v11 - WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 255;
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    do
    {
      int v14 = (unsigned __int8 *)(v5 + 24 * v12);
      int v15 = *v14;
      if (v15 != 254)
      {
        int v9 = (void *)*((void *)v14 + 1);
        if (v15 == 255 && v9 == 0)
        {
          uint64_t v31 = v5 + 24 * v12;
          uint64_t v32 = *(unsigned int **)(v31 + 16);
          *(void *)(v31 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
          if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v32);
            WTF::fastFree((WTF *)v32, v9);
          }
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(v15, (uint64_t)v9);
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v18;
            uint64_t v22 = (unsigned __int8 *)(v17 + 24 * (v19 & v18));
            int v19 = ++v20 + (v19 & v18);
          }
          while (*v22 != 255 || *((void *)v22 + 1) != 0);
          uint64_t v24 = v17 + 24 * v21;
          uint64_t v27 = *(unsigned int **)(v24 + 16);
          int v26 = (void *)(v24 + 16);
          uint64_t v25 = v27;
          *int v26 = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v9);
          }
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v14;
          uint64_t v28 = v5 + 24 * v12;
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
          *int v26 = v29;
          uint64_t v30 = *(unsigned int **)(v28 + 16);
          *(void *)(v28 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v9);
          }
          if (v14 == a3) {
            unsigned int v13 = v22;
          }
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    unsigned int v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    int v14 = (WTF::ASCIICaseInsensitiveHash **)v6;
    do
    {
      if (*v14 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (*v14)
        {
          int v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reinsert(a1, v14);
          int v16 = *v14;
          *int v14 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v10);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          if (v14 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          *int v14 = 0;
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  int v4 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, a2);
  unsigned int v5 = *v4;
  *int v4 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  *int v4 = v6;
  return v4;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  int v5 = 0;
  do
  {
    uint64_t v6 = v4 & v3;
    int v4 = ++v5 + v6;
  }
  while (*(void *)(v2 + 8 * v6));
  return v2 + 8 * v6;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = (void *)(v9 + 24);
    do
    {
      *((unsigned char *)v12 - 8) = -1;
      void *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    int v15 = (unsigned __int8 *)v6;
    uint64_t v7 = v7;
    do
    {
      int v16 = *v15;
      if (v16 != 254)
      {
        if (v16 == 255)
        {
          uint64_t v17 = (unsigned int *)*((void *)v15 + 1);
          *((void *)v15 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
          if (v17)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
        }
        else
        {
          uint64_t v18 = WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::reinsert(*a1, v15);
          int v19 = (unsigned int *)*((void *)v15 + 1);
          *((void *)v15 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
          if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v19);
            uint64_t v20 = v18;
            WTF::fastFree((WTF *)v19, v10);
            uint64_t v18 = v20;
          }
          if (v15 == a3) {
            uint64_t v13 = v18;
          }
        }
      }
      v15 += 16;
      --v7;
    }
    while (v7);
    goto LABEL_22;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::rehash(a1, v5, a2);
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a1 + 4);
  if (v3 != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  int v6 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    if ((v6 & 4) != 0) {
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v7, v3, v8, v3, v3);
    }
    else {
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v7, v3, v8, v3, v3);
    }
  }
  else if ((v6 & 4) != 0)
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v7, v3, v8, v3, v3);
  }
  else
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v7, v3, v8, v3, v3);
  }
}

atomic_uchar *WebKit::WebPage::setViewportConfigurationViewLayoutSize(WebKit::WebPage *this, const WebCore::FloatSize *a2, double a3, double a4)
{
  uint64_t v8 = (WebKit::WebPage *)((char *)this + 952);
  if (!*((unsigned char *)this + 1170)) {
    WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit((WebKit::WebPage *)((char *)this + 952), 0.0);
  }
  double v9 = 1.0;
  if (a4 != 0.0 && (*(void *)(*(void *)(*((void *)this + 6) + 112) + 664) & 0x2000000000) != 0)
  {
    double v11 = *(float *)a2;
    if (v11 > a4) {
      double v9 = v11 / a4;
    }
  }
  *((double *)this + 147) = v9;
  double v12 = v9 * a3;
  double v13 = *((double *)this + 142);
  uint64_t result = (atomic_uchar *)WebCore::ViewportConfiguration::setViewLayoutSize();
  if (result)
  {
    WebCore::ViewportConfiguration::initialScale(v8);
    double v16 = v15;
    double v18 = WebKit::WebPage::totalScaleFactor(this, v17) / *(float *)(*((void *)this + 6) + 368);
    char v19 = v12 > v13 && v16 > v18 || v16 < v18 && v12 < v13;
    return WebKit::WebPage::viewportConfigurationChanged((uint64_t)this, v19);
  }
  return result;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::WebPage,WebKit::WebPage>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(aWTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = &unk_1EE9BA5F0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EEA00C60;
  v8[1] = a3;
  void v8[2] = a4;
  v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}

uint64_t WebCore::DeferrableOneShotTimer::DeferrableOneShotTimer<WebKit::WebPage>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v10 = &unk_1EEA00C60;
  v10[1] = a3;
  void v10[2] = a4;
  uint64_t v10[3] = a2;
  uint64_t result = WebCore::TimerBase::TimerBase((WebCore::TimerBase *)a1);
  *(void *)a1 = &unk_1EE9E76C8;
  *(void *)(a1 + 48) = v10;
  *(double *)(a1 + 56) = a5;
  return result;
}

IPC::Encoder *WebKit::WebPage::setUseFixedLayout(IPC::Encoder *this, int a2)
{
  if (*((unsigned __int8 *)this + 184) != a2)
  {
    char v2 = a2;
    unint64_t v3 = this;
    *((unsigned char *)this + 18WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = a2;
    this = (IPC::Encoder *)WebKit::WebPage::localMainFrameView(this);
    if (this)
    {
      int v4 = this;
      ++*((_DWORD *)this + 2);
      WebCore::ScrollView::setUseFixedLayout(this);
      if ((v2 & 1) == 0)
      {
        IntSize v6 = 0;
        WebKit::WebPage::setFixedLayoutSize(v3, &v6);
      }
      char v5 = v2;
      this = IPC::MessageSender::send<Messages::WebPageProxy::UseFixedLayoutDidChange>((uint64_t)v3 + 32, &v5);
      if (*((_DWORD *)v4 + 2) == 1) {
        return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)v4 + 8))(v4);
      }
      else {
        --*((_DWORD *)v4 + 2);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updatePreferences(uint64_t **this, const WebKit::WebPreferencesStore *a2)
{
  unint64_t v3 = (WebKit::RemoteLayerTreeDrawingArea *)this;
  uint64_t v4 = this[5][1];
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *(WebCore::Settings **)(v6 + 112);
  *((void *)v7 + 83) |= 0x20uLL;
  uint64_t v8 = *((unsigned int *)this + 25);
  if (v8)
  {
    double v9 = this[11];
    uint64_t v10 = 40 * v8;
    do
    {
      uint64_t v11 = *v9;
      v9 += 5;
      uint64_t v12 = WebCore::Settings::showDebugBorders(v7);
      this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 616))(v11, v12);
      v10 -= 40;
    }
    while (v10);
  }
  uint64_t v13 = *((void *)v3 + 10);
  int v14 = (WTF::StringImpl **)WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey((WebKit::WebPreferencesKey *)this);
  *(unsigned char *)(v13 + 209) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, v14, v15);

  return MEMORY[0x1F416ED70](v6);
}

void *WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey(WebKit::WebPreferencesKey *this)
{
  if ((byte_1EB35A2D9 & 1) == 0)
  {
    WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    qword_1EB35A2F8[0] = &WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey(void)::$_0::operator() const(void)::impl;
    byte_1EB35A2D9 = 1;
  }
  return qword_1EB35A2F8;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ApplicationManifest,false> const&>(WebCore::ApplicationManifest *a1, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)a1 + 272) == a2[272])
  {
    if (*((unsigned char *)a1 + 272))
    {
      WebCore::ApplicationManifest::operator=((uint64_t)a1, (uint64_t)a2);
    }
  }
  else if (*((unsigned char *)a1 + 272))
  {
    WebCore::ApplicationManifest::~ApplicationManifest(a1, a2);
    *(unsigned char *)(v2 + 272) = 0;
  }
  else
  {
    *(unsigned char *)(WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a1, (uint64_t)a2) + 272) = 1;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::supportsAsyncScrolling(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return 1;
}

unsigned char *WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(uint64_t a1, CFTypeRef **a2, char a3)
{
  WebKit::WebFrame::makeInvalidator(*a2, (uint64_t)&v18);
  if (a3)
  {
    uint64_t v12 = *a2;
    *a2 = 0;
    uint64_t v13 = v18;
    uint64_t v18 = 0;
    char v14 = v19;
    char v19 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v9 = &unk_1EEA00CB0;
    *(void *)(v9 + 8) = v12;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)(v9 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v13;
    char v17 = 0;
    *(unsigned char *)(v9 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v14;
    WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1}::~Ref(&v15);
    int v10 = 1;
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = v18;
    uint64_t v18 = 0;
    char v8 = v19;
    char v19 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v9 = &unk_1EEA00C88;
    *(void *)(v9 + 8) = v6;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)(v9 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v7;
    char v17 = 0;
    *(unsigned char *)(v9 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v8;
    WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1}::~Ref(&v15);
    int v10 = 0;
  }
  *(void *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v10;
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v18);
}

unsigned char *WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(unsigned char *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 16))();
  }
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t *WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1}::~Ref(uint64_t *a1)
{
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)a1 + 8);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

void WebKit::frameFromIdentifier(WebKit::WebProcess *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_2;
  }
  uint64_t v4 = WebKit::WebProcess::singleton(a1);
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebProcess::webFrame(v4, *(void *)a2, *(void *)(a2 + 8));
    if (!v5)
    {
LABEL_2:
      *(void *)a1 = 0;
      return;
    }
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (v7) {
        atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      }
    }
    *(void *)a1 = v7;
    char v8 = *(const void **)(v6 + 8);
    CFRelease(v8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebKit::WebFrame::WebFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9F8340;
  *(void *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(void *)(a1 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  char v8 = *(atomic_uint **)(a2 + 24);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(unsigned char *)(a1 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a3;
  *(void *)(a1 + 88) = a4;
  *(void *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 112) = 0;
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v12 = a1;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebFrame*&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 264), v13, &v12, (uint64_t)&v11);
  return a1;
}

uint64_t WebKit::WebFrame::initWithCoreMainFrame(WebKit::WebFrame *this, WebKit::WebPage *a2, WebCore::Frame *a3)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 4, (uint64_t)a3);
  uint64_t v6 = *((void *)a3 + 2);
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = v6;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
    uint64_t v6 = *((void *)this + 3);
  }
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 8);
  }
  uint64_t result = WebCore::FrameTree::setSpecifiedName((WebCore::FrameTree *)(v6 + 48), MEMORY[0x1E4F30968]);
  if (!*((unsigned char *)a3 + 144))
  {
    return WebCore::LocalFrame::init(a3);
  }
  return result;
}

void *WebKit::WebFrame::makeInvalidator@<X0>(CFTypeRef *this@<X0>, uint64_t a2@<X8>)
{
  CFRetain(this[1]);
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t result = &unk_1EE9F8608;
  result[1] = this;
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t WebKit::WebPage::setMuted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::setMuted();
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

WTF *WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 2448);
  uint64_t result = *(WTF **)(a1 + 2448);
  if (result)
  {
    *uint64_t v4 = 0;
    uint64_t result = (WTF *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)result, a2);
  }
  unsigned int v6 = *((_DWORD *)a2 + 3);
  if (v6)
  {
    uint64_t v7 = *(WTF::ASCIICaseInsensitiveHash ***)a2;
    char v8 = &v7[3 * v6];
    while (1)
    {
      uint64_t result = *v7;
      if (*v7 == (WTF::ASCIICaseInsensitiveHash *)-1) {
        goto LABEL_25;
      }
      uint64_t result = (WTF *)WTF::equal(result, 0, a3);
      if (result) {
        goto LABEL_25;
      }
      uint64_t v10 = *v4;
      if (*v4
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v4, 0), (uint64_t v10 = *v4) != 0))
      {
        int v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        int v11 = 0;
      }
      unsigned int v12 = WTF::ASCIICaseInsensitiveHash::hash(*v7, v9) & v11;
      uint64_t v13 = v10 + 16 * v12;
      if ((WTF::equal(*(WTF **)v13, 0, v14) & 1) == 0)
      {
        uint64_t v16 = 0;
        int v17 = 1;
        do
        {
          if (*(void *)v13 == -1)
          {
            uint64_t v16 = (void *)v13;
          }
          else if (WTF::equalIgnoringASCIICase(*(WTF **)v13, *v7, v15))
          {
            goto LABEL_24;
          }
          unsigned int v12 = (v12 + v17) & v11;
          uint64_t v13 = v10 + 16 * v12;
          ++v17;
        }
        while (!WTF::equal(*(WTF **)v13, 0, v15));
        if (v16)
        {
          *uint64_t v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v4 - 16);
          uint64_t v13 = (uint64_t)v16;
        }
      }
      WTF::String::operator=((uint64_t *)v13, v7);
      char v19 = *(WTF::StringImpl ***)(v13 + 8);
      *(void *)(v13 + 8) = 0;
      if (v19) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v18);
      }
      uint64_t v20 = *v4;
      int v21 = *v4 ? *(_DWORD *)(v20 - 12) + 1 : 1;
      *(_DWORD *)(v20 - 12) = v21;
      uint64_t v22 = *v4;
      int v23 = *v4 ? *(_DWORD *)(v22 - 12) : 0;
      uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
      unint64_t v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400) {
        break;
      }
      if (3 * v25 <= 4 * v24) {
        goto LABEL_29;
      }
LABEL_24:
      uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v13 + 8), v7 + 2, v15, (uint64_t)v26);
LABEL_25:
      v7 += 3;
      if (v7 == v8) {
        return result;
      }
    }
    if (v25 > 2 * v24) {
      goto LABEL_24;
    }
LABEL_29:
    uint64_t v13 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v4, (WTF::ASCIICaseInsensitiveHash **)v13);
    goto LABEL_24;
  }
  return result;
}

unsigned int *WebKit::WebPage::setAutoSizingShouldExpandToViewHeight(unsigned int *this, int a2)
{
  if (*((unsigned __int8 *)this + 904) != a2)
  {
    *((unsigned char *)this + 90WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = a2;
    uint64_t v2 = *(void *)(*((void *)this + 6) + 160);
    if (v2 && *(unsigned char *)(v2 + 144) == 0)
    {
      uint64_t v4 = (unsigned int *)(v2 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight(*(WebCore::LocalFrameView **)(v2 + 288));
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setSizeToContentAutoSizeMaximumSize(unsigned int *this, IntSize *a2)
{
  if (this[224] != a2->m_width || this[225] != a2->m_height)
  {
    uint64_t v3 = a2;
    *((IntSize *)this + 112) = *a2;
    uint64_t v4 = *(void *)(*((void *)this + 6) + 160);
    if (v4 && *(unsigned char *)(v4 + 144) == 0)
    {
      unsigned int v6 = (unsigned int *)(v4 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
      uint64_t v7 = *(WebCore::LocalFrameView **)(v4 + 288);
      if (a2->m_width < 1 || a2->m_height <= 0)
      {
        IntSize v9 = 0;
        uint64_t v3 = &v9;
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = 1;
      }
      WebCore::LocalFrameView::enableSizeToContentAutoSizeMode(v7, v8, v3);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setViewportSizeForCSSViewportUnits(unsigned int *result, uint64_t a2, char a3)
{
  if (a3 && *((unsigned char *)result + 916))
  {
    if (*((float *)result + 227) == *(float *)&a2 && *((float *)result + 228) == *((float *)&a2 + 1)) {
      return result;
    }
    *(void *)(result + 227) = a2;
    *((unsigned char *)result + 9std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = a3;
  }
  else
  {
    if ((a3 != 0) == (*((unsigned char *)result + 916) != 0)) {
      return result;
    }
    *(void *)(result + 227) = a2;
    *((unsigned char *)result + 9std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = a3;
    if (!a3) {
      return result;
    }
  }
  uint64_t v3 = *(void *)(*((void *)result + 6) + 160);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 144) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = (unsigned int *)(v3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    if (*((unsigned char *)result + 916))
    {
      WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits();
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void WebKit::WebPage::setLinkDecorationFilteringData(uint64_t a1, _DWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (uint64_t *)(a1 + 2440);
  uint64_t v5 = *(void *)(a1 + 2440);
  if (v5)
  {
    *BOOL v4 = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  unsigned int v6 = a2[3];
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = v7 + 24 * v6;
    IntSize v9 = &qword_1EB358000;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v7 + 16);
      if ((unint64_t)(*(void *)(v7 + 16) + 1) > 1) {
        break;
      }
      int v11 = v9[140];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v36;
        _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::Unable to set link decoration filtering data (invalid key)", buf, 0x16u);
      }
LABEL_8:
      v7 += 24;
      if (v7 == v8) {
        return;
      }
    }
    uint64_t v12 = *v4;
    if (*v4
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v4, 0), (uint64_t v12 = *v4) != 0))
    {
      int v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      int v13 = 0;
    }
    unsigned int v14 = *((_DWORD *)*v10 + 4);
    if (v14 >= 0x100) {
      unsigned int v15 = v14 >> 8;
    }
    else {
      unsigned int v15 = WTF::StringImpl::hashSlowCase(*v10);
    }
    uint64_t v16 = 0;
    for (int i = 1; ; ++i)
    {
      uint64_t v18 = v15 & v13;
      uint64_t v19 = v12 + 32 * v18;
      uint64_t v20 = *(WTF **)v19;
      if (!*(void *)v19) {
        break;
      }
      if (v20 == (WTF *)-1)
      {
        uint64_t v16 = (_OWORD *)(v12 + 32 * v18);
      }
      else if (WTF::equal(v20, *v10, a3))
      {
        goto LABEL_35;
      }
      unsigned int v15 = i + v18;
    }
    if (v16)
    {
      *uint64_t v16 = 0u;
      v16[1] = 0u;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v19 = (uint64_t)v16;
    }
    WTF::String::operator=((uint64_t *)v19, (WTF::StringImpl **)(v7 + 16));
    memset(buf, 0, sizeof(buf));
    uint64_t v22 = *(WTF::StringImpl ***)(v19 + 8);
    *(void *)(v19 + 8) = 0;
    if (v22) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v21);
    }
    uint64_t v23 = *(unsigned int *)(v19 + 28);
    if (v23) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(void *)(v19 + 16) + 8 * v23));
    }
    uint64_t v24 = *(WTF **)(v19 + 16);
    if (v24)
    {
      *(void *)(v19 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
      *(_DWORD *)(v19 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
      WTF::fastFree(v24, v21);
    }
    *(void *)(v19 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = *(void *)&buf[8];
    uint64_t v25 = *(void *)&buf[16];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    *(void *)(v19 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v25;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[8], v21);
    if (*(void *)buf) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v26);
    }
    uint64_t v27 = *v4;
    if (*v4) {
      int v28 = *(_DWORD *)(v27 - 12) + 1;
    }
    else {
      int v28 = 1;
    }
    *(_DWORD *)(v27 - 12) = v28;
    uint64_t v29 = *v4;
    if (*v4) {
      int v30 = *(_DWORD *)(v29 - 12);
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = (*(_DWORD *)(v29 - 16) + v30);
    unint64_t v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31)
      {
LABEL_35:
        if (*(void *)v7
          && *(_DWORD *)(*(void *)v7 + 4)
          && (MEMORY[0x19972E990]() & 1) == 0
          && *(void *)v7 != -1
          && (WTF::equal(*(WTF **)v7, 0, a3) & 1) == 0)
        {
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v19 + 8), (WTF::StringImpl **)v7, (uint64_t)buf);
        }
        int v33 = *(_DWORD **)(v7 + 8);
        IntSize v9 = &qword_1EB358000;
        if (v33 && v33[1])
        {
          uint64_t v34 = *(unsigned int *)(v19 + 28);
          if (v34 == *(_DWORD *)(v19 + 24))
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(v19 + 16, v7 + 8);
          }
          else
          {
            uint64_t v35 = *(void *)(v19 + 16);
            *v33 += 2;
            *(void *)(v35 + 8 * v3WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v33;
            *(_DWORD *)(v19 + 28) = v34 + 1;
          }
        }
        goto LABEL_8;
      }
    }
    else if (3 * v32 > 4 * v31)
    {
      goto LABEL_35;
    }
    uint64_t v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v4, v19);
    goto LABEL_35;
  }
}

IPC::Encoder *WebKit::WebPage::effectiveAppearanceDidChange(WebCore::Page **this, int a2)
{
  WebCore::Page::effectiveAppearanceDidChange(this[6]);
  uint64_t result = this[59];
  if (result)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 1;
    }
    return WebKit::WebInspectorUI::effectiveAppearanceDidChange((uint64_t)result, v5);
  }
  return result;
}

uint64_t WebKit::WebPage::updateImageAnimationEnabled(WebKit::WebPage *this)
{
  int v1 = (WebCore::Page *)*((void *)this + 6);
  WebKit::WebProcess::singleton(this);

  return WebCore::Page::setImageAnimationEnabled(v1);
}

WebKit::WebPage *WebKit::WebPage::setSmartInsertDeleteEnabled(WebKit::WebPage *this, int a2)
{
  uint64_t v2 = *(void **)(*((void *)this + 6) + 112);
  uint64_t v3 = v2[87];
  if (((v3 & 0x400000000000000) != 0) != a2)
  {
    BOOL v4 = v2 + 83;
    uint64_t v5 = v2[90];
    uint64_t v6 = v2[89];
    uint64_t v7 = v2[88];
    uint64_t v8 = v2[86];
    uint64_t v9 = v2[85];
    uint64_t v10 = v2[84];
    uint64_t v11 = v2[83];
    uint64_t v12 = 0x400000000000000;
    if (!a2) {
      uint64_t v12 = 0;
    }
    *BOOL v4 = v11;
    v4[1] = v10;
    void v4[2] = v9;
    v4[3] = v8;
    unsigned char v4[4] = v3 & 0xFBFFFFFFFFFFFFFFLL | v12;
    void v4[5] = v7;
    v4[6] = v6;
    v4[7] = v5;
    return WebKit::WebPage::setSelectTrailingWhitespaceEnabled(this, a2 ^ 1u);
  }
  return this;
}

unsigned int *WebKit::WebPage::setMinimumSizeForAutoLayout(unsigned int *this, const WebCore::IntSize *a2)
{
  if (this[222] != *(_DWORD *)a2 || this[223] != *((_DWORD *)a2 + 1))
  {
    *((void *)this + 11WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *(void *)a2;
    uint64_t v3 = *(void *)(*((void *)this + 6) + 160);
    if (v3 && *(unsigned char *)(v3 + 144) == 0)
    {
      uint64_t v5 = (unsigned int *)(v3 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
      uint64_t v6 = *(WebCore::LocalFrameView **)(v3 + 288);
      if (*(int *)a2 <= 0)
      {
        IntSize v9 = 0;
        uint64_t v8 = 0;
      }
      else
      {
        int v7 = *((_DWORD *)a2 + 1);
        if (v7 <= 1) {
          int v7 = 1;
        }
        v9.m_CGFloat width = *(_DWORD *)a2;
        v9.m_CGFloat height = v7;
        uint64_t v8 = 1;
      }
      WebCore::LocalFrameView::enableFixedWidthAutoSizeMode(v6, v8, &v9);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setPageAndTextZoomFactors(WebKit::WebPage *this, double a2, double a3, WebCore::LocalFrame *a4)
{
  uint64_t result = (unsigned int *)WebKit::WebPage::mainFramePlugIn(this, a4);
  if (result)
  {
    return (unsigned int *)WebKit::PluginView::setPageScaleFactor((atomic_uchar *)result, 0, 0, a2);
  }
  else
  {
    uint64_t v8 = *(void *)(*((void *)this + 11) + 24);
    if (v8)
    {
      uint64_t result = *(unsigned int **)(v8 + 8);
      if (result)
      {
        if (!*((unsigned char *)result + 144))
        {
          IntSize v9 = result + 2;
          atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
          float v10 = a2;
          float v11 = a3;
          WebCore::LocalFrame::setPageAndTextZoomFactors((WebCore::LocalFrame *)result, v10, v11);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::setScrollPinningBehavior(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1820) = a2;
  uint64_t v2 = *(void *)(*(void *)(result + 48) + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return WebCore::LocalFrameView::setScrollPinningBehavior();
  }
  return result;
}

_DWORD *WebKit::WebPage::setMinimumUnobscuredSize(_DWORD *this, const WebCore::FloatSize *a2)
{
  if (*(float *)a2 != *((float *)this + 34) || *((float *)a2 + 1) != *((float *)this + 35))
  {
    *((void *)this + 17) = *(void *)a2;
    return WebKit::WebPage::updateSizeForCSSSmallViewportUnits((WebKit::WebPage *)this);
  }
  return this;
}

_DWORD *WebKit::WebPage::setMaximumUnobscuredSize(_DWORD *this, const WebCore::FloatSize *a2)
{
  if (*(float *)a2 != *((float *)this + 36) || *((float *)a2 + 1) != *((float *)this + 37))
  {
    *((void *)this + 18) = *(void *)a2;
    return WebKit::WebPage::updateSizeForCSSLargeViewportUnits((WebKit::WebPage *)this);
  }
  return this;
}

_DWORD *WebKit::WebPage::setDefaultUnobscuredSize(_DWORD *this, const WebCore::FloatSize *a2)
{
  if (*(float *)a2 != *((float *)this + 32) || *((float *)a2 + 1) != *((float *)this + 33))
  {
    *((void *)this + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = *(void *)a2;
    return WebKit::WebPage::updateSizeForCSSDefaultViewportUnits((WebKit::WebPage *)this);
  }
  return this;
}

float *WebKit::WebPage::setTopContentInset(WebKit::WebPage *this, float a2)
{
  uint64_t result = (float *)*((void *)this + 6);
  if (result[93] != a2)
  {
    WebCore::Page::setTopContentInset((WebCore::Page *)result, a2);
    WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 20, &v12);
    uint64_t v4 = *((void *)this + 20);
    if (v4)
    {
      uint64_t v6 = *(unsigned int *)(v4 - 4);
      uint64_t v5 = v4 + 8 * v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    int v7 = (char *)this + 160;
    uint64_t v8 = v5;
    uint64_t v9 = v5;
    uint64_t v10 = v5;
    uint64_t v11 = v4 + 8 * v6;
    uint64_t result = (float *)WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
    while (v13 != v8)
    {
      WebKit::PluginView::topContentInsetDidChange(*(WebKit::PluginView **)(*(void *)v13 + 8));
      uint64_t result = (float *)WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
    }
  }
  return result;
}

WebKit::WebDeviceOrientationUpdateProvider *WebKit::WebDeviceOrientationUpdateProvider::WebDeviceOrientationUpdateProvider(WebKit::WebDeviceOrientationUpdateProvider *this, WebKit::WebPage *a2)
{
  *((_DWORD *)this + 2) = 1;
  uint64_t v4 = (char *)this + 16;
  *(void *)this = &unk_1EE9FB398;
  *((void *)this + 2) = &unk_1EE9FB3F0;
  *((void *)this + 3) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 3);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v5;
  *((void *)this + 5) = *((void *)a2 + 5);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v6 = *((void *)a2 + 5);
  v10[0] = 163;
  v10[1] = v6;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56), (unsigned __int8 *)v10, (uint64_t)v4, &v9);
  return this;
}

uint64_t WebKit::WebStorageNamespaceProvider::incrementUseCount(uint64_t result)
{
  uint64_t v7 = result;
  {
    if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
    {
      uint64_t v1 = *(void *)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider + 8);
      if (v1)
      {
        int v4 = 0;
        uint64_t v5 = 0;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::add<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>((uint64_t *)(v1 + 48), &v7, &v4, (uint64_t)v6);
        uint64_t result = v5;
        uint64_t v3 = v6[0];
        if (v5) {
          uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v2);
        }
        ++*(_DWORD *)(v3 + 8);
      }
    }
  }
  else
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = 0;
  }
  return result;
}

WebKit::WebScreenOrientationManager *WebKit::WebScreenOrientationManager::WebScreenOrientationManager(WebKit::WebScreenOrientationManager *this, WebKit::WebPage *a2)
{
  uint64_t v4 = WebCore::ScreenOrientationManager::ScreenOrientationManager(this);
  uint64_t v5 = v4 + 32;
  *(void *)uint64_t v4 = &unk_1EE9F7308;
  *(void *)(v4 + 32) = &unk_1EE9F7358;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(v4 + 48) = a2;
  *(_WORD *)(v4 + 72) = 0;
  uint64_t v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v4);
  uint64_t v7 = *(void *)(*((void *)this + 6) + 40);
  v10[0] = 201;
  v10[1] = v7;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v6 + 56), (unsigned __int8 *)v10, v5, &v9);
  return this;
}

WebKit::WebFoundTextRangeController *WebKit::WebFoundTextRangeController::WebFoundTextRangeController(WebKit::WebFoundTextRangeController *this, WebKit::WebPage *a2)
{
  *(void *)this = &unk_1EE9F82E0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v4;
  *((_OWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  return this;
}

WebKit::WebValidationMessageClient *WebKit::WebValidationMessageClient::WebValidationMessageClient(WebKit::WebValidationMessageClient *this, WebKit::WebPage *a2)
{
  *(void *)this = &unk_1EE9F7948;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v4;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  return this;
}

void WebKit::WebUserContentController::addUserScriptMessageHandlers(WebKit *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = 24 * v2;
    uint64_t v5 = *(void *)a2 + 8;
    do
    {
      WebKit::worldMap(a1);
      uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, (void *)v5);
      WebKit::worldMap((WebKit *)v6);
      uint64_t v7 = WebKit::worldMap(void)::map;
      if (WebKit::worldMap(void)::map) {
        uint64_t v7 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
      }
      if ((uint64_t *)v7 == v6)
      {
        a1 = (WebKit *)WTFLogAlways();
      }
      else
      {
        uint64_t v8 = v6[1];
        CFRetain(*(CFTypeRef *)(v8 + 8));
        uint64_t v9 = *(void *)(v5 - 8);
        WTF::AtomString::AtomString((WTF::AtomString *)&v12, (WTF::AtomStringImpl **)(v5 + 8));
        WebKit::WebUserContentController::addUserScriptMessageHandlerInternal(v3, v8, v9, (const AtomString *)&v12);
        uint64_t v11 = v12;
        uint64_t v12 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        CFRelease(*(CFTypeRef *)(v8 + 8));
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

uint64_t WebKit::WebUserContentController::addUserStyleSheets(WebCore::UserContentProvider *this, unsigned int *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = a2[3];
  if (v3)
  {
    uint64_t v5 = 120 * v3;
    uint64_t v6 = (void *)(*(void *)a2 + 8);
    do
    {
      WebKit::worldMap(this);
      uint64_t v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, v6);
      WebKit::worldMap((WebKit *)v7);
      uint64_t v8 = WebKit::worldMap(void)::map;
      if (WebKit::worldMap(void)::map) {
        uint64_t v8 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
      }
      if ((uint64_t *)v8 == v7)
      {
        this = (WebCore::UserContentProvider *)WTFLogAlways();
      }
      else
      {
        WebCore::UserStyleSheet::UserStyleSheet((uint64_t)v12, (uint64_t)(v6 + 1));
        uint64_t v9 = v7[1];
        CFRetain(*(CFTypeRef *)(v9 + 8));
        *(void *)&long long v11 = *(v6 - 1);
        BYTE8(v1WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 1;
        WebKit::WebUserContentController::addUserStyleSheetInternal((uint64_t)v2, v9, &v11, (uint64_t)v12);
        CFRelease(*(CFTypeRef *)(v9 + 8));
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v12, v10);
      }
      v6 += 15;
      v5 -= 120;
    }
    while (v5);
  }
  return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v2);
}

WebKit *WebKit::WebUserContentController::addContentWorlds(WebKit *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(uint64_t **)a2;
    uint64_t v5 = 16 * v2;
    do
    {
      uint64_t v8 = 0;
      uint64_t result = (WebKit *)WebKit::WebUserContentController::addContentWorld(result, v4);
      uint64_t v8 = result;
      if (result)
      {
        uint64_t v6 = (WebKit *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v6 = &unk_1EE9F4F28;
        *((void *)v6 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v3;
        *((void *)v6 + 2) = &v8;
        uint64_t v7 = v6;
        WebCore::Page::forEachPage();
        uint64_t result = v7;
        if (v7) {
          uint64_t result = (WebKit *)(*(uint64_t (**)(WebKit *))(*(void *)v7 + 8))(v7);
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

void WebKit::WebUserContentController::addUserScripts(WebKit *a1, _DWORD *a2, int a3)
{
  unsigned int v3 = a2[3];
  if (v3)
  {
    uint64_t v5 = (uint64_t)a1;
    uint64_t v6 = 104 * v3;
    uint64_t v7 = (void *)(*(void *)a2 + 8);
    do
    {
      WebKit::worldMap(a1);
      uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, v7);
      WebKit::worldMap((WebKit *)v8);
      uint64_t v9 = WebKit::worldMap(void)::map;
      if (WebKit::worldMap(void)::map) {
        uint64_t v9 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
      }
      if ((uint64_t *)v9 == v8)
      {
        a1 = (WebKit *)WTFLogAlways();
      }
      else
      {
        WebCore::UserScript::UserScript((uint64_t)v13, (uint64_t)(v7 + 1));
        uint64_t v10 = v8[1];
        CFRetain(*(CFTypeRef *)(v10 + 8));
        *(void *)&long long v12 = *(v7 - 1);
        BYTE8(v12) = 1;
        WebKit::WebUserContentController::addUserScriptInternal(v5, v10, &v12, v13, a3);
        CFRelease(*(CFTypeRef *)(v10 + 8));
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v13, v11);
      }
      v7 += 13;
      v6 -= 104;
    }
    while (v6);
  }
}

WebKit::WebBackForwardListProxy *WebKit::WebBackForwardListProxy::WebBackForwardListProxy(WebKit::WebBackForwardListProxy *this, WebKit::WebPage *a2)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1EE9F8028;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 2) = v4;
  *((unsigned char *)this + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *((unsigned char *)this + 32) = 0;
  return this;
}

WebKit::TextAnimationController *WebKit::TextAnimationController::TextAnimationController(WebKit::TextAnimationController *this, WebKit::WebPage *a2)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *(void *)this = v4;
  *((unsigned char *)this + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 136) = 0;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 208) = 0;
  *((unsigned char *)this + 2std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *((unsigned char *)this + 22WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *((unsigned char *)this + 336) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  return this;
}

uint64_t WebKit::WebPluginInfoProvider::singleton(WebKit::WebPluginInfoProvider *this)
{
    return WebKit::WebPluginInfoProvider::singleton(void)::pluginInfoProvider;
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(void *)uint64_t result = &unk_1EE9F3880;
  WebKit::WebPluginInfoProvider::singleton(void)::pluginInfoProvider = result;
  return result;
}

WebKit::WebPaymentCoordinator *WebKit::WebPaymentCoordinator::WebPaymentCoordinator(WebKit::WebPaymentCoordinator *this, WebKit::WebPage *a2)
{
  unsigned int v3 = (char *)this + 8;
  *(void *)this = &unk_1EE9E67D8;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = &unk_1EE9E68A0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = &unk_1EE9E68D8;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = a2;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
  uint64_t v4 = WebKit::WebProcess::singleton(this);
  WebKit::AuxiliaryProcess::addMessageReceiver(v4, 0xBBu, *(void *)(*((void *)this + 4) + 40), (uint64_t)v3);
  return this;
}

WebKit::WebNotificationClient *WebKit::WebNotificationClient::WebNotificationClient(WebKit::WebNotificationClient *this, WebKit::WebPage *a2)
{
  unsigned int v3 = 0;
  *(void *)this = &unk_1EE9F6A20;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    unsigned int v3 = (atomic_uint *)*((void *)a2 + 3);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  *((void *)this + 2) = v3;
  return this;
}

uint64_t WebKit::WebDatabaseProvider::getOrCreate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  {
    WebKit::databaseProviders(void)::databaseProviders = 0;
  }
  v5[0] = &v7;
  v5[1] = &v8;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::ensure<WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0>(&WebKit::databaseProviders(void)::databaseProviders, &v8, v5, (uint64_t)v6);
  uint64_t v4 = v7;
  if (!v7)
  {
    uint64_t v4 = *(void *)(*(void *)(v6[0] + 8) + 8);
    ++*(_DWORD *)(v4 + 8);
  }
  *a2 = v4;
  return result;
}

WebKit::WebInspectorClient *WebKit::WebInspectorClient::WebInspectorClient(WebKit::WebInspectorClient *this, WebKit::WebPage *a2)
{
  *(void *)this = &unk_1EE9F11B0;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = &unk_1EE9F1280;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    unsigned int v3 = (atomic_uint *)*((void *)a2 + 3);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  *((void *)this + 2) = v3;
  *(_OWORD *)((char *)this + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

WebKit::LibWebRTCProvider *WebKit::LibWebRTCProvider::LibWebRTCProvider(WebKit::LibWebRTCProvider *this, WebKit::WebPage *a2)
{
  *(void *)WebCore::LibWebRTCProvider::LibWebRTCProvider(this) = &unk_1EE9F20F8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v4, 1u);
  *((void *)this + 25) = v4;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 172) = 1;
  return this;
}

WebKit::WebEditorClient *WebKit::WebEditorClient::WebEditorClient(WebKit::WebEditorClient *this, WebKit::WebPage *a2)
{
  unsigned int v3 = 0;
  *((_DWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)this = &unk_1EE9F6120;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_1EE9F6418;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    unsigned int v3 = (atomic_uint *)*((void *)a2 + 3);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v3;
  return this;
}

WebKit::WebChromeClient *WebKit::WebChromeClient::WebChromeClient(WebKit::WebChromeClient *this, WebKit::WebPage *a2)
{
  uint64_t v4 = WebCore::ChromeClient::ChromeClient(this);
  *(void *)uint64_t v4 = &unk_1EE9F50E0;
  *(_WORD *)(v4 + 8) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v5, 1u);
  *((void *)this + 2) = v5;
  return this;
}

WebKit::WebPageTesting *WebKit::WebPageTesting::WebPageTesting(WebKit::WebPageTesting *this, WebKit::WebPage *a2)
{
  *(void *)this = &unk_1EE9F87E0;
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  uint64_t v4 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v5, 1u);
  *((void *)this + 2) = v5;
  uint64_t v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v4);
  uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  WebKit::AuxiliaryProcess::addMessageReceiver(v6, 0xB9u, *(void *)(v8 + 40), (uint64_t)this);
  return this;
}

WebKit::FindController *WebKit::FindController::FindController(WebKit::FindController *this, WebKit::WebPage *a2)
{
  *(void *)this = &unk_1EE9F7F58;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    unsigned int v3 = (atomic_uint *)*((void *)a2 + 3);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v3;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 28) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = -1;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  return this;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::WebPage>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EEA00C10;
  v6[1] = WebKit::WebPage::setCanStartMediaTimerFired;
  uint64_t v6[2] = 0;
  void v6[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v6;
  return result;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 32 * v4));
  }
  uint64_t v5 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  uint64_t v6 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)a1 = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

_DWORD **WTF::RefPtr<WebCore::PluginInfoProvider,WTF::RawPtrTraits<WebCore::PluginInfoProvider>,WTF::DefaultRefDerefTraits<WebCore::PluginInfoProvider>>::operator=(_DWORD **a1, _DWORD *a2)
{
  if (a2) {
    ++a2[2];
  }
  unsigned int v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

_DWORD **WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>::operator=(_DWORD **a1, _DWORD *a2)
{
  if (a2) {
    ++a2[2];
  }
  unsigned int v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

void *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebStorageProvider,WTF::String,std::array<unsigned char,8ul>>@<X0>(_DWORD **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v7 = *a2;
  *uint64_t result = &unk_1EE9F4A08;
  result[1] = 0;
  uint64_t v8 = *a1;
  if (*a1) {
    *v8 += 2;
  }
  result[2] = v8;
  result[3] = v7;
  *a3 = result;
  return result;
}

WTF *WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(WTF **)a1;
  if (result)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

void *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(void *result, uint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(32 * v4));
    *(_DWORD *)(v3 + 8) = v4;
    *(void *)uint64_t v3 = v5;
    unsigned int v6 = *(_DWORD *)(a2 + 12);
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)a2;

  return (void *)WTF::CompactMapper<WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>::compactMap(v3, v7, v6);
}

WTF::AtomString *WTF::AtomString::AtomString(WTF::AtomString *this, WTF::AtomStringImpl **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if ((*((unsigned char *)v3 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v3 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase((uint64_t *)&v5, v3, (WTF::StringImpl *)a2);
      uint64_t v3 = v5;
    }
  }
  *(void *)this = v3;
  return this;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::UseFixedLayoutDidChange>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2120;
  *((void *)v5 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::ProcessAssertion::acquireSync(*(WebKit::ProcessAssertion **)(a1 + 8));
  WTF::RunLoop::main(v2);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9D0188;
  v5[1] = v3;
  void v5[2] = v4;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_198665AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::{lambda(void *,BENetworkingProcess *,NSError *)#1}::__invoke(uint64_t *a1, const void *a2)
{
  uint64_t v4 = (atomic_uchar *)a1[5];
  if (v4) {
    uint64_t v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[6];
  *(void *)&long long v11 = v5;
  *((void *)&v11 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v6;
  uint64_t v9 = a2;
  if (a2) {
    CFRetain(a2);
  }
  int v10 = 1;
  WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(a1[4], &v11);
  ((void (*)(char *, const void **))off_1EE9D1B98[v10])(&v12, &v9);
  uint64_t result = (atomic_uchar *)v11;
  if ((void)v11) {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v11, v7);
  }
  return result;
}

void sub_198665C34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::{lambda(void *,BERenderingProcess *,NSError *)#1}::__invoke(uint64_t *a1, const void *a2)
{
  uint64_t v4 = (atomic_uchar *)a1[5];
  if (v4) {
    uint64_t v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[6];
  *(void *)&long long v11 = v5;
  *((void *)&v11 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v6;
  uint64_t v9 = a2;
  if (a2) {
    CFRetain(a2);
  }
  int v10 = 2;
  WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(a1[4], &v11);
  ((void (*)(char *, const void **))off_1EE9D1B98[v10])(&v12, &v9);
  uint64_t result = (atomic_uchar *)v11;
  if ((void)v11) {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v11, v7);
  }
  return result;
}

void sub_198665D38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *(_OWORD *)uint64_t v5 = v2;
  (*(void (**)(uint64_t, WTF::ThreadSafeWeakPtrControlBlock **))(*(void *)a1 + 16))(a1, v5);
  uint64_t result = (atomic_uchar *)v5[0];
  v5[0] = 0;
  if (result) {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  }
  return result;
}

void sub_198665DEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::ThreadSafeWeakPtrControlBlock *a9)
{
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D1CB0;
  uint64_t v3 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9D1B98[v4])(&v7, (char *)this + 40);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  return WTF::fastFree(this, a2);
}

void WebKit::AuxiliaryProcess::initialize(WebKit::AuxiliaryProcess *this, const WebKit::AuxiliaryProcessInitializationParameters *a2)
{
  WebCore::setAuxiliaryProcessType();
  if (!*((unsigned char *)a2 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x1986661E4);
  }
  WebCore::Process::setIdentifier();
  WebKit::AuxiliaryProcess::platformInitialize(this, (uint64_t)a2);
  uint64_t v34 = 0;
  memset(v33, 0, 41);
  (*(void (**)(WebKit::AuxiliaryProcess *, const WebKit::AuxiliaryProcessInitializationParameters *, _OWORD *))(*(void *)this + 88))(this, a2, v33);
  uint64_t v4 = (WTF *)(*(uint64_t (**)(WebKit::AuxiliaryProcess *, const WebKit::AuxiliaryProcessInitializationParameters *))(*(void *)this + 72))(this, a2);
  WTF::logChannels(v4);
  LOBYTE(v3WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  char v32 = 0;
  uint64_t v5 = (WebCore *)WTF::LogChannels::initializeLogChannelsIfNecessary();
  WebCore::logChannels(v5);
  LOBYTE(v29) = 0;
  char v30 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
  }
  LOBYTE(v27) = 0;
  char v28 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  uint64_t v6 = (PAL::SessionID *)(*(uint64_t (**)(WebKit::AuxiliaryProcess *, const WebKit::AuxiliaryProcessInitializationParameters *))(*(void *)this + 80))(this, a2);
  PAL::SessionID::enableGenerationProtection(v6);
  WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected = 1;
  WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected = 1;
  int v24 = *((_DWORD *)a2 + 10);
  char v7 = (void *)*((void *)a2 + 6);
  object = v7;
  if (v7) {
    os_retain(v7);
  }
  IPC::Connection::createClientConnection((uint64_t)&v24, (mach_port_context_t *)&v26);
  uint64_t v8 = v26;
  int v26 = 0;
  uint64_t v9 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = v8;
  if (v9)
  {
    char v10 = 0;
    atomic_uchar *volatile v11 = *v9;
    atomic_compare_exchange_strong_explicit(*v9, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10) {
      MEMORY[0x19972E8D0](v11);
    }
    uint64_t v12 = *((void *)v11 + 1);
    uint64_t v13 = v12 - 1;
    *((void *)v11 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v12 - 1;
    if (v12 == 1)
    {
      uint64_t v23 = *((void *)v11 + 2);
      uint64_t v15 = *((void *)v11 + 3);
      *((void *)v11 + 3) = 0;
      BOOL v14 = v23 == 0;
    }
    else
    {
      BOOL v14 = 0;
      uint64_t v15 = 0;
    }
    int v16 = 1;
    atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
    }
    if (!v13)
    {
      uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v17 = &unk_1EE9B37E8;
      *(void *)(v17 + 8) = v11;
      *(void *)(v17 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v15;
      *(unsigned char *)(v17 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v14;
      uint64_t v35 = v17;
      WTF::ensureOnMainRunLoop();
      uint64_t v18 = v35;
      uint64_t v35 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v26);
  if (object) {
    os_release(object);
  }
  uint64_t v19 = (WTF::RunLoop *)(*(uint64_t (**)(WebKit::AuxiliaryProcess *, void))(*(void *)this + 96))(this, *((void *)this + 5));
  uint64_t v20 = (IPC::Connection *)*((void *)this + 5);
  int v21 = (_OWORD *)WTF::RunLoop::current(v19);
  IPC::Connection::open(v20, (uint64_t)this, v21);
  WebKit::SandboxInitializationParameters::~SandboxInitializationParameters((WebKit::SandboxInitializationParameters *)v33, v22);
}

void IPC::Connection::createClientConnection(uint64_t a1@<X0>, mach_port_context_t *a2@<X8>)
{
  mach_port_context_t v4 = WTF::fastMalloc((WTF *)0x170);
  mach_port_context_t v5 = v4;
  int v7 = *(_DWORD *)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v8 = v6;
  if (v6)
  {
    os_retain(v6);
    IPC::Connection::Connection(v5, &v7, 0);
    os_release(v6);
  }
  else
  {
    IPC::Connection::Connection(v4, &v7, 0);
  }
  *a2 = v5;
}

WebKit::LogChannels *WebKit::LogChannels::LogChannels(WebKit::LogChannels *this)
{
  __dst[92] = *MEMORY[0x1E4F143B8];
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 1;
  *(void *)this = &unk_1EEA100D0;
  memcpy(__dst, &constinit_2, 0x2E0uLL);
  WTF::Vector<WTFLogChannel *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, __dst, 0x5CuLL);
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
    *((_DWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
    WTF::fastFree(v3, v2);
  }
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v5[0];
  *((void *)this + 2) = v5[1];
  return this;
}

uint64_t *WTF::Vector<WTFLogChannel *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    uint64_t *v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *a2++;
      *(void *)(*v3 + 8 * v8++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebKit::SandboxInitializationParameters::~SandboxInitializationParameters(WebKit::SandboxInitializationParameters *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  uint64_t v6 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v6, v5);
  }
}

uint64_t WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::CString>::destruct(*(WTF **)a1, (void *)(*(void *)a1 + 8 * v3));
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0,void,WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *>::call(uint64_t a1, uint64_t a2, WebKit::ExtensionProcess *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(atomic_uchar **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (a6)
  {
    char v10 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_FAULT))
    {
      MEMORY[0x19972EAD0](&v38, [a6 localizedDescription]);
      WTF::String::utf8();
      if (cf) {
        char v28 = (char *)cf + 16;
      }
      else {
        char v28 = 0;
      }
      MEMORY[0x19972EAD0](&v36, [a6 localizedFailureReason]);
      WTF::String::utf8();
      if (v37) {
        uint64_t v29 = (char *)v37 + 16;
      }
      else {
        uint64_t v29 = 0;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v29;
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "Error launching process, description '%s', reason '%s'", buf, 0x16u);
      uint64_t v31 = v37;
      unsigned int v37 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1) {
          WTF::fastFree(v31, v30);
        }
        else {
          --*(_DWORD *)v31;
        }
      }
      char v32 = v36;
      uint64_t v36 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v30);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      int v33 = (WTF *)cf;
      CFTypeRef cf = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1) {
          WTF::fastFree(v33, v30);
        }
        else {
          --*(_DWORD *)v33;
        }
      }
      uint64_t v34 = v38;
      unsigned int v38 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v30);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    if (v7) {
      atomic_uchar *volatile v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
    }
    else {
      atomic_uchar *volatile v11 = 0;
    }
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9D1C88;
    v12[1] = v11;
    v12[2] = v8;
    *(void *)buf = v12;
    WTF::callOnMainRunLoop();
    uint64_t v13 = *(void *)buf;
    *(void *)buf = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    WebKit::ExtensionProcess::invalidate(a3);
  }
  else
  {
    uint64_t v17 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v17 = 1;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
    uint64_t v18 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *(_DWORD *)v18 += 2;
    }
    unsigned int v38 = v18;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v37 = (WTF::StringImpl *)cf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    aBlock = 0;
    uint64_t v36 = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    WebKit::AssertionCapability::AssertionCapability(buf, (uint64_t *)&v38, (uint64_t *)&v37, (uint64_t *)&v36, (uint64_t *)&cf, (uint64_t *)&aBlock);
    if (aBlock) {
      (*(void (**)(void *))(*(void *)aBlock + 8))(aBlock);
    }
    if (cf) {
      (*(void (**)(CFTypeRef))(*(void *)cf + 8))(cf);
    }
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v19);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v19);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v19);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    aBlock = _Block_copy(&__block_literal_global_26);
    WebKit::ExtensionProcess::grantCapability((uint64_t)a3, (uint64_t *)&buf[8], (uint64_t *)&aBlock, &cf);
    _Block_release(aBlock);
    WebKit::ExtensionCapabilityGrant::setPlatformGrant(v17 + 8, (uint64_t *)&cf);
    CFTypeRef v20 = cf;
    CFTypeRef cf = 0;
    if (v20) {
      CFRelease(v20);
    }
    WebKit::AssertionCapability::~AssertionCapability((const void **)buf);
    if (v7) {
      int v21 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
    }
    else {
      int v21 = 0;
    }
    *(void *)buf = v21;
    *(void *)&uint8_t buf[8] = v8;
    *(void *)&uint8_t buf[16] = a4;
    *(void *)&uint8_t buf[24] = a5;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v41, (uint64_t)a3);
    uint64_t v43 = (unsigned int *)v17;
    uint64_t v22 = (char *)WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v22 = &unk_1EE9D1CB0;
    *((void *)v22 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *(void *)buf;
    uint64_t v23 = *(void *)&buf[8];
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *((void *)v22 + 2) = v23;
    *(_OWORD *)(v22 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(_OWORD *)&buf[16];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v22 + 40), (uint64_t)&v41);
    int v24 = v43;
    uint64_t v43 = 0;
    *((void *)v22 + 7) = v24;
    CFTypeRef cf = v22;
    WTF::callOnMainRunLoop();
    CFTypeRef v25 = cf;
    CFTypeRef cf = 0;
    if (v25) {
      (*(void (**)(CFTypeRef))(*(void *)v25 + 8))(v25);
    }
    int v26 = v43;
    uint64_t v43 = 0;
    if (v26) {
      WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v26);
    }
    if (v42 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9D1B98[v42])(&v38, &v41);
    }
    int v42 = -1;
    uint64_t v27 = *(atomic_uchar **)buf;
    *(void *)buf = 0;
    if (v27) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v14);
    }
  }
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v14);
  }
}

void sub_198666A1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, CFTypeRef cf, WTF::ThreadSafeWeakPtrControlBlock *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,unsigned int *a21)
{
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    (*(void (**)(CFTypeRef))(*(void *)v24 + 8))(v24);
  }
  CFTypeRef v25 = a21;
  a21 = 0;
  if (v25) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v25);
  }
  if (a20 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9D1B98[a20])(&a13, v22);
  }
  a20 = -1;
  int v26 = (atomic_uchar *)a15;
  a15 = 0;
  if (v26) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, a2);
  }
  if (v21) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v21, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198666D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CE2A0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CE2A0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CE2B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::weakDeref(atomic_uchar *this, void *a2)
{
  long long v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 2) - 1;
  *((void *)v2 + 2) = v4;
  if (v4)
  {
    int v5 = 1;
    atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != 1)
    {
      return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    }
  }
  else
  {
    uint64_t v6 = *((void *)v2 + 1);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      uint64_t v8 = v6;
      this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
      uint64_t v6 = v8;
    }
    if (!v6)
    {
      return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::ProcessAssertion::acquireSync(WebKit::ProcessAssertion *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    uint64_t v3 = cf ? (char *)cf + 16 : 0;
    int v4 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = this;
    __int16 v34 = 2082;
    uint64_t v35 = (uint64_t)v3;
    __int16 v36 = 1024;
    int v37 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::acquireSync Trying to take RBS assertion '%{public}s' for process with PID=%d", buf, 0x1Cu);
    uint64_t v6 = (WTF *)cf;
    CFTypeRef cf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1) {
        WTF::fastFree(v6, v5);
      }
      else {
        --*(_DWORD *)v6;
      }
    }
  }
  if (!*((unsigned char *)this + 168) || !*((unsigned char *)this + 128) || !*((void *)this + 10)) {
    goto LABEL_35;
  }
  char v7 = 0;
  atomic_compare_exchange_strong_explicit(WebKit::ProcessAssertion::s_capabilityLock, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x19972E8D0](WebKit::ProcessAssertion::s_capabilityLock);
  }
  if (!*((unsigned char *)this + 168) || !*((unsigned char *)this + 128))
  {
    __break(1u);
    goto LABEL_58;
  }
  *(void *)buf = _Block_copy(*((const void **)this + 15));
  WebKit::ExtensionProcess::grantCapability((uint64_t)this + 152, (uint64_t *)this + 10, (uint64_t *)buf, &cf);
  _Block_release(*(const void **)buf);
  WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)this + 136, (uint64_t *)&cf);
  int v8 = [*((id *)this + 18) isValid];
  char v9 = v8;
  if (v8)
  {
    uint64_t v10 = qword_1EB358348;
    if (!os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    atomic_uchar *volatile v11 = "%p - ProcessAssertion() Successfully granted capability";
    uint64_t v12 = v10;
    uint32_t v13 = 12;
    goto LABEL_30;
  }
  switch(*((unsigned char *)this + 16))
  {
    case 1:
      BOOL v14 = "Background";
      break;
    case 2:
      BOOL v14 = "UnboundedNetworking";
      break;
    case 3:
      BOOL v14 = "Foreground";
      break;
    case 4:
      BOOL v14 = "MediaPlayback";
      break;
    case 5:
      BOOL v14 = "FinishTaskCanSleep";
      break;
    case 6:
      BOOL v14 = "FinishTaskInterruptable";
      break;
    case 7:
      BOOL v14 = "BoostedJetsam";
      break;
    default:
      BOOL v14 = "Suspended";
      break;
  }
  uint64_t v15 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = this;
    __int16 v34 = 2080;
    uint64_t v35 = (uint64_t)v14;
    atomic_uchar *volatile v11 = "%p - ProcessAssertion() Failed to grant capability %s";
    uint64_t v12 = v15;
    uint32_t v13 = 22;
LABEL_30:
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
  }
LABEL_31:
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  int v17 = 1;
  atomic_compare_exchange_strong_explicit(WebKit::ProcessAssertion::s_capabilityLock, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 == 1)
  {
    if (v9) {
      return;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)WebKit::ProcessAssertion::s_capabilityLock);
    if (v9) {
      return;
    }
  }
LABEL_35:
  CFTypeRef cf = 0;
  char v18 = [*((id *)this + 4) acquireWithError:&cf];
  uint64_t v19 = qword_1EB358348;
  if (v18)
  {
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v31) {
        CFTypeRef v20 = (char *)v31 + 16;
      }
      else {
        CFTypeRef v20 = 0;
      }
      int v21 = *((_DWORD *)this + 5);
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = this;
      __int16 v34 = 2082;
      uint64_t v35 = (uint64_t)v20;
      __int16 v36 = 1024;
      int v37 = v21;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::acquireSync Successfully took RBS assertion '%{public}s' for process with PID=%d", buf, 0x1Cu);
      if (v31)
      {
        if (*(_DWORD *)v31 == 1) {
          WTF::fastFree(v31, v22);
        }
        else {
          --*(_DWORD *)v31;
        }
      }
    }
    return;
  }
  uint64_t v23 = (WTF::RunLoop *)os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR);
  if (v23)
  {
    WTF::String::utf8();
    uint64_t v28 = v31 ? (uint64_t)v31 + 16 : 0;
    int v29 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218754;
    *(void *)&uint8_t buf[4] = this;
    __int16 v34 = 2082;
    uint64_t v35 = v28;
    __int16 v36 = 1024;
    int v37 = v29;
    __int16 v38 = 2114;
    CFTypeRef v39 = cf;
    _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "%p - ProcessAssertion::acquireSync Failed to acquire RBS assertion '%{public}s' for process with PID=%d, error: %{public}@", buf, 0x26u);
    uint64_t v23 = v31;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1) {
        uint64_t v23 = (WTF::RunLoop *)WTF::fastFree(v31, v30);
      }
      else {
        --*(_DWORD *)v31;
      }
    }
  }
  WTF::RunLoop::main(v23);
  CFTypeRef v24 = (atomic_uchar *)*((void *)this + 1);
  if (v24)
  {
    CFTypeRef v25 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v24);
    goto LABEL_46;
  }
LABEL_58:
  CFTypeRef v25 = 0;
LABEL_46:
  int v26 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v26 = &unk_1EE9D01B0;
  v26[1] = v25;
  v26[2] = this;
  *(void *)buf = v26;
  WTF::RunLoop::dispatch();
  uint64_t v27 = *(void *)buf;
  *(void *)buf = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
}

void sub_19866741C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *aBlock)
{
  _Block_release(aBlock);
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)WebKit::ProcessAssertion::s_capabilityLock);
  }
  _Unwind_Resume(a1);
}

void WebKit::ExtensionCapabilityGrant::setPlatformGrant(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  int v5 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    CFRelease(v5);
  }
  if ([v3 isValid]
    && ([v3 invalidate] & 1) == 0
    && (uint64_t v6 = qword_1EB358320, os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_ERROR)))
  {
    int v7 = 138543362;
    int v8 = v3;
    _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "Invalidating grant %{public}@ failed", (uint8_t *)&v7, 0xCu);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(v3);
}

void sub_1986675AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ExtensionProcess::grantCapability(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v27 = 0;
  *a4 = 0;
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 == -1) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  if (v9 == 2)
  {
    if (v8 == 2)
    {
      char v17 = objc_opt_respondsToSelector();
      char v18 = *(void **)a1;
      uint64_t v19 = *a2;
      if (v17)
      {
        uint64_t v20 = *a3;
        *a3 = 0;
        BOOL v14 = malloc_type_malloc(0x28uLL, 0x10E0040799C3B1DuLL);
        *BOOL v14 = MEMORY[0x1E4F14398];
        v14[1] = 50331650;
        v14[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke;
        v14[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::descriptor;
        v14[4] = v20;
        _Block_release(0);
        uint64_t v15 = (const void *)[v18 grantCapability:v19 error:&v27 invalidationHandler:v14];
        CFTypeRef v16 = v15;
        if (v15) {
          goto LABEL_17;
        }
        goto LABEL_18;
      }
      CFTypeRef v25 = (const void *)[v18 grantCapability:*a2 error:&v27];
      int v26 = v25;
      if (!v25) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
  }
  else if (v9 == 1)
  {
    if (v8 == 1)
    {
      char v10 = objc_opt_respondsToSelector();
      atomic_uchar *volatile v11 = *(void **)a1;
      uint64_t v12 = *a2;
      if (v10)
      {
        uint64_t v13 = *a3;
        *a3 = 0;
        BOOL v14 = malloc_type_malloc(0x28uLL, 0x10E0040799C3B1DuLL);
        *BOOL v14 = MEMORY[0x1E4F14398];
        v14[1] = 50331650;
        v14[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke;
        v14[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::descriptor;
        v14[4] = v13;
        _Block_release(0);
        uint64_t v15 = (const void *)[v11 grantCapability:v12 error:&v27 invalidationHandler:v14];
        CFTypeRef v16 = v15;
        if (v15) {
          goto LABEL_17;
        }
        goto LABEL_18;
      }
      CFTypeRef v25 = (const void *)[v11 grantCapability:*a2 error:&v27];
      int v26 = v25;
      if (!v25) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
  }
  else if (!v8)
  {
    char v21 = objc_opt_respondsToSelector();
    uint64_t v22 = *(void **)a1;
    uint64_t v23 = *a2;
    if (v21)
    {
      uint64_t v24 = *a3;
      *a3 = 0;
      BOOL v14 = malloc_type_malloc(0x28uLL, 0x10E0040799C3B1DuLL);
      *BOOL v14 = MEMORY[0x1E4F14398];
      v14[1] = 50331650;
      v14[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke;
      v14[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::descriptor;
      v14[4] = v24;
      _Block_release(0);
      uint64_t v15 = (const void *)[v22 grantCapability:v23 error:&v27 invalidationHandler:v14];
      CFTypeRef v16 = v15;
      if (v15) {
LABEL_17:
      }
        CFRetain(v15);
LABEL_18:
      *a4 = v16;
      _Block_release(v14);
      return;
    }
    CFTypeRef v25 = (const void *)[v22 grantCapability:*a2 error:&v27];
    int v26 = v25;
    if (!v25) {
      goto LABEL_25;
    }
LABEL_24:
    CFRetain(v25);
LABEL_25:
    *a4 = v26;
    return;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
}

void sub_1986678DC(_Unwind_Exception *a1)
{
  _Block_release(v2);
  void *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::ProcessAssertion(uint64_t a1, void *a2, _DWORD **a3, char a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_1994F5F10;
  *(void *)(v8 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = a1;
  *(void *)a1 = &unk_1EE9CF770;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = a4;
  uint64_t v9 = a2[17];
  if (v9) {
    LODWORD(v9) = *(_DWORD *)(v9 + 108);
  }
  *(_DWORD *)(a1 + 20) = v9;
  char v10 = *a3;
  if (*a3) {
    *v10 += 2;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v10;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 14WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  uint64_t v11 = a2[17];
  if (!v11) {
    goto LABEL_80;
  }
  std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](buf, v11 + 40);
  if (!buf[16]) {
    goto LABEL_80;
  }
  if (*(_DWORD *)&buf[8] != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CFBE8[*(unsigned int *)&buf[8]])(&v49, buf);
  }
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      uint64_t v12 = "Background";
      goto LABEL_14;
    case 2:
      uint64_t v12 = "UnboundedNetworking";
      uint64_t v13 = 20;
      break;
    case 3:
      uint64_t v12 = "Foreground";
LABEL_14:
      uint64_t v13 = 11;
      break;
    case 4:
      uint64_t v12 = "MediaPlayback";
      goto LABEL_20;
    case 5:
      uint64_t v12 = "FinishTaskCanSleep";
      uint64_t v13 = 19;
      break;
    case 6:
      uint64_t v12 = "FinishTaskInterruptable";
      uint64_t v13 = 24;
      break;
    case 7:
      uint64_t v12 = "BoostedJetsam";
LABEL_20:
      uint64_t v13 = 14;
      break;
    default:
      uint64_t v12 = "Suspended";
      uint64_t v13 = 10;
      break;
  }
  BOOL v14 = *(atomic_uchar **)(a1 + 8);
  if (v14)
  {
    uint64_t v44 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
    uint64_t v15 = *(atomic_uchar **)(a1 + 8);
    if (v15)
    {
      CFTypeRef v16 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v44 = 0;
  }
  CFTypeRef v16 = 0;
LABEL_24:
  (*(void (**)(WTF::StringImpl **__return_ptr, void *))(*a2 + 120))(&v48, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v47 = v49;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v46 = v49;
  char v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(void *)char v17 = &unk_1EE9D00C0;
  *((void *)v17 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = v16;
  *((void *)v17 + 2) = a1;
  *((void *)v17 + 3) = v12;
  *((void *)v17 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v13;
  uint64_t v49 = v17;
  char v18 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v18 = &unk_1EE9D0110;
  v18[1] = v44;
  v18[2] = a1;
  v18[3] = v12;
  v18[4] = v13;
  int v45 = v18;
  WebKit::AssertionCapability::AssertionCapability(buf, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v49, (uint64_t *)&v45);
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v20 = *(void *)&buf[8];
    if (*(void *)&buf[8]) {
      CFRetain(*(CFTypeRef *)&buf[8]);
    }
    char v21 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = v20;
    if (v21) {
      CFRelease(v21);
    }
    uint64_t v22 = *(void *)&buf[16];
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v23 = *(WTF::StringImpl **)(a1 + 88);
    *(void *)(a1 + 88) = v22;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v19);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v27 = *(void *)&buf[24];
    *(void *)&uint8_t buf[24] = 0;
    uint64_t v28 = *(WTF::StringImpl **)(a1 + 96);
    *(void *)(a1 + 96) = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v19);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    uint64_t v29 = v51;
    *(void *)&long long v51 = 0;
    char v30 = *(WTF::StringImpl **)(a1 + 104);
    *(void *)(a1 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v19);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    _Block_release(*(const void **)(a1 + 112));
    uint64_t v31 = *((void *)&v51 + 1);
    *((void *)&v51 + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
    *(void *)(a1 + 112) = v31;
    _Block_release(*(const void **)(a1 + 120));
    uint64_t v32 = v52;
    uint64_t v52 = 0;
    *(void *)(a1 + 120) = v32;
  }
  else
  {
    uint64_t v24 = *(const void **)&buf[8];
    *(void *)(a1 + 72) = &unk_1EE9B2A08;
    *(void *)(a1 + 80) = v24;
    if (v24) {
      CFRetain(v24);
    }
    *(void *)(a1 + 72) = &unk_1EE9B29E0;
    long long v25 = v51;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[16];
    *(_OWORD *)&uint8_t buf[16] = 0u;
    long long v51 = 0u;
    *(_OWORD *)(a1 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v25;
    uint64_t v26 = v52;
    uint64_t v52 = 0;
    *(void *)(a1 + 120) = v26;
    *(unsigned char *)(a1 + 128) = 1;
  }
  WebKit::AssertionCapability::~AssertionCapability((const void **)buf);
  if (v45) {
    (*(void (**)(void *))(*v45 + 8))(v45);
  }
  if (v49) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v49 + 8))(v49);
  }
  __int16 v34 = v46;
  int v46 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v33);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t v35 = v47;
  uint64_t v47 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v33);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  __int16 v36 = v48;
  uint64_t v48 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v33);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t v37 = a2[17];
  if (v37)
  {
    std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](buf, v37 + 40);
    LODWORD(v37) = buf[16];
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[16] = 0;
  }
  if (*(unsigned __int8 *)(a1 + 168) != v37)
  {
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v38 = *(unsigned int *)(a1 + 160);
      if (v38 != -1) {
        ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9CFBE8[v38])(&v49, a1 + 152);
      }
      char v39 = 0;
      *(_DWORD *)(a1 + 160) = -1;
    }
    else
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 152, (uint64_t)buf);
      char v39 = 1;
    }
    *(unsigned char *)(a1 + 168) = v39;
    goto LABEL_73;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(a1 + 152, (uint64_t)buf);
LABEL_73:
    if (buf[16] && *(_DWORD *)&buf[8] != -1) {
      ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CFBE8[*(unsigned int *)&buf[8]])(&v49, buf);
    }
  }
  if (*(unsigned char *)(a1 + 128) && *(void *)(a1 + 80)) {
    return a1;
  }
  uint64_t v40 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v12;
    _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion() Failed to create capability %s", buf, 0x16u);
  }
LABEL_80:
  (*(void (**)(unsigned char *__return_ptr, void *))(*a2 + 120))(buf, a2);
  WebKit::ProcessAssertion::init((WebKit::ProcessAssertion *)a1, *(const WTF::String **)buf);
  int v42 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v41);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  return a1;
}

void sub_198668008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebKit::ExtensionCapabilityGrant *a9, uint64_t *a10, WTF::ThreadSafeWeakPtrControlBlock *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, int a18, int a19, char a20)
{
  if (a20 && a18 != -1) {
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9CFBE8[a18])(&a16, &a17);
  }
  if (*(unsigned char *)(v20 + 168))
  {
    uint64_t v25 = *(unsigned int *)(v20 + 160);
    if (v25 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9CFBE8[v25])(&a17, v22);
    }
    *(_DWORD *)(v20 + 160) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(a9);
  if (*(unsigned char *)(v20 + 128)) {
    WebKit::AssertionCapability::~AssertionCapability(v23);
  }
  uint64_t v27 = *(void *)(v20 + 64);
  *(void *)(v20 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *a10;
  *a10 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *(const void **)(v20 + 40);
  *(void *)(v20 + 40) = 0;
  if (v29) {
    CFRelease(v29);
  }
  char v30 = *v21;
  *char v21 = 0;
  if (v30) {
    CFRelease(v30);
  }
  uint64_t v31 = *(WTF::StringImpl **)(v20 + 24);
  *(void *)(v20 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v26);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

mach_port_context_t IPC::Connection::Connection(mach_port_context_t a1, int *a2, char a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1994F5F10;
  *(void *)(v6 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = a1;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(void *)(a1 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(unsigned char *)(a1 + 32) = a3;
  *(_WORD *)(a1 + 33) = 1;
  *(unsigned char *)(a1 + 35) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  WTF::WorkQueue::create();
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 18WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 8WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 14WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 223) = 0;
  *(_WORD *)(a1 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 41) = 257;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 26WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(void *)(a1 + 34WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&IPC::s_connectionMapLock);
  {
    uint64_t v8 = IPC::connectionMap(void)::map;
    if (IPC::connectionMap(void)::map)
    {
LABEL_4:
      int v9 = *(_DWORD *)(v8 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    IPC::connectionMap(void)::map = 0;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v8 = IPC::connectionMap(void)::map;
  if (IPC::connectionMap(void)::map) {
    goto LABEL_4;
  }
  int v9 = 0;
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = v9 & ((v13 >> 31) ^ v13);
  uint64_t v15 = (void *)(v8 + 24 * v14);
  uint64_t v16 = *v15;
  if (*v15)
  {
    char v17 = 0;
    int v27 = 1;
    while (v16 != v10)
    {
      if (v16 == -1) {
        char v17 = v15;
      }
      unsigned int v14 = (v14 + v27) & v9;
      uint64_t v15 = (void *)(v8 + 24 * v14);
      uint64_t v16 = *v15;
      ++v27;
      if (!*v15)
      {
        if (v17)
        {
          *char v17 = 0;
          v17[1] = 0;
          char v17[2] = 0;
          --*(_DWORD *)(v8 - 16);
          uint64_t v10 = *(void *)(a1 + 24);
          uint64_t v15 = v17;
          goto LABEL_7;
        }
        *uint64_t v15 = v10;
        char v18 = (atomic_uchar **)(v8 + 24 * v14 + 8);
        if (a1) {
          goto LABEL_8;
        }
        uint64_t v19 = 0;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v17 = (void *)(v8 + 24 * v14);
LABEL_7:
    *char v17 = v10;
    char v18 = (atomic_uchar **)(v17 + 1);
LABEL_8:
    uint64_t v19 = *(atomic_uchar **)a1;
    if (*(void *)a1) {
      uint64_t v19 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v19);
    }
LABEL_10:
    uint64_t v20 = *v18;
    void *v18 = v19;
    if (v20) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, v7);
    }
    void v15[2] = a1;
    if (IPC::connectionMap(void)::map) {
      int v21 = *(_DWORD *)(IPC::connectionMap(void)::map - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(IPC::connectionMap(void)::map - 12) = v21;
    if (IPC::connectionMap(void)::map) {
      int v22 = *(_DWORD *)(IPC::connectionMap(void)::map - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(IPC::connectionMap(void)::map - 16) + v22);
    unint64_t v24 = *(unsigned int *)(IPC::connectionMap(void)::map - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        goto LABEL_18;
      }
    }
    else if (3 * v24 > 4 * v23)
    {
      goto LABEL_18;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  }
LABEL_18:
  os_unfair_lock_unlock((os_unfair_lock_t)&IPC::s_connectionMapLock);
  int v28 = *a2;
  uint64_t v25 = (void *)*((void *)a2 + 1);
  object = v25;
  if (v25) {
    os_retain(v25);
  }
  IPC::Connection::platformInitialize(a1, (uint64_t)&v28);
  if (object) {
    os_release(object);
  }
  return a1;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::weakRef(atomic_uchar *this)
{
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this);
  }
  if (*((void *)this + 3))
  {
    ++*((void *)this + 2);
    uint64_t v3 = this;
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return v3;
}

void IPC::Connection::platformInitialize(mach_port_context_t guard, uint64_t a2)
{
  mach_port_name_t v4 = *(_DWORD *)a2;
  if (!*(unsigned char *)(guard + 32))
  {
    if (v4)
    {
      *(_DWORD *)(guard + 312) = v4;
      goto LABEL_4;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1986686ECLL);
  }
  if (v4 + 1 <= 1) {
    goto LABEL_12;
  }
  *(_DWORD *)(guard + 328) = v4;
  mach_port_guard(*MEMORY[0x1E4F14960], v4, guard, 1);
LABEL_4:
  int v5 = *(void **)(a2 + 8);
  if (v5) {
    id v6 = v5;
  }
  int v7 = *(void **)(guard + 352);
  *(void *)(guard + 352) = v5;
  if (v7)
  {
  }
}

unsigned char *std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_19866875C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 16))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_1986687D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void WebKit::AssertionCapability::~AssertionCapability(const void **this)
{
  _Block_release(this[6]);
  _Block_release(this[5]);
  uint64_t v3 = (WTF::StringImpl *)this[4];
  this[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)this[3];
  this[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = this[1];
  *this = &unk_1EE9B2A08;
  this[1] = 0;
  if (v6) {
    CFRelease(v6);
  }
}

{
  uint64_t vars8;

  WebKit::AssertionCapability::~AssertionCapability(this);

  JUMPOUT(0x199740C10);
}

void *WebKit::AssertionCapability::AssertionCapability(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE9B29E0;
  a1[1] = 0;
  uint64_t v8 = *a2;
  *a2 = 0;
  a1[2] = v8;
  uint64_t v9 = *a3;
  *a3 = 0;
  a1[3] = v9;
  uint64_t v10 = *a4;
  *a4 = 0;
  a1[4] = v10;
  unint64_t v11 = a1 + 4;
  uint64_t v12 = *a5;
  if (*a5)
  {
    *a5 = 0;
    uint64_t v13 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *uint64_t v13 = MEMORY[0x1E4F14398];
    v13[1] = 50331650;
    void v13[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v13[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
    v13[4] = v12;
  }
  else
  {
    uint64_t v13 = _Block_copy(0);
  }
  a1[5] = v13;
  uint64_t v14 = *a6;
  if (*a6)
  {
    *a6 = 0;
    uint64_t v15 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *uint64_t v15 = MEMORY[0x1E4F14398];
    v15[1] = 50331650;
    void v15[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v15[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
    v15[4] = v14;
  }
  else
  {
    uint64_t v15 = _Block_copy(0);
  }
  a1[6] = v15;
  uint64_t v16 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    uint64_t v17 = v23 ? (uint64_t)v23 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = v17;
    _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "AssertionCapability::AssertionCapability: taking assertion %{public}s", buf, 0xCu);
    if (v23)
    {
      if (*(_DWORD *)v23 == 1) {
        WTF::fastFree(v23, v18);
      }
      else {
        --*(_DWORD *)v23;
      }
    }
  }
  if (MEMORY[0x19972E990](*v11, "Suspended", 9))
  {
    uint64_t v19 = (const void *)[MEMORY[0x1E4F18BA8] suspended];
    uint64_t v20 = v19;
    if (!v19) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (MEMORY[0x19972E990](*v11, "Background", 10))
  {
    uint64_t v19 = (const void *)[MEMORY[0x1E4F18BA8] background];
    uint64_t v20 = v19;
    if (!v19) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!MEMORY[0x19972E990](*v11, "Foreground", 10)) {
    return a1;
  }
  uint64_t v19 = (const void *)[MEMORY[0x1E4F18BA8] foreground];
  uint64_t v20 = v19;
  if (v19) {
LABEL_23:
  }
    CFRetain(v19);
LABEL_24:
  int v21 = (const void *)a1[1];
  a1[1] = v20;
  if (v21) {
    CFRelease(v21);
  }
  return a1;
}

void sub_198668C60(_Unwind_Exception *a1)
{
  _Block_release(*(const void **)(v1 + 48));
  _Block_release(*(const void **)(v1 + 40));
  char v6 = *v3;
  WTF::StringImpl *v3 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = *(WTF::StringImpl **)(v1 + 24);
  *(void *)(v1 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(WTF::StringImpl **)(v1 + 16);
  *(void *)(v1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(const void **)(v1 + 8);
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0;
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1)
{
  uint64_t v2 = IPC::connectionMap(void)::map;
  if (IPC::connectionMap(void)::map)
  {
    unsigned int v3 = *(_DWORD *)(IPC::connectionMap(void)::map - 4);
    int v4 = *(_DWORD *)(IPC::connectionMap(void)::map - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  uint64_t v7 = v5;
  uint64_t v8 = v5 + 16;
  if (a1) {
    bzero((void *)(v5 + 16), 24 * a1);
  }
  IPC::connectionMap(void)::map = v8;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(IPC::connectionMap(void)::map - 8) = a1 - 1;
  *(_DWORD *)(IPC::connectionMap(void)::map - std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *(_DWORD *)(IPC::connectionMap(void)::map - 12) = v4;
  if (v3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = (void *)v2;
    while (1)
    {
      if (*v10 != -1)
      {
        if (*v10)
        {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(v10, v6);
          unint64_t v11 = (atomic_uchar *)v10[1];
          v10[1] = 0;
          if (v11) {
LABEL_15:
          }
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, v6);
        }
        else
        {
          unint64_t v11 = (atomic_uchar *)v10[1];
          v10[1] = 0;
          if (v11) {
            goto LABEL_15;
          }
        }
      }
      v10 += 3;
      if (!--v9) {
        goto LABEL_17;
      }
    }
  }
  if (v2)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v2 - 16), v6);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  if (IPC::connectionMap(void)::map && (int v0 = *(_DWORD *)(IPC::connectionMap(void)::map - 4)) != 0) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v0 << (6 * *(_DWORD *)(IPC::connectionMap(void)::map - 12) >= (2 * v0)));
  }
  else {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(8u);
  }
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void WebKit::AuxiliaryProcessProxy::environmentIdentifier(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

WTF::StringImpl *WebKit::WebProcessProxy::environmentIdentifier@<X0>(WTF::StringImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  int v4 = (_DWORD *)*((void *)this + 134);
  if (v4 && v4[1])
  {
LABEL_29:
    *v4 += 2;
    goto LABEL_30;
  }
  char v18 = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  char v21 = 1;
  WTF::StringBuilder::append();
  uint64_t v5 = *((void *)v2 + 17);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 + 108);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v7 = -(int)v6;
      int v8 = 1;
      do
      {
        ++v8;
        BOOL v9 = v7 >= 0xA;
        v7 /= 0xAu;
      }
      while (v9);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  int v10 = 0;
  unsigned int v11 = v6;
  do
  {
    ++v10;
    BOOL v12 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v12);
LABEL_11:
  uint64_t v13 = (void *)MEMORY[0x19972DE60](&v18);
  if (v13) {
    WTF::writeIntegerToBuffer<unsigned char,int>(v6, v13);
  }
  uint64_t v15 = v18;
  if (v18
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18),
        (uint64_t v15 = v18) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)v2 + 134);
  *((void *)v2 + 13WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v19;
  uint64_t v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  this = v18;
  char v18 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  int v4 = (_DWORD *)*((void *)v2 + 134);
  if (v4) {
    goto LABEL_29;
  }
LABEL_30:
  *a2 = v4;
  return this;
}

void WebKit::WebPage::setHasLaunchedWebContentProcess(WebKit::WebPage *this)
{
  if ((WebKit::WebPage::setHasLaunchedWebContentProcess(void)::hasSetLaunchVariable & 1) == 0)
  {
    {
      WebKit::WebProcess::auditTokenForSelf((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process, (uint64_t)&v2);
      if (+[WKProcessExtension sharedInstance]) {
        [+[WKProcessExtension sharedInstance] lockdownSandbox:@"1.0"];
      }
      if (v3)
      {
        sandbox_enable_state_flag();
        WebKit::WebPage::setHasLaunchedWebContentProcess(void)::hasSetLaunchVariable = 1;
        return;
      }
      __break(1u);
    }
    uint64_t v1 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v1);
  }
}

uint64_t WebKit::AuxiliaryProcess::platformInitialize(WebCore::FloatingPointEnvironment *a1, uint64_t a2)
{
  char v3 = (WebCore::FloatingPointEnvironment *)WebCore::FloatingPointEnvironment::singleton(a1);
  WebCore::FloatingPointEnvironment::enableDenormalSupport(v3);
  WebCore::FloatingPointEnvironment::saveMainThreadEnvironment(v3);
  int v4 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  objc_msgSend(v4, "changeCurrentDirectoryPath:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundlePath"));
  WebCore::setApplicationBundleIdentifier((WebCore *)(a2 + 16), v5);
  WTF::setSDKAlignedBehaviors();
  BOOL v6 = +[WKProcessExtension sharedInstance] != 0;

  return MEMORY[0x1F40EB698](v6);
}

void *WebKit::NetworkProcess::initializeConnection(WebKit::NetworkProcess *this, IPC::Connection *a2)
{
  WebKit::AuxiliaryProcess::initializeConnection(this, a2);
  IPC::Connection::setDidCloseOnConnectionWorkQueueCallback((uint64_t)a2, (void (*)(Connection *))WebKit::callExitSoon);
  int v4 = (void *)*((void *)this + 26);
  CFTypeRef result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v4);
  uint64_t v6 = (uint64_t)result;
  uint64_t v8 = v7;
  if (v4) {
    v4 += 3 * *((unsigned int *)v4 - 1);
  }
  if (v4 != result)
  {
    do
    {
      CFTypeRef result = (void *)(*(uint64_t (**)(void, IPC::Connection *))(**(void **)(v6 + 16) + 16))(*(void *)(v6 + 16), a2);
      while (1)
      {
        v6 += 24;
        if (v6 == v8) {
          break;
        }
        if (*(void *)v6) {
          BOOL v9 = *(void *)v6 == -1;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9) {
          goto LABEL_10;
        }
      }
      uint64_t v6 = v8;
LABEL_10:
      ;
    }
    while ((void *)v6 != v4);
  }
  return result;
}

void non-virtual thunk to'WebKit::LaunchServicesDatabaseObserver::initializeConnection(xpc_object_t *this, _xpc_connection_s **a2)
{
}

uint64_t WebKit::AuthenticationManager::initializeConnection(WebKit::AuthenticationManager *this, IPC::Connection *a2)
{
  uint64_t result = WTF::isMainRunLoop(this);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198669504);
  }
  if (a2 && *((void *)a2 + 44))
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this + 8);
    uint64_t v5 = (atomic_uint *)*((void *)this + 2);
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    uint64_t v6 = (_xpc_connection_s *)*((void *)a2 + 44);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3321888768;
    handler[2] = ___ZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionE_block_invoke;
    handler[3] = &__block_descriptor_40_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e33_v16__0__NSObject_OS_xpc_object__8l;
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    BOOL v9 = (WTF *)v5;
    xpc_connection_set_event_handler(v6, handler);
    uint64_t result = (uint64_t)v9;
    BOOL v9 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = WTF::fastFree((WTF *)result, v7);
    }
    if (v5)
    {
      if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v5);
        return WTF::fastFree((WTF *)v5, v7);
      }
    }
  }
  return result;
}

void sub_198669524(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
  }
  if (v14)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::XPCEndpoint::sendEndpointToConnection(xpc_object_t *a1, _xpc_connection_s *a2)
{
  if (a2)
  {
    xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
    int v4 = (const char *)(*((uint64_t (**)(xpc_object_t *))*a1 + 2))(a1);
    uint64_t v5 = (const char *)(*((uint64_t (**)(xpc_object_t *))*a1 + 3))(a1);
    xpc_dictionary_set_string(xdict, v4, v5);
    uint64_t v6 = (const char *)(*((uint64_t (**)(xpc_object_t *))*a1 + 4))(a1);
    xpc_dictionary_set_value(xdict, v6, a1[2]);
    xpc_connection_send_message(a2, xdict);
    if (xdict)
    {
    }
  }
}

void sub_1986696A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

const char *WebKit::LaunchServicesDatabaseObserver::xpcEndpointMessageNameKey(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "message-name";
}

const char *WebKit::LaunchServicesDatabaseObserver::xpcEndpointMessageName(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "xpc-endpoint-launch-services-database-message";
}

const char *WebKit::LaunchServicesDatabaseObserver::xpcEndpointNameKey(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "xpc-endpoint-launch-services-database";
}

void *WebKit::WebProcess::initializeConnection(WebKit::WebProcess *this, IPC::Connection *a2)
{
  *((void *)a2 + 5) = WebKit::callExit;
  *((unsigned char *)a2 + 35) = 1;
  IPC::Connection::addMessageReceiver((uint64_t)a2, *((void *)this + 20) + 32, (uint64_t)this + 144, 8u, 0);
  IPC::Connection::addMessageReceiver((uint64_t)a2, *((void *)this + 26) + 32, (uint64_t)this + 192, 0x9Bu, 0);
  IPC::Connection::addMessageReceiver((uint64_t)a2, *((void *)this + 31) + 32, (uint64_t)this + 232, 0xB0u, 0);
  int v4 = (void *)*((void *)this + 34);
  uint64_t result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v4);
  uint64_t v6 = (uint64_t)result;
  uint64_t v8 = v7;
  if (v4) {
    v4 += 3 * *((unsigned int *)v4 - 1);
  }
  if (v4 != result)
  {
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, IPC::Connection *))(**(void **)(v6 + 16) + 16))(*(void *)(v6 + 16), a2);
      while (1)
      {
        v6 += 24;
        if (v6 == v8) {
          break;
        }
        if (*(void *)v6) {
          BOOL v9 = *(void *)v6 == -1;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9) {
          goto LABEL_10;
        }
      }
      uint64_t v6 = v8;
LABEL_10:
      ;
    }
    while ((void *)v6 != v4);
  }
  return result;
}

void *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  long long v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[3 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 24 * v1;
    while (!*result || *result == -1)
    {
      result += 3;
      v3 -= 24;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

uint64_t IPC::Connection::setDidCloseOnConnectionWorkQueueCallback(uint64_t this, void (*a2)(Connection *))
{
  *(void *)(this + 40) = a2;
  return this;
}

uint64_t WebKit::WebProcess::initializeProcess(WebKit::WebProcess *this, const WebKit::AuxiliaryProcessInitializationParameters *a2)
{
  v9[0] = (uint64_t)"enable-lockdown-mode";
  v9[1] = 21;
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)a2 + 56, v9, &v10);
  *((_WORD *)this + 309) = MEMORY[0x19972E990](v10, "1", 1) | 0x100;
  uint64_t v5 = v10;
  int v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (JSC::Options *)WTF::setProcessPrivileges();
  *(unsigned char *)(MEMORY[0x1E4F309C0] + 1726) = 0;
  uint64_t v7 = (WebKit::WebMessagePortChannelProvider *)JSC::Options::notifyOptionsChanged(v6);
  WebKit::WebMessagePortChannelProvider::singleton(v7);
  WebCore::MessagePortChannelProvider::setSharedProvider();
  return WebKit::WebProcess::platformInitializeProcess(this, a2);
}

void *WebKit::WebMessagePortChannelProvider::singleton(WebKit::WebMessagePortChannelProvider *this)
{
    return (void *)WebKit::WebMessagePortChannelProvider::singleton(void)::provider;
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x18);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_1EE9F69D0;
  WebKit::WebMessagePortChannelProvider::singleton(void)::provider = (uint64_t)result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::isAsyncTextInputFeatureFlagEnabled(void)::$_0 &&>>(PAL *a1)
{
  IsSmallScreen = (PAL *)PAL::deviceClassIsSmallScreen(a1);
  if (!IsSmallScreen)
  {
    uint64_t result = PAL::deviceHasIPadCapability(IsSmallScreen);
    if (!result) {
      return result;
    }
    goto LABEL_5;
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
LABEL_5:
    uint64_t result = _os_feature_enabled_impl();
    goto LABEL_6;
  }
  uint64_t result = 1;
LABEL_6:
  _MergedGlobals_64 = result;
  return result;
}

void WebKit::RemoteRenderingBackend::releaseRemoteImageBufferSet(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 128);
  if (!v3) {
    goto LABEL_22;
  }
  unsigned int v5 = *(_DWORD *)(v3 - 8);
  unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = *(void *)(v3 + 16 * v9);
  if (v10 != a2)
  {
    int v20 = 1;
    while (v10)
    {
      uint64_t v9 = (v9 + v20) & v5;
      uint64_t v10 = *(void *)(v3 + 16 * v9);
      ++v20;
      if (v10 == a2) {
        goto LABEL_3;
      }
    }
    uint64_t v9 = *(unsigned int *)(v3 - 4);
  }
LABEL_3:
  if (v9 == *(_DWORD *)(v3 - 4))
  {
LABEL_22:
    int v22 = 0;
    *(void *)buf = 0;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)buf);
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v22);
LABEL_23:
    char v21 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteRenderingBackend::releaseRemoteImageBufferSet(RemoteImageBufferSetIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 331: Invalid message dispatched %{public}s: BufferSet is being released before being created", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
    return;
  }
  uint64_t v11 = v3 + 16 * v9;
  BOOL v12 = *(unsigned int **)(v11 + 8);
  int v22 = v12;
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *v4;
  if (!*v4 || (v13 += 16 * *(unsigned int *)(v13 - 4), v13 != v11))
  {
    if (v13 != v11)
    {
      *(void *)uint64_t v11 = -1;
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v11 + 8));
      ++*(_DWORD *)(*v4 - 16);
      uint64_t v14 = *v4;
      int v15 = *v4 ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      uint64_t v16 = *v4;
      if (*v4)
      {
        unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
        unsigned int v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v4, v18 >> 1, 0);
        }
      }
    }
  }
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v22);
  if (!v12) {
    goto LABEL_23;
  }
}

void WebKit::RemoteImageBufferSet::ensureBufferForDisplay(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v6 = (WebCore::ImageBuffer **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 8));
  }
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v7;
  if (v8)
  {
    char v9 = 0;
    uint64_t v10 = *(void *)(v8 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](v10);
    }
    uint64_t v11 = *(void *)(v10 + 8);
    int v12 = 1;
    uint64_t v13 = v11 - 1;
    *(void *)(v10 + 8) = v11 - 1;
    if (v11 == 1)
    {
      uint64_t v55 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      *(void *)(v10 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
      BOOL v15 = v55 != 0;
    }
    else
    {
      uint64_t v14 = 0;
      BOOL v15 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
    }
    if (!v13)
    {
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      if (!v15) {
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  if (*v6 && WebCore::ImageBuffer::setNonVolatile(*v6) == 1)
  {
    float v59 = ceilf(*(float *)(a1 + 72));
    if (v59 >= 2147500000.0)
    {
      uint64_t v60 = 0x7FFFFFFFLL;
    }
    else if (v59 <= -2147500000.0)
    {
      uint64_t v60 = 0x80000000;
    }
    else
    {
      uint64_t v60 = (int)v59;
    }
    float v61 = ceilf(*(float *)(a1 + 76));
    if (v61 >= 2147500000.0)
    {
      unint64_t v62 = 0x7FFFFFFF00000000;
    }
    else if (v61 <= -2147500000.0)
    {
      unint64_t v62 = 0x8000000000000000;
    }
    else
    {
      unint64_t v62 = (unint64_t)(int)v61 << 32;
    }
    v66.IntPoint m_location = 0;
    v66.m_size = (IntSize)(v62 | v60);
    WebCore::Region::Region((WebCore::Region *)&v67, &v66);
    WebCore::Region::operator=();
    WebCore::Region::~Region((WebCore::Region *)&v67);
    char v16 = 1;
  }
  else
  {
    char v16 = 0;
  }
  if (*v6) {
    BOOL v17 = a2[32] == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if ((v17 || WebKit::isSmallLayerBacking((uint64_t)*v6 + 16)) && *(unsigned char *)(a1 + 116)) {
    *(unsigned char *)(a1 + 1std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  }
  unsigned int v18 = *(WebCore::ImageBuffer **)(a1 + 48);
  if (!v18 || WebCore::ImageBuffer::isInUse(v18))
  {
    std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 56));
    char v30 = *(WebCore::ImageBuffer **)(a1 + 48);
    if (v30 && WebCore::ImageBuffer::isInUse(v30)) {
      WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=((uint64_t *)(a1 + 48), v54);
    }
    if (*(unsigned char *)(a1 + 116)) {
      *(unsigned char *)(a1 + 1std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
    }
  }
  if (*v6) {
    char v19 = v16;
  }
  else {
    char v19 = 1;
  }
  if ((v19 & 1) == 0 && a2[33])
  {
    *a3 = 2;
    goto LABEL_28;
  }
  *a3 = v16 ^ 1;
  std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>((uint64_t *)v6, (uint64_t *)(a1 + 48));
  if (*v6)
  {
    if (WebCore::ImageBuffer::setNonVolatile(*v6) == 1 && *(unsigned char *)(a1 + 116)) {
      *(unsigned char *)(a1 + 1std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
    }
LABEL_28:
    if (*v6) {
      goto LABEL_29;
    }
  }
  uint64_t v67 = 0;
  v68[0] = 0;
  uint64_t v31 = *(void *)(a1 + 32);
  int v32 = *(unsigned __int8 *)(a1 + 80);
  float v33 = *(float *)(a1 + 84);
  char v34 = *(unsigned char *)(a1 + 96);
  uint64_t v63 = 0;
  int v64 = 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v65, (const WTF::MachSendRight *)((char *)v68 + 4));
  uint64_t v35 = WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebKit::RemoteRenderingBackend::allocateImageBuffer((uint64_t *)&v66.m_location, v31, (uint64_t *)(a1 + 72), v32, 3, (const void **)(a1 + 88), v34, &v63, v33, v35);
  IntPoint m_location = v66.m_location;
  v66.IntPoint m_location = 0;
  uint64_t v38 = *(void *)(a1 + 40);
  *(IntPoint *)(a1 + 40) = m_location;
  if (v38)
  {
    char v39 = 0;
    uint64_t v40 = *(void *)(v38 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v39, 1u, memory_order_acquire, memory_order_acquire);
    if (v39) {
      MEMORY[0x19972E8D0](v40);
    }
    uint64_t v41 = *(void *)(v40 + 8);
    int v42 = 1;
    uint64_t v43 = v41 - 1;
    *(void *)(v40 + 8) = v41 - 1;
    if (v41 == 1)
    {
      uint64_t v57 = *(void *)(v40 + 16);
      uint64_t v44 = *(void *)(v40 + 24);
      *(void *)(v40 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
      BOOL v45 = v57 != 0;
    }
    else
    {
      uint64_t v44 = 0;
      BOOL v45 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
    if (v42 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v40);
    }
    if (!v43)
    {
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      if (!v45) {
        WTF::fastFree((WTF *)v40, v36);
      }
    }
    IntPoint v46 = v66.m_location;
    v66.IntPoint m_location = 0;
    if (v46)
    {
      char v47 = 0;
      uint64_t v48 = *(void *)(*(void *)&v46 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v48, (unsigned __int8 *)&v47, 1u, memory_order_acquire, memory_order_acquire);
      if (v47) {
        MEMORY[0x19972E8D0](v48);
      }
      uint64_t v49 = *(void *)(v48 + 8);
      int v50 = 1;
      uint64_t v51 = v49 - 1;
      *(void *)(v48 + 8) = v49 - 1;
      if (v49 == 1)
      {
        uint64_t v58 = *(void *)(v48 + 16);
        uint64_t v52 = *(void *)(v48 + 24);
        *(void *)(v48 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
        BOOL v53 = v58 != 0;
      }
      else
      {
        uint64_t v52 = 0;
        BOOL v53 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v48, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
      if (v50 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v48);
      }
      if (!v51)
      {
        if (v52) {
          (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
        }
        if (!v53) {
          WTF::fastFree((WTF *)v48, v36);
        }
      }
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v65);
  *(unsigned char *)(a1 + 97) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v68 + 4));
LABEL_29:
  if (*a3 != 2)
  {
    int v20 = *(uint64_t **)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 40);
    if (v21)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v21 + 8));
      WebKit::RemoteRenderingBackend::createDisplayListRecorder(v20, v21, *(void *)(a1 + 24));
      char v23 = 0;
      uint64_t v24 = *(void *)(v21 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
      if (v23) {
        MEMORY[0x19972E8D0](v24);
      }
      uint64_t v25 = *(void *)(v24 + 8);
      int v26 = 1;
      uint64_t v27 = v25 - 1;
      *(void *)(v24 + 8) = v25 - 1;
      if (v25 == 1)
      {
        uint64_t v56 = *(void *)(v24 + 16);
        uint64_t v28 = *(void *)(v24 + 24);
        *(void *)(v24 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
        BOOL v29 = v56 != 0;
      }
      else
      {
        uint64_t v28 = 0;
        BOOL v29 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
      if (v26 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v24);
      }
      if (!v27)
      {
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        if (!v29) {
          WTF::fastFree((WTF *)v24, v22);
        }
      }
    }
    else
    {
      WebKit::RemoteRenderingBackend::createDisplayListRecorder(*(uint64_t **)(a1 + 32), 0, *(void *)(a1 + 24));
    }
    *(unsigned char *)(a1 + 98) = 1;
  }
}

uint64_t *std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  *uint64_t result = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *result;
  *uint64_t result = v4;
  if (v5)
  {
    char v6 = 0;
    uint64_t v7 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    int v9 = 1;
    uint64_t v10 = v8 - 1;
    *(void *)(v7 + 8) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v21 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      *(void *)(v7 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
      BOOL v12 = v21 != 0;
    }
    else
    {
      uint64_t v11 = 0;
      BOOL v12 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
    if (!v10)
    {
      if (v11) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      if (!v12) {
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  uint64_t v13 = *a2;
  *a2 = v3;
  if (v13)
  {
    char v14 = 0;
    uint64_t v15 = *(void *)(v13 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
    if (v14) {
      uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v15);
    }
    uint64_t v16 = *(void *)(v15 + 8);
    int v17 = 1;
    uint64_t v18 = v16 - 1;
    *(void *)(v15 + 8) = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v22 = *(void *)(v15 + 16);
      uint64_t v19 = *(void *)(v15 + 24);
      *(void *)(v15 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
      BOOL v20 = v22 != 0;
    }
    else
    {
      uint64_t v19 = 0;
      BOOL v20 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 != 1) {
      uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v15);
    }
    if (!v18)
    {
      if (v19) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      if (!v20)
      {
        return (uint64_t *)WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::createCompatibleLayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 832);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    uint64_t result = WebKit::PlatformCALayerRemote::create(&v8, a2, a3, v6);
    *a4 = v8;
  }
  else
  {
    uint64_t result = 1106;
    __break(0xC471u);
  }
  return result;
}

void WebKit::PlatformCALayerRemote::setNeedsDisplay(WebKit::RemoteLayerBackingStore **this, WebKit::PlatformCALayerRemote *a2)
{
  if (*((unsigned char *)this + 656))
  {
    WebKit::PlatformCALayerRemote::ensureBackingStore((WebKit::PlatformCALayerRemote *)this, a2);
    uint64_t v3 = this[59];
    WebKit::RemoteLayerBackingStore::setNeedsDisplay(v3);
  }
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebCore::PlatformCALayer **a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 904);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    WebKit::PlatformCALayerRemote::create(&v11, a2, a3, v6);
    uint64_t v7 = v11;
    uint64_t result = WebCore::PlatformCALayer::canHaveBackingStore(v11);
    if (result)
    {
      uint64_t v10 = WebCore::screenSupportsExtendedColor(0, v9);
      uint64_t result = (*(uint64_t (**)(WebCore::PlatformCALayer *, uint64_t))(*(void *)v7 + 472))(v7, v10);
    }
    *a4 = v7;
  }
  else
  {
    uint64_t result = 69;
    __break(0xC471u);
  }
  return result;
}

void sub_19866A538(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PlatformCALayerRemote::updateBackingStore(WebKit::PlatformCALayerRemote *this)
{
  if (!*((void *)this + 59)) {
    return;
  }
  long long v2 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(this);
  CFTypeRef v3 = *v2;
  if (*v2) {
    long long v2 = (CFTypeRef *)CFRetain(*v2);
  }
  int v13 = 1065353216;
  __int16 v14 = 0;
  v10[0] = *((unsigned char *)this + 824) ^ 1;
  uint64_t v11 = *((void *)this + 56);
  int v4 = *((unsigned __int8 *)this + 825);
  if (*((unsigned char *)this + 825))
  {
    uint64_t v5 = (const void *)WebCore::extendedSRGBColorSpaceRef((WebCore *)v2);
    CFTypeRef v8 = v5;
    if (v5) {
      CFRetain(v5);
    }
    WebCore::DestinationColorSpace::DestinationColorSpace();
    uint64_t v6 = cf;
    if (!cf) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v6 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v2);
  CFTypeRef cf = v6;
  if (v6)
  {
    CFRetain(v6);
LABEL_11:
    CFRetain(v6);
  }
LABEL_12:
  CFTypeRef v12 = v6;
  if (v3) {
    CFRelease(v3);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v4 && v8) {
    CFRelease(v8);
  }
  int v13 = *((_DWORD *)this + 153);
  LOBYTE(v1WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *((unsigned char *)this + 825);
  HIBYTE(v1WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *((unsigned char *)this + 660);
  (*(void (**)(void, unsigned char *))(**((void **)this + 59) + 40))(*((void *)this + 59), v10);
  CFTypeRef v7 = v12;
  CFTypeRef v12 = 0;
  if (v7) {
    CFRelease(v7);
  }
}

void sub_19866A69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemote::create(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0xFE) == 4)
  {
    CFTypeRef v8 = (_OWORD *)WTF::fastMalloc((WTF *)0x360);
    WebKit::PlatformCALayerRemoteTiledBacking::PlatformCALayerRemoteTiledBacking((uint64_t)v8, a2, a3, a4);
  }
  else
  {
    CFTypeRef v8 = (_OWORD *)WTF::fastMalloc((WTF *)0x348);
    WebKit::PlatformCALayerRemote::PlatformCALayerRemote((uint64_t)v8, a2, a3, a4);
  }
  uint64_t result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a4, v8, a2);
  *a1 = v8;
  return result;
}

void sub_19866A790(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeContext::layerDidEnterContext(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v8 = a2[1];
  char v11 = 0;
  char v12 = 0;
  int v14 = 0;
  long long v9 = 0uLL;
  char v10 = 0;
  (*(void (**)(_OWORD *, long long *, uint64_t, uint64_t))(*(void *)a2 + 880))(a2, &v9, a1, a3);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::add<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)v7, (uint64_t *)(a1 + 32), &v8, &v9);
  uint64_t v6 = a2;
  uint64_t result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>((uint64_t)v7, (uint64_t *)(a1 + 56), &v8, (uint64_t *)&v6);
  if (v14 != -1) {
    return ((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9DF240[v14])(v7, &v13);
  }
  return result;
}

void sub_19866A8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DF240[a25])(&a10, &a23);
  }
  _Unwind_Resume(exception_object);
}

__n128 WebKit::PlatformCALayerRemote::populateCreationProperties(__n128 *a1, __n128 *a2, uint64_t a3, unsigned __int8 a4)
{
  __n128 result = a1[1];
  *a2 = result;
  a2[1].n128_u8[0] = a4;
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v30 = -1640531527;
  __int16 v31 = 0;
  char v32 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v30, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  unsigned int v12 = result & v9;
  uint64_t v13 = (void *)(v8 + 24 * (result & v9));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  if (*(_OWORD *)v13 != 0)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == *a3 && v14 == a3[1])
      {
        uint64_t v28 = *a2;
        if (*a2) {
          unsigned int v29 = *(_DWORD *)(v28 - 4);
        }
        else {
          unsigned int v29 = 0;
        }
        char v27 = 0;
        uint64_t v26 = v28 + 24 * v29;
        goto LABEL_24;
      }
      if (v14 == -1) {
        uint64_t v16 = v13;
      }
      unsigned int v12 = (v12 + v17) & v9;
      uint64_t v13 = (void *)(v8 + 24 * v12);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      ++v17;
    }
    while (*(_OWORD *)v13 != 0);
    if (v16)
    {
      *uint64_t v16 = 0;
      v16[1] = 0;
      void v16[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = v16;
    }
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a3;
  uint64_t v18 = *a4;
  if (v18)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v18 + 56), v18);
    uint64_t v19 = *(atomic_uint **)(v18 + 56);
    if (v19) {
      atomic_fetch_add(v19, 1u);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t result = v13[2];
  void v13[2] = v19;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = WTF::fastFree((WTF *)result, v11);
  }
  uint64_t v20 = *a2;
  if (*a2) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_23;
    }
LABEL_26:
    uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a2, (uint64_t)v13);
    uint64_t v13 = (void *)result;
    uint64_t v22 = *a2;
    if (*a2) {
      LODWORD(v25) = *(_DWORD *)(v22 - 4);
    }
    else {
      LODWORD(v25) = 0;
    }
    goto LABEL_23;
  }
  if (3 * v25 <= 4 * v24) {
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v26 = v22 + 24 * v25;
  char v27 = 1;
LABEL_24:
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v27;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;

  uint64_t v26 = a4;
  CFTypeRef v7 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a2, 0), (CFTypeRef v7 = *a2) != 0))
  {
    uint64_t v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t result = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::hash(a3);
  char v10 = result & v8;
  char v11 = (void *)(v7 + 24 * (result & v8));
  uint64_t v13 = *v11;
  unsigned int v12 = v11[1];
  if (*(_OWORD *)v11 != 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 1;
    do
    {
      if (v13 == *a3 && v12 == a3[1])
      {
        uint64_t v24 = *a2;
        if (*a2) {
          unint64_t v25 = *(_DWORD *)(v24 - 4);
        }
        else {
          unint64_t v25 = 0;
        }
        int v23 = 0;
        uint64_t v22 = v24 + 24 * v25;
        goto LABEL_19;
      }
      if (v12 == -1) {
        uint64_t v14 = v11;
      }
      char v10 = (v10 + v15) & v8;
      char v11 = (void *)(v7 + 24 * v10);
      uint64_t v13 = *v11;
      unsigned int v12 = v11[1];
      ++v15;
    }
    while (*(_OWORD *)v11 != 0);
    if (v14)
    {
      *uint64_t v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      char v11 = v14;
    }
  }
  uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::translate<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>> WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::PlatformCALayerRemote*>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&,WebKit::PlatformCALayerRemote* &&)::{lambda(void)#1}>((uint64_t)v11, a3, &v26);
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *a2;
  if (*a2) {
    uint64_t v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  int v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_18;
    }
LABEL_27:
    uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a2, (uint64_t)v11);
    char v11 = (void *)result;
    uint64_t v18 = *a2;
    if (*a2) {
      LODWORD(v2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = *(_DWORD *)(v18 - 4);
    }
    else {
      LODWORD(v2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
    }
    goto LABEL_18;
  }
  if (3 * v21 <= 4 * v20) {
    goto LABEL_27;
  }
LABEL_18:
  uint64_t v22 = v18 + 24 * v21;
  int v23 = 1;
LABEL_19:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v22;
  *(unsigned char *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v23;
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::add<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>(uint64_t a1, uint64_t *a2, void *a3, long long *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  LODWORD(v32) = -1640531527;
  WORD2(v32) = 0;
  BYTE6(v32) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v32, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
  unsigned int v11 = result & v9;
  uint64_t v12 = v8 + 96 * (result & v9);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    uint64_t v27 = 0;
    int v28 = 1;
    do
    {
      if (v14 == *a3 && v13 == a3[1])
      {
        uint64_t v29 = *a2;
        if (*a2) {
          unsigned int v30 = *(_DWORD *)(v29 - 4);
        }
        else {
          unsigned int v30 = 0;
        }
        char v26 = 0;
        uint64_t v25 = v29 + 96 * v30;
        goto LABEL_13;
      }
      if (v13 == -1) {
        uint64_t v27 = v12;
      }
      unsigned int v11 = (v11 + v28) & v9;
      uint64_t v12 = v8 + 96 * v11;
      uint64_t v14 = *(void *)v12;
      uint64_t v13 = *(void *)(v12 + 8);
      ++v28;
    }
    while (*(_OWORD *)v12 != 0);
    if (v27)
    {
      *(unsigned char *)(v27 + 40) = 0;
      *(unsigned char *)(v27 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
      *(_DWORD *)(v27 + 88) = 0;
      *(_OWORD *)uint64_t v27 = 0u;
      *(_OWORD *)(v27 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0u;
      *(unsigned char *)(v27 + 32) = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v12 = v27;
    }
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
  long long v15 = a4[1];
  long long v32 = *a4;
  long long v33 = v15;
  long long v34 = a4[2];
  char v35 = *((unsigned char *)a4 + 48);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v36, (uint64_t)a4 + 56);
  char v16 = v35;
  long long v18 = v33;
  long long v17 = v34;
  *(_OWORD *)(v12 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v32;
  *(_OWORD *)(v12 + 32) = v18;
  *(_OWORD *)(v12 + 48) = v17;
  *(unsigned char *)(v12 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = v16;
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>>(v12 + 72, (uint64_t)v36);
  if (v37 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9DF240[v37])(&v31, v36);
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a2, v12);
    uint64_t v12 = result;
    uint64_t v21 = *a2;
    if (*a2) {
      LODWORD(v2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = *(_DWORD *)(v21 - 4);
    }
    else {
      LODWORD(v2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
    }
    goto LABEL_12;
  }
  if (3 * v24 <= 4 * v23) {
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v25 = v21 + 96 * v24;
  char v26 = 1;
LABEL_13:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = v26;
  return result;
}

void sub_19866ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  if (a23 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9DF240[a23])(&a13, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v2 == -1)
  {
    if (v3 != -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v3 != -1)
    {
LABEL_3:
      uint64_t v5 = result;
      return ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRSR_SV_EEEDcmSX_DpOT0____fdiagonal[v3])(&v5);
    }
    uint64_t v4 = result;
    uint64_t result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v2])(&v6);
    *(_DWORD *)(v4 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 16);
  if (v2)
  {
    if (v2 != -1)
    {
      uint64_t v3 = *(void *)result;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v2])(&v4, v1);
      uint64_t v1 = v3;
    }
    *(_DWORD *)(v1 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::PlatformCALayerRemote(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)WebCore::PlatformCALayer::PlatformCALayer();
  v8[7] = 0;
  *uint64_t v8 = &unk_1EE9DE2D8;
  WebKit::LayerProperties::LayerProperties((WebKit::LayerProperties *)(v8 + 8));
  *(_WORD *)(a1 + 82WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  int v9 = *(atomic_uint **)(a4 + 16);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  *(void *)(a1 + 832) = v9;
  if (a3 && a2 != 3 && a2 != 9)
  {
    *(float *)(a1 + 612) = (*(float (**)(uint64_t))(*(void *)a3 + 152))(a3);
    *(int8x16_t *)(a1 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x20000uLL));
  }
  return a1;
}

void sub_19866AFD8(_Unwind_Exception *a1, void *a2)
{
  CFTypeRef v7 = (unsigned int *)*((void *)v2 + 104);
  *((void *)v2 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  uint64_t v8 = *((void *)v2 + 102);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  }
  int v9 = (unsigned int *)*((void *)v2 + 101);
  *((void *)v2 + 10WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  WebKit::LayerProperties::~LayerProperties(v4);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v10);
  WebCore::PlatformCALayer::~PlatformCALayer(v2);
  _Unwind_Resume(a1);
}

void sub_19866B068()
{
}

WebKit::LayerProperties *WebKit::LayerProperties::LayerProperties(WebKit::LayerProperties *this)
{
  *((_OWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((void *)this + 12) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0u;
  *((unsigned char *)this + 108) = 0;
  *((unsigned char *)this + 196) = 0;
  *((_DWORD *)this + 50) = 0;
  *(_DWORD *)((char *)this + 203) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_DWORD *)((char *)this + 21WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *((unsigned char *)this + 2std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 1;
  *((_DWORD *)this + 70) = 0;
  *(_DWORD *)((char *)this + 283) = 0;
  *(_DWORD *)((char *)this + 29WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 7WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *(_DWORD *)((char *)this + 299) = 0;
  *((_DWORD *)this + 76) = 0;
  *(_DWORD *)((char *)this + 307) = 0;
  *((_DWORD *)this + 78) = 0;
  *((unsigned char *)this + 3std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  *((_OWORD *)this + 1WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0u;
  *(void *)((char *)this + 27WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(void *)((char *)this + 36WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0x3F0000003F000000;
  *(void *)((char *)this + 372) = 0;
  *((_DWORD *)this + 99) = 0;
  *(void *)((char *)this + 380) = 0;
  *(void *)((char *)this + 388) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)this + 50) = _D1;
  *((_DWORD *)this + 12WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 5WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = 0;
  *((void *)this + 67) = 0;
  *(_OWORD *)((char *)this + 50WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_OWORD *)this + 3WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = xmmword_1994F5DE0;
  *((_DWORD *)this + 140) = 1065353216;
  *(_OWORD *)((char *)this + 568) = xmmword_1994F5DF0;
  *((void *)this + 73) = 0x1010001000000;
  *((unsigned char *)this + 592) = 1;
  *((unsigned char *)this + 597) = 0;
  *(_DWORD *)((char *)this + 593) = 0;
  *((_WORD *)this + 299) = 1;
  *((unsigned char *)this + 600) = 0;
  WebCore::EventRegion::EventRegion((WebKit::LayerProperties *)((char *)this + 608));
  return this;
}

void sub_19866B1C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v20 = *(void *)(v13 + 576);
  if ((v20 & 0x8000000000000) != 0)
  {
    long long v33 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, a2);
    }
  }
  uint64_t v21 = *v18;
  if ((*v18 & 0x8000000000000) != 0)
  {
    long long v34 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
    }
  }
  uint64_t v22 = *(unsigned int *)(v13 + 496);
  if (v22 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v22])(&a13, v13 + 440);
  }
  *(_DWORD *)(v13 + 496) = -1;
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](v17, 0);
  WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties(v16);
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v15, v23);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 88, v24);
  char v26 = *(WTF::StringImpl ***)(v13 + 80);
  if (v26) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v25);
  }
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v25);
  int v28 = *(WTF **)(v13 + 48);
  if (v28)
  {
    *(void *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    WTF::fastFree(v28, v27);
  }
  uint64_t v29 = *(WTF **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v29) {
    WTF::fastFree(v29, v27);
  }
  unsigned int v30 = *(WTF **)(v13 + 32);
  *(void *)(v13 + 32) = 0;
  if (v30) {
    WTF::fastFree(v30, v27);
  }
  char v31 = *(WTF **)(v13 + 24);
  *(void *)(v13 + 2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  if (v31) {
    WTF::fastFree(v31, v27);
  }
  long long v32 = *(WTF::StringImpl **)(v13 + 16);
  *(void *)(v13 + std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::PlatformCALayerRemote::setWantsDeepColorBackingStore(WebKit::PlatformCALayerRemote *this, char a2)
{
  *((unsigned char *)this + 825) = a2;
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

void WebKit::RemoteLayerWithRemoteRenderingBackingStore::ensureBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, const Parameters *a2)
{
  char v4 = (unsigned __int8 *)this + 24;
  if ((*((unsigned char *)this + 24) == 0) == (*(unsigned char *)a2 != 0)
    || (*((float *)this + 7) == *((float *)a2 + 1) ? (BOOL v5 = *((float *)this + 8) == *((float *)a2 + 2)) : (BOOL v5 = 0),
        !v5
     || !WebCore::operator==()
     || *((float *)this + 12) != *((float *)a2 + 6)
     || *((unsigned __int8 *)this + 52) != *((unsigned __int8 *)a2 + 28)
     || *((unsigned __int8 *)this + 53) != *((unsigned __int8 *)a2 + 29)))
  {
    uint64_t v6 = *(void *)a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *(void *)char v4 = v6;
    uint64_t v7 = *((void *)a2 + 2);
    if (v7) {
      CFRetain(*((CFTypeRef *)a2 + 2));
    }
    uint64_t v8 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = v7;
    if (v8) {
      CFRelease(v8);
    }
    int v9 = *((_DWORD *)a2 + 6);
    *((_WORD *)this + 26) = *((_WORD *)a2 + 14);
    *((_DWORD *)this + 12) = v9;
    if (*((unsigned char *)this + 176))
    {
      uint64_t v19 = *((unsigned int *)this + 42);
      if (v19 != -1) {
        off_1EE9C0238[v19]((int)&v21, (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)((char *)this + 104));
      }
      *((_DWORD *)this + 42) = -1;
      *((unsigned char *)this + 176) = 0;
    }
    *((unsigned char *)this + 456) = 1;
    uint64_t v10 = *((void *)this + 40);
    if (v10)
    {
      float v11 = *((float *)this + 7);
      float v12 = *((float *)this + 8);
      float v13 = *((float *)this + 12);
      uint64_t v14 = (const void *)*((void *)this + 5);
      CFTypeRef v20 = v14;
      if (v14) {
        CFRetain(v14);
      }
      int v15 = *v4;
      if (v15 || !*((unsigned char *)this + 52))
      {
        char v16 = *((unsigned char *)this + 53) ^ 1;
      }
      else if (*((unsigned char *)this + 53))
      {
        char v16 = 2;
      }
      else
      {
        char v16 = 3;
      }
      uint64_t v17 = *(void *)(*((void *)this + 2) + 48);
      if (v17)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 224))(v17)) {
          char v18 = 4;
        }
        else {
          char v18 = 3;
        }
      }
      else
      {
        char v18 = 3;
      }
      WebKit::RemoteImageBufferSetProxy::setConfiguration(v10, &v20, v16, v15 == 0, v18, v11, v12, v13);
      if (v14) {
        CFRelease(v14);
      }
    }
  }
}

void sub_19866B518(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlatformCALayerRemote::ensureBackingStore(WebKit::PlatformCALayerRemote *this, WebKit::PlatformCALayerRemote *a2)
{
  uint64_t v3 = *((void *)this + 104);
  if (v3)
  {
    if (*(void *)(v3 + 8))
    {
      uint64_t v4 = *((void *)this + 59);
      if (!v4
        || (int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4),
            v5 != WebKit::RemoteLayerBackingStore::processModelForLayer(this, v6)))
      {
        WebKit::RemoteLayerBackingStore::createForLayer(this, a2, &v8);
        uint64_t v7 = *((void *)this + 59);
        *((void *)this + 59) = v8;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
    }
  }

  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

void WebKit::RemoteImageBufferSetProxy::setConfiguration(uint64_t a1, CFTypeRef *a2, char a3, char a4, char a5, float a6, float a7, float a8)
{
  *(float *)(a1 + 60) = a6;
  *(float *)(a1 + 6WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = a7;
  *(float *)(a1 + 68) = a8;
  CFTypeRef v12 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  float v13 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  if (v13) {
    CFRelease(v13);
  }
  *(unsigned char *)(a1 + 80) = a3;
  *(unsigned char *)(a1 + 8WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = a4;
  *(unsigned char *)(a1 + 82) = a5;
  *(unsigned char *)(a1 + 88) = 1;
}

WebKit::RemoteLayerWithRemoteRenderingBackingStore *WebKit::RemoteLayerBackingStore::createForLayer@<X0>(WebKit::RemoteLayerBackingStore *this@<X0>, WebKit::PlatformCALayerRemote *a2@<X1>, WebKit::RemoteLayerWithRemoteRenderingBackingStore **a3@<X8>)
{
  if (WebKit::RemoteLayerBackingStore::processModelForLayer(this, a2))
  {
    int v5 = (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)WTF::fastMalloc((WTF *)0x1D0);
    uint64_t result = WebKit::RemoteLayerWithRemoteRenderingBackingStore::RemoteLayerWithRemoteRenderingBackingStore(v5, this);
    *a3 = v5;
  }
  else
  {
    uint64_t result = std::make_unique[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore,WebKit::PlatformCALayerRemote &>(this, (uint64_t *)&v7);
    *a3 = v7;
  }
  return result;
}

void sub_19866B6E4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

BOOL WebKit::RemoteLayerBackingStore::processModelForLayer(WebKit::RemoteLayerBackingStore *this, WebKit::PlatformCALayerRemote *a2)
{
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  return *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 762)
      && !WebCore::PlatformCALayer::needsPlatformContext(this);
}

WebKit::RemoteLayerWithRemoteRenderingBackingStore *WebKit::RemoteLayerWithRemoteRenderingBackingStore::RemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, WebKit::PlatformCALayerRemote *a2)
{
  uint64_t v3 = WebKit::RemoteLayerBackingStore::RemoteLayerBackingStore(this, a2);
  *(void *)uint64_t v3 = &unk_1EE9C0158;
  *((void *)v3 + 40) = 0;
  *((unsigned char *)v3 + 328) = 0;
  *((unsigned char *)v3 + 336) = 0;
  *((unsigned char *)v3 + 34WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 0;
  *((unsigned char *)v3 + 352) = 0;
  *((unsigned char *)v3 + 360) = 0;
  *((unsigned char *)v3 + 368) = 0;
  *((unsigned char *)v3 + 376) = 0;
  *((unsigned char *)v3 + 448) = 0;
  *((unsigned char *)v3 + 456) = 1;
  uint64_t v4 = *(void *)(*((void *)v3 + 2) + 832);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 88);
      if (v6)
      {
        uint64_t v7 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(*(WebKit::WebPage **)(*(void *)(v6 + 16) + 24));
        WebKit::RemoteRenderingBackendProxy::createRemoteImageBufferSet(v7, &v14);
        uint64_t v9 = v14;
        uint64_t v14 = 0;
        uint64_t v10 = *((void *)this + 40);
        *((void *)this + 40) = v9;
        if (v10)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 16), v8);
          uint64_t v12 = v14;
          uint64_t v14 = 0;
          if (v12) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 16), v11);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::ensureRemoteRenderingBackendProxy(WebKit::WebPage *this)
{
  uint64_t result = *((void *)this + 300);
  if (!result)
  {
    WebKit::RemoteRenderingBackendProxy::create(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = *((void *)this + 300);
    *((void *)this + 300) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        (*(void (**)(WTF::RunLoop *))(*(void *)v5 + 8))(v5);
      }
    }
    return *((void *)this + 300);
  }
  return result;
}

uint64_t *WebKit::RemoteRenderingBackendProxy::createRemoteImageBufferSet@<X0>(WebKit::RemoteRenderingBackendProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (WebKit::RemoteImageBufferSetProxy *)WTF::fastMalloc((WTF *)0x78);
  uint64_t v5 = WebKit::RemoteImageBufferSetProxy::RemoteImageBufferSetProxy(v4, this);
  *a2 = (uint64_t)v5;
  uint64_t v6 = *((void *)v5 + 3);
  uint64_t v9 = *((void *)v5 + 5);
  uint64_t v10 = v6;
  v8[0] = &v10;
  v8[1] = &v9;
  WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(this, v8, *((void *)this + 8));
  uint64_t v10 = *((void *)v4 + 3);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>> &>((uint64_t *)this + 27, &v10, a2, (uint64_t)v8);
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v45);
  uint64_t v7 = v45;
  if (!v45) {
    return 1;
  }
  double v8 = *((double *)v45 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v9 = v8 + v10;
  }
  if (*((void *)v7 + 7) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
    if (!buf[16]) {
      goto LABEL_67;
    }
    uint64_t v32 = *(void *)buf;
    unint64_t v31 = *(void *)&buf[8];
    unint64_t v33 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - *(void *)buf;
    if (v33 >= *(void *)buf)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v3WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 4) = 2871;
        goto LABEL_44;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_44:
    int v37 = (void *)((v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v37 >= v32 + v35)
    {
      unint64_t v35 = (unint64_t)v37 - v32 + 8;
      if ((unint64_t)v37 - v32 > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        goto LABEL_70;
      }
      *int v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *((void *)v7 + 8);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *((void *)v7 + 10) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v41) == 0x80000000);
      *((void *)v7 + 7) = a3;
      goto LABEL_5;
    }
LABEL_70:
    uint64_t RemoteImageBuffer = 17;
    goto LABEL_61;
  }
LABEL_5:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
  if (!buf[16])
  {
LABEL_67:
    uint64_t RemoteImageBuffer = 15;
    goto LABEL_61;
  }
  uint64_t v13 = *(void *)buf;
  unint64_t v14 = *(void *)&buf[8];
  unint64_t v15 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v16 = v15 - *(void *)buf;
  if (v15 >= *(void *)buf)
  {
    unint64_t v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + vstd::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16) = 1330;
      goto LABEL_12;
    }
    unint64_t v14 = 0;
  }
  unint64_t v17 = 0;
LABEL_12:
  unint64_t v19 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = v19 - (v13 + v17);
  if (v19 >= v13 + v17)
  {
    unint64_t v21 = v19 - v13;
    unint64_t v22 = v20 + v17 + 8;
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v14)
    {
      unint64_t v14 = 0;
    }
    else
    {
      *(void *)(v13 + v2WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((void *)this + 1) = **a2;
      unint64_t v17 = v22;
    }
  }
  unint64_t v24 = (void *)((v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v13 + v17)
  {
    uint64_t v25 = (char *)v24 - v13;
    if ((unint64_t)v24 - v13 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_59;
    }
    unint64_t v17 = (unint64_t)(v25 + 8);
    if ((unint64_t)(v25 + 8) > v14) {
      goto LABEL_59;
    }
    *unint64_t v24 = *a2[1];
  }
  if (v14)
  {
    uint64_t v26 = *((void *)v7 + 9);
    unint64_t v27 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v28 = *((void *)v7 + 8);
    if (v27 + 16 >= v28) {
      unint64_t v27 = 0;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v29 = v27 + v17;
    if (v28 <= v29) {
      unint64_t v29 = 0;
    }
    *((void *)v7 + 10) = v29;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v26 + 16) + 128), v29) == 0x80000000 || v7[29])
    {
      if (*((unsigned char *)v7 + 104)) {
        MEMORY[0x1997420B0](v7[23]);
      }
      v7[29] = 0;
    }
    uint64_t RemoteImageBuffer = 0;
    goto LABEL_32;
  }
LABEL_59:
  if (buf[16])
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)v7 + 1);
    uint64_t RemoteImageBuffer = IPC::Connection::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet>((uint64_t)v46, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
    if (!RemoteImageBuffer)
    {
LABEL_32:
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v12);
      return RemoteImageBuffer;
    }
LABEL_61:
    int v42 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v43 = *((void *)a1 + 8);
      uint64_t v44 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v43;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "RemoteRenderingBackend_CreateRemoteImageBufferSet";
      __int16 v48 = 2082;
      uint64_t v49 = v44;
      _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}